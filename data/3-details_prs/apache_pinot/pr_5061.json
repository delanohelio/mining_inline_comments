{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzA5OTYw", "number": 5061, "title": "Improvements to data anonymizer tool", "bodyText": "Following improvements are made based on the the latest usage to enhance an internal test framework\n\n\nThe global dictionary code was taking too long since the initial implementation was array based and used linear search while building the global dictionary. We had earlier avoided use of map/set to minimize the heap overhead as opposed to optimizing for performance. But it turns out that for higher cardinalities, linear search is significantly slowing down this tool. This PR implements a Map based global dictionary to keep the bound to O(logN).\n\n\nFixed bug for multi-value support. Avro API needs Object[] to be casted as Arrays.asList\n\n\nUsers of this tool might use a partial production dataset (as we are planning to do so) to workaround the memory requirements of this tool. In this case, the global dictionary will not have each and every value from the dictionary of original segment. So the query generator needs to be aware of this and should ignore such queries for which it is not able to rewrite the predicate since the original value never made it to the global dictionary as it was not a part of the chosen subset of segments.\n\n\nA new global dictionary interface is implemented. Existing array based implementation is kept intact and a new map based concrete implementation is written. By default, the tool will now use map based global dictionaries.", "createdAt": "2020-02-10T19:27:23Z", "url": "https://github.com/apache/pinot/pull/5061", "merged": true, "mergeCommit": {"oid": "24529612024cce47ac5907b34b1898b951d1cbfb"}, "closed": true, "closedAt": "2020-02-10T22:32:58Z", "author": {"login": "siddharthteotia"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDCLAMgH2gAyMzczMzA5OTYwOjZlMjBkOTgyOTEyNjA5ZTk2NzUwOGYyOWU0ZmQwYTRmNjdmMTIxZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDE7uvgFqTM1NjMxNDM4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6e20d982912609e967508f29e4fd0a4f67f121fb", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/6e20d982912609e967508f29e4fd0a4f67f121fb", "committedDate": "2020-02-10T19:19:41Z", "message": "Improvements to data anonymizer tool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f6020445f60a2cdab3016385140afb42884df1b", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/7f6020445f60a2cdab3016385140afb42884df1b", "committedDate": "2020-02-10T19:36:29Z", "message": "Fix build"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjA4Mjc0", "url": "https://github.com/apache/pinot/pull/5061#pullrequestreview-356208274", "createdAt": "2020-02-10T19:38:17Z", "commit": {"oid": "7f6020445f60a2cdab3016385140afb42884df1b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTozODoxN1rOFny-rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTozODoxN1rOFny-rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3NDAzMA==", "bodyText": "Nothing changed here from original code. Just moved to a new class (earlier this whole implementation was inside the PinotDataAndQueryAnonymizer class)", "url": "https://github.com/apache/pinot/pull/5061#discussion_r377274030", "createdAt": "2020-02-10T19:38:17Z", "author": {"login": "siddharthteotia"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/anonymizer/ArrayBasedGlobalDictionaries.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.anonymizer;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.PrintWriter;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.pinot.core.segment.index.ColumnMetadata;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.utils.ByteArray;\n+\n+\n+public class ArrayBasedGlobalDictionaries implements GlobalDictionaries {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6020445f60a2cdab3016385140afb42884df1b"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjA5MTcw", "url": "https://github.com/apache/pinot/pull/5061#pullrequestreview-356209170", "createdAt": "2020-02-10T19:39:40Z", "commit": {"oid": "7f6020445f60a2cdab3016385140afb42884df1b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTozOTo0MFrOFnzBZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTozOTo0MFrOFnzBZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3NDcyNw==", "bodyText": "This wrapper is needed so that we can set the derived values in global dictionary in sorted order while iterating over it", "url": "https://github.com/apache/pinot/pull/5061#discussion_r377274727", "createdAt": "2020-02-10T19:39:40Z", "author": {"login": "siddharthteotia"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/anonymizer/MapBasedGlobalDictionaries.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.anonymizer;\n+\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.PrintWriter;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.pinot.core.segment.index.ColumnMetadata;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.utils.ByteArray;\n+\n+\n+public class MapBasedGlobalDictionaries implements GlobalDictionaries {\n+  private final static int INT_BASE_VALUE = 1000;\n+  private final static long LONG_BASE_VALUE = 100000;\n+  private static final float FLOAT_BASE_VALUE = 100.23f;\n+  private static final double DOUBLE_BASE_VALUE = 1000.2375;\n+\n+  private final Map<String, OrigAndDerivedValueHolder> _columnToGlobalDictionary;\n+\n+  MapBasedGlobalDictionaries() {\n+    _columnToGlobalDictionary = new HashMap<>();\n+  }\n+\n+  /**\n+   * First step towards building global dictionary\n+   * by inserting the original values from segments\n+   * into global dictionary\n+   * @param origValue original value\n+   * @param column column name\n+   * @param columnMetadata column metadata\n+   * @param cardinality total cardinality of column\n+   */\n+  @Override\n+  public void addOrigValueToGlobalDictionary(\n+      Object origValue,\n+      String column,\n+      ColumnMetadata columnMetadata,\n+      int cardinality) {\n+    FieldSpec.DataType dataType = columnMetadata.getDataType();\n+    _columnToGlobalDictionary.putIfAbsent(column, new OrigAndDerivedValueHolder(dataType));\n+    OrigAndDerivedValueHolder origAndDerivedValueHolder = _columnToGlobalDictionary.get(column);\n+    if (dataType == FieldSpec.DataType.BYTES) {\n+      origAndDerivedValueHolder.setOrigValue(new ByteArray((byte[])origValue));\n+    } else {\n+      origAndDerivedValueHolder.setOrigValue(origValue);\n+    }\n+  }\n+\n+  /**\n+   * This is the second step where we complete the global dictionaries\n+   * by sorting the original values to get sort order across all segments\n+   */\n+  @Override\n+  public void sortOriginalValuesInGlobalDictionaries() {\n+    // NO-OP since we use a sorted map so the global dictionary\n+    // is already sorted\n+  }\n+\n+  /**\n+   * This is the third and final step where we complete the global\n+   * dictionaries by generating values:\n+   *\n+   * For numeric columns, we generate in order since\n+   * we start with a base value.\n+   * For string column, we first generate and then sort\n+   */\n+  @Override\n+  public void addDerivedValuesToGlobalDictionaries() {\n+    // update global dictionary for each column by adding\n+    // the corresponding generated value for each orig value\n+    for (Map.Entry<String, OrigAndDerivedValueHolder> entry : _columnToGlobalDictionary.entrySet()) {\n+      OrigAndDerivedValueHolder origAndDerivedValueHolder = entry.getValue();\n+      generateDerivedValuesForGlobalDictionary(origAndDerivedValueHolder);\n+    }\n+  }\n+\n+  @Override\n+  public void serialize(String outputDir) throws Exception {\n+    // write global dictionary for each column\n+    for (String column : _columnToGlobalDictionary.keySet()) {\n+      PrintWriter dictionaryWriter = new PrintWriter(new BufferedWriter(new FileWriter(outputDir + \"/\" + column + DICT_FILE_EXTENSION)));\n+      OrigAndDerivedValueHolder origAndDerivedValueHolder = _columnToGlobalDictionary.get(column);\n+      Set<Map.Entry<Object, DerivedValue>> entries = origAndDerivedValueHolder._origAndDerivedValues.entrySet();\n+      Iterator<Map.Entry<Object, DerivedValue>> sortedIterator = entries.iterator();\n+      while (sortedIterator.hasNext()) {\n+        Map.Entry<Object, DerivedValue> entry = sortedIterator.next();\n+        dictionaryWriter.println(entry.getKey());\n+        dictionaryWriter.println(entry.getValue()._derivedValue);\n+      }\n+      dictionaryWriter.flush();\n+    }\n+  }\n+\n+  @Override\n+  public Object getDerivedValueForOrigValueSV(String column, Object origValue) {\n+    OrigAndDerivedValueHolder origAndDerivedValueHolder = _columnToGlobalDictionary.get(column);\n+    TreeMap<Object, DerivedValue> sortedMap = origAndDerivedValueHolder._origAndDerivedValues;\n+    return sortedMap.get(origValue)._derivedValue;\n+  }\n+\n+  @Override\n+  public Object[] getDerivedValuesForOrigValuesMV(String column, Object[] origMultiValues) {\n+    OrigAndDerivedValueHolder origAndDerivedValueHolder = _columnToGlobalDictionary.get(column);\n+    TreeMap<Object, DerivedValue> sortedMap = origAndDerivedValueHolder._origAndDerivedValues;\n+    int length = origMultiValues.length;\n+    Object[] derivedMultiValues = new Object[length];\n+    for (int i = 0; i < length; i++) {\n+      derivedMultiValues[i] = sortedMap.get(origMultiValues[i]);\n+    }\n+    return derivedMultiValues;\n+  }\n+\n+  private static class OrigAndDerivedValueHolder {\n+    FieldSpec.DataType _dataType;\n+    TreeMap<Object, DerivedValue> _origAndDerivedValues;\n+\n+    OrigAndDerivedValueHolder(FieldSpec.DataType dataType) {\n+      _dataType = dataType;\n+      _origAndDerivedValues = new TreeMap<>();\n+    }\n+\n+    void setOrigValue(Object origValue) {\n+     if (!_origAndDerivedValues.containsKey(origValue)) {\n+       _origAndDerivedValues.put(origValue, new DerivedValue());\n+     }\n+    }\n+  }\n+\n+  private static class DerivedValue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6020445f60a2cdab3016385140afb42884df1b"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjA3ODcy", "url": "https://github.com/apache/pinot/pull/5061#pullrequestreview-356207872", "createdAt": "2020-02-10T19:37:37Z", "commit": {"oid": "7f6020445f60a2cdab3016385140afb42884df1b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTozNzozN1rOFny9fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTozNzozN1rOFny9fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3MzcyNw==", "bodyText": "You can make it configurable instead of hard coding it as true.", "url": "https://github.com/apache/pinot/pull/5061#discussion_r377273727", "createdAt": "2020-02-10T19:37:37Z", "author": {"login": "jackjlli"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/AnonymizeDataCommand.java", "diffHunk": "@@ -116,7 +116,8 @@ public boolean execute()\n           _outputDir,\n           _avroFileNamePrefix,\n           filterColumnCardinalityMap,\n-          columnsToRetainDataFor);\n+          columnsToRetainDataFor,\n+          true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6020445f60a2cdab3016385140afb42884df1b"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7d07ee00b575540ee6e7f9b5d7e40179ad9e1e9", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/d7d07ee00b575540ee6e7f9b5d7e40179ad9e1e9", "committedDate": "2020-02-10T22:31:37Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzE0Mzgx", "url": "https://github.com/apache/pinot/pull/5061#pullrequestreview-356314381", "createdAt": "2020-02-10T22:32:43Z", "commit": {"oid": "d7d07ee00b575540ee6e7f9b5d7e40179ad9e1e9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1274, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}