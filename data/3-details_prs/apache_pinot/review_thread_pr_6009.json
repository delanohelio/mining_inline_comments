{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NDkwMjA4", "number": 6009, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMjowNTo1MlrOEi6mXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0ODoxMVrOEjOkug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDQ3MTMzOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMjowNTo1MlrOHQ_tQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMjowNTo1MlrOHQ_tQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzA0Mw==", "bodyText": "(nit) directly use the member variable? Same for other places\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      getDataTypeMismatchResult().addMismatchReason(String\n          \n          \n            \n                      _dataTypeMismatch.addMismatchReason(String", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583043", "createdAt": "2020-09-13T22:05:52Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDQ3MzQwOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMjowODo1M1rOHQ_uUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMjowODo1M1rOHQ_uUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzMxNQ==", "bodyText": "(nit)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n          \n          \n            \n                    if (!fieldSpec.getDataType().name().equals(avroColumnType.name())) {", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583315", "createdAt": "2020-09-13T22:08:53Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDQ3NTk1OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMjoxMToyOVrOHQ_vdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTo1Nzo0MFrOHRkc-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzYwNA==", "bodyText": "You might want to check single-value multi-value mismatch first, then check data type based on whether they match, or you will always get data type mismatch if single-value multi-value does not match", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583604", "createdAt": "2020-09-13T22:11:29Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE4NTA4Mw==", "bodyText": "In terms of the data type, we can use AvroUtils.extractFieldDataType(avroColumnField); to get the data type from the deepest element of AVRO data, then we compare it with the one in Pinot schema.", "url": "https://github.com/apache/pinot/pull/6009#discussion_r488185083", "createdAt": "2020-09-14T19:57:40Z", "author": {"login": "jackjlli"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzYwNA=="}, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDQ3Njg1OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMjoxMjo0MlrOHQ_v4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNTo0MFrOHRhxcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzcxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n          \n          \n            \n                              fieldSpec.getDataType().name(), avroColumnName, avroColumnType.name(),", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583713", "createdAt": "2020-09-13T22:12:42Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyOTc5Mg==", "bodyText": "Is this called before or after the ingestion transformation functions? For example, an ingestion transform function could change the name/type of data in input?", "url": "https://github.com/apache/pinot/pull/6009#discussion_r488129792", "createdAt": "2020-09-14T18:15:12Z", "author": {"login": "mayankshriv"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzcxMw=="}, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MTE2OA==", "bodyText": "This is called only once in init() method of SegmentIndexCreationDriver class before any transformation function gets called.", "url": "https://github.com/apache/pinot/pull/6009#discussion_r488141168", "createdAt": "2020-09-14T18:35:40Z", "author": {"login": "jackjlli"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzcxMw=="}, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDQ3ODk3OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMjoxNTowM1rOHQ_w4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDoxMjoxNlrOHRk6Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4Mzk3MA==", "bodyText": "Same here, check SV MV first, then based on that check the data type", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583970", "createdAt": "2020-09-13T22:15:03Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n       } else {\n+        // check data type mismatch", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE5MjU5MQ==", "bodyText": "Done.", "url": "https://github.com/apache/pinot/pull/6009#discussion_r488192591", "createdAt": "2020-09-14T20:12:16Z", "author": {"login": "jackjlli"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n       } else {\n+        // check data type mismatch", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4Mzk3MA=="}, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDQ4MDYxOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMjoxNzowOVrOHQ_xpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDoxMjoyMlrOHRk6cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4NDE2Nw==", "bodyText": "(nit) cache avroColumnSchema.getElementType().getType() in a local variable?", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487584167", "createdAt": "2020-09-13T22:17:09Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n       } else {\n+        // check data type mismatch\n+        FieldSpec.DataType dataTypeForMVColumn = AvroUtils.extractFieldDataType(avroColumnField);\n+        if (fieldSpec.getDataType() != dataTypeForMVColumn) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\",\n+                  columnName, fieldSpec.getDataType().name(), avroColumnName, dataTypeForMVColumn.name(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() >= org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is 'single-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is 'single-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n+        // check multi-value column structure mismatch\n         if (avroColumnType != org.apache.avro.Schema.Type.ARRAY) {\n           // multi-value column should use array structure for now.\n-          _multiValueStructureMismatch.addMismatchReason(String.format(\n+          getMultiValueStructureMismatchResult().addMismatchReason(String.format(\n               \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is of '%s' type, which should have been of 'array' type.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType(), avroColumnType.getName()));\n+              columnName, avroColumnName, getInputSchemaType(), avroColumnType.getName()));\n+        } else if (avroColumnSchema.getElementType().getType().ordinal() < org.apache.avro.Schema.Type.STRING", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE5MjYyNw==", "bodyText": "Done.", "url": "https://github.com/apache/pinot/pull/6009#discussion_r488192627", "createdAt": "2020-09-14T20:12:22Z", "author": {"login": "jackjlli"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n       } else {\n+        // check data type mismatch\n+        FieldSpec.DataType dataTypeForMVColumn = AvroUtils.extractFieldDataType(avroColumnField);\n+        if (fieldSpec.getDataType() != dataTypeForMVColumn) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\",\n+                  columnName, fieldSpec.getDataType().name(), avroColumnName, dataTypeForMVColumn.name(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() >= org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is 'single-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is 'single-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n+        // check multi-value column structure mismatch\n         if (avroColumnType != org.apache.avro.Schema.Type.ARRAY) {\n           // multi-value column should use array structure for now.\n-          _multiValueStructureMismatch.addMismatchReason(String.format(\n+          getMultiValueStructureMismatchResult().addMismatchReason(String.format(\n               \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is of '%s' type, which should have been of 'array' type.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType(), avroColumnType.getName()));\n+              columnName, avroColumnName, getInputSchemaType(), avroColumnType.getName()));\n+        } else if (avroColumnSchema.getElementType().getType().ordinal() < org.apache.avro.Schema.Type.STRING", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4NDE2Nw=="}, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mzc0Mzk0OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0ODoxMVrOHRd8eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0ODoxMVrOHRd8eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3ODQ1Nw==", "bodyText": "Can you update the comment in line 134 to be clearer, or just remove the comment, since the format string below says exactly what the mismatch is.", "url": "https://github.com/apache/pinot/pull/6009#discussion_r488078457", "createdAt": "2020-09-14T16:48:11Z", "author": {"login": "mcvsubbu"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n       } else {\n+        // check data type mismatch\n+        FieldSpec.DataType dataTypeForMVColumn = AvroUtils.extractFieldDataType(avroColumnField);\n+        if (fieldSpec.getDataType() != dataTypeForMVColumn) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\",\n+                  columnName, fieldSpec.getDataType().name(), avroColumnName, dataTypeForMVColumn.name(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() >= org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is 'single-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3877, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}