{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODk0MTM1", "number": 5399, "title": "DATE_TIME should work as the primary time column for Pinot tables", "bodyText": "#2756\nThis PR ensures that Pinot can use a DateTimeFieldSpec as a primary time column for the table.\nAfter this change, we no longer need to use TimeFieldSpec. TimeFieldSpec, TimeGranularitySpec have been marked as Deprecated.\nSome tests have been modified to test both cases, some have been changed to use datetime, and some retain time.\nManually tested creating segments, querying and retention for\n\nSchema with multiple dateTimeFieldSpecs\nSchema with just timeFieldSpec\nSchema with no time\nSchema with both time and dateTimeFieldSpec\nAbove all for hybrid tables as well (except the case with no time)\n\nSome changes\n\nThe segment.time.column.name property in the segment metadata is now used to keep primary time column. This will match with the time column name in tableConfig. This can be either timeFieldSpec or dateTimeFieldSpec.\nIf the primary time column is dateTimeFieldSpecs, the segment metadata will look like this\nE.g: schema has dimensions d1, d2, metric m1, dateTimeFieldSpecs dt1,dt2.\nPrimary time = dt1\n\nsegment.dimension.column.names = d1,d2\nsegment.metric.column.names = m1\nsegment.datetime.column.names = dt1,dt2\nsegment.time.column.name = dt1 // Note the repetition\n\nIf the primary time column is timeFieldSpecs, the segment metadata will look like this\nE.g: schema has dimensions d1, d2, metric m1, dateTimeFieldSpecs dt1,dt2, timeFieldSpec t\nPrimary time = t\nsegment.dimension.column.names = d1,d2\nsegment.metric.column.names = m1\nsegment.datetime.column.names = dt1,dt2\nsegment.time.column.name = t", "createdAt": "2020-05-16T01:20:41Z", "url": "https://github.com/apache/pinot/pull/5399", "merged": true, "mergeCommit": {"oid": "85474bae9752fea584ca3c2c88e961361dda5e17"}, "closed": true, "closedAt": "2020-05-19T23:46:11Z", "author": {"login": "npawar"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchuV2egFqTQxMzA0NDA4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABci8JJSABqjMzNTM5NDA5MDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDQ0MDg4", "url": "https://github.com/apache/pinot/pull/5399#pullrequestreview-413044088", "createdAt": "2020-05-16T03:45:05Z", "commit": {"oid": "9cc0d14cff863b3a34e59bf19b1387528f8484ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMzo0NTowNVrOGWX85w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMzo0NTowNVrOGWX85w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjExNDI3OQ==", "bodyText": "nit: please reformat this file", "url": "https://github.com/apache/pinot/pull/5399#discussion_r426114279", "createdAt": "2020-05-16T03:45:05Z", "author": {"login": "haibow"}, "path": "pinot-broker/src/test/java/org/apache/pinot/broker/routing/timeboundary/TimeBoundaryManagerTest.java", "diffHunk": "@@ -75,85 +75,112 @@ public void testTimeBoundaryManager() {\n     ExternalView externalView = Mockito.mock(ExternalView.class);\n \n     for (TimeUnit timeUnit : TimeUnit.values()) {\n-      // Test DAILY push table\n+      // Test DAILY push table, with timeFieldSpec\n       String rawTableName = \"testTable_\" + timeUnit + \"_DAILY\";\n-      TableConfig tableConfig = getTableConfig(rawTableName, timeUnit, \"DAILY\");\n-      setSchema(rawTableName, timeUnit);\n-\n-      // Start with no segment\n-      TimeBoundaryManager timeBoundaryManager = new TimeBoundaryManager(tableConfig, _propertyStore);\n-      Set<String> onlineSegments = new HashSet<>();\n-      timeBoundaryManager.init(externalView, onlineSegments);\n-      assertNull(timeBoundaryManager.getTimeBoundaryInfo());\n-\n-      // Add the first segment should update the time boundary\n-      String segment0 = \"segment0\";\n-      onlineSegments.add(segment0);\n-      setSegmentZKMetadata(rawTableName, segment0, 2, timeUnit);\n-      timeBoundaryManager.init(externalView, onlineSegments);\n-      verifyTimeBoundaryInfo(timeBoundaryManager.getTimeBoundaryInfo(), timeUnit.convert(1, TimeUnit.DAYS));\n-\n-      // Add a new segment with larger end time should update the time boundary\n-      String segment1 = \"segment1\";\n-      onlineSegments.add(segment1);\n-      setSegmentZKMetadata(rawTableName, segment1, 4, timeUnit);\n-      timeBoundaryManager.onExternalViewChange(externalView, onlineSegments);\n-      verifyTimeBoundaryInfo(timeBoundaryManager.getTimeBoundaryInfo(), timeUnit.convert(3, TimeUnit.DAYS));\n-\n-      // Add a new segment with smaller end time should not change the time boundary\n-      String segment2 = \"segment2\";\n-      onlineSegments.add(segment2);\n-      setSegmentZKMetadata(rawTableName, segment2, 3, timeUnit);\n-      timeBoundaryManager.onExternalViewChange(externalView, onlineSegments);\n-      verifyTimeBoundaryInfo(timeBoundaryManager.getTimeBoundaryInfo(), timeUnit.convert(3, TimeUnit.DAYS));\n-\n-      // Remove the segment with largest end time should update the time boundary\n-      onlineSegments.remove(segment1);\n-      timeBoundaryManager.onExternalViewChange(externalView, onlineSegments);\n-      verifyTimeBoundaryInfo(timeBoundaryManager.getTimeBoundaryInfo(), timeUnit.convert(2, TimeUnit.DAYS));\n-\n-      // Change segment ZK metadata without refreshing should not update the time boundary\n-      setSegmentZKMetadata(rawTableName, segment2, 5, timeUnit);\n-      timeBoundaryManager.onExternalViewChange(externalView, onlineSegments);\n-      verifyTimeBoundaryInfo(timeBoundaryManager.getTimeBoundaryInfo(), timeUnit.convert(2, TimeUnit.DAYS));\n-\n-      // Refresh the changed segment should update the time boundary\n-      timeBoundaryManager.refreshSegment(segment2);\n-      verifyTimeBoundaryInfo(timeBoundaryManager.getTimeBoundaryInfo(), timeUnit.convert(4, TimeUnit.DAYS));\n+      TableConfig tableConfig = getTableConfig(rawTableName, \"DAILY\");\n+      setSchemaTimeFieldSpec(rawTableName, timeUnit);\n+      testDailyPushTable(rawTableName, tableConfig, timeUnit, externalView);\n \n-      // Test HOURLY push table\n+      // Test HOURLY push table, with timeFieldSpec\n       rawTableName = \"testTable_\" + timeUnit + \"_HOURLY\";\n-      tableConfig = getTableConfig(rawTableName, timeUnit, \"HOURLY\");\n-      setSchema(rawTableName, timeUnit);\n-      timeBoundaryManager = new TimeBoundaryManager(tableConfig, _propertyStore);\n-      onlineSegments = new HashSet<>();\n-      onlineSegments.add(segment0);\n-      setSegmentZKMetadata(rawTableName, segment0, 2, timeUnit);\n-      timeBoundaryManager.init(externalView, onlineSegments);\n-      long expectedTimeValue;\n-      if (timeUnit == TimeUnit.DAYS) {\n-        // Time boundary should be endTime - 1 DAY when time unit is DAYS\n-        expectedTimeValue = timeUnit.convert(1, TimeUnit.DAYS);\n-      } else {\n-        // Time boundary should be endTime - 1 HOUR when time unit is other than DAYS\n-        expectedTimeValue = timeUnit.convert(47, TimeUnit.HOURS);\n-      }\n-      verifyTimeBoundaryInfo(timeBoundaryManager.getTimeBoundaryInfo(), expectedTimeValue);\n+      tableConfig = getTableConfig(rawTableName, \"HOURLY\");\n+      setSchemaTimeFieldSpec(rawTableName, timeUnit);\n+      testHourlyPushTable(rawTableName, tableConfig, timeUnit, externalView);\n+\n+      // Test DAILY push table with dateTimeFieldSpec\n+      rawTableName = \"testTableDateTime_\" + timeUnit + \"_DAILY\";\n+      tableConfig = getTableConfig(rawTableName, \"DAILY\");\n+      setSchemaDateTimeFieldSpec(rawTableName, timeUnit);\n+      testDailyPushTable(rawTableName, tableConfig, timeUnit, externalView);\n+\n+      // Test HOURLY push table\n+      rawTableName = \"testTableDateTime_\" + timeUnit + \"_HOURLY\";\n+      tableConfig = getTableConfig(rawTableName, \"HOURLY\");\n+      setSchemaDateTimeFieldSpec(rawTableName, timeUnit);\n+      testHourlyPushTable(rawTableName, tableConfig, timeUnit, externalView);\n+    }\n+  }\n+\n+  private void testDailyPushTable(String rawTableName, TableConfig tableConfig, TimeUnit timeUnit, ExternalView externalView) {\n+    // Start with no segment\n+    TimeBoundaryManager timeBoundaryManager = new TimeBoundaryManager(tableConfig, _propertyStore);\n+    Set<String> onlineSegments = new HashSet<>();\n+    timeBoundaryManager.init(externalView, onlineSegments);\n+    assertNull(timeBoundaryManager.getTimeBoundaryInfo());\n+\n+    // Add the first segment should update the time boundary\n+    String segment0 = \"segment0\";\n+    onlineSegments.add(segment0);\n+    setSegmentZKMetadata(rawTableName, segment0, 2, timeUnit);\n+    timeBoundaryManager.init(externalView, onlineSegments);\n+    verifyTimeBoundaryInfo(timeBoundaryManager.getTimeBoundaryInfo(), timeUnit.convert(1, TimeUnit.DAYS));\n+\n+    // Add a new segment with larger end time should update the time boundary\n+    String segment1 = \"segment1\";\n+    onlineSegments.add(segment1);\n+    setSegmentZKMetadata(rawTableName, segment1, 4, timeUnit);\n+    timeBoundaryManager.onExternalViewChange(externalView, onlineSegments);\n+    verifyTimeBoundaryInfo(timeBoundaryManager.getTimeBoundaryInfo(), timeUnit.convert(3, TimeUnit.DAYS));\n+\n+    // Add a new segment with smaller end time should not change the time boundary\n+    String segment2 = \"segment2\";\n+    onlineSegments.add(segment2);\n+    setSegmentZKMetadata(rawTableName, segment2, 3, timeUnit);\n+    timeBoundaryManager.onExternalViewChange(externalView, onlineSegments);\n+    verifyTimeBoundaryInfo(timeBoundaryManager.getTimeBoundaryInfo(), timeUnit.convert(3, TimeUnit.DAYS));\n+\n+    // Remove the segment with largest end time should update the time boundary\n+    onlineSegments.remove(segment1);\n+    timeBoundaryManager.onExternalViewChange(externalView, onlineSegments);\n+    verifyTimeBoundaryInfo(timeBoundaryManager.getTimeBoundaryInfo(), timeUnit.convert(2, TimeUnit.DAYS));\n+\n+    // Change segment ZK metadata without refreshing should not update the time boundary\n+    setSegmentZKMetadata(rawTableName, segment2, 5, timeUnit);\n+    timeBoundaryManager.onExternalViewChange(externalView, onlineSegments);\n+    verifyTimeBoundaryInfo(timeBoundaryManager.getTimeBoundaryInfo(), timeUnit.convert(2, TimeUnit.DAYS));\n+\n+    // Refresh the changed segment should update the time boundary\n+    timeBoundaryManager.refreshSegment(segment2);\n+    verifyTimeBoundaryInfo(timeBoundaryManager.getTimeBoundaryInfo(), timeUnit.convert(4, TimeUnit.DAYS));\n+  }\n+\n+  private void testHourlyPushTable(String rawTableName, TableConfig tableConfig, TimeUnit timeUnit, ExternalView externalView) {\n+    TimeBoundaryManager timeBoundaryManager = new TimeBoundaryManager(tableConfig, _propertyStore);\n+    Set<String> onlineSegments = new HashSet<>();\n+    String segment0 = \"segment0\";\n+    onlineSegments.add(segment0);\n+    setSegmentZKMetadata(rawTableName, segment0, 2, timeUnit);\n+    timeBoundaryManager.init(externalView, onlineSegments);\n+    long expectedTimeValue;\n+    if (timeUnit == TimeUnit.DAYS) {\n+      // Time boundary should be endTime - 1 DAY when time unit is DAYS\n+      expectedTimeValue = timeUnit.convert(1, TimeUnit.DAYS);\n+    } else {\n+      // Time boundary should be endTime - 1 HOUR when time unit is other than DAYS\n+      expectedTimeValue = timeUnit.convert(47, TimeUnit.HOURS);\n     }\n+    verifyTimeBoundaryInfo(timeBoundaryManager.getTimeBoundaryInfo(), expectedTimeValue);\n   }\n \n-  private TableConfig getTableConfig(String rawTableName, TimeUnit timeUnit, String pushFrequency) {\n+  private TableConfig getTableConfig(String rawTableName, String pushFrequency) {\n     return new TableConfigBuilder(TableType.OFFLINE).setTableName(rawTableName).setTimeColumnName(TIME_COLUMN)\n-        .setTimeType(timeUnit.name()).setSegmentPushFrequency(pushFrequency).build();\n+        .setSegmentPushFrequency(pushFrequency).build();\n   }\n \n-  private void setSchema(String rawTableName, TimeUnit timeUnit) {\n+  private void setSchemaTimeFieldSpec(String rawTableName, TimeUnit timeUnit) {\n     ZKMetadataProvider.setSchema(_propertyStore,\n         new Schema.SchemaBuilder().setSchemaName(rawTableName)\n             .addTime(new TimeGranularitySpec(FieldSpec.DataType.LONG, timeUnit, TIME_COLUMN), null)\n             .build());\n   }\n \n+  private void setSchemaDateTimeFieldSpec(String rawTableName, TimeUnit timeUnit) {\n+    ZKMetadataProvider.setSchema(_propertyStore,\n+        new Schema.SchemaBuilder().setSchemaName(rawTableName)\n+            .addDateTime(TIME_COLUMN, FieldSpec.DataType.LONG, \"1:\"+timeUnit+\":EPOCH\", \"1:\"+timeUnit)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cc0d14cff863b3a34e59bf19b1387528f8484ea"}, "originalPosition": 170}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDQ0MjYx", "url": "https://github.com/apache/pinot/pull/5399#pullrequestreview-413044261", "createdAt": "2020-05-16T03:48:18Z", "commit": {"oid": "9cc0d14cff863b3a34e59bf19b1387528f8484ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMzo0ODoxOFrOGWX9zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMzo0ODoxOFrOGWX9zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjExNDUxMQ==", "bodyText": "Please reformat all affected files. This file has unused imports.", "url": "https://github.com/apache/pinot/pull/5399#discussion_r426114511", "createdAt": "2020-05-16T03:48:18Z", "author": {"login": "haibow"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/timeboundary/TimeBoundaryManager.java", "diffHunk": "@@ -34,6 +34,8 @@\n import org.apache.pinot.common.utils.CommonConstants;\n import org.apache.pinot.spi.config.table.TableConfig;\n import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.data.DateTimeFieldSpec;\n+import org.apache.pinot.spi.data.DateTimeFormatSpec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cc0d14cff863b3a34e59bf19b1387528f8484ea"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDQ0MzA0", "url": "https://github.com/apache/pinot/pull/5399#pullrequestreview-413044304", "createdAt": "2020-05-16T03:49:02Z", "commit": {"oid": "9cc0d14cff863b3a34e59bf19b1387528f8484ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMzo0OTowMlrOGWX9-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMzo0OTowMlrOGWX9-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjExNDU1Mw==", "bodyText": "nit: s/treansformFunctions/transformFunctions", "url": "https://github.com/apache/pinot/pull/5399#discussion_r426114553", "createdAt": "2020-05-16T03:49:02Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionEvaluatorFactory.java", "diffHunk": "@@ -59,7 +59,8 @@ public FunctionEvaluator getExpressionEvaluator(FieldSpec fieldSpec) {\n       }\n     } else if (fieldSpec.getFieldType().equals(FieldSpec.FieldType.TIME)) {\n \n-      // for backward compatible handling of TIME field conversion\n+      // Time conversions should be done using DateTimeFieldSpec and treansformFunctions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cc0d14cff863b3a34e59bf19b1387528f8484ea"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTEzMjY2", "url": "https://github.com/apache/pinot/pull/5399#pullrequestreview-413113266", "createdAt": "2020-05-16T22:39:44Z", "commit": {"oid": "9cc0d14cff863b3a34e59bf19b1387528f8484ea"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQyMjozOTo0NVrOGWdBgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQyMjo0MDoxMlrOGWdBrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5NzM3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Deprecated in favor of addDateTime().\n          \n          \n            \n                 * @deprecated in favor of {@link #addDateTime()}.", "url": "https://github.com/apache/pinot/pull/5399#discussion_r426197378", "createdAt": "2020-05-16T22:39:45Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -507,10 +507,10 @@ public SchemaBuilder addMetric(String metricName, DataType dataType, Object defa\n \n     /**\n      * Add timeFieldSpec with incoming and outgoing granularity spec\n-     * TODO: This is going to be deprecated in favor of addDateTime().\n-     *  Many tests use this to construct Schema with TimeFieldSpec.\n-     *  This will continue to exist for a while, as it helps to test backward compatibility of schemas containing TimeFieldSpec\n+     * Deprecated in favor of addDateTime().", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cc0d14cff863b3a34e59bf19b1387528f8484ea"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5NzQyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * TimeFieldSpec is deprecated. Use {@link DateTimeFieldSpec} instead.\n          \n          \n            \n             * @deprecated TimeFieldSpec is deprecated. Use {@link DateTimeFieldSpec} instead.", "url": "https://github.com/apache/pinot/pull/5399#discussion_r426197422", "createdAt": "2020-05-16T22:40:12Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/TimeFieldSpec.java", "diffHunk": "@@ -28,6 +28,12 @@\n \n @SuppressWarnings(\"unused\")\n @JsonIgnoreProperties(ignoreUnknown = true)\n+@Deprecated\n+/**\n+ * TimeFieldSpec is deprecated. Use {@link DateTimeFieldSpec} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cc0d14cff863b3a34e59bf19b1387528f8484ea"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9cc0d14cff863b3a34e59bf19b1387528f8484ea", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/9cc0d14cff863b3a34e59bf19b1387528f8484ea", "committedDate": "2020-05-16T02:13:54Z", "message": "Fix NormalizedDateSegmentNameGenerator"}, "afterCommit": {"oid": "118b8ba31b0145980a9d57be2392a3e9401e4625", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/118b8ba31b0145980a9d57be2392a3e9401e4625", "committedDate": "2020-05-16T22:51:55Z", "message": "Change quickstart schemas"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODkwOTEz", "url": "https://github.com/apache/pinot/pull/5399#pullrequestreview-413890913", "createdAt": "2020-05-18T19:46:45Z", "commit": {"oid": "e0dacf8054a31507d54c5df91cd38b312c95a507"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzOTA1MTUz", "url": "https://github.com/apache/pinot/pull/5399#pullrequestreview-413905153", "createdAt": "2020-05-18T20:09:44Z", "commit": {"oid": "e0dacf8054a31507d54c5df91cd38b312c95a507"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDowOTo0NFrOGXF40w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDoxNDo0MlrOGXGBrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2Njg5OQ==", "bodyText": "Why do we need the second part of the check? What if the schema has no DateTimeField but only TimeField?", "url": "https://github.com/apache/pinot/pull/5399#discussion_r426866899", "createdAt": "2020-05-18T20:09:44Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "diffHunk": "@@ -362,12 +362,14 @@ private void writeMetadata()\n     properties.setProperty(DIMENSIONS, config.getDimensions());\n     properties.setProperty(METRICS, config.getMetrics());\n     properties.setProperty(DATETIME_COLUMNS, config.getDateTimeColumnNames());\n-    properties.setProperty(TIME_COLUMN_NAME, config.getTimeColumnName());\n+    String timeColumnName = config.getTimeColumnName();\n+    if (timeColumnName != null && !config.getSchema().getDateTimeNames().contains(timeColumnName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0dacf8054a31507d54c5df91cd38b312c95a507"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NzgwOA==", "bodyText": "Check whether timeColumnName is null first", "url": "https://github.com/apache/pinot/pull/5399#discussion_r426867808", "createdAt": "2020-05-18T20:11:47Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "diffHunk": "@@ -362,12 +362,14 @@ private void writeMetadata()\n     properties.setProperty(DIMENSIONS, config.getDimensions());\n     properties.setProperty(METRICS, config.getMetrics());\n     properties.setProperty(DATETIME_COLUMNS, config.getDateTimeColumnNames());\n-    properties.setProperty(TIME_COLUMN_NAME, config.getTimeColumnName());\n+    String timeColumnName = config.getTimeColumnName();\n+    if (timeColumnName != null && !config.getSchema().getDateTimeNames().contains(timeColumnName)) {\n+      properties.setProperty(TIME_COLUMN_NAME, timeColumnName);\n+    }\n     properties.setProperty(SEGMENT_TOTAL_DOCS, String.valueOf(totalDocs));\n \n     // Write time related metadata (start time, end time, time unit)\n-    String timeColumn = config.getTimeColumnName();\n-    ColumnIndexCreationInfo timeColumnIndexCreationInfo = indexCreationInfoMap.get(timeColumn);\n+    ColumnIndexCreationInfo timeColumnIndexCreationInfo = indexCreationInfoMap.get(timeColumnName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0dacf8054a31507d54c5df91cd38b312c95a507"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2OTE2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (timeFormat.equals(TimeFormat.EPOCH)) {\n          \n          \n            \n                  if (timeFormat == TimeFormat.EPOCH) {", "url": "https://github.com/apache/pinot/pull/5399#discussion_r426869167", "createdAt": "2020-05-18T20:14:42Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/name/NormalizedDateSegmentNameGenerator.java", "diffHunk": "@@ -60,16 +61,16 @@ public NormalizedDateSegmentNameGenerator(String tableName, @Nullable String seg\n       }\n       _outputSDF.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n \n-      // Parse input time format: 'EPOCH' or 'SIMPLE_DATE_FORMAT:<pattern>'\n-      if (Preconditions.checkNotNull(timeFormat).equals(TimeFormat.EPOCH.toString())) {\n-        _inputTimeUnit = timeType;\n+      // Parse input time format: 'EPOCH' or 'SIMPLE_DATE_FORMAT' using pattern\n+      Preconditions.checkNotNull(dateTimeFormatSpec);\n+      TimeFormat timeFormat = dateTimeFormatSpec.getTimeFormat();\n+      if (timeFormat.equals(TimeFormat.EPOCH)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0dacf8054a31507d54c5df91cd38b312c95a507"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0dacf8054a31507d54c5df91cd38b312c95a507", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/e0dacf8054a31507d54c5df91cd38b312c95a507", "committedDate": "2020-05-18T16:51:41Z", "message": "Deprecated tags and reformatting"}, "afterCommit": {"oid": "237ca457acb543b3e2c2305c095eb3531bd1f52c", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/237ca457acb543b3e2c2305c095eb3531bd1f52c", "committedDate": "2020-05-18T22:15:01Z", "message": "Set primary time column into segment.time.column.name segment metadata property"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0Njc0OTMw", "url": "https://github.com/apache/pinot/pull/5399#pullrequestreview-414674930", "createdAt": "2020-05-19T17:35:58Z", "commit": {"oid": "237ca457acb543b3e2c2305c095eb3531bd1f52c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzozNTo1OFrOGXrTaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzozNTo1OFrOGXrTaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3OTkxMg==", "bodyText": "mention in the comment that TimeFieldSpec is deprecated", "url": "https://github.com/apache/pinot/pull/5399#discussion_r427479912", "createdAt": "2020-05-19T17:35:58Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/V1Constants.java", "diffHunk": "@@ -51,6 +51,10 @@\n       public static final String TABLE_NAME = \"segment.table.name\";\n       public static final String DIMENSIONS = \"segment.dimension.column.names\";\n       public static final String METRICS = \"segment.metric.column.names\";\n+      /**\n+       * The primary time column for the table. This will match the timeColumnName defined in the tableConfig.\n+       * In the Pinot schema, this column can be defined as either a TimeFieldSpec or DateTimeFieldSpec", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "237ca457acb543b3e2c2305c095eb3531bd1f52c"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c90413d490baa6a4e84d526460f54e184ea97f0", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/8c90413d490baa6a4e84d526460f54e184ea97f0", "committedDate": "2020-05-19T22:23:08Z", "message": "DATE_TIME should work as the primary time column for Pinot tables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d77442856b0bf81d43936f85402fe751206bb9fa", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/d77442856b0bf81d43936f85402fe751206bb9fa", "committedDate": "2020-05-19T22:23:08Z", "message": "Minor tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15048bca3521a58ba483a8c266c21684c570241a", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/15048bca3521a58ba483a8c266c21684c570241a", "committedDate": "2020-05-19T22:23:08Z", "message": "Fix NormalizedDateSegmentNameGenerator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a409ada137aaee00d7f63417a7d657657ea54f7", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/1a409ada137aaee00d7f63417a7d657657ea54f7", "committedDate": "2020-05-19T22:23:08Z", "message": "Change quickstart schemas"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68ff4c36a2fa450d00f143543b59bd391f38c443", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/68ff4c36a2fa450d00f143543b59bd391f38c443", "committedDate": "2020-05-19T22:23:08Z", "message": "Deprecated tags and reformatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b85078f69c81a5afef0d2d6591d3c5c1ae53c8ce", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/b85078f69c81a5afef0d2d6591d3c5c1ae53c8ce", "committedDate": "2020-05-19T22:23:08Z", "message": "Set primary time column into segment.time.column.name segment metadata property"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2726b6ae49d377e4e9e7114d74ca4f028e25dd6e", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/2726b6ae49d377e4e9e7114d74ca4f028e25dd6e", "committedDate": "2020-05-19T22:23:08Z", "message": "comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "237ca457acb543b3e2c2305c095eb3531bd1f52c", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/237ca457acb543b3e2c2305c095eb3531bd1f52c", "committedDate": "2020-05-18T22:15:01Z", "message": "Set primary time column into segment.time.column.name segment metadata property"}, "afterCommit": {"oid": "2726b6ae49d377e4e9e7114d74ca4f028e25dd6e", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/2726b6ae49d377e4e9e7114d74ca4f028e25dd6e", "committedDate": "2020-05-19T22:23:08Z", "message": "comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 784, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}