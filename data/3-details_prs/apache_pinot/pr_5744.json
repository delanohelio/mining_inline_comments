{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODk5OTQ3", "number": 5744, "title": "[Part 2] Add geo support  - add a geo aggregate function st_union", "bodyText": "Description\nIt returns a multi-geometry from a set of geometries.\nUpgrade Notes\nDoes this PR otherwise need attention when creating release notes? Things to consider:\n\nYes, new user-facing aggregation function\n\nRelease Notes\nAdded a new aggregate function that unions a set of geometry objects and returns a multi-geometry object.\nDocumentation\nIf you have introduced a new feature or configuration, please add it to the documentation as well.\nSee https://docs.pinot.apache.org/developers/developers-and-contributors/update-document", "createdAt": "2020-07-23T19:06:14Z", "url": "https://github.com/apache/pinot/pull/5744", "merged": true, "mergeCommit": {"oid": "1f6904152bc80569ab6e4e90251ade344d72c14f"}, "closed": true, "closedAt": "2020-07-30T00:04:27Z", "author": {"login": "yupeng9"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc30BAogH2gAyNDU1ODk5OTQ3OjU0NTVjZjkyMzE3MjhkNDI1MjM5MzZjOTU4YWI0NTFhNWVlNjVjZGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc50IC6gFqTQ1Nzk3NzU3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5455cf9231728d42523936c958ab451a5ee65cdd", "author": {"user": {"login": "yupeng9", "name": "Yupeng Fu"}}, "url": "https://github.com/apache/pinot/commit/5455cf9231728d42523936c958ab451a5ee65cdd", "committedDate": "2020-07-23T18:48:05Z", "message": "add geo aggregate function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29fad24161ca13df58876766893f3c5cfdfdbca1", "author": {"user": {"login": "yupeng9", "name": "Yupeng Fu"}}, "url": "https://github.com/apache/pinot/commit/29fad24161ca13df58876766893f3c5cfdfdbca1", "committedDate": "2020-07-23T19:07:38Z", "message": "style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6baf45ab4cf580d34c2420fe8a837ada1df915b6", "author": {"user": {"login": "yupeng9", "name": "Yupeng Fu"}}, "url": "https://github.com/apache/pinot/commit/6baf45ab4cf580d34c2420fe8a837ada1df915b6", "committedDate": "2020-07-23T20:14:45Z", "message": "add header"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTk4MjQy", "url": "https://github.com/apache/pinot/pull/5744#pullrequestreview-456198242", "createdAt": "2020-07-27T23:17:28Z", "commit": {"oid": "6baf45ab4cf580d34c2420fe8a837ada1df915b6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoxNzoyOFrOG324WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoxOToxNlrOG326gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDAyNA==", "bodyText": "Can be optimized to reduce the result holder lookup\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n          \n          \n            \n                      : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n          \n          \n            \n                  Geometry geometry = groupByResultHolder.getResult(groupKey);\n          \n          \n            \n                  if (geometry != null) {\n          \n          \n            \n                    geometry.union(value);\n          \n          \n            \n                  } else {\n          \n          \n            \n                    groupByResultHolder.setValueForKey(groupKey, value);\n          \n          \n            \n                  }", "url": "https://github.com/apache/pinot/pull/5744#discussion_r461224024", "createdAt": "2020-07-27T23:17:28Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/StUnionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.geospatial.serde.GeometrySerializer;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.spi.utils.ByteArray;\n+import org.locationtech.jts.geom.Geometry;\n+\n+\n+public class StUnionAggregationFunction extends BaseSingleInputAggregationFunction<Geometry, ByteArray> {\n+\n+  /**\n+   * Constructor for the class.\n+   *\n+   * @param expression Expression to aggregate on.\n+   */\n+  public StUnionAggregationFunction(ExpressionContext expression) {\n+    super(expression);\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.ST_UNION;\n+  }\n+\n+  @Override\n+  public void accept(AggregationFunctionVisitorBase visitor) {\n+    visitor.visit(this);\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    Geometry geometry = aggregationResultHolder.getResult();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      geometry = geometry == null ? value : geometry.union(value);\n+    }\n+    aggregationResultHolder.setValue(geometry);\n+  }\n+\n+  @Override\n+  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      int groupKey = groupKeyArray[i];\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+          : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6baf45ab4cf580d34c2420fe8a837ada1df915b6"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDE0Mw==", "bodyText": "Same here", "url": "https://github.com/apache/pinot/pull/5744#discussion_r461224143", "createdAt": "2020-07-27T23:17:52Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/StUnionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.geospatial.serde.GeometrySerializer;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.spi.utils.ByteArray;\n+import org.locationtech.jts.geom.Geometry;\n+\n+\n+public class StUnionAggregationFunction extends BaseSingleInputAggregationFunction<Geometry, ByteArray> {\n+\n+  /**\n+   * Constructor for the class.\n+   *\n+   * @param expression Expression to aggregate on.\n+   */\n+  public StUnionAggregationFunction(ExpressionContext expression) {\n+    super(expression);\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.ST_UNION;\n+  }\n+\n+  @Override\n+  public void accept(AggregationFunctionVisitorBase visitor) {\n+    visitor.visit(this);\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    Geometry geometry = aggregationResultHolder.getResult();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      geometry = geometry == null ? value : geometry.union(value);\n+    }\n+    aggregationResultHolder.setValue(geometry);\n+  }\n+\n+  @Override\n+  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      int groupKey = groupKeyArray[i];\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+          : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n+    }\n+  }\n+\n+  @Override\n+  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      for (int groupKey : groupKeysArray[i]) {\n+        groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6baf45ab4cf580d34c2420fe8a837ada1df915b6"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQzMg==", "bodyText": "Need to handle null here", "url": "https://github.com/apache/pinot/pull/5744#discussion_r461224432", "createdAt": "2020-07-27T23:18:49Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/StUnionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.geospatial.serde.GeometrySerializer;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.spi.utils.ByteArray;\n+import org.locationtech.jts.geom.Geometry;\n+\n+\n+public class StUnionAggregationFunction extends BaseSingleInputAggregationFunction<Geometry, ByteArray> {\n+\n+  /**\n+   * Constructor for the class.\n+   *\n+   * @param expression Expression to aggregate on.\n+   */\n+  public StUnionAggregationFunction(ExpressionContext expression) {\n+    super(expression);\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.ST_UNION;\n+  }\n+\n+  @Override\n+  public void accept(AggregationFunctionVisitorBase visitor) {\n+    visitor.visit(this);\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    Geometry geometry = aggregationResultHolder.getResult();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      geometry = geometry == null ? value : geometry.union(value);\n+    }\n+    aggregationResultHolder.setValue(geometry);\n+  }\n+\n+  @Override\n+  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      int groupKey = groupKeyArray[i];\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+          : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n+    }\n+  }\n+\n+  @Override\n+  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      for (int groupKey : groupKeysArray[i]) {\n+        groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+            : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Geometry extractAggregationResult(AggregationResultHolder aggregationResultHolder) {\n+    return aggregationResultHolder.getResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6baf45ab4cf580d34c2420fe8a837ada1df915b6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQ3Mg==", "bodyText": "Need to handle null here (return an empty Geometry)", "url": "https://github.com/apache/pinot/pull/5744#discussion_r461224472", "createdAt": "2020-07-27T23:18:58Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/StUnionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.geospatial.serde.GeometrySerializer;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.spi.utils.ByteArray;\n+import org.locationtech.jts.geom.Geometry;\n+\n+\n+public class StUnionAggregationFunction extends BaseSingleInputAggregationFunction<Geometry, ByteArray> {\n+\n+  /**\n+   * Constructor for the class.\n+   *\n+   * @param expression Expression to aggregate on.\n+   */\n+  public StUnionAggregationFunction(ExpressionContext expression) {\n+    super(expression);\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.ST_UNION;\n+  }\n+\n+  @Override\n+  public void accept(AggregationFunctionVisitorBase visitor) {\n+    visitor.visit(this);\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    Geometry geometry = aggregationResultHolder.getResult();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      geometry = geometry == null ? value : geometry.union(value);\n+    }\n+    aggregationResultHolder.setValue(geometry);\n+  }\n+\n+  @Override\n+  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      int groupKey = groupKeyArray[i];\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+          : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n+    }\n+  }\n+\n+  @Override\n+  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      for (int groupKey : groupKeysArray[i]) {\n+        groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+            : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Geometry extractAggregationResult(AggregationResultHolder aggregationResultHolder) {\n+    return aggregationResultHolder.getResult();\n+  }\n+\n+  @Override\n+  public Geometry extractGroupByResult(GroupByResultHolder groupByResultHolder, int groupKey) {\n+    return groupByResultHolder.getResult(groupKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6baf45ab4cf580d34c2420fe8a837ada1df915b6"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDU3OA==", "bodyText": "Geometry is comparable?", "url": "https://github.com/apache/pinot/pull/5744#discussion_r461224578", "createdAt": "2020-07-27T23:19:16Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/StUnionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.geospatial.serde.GeometrySerializer;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.spi.utils.ByteArray;\n+import org.locationtech.jts.geom.Geometry;\n+\n+\n+public class StUnionAggregationFunction extends BaseSingleInputAggregationFunction<Geometry, ByteArray> {\n+\n+  /**\n+   * Constructor for the class.\n+   *\n+   * @param expression Expression to aggregate on.\n+   */\n+  public StUnionAggregationFunction(ExpressionContext expression) {\n+    super(expression);\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.ST_UNION;\n+  }\n+\n+  @Override\n+  public void accept(AggregationFunctionVisitorBase visitor) {\n+    visitor.visit(this);\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    Geometry geometry = aggregationResultHolder.getResult();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      geometry = geometry == null ? value : geometry.union(value);\n+    }\n+    aggregationResultHolder.setValue(geometry);\n+  }\n+\n+  @Override\n+  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      int groupKey = groupKeyArray[i];\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+          : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n+    }\n+  }\n+\n+  @Override\n+  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      for (int groupKey : groupKeysArray[i]) {\n+        groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+            : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Geometry extractAggregationResult(AggregationResultHolder aggregationResultHolder) {\n+    return aggregationResultHolder.getResult();\n+  }\n+\n+  @Override\n+  public Geometry extractGroupByResult(GroupByResultHolder groupByResultHolder, int groupKey) {\n+    return groupByResultHolder.getResult(groupKey);\n+  }\n+\n+  @Override\n+  public Geometry merge(Geometry intermediateResult1, Geometry intermediateResult2) {\n+    return intermediateResult1.union(intermediateResult2);\n+  }\n+\n+  @Override\n+  public boolean isIntermediateResultComparable() {\n+    return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6baf45ab4cf580d34c2420fe8a837ada1df915b6"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "314a45c1a727c9bb6116164a3cb2af83bf6b5a8e", "author": {"user": {"login": "yupeng9", "name": "Yupeng Fu"}}, "url": "https://github.com/apache/pinot/commit/314a45c1a727c9bb6116164a3cb2af83bf6b5a8e", "committedDate": "2020-07-29T01:30:32Z", "message": "comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68497c29221171f442367166be33bde0355e902e", "author": {"user": {"login": "yupeng9", "name": "Yupeng Fu"}}, "url": "https://github.com/apache/pinot/commit/68497c29221171f442367166be33bde0355e902e", "committedDate": "2020-07-29T20:35:41Z", "message": "more comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTc3NTcy", "url": "https://github.com/apache/pinot/pull/5744#pullrequestreview-457977572", "createdAt": "2020-07-30T00:03:37Z", "commit": {"oid": "68497c29221171f442367166be33bde0355e902e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 449, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}