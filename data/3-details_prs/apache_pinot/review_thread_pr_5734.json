{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MzkzNTQ4", "number": 5734, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo0MzoxMlrOERRFhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDowNDowOVrOERdvYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQxMTkxOnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo0MzoxMlrOG146aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo0MzoxMlrOG146aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MDE3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  handleUpdateColumnNames(brokerRequest);\n          \n          \n            \n                  updateColumnNames(brokerRequest);", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459160171", "createdAt": "2020-07-23T00:43:12Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -202,12 +202,10 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit\n       }\n     }\n     updateQuerySource(brokerRequest);\n-    if (_enableCaseInsensitive) {\n-      try {\n-        handleCaseSensitivity(brokerRequest);\n-      } catch (Exception e) {\n-        LOGGER.warn(\"Caught exception while rewriting PQL to make it case-insensitive {}: {}, {}\", requestId, query, e);\n-      }\n+    try {\n+      handleUpdateColumnNames(brokerRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1102ec56c0d865721312a79a2db9e42632691a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQxNDEwOnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo0NDoyNVrOG147sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo0NDoyNVrOG147sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MDQ5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOGGER.warn(\"Caught exception while rewriting Column names in Pinot Query {}: {}, {}\", requestId, query, e);\n          \n          \n            \n                  LOGGER.warn(\"Caught exception while updating column names for query {}: {}, {}\", requestId, query, e);", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459160498", "createdAt": "2020-07-23T00:44:25Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -202,12 +202,10 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit\n       }\n     }\n     updateQuerySource(brokerRequest);\n-    if (_enableCaseInsensitive) {\n-      try {\n-        handleCaseSensitivity(brokerRequest);\n-      } catch (Exception e) {\n-        LOGGER.warn(\"Caught exception while rewriting PQL to make it case-insensitive {}: {}, {}\", requestId, query, e);\n-      }\n+    try {\n+      handleUpdateColumnNames(brokerRequest);\n+    } catch (Exception e) {\n+      LOGGER.warn(\"Caught exception while rewriting Column names in Pinot Query {}: {}, {}\", requestId, query, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1102ec56c0d865721312a79a2db9e42632691a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQxODUzOnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo0Njo1OFrOG14-QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo0Njo1OFrOG14-QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MTE1Mg==", "bodyText": "Should we move this part into the updateQuerySource()?", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459161152", "createdAt": "2020-07-23T00:46:58Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -667,19 +665,22 @@ private void computeResultsForLiteral(Literal literal, List<String> columnNames,\n   }\n \n   /**\n-   * Fixes the case-insensitive column names to the actual column names in the given broker request.\n+   * Fixes the column names to the actual column names in the given broker request.\n    */\n-  private void handleCaseSensitivity(BrokerRequest brokerRequest) {\n-    String inputTableName = brokerRequest.getQuerySource().getTableName();\n-    String actualTableName = _tableCache.getActualTableName(inputTableName);\n-    brokerRequest.getQuerySource().setTableName(actualTableName);\n+  private void handleUpdateColumnNames(BrokerRequest brokerRequest) {\n+    if (_enableCaseInsensitive) {\n+      String inputTableName = brokerRequest.getQuerySource().getTableName();\n+      String actualTableName = _tableCache.getActualTableName(inputTableName);\n+      brokerRequest.getQuerySource().setTableName(actualTableName);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1102ec56c0d865721312a79a2db9e42632691a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQyNjA3OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo1MTo1MlrOG15Cqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo1MTo1MlrOG15Cqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MjI4Mw==", "bodyText": "Not sure if we need the first check. SELECT myTable_OFFLINE.colA FROM ... seems impossible from connector as _OFFLINE is Pinot internal concept", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459162283", "createdAt": "2020-07-23T00:51:52Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -704,74 +705,96 @@ private void handleCaseSensitivity(BrokerRequest brokerRequest) {\n       for (int i = 0; i < selectionColumns.size(); i++) {\n         String expression = selectionColumns.get(i);\n         if (!expression.equals(\"*\")) {\n-          selectionColumns.set(i, fixColumnNameCase(actualTableName, expression));\n+          selectionColumns.set(i, fixColumnName(tableName, expression));\n         }\n       }\n     }\n     if (brokerRequest.isSetOrderBy()) {\n       List<SelectionSort> orderBy = brokerRequest.getOrderBy();\n       for (SelectionSort selectionSort : orderBy) {\n         String expression = selectionSort.getColumn();\n-        selectionSort.setColumn(fixColumnNameCase(actualTableName, expression));\n+        selectionSort.setColumn(fixColumnName(tableName, expression));\n       }\n     }\n \n     PinotQuery pinotQuery = brokerRequest.getPinotQuery();\n     if (pinotQuery != null) {\n-      pinotQuery.getDataSource().setTableName(actualTableName);\n+      pinotQuery.getDataSource().setTableName(tableName);\n       for (Expression expression : pinotQuery.getSelectList()) {\n-        fixColumnNameCase(actualTableName, expression);\n+        fixColumnName(tableName, expression);\n       }\n       Expression filterExpression = pinotQuery.getFilterExpression();\n       if (filterExpression != null) {\n-        fixColumnNameCase(actualTableName, filterExpression);\n+        fixColumnName(tableName, filterExpression);\n       }\n       List<Expression> groupByList = pinotQuery.getGroupByList();\n       if (groupByList != null) {\n         for (Expression expression : groupByList) {\n-          fixColumnNameCase(actualTableName, expression);\n+          fixColumnName(tableName, expression);\n         }\n       }\n       List<Expression> orderByList = pinotQuery.getOrderByList();\n       if (orderByList != null) {\n         for (Expression expression : orderByList) {\n-          fixColumnNameCase(actualTableName, expression);\n+          fixColumnName(tableName, expression);\n         }\n       }\n       Expression havingExpression = pinotQuery.getHavingExpression();\n       if (havingExpression != null) {\n-        fixColumnNameCase(actualTableName, havingExpression);\n+        fixColumnName(tableName, havingExpression);\n       }\n     }\n   }\n \n-  private String fixColumnNameCase(String tableNameWithType, String expression) {\n+  private String fixColumnName(String tableNameWithType, String expression) {\n     TransformExpressionTree expressionTree = TransformExpressionTree.compileToExpressionTree(expression);\n-    fixColumnNameCase(tableNameWithType, expressionTree);\n+    fixColumnName(tableNameWithType, expressionTree);\n     return expressionTree.toString();\n   }\n \n-  private void fixColumnNameCase(String tableNameWithType, TransformExpressionTree expression) {\n+  private void fixColumnName(String tableNameWithType, TransformExpressionTree expression) {\n     TransformExpressionTree.ExpressionType expressionType = expression.getExpressionType();\n     if (expressionType == TransformExpressionTree.ExpressionType.IDENTIFIER) {\n-      expression.setValue(_tableCache.getActualColumnName(tableNameWithType, expression.getValue()));\n+      String identifier = expression.getValue();\n+      expression.setValue(getActualColumnName(tableNameWithType, identifier));\n     } else if (expressionType == TransformExpressionTree.ExpressionType.FUNCTION) {\n       for (TransformExpressionTree child : expression.getChildren()) {\n-        fixColumnNameCase(tableNameWithType, child);\n+        fixColumnName(tableNameWithType, child);\n       }\n     }\n   }\n \n-  private void fixColumnNameCase(String tableNameWithType, Expression expression) {\n+  private void fixColumnName(String tableNameWithType, Expression expression) {\n     ExpressionType expressionType = expression.getType();\n     if (expressionType == ExpressionType.IDENTIFIER) {\n       Identifier identifier = expression.getIdentifier();\n-      identifier.setName(_tableCache.getActualColumnName(tableNameWithType, identifier.getName()));\n+      identifier.setName(getActualColumnName(tableNameWithType, identifier.getName()));\n     } else if (expressionType == ExpressionType.FUNCTION) {\n       for (Expression operand : expression.getFunctionCall().getOperands()) {\n-        fixColumnNameCase(tableNameWithType, operand);\n+        fixColumnName(tableNameWithType, operand);\n+      }\n+    }\n+  }\n+\n+  private String getActualColumnName(String tableNameWithType, String columnName) {\n+    String[] splits = StringUtils.split(columnName, \".\", 2);\n+    if (_enableCaseInsensitive) {\n+      if (splits.length == 2) {\n+        if (tableNameWithType.equalsIgnoreCase(splits[0]) || TableNameBuilder.extractRawTableName(tableNameWithType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1102ec56c0d865721312a79a2db9e42632691a"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQzMjgyOnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo1NTo0OVrOG15GbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo1NTo0OVrOG15GbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MzI0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                baseQueries.stream().forEach(q -> queries.add(q.replace(\"DaysSinceEpoch\", \"mytable.DAYSSinceEpOch\")));\n          \n          \n            \n                baseQueries.forEach(q -> queries.add(q.replace(\"DaysSinceEpoch\", \"mytable.DAYSSinceEpOch\")));", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459163244", "createdAt": "2020-07-23T00:55:49Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java", "diffHunk": "@@ -1179,6 +1179,74 @@ public void testCaseInsensitivity() {\n     }, 10_000L, \"Failed to get results for case-insensitive queries\");\n   }\n \n+  @Test\n+  public void testColumnNameContainsTableName() {\n+    int daysSinceEpoch = 16138;\n+    long secondsSinceEpoch = 16138 * 24 * 60 * 60;\n+    List<String> baseQueries = Arrays.asList(\"SELECT * FROM mytable\",\n+        \"SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable\",\n+        \"SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by DaysSinceEpoch limit 10000\",\n+        \"SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by timeConvert(DaysSinceEpoch,'DAYS','SECONDS') DESC limit 10000\",\n+        \"SELECT count(*) FROM mytable WHERE DaysSinceEpoch = \" + daysSinceEpoch,\n+        \"SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = \" + secondsSinceEpoch,\n+        \"SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = \" + daysSinceEpoch,\n+        \"SELECT MAX(timeConvert(DaysSinceEpoch,'DAYS','SECONDS')) FROM mytable\",\n+        \"SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,'1:DAYS:EPOCH','1:HOURS:EPOCH','1:HOURS')\");\n+    List<String> queries = new ArrayList<>();\n+    baseQueries.stream().forEach(q -> queries.add(q.replace(\"DaysSinceEpoch\", \"mytable.DAYSSinceEpOch\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1102ec56c0d865721312a79a2db9e42632691a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQzNDM1OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo1Njo0M1rOG15HQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo1Njo0M1rOG15HQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MzQ1OQ==", "bodyText": "Remove the waitForCondition as there is no schema change. Same for testCaseInsensitivity() and testCaseInsensitivityWithColumnNameContainsTableName()", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459163459", "createdAt": "2020-07-23T00:56:43Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java", "diffHunk": "@@ -1179,6 +1179,74 @@ public void testCaseInsensitivity() {\n     }, 10_000L, \"Failed to get results for case-insensitive queries\");\n   }\n \n+  @Test\n+  public void testColumnNameContainsTableName() {\n+    int daysSinceEpoch = 16138;\n+    long secondsSinceEpoch = 16138 * 24 * 60 * 60;\n+    List<String> baseQueries = Arrays.asList(\"SELECT * FROM mytable\",\n+        \"SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable\",\n+        \"SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by DaysSinceEpoch limit 10000\",\n+        \"SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by timeConvert(DaysSinceEpoch,'DAYS','SECONDS') DESC limit 10000\",\n+        \"SELECT count(*) FROM mytable WHERE DaysSinceEpoch = \" + daysSinceEpoch,\n+        \"SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = \" + secondsSinceEpoch,\n+        \"SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = \" + daysSinceEpoch,\n+        \"SELECT MAX(timeConvert(DaysSinceEpoch,'DAYS','SECONDS')) FROM mytable\",\n+        \"SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,'1:DAYS:EPOCH','1:HOURS:EPOCH','1:HOURS')\");\n+    List<String> queries = new ArrayList<>();\n+    baseQueries.stream().forEach(q -> queries.add(q.replace(\"DaysSinceEpoch\", \"mytable.DAYSSinceEpOch\")));\n+    baseQueries.stream().forEach(q -> queries.add(q.replace(\"DaysSinceEpoch\", \"mytable.DAYSSinceEpOch\")));\n+\n+    // Wait for at most 10 seconds for broker to get the ZK callback of the schema change\n+    TestUtils.waitForCondition(aVoid -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1102ec56c0d865721312a79a2db9e42632691a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzQ4NTEyOnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDowNDowOVrOG2MFXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToyMTo0MFrOG2cAng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NDI3MA==", "bodyText": "Does the calcite parser not support getting columns names from [table].[column] format? If so, we should just use that, instead of post processing here? We have been adding small string manipulations per query incrementally, and I fear it will add up to have performance significance soon.", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459474270", "createdAt": "2020-07-23T14:04:09Z", "author": {"login": "mayankshriv"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -450,18 +448,22 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit\n   private void updateQuerySource(BrokerRequest brokerRequest) {\n     String tableName = brokerRequest.getQuerySource().getTableName();\n     // Check if table is in the format of [database_name].[table_name]\n-    String[] tableNameSplits = StringUtils.split(tableName, '.');\n-    if (tableNameSplits.length != 2) {\n-      return;\n-    }\n+    String[] tableNameSplits = StringUtils.split(tableName, \".\", 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acea4bf19db9a9b62b7870eab016cb2e7fdbfba"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NTIwOQ==", "bodyText": "Calcite doesn't support parse it as [table].[column], we will get the whole as identifier.\nThen we need to handle that.", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459675209", "createdAt": "2020-07-23T19:22:02Z", "author": {"login": "xiangfu0"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -450,18 +448,22 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit\n   private void updateQuerySource(BrokerRequest brokerRequest) {\n     String tableName = brokerRequest.getQuerySource().getTableName();\n     // Check if table is in the format of [database_name].[table_name]\n-    String[] tableNameSplits = StringUtils.split(tableName, '.');\n-    if (tableNameSplits.length != 2) {\n-      return;\n-    }\n+    String[] tableNameSplits = StringUtils.split(tableName, \".\", 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NDI3MA=="}, "originalCommit": {"oid": "1acea4bf19db9a9b62b7870eab016cb2e7fdbfba"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyODMyMQ==", "bodyText": "If Calcite doesn't support, then should we support it? The logic seems brittle anyways.", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459728321", "createdAt": "2020-07-23T21:06:42Z", "author": {"login": "mayankshriv"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -450,18 +448,22 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit\n   private void updateQuerySource(BrokerRequest brokerRequest) {\n     String tableName = brokerRequest.getQuerySource().getTableName();\n     // Check if table is in the format of [database_name].[table_name]\n-    String[] tableNameSplits = StringUtils.split(tableName, '.');\n-    if (tableNameSplits.length != 2) {\n-      return;\n-    }\n+    String[] tableNameSplits = StringUtils.split(tableName, \".\", 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NDI3MA=="}, "originalCommit": {"oid": "1acea4bf19db9a9b62b7870eab016cb2e7fdbfba"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNTE5OA==", "bodyText": "We should. The usage is for other system integrations like tableau", "url": "https://github.com/apache/pinot/pull/5734#discussion_r459735198", "createdAt": "2020-07-23T21:21:40Z", "author": {"login": "xiangfu0"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java", "diffHunk": "@@ -450,18 +448,22 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit\n   private void updateQuerySource(BrokerRequest brokerRequest) {\n     String tableName = brokerRequest.getQuerySource().getTableName();\n     // Check if table is in the format of [database_name].[table_name]\n-    String[] tableNameSplits = StringUtils.split(tableName, '.');\n-    if (tableNameSplits.length != 2) {\n-      return;\n-    }\n+    String[] tableNameSplits = StringUtils.split(tableName, \".\", 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NDI3MA=="}, "originalCommit": {"oid": "1acea4bf19db9a9b62b7870eab016cb2e7fdbfba"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4184, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}