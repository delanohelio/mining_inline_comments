{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxOTczNzk1", "number": 5910, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMjoyNjo0MFrOEd7hzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMjoyNzozN1rOEd7iIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODE5NDcxOnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/CreateSegmentCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMjoyNjo0MFrOHJYN5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMDozNDoxMFrOHJdzvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NjAwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          final String exceptionMessage = String.format(\"%s. File: %s\", e.getMessage(), dataFiles.get(sequenceId));\n          \n          \n            \n                          throw new Exception(exceptionMessage, e);\n          \n          \n            \n                          throw new RuntimeException(\"Caught exception while generating segment from file: \" + dataFiles.get(sequenceId), e);", "url": "https://github.com/apache/pinot/pull/5910#discussion_r479596007", "createdAt": "2020-08-29T02:26:40Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/CreateSegmentCommand.java", "diffHunk": "@@ -252,7 +252,8 @@ public boolean execute()\n             if (j < _retry) {\n               LOGGER.warn(\"Caught exception while creating/verifying segment, will retry\", e);\n             } else {\n-              throw e;\n+              final String exceptionMessage = String.format(\"%s. File: %s\", e.getMessage(), dataFiles.get(sequenceId));\n+              throw new Exception(exceptionMessage, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32599ed3d05f718a5bca1bb35036e4779b0e5eaa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY4NzYxNA==", "bodyText": "updated", "url": "https://github.com/apache/pinot/pull/5910#discussion_r479687614", "createdAt": "2020-08-29T20:34:10Z", "author": {"login": "renato2099"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/CreateSegmentCommand.java", "diffHunk": "@@ -252,7 +252,8 @@ public boolean execute()\n             if (j < _retry) {\n               LOGGER.warn(\"Caught exception while creating/verifying segment, will retry\", e);\n             } else {\n-              throw e;\n+              final String exceptionMessage = String.format(\"%s. File: %s\", e.getMessage(), dataFiles.get(sequenceId));\n+              throw new Exception(exceptionMessage, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NjAwNw=="}, "originalCommit": {"oid": "32599ed3d05f718a5bca1bb35036e4779b0e5eaa"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODE5NTUyOnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/test/java/org/apache/pinot/tools/TestCreateSegmentCommand.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMjoyNzozN1rOHJYORg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoyNDowM1rOHKDo7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NjEwMg==", "bodyText": "(nit) We don't usually put final for local variables", "url": "https://github.com/apache/pinot/pull/5910#discussion_r479596102", "createdAt": "2020-08-29T02:27:37Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-tools/src/test/java/org/apache/pinot/tools/TestCreateSegmentCommand.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.FileFormat;\n+import org.apache.pinot.spi.utils.builder.TableConfigBuilder;\n+import org.apache.pinot.tools.admin.command.CreateSegmentCommand;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestCreateSegmentCommand {\n+  private static final File JSON_INVALID_SAMPLE_DATA_FILE = new File(Preconditions\n+      .checkNotNull(TestCreateSegmentCommand.class.getClassLoader().getResource(\"test_data/test_invalid_data.json\"))\n+      .getFile());\n+\n+  private static CreateSegmentCommand _createSegmentCommand = new CreateSegmentCommand();\n+\n+  @Test(\n+    expectedExceptions = Exception.class,\n+    expectedExceptionsMessageRegExp = \"^.*test_invalid_data.json.*$\"\n+  )\n+  public void testReadingInvalidJsonFile()\n+      throws Exception {\n+    final String fileDirectoryPath = JSON_INVALID_SAMPLE_DATA_FILE.getParent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32599ed3d05f718a5bca1bb35036e4779b0e5eaa"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY4NzcxMw==", "bodyText": "sure, btw is there a code style guide where I can check these things?", "url": "https://github.com/apache/pinot/pull/5910#discussion_r479687713", "createdAt": "2020-08-29T20:35:13Z", "author": {"login": "renato2099"}, "path": "pinot-tools/src/test/java/org/apache/pinot/tools/TestCreateSegmentCommand.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.FileFormat;\n+import org.apache.pinot.spi.utils.builder.TableConfigBuilder;\n+import org.apache.pinot.tools.admin.command.CreateSegmentCommand;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestCreateSegmentCommand {\n+  private static final File JSON_INVALID_SAMPLE_DATA_FILE = new File(Preconditions\n+      .checkNotNull(TestCreateSegmentCommand.class.getClassLoader().getResource(\"test_data/test_invalid_data.json\"))\n+      .getFile());\n+\n+  private static CreateSegmentCommand _createSegmentCommand = new CreateSegmentCommand();\n+\n+  @Test(\n+    expectedExceptions = Exception.class,\n+    expectedExceptionsMessageRegExp = \"^.*test_invalid_data.json.*$\"\n+  )\n+  public void testReadingInvalidJsonFile()\n+      throws Exception {\n+    final String fileDirectoryPath = JSON_INVALID_SAMPLE_DATA_FILE.getParent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NjEwMg=="}, "originalCommit": {"oid": "32599ed3d05f718a5bca1bb35036e4779b0e5eaa"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNzQzOQ==", "bodyText": "We use the style config file located at config/codestyle-intellij.xml (config/codestyle-eclipse.xml for eclipse)\nWill add some code style guide in the Pinot doc", "url": "https://github.com/apache/pinot/pull/5910#discussion_r480307439", "createdAt": "2020-08-31T18:24:03Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-tools/src/test/java/org/apache/pinot/tools/TestCreateSegmentCommand.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.FileFormat;\n+import org.apache.pinot.spi.utils.builder.TableConfigBuilder;\n+import org.apache.pinot.tools.admin.command.CreateSegmentCommand;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestCreateSegmentCommand {\n+  private static final File JSON_INVALID_SAMPLE_DATA_FILE = new File(Preconditions\n+      .checkNotNull(TestCreateSegmentCommand.class.getClassLoader().getResource(\"test_data/test_invalid_data.json\"))\n+      .getFile());\n+\n+  private static CreateSegmentCommand _createSegmentCommand = new CreateSegmentCommand();\n+\n+  @Test(\n+    expectedExceptions = Exception.class,\n+    expectedExceptionsMessageRegExp = \"^.*test_invalid_data.json.*$\"\n+  )\n+  public void testReadingInvalidJsonFile()\n+      throws Exception {\n+    final String fileDirectoryPath = JSON_INVALID_SAMPLE_DATA_FILE.getParent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NjEwMg=="}, "originalCommit": {"oid": "32599ed3d05f718a5bca1bb35036e4779b0e5eaa"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4041, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}