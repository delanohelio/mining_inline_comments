{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMzAzMDQ1", "number": 5331, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjo0MTozMlrOD5RboA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjo0MTozMlrOD5RboA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzgxMDI0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/predicate/RangePredicateEvaluatorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjo0MTozMlrOGQcTVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjo0MTozMlrOGQcTVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5NDEwMQ==", "bodyText": "Not related to this PR, just shall we start thinking of how to simplify those switch cases code blocks?", "url": "https://github.com/apache/pinot/pull/5331#discussion_r419894101", "createdAt": "2020-05-05T06:41:32Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/predicate/RangePredicateEvaluatorFactory.java", "diffHunk": "@@ -169,19 +171,59 @@ public int getNumMatchingDictIds() {\n   }\n \n   private static final class RealtimeDictionaryBasedRangePredicateEvaluator extends BaseDictionaryBasedPredicateEvaluator {\n+    // When the cardinality of the column is lower than this threshold, pre-calculate the matching dictionary ids;\n+    // otherwise, fetch the value when evaluating each dictionary id.\n+    // TODO: Tune this threshold\n+    private static final int DICT_ID_SET_BASED_CARDINALITY_THRESHOLD = 1000;\n+\n+    final BaseMutableDictionary _dictionary;\n+    final DataType _dataType;\n+    final boolean _dictIdSetBased;\n     final IntSet _matchingDictIdSet;\n-    final int _numMatchingDictIds;\n-    int[] _matchingDictIds;\n-\n-    RealtimeDictionaryBasedRangePredicateEvaluator(RangePredicate rangePredicate, BaseMutableDictionary dictionary) {\n-      _matchingDictIdSet = dictionary\n-          .getDictIdsInRange(rangePredicate.getLowerBoundary(), rangePredicate.getUpperBoundary(),\n-              rangePredicate.includeLowerBoundary(), rangePredicate.includeUpperBoundary());\n-      _numMatchingDictIds = _matchingDictIdSet.size();\n-      if (_numMatchingDictIds == 0) {\n-        _alwaysFalse = true;\n-      } else if (_numMatchingDictIds == dictionary.length()) {\n-        _alwaysTrue = true;\n+    final BaseRawValueBasedPredicateEvaluator _rawValueBasedEvaluator;\n+\n+    RealtimeDictionaryBasedRangePredicateEvaluator(RangePredicate rangePredicate, BaseMutableDictionary dictionary,\n+        DataType dataType) {\n+      _dictionary = dictionary;\n+      _dataType = dataType;\n+      int cardinality = dictionary.length();\n+      if (cardinality < DICT_ID_SET_BASED_CARDINALITY_THRESHOLD) {\n+        _dictIdSetBased = true;\n+        _rawValueBasedEvaluator = null;\n+        _matchingDictIdSet = dictionary\n+            .getDictIdsInRange(rangePredicate.getLowerBoundary(), rangePredicate.getUpperBoundary(),\n+                rangePredicate.includeLowerBoundary(), rangePredicate.includeUpperBoundary());\n+        int numMatchingDictIds = _matchingDictIdSet.size();\n+        if (numMatchingDictIds == 0) {\n+          _alwaysFalse = true;\n+        } else if (numMatchingDictIds == cardinality) {\n+          _alwaysTrue = true;\n+        }\n+      } else {\n+        _dictIdSetBased = false;\n+        _matchingDictIdSet = null;\n+        switch (dataType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec03154343df4831e33092a247505ef0af3d9daf"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3227, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}