{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNzA4ODQ0", "number": 5786, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxODo0NTozMVrOEUaHUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNToyNzozOVrOEUeORQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODM0ODMyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/AggregationFunctionFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxODo0NTozMVrOG6nDSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDoyNDozOVrOG7Hizg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExMDQwOQ==", "bodyText": "we need to start using _ separators. I think the parser now handles both automatically", "url": "https://github.com/apache/pinot/pull/5786#discussion_r464110409", "createdAt": "2020-08-02T18:45:31Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/AggregationFunctionFactory.java", "diffHunk": "@@ -123,6 +123,8 @@ public static AggregationFunction getAggregationFunction(FunctionContext functio\n             return new DistinctCountAggregationFunction(firstArgument);\n           case DISTINCTCOUNTBITMAP:\n             return new DistinctCountBitmapAggregationFunction(firstArgument);\n+          case PARTITIONEDDISTINCTCOUNT:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa12da27acc4c0bf5b9ebb385916f78d31342684"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0Mjc2Ng==", "bodyText": "Discussed offline. We should still keep no underscore within the aggregation function type, and parser will remove the underscore from the input function name to match the function type.", "url": "https://github.com/apache/pinot/pull/5786#discussion_r464642766", "createdAt": "2020-08-03T20:24:39Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/AggregationFunctionFactory.java", "diffHunk": "@@ -123,6 +123,8 @@ public static AggregationFunction getAggregationFunction(FunctionContext functio\n             return new DistinctCountAggregationFunction(firstArgument);\n           case DISTINCTCOUNTBITMAP:\n             return new DistinctCountBitmapAggregationFunction(firstArgument);\n+          case PARTITIONEDDISTINCTCOUNT:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExMDQwOQ=="}, "originalCommit": {"oid": "fa12da27acc4c0bf5b9ebb385916f78d31342684"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODM0OTE5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PartitionedDistinctCountAggregationFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxODo0NjoyOFrOG6nDtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDozMToyMlrOG7Hu8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExMDUxOQ==", "bodyText": "I thought roaring bitmap works for long as well?", "url": "https://github.com/apache/pinot/pull/5786#discussion_r464110519", "createdAt": "2020-08-02T18:46:28Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PartitionedDistinctCountAggregationFunction.java", "diffHunk": "@@ -0,0 +1,425 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import it.unimi.dsi.fastutil.doubles.DoubleOpenHashSet;\n+import it.unimi.dsi.fastutil.floats.FloatOpenHashSet;\n+import it.unimi.dsi.fastutil.longs.LongOpenHashSet;\n+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;\n+import java.util.Collection;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema.ColumnDataType;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+import org.apache.pinot.spi.utils.ByteArray;\n+import org.roaringbitmap.RoaringBitmap;\n+\n+\n+/**\n+ * The {@code PartitionedDistinctCountAggregationFunction} calculates the number of distinct values for a given\n+ * single-value expression.\n+ * <p>IMPORTANT: This function relies on the expression values being partitioned for each segment, where there is no\n+ * common values within different segments.\n+ * <p>This function calculates the exact number of distinct values within the segment, then simply sums up the results\n+ * from different segments to get the final result.\n+ */\n+public class PartitionedDistinctCountAggregationFunction extends BaseSingleInputAggregationFunction<Long, Long> {\n+\n+  public PartitionedDistinctCountAggregationFunction(ExpressionContext expression) {\n+    super(expression);\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.PARTITIONEDDISTINCTCOUNT;\n+  }\n+\n+  @Override\n+  public void accept(AggregationFunctionVisitorBase visitor) {\n+    visitor.visit(this);\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    BlockValSet blockValSet = blockValSetMap.get(_expression);\n+\n+    // For dictionary-encoded expression, store dictionary ids into a RoaringBitmap\n+    if (blockValSet.getDictionary() != null) {\n+      int[] dictIds = blockValSet.getDictionaryIdsSV();\n+      RoaringBitmap bitmap = aggregationResultHolder.getResult();\n+      if (bitmap == null) {\n+        bitmap = new RoaringBitmap();\n+        aggregationResultHolder.setValue(bitmap);\n+      }\n+      bitmap.addN(dictIds, 0, length);\n+      return;\n+    }\n+\n+    // For non-dictionary-encoded expression, store INT values into a RoaringBitmap, other types into an OpenHashSet\n+    DataType valueType = blockValSet.getValueType();\n+    switch (valueType) {\n+      case INT:\n+        int[] intValues = blockValSet.getIntValuesSV();\n+        RoaringBitmap bitmap = aggregationResultHolder.getResult();\n+        if (bitmap == null) {\n+          bitmap = new RoaringBitmap();\n+          aggregationResultHolder.setValue(bitmap);\n+        }\n+        bitmap.addN(intValues, 0, length);\n+        break;\n+      case LONG:\n+        long[] longValues = blockValSet.getLongValuesSV();\n+        LongOpenHashSet longSet = aggregationResultHolder.getResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa12da27acc4c0bf5b9ebb385916f78d31342684"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0NTg3Mw==", "bodyText": "There is a long version roaring bitmap Roaring64NavigableMap which is still in early stage within the current version of RoaringBitmap 0.8.0 we imported. We can test its performance when we upgrade the RoaringBitmap library for the latest version and change it later as it does not involve any backward-incompatible changes.", "url": "https://github.com/apache/pinot/pull/5786#discussion_r464645873", "createdAt": "2020-08-03T20:31:22Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/PartitionedDistinctCountAggregationFunction.java", "diffHunk": "@@ -0,0 +1,425 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import it.unimi.dsi.fastutil.doubles.DoubleOpenHashSet;\n+import it.unimi.dsi.fastutil.floats.FloatOpenHashSet;\n+import it.unimi.dsi.fastutil.longs.LongOpenHashSet;\n+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;\n+import java.util.Collection;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema.ColumnDataType;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+import org.apache.pinot.spi.utils.ByteArray;\n+import org.roaringbitmap.RoaringBitmap;\n+\n+\n+/**\n+ * The {@code PartitionedDistinctCountAggregationFunction} calculates the number of distinct values for a given\n+ * single-value expression.\n+ * <p>IMPORTANT: This function relies on the expression values being partitioned for each segment, where there is no\n+ * common values within different segments.\n+ * <p>This function calculates the exact number of distinct values within the segment, then simply sums up the results\n+ * from different segments to get the final result.\n+ */\n+public class PartitionedDistinctCountAggregationFunction extends BaseSingleInputAggregationFunction<Long, Long> {\n+\n+  public PartitionedDistinctCountAggregationFunction(ExpressionContext expression) {\n+    super(expression);\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.PARTITIONEDDISTINCTCOUNT;\n+  }\n+\n+  @Override\n+  public void accept(AggregationFunctionVisitorBase visitor) {\n+    visitor.visit(this);\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    BlockValSet blockValSet = blockValSetMap.get(_expression);\n+\n+    // For dictionary-encoded expression, store dictionary ids into a RoaringBitmap\n+    if (blockValSet.getDictionary() != null) {\n+      int[] dictIds = blockValSet.getDictionaryIdsSV();\n+      RoaringBitmap bitmap = aggregationResultHolder.getResult();\n+      if (bitmap == null) {\n+        bitmap = new RoaringBitmap();\n+        aggregationResultHolder.setValue(bitmap);\n+      }\n+      bitmap.addN(dictIds, 0, length);\n+      return;\n+    }\n+\n+    // For non-dictionary-encoded expression, store INT values into a RoaringBitmap, other types into an OpenHashSet\n+    DataType valueType = blockValSet.getValueType();\n+    switch (valueType) {\n+      case INT:\n+        int[] intValues = blockValSet.getIntValuesSV();\n+        RoaringBitmap bitmap = aggregationResultHolder.getResult();\n+        if (bitmap == null) {\n+          bitmap = new RoaringBitmap();\n+          aggregationResultHolder.setValue(bitmap);\n+        }\n+        bitmap.addN(intValues, 0, length);\n+        break;\n+      case LONG:\n+        long[] longValues = blockValSet.getLongValuesSV();\n+        LongOpenHashSet longSet = aggregationResultHolder.getResult();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExMDUxOQ=="}, "originalCommit": {"oid": "fa12da27acc4c0bf5b9ebb385916f78d31342684"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTAyMTQ5OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/AggregationFunctionType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNToyNzozOVrOG6skaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDozMTo0MFrOG7Hvig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMDgwOQ==", "bodyText": "Shall we change the function name to something like SEGMENTEDDISTINCTCOUT or let PARTITIONEDDISTINCTCOUNT to take a parameter of MergeLevel to indicate segment level or instance level merge?", "url": "https://github.com/apache/pinot/pull/5786#discussion_r464200809", "createdAt": "2020-08-03T05:27:39Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/AggregationFunctionType.java", "diffHunk": "@@ -28,6 +28,7 @@\n   MINMAXRANGE(\"minMaxRange\"),\n   DISTINCTCOUNT(\"distinctCount\"),\n   DISTINCTCOUNTBITMAP(\"distinctCountBitmap\"),\n+  PARTITIONEDDISTINCTCOUNT(\"partitionedDistinctCount\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa12da27acc4c0bf5b9ebb385916f78d31342684"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0NjAyNg==", "bodyText": "Good point. Renamed to SEGMENTPARTITIONEDDISTINCTCOUNT", "url": "https://github.com/apache/pinot/pull/5786#discussion_r464646026", "createdAt": "2020-08-03T20:31:40Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/AggregationFunctionType.java", "diffHunk": "@@ -28,6 +28,7 @@\n   MINMAXRANGE(\"minMaxRange\"),\n   DISTINCTCOUNT(\"distinctCount\"),\n   DISTINCTCOUNTBITMAP(\"distinctCountBitmap\"),\n+  PARTITIONEDDISTINCTCOUNT(\"partitionedDistinctCount\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMDgwOQ=="}, "originalCommit": {"oid": "fa12da27acc4c0bf5b9ebb385916f78d31342684"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4252, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}