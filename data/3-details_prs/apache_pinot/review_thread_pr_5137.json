{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NDM2NjA2", "number": 5137, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzozMTozNFrODm7ZAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDo0MjoyMlrODnPreQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTQ1NTM2OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/ConstantSingleValueSortedIndex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzozMTozNFrOF0oKnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNDoxOTo0NFrOF0oyCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODM1MQ==", "bodyText": "Good catch. Could you fix another older misuse too:\nhttps://github.com/apache/incubator-pinot/blob/master/pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/IntSingleValueDataFileReader.java#L54", "url": "https://github.com/apache/pinot/pull/5137#discussion_r390728351", "createdAt": "2020-03-11T03:31:34Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/ConstantSingleValueSortedIndex.java", "diffHunk": "@@ -59,26 +42,32 @@ public int getInt(int row) {\n   }\n \n   @Override\n-  public int getInt(int rowId, SortedIndexReaderImpl.Context context) {\n+  public int getInt(int rowId, ReaderContext context) {\n     return 0;\n   }\n \n   @Override\n-  public void close()\n-      throws IOException {\n+  public void readValues(int[] rows, int rowStartPos, int rowSize, int[] values, int valuesStartPos) {\n+    Arrays.fill(values, valuesStartPos, valuesStartPos + rowSize, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cca930e83deaa184e15be759d1da6a0d81e7359"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczODQ0Mg==", "bodyText": "Removed it", "url": "https://github.com/apache/pinot/pull/5137#discussion_r390738442", "createdAt": "2020-03-11T04:19:44Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/ConstantSingleValueSortedIndex.java", "diffHunk": "@@ -59,26 +42,32 @@ public int getInt(int row) {\n   }\n \n   @Override\n-  public int getInt(int rowId, SortedIndexReaderImpl.Context context) {\n+  public int getInt(int rowId, ReaderContext context) {\n     return 0;\n   }\n \n   @Override\n-  public void close()\n-      throws IOException {\n+  public void readValues(int[] rows, int rowStartPos, int rowSize, int[] values, int valuesStartPos) {\n+    Arrays.fill(values, valuesStartPos, valuesStartPos + rowSize, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODM1MQ=="}, "originalCommit": {"oid": "9cca930e83deaa184e15be759d1da6a0d81e7359"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTQ1OTQ5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/ConstantValueDoubleDictionary.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzozNDozN1rOF0oM_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzo1MToyN1rOF03xIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODk1Ng==", "bodyText": "How about constant double value? I also used \"single double\" earlier but was persuaded by Subbu it sounded a little weird", "url": "https://github.com/apache/pinot/pull/5137#discussion_r390728956", "createdAt": "2020-03-11T03:34:37Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/ConstantValueDoubleDictionary.java", "diffHunk": "@@ -19,20 +19,25 @@\n package org.apache.pinot.core.segment.index.readers;\n \n /**\n- * Dictionary for constant-value double\n+ * Dictionary of a single double value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cca930e83deaa184e15be759d1da6a0d81e7359"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczOTQ1NQ==", "bodyText": "I prefer the current comment because the dictionary only contains a single value, instead of multiple values of the same value. @mcvsubbu Opinion?\nFuture plan would be wrap all these classes (forward index, inverted index, dictionary for default column) into one single class.", "url": "https://github.com/apache/pinot/pull/5137#discussion_r390739455", "createdAt": "2020-03-11T04:24:37Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/ConstantValueDoubleDictionary.java", "diffHunk": "@@ -19,20 +19,25 @@\n package org.apache.pinot.core.segment.index.readers;\n \n /**\n- * Dictionary for constant-value double\n+ * Dictionary of a single double value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODk1Ng=="}, "originalCommit": {"oid": "9cca930e83deaa184e15be759d1da6a0d81e7359"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4Mzk2OA==", "bodyText": "I like the one class approach, and had suggested that earlier to Haibo. Let us not worry too much about a comment", "url": "https://github.com/apache/pinot/pull/5137#discussion_r390983968", "createdAt": "2020-03-11T13:51:27Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/ConstantValueDoubleDictionary.java", "diffHunk": "@@ -19,20 +19,25 @@\n package org.apache.pinot.core.segment.index.readers;\n \n /**\n- * Dictionary for constant-value double\n+ * Dictionary of a single double value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODk1Ng=="}, "originalCommit": {"oid": "9cca930e83deaa184e15be759d1da6a0d81e7359"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTU4Mzc0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/BaseVirtualColumnProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNTowNzo0NVrOF0pY-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNTo1ODo1NlrOF0qE2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0ODQwOQ==", "bodyText": "Why is this class renamed to SortedIndex instead of InvertedIndex?", "url": "https://github.com/apache/pinot/pull/5137#discussion_r390748409", "createdAt": "2020-03-11T05:07:45Z", "author": {"login": "jackjlli"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/BaseVirtualColumnProvider.java", "diffHunk": "@@ -39,7 +39,7 @@\n \n   public DataFileReader buildReader(VirtualColumnContext context) {\n     if (context.getFieldSpec().isSingleValueField()) {\n-      return new ConstantSingleValueInvertedIndex(0);\n+      return new ConstantSingleValueSortedIndex(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "839f126e32606300c77b778d68aa2309092be6a0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1OTY0MA==", "bodyText": "Because it is sorted index (sorted index can be used as both forward and inverted index).\nThe multi-value one should be split into forward and inverted index, but that is out of the scope of this pr, so will address later.", "url": "https://github.com/apache/pinot/pull/5137#discussion_r390759640", "createdAt": "2020-03-11T05:58:56Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/BaseVirtualColumnProvider.java", "diffHunk": "@@ -39,7 +39,7 @@\n \n   public DataFileReader buildReader(VirtualColumnContext context) {\n     if (context.getFieldSpec().isSingleValueField()) {\n-      return new ConstantSingleValueInvertedIndex(0);\n+      return new ConstantSingleValueSortedIndex(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0ODQwOQ=="}, "originalCommit": {"oid": "839f126e32606300c77b778d68aa2309092be6a0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDc3OTQ1OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/ConstantValueDoubleDictionary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDo0MjoyMlrOF1IY3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDo1Nzo1OFrOF1I2lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NjI4NA==", "bodyText": "I didnt knoiw we had this convention. The jacvadocs on insertionIndexOf() does not state this in comments. Also, it points to a binarysearch implementation that does not exist (or, I could not locate it).. Can you fix the comments to reflect this convention? thanks.", "url": "https://github.com/apache/pinot/pull/5137#discussion_r391256284", "createdAt": "2020-03-11T20:42:22Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/ConstantValueDoubleDictionary.java", "diffHunk": "@@ -19,20 +19,25 @@\n package org.apache.pinot.core.segment.index.readers;\n \n /**\n- * Dictionary for constant-value double\n+ * Dictionary of a single double value.\n  */\n-\n public class ConstantValueDoubleDictionary extends BaseImmutableDictionary {\n-  final Double _value;\n+  private final double _value;\n \n-  public ConstantValueDoubleDictionary(Double value) {\n+  public ConstantValueDoubleDictionary(double value) {\n     super(1);\n     _value = value;\n   }\n \n   @Override\n   public int insertionIndexOf(String stringValue) {\n-\n+    double doubleValue = Double.parseDouble(stringValue);\n+    if (doubleValue < _value) {\n+      return -1;\n+    }\n+    if (doubleValue > _value) {\n+      return -2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "617d263612b55322344674bcd3c86eb3694e6866"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI2Mzg5NA==", "bodyText": "Discussed offline, and that is the general binary search convention.", "url": "https://github.com/apache/pinot/pull/5137#discussion_r391263894", "createdAt": "2020-03-11T20:57:58Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/ConstantValueDoubleDictionary.java", "diffHunk": "@@ -19,20 +19,25 @@\n package org.apache.pinot.core.segment.index.readers;\n \n /**\n- * Dictionary for constant-value double\n+ * Dictionary of a single double value.\n  */\n-\n public class ConstantValueDoubleDictionary extends BaseImmutableDictionary {\n-  final Double _value;\n+  private final double _value;\n \n-  public ConstantValueDoubleDictionary(Double value) {\n+  public ConstantValueDoubleDictionary(double value) {\n     super(1);\n     _value = value;\n   }\n \n   @Override\n   public int insertionIndexOf(String stringValue) {\n-\n+    double doubleValue = Double.parseDouble(stringValue);\n+    if (doubleValue < _value) {\n+      return -1;\n+    }\n+    if (doubleValue > _value) {\n+      return -2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NjI4NA=="}, "originalCommit": {"oid": "617d263612b55322344674bcd3c86eb3694e6866"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3510, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}