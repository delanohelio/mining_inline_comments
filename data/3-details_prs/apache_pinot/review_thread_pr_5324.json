{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMjQwOTMx", "number": 5324, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo0MTo0NVrOD5GB-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo0NTowM1rOD5fP_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTk0MjM0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo0MTo0NVrOGQLArw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDo0NTozMFrOGQRgUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMDc5OQ==", "bodyText": "The term 'bucket' is not intuitive to me (but that could be just me). You may think of using something like:\ntoEpochHoursRounded(Long millis, String granularity) {\n\nwith the comment that the method converts the milis to hours, and rounds it down to the nearest granularity specified.\nYou can decide, though.", "url": "https://github.com/apache/pinot/pull/5324#discussion_r419610799", "createdAt": "2020-05-04T17:41:45Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -35,9 +63,79 @@ static Long toEpochHours(Long millis) {\n   }\n \n   /**\n-   * Convert epoch millis to epoch minutes, bucketed by given bucket granularity\n+   * Convert epoch millis to epoch hours, bucketed by given bucket granularity\n    */\n-  static Long toEpochMinutes(Long millis, String bucket) {\n-    return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n+  static Long toEpochHoursBucket(Long millis, String bucket) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a199c1eee51e4b9c57d5d8987404b1d156edb92"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzMTg5Mg==", "bodyText": "Agreed, I don't like \"bucket\" here either, but couldn't think of a better one. Rounded does sound better, but i wonder if it'll be confusing.\nFor example, consider millis 1578685189000 (2020/01/10 11:39:49)\ntoEpochSeconds(millis) = 1578685189\nWhat we want is - toEpochSeconds(millis, 10) = 1578685189/10 = 157868518 i.e. divide the seconds to create tenSecondsSinceEpoch\nRounding can be confused with - keep the same format, but find the nearest 10 minutes value.\ntoEpochSecondsRounded(millis, 10) = (1578685189/10) * 10 = 1578685180\nMaybe we should solicit more opinions? Once this function starts being used, it'll be with us forever", "url": "https://github.com/apache/pinot/pull/5324#discussion_r419631892", "createdAt": "2020-05-04T18:15:46Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -35,9 +63,79 @@ static Long toEpochHours(Long millis) {\n   }\n \n   /**\n-   * Convert epoch millis to epoch minutes, bucketed by given bucket granularity\n+   * Convert epoch millis to epoch hours, bucketed by given bucket granularity\n    */\n-  static Long toEpochMinutes(Long millis, String bucket) {\n-    return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n+  static Long toEpochHoursBucket(Long millis, String bucket) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMDc5OQ=="}, "originalCommit": {"oid": "7a199c1eee51e4b9c57d5d8987404b1d156edb92"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxNzIwMQ==", "bodyText": "As per our offline conversation, we now have toEpochXXX, toEpochXXXRounded, toEpochXXXBucket. For example,\n\ntoEpochSeconds(millis) - converts from millis to  epoch seconds\ntoEpochSecondsRounded (millis, 10) - converts from millis to epoch seconds, and rounds to the smaller 10th value i.e. (seconds/10) * 10\ntoEpochSecondsBucket(millis, 10) - converts from millis to epoch seconds and divides by bucket, to get tenSecondsFromEpoch i.e. seconds / 10", "url": "https://github.com/apache/pinot/pull/5324#discussion_r419717201", "createdAt": "2020-05-04T20:45:30Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -35,9 +63,79 @@ static Long toEpochHours(Long millis) {\n   }\n \n   /**\n-   * Convert epoch millis to epoch minutes, bucketed by given bucket granularity\n+   * Convert epoch millis to epoch hours, bucketed by given bucket granularity\n    */\n-  static Long toEpochMinutes(Long millis, String bucket) {\n-    return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n+  static Long toEpochHoursBucket(Long millis, String bucket) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMDc5OQ=="}, "originalCommit": {"oid": "7a199c1eee51e4b9c57d5d8987404b1d156edb92"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTk0NjQ2OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo0MzowMVrOGQLDew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODoyMDoyOVrOGQMd5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMTUxNQ==", "bodyText": "Isnt it better to use Integer.valueOf()? Agreed it returns an object, but these objects are cached (for < 128 values, which is likely to be the case here). Otherwise, we will be parsing a string for every row ingested?", "url": "https://github.com/apache/pinot/pull/5324#discussion_r419611515", "createdAt": "2020-05-04T17:43:01Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -35,9 +63,79 @@ static Long toEpochHours(Long millis) {\n   }\n \n   /**\n-   * Convert epoch millis to epoch minutes, bucketed by given bucket granularity\n+   * Convert epoch millis to epoch hours, bucketed by given bucket granularity\n    */\n-  static Long toEpochMinutes(Long millis, String bucket) {\n-    return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n+  static Long toEpochHoursBucket(Long millis, String bucket) {\n+    return TimeUnit.MILLISECONDS.toHours(millis) / Integer.parseInt(bucket);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a199c1eee51e4b9c57d5d8987404b1d156edb92"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzNDY2MA==", "bodyText": "Ah didn't know about the caching done by valueOf. Thanks", "url": "https://github.com/apache/pinot/pull/5324#discussion_r419634660", "createdAt": "2020-05-04T18:20:29Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -35,9 +63,79 @@ static Long toEpochHours(Long millis) {\n   }\n \n   /**\n-   * Convert epoch millis to epoch minutes, bucketed by given bucket granularity\n+   * Convert epoch millis to epoch hours, bucketed by given bucket granularity\n    */\n-  static Long toEpochMinutes(Long millis, String bucket) {\n-    return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n+  static Long toEpochHoursBucket(Long millis, String bucket) {\n+    return TimeUnit.MILLISECONDS.toHours(millis) / Integer.parseInt(bucket);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMTUxNQ=="}, "originalCommit": {"oid": "7a199c1eee51e4b9c57d5d8987404b1d156edb92"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTk5MTA3OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo1NDozNVrOGQLfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODoyMjoyMlrOGQMh_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxODcyOQ==", "bodyText": "another way to do this is to keep it protected and let tests access it. Alternatively, keep it private and use introspection (makes it brittle, but we should discover very soon since the tests will fail).", "url": "https://github.com/apache/pinot/pull/5324#discussion_r419618729", "createdAt": "2020-05-04T17:54:35Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -631,4 +632,130 @@ public int hashCode() {\n     result = EqualityUtils.hashCodeOf(result, _dateTimeFieldSpecs);\n     return result;\n   }\n+\n+  /**\n+   * Helper method that converts a {@link TimeFieldSpec} to {@link DateTimeFieldSpec}\n+   * 1) If timeFieldSpec contains only incoming granularity spec, directly convert it to a dateTimeFieldSpec\n+   * 2) If timeFieldSpec contains incoming aas well as outgoing granularity spec, use the outgoing spec to construct the dateTimeFieldSpec,\n+   *    and configure a transform function for the conversion from incoming\n+   */\n+  @VisibleForTesting\n+  static DateTimeFieldSpec convertToDateTimeFieldSpec(TimeFieldSpec timeFieldSpec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a199c1eee51e4b9c57d5d8987404b1d156edb92"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzNTcwOA==", "bodyText": "My intention was to do the first of your options. I chose the \"default\" access modifier instead of protected, as it's one level more restrictive", "url": "https://github.com/apache/pinot/pull/5324#discussion_r419635708", "createdAt": "2020-05-04T18:22:22Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -631,4 +632,130 @@ public int hashCode() {\n     result = EqualityUtils.hashCodeOf(result, _dateTimeFieldSpecs);\n     return result;\n   }\n+\n+  /**\n+   * Helper method that converts a {@link TimeFieldSpec} to {@link DateTimeFieldSpec}\n+   * 1) If timeFieldSpec contains only incoming granularity spec, directly convert it to a dateTimeFieldSpec\n+   * 2) If timeFieldSpec contains incoming aas well as outgoing granularity spec, use the outgoing spec to construct the dateTimeFieldSpec,\n+   *    and configure a transform function for the conversion from incoming\n+   */\n+  @VisibleForTesting\n+  static DateTimeFieldSpec convertToDateTimeFieldSpec(TimeFieldSpec timeFieldSpec) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxODcyOQ=="}, "originalCommit": {"oid": "7a199c1eee51e4b9c57d5d8987404b1d156edb92"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjA3NDIxOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo0NTowM1rOGQyO_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo0NTowM1rOGQyO_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MzQzNg==", "bodyText": "It will be nice if you also add here\n(1) an example of the use case in time-field-spec that needs bucketing in order to be backward compatible.\n(2) A comment that use of these bucket functions is discouraged unless you know what you are doing (e.g. 5-minutes-since-epoch does not make sense to someone looking at the timestamp, or writing queries. instead, Millis-since-epoch rounded to 5 minutes makes a lot more sense).", "url": "https://github.com/apache/pinot/pull/5324#discussion_r420253436", "createdAt": "2020-05-05T16:45:03Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -35,9 +53,127 @@ static Long toEpochHours(Long millis) {\n   }\n \n   /**\n-   * Convert epoch millis to epoch minutes, bucketed by given bucket granularity\n+   * Convert epoch millis to epoch days\n+   */\n+  static Long toEpochDays(Long millis) {\n+    return TimeUnit.MILLISECONDS.toDays(millis);\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch seconds, round to nearest rounding bucket\n+   */\n+  static Long toEpochSecondsRounded(Long millis, String roundingValue) {\n+    int roundToNearest = Integer.parseInt(roundingValue);\n+    return (TimeUnit.MILLISECONDS.toSeconds(millis) / roundToNearest) * roundToNearest;\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch minutes, round to nearest rounding bucket\n+   */\n+  static Long toEpochMinutesRounded(Long millis, String roundingValue) {\n+    int roundToNearest = Integer.parseInt(roundingValue);\n+    return (TimeUnit.MILLISECONDS.toMinutes(millis) / roundToNearest) * roundToNearest;\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch hours, round to nearest rounding bucket\n+   */\n+  static Long toEpochHoursRounded(Long millis, String roundingValue) {\n+    int roundToNearest = Integer.parseInt(roundingValue);\n+    return (TimeUnit.MILLISECONDS.toHours(millis) / roundToNearest) * roundToNearest;\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch days, round to nearest rounding bucket\n+   */\n+  static Long toEpochDaysRounded(Long millis, String roundingValue) {\n+    int roundToNearest = Integer.parseInt(roundingValue);\n+    return (TimeUnit.MILLISECONDS.toDays(millis) / roundToNearest) * roundToNearest;\n+  }\n+\n+  // TODO: toEpochXXXBucket methods are only needed to convert from TimeFieldSpec to DateTimeFieldSpec.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dc5a827c2306dece93066de2502cd3b38d9400"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3215, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}