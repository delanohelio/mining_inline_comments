{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MDI5NDYz", "number": 6017, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjoxMzowOVrOEjqtUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzoyODowMVrOEkwo1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODM1MzQ0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjoxMzoxMFrOHSJeww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo1NjozOFrOHT26ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5MTc0Nw==", "bodyText": "Can you also add FieldConfig validation here?", "url": "https://github.com/apache/pinot/pull/6017#discussion_r488791747", "createdAt": "2020-09-15T16:13:10Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -225,4 +229,54 @@ private static void validateTierConfigList(@Nullable List<TierConfig> tierConfig\n       }\n     }\n   }\n+\n+  private static void validateIndexingConfig(@Nullable IndexingConfig indexingConfig, @Nullable Schema schema) {\n+    if (indexingConfig == null || schema == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "139cfdbfcf10872ce12e7ebb0d4f9bf2b778b05d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NDY4Mg==", "bodyText": "Done", "url": "https://github.com/apache/pinot/pull/6017#discussion_r490584682", "createdAt": "2020-09-17T21:56:38Z", "author": {"login": "icefury71"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -225,4 +229,54 @@ private static void validateTierConfigList(@Nullable List<TierConfig> tierConfig\n       }\n     }\n   }\n+\n+  private static void validateIndexingConfig(@Nullable IndexingConfig indexingConfig, @Nullable Schema schema) {\n+    if (indexingConfig == null || schema == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5MTc0Nw=="}, "originalCommit": {"oid": "139cfdbfcf10872ce12e7ebb0d4f9bf2b778b05d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODUxOTQzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo1NTo0N1rOHSLHNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo1NjoyOFrOHT26Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxODQ4Ng==", "bodyText": "Could you update the description of the method validate as well?", "url": "https://github.com/apache/pinot/pull/6017#discussion_r488818486", "createdAt": "2020-09-15T16:55:47Z", "author": {"login": "jackjlli"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -65,6 +68,7 @@ public static void validate(TableConfig tableConfig, @Nullable Schema schema) {\n     validateValidationConfig(tableConfig, schema);\n     validateIngestionConfig(tableConfig.getIngestionConfig(), schema);\n     validateTierConfigList(tableConfig.getTierConfigsList());\n+    validateIndexingConfig(tableConfig.getIndexingConfig(), schema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "139cfdbfcf10872ce12e7ebb0d4f9bf2b778b05d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NDYzNQ==", "bodyText": "Done", "url": "https://github.com/apache/pinot/pull/6017#discussion_r490584635", "createdAt": "2020-09-17T21:56:28Z", "author": {"login": "icefury71"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -65,6 +68,7 @@ public static void validate(TableConfig tableConfig, @Nullable Schema schema) {\n     validateValidationConfig(tableConfig, schema);\n     validateIngestionConfig(tableConfig.getIngestionConfig(), schema);\n     validateTierConfigList(tableConfig.getTierConfigsList());\n+    validateIndexingConfig(tableConfig.getIndexingConfig(), schema);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxODQ4Ng=="}, "originalCommit": {"oid": "139cfdbfcf10872ce12e7ebb0d4f9bf2b778b05d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTc5OTM3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMjoyNDozMlrOHSX28g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo1NjoyMlrOHT26Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyNzMxNA==", "bodyText": "can we include star tree index columns here?", "url": "https://github.com/apache/pinot/pull/6017#discussion_r489027314", "createdAt": "2020-09-15T22:24:32Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -225,4 +229,54 @@ private static void validateTierConfigList(@Nullable List<TierConfig> tierConfig\n       }\n     }\n   }\n+\n+  private static void validateIndexingConfig(@Nullable IndexingConfig indexingConfig, @Nullable Schema schema) {\n+    if (indexingConfig == null || schema == null) {\n+      return;\n+    }\n+    Map<String, String> columnNameToConfigMap = new HashMap<>();\n+\n+    if (indexingConfig.getBloomFilterColumns() != null) {\n+      for (String columnName : indexingConfig.getBloomFilterColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Bloom Filter Config\");\n+      }\n+    }\n+    if (indexingConfig.getInvertedIndexColumns() != null) {\n+      for (String columnName : indexingConfig.getInvertedIndexColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Inverted Index Config\");\n+      }\n+    }\n+    if (indexingConfig.getNoDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getNoDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"No Dictionary Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getOnHeapDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getOnHeapDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"On Heap Dictionary Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getRangeIndexColumns() != null) {\n+      for (String columnName : indexingConfig.getRangeIndexColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Range Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getSortedColumn() != null) {\n+      for (String columnName : indexingConfig.getSortedColumn()) {\n+        columnNameToConfigMap.put(columnName, \"Sorted Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getVarLengthDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getVarLengthDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Var Length Column Config\");\n+      }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "139cfdbfcf10872ce12e7ebb0d4f9bf2b778b05d"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NDU5OA==", "bodyText": "Added. Please review", "url": "https://github.com/apache/pinot/pull/6017#discussion_r490584598", "createdAt": "2020-09-17T21:56:22Z", "author": {"login": "icefury71"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -225,4 +229,54 @@ private static void validateTierConfigList(@Nullable List<TierConfig> tierConfig\n       }\n     }\n   }\n+\n+  private static void validateIndexingConfig(@Nullable IndexingConfig indexingConfig, @Nullable Schema schema) {\n+    if (indexingConfig == null || schema == null) {\n+      return;\n+    }\n+    Map<String, String> columnNameToConfigMap = new HashMap<>();\n+\n+    if (indexingConfig.getBloomFilterColumns() != null) {\n+      for (String columnName : indexingConfig.getBloomFilterColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Bloom Filter Config\");\n+      }\n+    }\n+    if (indexingConfig.getInvertedIndexColumns() != null) {\n+      for (String columnName : indexingConfig.getInvertedIndexColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Inverted Index Config\");\n+      }\n+    }\n+    if (indexingConfig.getNoDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getNoDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"No Dictionary Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getOnHeapDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getOnHeapDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"On Heap Dictionary Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getRangeIndexColumns() != null) {\n+      for (String columnName : indexingConfig.getRangeIndexColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Range Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getSortedColumn() != null) {\n+      for (String columnName : indexingConfig.getSortedColumn()) {\n+        columnNameToConfigMap.put(columnName, \"Sorted Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getVarLengthDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getVarLengthDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Var Length Column Config\");\n+      }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyNzMxNA=="}, "originalCommit": {"oid": "139cfdbfcf10872ce12e7ebb0d4f9bf2b778b05d"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTgxMDc5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzoyODowMVrOHT41zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjoyODowN1rOHT7x5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNjI2OA==", "bodyText": "can we use the AggregationFunctionColumnPair#fromColumnName or reuse the delimiter field in this class?", "url": "https://github.com/apache/pinot/pull/6017#discussion_r490616268", "createdAt": "2020-09-17T23:28:01Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -225,4 +233,99 @@ private static void validateTierConfigList(@Nullable List<TierConfig> tierConfig\n       }\n     }\n   }\n+\n+  /**\n+   * Validates the Indexing Config\n+   * Ensures that every referred column name exists in the corresponding schema\n+   */\n+  private static void validateIndexingConfig(@Nullable IndexingConfig indexingConfig, @Nullable Schema schema) {\n+    if (indexingConfig == null || schema == null) {\n+      return;\n+    }\n+    Map<String, String> columnNameToConfigMap = new HashMap<>();\n+\n+    if (indexingConfig.getBloomFilterColumns() != null) {\n+      for (String columnName : indexingConfig.getBloomFilterColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Bloom Filter Config\");\n+      }\n+    }\n+    if (indexingConfig.getInvertedIndexColumns() != null) {\n+      for (String columnName : indexingConfig.getInvertedIndexColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Inverted Index Config\");\n+      }\n+    }\n+    if (indexingConfig.getNoDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getNoDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"No Dictionary Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getOnHeapDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getOnHeapDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"On Heap Dictionary Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getRangeIndexColumns() != null) {\n+      for (String columnName : indexingConfig.getRangeIndexColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Range Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getSortedColumn() != null) {\n+      for (String columnName : indexingConfig.getSortedColumn()) {\n+        columnNameToConfigMap.put(columnName, \"Sorted Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getVarLengthDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getVarLengthDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Var Length Column Config\");\n+      }\n+    }\n+    List<StarTreeIndexConfig> starTreeIndexConfigList = indexingConfig.getStarTreeIndexConfigs();\n+    if (starTreeIndexConfigList != null) {\n+      for (StarTreeIndexConfig starTreeIndexConfig : starTreeIndexConfigList) {\n+        // Dimension split order cannot be null\n+        for (String columnName : starTreeIndexConfig.getDimensionsSplitOrder()) {\n+          columnNameToConfigMap.put(columnName, \"StarTreeIndex Config\");\n+        }\n+        // Function column pairs cannot be null\n+        for (String functionColumnPair : starTreeIndexConfig.getFunctionColumnPairs()) {\n+          String[] functionColumnArray = functionColumnPair.split(\"__\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b553b44bdaf79a7e23b91e811d9c87d04f3cef24"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2NDQyMQ==", "bodyText": "Done", "url": "https://github.com/apache/pinot/pull/6017#discussion_r490664421", "createdAt": "2020-09-18T02:28:07Z", "author": {"login": "icefury71"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -225,4 +233,99 @@ private static void validateTierConfigList(@Nullable List<TierConfig> tierConfig\n       }\n     }\n   }\n+\n+  /**\n+   * Validates the Indexing Config\n+   * Ensures that every referred column name exists in the corresponding schema\n+   */\n+  private static void validateIndexingConfig(@Nullable IndexingConfig indexingConfig, @Nullable Schema schema) {\n+    if (indexingConfig == null || schema == null) {\n+      return;\n+    }\n+    Map<String, String> columnNameToConfigMap = new HashMap<>();\n+\n+    if (indexingConfig.getBloomFilterColumns() != null) {\n+      for (String columnName : indexingConfig.getBloomFilterColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Bloom Filter Config\");\n+      }\n+    }\n+    if (indexingConfig.getInvertedIndexColumns() != null) {\n+      for (String columnName : indexingConfig.getInvertedIndexColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Inverted Index Config\");\n+      }\n+    }\n+    if (indexingConfig.getNoDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getNoDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"No Dictionary Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getOnHeapDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getOnHeapDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"On Heap Dictionary Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getRangeIndexColumns() != null) {\n+      for (String columnName : indexingConfig.getRangeIndexColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Range Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getSortedColumn() != null) {\n+      for (String columnName : indexingConfig.getSortedColumn()) {\n+        columnNameToConfigMap.put(columnName, \"Sorted Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getVarLengthDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getVarLengthDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Var Length Column Config\");\n+      }\n+    }\n+    List<StarTreeIndexConfig> starTreeIndexConfigList = indexingConfig.getStarTreeIndexConfigs();\n+    if (starTreeIndexConfigList != null) {\n+      for (StarTreeIndexConfig starTreeIndexConfig : starTreeIndexConfigList) {\n+        // Dimension split order cannot be null\n+        for (String columnName : starTreeIndexConfig.getDimensionsSplitOrder()) {\n+          columnNameToConfigMap.put(columnName, \"StarTreeIndex Config\");\n+        }\n+        // Function column pairs cannot be null\n+        for (String functionColumnPair : starTreeIndexConfig.getFunctionColumnPairs()) {\n+          String[] functionColumnArray = functionColumnPair.split(\"__\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNjI2OA=="}, "originalCommit": {"oid": "b553b44bdaf79a7e23b91e811d9c87d04f3cef24"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3886, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}