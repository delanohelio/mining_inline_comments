{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NTI0NjY3", "number": 5579, "title": "[QueryContext] Use QueryContext in all PlanNodes", "bodyText": "Description\nReplace BrokerRequest with QueryContext in all PlanNodes\nThis change can save the redundant expression compilation of:\n\nGroup by expressions\nSelection expreesions\nOrder by expressions\n\nExpressions in aggregation and filter will be addressed in the following PRs", "createdAt": "2020-06-16T23:52:44Z", "url": "https://github.com/apache/pinot/pull/5579", "merged": true, "mergeCommit": {"oid": "51fa4761d5e843d7007e8035a608dee42fbc8c09"}, "closed": true, "closedAt": "2020-06-19T01:42:36Z", "author": {"login": "Jackie-Jiang"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsSG66ABqjM0NTU3MTc4NTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcso394gFqTQzMzc0ODkwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c56b0239557c94cf7bae02f5a5a7240844e6148e", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/c56b0239557c94cf7bae02f5a5a7240844e6148e", "committedDate": "2020-06-16T23:46:52Z", "message": "[QueryContext] Use QueryContext in all PlanNodes\n\nReplace BrokerRequest with QueryContext in all PlanNodes\nThis change can save the redundant expression compilation of:\n- Group by expressions\n- Selection expreesions\n- Order by expressions\n\nExpressions in aggregation and filter will be addressed in the following PRs"}, "afterCommit": {"oid": "56b10cef00ca7993eb439b4139d311fca7dc1ad6", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/56b10cef00ca7993eb439b4139d311fca7dc1ad6", "committedDate": "2020-06-17T23:04:22Z", "message": "[QueryContext] Use QueryContext in all PlanNodes\n\nReplace BrokerRequest with QueryContext in all PlanNodes\nThis change can save the redundant expression compilation of:\n- Group by expressions\n- Selection expreesions\n- Order by expressions\n\nExpressions in aggregation and filter will be addressed in the following PRs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56b10cef00ca7993eb439b4139d311fca7dc1ad6", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/56b10cef00ca7993eb439b4139d311fca7dc1ad6", "committedDate": "2020-06-17T23:04:22Z", "message": "[QueryContext] Use QueryContext in all PlanNodes\n\nReplace BrokerRequest with QueryContext in all PlanNodes\nThis change can save the redundant expression compilation of:\n- Group by expressions\n- Selection expreesions\n- Order by expressions\n\nExpressions in aggregation and filter will be addressed in the following PRs"}, "afterCommit": {"oid": "abacb268688335adb0efd6dea1da562c8114d740", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/abacb268688335adb0efd6dea1da562c8114d740", "committedDate": "2020-06-18T05:37:28Z", "message": "[QueryContext] Use QueryContext in all PlanNodes\n\nReplace BrokerRequest with QueryContext in all PlanNodes\nThis change can save the redundant expression compilation of:\n- Group by expressions\n- Selection expreesions\n- Order by expressions\n\nExpressions in aggregation and filter will be addressed in the following PRs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTkxNzAy", "url": "https://github.com/apache/pinot/pull/5579#pullrequestreview-433591702", "createdAt": "2020-06-18T19:39:47Z", "commit": {"oid": "abacb268688335adb0efd6dea1da562c8114d740"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTozOTo0N1rOGl9nRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTozOTo0N1rOGl9nRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1OTk3Mw==", "bodyText": "So, this will go away in future PRs where instead of generating FilterQueryTree per FilterPlanNode (per segment), we will just use the already built FilterContext from QueryContext?", "url": "https://github.com/apache/pinot/pull/5579#discussion_r442459973", "createdAt": "2020-06-18T19:39:47Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/FilterPlanNode.java", "diffHunk": "@@ -40,22 +39,23 @@\n import org.apache.pinot.core.operator.filter.TextMatchFilterOperator;\n import org.apache.pinot.core.operator.filter.predicate.PredicateEvaluator;\n import org.apache.pinot.core.operator.filter.predicate.PredicateEvaluatorProvider;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n import org.apache.pinot.core.segment.index.readers.NullValueVectorReader;\n \n \n public class FilterPlanNode implements PlanNode {\n-  private final BrokerRequest _brokerRequest;\n-  private final IndexSegment _segment;\n+  private final IndexSegment _indexSegment;\n+  private final QueryContext _queryContext;\n \n-  public FilterPlanNode(IndexSegment segment, BrokerRequest brokerRequest) {\n-    _segment = segment;\n-    _brokerRequest = brokerRequest;\n+  public FilterPlanNode(IndexSegment indexSegment, QueryContext queryContext) {\n+    _indexSegment = indexSegment;\n+    _queryContext = queryContext;\n   }\n \n   @Override\n   public BaseFilterOperator run() {\n-    FilterQueryTree rootFilterNode = RequestUtils.generateFilterQueryTree(_brokerRequest);\n-    return constructPhysicalOperator(rootFilterNode, _segment, _brokerRequest.getDebugOptions());\n+    FilterQueryTree rootFilterNode = RequestUtils.generateFilterQueryTree(_queryContext.getBrokerRequest());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abacb268688335adb0efd6dea1da562c8114d740"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTk0OTEz", "url": "https://github.com/apache/pinot/pull/5579#pullrequestreview-433594913", "createdAt": "2020-06-18T19:44:42Z", "commit": {"oid": "abacb268688335adb0efd6dea1da562c8114d740"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo0NDo0MlrOGl9xew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo0NDo0MlrOGl9xew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MjU4Nw==", "bodyText": "Why do we need to convert the expression in QueryContext to TransformExpressionTree? I thought we are planning to get rid of TransformExpressionTree and replace with Expression in QueryContext. Is that part of future PRs?", "url": "https://github.com/apache/pinot/pull/5579#discussion_r442462587", "createdAt": "2020-06-18T19:44:42Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/AggregationGroupByOrderByPlanNode.java", "diffHunk": "@@ -48,22 +49,23 @@\n   private final TransformPlanNode _transformPlanNode;\n   private final StarTreeTransformPlanNode _starTreeTransformPlanNode;\n \n-  public AggregationGroupByOrderByPlanNode(IndexSegment indexSegment, BrokerRequest brokerRequest,\n+  public AggregationGroupByOrderByPlanNode(IndexSegment indexSegment, QueryContext queryContext,\n       int maxInitialResultHolderCapacity, int numGroupsLimit) {\n     _indexSegment = indexSegment;\n     _maxInitialResultHolderCapacity = maxInitialResultHolderCapacity;\n     _numGroupsLimit = numGroupsLimit;\n-    _aggregationFunctions = AggregationFunctionUtils.getAggregationFunctions(brokerRequest);\n-    List<String> groupByExpressions = brokerRequest.getGroupBy().getExpressions();\n+    _aggregationFunctions = AggregationFunctionUtils.getAggregationFunctions(queryContext.getBrokerRequest());\n+    List<ExpressionContext> groupByExpressions = queryContext.getGroupByExpressions();\n+    assert groupByExpressions != null;\n     int numGroupByExpressions = groupByExpressions.size();\n     _groupByExpressions = new TransformExpressionTree[numGroupByExpressions];\n     for (int i = 0; i < numGroupByExpressions; i++) {\n-      _groupByExpressions[i] = TransformExpressionTree.compileToExpressionTree(groupByExpressions.get(i));\n+      _groupByExpressions[i] = groupByExpressions.get(i).toTransformExpressionTree();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abacb268688335adb0efd6dea1da562c8114d740"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjAxMTk2", "url": "https://github.com/apache/pinot/pull/5579#pullrequestreview-433601196", "createdAt": "2020-06-18T19:54:12Z", "commit": {"oid": "abacb268688335adb0efd6dea1da562c8114d740"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1NDoxMlrOGl-Esg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1NDoxMlrOGl-Esg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2NzUwNg==", "bodyText": "I think we should add a TODO in this and related places that eventually (in the end state of this migration), this compilation to TransformExpressionTree per segment's plan node will not be needed.", "url": "https://github.com/apache/pinot/pull/5579#discussion_r442467506", "createdAt": "2020-06-18T19:54:12Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/SelectionPlanNode.java", "diffHunk": "@@ -32,66 +30,65 @@\n import org.apache.pinot.core.operator.query.SelectionOnlyOperator;\n import org.apache.pinot.core.operator.query.SelectionOrderByOperator;\n import org.apache.pinot.core.operator.transform.TransformOperator;\n-import org.apache.pinot.pql.parsers.pql2.ast.IdentifierAstNode;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.request.context.OrderByExpressionContext;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n+import org.apache.pinot.core.query.selection.SelectionOperatorUtils;\n \n \n /**\n  * The <code>SelectionPlanNode</code> class provides the execution plan for selection query on a single segment.\n  */\n public class SelectionPlanNode implements PlanNode {\n   private final IndexSegment _indexSegment;\n-  private final Selection _selection;\n+  private final QueryContext _queryContext;\n   private final TransformPlanNode _transformPlanNode;\n \n-  public SelectionPlanNode(IndexSegment indexSegment, BrokerRequest brokerRequest) {\n+  public SelectionPlanNode(IndexSegment indexSegment, QueryContext queryContext) {\n     _indexSegment = indexSegment;\n-    _selection = brokerRequest.getSelections();\n-    _transformPlanNode =\n-        new TransformPlanNode(_indexSegment, brokerRequest, collectExpressionsToTransform(indexSegment, brokerRequest));\n+    _queryContext = queryContext;\n+    _transformPlanNode = new TransformPlanNode(_indexSegment, queryContext, collectExpressions());\n   }\n \n   @Override\n   public Operator<IntermediateResultsBlock> run() {\n     TransformOperator transformOperator = _transformPlanNode.run();\n-    if (_selection.getSize() > 0) {\n-      if (_selection.getSelectionSortSequence() == null) {\n-        return new SelectionOnlyOperator(_indexSegment, _selection, transformOperator);\n+    Selection selection = _queryContext.getBrokerRequest().getSelections();\n+    if (_queryContext.getLimit() > 0) {\n+      if (_queryContext.getOrderByExpressions() == null) {\n+        return new SelectionOnlyOperator(_indexSegment, selection, transformOperator);\n       } else {\n-        return new SelectionOrderByOperator(_indexSegment, _selection, transformOperator);\n+        return new SelectionOrderByOperator(_indexSegment, selection, transformOperator);\n       }\n     } else {\n-      return new EmptySelectionOperator(_indexSegment, _selection, transformOperator);\n+      return new EmptySelectionOperator(_indexSegment, selection, transformOperator);\n     }\n   }\n \n-  private Set<TransformExpressionTree> collectExpressionsToTransform(IndexSegment indexSegment,\n-      BrokerRequest brokerRequest) {\n-\n-    Set<TransformExpressionTree> expressionTrees = new LinkedHashSet<>();\n-    Selection selection = brokerRequest.getSelections();\n+  private Set<TransformExpressionTree> collectExpressions() {\n+    Set<TransformExpressionTree> expressionTrees = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abacb268688335adb0efd6dea1da562c8114d740"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjAyMzYx", "url": "https://github.com/apache/pinot/pull/5579#pullrequestreview-433602361", "createdAt": "2020-06-18T19:55:58Z", "commit": {"oid": "abacb268688335adb0efd6dea1da562c8114d740"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1NTo1OFrOGl-IbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1NTo1OFrOGl-IbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2ODQ2MA==", "bodyText": "Why do we have to check for limit to extract order by expressions?", "url": "https://github.com/apache/pinot/pull/5579#discussion_r442468460", "createdAt": "2020-06-18T19:55:58Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/SelectionPlanNode.java", "diffHunk": "@@ -32,66 +30,65 @@\n import org.apache.pinot.core.operator.query.SelectionOnlyOperator;\n import org.apache.pinot.core.operator.query.SelectionOrderByOperator;\n import org.apache.pinot.core.operator.transform.TransformOperator;\n-import org.apache.pinot.pql.parsers.pql2.ast.IdentifierAstNode;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.request.context.OrderByExpressionContext;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n+import org.apache.pinot.core.query.selection.SelectionOperatorUtils;\n \n \n /**\n  * The <code>SelectionPlanNode</code> class provides the execution plan for selection query on a single segment.\n  */\n public class SelectionPlanNode implements PlanNode {\n   private final IndexSegment _indexSegment;\n-  private final Selection _selection;\n+  private final QueryContext _queryContext;\n   private final TransformPlanNode _transformPlanNode;\n \n-  public SelectionPlanNode(IndexSegment indexSegment, BrokerRequest brokerRequest) {\n+  public SelectionPlanNode(IndexSegment indexSegment, QueryContext queryContext) {\n     _indexSegment = indexSegment;\n-    _selection = brokerRequest.getSelections();\n-    _transformPlanNode =\n-        new TransformPlanNode(_indexSegment, brokerRequest, collectExpressionsToTransform(indexSegment, brokerRequest));\n+    _queryContext = queryContext;\n+    _transformPlanNode = new TransformPlanNode(_indexSegment, queryContext, collectExpressions());\n   }\n \n   @Override\n   public Operator<IntermediateResultsBlock> run() {\n     TransformOperator transformOperator = _transformPlanNode.run();\n-    if (_selection.getSize() > 0) {\n-      if (_selection.getSelectionSortSequence() == null) {\n-        return new SelectionOnlyOperator(_indexSegment, _selection, transformOperator);\n+    Selection selection = _queryContext.getBrokerRequest().getSelections();\n+    if (_queryContext.getLimit() > 0) {\n+      if (_queryContext.getOrderByExpressions() == null) {\n+        return new SelectionOnlyOperator(_indexSegment, selection, transformOperator);\n       } else {\n-        return new SelectionOrderByOperator(_indexSegment, _selection, transformOperator);\n+        return new SelectionOrderByOperator(_indexSegment, selection, transformOperator);\n       }\n     } else {\n-      return new EmptySelectionOperator(_indexSegment, _selection, transformOperator);\n+      return new EmptySelectionOperator(_indexSegment, selection, transformOperator);\n     }\n   }\n \n-  private Set<TransformExpressionTree> collectExpressionsToTransform(IndexSegment indexSegment,\n-      BrokerRequest brokerRequest) {\n-\n-    Set<TransformExpressionTree> expressionTrees = new LinkedHashSet<>();\n-    Selection selection = brokerRequest.getSelections();\n+  private Set<TransformExpressionTree> collectExpressions() {\n+    Set<TransformExpressionTree> expressionTrees = new HashSet<>();\n \n     // Extract selection expressions\n-    List<String> selectionColumns = selection.getSelectionColumns();\n-    if (selectionColumns.size() == 1 && selectionColumns.get(0).equals(\"*\")) {\n-      for (String column : indexSegment.getPhysicalColumnNames()) {\n-        expressionTrees.add(new TransformExpressionTree(new IdentifierAstNode(column)));\n+    List<ExpressionContext> selectExpressions = _queryContext.getSelectExpressions();\n+    if (selectExpressions.size() == 1 && selectExpressions.get(0).equals(SelectionOperatorUtils.IDENTIFIER_STAR)) {\n+      for (String column : _indexSegment.getPhysicalColumnNames()) {\n+        expressionTrees\n+            .add(new TransformExpressionTree(TransformExpressionTree.ExpressionType.IDENTIFIER, column, null));\n       }\n     } else {\n-      for (String selectionColumn : selectionColumns) {\n-        expressionTrees.add(TransformExpressionTree.compileToExpressionTree(selectionColumn));\n+      for (ExpressionContext selectExpression : selectExpressions) {\n+        expressionTrees.add(selectExpression.toTransformExpressionTree());\n       }\n     }\n \n-    // Extract order-by expressions.\n-    if (selection.getSize() > 0) {\n-      List<SelectionSort> sortSequence = selection.getSelectionSortSequence();\n-      if (sortSequence != null) {\n-        for (SelectionSort selectionSort : sortSequence) {\n-          String orderByColumn = selectionSort.getColumn();\n-          expressionTrees.add(TransformExpressionTree.compileToExpressionTree(orderByColumn));\n-        }\n+    // Extract order-by expressions\n+    List<OrderByExpressionContext> orderByExpressions = _queryContext.getOrderByExpressions();\n+    if (_queryContext.getLimit() > 0 && orderByExpressions != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abacb268688335adb0efd6dea1da562c8114d740"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjA0ODc2", "url": "https://github.com/apache/pinot/pull/5579#pullrequestreview-433604876", "createdAt": "2020-06-18T19:59:46Z", "commit": {"oid": "abacb268688335adb0efd6dea1da562c8114d740"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1OTo0NlrOGl-QBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1OTo0NlrOGl-QBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3MDQwNA==", "bodyText": "Do we need a unit test for this? Until now we were using a different implementation to convert to TET. Now we have this one. May be there is no need to add since long as all the end to end query execution tests pass, we are good?", "url": "https://github.com/apache/pinot/pull/5579#discussion_r442470404", "createdAt": "2020-06-18T19:59:46Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/request/context/ExpressionContext.java", "diffHunk": "@@ -85,6 +89,29 @@ public void getColumns(Set<String> columns) {\n     }\n   }\n \n+  /**\n+   * Temporary helper method to help the migration from BrokerRequest to QueryContext.\n+   */\n+  public TransformExpressionTree toTransformExpressionTree() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abacb268688335adb0efd6dea1da562c8114d740"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjEyMjg3", "url": "https://github.com/apache/pinot/pull/5579#pullrequestreview-433612287", "createdAt": "2020-06-18T20:11:12Z", "commit": {"oid": "abacb268688335adb0efd6dea1da562c8114d740"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDoxMToxM1rOGl-mWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDoxMToxM1rOGl-mWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3NjEyMA==", "bodyText": "The limit should be set to the max (1, user specified limit) or default (10) if not specified. This can be done at the parse time", "url": "https://github.com/apache/pinot/pull/5579#discussion_r442476120", "createdAt": "2020-06-18T20:11:13Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/TransformPlanNode.java", "diffHunk": "@@ -79,16 +77,13 @@ private void extractProjectionColumns(TransformExpressionTree expression, Set<St\n   /**\n    * Helper method to set the max number of docs to return for selection queries\n    */\n-  private void setMaxDocsForSelection(BrokerRequest brokerRequest) {\n-    if (!brokerRequest.isSetAggregationsInfo()) {\n-      Selection selection = brokerRequest.getSelections();\n-\n-      // Update MaxDocPerNextCall\n-      if (selection.getSize() > 0) {\n-        List<SelectionSort> sortSequence = selection.getSelectionSortSequence();\n-        if (sortSequence == null) {\n-          // For selection only queries, select minimum number of documents\n-          _maxDocPerNextCall = Math.min(selection.getSize(), _maxDocPerNextCall);\n+  private void setMaxDocsForSelection(QueryContext queryContext) {\n+    if (!QueryContextUtils.isAggregationQuery(queryContext)) {\n+      // Selection queries\n+      if (queryContext.getLimit() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abacb268688335adb0efd6dea1da562c8114d740"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e87e9f1bb4e0ca6d4de1bb4479f42c9c79157433", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/e87e9f1bb4e0ca6d4de1bb4479f42c9c79157433", "committedDate": "2020-06-19T01:20:00Z", "message": "[QueryContext] Use QueryContext in all PlanNodes\n\nReplace BrokerRequest with QueryContext in all PlanNodes\nThis change can save the redundant expression compilation of:\n- Group by expressions\n- Selection expreesions\n- Order by expressions\n\nExpressions in aggregation and filter will be addressed in the following PRs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abacb268688335adb0efd6dea1da562c8114d740", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/abacb268688335adb0efd6dea1da562c8114d740", "committedDate": "2020-06-18T05:37:28Z", "message": "[QueryContext] Use QueryContext in all PlanNodes\n\nReplace BrokerRequest with QueryContext in all PlanNodes\nThis change can save the redundant expression compilation of:\n- Group by expressions\n- Selection expreesions\n- Order by expressions\n\nExpressions in aggregation and filter will be addressed in the following PRs"}, "afterCommit": {"oid": "e87e9f1bb4e0ca6d4de1bb4479f42c9c79157433", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/e87e9f1bb4e0ca6d4de1bb4479f42c9c79157433", "committedDate": "2020-06-19T01:20:00Z", "message": "[QueryContext] Use QueryContext in all PlanNodes\n\nReplace BrokerRequest with QueryContext in all PlanNodes\nThis change can save the redundant expression compilation of:\n- Group by expressions\n- Selection expreesions\n- Order by expressions\n\nExpressions in aggregation and filter will be addressed in the following PRs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzQ4OTAw", "url": "https://github.com/apache/pinot/pull/5579#pullrequestreview-433748900", "createdAt": "2020-06-19T01:36:05Z", "commit": {"oid": "e87e9f1bb4e0ca6d4de1bb4479f42c9c79157433"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 634, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}