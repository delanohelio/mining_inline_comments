{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODY5NTIy", "number": 6129, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoxOTowN1rOEsvALg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo0NToyN1rOEtQD6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzQyODk0OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoxOTowN1rOHgI2Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDoxNDo0MlrOHkf-cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MTQ2Ng==", "bodyText": "I'm not sure why 20 seconds sleep was chosen in the first place, but does replacing it with running compat_tester mean the tests are going to take 20 seconds?\nAlso maybe it reads better if $COMPAT_TESTER is replaced with a function call, something like runCompatiblityTests, which is more consistent with startService, startService, ... here.", "url": "https://github.com/apache/pinot/pull/6129#discussion_r503461466", "createdAt": "2020-10-12T18:19:07Z", "author": {"login": "sajjad-moradi"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -157,20 +181,27 @@ fi\n \n # Setup initial cluster with olderCommit and do rolling upgrade\n startServices \"$oldTargetDir\"\n-sleep 20\n+#$COMPAT_TESTER pre-controller-upgrade.yaml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a251ee7aa916b74a17a7d2a49859b4794eabfc14"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzNDY3Mg==", "bodyText": "Removed the sleep. It should not be needed.\nReplacing with a function call may be fine, but we still have to check the return from that function. I have added the status check now. Let it be like this for now, until we add more meat to it", "url": "https://github.com/apache/pinot/pull/6129#discussion_r508034672", "createdAt": "2020-10-19T20:14:42Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -157,20 +181,27 @@ fi\n \n # Setup initial cluster with olderCommit and do rolling upgrade\n startServices \"$oldTargetDir\"\n-sleep 20\n+#$COMPAT_TESTER pre-controller-upgrade.yaml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MTQ2Ng=="}, "originalCommit": {"oid": "a251ee7aa916b74a17a7d2a49859b4794eabfc14"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzQzMjk5OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyMDozMVrOHgI40Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyMDozMVrOHgI40Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MjA5Nw==", "bodyText": "If you decide to have(or remove) previous sleeps, please do the same for this one as well?", "url": "https://github.com/apache/pinot/pull/6129#discussion_r503462097", "createdAt": "2020-10-12T18:20:31Z", "author": {"login": "sajjad-moradi"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -157,20 +181,27 @@ fi\n \n # Setup initial cluster with olderCommit and do rolling upgrade\n startServices \"$oldTargetDir\"\n-sleep 20\n+#$COMPAT_TESTER pre-controller-upgrade.yaml\n stopService controller \"$oldTargetDir\"\n startService controller \"$newTargetDir\"\n+#$COMPAT_TESTER pre-broker-upgrade.yaml\n stopService broker \"$oldTargetDir\"\n startService broker \"$newTargetDir\"\n+#$COMPAT_TESTER pre-server-upgrade.yaml\n stopService server \"$oldTargetDir\"\n startService server \"$newTargetDir\"\n-sleep 20\n+#$COMPAT_TESTER post-server-upgrade.yaml\n+\n+# Upgrade complated, now do a rollback\n stopService controller \"$newTargetDir\"\n startService controller \"$oldTargetDir\"\n+#$COMPAT_TESTER post-server-rollback.yaml\n stopService broker \"$newTargetDir\"\n startService broker \"$oldTargetDir\"\n+#$COMPAT_TESTER post-broker-rollback.yaml\n stopService server \"$newTargetDir\"\n startService server \"$oldTargetDir\"\n+#$COMPAT_TESTER post-controller-rollback.yaml\n sleep 20", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a251ee7aa916b74a17a7d2a49859b4794eabfc14"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODg0NTIzOnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/compat/SegmentOp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo0NToyN1rOHg8FZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDoxNzoxOFrOHkgD_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwMDkwMA==", "bodyText": "We may not need to print it out in the console?", "url": "https://github.com/apache/pinot/pull/6129#discussion_r504300900", "createdAt": "2020-10-13T22:45:27Z", "author": {"login": "jackjlli"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/compat/SegmentOp.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.compat;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+\n+/**\n+ * Segment Operations:\n+ * UPLOAD:\n+ *   Generates a segment for a table from the data in the input file.\n+ *   Uploads the segment, and verifies that the segments appear in externalview\n+ * DELETE:\n+ *   Deletes the segment from the table.\n+ *\n+ * TODO:\n+ *  - Maybe segment names can be auto-generated if the name is \"AUTO\".\n+ *  - We can add segmentGeneration config file as an option also\n+ *  - We can consider supporting different readers, starting with csv. Will help in easily scanning the data.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class SegmentOp extends BaseOp {\n+  public enum Op {\n+    UPLOAD,\n+    DELETE\n+  }\n+\n+  private Op _op;\n+  private String _inputDataFileName;\n+  private String _segmentName;\n+  private String _tableConfigFileName;\n+\n+  public SegmentOp() {\n+    super(OpType.SEGMENT_OP);\n+  }\n+\n+  public Op getOp() {\n+    return _op;\n+  }\n+\n+  public void setOp(Op op) {\n+    _op = op;\n+  }\n+\n+  public String getInputDataFileName() {\n+    return _inputDataFileName;\n+  }\n+\n+  public void setInputDataFileName(String inputDataFileName) {\n+    _inputDataFileName = inputDataFileName;\n+  }\n+\n+  public String getSegmentName() {\n+    return _segmentName;\n+  }\n+\n+  public void setSegmentName(String segmentName) {\n+    _segmentName = segmentName;\n+  }\n+\n+  public String getTableConfigFileName() {\n+    return _tableConfigFileName;\n+  }\n+\n+  public void setTableConfigFileName(String tableConfigFileName) {\n+    _tableConfigFileName = tableConfigFileName;\n+  }\n+\n+  @Override\n+  boolean runOp() {\n+    switch(_op) {\n+      case UPLOAD:\n+        System.out.println(\"Generating segment \" + _segmentName + \" from \" + _inputDataFileName + \" and uploading to \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a251ee7aa916b74a17a7d2a49859b4794eabfc14"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzNjA5NQ==", "bodyText": "We will not need it. I put it there so we can see what is being run.  Once we add more logic here, we can remove these things", "url": "https://github.com/apache/pinot/pull/6129#discussion_r508036095", "createdAt": "2020-10-19T20:17:18Z", "author": {"login": "mcvsubbu"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/compat/SegmentOp.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.compat;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+\n+/**\n+ * Segment Operations:\n+ * UPLOAD:\n+ *   Generates a segment for a table from the data in the input file.\n+ *   Uploads the segment, and verifies that the segments appear in externalview\n+ * DELETE:\n+ *   Deletes the segment from the table.\n+ *\n+ * TODO:\n+ *  - Maybe segment names can be auto-generated if the name is \"AUTO\".\n+ *  - We can add segmentGeneration config file as an option also\n+ *  - We can consider supporting different readers, starting with csv. Will help in easily scanning the data.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class SegmentOp extends BaseOp {\n+  public enum Op {\n+    UPLOAD,\n+    DELETE\n+  }\n+\n+  private Op _op;\n+  private String _inputDataFileName;\n+  private String _segmentName;\n+  private String _tableConfigFileName;\n+\n+  public SegmentOp() {\n+    super(OpType.SEGMENT_OP);\n+  }\n+\n+  public Op getOp() {\n+    return _op;\n+  }\n+\n+  public void setOp(Op op) {\n+    _op = op;\n+  }\n+\n+  public String getInputDataFileName() {\n+    return _inputDataFileName;\n+  }\n+\n+  public void setInputDataFileName(String inputDataFileName) {\n+    _inputDataFileName = inputDataFileName;\n+  }\n+\n+  public String getSegmentName() {\n+    return _segmentName;\n+  }\n+\n+  public void setSegmentName(String segmentName) {\n+    _segmentName = segmentName;\n+  }\n+\n+  public String getTableConfigFileName() {\n+    return _tableConfigFileName;\n+  }\n+\n+  public void setTableConfigFileName(String tableConfigFileName) {\n+    _tableConfigFileName = tableConfigFileName;\n+  }\n+\n+  @Override\n+  boolean runOp() {\n+    switch(_op) {\n+      case UPLOAD:\n+        System.out.println(\"Generating segment \" + _segmentName + \" from \" + _inputDataFileName + \" and uploading to \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwMDkwMA=="}, "originalCommit": {"oid": "a251ee7aa916b74a17a7d2a49859b4794eabfc14"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3745, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}