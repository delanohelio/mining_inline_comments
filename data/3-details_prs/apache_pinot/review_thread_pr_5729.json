{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MTU3ODE2", "number": 5729, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjo1MzoxNFrOERPyNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzowMjoxNFrOERP6Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTE5ODYwOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/test/resources/job_json.config", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjo1MzoxNFrOG12-Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjo1MzoxNFrOG12-Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyODM1OA==", "bodyText": "nit: new line.", "url": "https://github.com/apache/pinot/pull/5729#discussion_r459128358", "createdAt": "2020-07-22T22:53:14Z", "author": {"login": "xiangfu0"}, "path": "pinot-spi/src/test/resources/job_json.config", "diffHunk": "@@ -0,0 +1,23 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+year=2020\n+month=07\n+day=22\n+job-spec-format=json", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608a001b62d91303ca76ec1b21d55500d9e6beb4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTE5OTQ2OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/test/resources/ingestionJobSpecTemplate.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjo1MzozNVrOG12-nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjo1MzozNVrOG12-nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyODQ3Ng==", "bodyText": "nit: new line", "url": "https://github.com/apache/pinot/pull/5729#discussion_r459128476", "createdAt": "2020-07-22T22:53:35Z", "author": {"login": "xiangfu0"}, "path": "pinot-spi/src/test/resources/ingestionJobSpecTemplate.json", "diffHunk": "@@ -0,0 +1,38 @@\n+{\n+  \"executionFrameworkSpec\": {\n+    \"name\": \"standalone\",\n+    \"segmentGenerationJobRunnerClassName\": \"org.apache.pinot.plugin.ingestion.batch.standalone.SegmentGenerationJobRunner\",\n+    \"segmentTarPushJobRunnerClassName\": \"org.apache.pinot.plugin.ingestion.batch.standalone.SegmentTarPushJobRunner\",\n+    \"segmentUriPushJobRunnerClassName\": \"org.apache.pinot.plugin.ingestion.batch.standalone.SegmentUriPushJobRunner\"\n+  },\n+  \"jobType\": \"SegmentCreationAndTarPush\",\n+  \"inputDirURI\": \"file:///path/to/input/${ year }/${ month }/${ day }\",\n+  \"includeFileNamePattern\": \"glob:**/*.parquet\",\n+  \"excludeFileNamePattern\": \"glob:**/*.avro\",\n+  \"outputDirURI\": \"file:///path/to/output/${year}/${month}/${day}\",\n+  \"overwriteOutput\": true,\n+  \"pinotFSSpecs\": [\n+    {\n+      \"scheme\": \"file\",\n+      \"className\": \"org.apache.pinot.spi.filesystem.LocalPinotFS\"\n+    }\n+  ],\n+  \"recordReaderSpec\": {\n+    \"dataFormat\": \"parquet\",\n+    \"className\": \"org.apache.pinot.parquet.data.readers.ParquetRecordReader\"\n+  },\n+  \"tableSpec\": {\n+    \"tableName\": \"myTable\",\n+    \"schemaURI\": \"http://localhost:9000/tables/myTable/schema\",\n+    \"tableConfigURI\": \"http://localhost:9000/tables/myTable\"\n+  },\n+  \"pinotClusterSpecs\": [\n+    {\n+      \"controllerURI\": \"localhost:9000\"\n+    }\n+  ],\n+  \"pushJobSpec\": {\n+    \"pushAttempts\": 2,\n+    \"pushRetryIntervalMillis\": 1000\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608a001b62d91303ca76ec1b21d55500d9e6beb4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTIxOTU5OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/ingestion/batch/IngestionJobLauncher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzowMjoxNFrOG13KSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODozNToyMlrOG2WzWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMTQ2NQ==", "bodyText": "use propertiesMap", "url": "https://github.com/apache/pinot/pull/5729#discussion_r459131465", "createdAt": "2020-07-22T23:02:14Z", "author": {"login": "xiangfu0"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/ingestion/batch/IngestionJobLauncher.java", "diffHunk": "@@ -57,21 +61,33 @@ public static SegmentGenerationJobSpec getSegmentGenerationJobSpec(String jobSpe\n     if (context != null) {\n       propertiesMap.putAll(context);\n     }\n-    String yamlTemplate;\n+    String jobSpecTemplate;\n     try {\n-      yamlTemplate = IOUtils.toString(new BufferedReader(new FileReader(jobSpecFilePath)));\n+      jobSpecTemplate = IOUtils.toString(new BufferedReader(new FileReader(jobSpecFilePath)));\n     } catch (IOException e) {\n       throw new RuntimeException(String.format(\"Unable to read ingestion job spec file [%s].\", jobSpecFilePath), e);\n     }\n-    String yamlStr;\n+    String jobSpecStr;\n     try {\n-      yamlStr = GroovyTemplateUtils.renderTemplate(yamlTemplate, propertiesMap);\n+      jobSpecStr = GroovyTemplateUtils.renderTemplate(jobSpecTemplate, propertiesMap);\n     } catch (Exception e) {\n       throw new RuntimeException(String\n           .format(\"Unable to render templates on ingestion job spec template file - [%s] with propertiesMap - [%s].\",\n               jobSpecFilePath, Arrays.toString(propertiesMap.entrySet().toArray())), e);\n     }\n-    return new Yaml().loadAs(yamlStr, SegmentGenerationJobSpec.class);\n+\n+    String jobSpecFormat = properties.getProperty(JOB_SPEC_FORMAT, YAML);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608a001b62d91303ca76ec1b21d55500d9e6beb4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0OTg4Mg==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5729#discussion_r459649882", "createdAt": "2020-07-23T18:35:22Z", "author": {"login": "KKcorps"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/ingestion/batch/IngestionJobLauncher.java", "diffHunk": "@@ -57,21 +61,33 @@ public static SegmentGenerationJobSpec getSegmentGenerationJobSpec(String jobSpe\n     if (context != null) {\n       propertiesMap.putAll(context);\n     }\n-    String yamlTemplate;\n+    String jobSpecTemplate;\n     try {\n-      yamlTemplate = IOUtils.toString(new BufferedReader(new FileReader(jobSpecFilePath)));\n+      jobSpecTemplate = IOUtils.toString(new BufferedReader(new FileReader(jobSpecFilePath)));\n     } catch (IOException e) {\n       throw new RuntimeException(String.format(\"Unable to read ingestion job spec file [%s].\", jobSpecFilePath), e);\n     }\n-    String yamlStr;\n+    String jobSpecStr;\n     try {\n-      yamlStr = GroovyTemplateUtils.renderTemplate(yamlTemplate, propertiesMap);\n+      jobSpecStr = GroovyTemplateUtils.renderTemplate(jobSpecTemplate, propertiesMap);\n     } catch (Exception e) {\n       throw new RuntimeException(String\n           .format(\"Unable to render templates on ingestion job spec template file - [%s] with propertiesMap - [%s].\",\n               jobSpecFilePath, Arrays.toString(propertiesMap.entrySet().toArray())), e);\n     }\n-    return new Yaml().loadAs(yamlStr, SegmentGenerationJobSpec.class);\n+\n+    String jobSpecFormat = properties.getProperty(JOB_SPEC_FORMAT, YAML);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMTQ2NQ=="}, "originalCommit": {"oid": "608a001b62d91303ca76ec1b21d55500d9e6beb4"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4171, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}