{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NTg2NTU1", "number": 5617, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo1OTowOVrOEI0uHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToyOToyOFrOEKtqBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Njg3ODM4OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/helix/TableCache.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo1OTowOVrOGpBUFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDo1MDoxMlrOGqhtVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2NjMyNA==", "bodyText": "Nit: Are you planning to add additional canonicalization logic? If not, we are substituting one method for another, right?", "url": "https://github.com/apache/pinot/pull/5617#discussion_r445666324", "createdAt": "2020-06-25T15:59:09Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/helix/TableCache.java", "diffHunk": "@@ -80,6 +80,14 @@ public String getActualColumnName(String tableName, String columnName) {\n     return columnName;\n   }\n \n+  public TableConfig getTableConfig(String tableName) {\n+    return _tableConfigChangeListener._tableConfigMap.get(canonicalize(tableName));\n+  }\n+\n+  private String canonicalize(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcyMDk0Ng==", "bodyText": "If latter, probably not worth creating another layer of method call.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r445720946", "createdAt": "2020-06-25T17:27:58Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/helix/TableCache.java", "diffHunk": "@@ -80,6 +80,14 @@ public String getActualColumnName(String tableName, String columnName) {\n     return columnName;\n   }\n \n+  public TableConfig getTableConfig(String tableName) {\n+    return _tableConfigChangeListener._tableConfigMap.get(canonicalize(tableName));\n+  }\n+\n+  private String canonicalize(String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2NjMyNA=="}, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0NTY1Mw==", "bodyText": "Using canonicalize explicitly states the reason why we're making the those strings lower case which IMO makes the code more maintainable, but since you both think otherwise, I'm reverting it.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r447245653", "createdAt": "2020-06-29T20:50:12Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/helix/TableCache.java", "diffHunk": "@@ -80,6 +80,14 @@ public String getActualColumnName(String tableName, String columnName) {\n     return columnName;\n   }\n \n+  public TableConfig getTableConfig(String tableName) {\n+    return _tableConfigChangeListener._tableConfigMap.get(canonicalize(tableName));\n+  }\n+\n+  private String canonicalize(String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2NjMyNA=="}, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Njg5MDgzOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjowMjoxNVrOGpBb-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo1ODoxOVrOGr561g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2ODM0NA==", "bodyText": "Can you create an issue for this and reference the issue number? It is not clear what needs to be done here. I am guessing that the change is that if metadata is added, then we don't need to extract metadata?", "url": "https://github.com/apache/pinot/pull/5617#discussion_r445668344", "createdAt": "2020-06-25T16:02:15Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -194,38 +196,32 @@ private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiP\n       ControllerFilePathProvider provider = ControllerFilePathProvider.getInstance();\n       String tempFileName = TMP_DIR_PREFIX + System.nanoTime();\n       tempDecryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n+      tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n       tempSegmentDir = new File(provider.getUntarredFileTempDir(), tempFileName);\n \n-      // Set default crypter to the noop crypter when no crypter header is sent\n-      // In this case, the noop crypter will not do any operations, so the encrypted and decrypted file will have the same\n-      // file path.\n-      if (crypterClassName == null) {\n-        crypterClassName = NoOpPinotCrypter.class.getSimpleName();\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n-      } else {\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n-      }\n-\n-      // TODO: Change when metadata upload added\n-      String metadataProviderClass = DefaultMetadataExtractor.class.getName();\n+      boolean uploadedSegmentIsEncrypted = !Strings.isNullOrEmpty(crypterClassNameInHeader);\n \n-      SegmentMetadata segmentMetadata;\n+      File dstFile = uploadedSegmentIsEncrypted ? tempEncryptedFile : tempDecryptedFile;\n       FileUploadDownloadClient.FileUploadType uploadType = getUploadType(uploadTypeStr);\n       switch (uploadType) {\n         case URI:\n-          segmentMetadata =\n-              getMetadataForURI(crypterClassName, downloadUri, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-                  metadataProviderClass);\n+          getSegmentFileFromURI(downloadUri, dstFile);\n           break;\n         case SEGMENT:\n-          getFileFromMultipart(multiPart, tempEncryptedFile);\n-          segmentMetadata = getSegmentMetadata(crypterClassName, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-              metadataProviderClass);\n+          getSegmentFileFromMultipart(multiPart, dstFile);\n           break;\n         default:\n           throw new UnsupportedOperationException(\"Unsupported upload type: \" + uploadType);\n       }\n \n+      if (uploadedSegmentIsEncrypted) {\n+        decryptFile(crypterClassNameInHeader, tempEncryptedFile, tempDecryptedFile);\n+      }\n+\n+      // TODO: Change when metadata upload added", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NTA3MA==", "bodyText": "I'm not sure why TODO is added there. I looked at it git history and it's added on this PR: 3155. If you (or other ppl) can confirm the intention there, i'll open up an issue for it.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r447345070", "createdAt": "2020-06-30T00:58:55Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -194,38 +196,32 @@ private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiP\n       ControllerFilePathProvider provider = ControllerFilePathProvider.getInstance();\n       String tempFileName = TMP_DIR_PREFIX + System.nanoTime();\n       tempDecryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n+      tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n       tempSegmentDir = new File(provider.getUntarredFileTempDir(), tempFileName);\n \n-      // Set default crypter to the noop crypter when no crypter header is sent\n-      // In this case, the noop crypter will not do any operations, so the encrypted and decrypted file will have the same\n-      // file path.\n-      if (crypterClassName == null) {\n-        crypterClassName = NoOpPinotCrypter.class.getSimpleName();\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n-      } else {\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n-      }\n-\n-      // TODO: Change when metadata upload added\n-      String metadataProviderClass = DefaultMetadataExtractor.class.getName();\n+      boolean uploadedSegmentIsEncrypted = !Strings.isNullOrEmpty(crypterClassNameInHeader);\n \n-      SegmentMetadata segmentMetadata;\n+      File dstFile = uploadedSegmentIsEncrypted ? tempEncryptedFile : tempDecryptedFile;\n       FileUploadDownloadClient.FileUploadType uploadType = getUploadType(uploadTypeStr);\n       switch (uploadType) {\n         case URI:\n-          segmentMetadata =\n-              getMetadataForURI(crypterClassName, downloadUri, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-                  metadataProviderClass);\n+          getSegmentFileFromURI(downloadUri, dstFile);\n           break;\n         case SEGMENT:\n-          getFileFromMultipart(multiPart, tempEncryptedFile);\n-          segmentMetadata = getSegmentMetadata(crypterClassName, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-              metadataProviderClass);\n+          getSegmentFileFromMultipart(multiPart, dstFile);\n           break;\n         default:\n           throw new UnsupportedOperationException(\"Unsupported upload type: \" + uploadType);\n       }\n \n+      if (uploadedSegmentIsEncrypted) {\n+        decryptFile(crypterClassNameInHeader, tempEncryptedFile, tempDecryptedFile);\n+      }\n+\n+      // TODO: Change when metadata upload added", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2ODM0NA=="}, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzOTkzMg==", "bodyText": "I went through some history. I believe it is trying to refer to the case when the client (segment pusher) does the following:\n(1) Upload segment to deepstore\n(2) upload metadata to controller so that it can update ZK.\nWe don't support this pattern. When a URI is uploaded, we actually download the segment and extract metadata instead.\nA lot of code needs to change when we support metata-only upload, so let us just get rid of this TODO. thanks", "url": "https://github.com/apache/pinot/pull/5617#discussion_r447839932", "createdAt": "2020-06-30T17:00:35Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -194,38 +196,32 @@ private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiP\n       ControllerFilePathProvider provider = ControllerFilePathProvider.getInstance();\n       String tempFileName = TMP_DIR_PREFIX + System.nanoTime();\n       tempDecryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n+      tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n       tempSegmentDir = new File(provider.getUntarredFileTempDir(), tempFileName);\n \n-      // Set default crypter to the noop crypter when no crypter header is sent\n-      // In this case, the noop crypter will not do any operations, so the encrypted and decrypted file will have the same\n-      // file path.\n-      if (crypterClassName == null) {\n-        crypterClassName = NoOpPinotCrypter.class.getSimpleName();\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n-      } else {\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n-      }\n-\n-      // TODO: Change when metadata upload added\n-      String metadataProviderClass = DefaultMetadataExtractor.class.getName();\n+      boolean uploadedSegmentIsEncrypted = !Strings.isNullOrEmpty(crypterClassNameInHeader);\n \n-      SegmentMetadata segmentMetadata;\n+      File dstFile = uploadedSegmentIsEncrypted ? tempEncryptedFile : tempDecryptedFile;\n       FileUploadDownloadClient.FileUploadType uploadType = getUploadType(uploadTypeStr);\n       switch (uploadType) {\n         case URI:\n-          segmentMetadata =\n-              getMetadataForURI(crypterClassName, downloadUri, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-                  metadataProviderClass);\n+          getSegmentFileFromURI(downloadUri, dstFile);\n           break;\n         case SEGMENT:\n-          getFileFromMultipart(multiPart, tempEncryptedFile);\n-          segmentMetadata = getSegmentMetadata(crypterClassName, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-              metadataProviderClass);\n+          getSegmentFileFromMultipart(multiPart, dstFile);\n           break;\n         default:\n           throw new UnsupportedOperationException(\"Unsupported upload type: \" + uploadType);\n       }\n \n+      if (uploadedSegmentIsEncrypted) {\n+        decryptFile(crypterClassNameInHeader, tempEncryptedFile, tempDecryptedFile);\n+      }\n+\n+      // TODO: Change when metadata upload added", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2ODM0NA=="}, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MDkwMg==", "bodyText": "FYI, we will need the support for metadata push pretty soon. But that is somewhat unrelated here, so just an FYI at this point in time.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r448690902", "createdAt": "2020-07-02T00:58:19Z", "author": {"login": "mayankshriv"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -194,38 +196,32 @@ private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiP\n       ControllerFilePathProvider provider = ControllerFilePathProvider.getInstance();\n       String tempFileName = TMP_DIR_PREFIX + System.nanoTime();\n       tempDecryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n+      tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n       tempSegmentDir = new File(provider.getUntarredFileTempDir(), tempFileName);\n \n-      // Set default crypter to the noop crypter when no crypter header is sent\n-      // In this case, the noop crypter will not do any operations, so the encrypted and decrypted file will have the same\n-      // file path.\n-      if (crypterClassName == null) {\n-        crypterClassName = NoOpPinotCrypter.class.getSimpleName();\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n-      } else {\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n-      }\n-\n-      // TODO: Change when metadata upload added\n-      String metadataProviderClass = DefaultMetadataExtractor.class.getName();\n+      boolean uploadedSegmentIsEncrypted = !Strings.isNullOrEmpty(crypterClassNameInHeader);\n \n-      SegmentMetadata segmentMetadata;\n+      File dstFile = uploadedSegmentIsEncrypted ? tempEncryptedFile : tempDecryptedFile;\n       FileUploadDownloadClient.FileUploadType uploadType = getUploadType(uploadTypeStr);\n       switch (uploadType) {\n         case URI:\n-          segmentMetadata =\n-              getMetadataForURI(crypterClassName, downloadUri, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-                  metadataProviderClass);\n+          getSegmentFileFromURI(downloadUri, dstFile);\n           break;\n         case SEGMENT:\n-          getFileFromMultipart(multiPart, tempEncryptedFile);\n-          segmentMetadata = getSegmentMetadata(crypterClassName, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-              metadataProviderClass);\n+          getSegmentFileFromMultipart(multiPart, dstFile);\n           break;\n         default:\n           throw new UnsupportedOperationException(\"Unsupported upload type: \" + uploadType);\n       }\n \n+      if (uploadedSegmentIsEncrypted) {\n+        decryptFile(crypterClassNameInHeader, tempEncryptedFile, tempDecryptedFile);\n+      }\n+\n+      // TODO: Change when metadata upload added", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2ODM0NA=="}, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjkyMDI3OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjowOToyOVrOGpBufw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMTowMDo1MFrOGqn0Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MzA4Nw==", "bodyText": "why is this an exception? Should this just not be a case where encryption is not needed? Why are we explicitly preventing the client from encrypting the segment over the wire?\nI would suggest the following:\n(1) Check the crypter class name. If they are the same in the header and tableconfig, then accept the segment.\n(2) If they are not same, we have a few choices: Accept the segment after bumping a metric (and a warn log), or reject the segment with an exception. The problem with rejecting the segment is if the crypter classes are some extension of one another, and actually work fine, then we may be unnecessarily rejecting it.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r445673087", "createdAt": "2020-06-25T16:09:29Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -290,6 +300,28 @@ private String extractHttpHeader(HttpHeaders headers, String name) {\n     return value;\n   }\n \n+  private Pair<Boolean, String> encryptSegmentIfNeeded(String offlineTableName, File tempDecryptedFile, File tempEncryptedFile,\n+      boolean uploadedSegmentIsEncrypted) {\n+\n+    // get crypter class name from table config\n+    String crypterClassName = _pinotHelixResourceManager.getCrypterClassNameFromTableConfig(offlineTableName);\n+\n+    boolean segmentNeedsEncryption = !Strings.isNullOrEmpty(crypterClassName);\n+    if (segmentNeedsEncryption && uploadedSegmentIsEncrypted) {\n+      throw new ControllerApplicationException(LOGGER, String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NTAzMQ==", "bodyText": "Makes sense. Refactored per your suggestion.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r447345031", "createdAt": "2020-06-30T00:58:50Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -290,6 +300,28 @@ private String extractHttpHeader(HttpHeaders headers, String name) {\n     return value;\n   }\n \n+  private Pair<Boolean, String> encryptSegmentIfNeeded(String offlineTableName, File tempDecryptedFile, File tempEncryptedFile,\n+      boolean uploadedSegmentIsEncrypted) {\n+\n+    // get crypter class name from table config\n+    String crypterClassName = _pinotHelixResourceManager.getCrypterClassNameFromTableConfig(offlineTableName);\n+\n+    boolean segmentNeedsEncryption = !Strings.isNullOrEmpty(crypterClassName);\n+    if (segmentNeedsEncryption && uploadedSegmentIsEncrypted) {\n+      throw new ControllerApplicationException(LOGGER, String.format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MzA4Nw=="}, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NTcxMA==", "bodyText": "I went with rejecting the segment option. If we encounter users having same crypter with different names, it'll be a small refactor to allow that change.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r447345710", "createdAt": "2020-06-30T01:00:50Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -290,6 +300,28 @@ private String extractHttpHeader(HttpHeaders headers, String name) {\n     return value;\n   }\n \n+  private Pair<Boolean, String> encryptSegmentIfNeeded(String offlineTableName, File tempDecryptedFile, File tempEncryptedFile,\n+      boolean uploadedSegmentIsEncrypted) {\n+\n+    // get crypter class name from table config\n+    String crypterClassName = _pinotHelixResourceManager.getCrypterClassNameFromTableConfig(offlineTableName);\n+\n+    boolean segmentNeedsEncryption = !Strings.isNullOrEmpty(crypterClassName);\n+    if (segmentNeedsEncryption && uploadedSegmentIsEncrypted) {\n+      throw new ControllerApplicationException(LOGGER, String.format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MzA4Nw=="}, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjkyNDg1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxMDozNlrOGpBxYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTozMDozNFrOGr6ahw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MzgyNg==", "bodyText": "How about returning right here if segment does not need encryption? The logic is easier to follow then.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r445673826", "createdAt": "2020-06-25T16:10:36Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -290,6 +300,28 @@ private String extractHttpHeader(HttpHeaders headers, String name) {\n     return value;\n   }\n \n+  private Pair<Boolean, String> encryptSegmentIfNeeded(String offlineTableName, File tempDecryptedFile, File tempEncryptedFile,\n+      boolean uploadedSegmentIsEncrypted) {\n+\n+    // get crypter class name from table config\n+    String crypterClassName = _pinotHelixResourceManager.getCrypterClassNameFromTableConfig(offlineTableName);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NDk3Mw==", "bodyText": "Done.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r447344973", "createdAt": "2020-06-30T00:58:34Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -290,6 +300,28 @@ private String extractHttpHeader(HttpHeaders headers, String name) {\n     return value;\n   }\n \n+  private Pair<Boolean, String> encryptSegmentIfNeeded(String offlineTableName, File tempDecryptedFile, File tempEncryptedFile,\n+      boolean uploadedSegmentIsEncrypted) {\n+\n+    // get crypter class name from table config\n+    String crypterClassName = _pinotHelixResourceManager.getCrypterClassNameFromTableConfig(offlineTableName);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MzgyNg=="}, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5OTAxNQ==", "bodyText": "IMO, its better to always go through the same path and just make the crypter no-op", "url": "https://github.com/apache/pinot/pull/5617#discussion_r448699015", "createdAt": "2020-07-02T01:30:34Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -290,6 +300,28 @@ private String extractHttpHeader(HttpHeaders headers, String name) {\n     return value;\n   }\n \n+  private Pair<Boolean, String> encryptSegmentIfNeeded(String offlineTableName, File tempDecryptedFile, File tempEncryptedFile,\n+      boolean uploadedSegmentIsEncrypted) {\n+\n+    // get crypter class name from table config\n+    String crypterClassName = _pinotHelixResourceManager.getCrypterClassNameFromTableConfig(offlineTableName);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MzgyNg=="}, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjkyOTc2OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxMTo0NFrOGpB0bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDo1ODoyOVrOGqnxQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDYwNQ==", "bodyText": "please add the file names to this log, thanks", "url": "https://github.com/apache/pinot/pull/5617#discussion_r445674605", "createdAt": "2020-06-25T16:11:44Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -303,46 +335,37 @@ private String getZkDownloadURIForSegmentUpload(String rawTableName, String segm\n     }\n   }\n \n-  private SegmentMetadata getMetadataForURI(String crypterClassHeader, String currentSegmentLocationURI,\n-      File tempEncryptedFile, File tempDecryptedFile, File tempSegmentDir, String metadataProviderClass)\n+  private void getSegmentFileFromURI(String currentSegmentLocationURI, File destFile)\n       throws Exception {\n-    SegmentMetadata segmentMetadata;\n     if (currentSegmentLocationURI == null || currentSegmentLocationURI.isEmpty()) {\n       throw new ControllerApplicationException(LOGGER, \"Failed to get downloadURI, needed for URI upload\",\n           Response.Status.BAD_REQUEST);\n     }\n-    LOGGER.info(\"Downloading segment from {} to {}\", currentSegmentLocationURI, tempEncryptedFile.getAbsolutePath());\n-    SegmentFetcherFactory.fetchSegmentToLocal(currentSegmentLocationURI, tempEncryptedFile);\n-    segmentMetadata = getSegmentMetadata(crypterClassHeader, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-        metadataProviderClass);\n-    return segmentMetadata;\n+    LOGGER.info(\"Downloading segment from {} to {}\", currentSegmentLocationURI, destFile.getAbsolutePath());\n+    SegmentFetcherFactory.fetchSegmentToLocal(currentSegmentLocationURI, destFile);\n   }\n \n-  private SegmentMetadata getSegmentMetadata(String crypterClassHeader, File tempEncryptedFile, File tempDecryptedFile,\n-      File tempSegmentDir, String metadataProviderClass)\n+  private SegmentMetadata getSegmentMetadata(File tempDecryptedFile, File tempSegmentDir, String metadataProviderClass)\n       throws Exception {\n-\n-    decryptFile(crypterClassHeader, tempEncryptedFile, tempDecryptedFile);\n-\n     // Call metadata provider to extract metadata with file object uri\n     return MetadataExtractorFactory.create(metadataProviderClass).extractMetadata(tempDecryptedFile, tempSegmentDir);\n   }\n \n-  private void completeZkOperations(boolean enableParallelPushProtection, HttpHeaders headers, File tempEncryptedFile,\n+  private void completeZkOperations(boolean enableParallelPushProtection, HttpHeaders headers, File uploadedSegmentFile,\n       String rawTableName, SegmentMetadata segmentMetadata, String segmentName, String zkDownloadURI,\n-      boolean moveSegmentToFinalLocation)\n+      boolean moveSegmentToFinalLocation, String crypter)\n       throws Exception {\n     URI finalSegmentLocationURI = URIUtils\n         .getUri(ControllerFilePathProvider.getInstance().getDataDirURI().toString(), rawTableName,\n             URIUtils.encode(segmentName));\n     ZKOperator zkOperator = new ZKOperator(_pinotHelixResourceManager, _controllerConf, _controllerMetrics);\n-    zkOperator.completeSegmentOperations(rawTableName, segmentMetadata, finalSegmentLocationURI, tempEncryptedFile,\n-        enableParallelPushProtection, headers, zkDownloadURI, moveSegmentToFinalLocation);\n+    zkOperator.completeSegmentOperations(rawTableName, segmentMetadata, finalSegmentLocationURI, uploadedSegmentFile,\n+        enableParallelPushProtection, headers, zkDownloadURI, moveSegmentToFinalLocation, crypter);\n   }\n \n-  private void decryptFile(String crypterClassHeader, File tempEncryptedFile, File tempDecryptedFile) {\n-    PinotCrypter pinotCrypter = PinotCrypterFactory.create(crypterClassHeader);\n-    LOGGER.info(\"Using crypter class {}\", pinotCrypter.getClass().getName());\n+  private void decryptFile(String crypterClassName, File tempEncryptedFile, File tempDecryptedFile) {\n+    PinotCrypter pinotCrypter = PinotCrypterFactory.create(crypterClassName);\n+    LOGGER.info(\"Using crypter class {} for decryption.\", pinotCrypter.getClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NDk2Mg==", "bodyText": "Done.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r447344962", "createdAt": "2020-06-30T00:58:29Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -303,46 +335,37 @@ private String getZkDownloadURIForSegmentUpload(String rawTableName, String segm\n     }\n   }\n \n-  private SegmentMetadata getMetadataForURI(String crypterClassHeader, String currentSegmentLocationURI,\n-      File tempEncryptedFile, File tempDecryptedFile, File tempSegmentDir, String metadataProviderClass)\n+  private void getSegmentFileFromURI(String currentSegmentLocationURI, File destFile)\n       throws Exception {\n-    SegmentMetadata segmentMetadata;\n     if (currentSegmentLocationURI == null || currentSegmentLocationURI.isEmpty()) {\n       throw new ControllerApplicationException(LOGGER, \"Failed to get downloadURI, needed for URI upload\",\n           Response.Status.BAD_REQUEST);\n     }\n-    LOGGER.info(\"Downloading segment from {} to {}\", currentSegmentLocationURI, tempEncryptedFile.getAbsolutePath());\n-    SegmentFetcherFactory.fetchSegmentToLocal(currentSegmentLocationURI, tempEncryptedFile);\n-    segmentMetadata = getSegmentMetadata(crypterClassHeader, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-        metadataProviderClass);\n-    return segmentMetadata;\n+    LOGGER.info(\"Downloading segment from {} to {}\", currentSegmentLocationURI, destFile.getAbsolutePath());\n+    SegmentFetcherFactory.fetchSegmentToLocal(currentSegmentLocationURI, destFile);\n   }\n \n-  private SegmentMetadata getSegmentMetadata(String crypterClassHeader, File tempEncryptedFile, File tempDecryptedFile,\n-      File tempSegmentDir, String metadataProviderClass)\n+  private SegmentMetadata getSegmentMetadata(File tempDecryptedFile, File tempSegmentDir, String metadataProviderClass)\n       throws Exception {\n-\n-    decryptFile(crypterClassHeader, tempEncryptedFile, tempDecryptedFile);\n-\n     // Call metadata provider to extract metadata with file object uri\n     return MetadataExtractorFactory.create(metadataProviderClass).extractMetadata(tempDecryptedFile, tempSegmentDir);\n   }\n \n-  private void completeZkOperations(boolean enableParallelPushProtection, HttpHeaders headers, File tempEncryptedFile,\n+  private void completeZkOperations(boolean enableParallelPushProtection, HttpHeaders headers, File uploadedSegmentFile,\n       String rawTableName, SegmentMetadata segmentMetadata, String segmentName, String zkDownloadURI,\n-      boolean moveSegmentToFinalLocation)\n+      boolean moveSegmentToFinalLocation, String crypter)\n       throws Exception {\n     URI finalSegmentLocationURI = URIUtils\n         .getUri(ControllerFilePathProvider.getInstance().getDataDirURI().toString(), rawTableName,\n             URIUtils.encode(segmentName));\n     ZKOperator zkOperator = new ZKOperator(_pinotHelixResourceManager, _controllerConf, _controllerMetrics);\n-    zkOperator.completeSegmentOperations(rawTableName, segmentMetadata, finalSegmentLocationURI, tempEncryptedFile,\n-        enableParallelPushProtection, headers, zkDownloadURI, moveSegmentToFinalLocation);\n+    zkOperator.completeSegmentOperations(rawTableName, segmentMetadata, finalSegmentLocationURI, uploadedSegmentFile,\n+        enableParallelPushProtection, headers, zkDownloadURI, moveSegmentToFinalLocation, crypter);\n   }\n \n-  private void decryptFile(String crypterClassHeader, File tempEncryptedFile, File tempDecryptedFile) {\n-    PinotCrypter pinotCrypter = PinotCrypterFactory.create(crypterClassHeader);\n-    LOGGER.info(\"Using crypter class {}\", pinotCrypter.getClass().getName());\n+  private void decryptFile(String crypterClassName, File tempEncryptedFile, File tempDecryptedFile) {\n+    PinotCrypter pinotCrypter = PinotCrypterFactory.create(crypterClassName);\n+    LOGGER.info(\"Using crypter class {} for decryption.\", pinotCrypter.getClass().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NDYwNQ=="}, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzIzMjY3OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzozMzowMlrOGpE1Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDo1ODoyMFrOGqnxIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcyMzk5NQ==", "bodyText": "A get method returning void seems odd to me. Probably s/get/download?", "url": "https://github.com/apache/pinot/pull/5617#discussion_r445723995", "createdAt": "2020-06-25T17:33:02Z", "author": {"login": "mayankshriv"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -303,46 +335,37 @@ private String getZkDownloadURIForSegmentUpload(String rawTableName, String segm\n     }\n   }\n \n-  private SegmentMetadata getMetadataForURI(String crypterClassHeader, String currentSegmentLocationURI,\n-      File tempEncryptedFile, File tempDecryptedFile, File tempSegmentDir, String metadataProviderClass)\n+  private void getSegmentFileFromURI(String currentSegmentLocationURI, File destFile)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NDkzMQ==", "bodyText": "Makes sense \ud83d\udc4d  Refactored.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r447344931", "createdAt": "2020-06-30T00:58:20Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -303,46 +335,37 @@ private String getZkDownloadURIForSegmentUpload(String rawTableName, String segm\n     }\n   }\n \n-  private SegmentMetadata getMetadataForURI(String crypterClassHeader, String currentSegmentLocationURI,\n-      File tempEncryptedFile, File tempDecryptedFile, File tempSegmentDir, String metadataProviderClass)\n+  private void getSegmentFileFromURI(String currentSegmentLocationURI, File destFile)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcyMzk5NQ=="}, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzI0NTg1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzozNjo0OVrOGpE9qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDo1ODoxNFrOGqnxBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcyNjEyMA==", "bodyText": "crypterClassName should be an input to this method, not a return value? This method should just return the boolean.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r445726120", "createdAt": "2020-06-25T17:36:49Z", "author": {"login": "mayankshriv"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -251,6 +247,20 @@ private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiP\n           _controllerMetrics, _leadControllerManager.isLeaderForTable(offlineTableName))\n           .validateOfflineSegment(offlineTableName, segmentMetadata, tempSegmentDir);\n \n+      Pair<Boolean, String> encryptionInfo =\n+          encryptSegmentIfNeeded(offlineTableName, tempDecryptedFile, tempEncryptedFile, uploadedSegmentIsEncrypted);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NDkwMg==", "bodyText": "Done.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r447344902", "createdAt": "2020-06-30T00:58:14Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -251,6 +247,20 @@ private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiP\n           _controllerMetrics, _leadControllerManager.isLeaderForTable(offlineTableName))\n           .validateOfflineSegment(offlineTableName, segmentMetadata, tempSegmentDir);\n \n+      Pair<Boolean, String> encryptionInfo =\n+          encryptSegmentIfNeeded(offlineTableName, tempDecryptedFile, tempEncryptedFile, uploadedSegmentIsEncrypted);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcyNjEyMA=="}, "originalCommit": {"oid": "2ec6fabf8360504e2ec1005afe0ea9ddd6f9d10a"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTE4Njk2OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0OTozNVrOGrFipQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0OTozNVrOGrFipQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMjc0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  boolean uploadedSegmentIsEncrypted = !Strings.isNullOrEmpty(crypterClassNameInHeader);\n          \n          \n            \n                  boolean isUploadedSegmentEncrypted = !Strings.isNullOrEmpty(crypterClassNameInHeader);", "url": "https://github.com/apache/pinot/pull/5617#discussion_r447832741", "createdAt": "2020-06-30T16:49:35Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -194,38 +194,32 @@ private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiP\n       ControllerFilePathProvider provider = ControllerFilePathProvider.getInstance();\n       String tempFileName = TMP_DIR_PREFIX + System.nanoTime();\n       tempDecryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n+      tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n       tempSegmentDir = new File(provider.getUntarredFileTempDir(), tempFileName);\n \n-      // Set default crypter to the noop crypter when no crypter header is sent\n-      // In this case, the noop crypter will not do any operations, so the encrypted and decrypted file will have the same\n-      // file path.\n-      if (crypterClassName == null) {\n-        crypterClassName = NoOpPinotCrypter.class.getSimpleName();\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n-      } else {\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n-      }\n-\n-      // TODO: Change when metadata upload added\n-      String metadataProviderClass = DefaultMetadataExtractor.class.getName();\n+      boolean uploadedSegmentIsEncrypted = !Strings.isNullOrEmpty(crypterClassNameInHeader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "190f3f37d2fabb69387d409948b6e2ee5811ae91"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTI0MzI2OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowMzozOFrOGrGGPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowMzozOFrOGrGGPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MTg1Mw==", "bodyText": "Add segment name and table name to the exception string", "url": "https://github.com/apache/pinot/pull/5617#discussion_r447841853", "createdAt": "2020-06-30T17:03:38Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -290,6 +297,34 @@ private String extractHttpHeader(HttpHeaders headers, String name) {\n     return value;\n   }\n \n+  private Boolean encryptSegmentIfNeeded(String offlineTableName, File tempDecryptedFile, File tempEncryptedFile,\n+      boolean uploadedSegmentIsEncrypted, String crypterUsedInUploadedSegment, String crypterClassNameInTableConfig) {\n+\n+    boolean segmentNeedsEncryption = !Strings.isNullOrEmpty(crypterClassNameInTableConfig);\n+    if (!segmentNeedsEncryption) {\n+      // do nothing\n+      return false;\n+    }\n+\n+    if (uploadedSegmentIsEncrypted) {\n+      if (!crypterClassNameInTableConfig.equalsIgnoreCase(crypterUsedInUploadedSegment)) {\n+        throw new ControllerApplicationException(LOGGER, String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "190f3f37d2fabb69387d409948b6e2ee5811ae91"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTI1MTY0OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowNToyNVrOGrGLDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjowODozMVrOGrQLcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MzA4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (!crypterClassNameInTableConfig.equalsIgnoreCase(crypterUsedInUploadedSegment)) {\n          \n          \n            \n                  if (!crypterClassNameInTableConfig.equals(crypterUsedInUploadedSegment)) {", "url": "https://github.com/apache/pinot/pull/5617#discussion_r447843087", "createdAt": "2020-06-30T17:05:25Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -290,6 +297,34 @@ private String extractHttpHeader(HttpHeaders headers, String name) {\n     return value;\n   }\n \n+  private Boolean encryptSegmentIfNeeded(String offlineTableName, File tempDecryptedFile, File tempEncryptedFile,\n+      boolean uploadedSegmentIsEncrypted, String crypterUsedInUploadedSegment, String crypterClassNameInTableConfig) {\n+\n+    boolean segmentNeedsEncryption = !Strings.isNullOrEmpty(crypterClassNameInTableConfig);\n+    if (!segmentNeedsEncryption) {\n+      // do nothing\n+      return false;\n+    }\n+\n+    if (uploadedSegmentIsEncrypted) {\n+      if (!crypterClassNameInTableConfig.equalsIgnoreCase(crypterUsedInUploadedSegment)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "190f3f37d2fabb69387d409948b6e2ee5811ae91"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwNzAyNg==", "bodyText": "Done.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r448007026", "createdAt": "2020-06-30T22:08:31Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -290,6 +297,34 @@ private String extractHttpHeader(HttpHeaders headers, String name) {\n     return value;\n   }\n \n+  private Boolean encryptSegmentIfNeeded(String offlineTableName, File tempDecryptedFile, File tempEncryptedFile,\n+      boolean uploadedSegmentIsEncrypted, String crypterUsedInUploadedSegment, String crypterClassNameInTableConfig) {\n+\n+    boolean segmentNeedsEncryption = !Strings.isNullOrEmpty(crypterClassNameInTableConfig);\n+    if (!segmentNeedsEncryption) {\n+      // do nothing\n+      return false;\n+    }\n+\n+    if (uploadedSegmentIsEncrypted) {\n+      if (!crypterClassNameInTableConfig.equalsIgnoreCase(crypterUsedInUploadedSegment)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MzA4Nw=="}, "originalCommit": {"oid": "190f3f37d2fabb69387d409948b6e2ee5811ae91"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTI2Mjk2OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowNzoyN1rOGrGRMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjowOTowNVrOGrQMOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NDY1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Boolean encryptSegmentIfNeeded(String offlineTableName, File tempDecryptedFile, File tempEncryptedFile,\n          \n          \n            \n              private boolean encryptSegmentIfNeeded(String offlineTableName, File tempDecryptedFile, File tempEncryptedFile,", "url": "https://github.com/apache/pinot/pull/5617#discussion_r447844656", "createdAt": "2020-06-30T17:07:27Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -290,6 +297,34 @@ private String extractHttpHeader(HttpHeaders headers, String name) {\n     return value;\n   }\n \n+  private Boolean encryptSegmentIfNeeded(String offlineTableName, File tempDecryptedFile, File tempEncryptedFile,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "190f3f37d2fabb69387d409948b6e2ee5811ae91"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwNzIyNg==", "bodyText": "Refactored.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r448007226", "createdAt": "2020-06-30T22:09:05Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -290,6 +297,34 @@ private String extractHttpHeader(HttpHeaders headers, String name) {\n     return value;\n   }\n \n+  private Boolean encryptSegmentIfNeeded(String offlineTableName, File tempDecryptedFile, File tempEncryptedFile,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NDY1Ng=="}, "originalCommit": {"oid": "190f3f37d2fabb69387d409948b6e2ee5811ae91"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjU5MjE1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDozNTo1NlrOGrS-tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDozNTo1NlrOGrS-tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MjkxNg==", "bodyText": "please add table name and segment name here. In production, we will see multiple parallel pushes going on, and it is useful to determine which segment/table we are talking about.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r448052916", "createdAt": "2020-07-01T00:35:56Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -290,6 +296,39 @@ private String extractHttpHeader(HttpHeaders headers, String name) {\n     return value;\n   }\n \n+  Pair<String, File> encryptSegmentIfNeeded(File tempDecryptedFile, File tempEncryptedFile,\n+      boolean isUploadedSegmentEncrypted, String crypterUsedInUploadedSegment, String crypterClassNameInTableConfig,\n+      String segmentName, String tableName) {\n+\n+    boolean segmentNeedsEncryption = !Strings.isNullOrEmpty(crypterClassNameInTableConfig);\n+\n+    // form the output\n+    File finalSegmentFile =\n+        (isUploadedSegmentEncrypted || segmentNeedsEncryption) ? tempEncryptedFile : tempDecryptedFile;\n+    String crypterClassName = Strings.isNullOrEmpty(crypterClassNameInTableConfig) ? crypterUsedInUploadedSegment\n+        : crypterClassNameInTableConfig;\n+    ImmutablePair<String, File> out = ImmutablePair.of(crypterClassName, finalSegmentFile);\n+\n+    if (!segmentNeedsEncryption) {\n+      return out;\n+    }\n+\n+    if (isUploadedSegmentEncrypted && !crypterClassNameInTableConfig.equals(crypterUsedInUploadedSegment)) {\n+      throw new ControllerApplicationException(LOGGER, String\n+          .format(\"Uploaded segment is encrypted with '%s' while table config requires '%s' as crypter \"\n+                  + \"(segment name = '%s', table name = '%s').\", crypterUsedInUploadedSegment,\n+              crypterClassNameInTableConfig, segmentName, tableName), Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n+\n+    // encrypt segment\n+    PinotCrypter pinotCrypter = PinotCrypterFactory.create(crypterClassNameInTableConfig);\n+    LOGGER.info(\"Using crypter class {} for encrypting {} to {}.\", crypterClassNameInTableConfig, tempDecryptedFile,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8368a42201b443af9d98a986233526a7d59723"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjU5NTM3OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDozNzozNFrOGrTAdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzoxNTowNVrOGrunqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MzM2Nw==", "bodyText": "I am assuming that the URI tells us segment and table name here, otherwise, it is useful to add table/segment name i this log", "url": "https://github.com/apache/pinot/pull/5617#discussion_r448053367", "createdAt": "2020-07-01T00:37:34Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -303,46 +342,38 @@ private String getZkDownloadURIForSegmentUpload(String rawTableName, String segm\n     }\n   }\n \n-  private SegmentMetadata getMetadataForURI(String crypterClassHeader, String currentSegmentLocationURI,\n-      File tempEncryptedFile, File tempDecryptedFile, File tempSegmentDir, String metadataProviderClass)\n+  private void downloadSegmentFileFromURI(String currentSegmentLocationURI, File destFile)\n       throws Exception {\n-    SegmentMetadata segmentMetadata;\n     if (currentSegmentLocationURI == null || currentSegmentLocationURI.isEmpty()) {\n       throw new ControllerApplicationException(LOGGER, \"Failed to get downloadURI, needed for URI upload\",\n           Response.Status.BAD_REQUEST);\n     }\n-    LOGGER.info(\"Downloading segment from {} to {}\", currentSegmentLocationURI, tempEncryptedFile.getAbsolutePath());\n-    SegmentFetcherFactory.fetchSegmentToLocal(currentSegmentLocationURI, tempEncryptedFile);\n-    segmentMetadata = getSegmentMetadata(crypterClassHeader, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-        metadataProviderClass);\n-    return segmentMetadata;\n+    LOGGER.info(\"Downloading segment from {} to {}\", currentSegmentLocationURI, destFile.getAbsolutePath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8368a42201b443af9d98a986233526a7d59723"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwNTc3MQ==", "bodyText": "I think the same way, but I added the table name to the logs anyways. For the segment, it is not available here. Segment needs to be downloaded first and then its name can be retrieved from the segment metadata.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r448505771", "createdAt": "2020-07-01T17:15:05Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -303,46 +342,38 @@ private String getZkDownloadURIForSegmentUpload(String rawTableName, String segm\n     }\n   }\n \n-  private SegmentMetadata getMetadataForURI(String crypterClassHeader, String currentSegmentLocationURI,\n-      File tempEncryptedFile, File tempDecryptedFile, File tempSegmentDir, String metadataProviderClass)\n+  private void downloadSegmentFileFromURI(String currentSegmentLocationURI, File destFile)\n       throws Exception {\n-    SegmentMetadata segmentMetadata;\n     if (currentSegmentLocationURI == null || currentSegmentLocationURI.isEmpty()) {\n       throw new ControllerApplicationException(LOGGER, \"Failed to get downloadURI, needed for URI upload\",\n           Response.Status.BAD_REQUEST);\n     }\n-    LOGGER.info(\"Downloading segment from {} to {}\", currentSegmentLocationURI, tempEncryptedFile.getAbsolutePath());\n-    SegmentFetcherFactory.fetchSegmentToLocal(currentSegmentLocationURI, tempEncryptedFile);\n-    segmentMetadata = getSegmentMetadata(crypterClassHeader, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-        metadataProviderClass);\n-    return segmentMetadata;\n+    LOGGER.info(\"Downloading segment from {} to {}\", currentSegmentLocationURI, destFile.getAbsolutePath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MzM2Nw=="}, "originalCommit": {"oid": "bd8368a42201b443af9d98a986233526a7d59723"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjU5NzMxOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/helix/TableCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDozODo1OVrOGrTBpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzoxNjo0NFrOGrurIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MzY3MQ==", "bodyText": "Not sure why we lower case here. Can you elaborate?", "url": "https://github.com/apache/pinot/pull/5617#discussion_r448053671", "createdAt": "2020-07-01T00:38:59Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/helix/TableCache.java", "diffHunk": "@@ -98,7 +102,7 @@ public synchronized void refresh() {\n             try {\n               TableConfig tableConfig = TableConfigUtils.fromZNRecord(znRecord);\n               String tableNameWithType = tableConfig.getTableName();\n-              _tableConfigMap.put(tableNameWithType, tableConfig);\n+              _tableConfigMap.put(tableNameWithType.toLowerCase(), tableConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8368a42201b443af9d98a986233526a7d59723"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwNjY1Nw==", "bodyText": "Reverted. I was following the pattern with column and table name in this class.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r448506657", "createdAt": "2020-07-01T17:16:44Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/helix/TableCache.java", "diffHunk": "@@ -98,7 +102,7 @@ public synchronized void refresh() {\n             try {\n               TableConfig tableConfig = TableConfigUtils.fromZNRecord(znRecord);\n               String tableNameWithType = tableConfig.getTableName();\n-              _tableConfigMap.put(tableNameWithType, tableConfig);\n+              _tableConfigMap.put(tableNameWithType.toLowerCase(), tableConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MzY3MQ=="}, "originalCommit": {"oid": "bd8368a42201b443af9d98a986233526a7d59723"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTU5MTc5OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1Njo0NVrOGrv9Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1Njo0NVrOGrv9Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyNzYxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LOGGER.info(\"Using crypter class '{}' for encrypting '{}' to '{}' (segment name = '{}}', table name = '{}').\",\n          \n          \n            \n                LOGGER.info(\"Using crypter class '{}' for encrypting '{}' to '{}' (segment name = '{}', table name = '{}').\",", "url": "https://github.com/apache/pinot/pull/5617#discussion_r448527618", "createdAt": "2020-07-01T17:56:45Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -290,6 +296,39 @@ private String extractHttpHeader(HttpHeaders headers, String name) {\n     return value;\n   }\n \n+  Pair<String, File> encryptSegmentIfNeeded(File tempDecryptedFile, File tempEncryptedFile,\n+      boolean isUploadedSegmentEncrypted, String crypterUsedInUploadedSegment, String crypterClassNameInTableConfig,\n+      String segmentName, String tableName) {\n+\n+    boolean segmentNeedsEncryption = !Strings.isNullOrEmpty(crypterClassNameInTableConfig);\n+\n+    // form the output\n+    File finalSegmentFile =\n+        (isUploadedSegmentEncrypted || segmentNeedsEncryption) ? tempEncryptedFile : tempDecryptedFile;\n+    String crypterClassName = Strings.isNullOrEmpty(crypterClassNameInTableConfig) ? crypterUsedInUploadedSegment\n+        : crypterClassNameInTableConfig;\n+    ImmutablePair<String, File> out = ImmutablePair.of(crypterClassName, finalSegmentFile);\n+\n+    if (!segmentNeedsEncryption) {\n+      return out;\n+    }\n+\n+    if (isUploadedSegmentEncrypted && !crypterClassNameInTableConfig.equals(crypterUsedInUploadedSegment)) {\n+      throw new ControllerApplicationException(LOGGER, String.format(\n+          \"Uploaded segment is encrypted with '%s' while table config requires '%s' as crypter \"\n+              + \"(segment name = '%s', table name = '%s').\", crypterUsedInUploadedSegment,\n+          crypterClassNameInTableConfig, segmentName, tableName), Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n+\n+    // encrypt segment\n+    PinotCrypter pinotCrypter = PinotCrypterFactory.create(crypterClassNameInTableConfig);\n+    LOGGER.info(\"Using crypter class '{}' for encrypting '{}' to '{}' (segment name = '{}}', table name = '{}').\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "575407aa9d1b487455bf22f9ae4f54566e5555a9"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjY4NjQzOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToyNTo0OFrOGr6V3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMTozNjowM1rOGsdr8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5NzgyMQ==", "bodyText": "it's better to pass the crypterName instead of the classname right? Its ok to have the ability to override it with a classname but it weird to have users pass classname in the request", "url": "https://github.com/apache/pinot/pull/5617#discussion_r448697821", "createdAt": "2020-07-02T01:25:48Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -177,13 +179,13 @@ public Response downloadSegment(\n   private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiPart multiPart,\n       boolean enableParallelPushProtection, HttpHeaders headers, Request request, boolean moveSegmentToFinalLocation) {\n     String uploadTypeStr = null;\n-    String crypterClassName = null;\n+    String crypterClassNameInHeader = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "289ca9ec4d4f3f6f5e74e191826d429f76fca9ab"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI3NjkxMg==", "bodyText": "If you're talking about the difference between fully qualified name vs just the name of the crypter, then how can we differentiate two crypters which have the same name but different packages?", "url": "https://github.com/apache/pinot/pull/5617#discussion_r449276912", "createdAt": "2020-07-02T21:36:03Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -177,13 +179,13 @@ public Response downloadSegment(\n   private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiPart multiPart,\n       boolean enableParallelPushProtection, HttpHeaders headers, Request request, boolean moveSegmentToFinalLocation) {\n     String uploadTypeStr = null;\n-    String crypterClassName = null;\n+    String crypterClassNameInHeader = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5NzgyMQ=="}, "originalCommit": {"oid": "289ca9ec4d4f3f6f5e74e191826d429f76fca9ab"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjY4NzkxOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToyNjo0OFrOGr6WxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOToxMToxMFrOGsaEdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5ODA1Mw==", "bodyText": "why are we download the segment?", "url": "https://github.com/apache/pinot/pull/5617#discussion_r448698053", "createdAt": "2020-07-02T01:26:48Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -194,38 +196,31 @@ private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiP\n       ControllerFilePathProvider provider = ControllerFilePathProvider.getInstance();\n       String tempFileName = TMP_DIR_PREFIX + System.nanoTime();\n       tempDecryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n+      tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n       tempSegmentDir = new File(provider.getUntarredFileTempDir(), tempFileName);\n \n-      // Set default crypter to the noop crypter when no crypter header is sent\n-      // In this case, the noop crypter will not do any operations, so the encrypted and decrypted file will have the same\n-      // file path.\n-      if (crypterClassName == null) {\n-        crypterClassName = NoOpPinotCrypter.class.getSimpleName();\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n-      } else {\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n-      }\n-\n-      // TODO: Change when metadata upload added\n-      String metadataProviderClass = DefaultMetadataExtractor.class.getName();\n+      boolean uploadedSegmentIsEncrypted = !Strings.isNullOrEmpty(crypterClassNameInHeader);\n \n-      SegmentMetadata segmentMetadata;\n+      File dstFile = uploadedSegmentIsEncrypted ? tempEncryptedFile : tempDecryptedFile;\n       FileUploadDownloadClient.FileUploadType uploadType = getUploadType(uploadTypeStr);\n       switch (uploadType) {\n         case URI:\n-          segmentMetadata =\n-              getMetadataForURI(crypterClassName, downloadUri, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-                  metadataProviderClass);\n+          downloadSegmentFileFromURI(downloadUri, dstFile, tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "289ca9ec4d4f3f6f5e74e191826d429f76fca9ab"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIxNzY1Mg==", "bodyText": "Downloading logic was there before. I just renamed the functions.\nBasically if the download uri, instead of the segment data, is provided, controllers download the segment from the given uri.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r449217652", "createdAt": "2020-07-02T19:11:10Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -194,38 +196,31 @@ private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiP\n       ControllerFilePathProvider provider = ControllerFilePathProvider.getInstance();\n       String tempFileName = TMP_DIR_PREFIX + System.nanoTime();\n       tempDecryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n+      tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n       tempSegmentDir = new File(provider.getUntarredFileTempDir(), tempFileName);\n \n-      // Set default crypter to the noop crypter when no crypter header is sent\n-      // In this case, the noop crypter will not do any operations, so the encrypted and decrypted file will have the same\n-      // file path.\n-      if (crypterClassName == null) {\n-        crypterClassName = NoOpPinotCrypter.class.getSimpleName();\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n-      } else {\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n-      }\n-\n-      // TODO: Change when metadata upload added\n-      String metadataProviderClass = DefaultMetadataExtractor.class.getName();\n+      boolean uploadedSegmentIsEncrypted = !Strings.isNullOrEmpty(crypterClassNameInHeader);\n \n-      SegmentMetadata segmentMetadata;\n+      File dstFile = uploadedSegmentIsEncrypted ? tempEncryptedFile : tempDecryptedFile;\n       FileUploadDownloadClient.FileUploadType uploadType = getUploadType(uploadTypeStr);\n       switch (uploadType) {\n         case URI:\n-          segmentMetadata =\n-              getMetadataForURI(crypterClassName, downloadUri, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-                  metadataProviderClass);\n+          downloadSegmentFileFromURI(downloadUri, dstFile, tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5ODA1Mw=="}, "originalCommit": {"oid": "289ca9ec4d4f3f6f5e74e191826d429f76fca9ab"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjY5MDY5OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToyODoyNVrOGr6YVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTowNjozNVrOGsZ8TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5ODQ1Mg==", "bodyText": "better to always go through the crypter with noopcrypter", "url": "https://github.com/apache/pinot/pull/5617#discussion_r448698452", "createdAt": "2020-07-02T01:28:25Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -194,38 +196,31 @@ private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiP\n       ControllerFilePathProvider provider = ControllerFilePathProvider.getInstance();\n       String tempFileName = TMP_DIR_PREFIX + System.nanoTime();\n       tempDecryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n+      tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n       tempSegmentDir = new File(provider.getUntarredFileTempDir(), tempFileName);\n \n-      // Set default crypter to the noop crypter when no crypter header is sent\n-      // In this case, the noop crypter will not do any operations, so the encrypted and decrypted file will have the same\n-      // file path.\n-      if (crypterClassName == null) {\n-        crypterClassName = NoOpPinotCrypter.class.getSimpleName();\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n-      } else {\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n-      }\n-\n-      // TODO: Change when metadata upload added\n-      String metadataProviderClass = DefaultMetadataExtractor.class.getName();\n+      boolean uploadedSegmentIsEncrypted = !Strings.isNullOrEmpty(crypterClassNameInHeader);\n \n-      SegmentMetadata segmentMetadata;\n+      File dstFile = uploadedSegmentIsEncrypted ? tempEncryptedFile : tempDecryptedFile;\n       FileUploadDownloadClient.FileUploadType uploadType = getUploadType(uploadTypeStr);\n       switch (uploadType) {\n         case URI:\n-          segmentMetadata =\n-              getMetadataForURI(crypterClassName, downloadUri, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-                  metadataProviderClass);\n+          downloadSegmentFileFromURI(downloadUri, dstFile, tableName);\n           break;\n         case SEGMENT:\n-          getFileFromMultipart(multiPart, tempEncryptedFile);\n-          segmentMetadata = getSegmentMetadata(crypterClassName, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-              metadataProviderClass);\n+          createSegmentFileFromMultipart(multiPart, dstFile);\n           break;\n         default:\n           throw new UnsupportedOperationException(\"Unsupported upload type: \" + uploadType);\n       }\n \n+      if (uploadedSegmentIsEncrypted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "289ca9ec4d4f3f6f5e74e191826d429f76fca9ab"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIxNTU2NQ==", "bodyText": "If we do that, the reader needs to know the assumption that there's always a default noopcrypter which gets used when there's no encryption involved. IMO using the proposed approach, it's more explicit and reads better - if the segment is encrypted, then decryption needs to happen.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r449215565", "createdAt": "2020-07-02T19:06:35Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -194,38 +196,31 @@ private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiP\n       ControllerFilePathProvider provider = ControllerFilePathProvider.getInstance();\n       String tempFileName = TMP_DIR_PREFIX + System.nanoTime();\n       tempDecryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n+      tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n       tempSegmentDir = new File(provider.getUntarredFileTempDir(), tempFileName);\n \n-      // Set default crypter to the noop crypter when no crypter header is sent\n-      // In this case, the noop crypter will not do any operations, so the encrypted and decrypted file will have the same\n-      // file path.\n-      if (crypterClassName == null) {\n-        crypterClassName = NoOpPinotCrypter.class.getSimpleName();\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName);\n-      } else {\n-        tempEncryptedFile = new File(provider.getFileUploadTempDir(), tempFileName + ENCRYPTED_SUFFIX);\n-      }\n-\n-      // TODO: Change when metadata upload added\n-      String metadataProviderClass = DefaultMetadataExtractor.class.getName();\n+      boolean uploadedSegmentIsEncrypted = !Strings.isNullOrEmpty(crypterClassNameInHeader);\n \n-      SegmentMetadata segmentMetadata;\n+      File dstFile = uploadedSegmentIsEncrypted ? tempEncryptedFile : tempDecryptedFile;\n       FileUploadDownloadClient.FileUploadType uploadType = getUploadType(uploadTypeStr);\n       switch (uploadType) {\n         case URI:\n-          segmentMetadata =\n-              getMetadataForURI(crypterClassName, downloadUri, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-                  metadataProviderClass);\n+          downloadSegmentFileFromURI(downloadUri, dstFile, tableName);\n           break;\n         case SEGMENT:\n-          getFileFromMultipart(multiPart, tempEncryptedFile);\n-          segmentMetadata = getSegmentMetadata(crypterClassName, tempEncryptedFile, tempDecryptedFile, tempSegmentDir,\n-              metadataProviderClass);\n+          createSegmentFileFromMultipart(multiPart, dstFile);\n           break;\n         default:\n           throw new UnsupportedOperationException(\"Unsupported upload type: \" + uploadType);\n       }\n \n+      if (uploadedSegmentIsEncrypted) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5ODQ1Mg=="}, "originalCommit": {"oid": "289ca9ec4d4f3f6f5e74e191826d429f76fca9ab"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjY5MjUyOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToyOToyOFrOGr6ZXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTowMToyNVrOGsZy8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5ODcxOQ==", "bodyText": "is this making a ZK call?", "url": "https://github.com/apache/pinot/pull/5617#discussion_r448698719", "createdAt": "2020-07-02T01:29:28Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -251,6 +246,17 @@ private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiP\n           _controllerMetrics, _leadControllerManager.isLeaderForTable(offlineTableName))\n           .validateOfflineSegment(offlineTableName, segmentMetadata, tempSegmentDir);\n \n+      // Encrypt segment\n+      String crypterClassNameInTableConfig =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "289ca9ec4d4f3f6f5e74e191826d429f76fca9ab"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIxMzE3MQ==", "bodyText": "No, it uses an existing TableCache which gets updated upon changes.", "url": "https://github.com/apache/pinot/pull/5617#discussion_r449213171", "createdAt": "2020-07-02T19:01:25Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -251,6 +246,17 @@ private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiP\n           _controllerMetrics, _leadControllerManager.isLeaderForTable(offlineTableName))\n           .validateOfflineSegment(offlineTableName, segmentMetadata, tempSegmentDir);\n \n+      // Encrypt segment\n+      String crypterClassNameInTableConfig =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5ODcxOQ=="}, "originalCommit": {"oid": "289ca9ec4d4f3f6f5e74e191826d429f76fca9ab"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4381, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}