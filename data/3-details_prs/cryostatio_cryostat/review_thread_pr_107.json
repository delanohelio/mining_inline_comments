{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NTU5NTA0", "number": 107, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMToyMTo0NFrODaUOEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMToyMTo0NFrODaUOEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTIwODUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/BasicAuthManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMToyMTo0NFrOFhNCJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMTo0OToxOVrOFhNyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2MDg3MA==", "bodyText": "Would it be overkill to operate on character arrays for anything dealing with the incoming credentials and nulling out the password characters immediately after use?", "url": "https://github.com/cryostatio/cryostat/pull/107#discussion_r370360870", "createdAt": "2020-01-23T21:21:44Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/BasicAuthManager.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.redhat.rhjmc.containerjfr.net;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.Base64;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+class BasicAuthManager extends AbstractAuthManager {\n+\n+    static final String USER_PROPERTIES_FILENAME = \"container-jfr-users.properties\";\n+\n+    private final FileSystem fs;\n+    private final Properties users;\n+    private volatile boolean configLoaded = false;\n+\n+    // TODO salted hashes\n+    BasicAuthManager(Logger logger, FileSystem fs) {\n+        super(logger);\n+        this.fs = fs;\n+        this.users = new Properties();\n+    }\n+\n+    @Override\n+    public Future<Boolean> validateToken(Supplier<String> tokenProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0c7dba13ad1e4ec84ef3cdfd87026e5e0c71045"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2MTQyMw==", "bodyText": "Er, overwriting with zeroes rather than nulling in this case.", "url": "https://github.com/cryostatio/cryostat/pull/107#discussion_r370361423", "createdAt": "2020-01-23T21:22:58Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/BasicAuthManager.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.redhat.rhjmc.containerjfr.net;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.Base64;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+class BasicAuthManager extends AbstractAuthManager {\n+\n+    static final String USER_PROPERTIES_FILENAME = \"container-jfr-users.properties\";\n+\n+    private final FileSystem fs;\n+    private final Properties users;\n+    private volatile boolean configLoaded = false;\n+\n+    // TODO salted hashes\n+    BasicAuthManager(Logger logger, FileSystem fs) {\n+        super(logger);\n+        this.fs = fs;\n+        this.users = new Properties();\n+    }\n+\n+    @Override\n+    public Future<Boolean> validateToken(Supplier<String> tokenProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2MDg3MA=="}, "originalCommit": {"oid": "e0c7dba13ad1e4ec84ef3cdfd87026e5e0c71045"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2ODY4MA==", "bodyText": "Actually it's coming in from a library anyways, it's probably overkill.", "url": "https://github.com/cryostatio/cryostat/pull/107#discussion_r370368680", "createdAt": "2020-01-23T21:38:45Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/BasicAuthManager.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.redhat.rhjmc.containerjfr.net;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.Base64;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+class BasicAuthManager extends AbstractAuthManager {\n+\n+    static final String USER_PROPERTIES_FILENAME = \"container-jfr-users.properties\";\n+\n+    private final FileSystem fs;\n+    private final Properties users;\n+    private volatile boolean configLoaded = false;\n+\n+    // TODO salted hashes\n+    BasicAuthManager(Logger logger, FileSystem fs) {\n+        super(logger);\n+        this.fs = fs;\n+        this.users = new Properties();\n+    }\n+\n+    @Override\n+    public Future<Boolean> validateToken(Supplier<String> tokenProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2MDg3MA=="}, "originalCommit": {"oid": "e0c7dba13ad1e4ec84ef3cdfd87026e5e0c71045"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM3MzE3NA==", "bodyText": "It would be doable, but I wouldn't consider that to be too much of a security improvement, if that's the concern. It narrows the timing window where the password is in memory, but not considerably so, and doesn't do anything about the other places in memory where the password had to pass through first - for example, the webserver's HTTP header we parsed it out of.\nAnd if an attacker has the ability to read your ContainerJFR credentials out of JVM memory, then they probably already have access to whatever targets your ContainerJFR would have connected to and more...", "url": "https://github.com/cryostatio/cryostat/pull/107#discussion_r370373174", "createdAt": "2020-01-23T21:49:19Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/BasicAuthManager.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.redhat.rhjmc.containerjfr.net;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.Base64;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+class BasicAuthManager extends AbstractAuthManager {\n+\n+    static final String USER_PROPERTIES_FILENAME = \"container-jfr-users.properties\";\n+\n+    private final FileSystem fs;\n+    private final Properties users;\n+    private volatile boolean configLoaded = false;\n+\n+    // TODO salted hashes\n+    BasicAuthManager(Logger logger, FileSystem fs) {\n+        super(logger);\n+        this.fs = fs;\n+        this.users = new Properties();\n+    }\n+\n+    @Override\n+    public Future<Boolean> validateToken(Supplier<String> tokenProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2MDg3MA=="}, "originalCommit": {"oid": "e0c7dba13ad1e4ec84ef3cdfd87026e5e0c71045"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 803, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}