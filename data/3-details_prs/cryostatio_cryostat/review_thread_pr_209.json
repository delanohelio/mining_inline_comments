{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNDUyMjI1", "number": 209, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoyNDozNVrOESi1VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo1MTowMFrOESjY4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODgwNTMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/TargetConnectionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoyNDozNVrOG3yO_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoyNDozNVrOG3yO_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0NzkwMA==", "bodyText": "I think we can remove this catch, or does it still serve a purpose?", "url": "https://github.com/cryostatio/cryostat/pull/209#discussion_r461147900", "createdAt": "2020-07-27T20:24:35Z", "author": {"login": "ebaron"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/TargetConnectionManager.java", "diffHunk": "@@ -93,56 +97,55 @@\n      * finished with it. When possible, clients should use executeConnectedTask instead, which does\n      * perform automatic cleanup when the provided task has been completed.\n      */\n-    public JFRConnection connect(String targetId) throws Exception {\n+    public JFRConnection connect(ConnectionDescriptor connectionDescriptor) throws Exception {\n         try {\n-            return attemptConnectAsJMXServiceURL(targetId);\n+            return attemptConnectAsJMXServiceURL(connectionDescriptor);\n+        } catch (MalformedURLException mue) {\n+            return attemptConnectAsHostPortPair(connectionDescriptor);\n         } catch (Exception e) {\n-            return attemptConnectAsHostPortPair(targetId);\n+            throw e;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02c981791e710e86237a11a7d472f6dd449bab4c"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODg2MTI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/TargetConnectionManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0MDozMVrOG3ywAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo1Nzo1OVrOG31EvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NjM1Mg==", "bodyText": "Real minor thing, but this would be more readable IMO if we used JMC's ConnectionToolkit.createServiceURL. Maybe worth adding a wrapper for it in core next time you make changes there.", "url": "https://github.com/cryostatio/cryostat/pull/209#discussion_r461156352", "createdAt": "2020-07-27T20:40:31Z", "author": {"login": "ebaron"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/TargetConnectionManager.java", "diffHunk": "@@ -93,56 +97,55 @@\n      * finished with it. When possible, clients should use executeConnectedTask instead, which does\n      * perform automatic cleanup when the provided task has been completed.\n      */\n-    public JFRConnection connect(String targetId) throws Exception {\n+    public JFRConnection connect(ConnectionDescriptor connectionDescriptor) throws Exception {\n         try {\n-            return attemptConnectAsJMXServiceURL(targetId);\n+            return attemptConnectAsJMXServiceURL(connectionDescriptor);\n+        } catch (MalformedURLException mue) {\n+            return attemptConnectAsHostPortPair(connectionDescriptor);\n         } catch (Exception e) {\n-            return attemptConnectAsHostPortPair(targetId);\n+            throw e;\n         }\n     }\n \n-    private JFRConnection attemptConnectAsJMXServiceURL(String url) throws Exception {\n-        return connect(new JMXServiceURL(url));\n+    private JFRConnection attemptConnectAsJMXServiceURL(ConnectionDescriptor connectionDescriptor)\n+            throws Exception {\n+        return connect(\n+                new JMXServiceURL(connectionDescriptor.getTargetId()),\n+                connectionDescriptor.getCredentials());\n     }\n \n-    private JFRConnection attemptConnectAsHostPortPair(String s) throws Exception {\n+    private JFRConnection attemptConnectAsHostPortPair(ConnectionDescriptor connectionDescriptor)\n+            throws Exception {\n+        String s = connectionDescriptor.getTargetId();\n         Matcher m = HOST_PORT_PAIR_PATTERN.matcher(s);\n         if (!m.find()) {\n-            return null;\n+            throw new MalformedURLException(s);\n         }\n         String host = m.group(1);\n         String port = m.group(2);\n         if (port == null) {\n             port = \"9091\";\n         }\n-        return connect(host, Integer.parseInt(port));\n+        return connect(\n+                new JMXServiceURL(\n+                        \"rmi\", \"\", 0, String.format(\"/jndi/rmi://%s:%s/jmxrmi\", host, port)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02c981791e710e86237a11a7d472f6dd449bab4c"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MTM0Mg==", "bodyText": "That's a good call. I'll file a -core issue so it doesn't get forgotten.", "url": "https://github.com/cryostatio/cryostat/pull/209#discussion_r461191342", "createdAt": "2020-07-27T21:50:55Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/TargetConnectionManager.java", "diffHunk": "@@ -93,56 +97,55 @@\n      * finished with it. When possible, clients should use executeConnectedTask instead, which does\n      * perform automatic cleanup when the provided task has been completed.\n      */\n-    public JFRConnection connect(String targetId) throws Exception {\n+    public JFRConnection connect(ConnectionDescriptor connectionDescriptor) throws Exception {\n         try {\n-            return attemptConnectAsJMXServiceURL(targetId);\n+            return attemptConnectAsJMXServiceURL(connectionDescriptor);\n+        } catch (MalformedURLException mue) {\n+            return attemptConnectAsHostPortPair(connectionDescriptor);\n         } catch (Exception e) {\n-            return attemptConnectAsHostPortPair(targetId);\n+            throw e;\n         }\n     }\n \n-    private JFRConnection attemptConnectAsJMXServiceURL(String url) throws Exception {\n-        return connect(new JMXServiceURL(url));\n+    private JFRConnection attemptConnectAsJMXServiceURL(ConnectionDescriptor connectionDescriptor)\n+            throws Exception {\n+        return connect(\n+                new JMXServiceURL(connectionDescriptor.getTargetId()),\n+                connectionDescriptor.getCredentials());\n     }\n \n-    private JFRConnection attemptConnectAsHostPortPair(String s) throws Exception {\n+    private JFRConnection attemptConnectAsHostPortPair(ConnectionDescriptor connectionDescriptor)\n+            throws Exception {\n+        String s = connectionDescriptor.getTargetId();\n         Matcher m = HOST_PORT_PAIR_PATTERN.matcher(s);\n         if (!m.find()) {\n-            return null;\n+            throw new MalformedURLException(s);\n         }\n         String host = m.group(1);\n         String port = m.group(2);\n         if (port == null) {\n             port = \"9091\";\n         }\n-        return connect(host, Integer.parseInt(port));\n+        return connect(\n+                new JMXServiceURL(\n+                        \"rmi\", \"\", 0, String.format(\"/jndi/rmi://%s:%s/jmxrmi\", host, port)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NjM1Mg=="}, "originalCommit": {"oid": "02c981791e710e86237a11a7d472f6dd449bab4c"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NDQyOA==", "bodyText": "cryostatio/cryostat-core#44", "url": "https://github.com/cryostatio/cryostat/pull/209#discussion_r461194428", "createdAt": "2020-07-27T21:57:59Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/TargetConnectionManager.java", "diffHunk": "@@ -93,56 +97,55 @@\n      * finished with it. When possible, clients should use executeConnectedTask instead, which does\n      * perform automatic cleanup when the provided task has been completed.\n      */\n-    public JFRConnection connect(String targetId) throws Exception {\n+    public JFRConnection connect(ConnectionDescriptor connectionDescriptor) throws Exception {\n         try {\n-            return attemptConnectAsJMXServiceURL(targetId);\n+            return attemptConnectAsJMXServiceURL(connectionDescriptor);\n+        } catch (MalformedURLException mue) {\n+            return attemptConnectAsHostPortPair(connectionDescriptor);\n         } catch (Exception e) {\n-            return attemptConnectAsHostPortPair(targetId);\n+            throw e;\n         }\n     }\n \n-    private JFRConnection attemptConnectAsJMXServiceURL(String url) throws Exception {\n-        return connect(new JMXServiceURL(url));\n+    private JFRConnection attemptConnectAsJMXServiceURL(ConnectionDescriptor connectionDescriptor)\n+            throws Exception {\n+        return connect(\n+                new JMXServiceURL(connectionDescriptor.getTargetId()),\n+                connectionDescriptor.getCredentials());\n     }\n \n-    private JFRConnection attemptConnectAsHostPortPair(String s) throws Exception {\n+    private JFRConnection attemptConnectAsHostPortPair(ConnectionDescriptor connectionDescriptor)\n+            throws Exception {\n+        String s = connectionDescriptor.getTargetId();\n         Matcher m = HOST_PORT_PAIR_PATTERN.matcher(s);\n         if (!m.find()) {\n-            return null;\n+            throw new MalformedURLException(s);\n         }\n         String host = m.group(1);\n         String port = m.group(2);\n         if (port == null) {\n             port = \"9091\";\n         }\n-        return connect(host, Integer.parseInt(port));\n+        return connect(\n+                new JMXServiceURL(\n+                        \"rmi\", \"\", 0, String.format(\"/jndi/rmi://%s:%s/jmxrmi\", host, port)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NjM1Mg=="}, "originalCommit": {"oid": "02c981791e710e86237a11a7d472f6dd449bab4c"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODg5NjM1OnYy", "diffSide": "RIGHT", "path": "src/main/extras/app/entrypoint.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo1MTowMFrOG3zFoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjowMzowMFrOG31NBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2MTg4OQ==", "bodyText": "I don't see this being called anywhere with an argument. We could probably simplify this to head -c32, unless you want to keep this length parameter for the future.", "url": "https://github.com/cryostatio/cryostat/pull/209#discussion_r461161889", "createdAt": "2020-07-27T20:51:00Z", "author": {"login": "ebaron"}, "path": "src/main/extras/app/entrypoint.sh", "diffHunk": "@@ -0,0 +1,45 @@\n+#!/bin/sh\n+\n+set -x\n+set -e\n+\n+PWFILE=\"/tmp/jmxremote.password\"\n+function createJmxPassword() {\n+    PASS=\"$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-32})\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02c981791e710e86237a11a7d472f6dd449bab4c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NjU0OQ==", "bodyText": "Yea it is currently unused. It can always be put back in the future, so I'll take it out for now and leave it at fixed-length of 32.", "url": "https://github.com/cryostatio/cryostat/pull/209#discussion_r461196549", "createdAt": "2020-07-27T22:03:00Z", "author": {"login": "andrewazores"}, "path": "src/main/extras/app/entrypoint.sh", "diffHunk": "@@ -0,0 +1,45 @@\n+#!/bin/sh\n+\n+set -x\n+set -e\n+\n+PWFILE=\"/tmp/jmxremote.password\"\n+function createJmxPassword() {\n+    PASS=\"$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-32})\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2MTg4OQ=="}, "originalCommit": {"oid": "02c981791e710e86237a11a7d472f6dd449bab4c"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 844, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}