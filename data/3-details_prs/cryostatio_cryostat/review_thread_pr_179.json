{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4Njk4NzQw", "number": 179, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0NDowMFrOEDE4fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoyNjozOVrOEFj10w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjYxMTgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/WebServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0NDowMFrOGf7IfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0NDowMFrOGf7IfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNzg2OA==", "bodyText": "I think the response needs to be cleaned up - simply try (CloseableHttpResponse response = ...) { ... } would suffice.", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436127868", "createdAt": "2020-06-05T19:44:00Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/WebServer.java", "diffHunk": "@@ -534,6 +542,25 @@ void handleAuthRequest(RoutingContext ctx) {\n         }\n     }\n \n+    void handleHealthRequest(RoutingContext ctx) {\n+        ctx.response().putHeader(HttpHeaders.CONTENT_TYPE, MIME_TYPE_JSON);\n+        ctx.response().setStatusCode(200);\n+\n+        boolean datasourceAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            HttpGet grafanaHealth = new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV));\n+            try {\n+                CloseableHttpResponse response = this.client.execute(grafanaHealth);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d79212dbd6baf5048183e7288f2962792391c0e"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjYxNjAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/WebServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0NTo0MlrOGf7LGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0NTo0MlrOGf7LGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyODUzOQ==", "bodyText": "I think this is probably okay, but what do you think about injecting a Provider<CloseableHttpClient>? Then later on when you need to use a client, you can create, use, and clean up the client as needed. Right now there will be a single client sticking around for the life of the webserver. That's not likely a real problem, but I guess just a stylistic thing.", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436128539", "createdAt": "2020-06-05T19:45:42Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/WebServer.java", "diffHunk": "@@ -147,6 +152,7 @@\n             TargetConnectionManager targetConnectionManager,\n             Logger logger) {\n         this.server = server;\n+        this.client = client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d79212dbd6baf5048183e7288f2962792391c0e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjY0NTI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/WebServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo1Mjo1NVrOGf7cUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo1Mjo1NVrOGf7cUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzMjk0Nw==", "bodyText": "When you do the refactor, this endWithJsonKeyValue isn't around anymore, so the preferred equivalent would look like ctx.response().end(gson.toJson(Map.of(\"datasourceAvailable\", datasourceAvailable))).\nOn that note, what do you think about adding an equivalent JSON property for the Grafana dashboard's health as well? It would be something like a new HttpGet(this.env.getEnv(GRAFANA_DASHBOARD_ENV) + \"/api/health\")), and then the rest of the response processing you've done here would be the same I think.", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436132947", "createdAt": "2020-06-05T19:52:55Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/WebServer.java", "diffHunk": "@@ -534,6 +542,25 @@ void handleAuthRequest(RoutingContext ctx) {\n         }\n     }\n \n+    void handleHealthRequest(RoutingContext ctx) {\n+        ctx.response().putHeader(HttpHeaders.CONTENT_TYPE, MIME_TYPE_JSON);\n+        ctx.response().setStatusCode(200);\n+\n+        boolean datasourceAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            HttpGet grafanaHealth = new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV));\n+            try {\n+                CloseableHttpResponse response = this.client.execute(grafanaHealth);\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    datasourceAvailable = true;\n+                }\n+            } catch (IOException e) {\n+            }\n+        }\n+        endWithJsonKeyValue(\"datasourceAvailable\", datasourceAvailable, ctx.response());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d79212dbd6baf5048183e7288f2962792391c0e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjgwOTM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1MzozNVrOGf9Dag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzowMToxNVrOGf_iHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1OTMzOA==", "bodyText": "I think at least putting a Logger warning here or something would make sense. What do you think?", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436159338", "createdAt": "2020-06-05T20:53:35Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+\n+    @Inject\n+    HealthGetHandler(Provider<CloseableHttpClient> httpClientProvider, Environment env, Gson gson) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()\n+                            .execute(new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV))); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    datasourceAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                // Do nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23fd85db10ada9bd84de0843c360fa66889e6092"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5OTk2NQ==", "bodyText": "Added in latest commit", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436199965", "createdAt": "2020-06-05T23:01:15Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+\n+    @Inject\n+    HealthGetHandler(Provider<CloseableHttpClient> httpClientProvider, Environment env, Gson gson) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()\n+                            .execute(new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV))); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    datasourceAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                // Do nothing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1OTMzOA=="}, "originalCommit": {"oid": "23fd85db10ada9bd84de0843c360fa66889e6092"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjgxNDA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1NToyOFrOGf9GXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjo1ODozMVrOGf_fvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDA5Mg==", "bodyText": "If the env var is not set, or is blank what happens? Is a request still fired? I think in that scenario it's worth just short-circuiting and skipping the network request.", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436160092", "createdAt": "2020-06-05T20:55:28Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+\n+    @Inject\n+    HealthGetHandler(Provider<CloseableHttpClient> httpClientProvider, Environment env, Gson gson) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()\n+                            .execute(new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV))); ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23fd85db10ada9bd84de0843c360fa66889e6092"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5OTM1Nw==", "bodyText": "This is inside an if block for env.hasEnv so it should be skipped when env isn't set. I think it's fine to continue without checking the value; it will just error out in it's attempt in the client code", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436199357", "createdAt": "2020-06-05T22:58:31Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+\n+    @Inject\n+    HealthGetHandler(Provider<CloseableHttpClient> httpClientProvider, Environment env, Gson gson) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()\n+                            .execute(new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV))); ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDA5Mg=="}, "originalCommit": {"oid": "23fd85db10ada9bd84de0843c360fa66889e6092"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzA4NTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzoxODo1OFrOGf_v-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMDoxNTo0OFrOGjfKBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzUxMw==", "bodyText": "Is the TreeMap here jjust to ensure consistent ordering of the keys?", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436203513", "createdAt": "2020-06-05T23:18:58Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+    static final String GRAFANA_DASHBOARD_ENV = \"GRAFANA_DASHBOARD_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+    private final Logger logger;\n+\n+    @Inject\n+    HealthGetHandler(\n+            Provider<CloseableHttpClient> httpClientProvider,\n+            Environment env,\n+            Gson gson,\n+            Logger logger) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+        boolean dashboardAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()\n+                            .execute(new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV))); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    datasourceAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                logger.warn(e);\n+            }\n+        }\n+\n+        if (this.env.hasEnv(GRAFANA_DASHBOARD_ENV)) {\n+            String url = this.env.getEnv(GRAFANA_DASHBOARD_ENV) + \"/api/health\";\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider.get().execute(new HttpGet(url)); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    dashboardAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                logger.warn(e);\n+            }\n+        }\n+\n+        ctx.response()\n+                .putHeader(HttpHeaders.CONTENT_TYPE, HttpMimeType.JSON.mime())\n+                .end(\n+                        gson.toJson(\n+                                new TreeMap<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aab83639f5ae172a553db698a778809dd5d02300"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMjEwMA==", "bodyText": "Yeah; let me know if there's a smarter way to do it D:", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436212100", "createdAt": "2020-06-06T00:06:56Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+    static final String GRAFANA_DASHBOARD_ENV = \"GRAFANA_DASHBOARD_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+    private final Logger logger;\n+\n+    @Inject\n+    HealthGetHandler(\n+            Provider<CloseableHttpClient> httpClientProvider,\n+            Environment env,\n+            Gson gson,\n+            Logger logger) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+        boolean dashboardAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()\n+                            .execute(new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV))); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    datasourceAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                logger.warn(e);\n+            }\n+        }\n+\n+        if (this.env.hasEnv(GRAFANA_DASHBOARD_ENV)) {\n+            String url = this.env.getEnv(GRAFANA_DASHBOARD_ENV) + \"/api/health\";\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider.get().execute(new HttpGet(url)); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    dashboardAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                logger.warn(e);\n+            }\n+        }\n+\n+        ctx.response()\n+                .putHeader(HttpHeaders.CONTENT_TYPE, HttpMimeType.JSON.mime())\n+                .end(\n+                        gson.toJson(\n+                                new TreeMap<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzUxMw=="}, "originalCommit": {"oid": "aab83639f5ae172a553db698a778809dd5d02300"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNTU2MA==", "bodyText": "Hmm. I don't know of a particularly better way, although I wonder if it really matters - a typical client parsing the JSON response shouldn't care about the key order. Maybe it makes testing easier, but then perhaps the tests should grab a Gson instance (from the MainModule), parse the response, and make assertions on what is found in the deserialized structure?", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436235560", "createdAt": "2020-06-06T04:09:25Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+    static final String GRAFANA_DASHBOARD_ENV = \"GRAFANA_DASHBOARD_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+    private final Logger logger;\n+\n+    @Inject\n+    HealthGetHandler(\n+            Provider<CloseableHttpClient> httpClientProvider,\n+            Environment env,\n+            Gson gson,\n+            Logger logger) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+        boolean dashboardAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()\n+                            .execute(new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV))); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    datasourceAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                logger.warn(e);\n+            }\n+        }\n+\n+        if (this.env.hasEnv(GRAFANA_DASHBOARD_ENV)) {\n+            String url = this.env.getEnv(GRAFANA_DASHBOARD_ENV) + \"/api/health\";\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider.get().execute(new HttpGet(url)); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    dashboardAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                logger.warn(e);\n+            }\n+        }\n+\n+        ctx.response()\n+                .putHeader(HttpHeaders.CONTENT_TYPE, HttpMimeType.JSON.mime())\n+                .end(\n+                        gson.toJson(\n+                                new TreeMap<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzUxMw=="}, "originalCommit": {"oid": "aab83639f5ae172a553db698a778809dd5d02300"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzNjI1Nw==", "bodyText": "Hey Andrew. I think that clients will appreciate consistent responses and the cost for us to do so is minimal, though a bit... hacky (here). If you'd like, I can keep it random and adjust the test, let me know.", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r438936257", "createdAt": "2020-06-11T17:02:10Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+    static final String GRAFANA_DASHBOARD_ENV = \"GRAFANA_DASHBOARD_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+    private final Logger logger;\n+\n+    @Inject\n+    HealthGetHandler(\n+            Provider<CloseableHttpClient> httpClientProvider,\n+            Environment env,\n+            Gson gson,\n+            Logger logger) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+        boolean dashboardAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()\n+                            .execute(new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV))); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    datasourceAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                logger.warn(e);\n+            }\n+        }\n+\n+        if (this.env.hasEnv(GRAFANA_DASHBOARD_ENV)) {\n+            String url = this.env.getEnv(GRAFANA_DASHBOARD_ENV) + \"/api/health\";\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider.get().execute(new HttpGet(url)); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    dashboardAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                logger.warn(e);\n+            }\n+        }\n+\n+        ctx.response()\n+                .putHeader(HttpHeaders.CONTENT_TYPE, HttpMimeType.JSON.mime())\n+                .end(\n+                        gson.toJson(\n+                                new TreeMap<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzUxMw=="}, "originalCommit": {"oid": "aab83639f5ae172a553db698a778809dd5d02300"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2NTA5Nw==", "bodyText": "I don't really see the benefit to clients of having consistently ordered JSON keys, though. JSON parsing of an object should be independent of what order the keys appear in, so any client using a spec-compliant parser shouldn't even really notice whether the keys are sorted or even in consistent order or not. If we start enforcing a particular ordering of the keys here then a) we should be doing it everywhere and b) that ordering becomes an implicit part of our API, and I don't quite agree with either of those.", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r438965097", "createdAt": "2020-06-11T17:49:30Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+    static final String GRAFANA_DASHBOARD_ENV = \"GRAFANA_DASHBOARD_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+    private final Logger logger;\n+\n+    @Inject\n+    HealthGetHandler(\n+            Provider<CloseableHttpClient> httpClientProvider,\n+            Environment env,\n+            Gson gson,\n+            Logger logger) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+        boolean dashboardAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()\n+                            .execute(new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV))); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    datasourceAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                logger.warn(e);\n+            }\n+        }\n+\n+        if (this.env.hasEnv(GRAFANA_DASHBOARD_ENV)) {\n+            String url = this.env.getEnv(GRAFANA_DASHBOARD_ENV) + \"/api/health\";\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider.get().execute(new HttpGet(url)); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    dashboardAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                logger.warn(e);\n+            }\n+        }\n+\n+        ctx.response()\n+                .putHeader(HttpHeaders.CONTENT_TYPE, HttpMimeType.JSON.mime())\n+                .end(\n+                        gson.toJson(\n+                                new TreeMap<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzUxMw=="}, "originalCommit": {"oid": "aab83639f5ae172a553db698a778809dd5d02300"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg2MzgxMg==", "bodyText": "Okay. Updated in the latest commit", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r439863812", "createdAt": "2020-06-14T20:15:48Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+    static final String GRAFANA_DASHBOARD_ENV = \"GRAFANA_DASHBOARD_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+    private final Logger logger;\n+\n+    @Inject\n+    HealthGetHandler(\n+            Provider<CloseableHttpClient> httpClientProvider,\n+            Environment env,\n+            Gson gson,\n+            Logger logger) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+        boolean dashboardAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()\n+                            .execute(new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV))); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    datasourceAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                logger.warn(e);\n+            }\n+        }\n+\n+        if (this.env.hasEnv(GRAFANA_DASHBOARD_ENV)) {\n+            String url = this.env.getEnv(GRAFANA_DASHBOARD_ENV) + \"/api/health\";\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider.get().execute(new HttpGet(url)); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    dashboardAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                logger.warn(e);\n+            }\n+        }\n+\n+        ctx.response()\n+                .putHeader(HttpHeaders.CONTENT_TYPE, HttpMimeType.JSON.mime())\n+                .end(\n+                        gson.toJson(\n+                                new TreeMap<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzUxMw=="}, "originalCommit": {"oid": "aab83639f5ae172a553db698a778809dd5d02300"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjY1NTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoyNjozOVrOGj0m4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjowNjo1OVrOGj47dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIxNTI2Ng==", "bodyText": "Last thing: this auto-closes the response, but not the client itself. I think it should be something like try (CloseableHttpClient client = this.httpClientProvider.get(); CloseableHttpResponse response = client.execute()). There's a similar example in the UploadRecordingCommand", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r440215266", "createdAt": "2020-06-15T14:26:39Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+    static final String GRAFANA_DASHBOARD_ENV = \"GRAFANA_DASHBOARD_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+    private final Logger logger;\n+\n+    @Inject\n+    HealthGetHandler(\n+            Provider<CloseableHttpClient> httpClientProvider,\n+            Environment env,\n+            Gson gson,\n+            Logger logger) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+        boolean dashboardAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01fcfb019626af155c63643fa9989229ec6a25f"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4NjA2OA==", "bodyText": "Should be fixed now. Thanks for the note.", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r440286068", "createdAt": "2020-06-15T16:06:59Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+    static final String GRAFANA_DASHBOARD_ENV = \"GRAFANA_DASHBOARD_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+    private final Logger logger;\n+\n+    @Inject\n+    HealthGetHandler(\n+            Provider<CloseableHttpClient> httpClientProvider,\n+            Environment env,\n+            Gson gson,\n+            Logger logger) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+        boolean dashboardAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIxNTI2Ng=="}, "originalCommit": {"oid": "c01fcfb019626af155c63643fa9989229ec6a25f"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 825, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}