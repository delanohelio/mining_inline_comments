{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMzg3Mzgz", "number": 360, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMDo1NTozMFrOFOVGFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMDo1NTozMFrOFOVGFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTcwMDA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/TargetConnectionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMDo1NTozMFrOITBuzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMTowMToxNFrOITB7Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgyMjIyMQ==", "bodyText": "This can be written as logger.info(\"removing cached connection for %s\", descriptor.getTargetId()). I changed all the string.format statements in a PR a month ago, it probably makes sense to keep it consistent!", "url": "https://github.com/cryostatio/cryostat/pull/360#discussion_r556822221", "createdAt": "2021-01-13T20:55:30Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/TargetConnectionManager.java", "diffHunk": "@@ -63,42 +67,72 @@\n     public static final Pattern HOST_PORT_PAIR_PATTERN =\n             Pattern.compile(\"^([^:\\\\s]+)(?::(\\\\d{1,5}))?$\");\n \n-    private final Logger logger;\n-    // FIXME verify concurrent connection safety and remove locking\n-    private final ReentrantLock lock = new ReentrantLock();\n-    // maintain a short-lived cache of connections to allow nested ConnectedTasks\n-    // without having to manage connection reuse\n-    private final Map<ConnectionDescriptor, JFRConnection> activeConnections = new HashMap<>();\n+    static final Duration DEFAULT_TTL = Duration.ofSeconds(90);\n+\n     private final Lazy<JFRConnectionToolkit> jfrConnectionToolkit;\n+    private final Logger logger;\n \n-    public TargetConnectionManager(Logger logger, Lazy<JFRConnectionToolkit> jfrConnectionToolkit) {\n-        this.logger = logger;\n+    private final LoadingCache<ConnectionDescriptor, JFRConnection> connections;\n+\n+    TargetConnectionManager(\n+            Lazy<JFRConnectionToolkit> jfrConnectionToolkit, Duration ttl, Logger logger) {\n         this.jfrConnectionToolkit = jfrConnectionToolkit;\n+        this.logger = logger;\n+\n+        this.connections =\n+                Caffeine.newBuilder()\n+                        .scheduler(Scheduler.systemScheduler())\n+                        .expireAfterAccess(ttl)\n+                        .removalListener(\n+                                new RemovalListener<ConnectionDescriptor, JFRConnection>() {\n+                                    @Override\n+                                    public void onRemoval(\n+                                            ConnectionDescriptor descriptor,\n+                                            JFRConnection connection,\n+                                            RemovalCause cause) {\n+                                        if (descriptor == null) {\n+                                            logger.warn(\n+                                                    \"Connection eviction triggered with null descriptor\");\n+                                            return;\n+                                        }\n+                                        if (connection == null) {\n+                                            logger.warn(\n+                                                    \"Connection eviction triggered with null connection\");\n+                                            return;\n+                                        }\n+                                        logger.info(\n+                                                String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae1983a0267d8ef0c8a018359485624d2ed44a9"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgyNTQyNw==", "bodyText": "Aha, good catch - this PR was opened as a draft the day before you opened that logger PR, so I just never came back around to fix that up :-)", "url": "https://github.com/cryostatio/cryostat/pull/360#discussion_r556825427", "createdAt": "2021-01-13T21:01:14Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/TargetConnectionManager.java", "diffHunk": "@@ -63,42 +67,72 @@\n     public static final Pattern HOST_PORT_PAIR_PATTERN =\n             Pattern.compile(\"^([^:\\\\s]+)(?::(\\\\d{1,5}))?$\");\n \n-    private final Logger logger;\n-    // FIXME verify concurrent connection safety and remove locking\n-    private final ReentrantLock lock = new ReentrantLock();\n-    // maintain a short-lived cache of connections to allow nested ConnectedTasks\n-    // without having to manage connection reuse\n-    private final Map<ConnectionDescriptor, JFRConnection> activeConnections = new HashMap<>();\n+    static final Duration DEFAULT_TTL = Duration.ofSeconds(90);\n+\n     private final Lazy<JFRConnectionToolkit> jfrConnectionToolkit;\n+    private final Logger logger;\n \n-    public TargetConnectionManager(Logger logger, Lazy<JFRConnectionToolkit> jfrConnectionToolkit) {\n-        this.logger = logger;\n+    private final LoadingCache<ConnectionDescriptor, JFRConnection> connections;\n+\n+    TargetConnectionManager(\n+            Lazy<JFRConnectionToolkit> jfrConnectionToolkit, Duration ttl, Logger logger) {\n         this.jfrConnectionToolkit = jfrConnectionToolkit;\n+        this.logger = logger;\n+\n+        this.connections =\n+                Caffeine.newBuilder()\n+                        .scheduler(Scheduler.systemScheduler())\n+                        .expireAfterAccess(ttl)\n+                        .removalListener(\n+                                new RemovalListener<ConnectionDescriptor, JFRConnection>() {\n+                                    @Override\n+                                    public void onRemoval(\n+                                            ConnectionDescriptor descriptor,\n+                                            JFRConnection connection,\n+                                            RemovalCause cause) {\n+                                        if (descriptor == null) {\n+                                            logger.warn(\n+                                                    \"Connection eviction triggered with null descriptor\");\n+                                            return;\n+                                        }\n+                                        if (connection == null) {\n+                                            logger.warn(\n+                                                    \"Connection eviction triggered with null connection\");\n+                                            return;\n+                                        }\n+                                        logger.info(\n+                                                String.format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgyMjIyMQ=="}, "originalCommit": {"oid": "5ae1983a0267d8ef0c8a018359485624d2ed44a9"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 801, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}