{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MTAzNjY0", "number": 206, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMToyNToxNlrOEOcCQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTozNzoyMlrOEOcQlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTc0ODUxOnYy", "diffSide": "RIGHT", "path": "COMMANDS.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMToyNToxNlrOGxl6nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMToyNToxNlrOGxl6nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NDYyMw==", "bodyText": "Typo: s/targedId/targetId/", "url": "https://github.com/cryostatio/cryostat/pull/206#discussion_r454654623", "createdAt": "2020-07-14T21:25:16Z", "author": {"login": "andrewazores"}, "path": "COMMANDS.md", "diffHunk": "@@ -275,11 +275,11 @@ formatted as a JSON response.\n \n * #### `wait-for`\n     ###### usage\n-    `wait-for foo`\n+    `wait-for targedId foo`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34aa0813954c4d19e2e2bb0d59209472672f7532"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTc3MjE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/StartRecordingCommand.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTozMzowN1rOGxmJsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo0MDoxN1rOGyI2XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODQ4MA==", "bodyText": "In this kind of scenario where there are multiple validation checks that can fail, beyond the most basic \"wrong number of arguments\" failure, how about performing all of the checks and constructing a message informing the client about all of the failures, rather than just the \"first\" in the arbitrary implementation order?", "url": "https://github.com/cryostatio/cryostat/pull/206#discussion_r454658480", "createdAt": "2020-07-14T21:33:07Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/StartRecordingCommand.java", "diffHunk": "@@ -135,33 +135,34 @@ public void execute(String[] args) throws Exception {\n     }\n \n     @Override\n-    public boolean validate(String[] args) {\n+    public void validate(String[] args) throws FailedValidationException {\n         if (args.length != 3) {\n-            cw.println(\n-                    \"Expected three arguments: target (host:port, ip:port, or JMX service URL), recording name, and event types\");\n-            return false;\n+            String errorMessage =\n+                    \"Expected three arguments: target (host:port, ip:port, or JMX service URL), recording name, and event types\";\n+            cw.println(errorMessage);\n+            throw new FailedValidationException(errorMessage);\n         }\n \n         String targetId = args[0];\n         String name = args[1];\n         String events = args[2];\n \n-        boolean isValidTargetId = validateTargetId(targetId);\n-        boolean isValidName = validateRecordingName(name);\n-        boolean isValidEvents = validateEvents(events);\n-\n-        if (!isValidTargetId) {\n-            cw.println(String.format(\"%s is an invalid connection specifier\", args[0]));\n+        if (!validateTargetId(targetId)) {\n+            String errorMessage = \"%s is an invalid connection specifier\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34aa0813954c4d19e2e2bb0d59209472672f7532"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODg5OA==", "bodyText": "This would match more closely with the previous behaviour, which would print out all of the failures before returning the value of the validation result.", "url": "https://github.com/cryostatio/cryostat/pull/206#discussion_r454658898", "createdAt": "2020-07-14T21:34:00Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/StartRecordingCommand.java", "diffHunk": "@@ -135,33 +135,34 @@ public void execute(String[] args) throws Exception {\n     }\n \n     @Override\n-    public boolean validate(String[] args) {\n+    public void validate(String[] args) throws FailedValidationException {\n         if (args.length != 3) {\n-            cw.println(\n-                    \"Expected three arguments: target (host:port, ip:port, or JMX service URL), recording name, and event types\");\n-            return false;\n+            String errorMessage =\n+                    \"Expected three arguments: target (host:port, ip:port, or JMX service URL), recording name, and event types\";\n+            cw.println(errorMessage);\n+            throw new FailedValidationException(errorMessage);\n         }\n \n         String targetId = args[0];\n         String name = args[1];\n         String events = args[2];\n \n-        boolean isValidTargetId = validateTargetId(targetId);\n-        boolean isValidName = validateRecordingName(name);\n-        boolean isValidEvents = validateEvents(events);\n-\n-        if (!isValidTargetId) {\n-            cw.println(String.format(\"%s is an invalid connection specifier\", args[0]));\n+        if (!validateTargetId(targetId)) {\n+            String errorMessage = \"%s is an invalid connection specifier\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODQ4MA=="}, "originalCommit": {"oid": "34aa0813954c4d19e2e2bb0d59209472672f7532"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3NDI5OA==", "bodyText": "Ah, I didn't realize that.\nFor combining them, what do you think about just concatenating them together with some sort of separator? For example:\nMultiple validation checks failed: %s is an invalid connection specifier; %s is an invalid recording name; %s is an invalid events specifier\n\nAnd do you have any thoughts on adding tests to support this? I feel like being completely exhaustive and testing all the possible multiple-failure combinations is probably a bit too much? So maybe we could just do a 2-fail and all-fail test for validate() methods with more than two checks, and obviously just the 2-fail for any that have two checks?", "url": "https://github.com/cryostatio/cryostat/pull/206#discussion_r454674298", "createdAt": "2020-07-14T22:09:08Z", "author": {"login": "vic-ma"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/StartRecordingCommand.java", "diffHunk": "@@ -135,33 +135,34 @@ public void execute(String[] args) throws Exception {\n     }\n \n     @Override\n-    public boolean validate(String[] args) {\n+    public void validate(String[] args) throws FailedValidationException {\n         if (args.length != 3) {\n-            cw.println(\n-                    \"Expected three arguments: target (host:port, ip:port, or JMX service URL), recording name, and event types\");\n-            return false;\n+            String errorMessage =\n+                    \"Expected three arguments: target (host:port, ip:port, or JMX service URL), recording name, and event types\";\n+            cw.println(errorMessage);\n+            throw new FailedValidationException(errorMessage);\n         }\n \n         String targetId = args[0];\n         String name = args[1];\n         String events = args[2];\n \n-        boolean isValidTargetId = validateTargetId(targetId);\n-        boolean isValidName = validateRecordingName(name);\n-        boolean isValidEvents = validateEvents(events);\n-\n-        if (!isValidTargetId) {\n-            cw.println(String.format(\"%s is an invalid connection specifier\", args[0]));\n+        if (!validateTargetId(targetId)) {\n+            String errorMessage = \"%s is an invalid connection specifier\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODQ4MA=="}, "originalCommit": {"oid": "34aa0813954c4d19e2e2bb0d59209472672f7532"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyNjk3Mg==", "bodyText": "Yea, semicolons to separate them seems good to me.\nI think it's probably worth exhaustively testing all the validation cases, even if it does seem repetitive/monotonous to do. It's easy for a refactor or some other change in the future to accidentally change the semantics of the method, and that's a regression case that unit tests are great for catching. The command validation step should be considered as part of our command channel API, so we want to be very sure that it's stable between versions.", "url": "https://github.com/cryostatio/cryostat/pull/206#discussion_r455226972", "createdAt": "2020-07-15T17:40:17Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/StartRecordingCommand.java", "diffHunk": "@@ -135,33 +135,34 @@ public void execute(String[] args) throws Exception {\n     }\n \n     @Override\n-    public boolean validate(String[] args) {\n+    public void validate(String[] args) throws FailedValidationException {\n         if (args.length != 3) {\n-            cw.println(\n-                    \"Expected three arguments: target (host:port, ip:port, or JMX service URL), recording name, and event types\");\n-            return false;\n+            String errorMessage =\n+                    \"Expected three arguments: target (host:port, ip:port, or JMX service URL), recording name, and event types\";\n+            cw.println(errorMessage);\n+            throw new FailedValidationException(errorMessage);\n         }\n \n         String targetId = args[0];\n         String name = args[1];\n         String events = args[2];\n \n-        boolean isValidTargetId = validateTargetId(targetId);\n-        boolean isValidName = validateRecordingName(name);\n-        boolean isValidEvents = validateEvents(events);\n-\n-        if (!isValidTargetId) {\n-            cw.println(String.format(\"%s is an invalid connection specifier\", args[0]));\n+        if (!validateTargetId(targetId)) {\n+            String errorMessage = \"%s is an invalid connection specifier\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODQ4MA=="}, "originalCommit": {"oid": "34aa0813954c4d19e2e2bb0d59209472672f7532"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTc4NDYzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractConnectedCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTozNzowN1rOGxmRdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTozNzowN1rOGxmRdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2MDQ2OA==", "bodyText": "The return is implicit for a void method, so you can just have an empty method body between the curly braces.", "url": "https://github.com/cryostatio/cryostat/pull/206#discussion_r454660468", "createdAt": "2020-07-14T21:37:07Z", "author": {"login": "andrewazores"}, "path": "src/test/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractConnectedCommandTest.java", "diffHunk": "@@ -141,8 +141,8 @@ public String getName() {\n         public void execute(String[] args) {}\n \n         @Override\n-        public boolean validate(String[] args) {\n-            return true;\n+        public void validate(String[] args) throws FailedValidationException {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34aa0813954c4d19e2e2bb0d59209472672f7532"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTc4NTE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTozNzoyMlrOGxmRyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTozNzoyMlrOGxmRyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2MDU1Mg==", "bodyText": "Same here re: empty method body/implicit return", "url": "https://github.com/cryostatio/cryostat/pull/206#discussion_r454660552", "createdAt": "2020-07-14T21:37:22Z", "author": {"login": "andrewazores"}, "path": "src/test/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommandTest.java", "diffHunk": "@@ -217,8 +217,8 @@ public String getName() {\n         }\n \n         @Override\n-        public boolean validate(String[] args) {\n-            return true;\n+        public void validate(String[] args) throws FailedValidationException {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34aa0813954c4d19e2e2bb0d59209472672f7532"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 842, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}