{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTc1NDAy", "number": 187, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxNzoxM1rOEHqXng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxNzoxM1rOEHqXng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDY5NjYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/redhat/rhjmc/containerjfr/commands/internal/ListSavedRecordingsCommandTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxNzoxM1rOGnJ86A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTowNjozOFrOGnRA2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMDY5Ng==", "bodyText": "There's an extra whitespace after the when on this line. Have you done a mvn spotless:apply to auto-format the code?", "url": "https://github.com/cryostatio/cryostat/pull/187#discussion_r443710696", "createdAt": "2020-06-22T17:17:13Z", "author": {"login": "andrewazores"}, "path": "src/test/java/com/redhat/rhjmc/containerjfr/commands/internal/ListSavedRecordingsCommandTest.java", "diffHunk": "@@ -137,8 +137,46 @@ void shouldExecuteAndPrintSavedRecordings() throws Exception {\n \n         InOrder inOrder = inOrder(cw);\n         inOrder.verify(cw).println(\"Saved recordings:\");\n-        inOrder.verify(cw).println(\"\\tfoo\");\n-        inOrder.verify(cw).println(\"\\tbar\");\n+        inOrder.verify(cw).println(Mockito.contains(\"getName\\t\\tfoo\"));\n+        inOrder.verify(cw).println(Mockito.contains(\"getName\\t\\tbar\"));\n+    }\n+\n+    @Test\n+    void shouldPrintURLs() throws Exception {\n+        when(fs.listDirectoryChildren(recordingsPath)).thenReturn(Arrays.asList(\"foo\", \"bar\"));\n+        when(exporter.getArchivedDownloadURL(Mockito.anyString())).thenAnswer(\n+            new Answer<String>() {\n+                @Override\n+                public String answer(InvocationOnMock invocation) throws Throwable {\n+                    return String.format(\n+                            \"http://example.com:1234/api/v1/recordings/%s\",\n+                            invocation.getArguments()[0]);\n+                }\n+            });\n+        when (exporter.getArchivedReportURL(Mockito.anyString())).thenAnswer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a5210ee176c54363894e7cd273b89178162362"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyNjM5NA==", "bodyText": "Fixed!", "url": "https://github.com/cryostatio/cryostat/pull/187#discussion_r443826394", "createdAt": "2020-06-22T21:06:38Z", "author": {"login": "Alexjsenn"}, "path": "src/test/java/com/redhat/rhjmc/containerjfr/commands/internal/ListSavedRecordingsCommandTest.java", "diffHunk": "@@ -137,8 +137,46 @@ void shouldExecuteAndPrintSavedRecordings() throws Exception {\n \n         InOrder inOrder = inOrder(cw);\n         inOrder.verify(cw).println(\"Saved recordings:\");\n-        inOrder.verify(cw).println(\"\\tfoo\");\n-        inOrder.verify(cw).println(\"\\tbar\");\n+        inOrder.verify(cw).println(Mockito.contains(\"getName\\t\\tfoo\"));\n+        inOrder.verify(cw).println(Mockito.contains(\"getName\\t\\tbar\"));\n+    }\n+\n+    @Test\n+    void shouldPrintURLs() throws Exception {\n+        when(fs.listDirectoryChildren(recordingsPath)).thenReturn(Arrays.asList(\"foo\", \"bar\"));\n+        when(exporter.getArchivedDownloadURL(Mockito.anyString())).thenAnswer(\n+            new Answer<String>() {\n+                @Override\n+                public String answer(InvocationOnMock invocation) throws Throwable {\n+                    return String.format(\n+                            \"http://example.com:1234/api/v1/recordings/%s\",\n+                            invocation.getArguments()[0]);\n+                }\n+            });\n+        when (exporter.getArchivedReportURL(Mockito.anyString())).thenAnswer(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMDY5Ng=="}, "originalCommit": {"oid": "28a5210ee176c54363894e7cd273b89178162362"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 832, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}