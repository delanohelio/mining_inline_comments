{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDk0Njk4", "number": 167, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo1NDozMlrOECTLYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDoyOTo0NVrOECT1QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODQ2ODE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/AuthPostHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo1NDozMlrOGerJsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo1NDozMlrOGerJsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxNzQ1Ng==", "bodyText": "Could this reuse the super implementation? Aside from the 200 response.", "url": "https://github.com/cryostatio/cryostat/pull/167#discussion_r434817456", "createdAt": "2020-06-03T19:54:32Z", "author": {"login": "ebaron"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/AuthPostHandler.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class AuthPostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    @Inject\n+    AuthPostHandler(AuthManager auth) {\n+        super(auth);\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/api/v1/auth\";\n+    }\n+\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean authd = false;\n+        try {\n+            authd = validateRequestAuthorization(ctx.request()).get();\n+        } catch (Exception e) {\n+            throw new HttpStatusException(500, e);\n+        }\n+        if (authd) {\n+            ctx.response().setStatusCode(200);\n+            ctx.response().end();\n+        } else {\n+            throw new HttpStatusException(401);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55277e2af364d6db04ba50cb92b89cd278bcc756"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODU3NTM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingGetHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDoyOTo0NVrOGesOmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDoyOTo0NVrOGesOmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNTA5Nw==", "bodyText": "Could you use the new HttpMimeType enum here?", "url": "https://github.com/cryostatio/cryostat/pull/167#discussion_r434835097", "createdAt": "2020-06-03T20:29:45Z", "author": {"login": "ebaron"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingGetHandler.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.net.JFRConnection;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+import com.redhat.rhjmc.containerjfr.net.web.WebServer.DownloadDescriptor;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class TargetRecordingGetHandler extends AbstractAuthenticatedRequestHandler {\n+    static final String MIME_TYPE_OCTET_STREAM = \"application/octet-stream\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55277e2af364d6db04ba50cb92b89cd278bcc756"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 822, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}