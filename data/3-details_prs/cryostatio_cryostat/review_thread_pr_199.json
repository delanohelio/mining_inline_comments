{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNjAzNjM2", "number": 199, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTo0MzozN1rOENCBxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTo1NTo1MFrOENCRIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTAwMTY1OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTo0MzozOFrOGvfTdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTo0MzozOFrOGvfTdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ0OTE0MA==", "bodyText": "I'd prefer to be more concise, e.g.\nJDK Flight Recorder event templates (.jfc files) are...\nSo things like \"has a concept of...\" or \"are a sort of...\" should be removed.", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r452449140", "createdAt": "2020-07-09T19:43:38Z", "author": {"login": "jiekang"}, "path": "README.md", "diffHunk": "@@ -175,18 +175,28 @@ number and the deployment network configuration allows connections on the\n configured port. As noted above, the final caveat is that in non-Kube\n deployments, port 9091 is expected for automatic port-scanning target discovery.\n \n+## EVENT TEMPLATES\n+\n+JDK Flight Recorder has a concept of \"event templates\", which are a sort of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91c5df2242178e0713c448048ca0bd0a1ad17b5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTAwNDgxOnYy", "diffSide": "RIGHT", "path": "run.sh", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTo0NDozMlrOGvfVSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTo0NDozMlrOGvfVSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ0OTYxMA==", "bodyText": "Extra line can be removed.", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r452449610", "createdAt": "2020-07-09T19:44:32Z", "author": {"login": "jiekang"}, "path": "run.sh", "diffHunk": "@@ -41,10 +41,12 @@ if [ -z \"$CONTAINER_JFR_AUTH_MANAGER\" ]; then\n     CONTAINER_JFR_AUTH_MANAGER=\"com.redhat.rhjmc.containerjfr.net.NoopAuthManager\"\n fi\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91c5df2242178e0713c448048ca0bd0a1ad17b5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTA0MDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTo1NTo1MFrOGvfrsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTowNTozM1rOGxYA1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw==", "bodyText": "I guess a side-effect here to keep in mind for the c-jfr-web UI listing of profiles is if a custom profile has the same name as a JVM one, it will make the JVM one no longer accessible with this API.", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r452455347", "createdAt": "2020-07-09T19:55:50Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java", "diffHunk": "@@ -90,7 +94,24 @@ protected AbstractRecordingCommand(\n             if (ALL_EVENTS_TEMPLATE.getName().equals(templateName)) {\n                 return enableAllEvents(connection);\n             }\n-            return connection.getTemplateService().getEventsByTemplateName(templateName);\n+            // if a template name is specified, try to find a Custom template by that name. If none,\n+            // fall back on finding a target built-in template by that name. If not, throw an\n+            // exception and bail out.\n+            return connection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91c5df2242178e0713c448048ca0bd0a1ad17b5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NzczOA==", "bodyText": "Oh wait... this is the command while the TargetTemplateGetHandler supports specification of template type. Would it make sense to support that here too?", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r452457738", "createdAt": "2020-07-09T20:00:44Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java", "diffHunk": "@@ -90,7 +94,24 @@ protected AbstractRecordingCommand(\n             if (ALL_EVENTS_TEMPLATE.getName().equals(templateName)) {\n                 return enableAllEvents(connection);\n             }\n-            return connection.getTemplateService().getEventsByTemplateName(templateName);\n+            // if a template name is specified, try to find a Custom template by that name. If none,\n+            // fall back on finding a target built-in template by that name. If not, throw an\n+            // exception and bail out.\n+            return connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw=="}, "originalCommit": {"oid": "a91c5df2242178e0713c448048ca0bd0a1ad17b5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2NzQwMQ==", "bodyText": "Yea, that's something I had in mind to figure out. I don't know how I want to change the template=Foo syntax, though. Any suggestions for how to specify custom vs remote template?", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r452467401", "createdAt": "2020-07-09T20:20:44Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java", "diffHunk": "@@ -90,7 +94,24 @@ protected AbstractRecordingCommand(\n             if (ALL_EVENTS_TEMPLATE.getName().equals(templateName)) {\n                 return enableAllEvents(connection);\n             }\n-            return connection.getTemplateService().getEventsByTemplateName(templateName);\n+            // if a template name is specified, try to find a Custom template by that name. If none,\n+            // fall back on finding a target built-in template by that name. If not, throw an\n+            // exception and bail out.\n+            return connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw=="}, "originalCommit": {"oid": "a91c5df2242178e0713c448048ca0bd0a1ad17b5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3NTY3MQ==", "bodyText": "Looking at the event syntax, comma delimited would be fine.\ntemplate=X,type=Y.\nOr if you want to be more concise, though I guess disallowing commas in the name:\ntemplate=X,Y\nEither seems fine to me. And for ease of use maybe the existing code can be kept for the case where users don't supply a template type.", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r452475671", "createdAt": "2020-07-09T20:37:25Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java", "diffHunk": "@@ -90,7 +94,24 @@ protected AbstractRecordingCommand(\n             if (ALL_EVENTS_TEMPLATE.getName().equals(templateName)) {\n                 return enableAllEvents(connection);\n             }\n-            return connection.getTemplateService().getEventsByTemplateName(templateName);\n+            // if a template name is specified, try to find a Custom template by that name. If none,\n+            // fall back on finding a target built-in template by that name. If not, throw an\n+            // exception and bail out.\n+            return connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw=="}, "originalCommit": {"oid": "a91c5df2242178e0713c448048ca0bd0a1ad17b5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NjQ5NA==", "bodyText": "I'll implement the template=X,type=Y format. I'll take the shortcut for now and require the keys to be in that order so I can just extend the existing validation regex, but maybe this should use a CSV parser instead... ?\nThe template=Name,Type format looks to me like a list of templates to enable, as if they would be unioned. Similar to the per-event syntax of jdk.Foo:option=val,app.Bar:something=other. That's also an interesting feature idea though.", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r452486494", "createdAt": "2020-07-09T20:58:52Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java", "diffHunk": "@@ -90,7 +94,24 @@ protected AbstractRecordingCommand(\n             if (ALL_EVENTS_TEMPLATE.getName().equals(templateName)) {\n                 return enableAllEvents(connection);\n             }\n-            return connection.getTemplateService().getEventsByTemplateName(templateName);\n+            // if a template name is specified, try to find a Custom template by that name. If none,\n+            // fall back on finding a target built-in template by that name. If not, throw an\n+            // exception and bail out.\n+            return connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw=="}, "originalCommit": {"oid": "a91c5df2242178e0713c448048ca0bd0a1ad17b5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NTQwOA==", "bodyText": "Okay, sounds fine. I think restricting order and using regex for now is okay. Re. list of templates, that's a good point. I'm not sure we'd ever want to bother with multiple template input; I don't think JFR/JMC does that with the jfc stuff, does it? But it could be a neat feature. Anyways heh", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r454395408", "createdAt": "2020-07-14T14:24:50Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java", "diffHunk": "@@ -90,7 +94,24 @@ protected AbstractRecordingCommand(\n             if (ALL_EVENTS_TEMPLATE.getName().equals(templateName)) {\n                 return enableAllEvents(connection);\n             }\n-            return connection.getTemplateService().getEventsByTemplateName(templateName);\n+            // if a template name is specified, try to find a Custom template by that name. If none,\n+            // fall back on finding a target built-in template by that name. If not, throw an\n+            // exception and bail out.\n+            return connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw=="}, "originalCommit": {"oid": "a91c5df2242178e0713c448048ca0bd0a1ad17b5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwNTU1Mg==", "bodyText": "Yea I don't think the unioned template thing is done in JMC, but I could be wrong. Although the union A U B U C ... U Z does implicitly happen if you simultaneously create recordings from each template A...Z and then retrieve the contents of those recordings, doesn't it? But then you have a bunch of redundant recordings for no good reason.", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r454405552", "createdAt": "2020-07-14T14:37:50Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java", "diffHunk": "@@ -90,7 +94,24 @@ protected AbstractRecordingCommand(\n             if (ALL_EVENTS_TEMPLATE.getName().equals(templateName)) {\n                 return enableAllEvents(connection);\n             }\n-            return connection.getTemplateService().getEventsByTemplateName(templateName);\n+            // if a template name is specified, try to find a Custom template by that name. If none,\n+            // fall back on finding a target built-in template by that name. If not, throw an\n+            // exception and bail out.\n+            return connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw=="}, "originalCommit": {"oid": "a91c5df2242178e0713c448048ca0bd0a1ad17b5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyNjgzOQ==", "bodyText": "Ah true, I forgot about that. Recordings each have a single jfc but the event configuration in JFR is a union of all the recording event configs, which is in the end a union of the jfc files, heh.", "url": "https://github.com/cryostatio/cryostat/pull/199#discussion_r454426839", "createdAt": "2020-07-14T15:05:33Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java", "diffHunk": "@@ -90,7 +94,24 @@ protected AbstractRecordingCommand(\n             if (ALL_EVENTS_TEMPLATE.getName().equals(templateName)) {\n                 return enableAllEvents(connection);\n             }\n-            return connection.getTemplateService().getEventsByTemplateName(templateName);\n+            // if a template name is specified, try to find a Custom template by that name. If none,\n+            // fall back on finding a target built-in template by that name. If not, throw an\n+            // exception and bail out.\n+            return connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTM0Nw=="}, "originalCommit": {"oid": "a91c5df2242178e0713c448048ca0bd0a1ad17b5"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 838, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}