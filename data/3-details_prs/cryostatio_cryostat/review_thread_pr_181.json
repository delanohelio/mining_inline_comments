{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjY5Nzcw", "number": 181, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDowOTo0NFrOEEcbNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoxMDozOVrOEEccSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDk1NDc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/UploadRecordingCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDowOTo0NFrOGiEmBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDowOTo0NFrOGiEmBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4MDAzNw==", "bodyText": "Just a minor style nitpick - generally the convention would be private final.", "url": "https://github.com/cryostatio/cryostat/pull/181#discussion_r438380037", "createdAt": "2020-06-10T20:09:44Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/UploadRecordingCommand.java", "diffHunk": "@@ -175,25 +178,43 @@ public boolean validate(String[] args) {\n \n     // returned stream should be cleaned up by HttpClient\n     @SuppressFBWarnings(\"OBL_UNSATISFIED_OBLIGATION\")\n-    Optional<InputStream> getBestRecordingForName(String targetId, String recordingName)\n+    RecordingConnection getBestRecordingForName(String targetId, String recordingName)\n             throws Exception {\n         Optional<IRecordingDescriptor> currentRecording =\n                 getDescriptorByName(targetId, recordingName);\n         if (currentRecording.isPresent()) {\n-            return targetConnectionManager.executeConnectedTask(\n-                    targetId,\n-                    connection -> {\n-                        return Optional.of(\n-                                connection.getService().openStream(currentRecording.get(), false));\n-                    });\n+            JFRConnection connection = targetConnectionManager.connect(targetId);\n+            return new RecordingConnection(\n+                    Optional.of(connection.getService().openStream(currentRecording.get(), false)),\n+                    Optional.of(connection));\n         }\n \n         Path archivedRecording = recordingsPath.resolve(recordingName);\n         if (fs.isRegularFile(archivedRecording) && fs.isReadable(archivedRecording)) {\n-            return Optional.of(new BufferedInputStream(fs.newInputStream(archivedRecording)));\n+            return new RecordingConnection(\n+                    Optional.of(new BufferedInputStream(fs.newInputStream(archivedRecording))),\n+                    Optional.empty());\n         }\n \n-        return Optional.empty();\n+        return new RecordingConnection(Optional.empty(), Optional.empty());\n+    }\n+\n+    static class RecordingConnection {\n+        final private Optional<InputStream> stream;\n+        final private Optional<JFRConnection> connection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "737f7f744b3381189b2cbed6033f5a7ef87b0e09"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDk1NzUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/UploadRecordingCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoxMDozOVrOGiEnzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoxMDozOVrOGiEnzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4MDQ5Mg==", "bodyText": "And also a minor nitpick, but this constructor and the instance methods below it probably don't need to be public if the class itself is default visibility (package-private).", "url": "https://github.com/cryostatio/cryostat/pull/181#discussion_r438380492", "createdAt": "2020-06-10T20:10:39Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/UploadRecordingCommand.java", "diffHunk": "@@ -175,25 +178,43 @@ public boolean validate(String[] args) {\n \n     // returned stream should be cleaned up by HttpClient\n     @SuppressFBWarnings(\"OBL_UNSATISFIED_OBLIGATION\")\n-    Optional<InputStream> getBestRecordingForName(String targetId, String recordingName)\n+    RecordingConnection getBestRecordingForName(String targetId, String recordingName)\n             throws Exception {\n         Optional<IRecordingDescriptor> currentRecording =\n                 getDescriptorByName(targetId, recordingName);\n         if (currentRecording.isPresent()) {\n-            return targetConnectionManager.executeConnectedTask(\n-                    targetId,\n-                    connection -> {\n-                        return Optional.of(\n-                                connection.getService().openStream(currentRecording.get(), false));\n-                    });\n+            JFRConnection connection = targetConnectionManager.connect(targetId);\n+            return new RecordingConnection(\n+                    Optional.of(connection.getService().openStream(currentRecording.get(), false)),\n+                    Optional.of(connection));\n         }\n \n         Path archivedRecording = recordingsPath.resolve(recordingName);\n         if (fs.isRegularFile(archivedRecording) && fs.isReadable(archivedRecording)) {\n-            return Optional.of(new BufferedInputStream(fs.newInputStream(archivedRecording)));\n+            return new RecordingConnection(\n+                    Optional.of(new BufferedInputStream(fs.newInputStream(archivedRecording))),\n+                    Optional.empty());\n         }\n \n-        return Optional.empty();\n+        return new RecordingConnection(Optional.empty(), Optional.empty());\n+    }\n+\n+    static class RecordingConnection {\n+        final private Optional<InputStream> stream;\n+        final private Optional<JFRConnection> connection;\n+\n+        public RecordingConnection(Optional<InputStream> stream, Optional<JFRConnection> connection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "737f7f744b3381189b2cbed6033f5a7ef87b0e09"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 827, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}