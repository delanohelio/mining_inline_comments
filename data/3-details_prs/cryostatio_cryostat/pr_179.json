{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4Njk4NzQw", "number": 179, "title": "Add health check", "bodyText": "Addresses #175", "createdAt": "2020-06-05T19:40:11Z", "url": "https://github.com/cryostatio/cryostat/pull/179", "merged": true, "mergeCommit": {"oid": "5dfdff04dbf813adac863112cd96947cae3049c0"}, "closed": true, "closedAt": "2020-06-15T17:52:22Z", "author": {"login": "jiekang"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoYC9AAFqTQyNTU3Njk3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcri-tzAFqTQzMDc5MTIxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTc2OTcx", "url": "https://github.com/cryostatio/cryostat/pull/179#pullrequestreview-425576971", "createdAt": "2020-06-05T19:43:59Z", "commit": {"oid": "9d79212dbd6baf5048183e7288f2962792391c0e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0NDowMFrOGf7IfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0NDowMFrOGf7IfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNzg2OA==", "bodyText": "I think the response needs to be cleaned up - simply try (CloseableHttpResponse response = ...) { ... } would suffice.", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436127868", "createdAt": "2020-06-05T19:44:00Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/WebServer.java", "diffHunk": "@@ -534,6 +542,25 @@ void handleAuthRequest(RoutingContext ctx) {\n         }\n     }\n \n+    void handleHealthRequest(RoutingContext ctx) {\n+        ctx.response().putHeader(HttpHeaders.CONTENT_TYPE, MIME_TYPE_JSON);\n+        ctx.response().setStatusCode(200);\n+\n+        boolean datasourceAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            HttpGet grafanaHealth = new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV));\n+            try {\n+                CloseableHttpResponse response = this.client.execute(grafanaHealth);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d79212dbd6baf5048183e7288f2962792391c0e"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTc5NDE5", "url": "https://github.com/cryostatio/cryostat/pull/179#pullrequestreview-425579419", "createdAt": "2020-06-05T19:45:42Z", "commit": {"oid": "9d79212dbd6baf5048183e7288f2962792391c0e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0NTo0MlrOGf7LGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0NTo0MlrOGf7LGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyODUzOQ==", "bodyText": "I think this is probably okay, but what do you think about injecting a Provider<CloseableHttpClient>? Then later on when you need to use a client, you can create, use, and clean up the client as needed. Right now there will be a single client sticking around for the life of the webserver. That's not likely a real problem, but I guess just a stylistic thing.", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436128539", "createdAt": "2020-06-05T19:45:42Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/WebServer.java", "diffHunk": "@@ -147,6 +152,7 @@\n             TargetConnectionManager targetConnectionManager,\n             Logger logger) {\n         this.server = server;\n+        this.client = client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d79212dbd6baf5048183e7288f2962792391c0e"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTg2MzQ5", "url": "https://github.com/cryostatio/cryostat/pull/179#pullrequestreview-425586349", "createdAt": "2020-06-05T19:52:54Z", "commit": {"oid": "9d79212dbd6baf5048183e7288f2962792391c0e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo1Mjo1NVrOGf7cUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo1Mjo1NVrOGf7cUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzMjk0Nw==", "bodyText": "When you do the refactor, this endWithJsonKeyValue isn't around anymore, so the preferred equivalent would look like ctx.response().end(gson.toJson(Map.of(\"datasourceAvailable\", datasourceAvailable))).\nOn that note, what do you think about adding an equivalent JSON property for the Grafana dashboard's health as well? It would be something like a new HttpGet(this.env.getEnv(GRAFANA_DASHBOARD_ENV) + \"/api/health\")), and then the rest of the response processing you've done here would be the same I think.", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436132947", "createdAt": "2020-06-05T19:52:55Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/WebServer.java", "diffHunk": "@@ -534,6 +542,25 @@ void handleAuthRequest(RoutingContext ctx) {\n         }\n     }\n \n+    void handleHealthRequest(RoutingContext ctx) {\n+        ctx.response().putHeader(HttpHeaders.CONTENT_TYPE, MIME_TYPE_JSON);\n+        ctx.response().setStatusCode(200);\n+\n+        boolean datasourceAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            HttpGet grafanaHealth = new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV));\n+            try {\n+                CloseableHttpResponse response = this.client.execute(grafanaHealth);\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    datasourceAvailable = true;\n+                }\n+            } catch (IOException e) {\n+            }\n+        }\n+        endWithJsonKeyValue(\"datasourceAvailable\", datasourceAvailable, ctx.response());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d79212dbd6baf5048183e7288f2962792391c0e"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d79212dbd6baf5048183e7288f2962792391c0e", "author": {"user": {"login": "jiekang", "name": "Jie Kang"}}, "url": "https://github.com/cryostatio/cryostat/commit/9d79212dbd6baf5048183e7288f2962792391c0e", "committedDate": "2020-06-05T19:31:24Z", "message": "Update handler to check for jfr-datasource availability. Add unit tests for new handler"}, "afterCommit": {"oid": "9ae9f254ca2332f4bc0fd6ebdf34c7fc6c7a404f", "author": {"user": {"login": "jiekang", "name": "Jie Kang"}}, "url": "https://github.com/cryostatio/cryostat/commit/9ae9f254ca2332f4bc0fd6ebdf34c7fc6c7a404f", "committedDate": "2020-06-05T20:27:31Z", "message": "Clean up code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23fd85db10ada9bd84de0843c360fa66889e6092", "author": {"user": {"login": "jiekang", "name": "Jie Kang"}}, "url": "https://github.com/cryostatio/cryostat/commit/23fd85db10ada9bd84de0843c360fa66889e6092", "committedDate": "2020-06-05T20:41:23Z", "message": "Add handler for /health"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ae9f254ca2332f4bc0fd6ebdf34c7fc6c7a404f", "author": {"user": {"login": "jiekang", "name": "Jie Kang"}}, "url": "https://github.com/cryostatio/cryostat/commit/9ae9f254ca2332f4bc0fd6ebdf34c7fc6c7a404f", "committedDate": "2020-06-05T20:27:31Z", "message": "Clean up code"}, "afterCommit": {"oid": "23fd85db10ada9bd84de0843c360fa66889e6092", "author": {"user": {"login": "jiekang", "name": "Jie Kang"}}, "url": "https://github.com/cryostatio/cryostat/commit/23fd85db10ada9bd84de0843c360fa66889e6092", "committedDate": "2020-06-05T20:41:23Z", "message": "Add handler for /health"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjE5MTQz", "url": "https://github.com/cryostatio/cryostat/pull/179#pullrequestreview-425619143", "createdAt": "2020-06-05T20:53:35Z", "commit": {"oid": "23fd85db10ada9bd84de0843c360fa66889e6092"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1MzozNVrOGf9Dag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1MzozNVrOGf9Dag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1OTMzOA==", "bodyText": "I think at least putting a Logger warning here or something would make sense. What do you think?", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436159338", "createdAt": "2020-06-05T20:53:35Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+\n+    @Inject\n+    HealthGetHandler(Provider<CloseableHttpClient> httpClientProvider, Environment env, Gson gson) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()\n+                            .execute(new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV))); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    datasourceAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                // Do nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23fd85db10ada9bd84de0843c360fa66889e6092"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjIwMTA5", "url": "https://github.com/cryostatio/cryostat/pull/179#pullrequestreview-425620109", "createdAt": "2020-06-05T20:55:28Z", "commit": {"oid": "23fd85db10ada9bd84de0843c360fa66889e6092"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1NToyOFrOGf9GXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1NToyOFrOGf9GXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDA5Mg==", "bodyText": "If the env var is not set, or is blank what happens? Is a request still fired? I think in that scenario it's worth just short-circuiting and skipping the network request.", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436160092", "createdAt": "2020-06-05T20:55:28Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+\n+    @Inject\n+    HealthGetHandler(Provider<CloseableHttpClient> httpClientProvider, Environment env, Gson gson) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()\n+                            .execute(new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV))); ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23fd85db10ada9bd84de0843c360fa66889e6092"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6998957ac690c072d19b0302cd599c971af913b8", "author": {"user": {"login": "jiekang", "name": "Jie Kang"}}, "url": "https://github.com/cryostatio/cryostat/commit/6998957ac690c072d19b0302cd599c971af913b8", "committedDate": "2020-06-05T22:56:25Z", "message": "Update health handler to also get status of grafana service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b7325aaf03b48efff3d93977f2f88c706377e4c", "author": {"user": {"login": "jiekang", "name": "Jie Kang"}}, "url": "https://github.com/cryostatio/cryostat/commit/0b7325aaf03b48efff3d93977f2f88c706377e4c", "committedDate": "2020-06-05T23:00:58Z", "message": "Add logging to health request exception. Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aab83639f5ae172a553db698a778809dd5d02300", "author": {"user": {"login": "jiekang", "name": "Jie Kang"}}, "url": "https://github.com/cryostatio/cryostat/commit/aab83639f5ae172a553db698a778809dd5d02300", "committedDate": "2020-06-05T23:03:02Z", "message": "Fix health handler test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Njc2MzY0", "url": "https://github.com/cryostatio/cryostat/pull/179#pullrequestreview-425676364", "createdAt": "2020-06-05T23:18:58Z", "commit": {"oid": "aab83639f5ae172a553db698a778809dd5d02300"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzoxODo1OFrOGf_v-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzoxODo1OFrOGf_v-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzUxMw==", "bodyText": "Is the TreeMap here jjust to ensure consistent ordering of the keys?", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r436203513", "createdAt": "2020-06-05T23:18:58Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+    static final String GRAFANA_DASHBOARD_ENV = \"GRAFANA_DASHBOARD_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+    private final Logger logger;\n+\n+    @Inject\n+    HealthGetHandler(\n+            Provider<CloseableHttpClient> httpClientProvider,\n+            Environment env,\n+            Gson gson,\n+            Logger logger) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+        boolean dashboardAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()\n+                            .execute(new HttpGet(this.env.getEnv(GRAFANA_DATASOURCE_ENV))); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    datasourceAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                logger.warn(e);\n+            }\n+        }\n+\n+        if (this.env.hasEnv(GRAFANA_DASHBOARD_ENV)) {\n+            String url = this.env.getEnv(GRAFANA_DASHBOARD_ENV) + \"/api/health\";\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider.get().execute(new HttpGet(url)); ) {\n+                if (response.getStatusLine().getStatusCode() == 200) {\n+                    dashboardAvailable = true;\n+                }\n+            } catch (IOException e) {\n+                logger.warn(e);\n+            }\n+        }\n+\n+        ctx.response()\n+                .putHeader(HttpHeaders.CONTENT_TYPE, HttpMimeType.JSON.mime())\n+                .end(\n+                        gson.toJson(\n+                                new TreeMap<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aab83639f5ae172a553db698a778809dd5d02300"}, "originalPosition": 133}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c01fcfb019626af155c63643fa9989229ec6a25f", "author": {"user": {"login": "jiekang", "name": "Jie Kang"}}, "url": "https://github.com/cryostatio/cryostat/commit/c01fcfb019626af155c63643fa9989229ec6a25f", "committedDate": "2020-06-14T20:13:59Z", "message": "Update health handler and test for random order response"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNjk2NDgz", "url": "https://github.com/cryostatio/cryostat/pull/179#pullrequestreview-430696483", "createdAt": "2020-06-15T14:26:39Z", "commit": {"oid": "c01fcfb019626af155c63643fa9989229ec6a25f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoyNjozOVrOGj0m4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoyNjozOVrOGj0m4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIxNTI2Ng==", "bodyText": "Last thing: this auto-closes the response, but not the client itself. I think it should be something like try (CloseableHttpClient client = this.httpClientProvider.get(); CloseableHttpResponse response = client.execute()). There's a similar example in the UploadRecordingCommand", "url": "https://github.com/cryostatio/cryostat/pull/179#discussion_r440215266", "createdAt": "2020-06-15T14:26:39Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/HealthGetHandler.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class HealthGetHandler implements RequestHandler {\n+\n+    static final String GRAFANA_DATASOURCE_ENV = \"GRAFANA_DATASOURCE_URL\";\n+    static final String GRAFANA_DASHBOARD_ENV = \"GRAFANA_DASHBOARD_URL\";\n+\n+    private final Provider<CloseableHttpClient> httpClientProvider;\n+    private final Environment env;\n+    private final Gson gson;\n+    private final Logger logger;\n+\n+    @Inject\n+    HealthGetHandler(\n+            Provider<CloseableHttpClient> httpClientProvider,\n+            Environment env,\n+            Gson gson,\n+            Logger logger) {\n+        this.httpClientProvider = httpClientProvider;\n+        this.env = env;\n+        this.gson = gson;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/health\";\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    // try-with-resources generates a \"redundant\" nullcheck in bytecode\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    @Override\n+    public void handle(RoutingContext ctx) {\n+        boolean datasourceAvailable = false;\n+        boolean dashboardAvailable = false;\n+\n+        if (this.env.hasEnv(GRAFANA_DATASOURCE_ENV)) {\n+            try (CloseableHttpResponse response =\n+                    this.httpClientProvider\n+                            .get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01fcfb019626af155c63643fa9989229ec6a25f"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd0b3609ca80eaa8248eb913e45add66dbf8312d", "author": {"user": {"login": "jiekang", "name": "Jie Kang"}}, "url": "https://github.com/cryostatio/cryostat/commit/bd0b3609ca80eaa8248eb913e45add66dbf8312d", "committedDate": "2020-06-15T16:06:10Z", "message": "Fix try close in HealthGetHandler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNzkxMjE4", "url": "https://github.com/cryostatio/cryostat/pull/179#pullrequestreview-430791218", "createdAt": "2020-06-15T16:10:06Z", "commit": {"oid": "bd0b3609ca80eaa8248eb913e45add66dbf8312d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3147, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}