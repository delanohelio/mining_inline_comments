{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTIwNTI0", "number": 222, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDoxMzozN1rOEULn6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0NTozMFrOEV_JcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTk3NDE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/RecordingOptionsBuilderFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDoxMzozN1rOG6U-DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjozNjo0N1rOG7oe2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNDE1Ng==", "bodyText": "Does this comment also apply to EventOptionsBuilder?", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r463814156", "createdAt": "2020-07-31T20:13:37Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/RecordingOptionsBuilderFactory.java", "diffHunk": "@@ -45,7 +45,9 @@\n import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n \n-interface RecordingOptionsBuilderFactory {\n+// FIXME this should be in a more general package, not commands/internal. This is also used in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "583fbe5b4494c92bcfefd032a2173810273c3670"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNTI2MQ==", "bodyText": "Yea, it does. Since essentially all of the commands are now deprecated, I figured it would make sense to wait until they can be fully removed and then the RecordingOptionsBuilderFactory and EventOptionsBuilder can be moved somewhere close to the HTTP Handlers.", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r463815261", "createdAt": "2020-07-31T20:16:22Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/RecordingOptionsBuilderFactory.java", "diffHunk": "@@ -45,7 +45,9 @@\n import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n \n-interface RecordingOptionsBuilderFactory {\n+// FIXME this should be in a more general package, not commands/internal. This is also used in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNDE1Ng=="}, "originalCommit": {"oid": "583fbe5b4494c92bcfefd032a2173810273c3670"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4MjQyNw==", "bodyText": "Ah gotcha. Makes sense. Thanks", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r465182427", "createdAt": "2020-08-04T16:36:47Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/RecordingOptionsBuilderFactory.java", "diffHunk": "@@ -45,7 +45,9 @@\n import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n \n-interface RecordingOptionsBuilderFactory {\n+// FIXME this should be in a more general package, not commands/internal. This is also used in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNDE1Ng=="}, "originalCommit": {"oid": "583fbe5b4494c92bcfefd032a2173810273c3670"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgzMTcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoyMzozMlrOG9C_Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0ODoyM1rOG9DvXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIzNA==", "bodyText": "Would the check for this be running mvn spotbugs:check ?", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466665234", "createdAt": "2020-08-06T20:23:32Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.MainModule;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+import io.vertx.ext.web.multipart.MultipartForm;\n+\n+class RecordingUploadPostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    private final Environment env;\n+    private final WebClient webClient;\n+    private final FileSystem fs;\n+    private final Path savedRecordingsPath;\n+\n+    @Inject\n+    RecordingUploadPostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            WebClient webClient,\n+            FileSystem fs,\n+            @Named(MainModule.RECORDINGS_PATH) Path savedRecordingsPath) {\n+        super(auth);\n+        this.env = env;\n+        this.webClient = webClient;\n+        this.fs = fs;\n+        this.savedRecordingsPath = savedRecordingsPath;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/api/v1/recordings/:recordingName/upload\";\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        String recordingName = ctx.pathParam(\"recordingName\");\n+        try {\n+            URL uploadUrl = new URL(env.getEnv(\"GRAFANA_DATASOURCE_URL\"));\n+            // TODO validate URL before POST attempt\n+            ResponseMessage response = doPost(recordingName, uploadUrl);\n+            ctx.response().setStatusCode(response.statusCode);\n+            ctx.response().setStatusMessage(response.statusMessage);\n+            ctx.response().end(response.body);\n+        } catch (MalformedURLException e) {\n+            throw new HttpStatusException(501, e);\n+        }\n+    }\n+\n+    // FindBugs thinks the recordingPath or its properties is null somehow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTM4MQ==", "bodyText": "Er, with the suppression removed :P", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466665381", "createdAt": "2020-08-06T20:23:50Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.MainModule;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+import io.vertx.ext.web.multipart.MultipartForm;\n+\n+class RecordingUploadPostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    private final Environment env;\n+    private final WebClient webClient;\n+    private final FileSystem fs;\n+    private final Path savedRecordingsPath;\n+\n+    @Inject\n+    RecordingUploadPostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            WebClient webClient,\n+            FileSystem fs,\n+            @Named(MainModule.RECORDINGS_PATH) Path savedRecordingsPath) {\n+        super(auth);\n+        this.env = env;\n+        this.webClient = webClient;\n+        this.fs = fs;\n+        this.savedRecordingsPath = savedRecordingsPath;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/api/v1/recordings/:recordingName/upload\";\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        String recordingName = ctx.pathParam(\"recordingName\");\n+        try {\n+            URL uploadUrl = new URL(env.getEnv(\"GRAFANA_DATASOURCE_URL\"));\n+            // TODO validate URL before POST attempt\n+            ResponseMessage response = doPost(recordingName, uploadUrl);\n+            ctx.response().setStatusCode(response.statusCode);\n+            ctx.response().setStatusMessage(response.statusMessage);\n+            ctx.response().end(response.body);\n+        } catch (MalformedURLException e) {\n+            throw new HttpStatusException(501, e);\n+        }\n+    }\n+\n+    // FindBugs thinks the recordingPath or its properties is null somehow", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIzNA=="}, "originalCommit": {"oid": "ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2ODQwOA==", "bodyText": "Yea that should do it", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466668408", "createdAt": "2020-08-06T20:29:53Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.MainModule;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+import io.vertx.ext.web.multipart.MultipartForm;\n+\n+class RecordingUploadPostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    private final Environment env;\n+    private final WebClient webClient;\n+    private final FileSystem fs;\n+    private final Path savedRecordingsPath;\n+\n+    @Inject\n+    RecordingUploadPostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            WebClient webClient,\n+            FileSystem fs,\n+            @Named(MainModule.RECORDINGS_PATH) Path savedRecordingsPath) {\n+        super(auth);\n+        this.env = env;\n+        this.webClient = webClient;\n+        this.fs = fs;\n+        this.savedRecordingsPath = savedRecordingsPath;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/api/v1/recordings/:recordingName/upload\";\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        String recordingName = ctx.pathParam(\"recordingName\");\n+        try {\n+            URL uploadUrl = new URL(env.getEnv(\"GRAFANA_DATASOURCE_URL\"));\n+            // TODO validate URL before POST attempt\n+            ResponseMessage response = doPost(recordingName, uploadUrl);\n+            ctx.response().setStatusCode(response.statusCode);\n+            ctx.response().setStatusMessage(response.statusMessage);\n+            ctx.response().end(response.body);\n+        } catch (MalformedURLException e) {\n+            throw new HttpStatusException(501, e);\n+        }\n+    }\n+\n+    // FindBugs thinks the recordingPath or its properties is null somehow", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIzNA=="}, "originalCommit": {"oid": "ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2OTMxNA==", "bodyText": "Dang, guess our projects really do differ in some critical way. I've removed the suppression and see green for my runs of spotbugs:check", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466669314", "createdAt": "2020-08-06T20:31:41Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.MainModule;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+import io.vertx.ext.web.multipart.MultipartForm;\n+\n+class RecordingUploadPostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    private final Environment env;\n+    private final WebClient webClient;\n+    private final FileSystem fs;\n+    private final Path savedRecordingsPath;\n+\n+    @Inject\n+    RecordingUploadPostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            WebClient webClient,\n+            FileSystem fs,\n+            @Named(MainModule.RECORDINGS_PATH) Path savedRecordingsPath) {\n+        super(auth);\n+        this.env = env;\n+        this.webClient = webClient;\n+        this.fs = fs;\n+        this.savedRecordingsPath = savedRecordingsPath;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/api/v1/recordings/:recordingName/upload\";\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        String recordingName = ctx.pathParam(\"recordingName\");\n+        try {\n+            URL uploadUrl = new URL(env.getEnv(\"GRAFANA_DATASOURCE_URL\"));\n+            // TODO validate URL before POST attempt\n+            ResponseMessage response = doPost(recordingName, uploadUrl);\n+            ctx.response().setStatusCode(response.statusCode);\n+            ctx.response().setStatusMessage(response.statusMessage);\n+            ctx.response().end(response.body);\n+        } catch (MalformedURLException e) {\n+            throw new HttpStatusException(501, e);\n+        }\n+    }\n+\n+    // FindBugs thinks the recordingPath or its properties is null somehow", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIzNA=="}, "originalCommit": {"oid": "ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2OTYxMw==", "bodyText": "s/project/systems I suppose", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466669613", "createdAt": "2020-08-06T20:32:17Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.MainModule;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+import io.vertx.ext.web.multipart.MultipartForm;\n+\n+class RecordingUploadPostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    private final Environment env;\n+    private final WebClient webClient;\n+    private final FileSystem fs;\n+    private final Path savedRecordingsPath;\n+\n+    @Inject\n+    RecordingUploadPostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            WebClient webClient,\n+            FileSystem fs,\n+            @Named(MainModule.RECORDINGS_PATH) Path savedRecordingsPath) {\n+        super(auth);\n+        this.env = env;\n+        this.webClient = webClient;\n+        this.fs = fs;\n+        this.savedRecordingsPath = savedRecordingsPath;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/api/v1/recordings/:recordingName/upload\";\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        String recordingName = ctx.pathParam(\"recordingName\");\n+        try {\n+            URL uploadUrl = new URL(env.getEnv(\"GRAFANA_DATASOURCE_URL\"));\n+            // TODO validate URL before POST attempt\n+            ResponseMessage response = doPost(recordingName, uploadUrl);\n+            ctx.response().setStatusCode(response.statusCode);\n+            ctx.response().setStatusMessage(response.statusMessage);\n+            ctx.response().end(response.body);\n+        } catch (MalformedURLException e) {\n+            throw new HttpStatusException(501, e);\n+        }\n+    }\n+\n+    // FindBugs thinks the recordingPath or its properties is null somehow", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIzNA=="}, "originalCommit": {"oid": "ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NzA0NA==", "bodyText": "I don't get the Spotbugs warning anymore either - maybe I had come back around at some point and refactored this in a way that avoids the previous problem. I'll remove the annotation.", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466677044", "createdAt": "2020-08-06T20:47:22Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.MainModule;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+import io.vertx.ext.web.multipart.MultipartForm;\n+\n+class RecordingUploadPostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    private final Environment env;\n+    private final WebClient webClient;\n+    private final FileSystem fs;\n+    private final Path savedRecordingsPath;\n+\n+    @Inject\n+    RecordingUploadPostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            WebClient webClient,\n+            FileSystem fs,\n+            @Named(MainModule.RECORDINGS_PATH) Path savedRecordingsPath) {\n+        super(auth);\n+        this.env = env;\n+        this.webClient = webClient;\n+        this.fs = fs;\n+        this.savedRecordingsPath = savedRecordingsPath;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/api/v1/recordings/:recordingName/upload\";\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        String recordingName = ctx.pathParam(\"recordingName\");\n+        try {\n+            URL uploadUrl = new URL(env.getEnv(\"GRAFANA_DATASOURCE_URL\"));\n+            // TODO validate URL before POST attempt\n+            ResponseMessage response = doPost(recordingName, uploadUrl);\n+            ctx.response().setStatusCode(response.statusCode);\n+            ctx.response().setStatusMessage(response.statusMessage);\n+            ctx.response().end(response.body);\n+        } catch (MalformedURLException e) {\n+            throw new HttpStatusException(501, e);\n+        }\n+    }\n+\n+    // FindBugs thinks the recordingPath or its properties is null somehow", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIzNA=="}, "originalCommit": {"oid": "ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NzU5Nw==", "bodyText": "I can see why it would have this warning since there are calls that would NPE if their input was null and the values submitted aren't checked before being used as input. However it looks like the values are currently never not null and I guess it would have trouble analyzing that? Anyways; weird that I don't see the warning on my runs...", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466677597", "createdAt": "2020-08-06T20:48:23Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.MainModule;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+import io.vertx.ext.web.multipart.MultipartForm;\n+\n+class RecordingUploadPostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    private final Environment env;\n+    private final WebClient webClient;\n+    private final FileSystem fs;\n+    private final Path savedRecordingsPath;\n+\n+    @Inject\n+    RecordingUploadPostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            WebClient webClient,\n+            FileSystem fs,\n+            @Named(MainModule.RECORDINGS_PATH) Path savedRecordingsPath) {\n+        super(auth);\n+        this.env = env;\n+        this.webClient = webClient;\n+        this.fs = fs;\n+        this.savedRecordingsPath = savedRecordingsPath;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/api/v1/recordings/:recordingName/upload\";\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        String recordingName = ctx.pathParam(\"recordingName\");\n+        try {\n+            URL uploadUrl = new URL(env.getEnv(\"GRAFANA_DATASOURCE_URL\"));\n+            // TODO validate URL before POST attempt\n+            ResponseMessage response = doPost(recordingName, uploadUrl);\n+            ctx.response().setStatusCode(response.statusCode);\n+            ctx.response().setStatusMessage(response.statusMessage);\n+            ctx.response().end(response.body);\n+        } catch (MalformedURLException e) {\n+            throw new HttpStatusException(501, e);\n+        }\n+    }\n+\n+    // FindBugs thinks the recordingPath or its properties is null somehow", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIzNA=="}, "originalCommit": {"oid": "ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDkwMTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0NTozMFrOG9DpyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToxMTo1OVrOG9EbvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NjE2OA==", "bodyText": "resolve can throw an InvalidPathException. If this happens, it will throw through handleAuthenticated as it only catches MalformedURLException. Would it make sense to handle it within instead to respond that the input was invalid? Or does it do that somewhere higher up?\nI see test class for TargetRecordingUploadPostHandler but not for this one. Is that intended?", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466676168", "createdAt": "2020-08-06T20:45:30Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.MainModule;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+import io.vertx.ext.web.multipart.MultipartForm;\n+\n+class RecordingUploadPostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    private final Environment env;\n+    private final WebClient webClient;\n+    private final FileSystem fs;\n+    private final Path savedRecordingsPath;\n+\n+    @Inject\n+    RecordingUploadPostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            WebClient webClient,\n+            FileSystem fs,\n+            @Named(MainModule.RECORDINGS_PATH) Path savedRecordingsPath) {\n+        super(auth);\n+        this.env = env;\n+        this.webClient = webClient;\n+        this.fs = fs;\n+        this.savedRecordingsPath = savedRecordingsPath;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/api/v1/recordings/:recordingName/upload\";\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        String recordingName = ctx.pathParam(\"recordingName\");\n+        try {\n+            URL uploadUrl = new URL(env.getEnv(\"GRAFANA_DATASOURCE_URL\"));\n+            // TODO validate URL before POST attempt\n+            ResponseMessage response = doPost(recordingName, uploadUrl);\n+            ctx.response().setStatusCode(response.statusCode);\n+            ctx.response().setStatusMessage(response.statusMessage);\n+            ctx.response().end(response.body);\n+        } catch (MalformedURLException e) {\n+            throw new HttpStatusException(501, e);\n+        }\n+    }\n+\n+    // FindBugs thinks the recordingPath or its properties is null somehow\n+    @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")\n+    private ResponseMessage doPost(String recordingName, URL uploadUrl) throws Exception {\n+        Path recordingPath =\n+                getRecordingPath(recordingName)\n+                        .orElseThrow(() -> new HttpStatusException(404, recordingName));\n+\n+        MultipartForm form =\n+                MultipartForm.create()\n+                        .binaryFileUpload(\n+                                \"file\",\n+                                recordingName,\n+                                recordingPath.toString(),\n+                                HttpMimeType.OCTET_STREAM.toString());\n+\n+        CompletableFuture<ResponseMessage> future = new CompletableFuture<>();\n+        webClient\n+                .postAbs(uploadUrl.toURI().resolve(\"/load\").normalize().toString())\n+                .timeout(30_000L)\n+                .sendMultipartForm(\n+                        form,\n+                        uploadHandler -> {\n+                            if (uploadHandler.failed()) {\n+                                future.completeExceptionally(uploadHandler.cause());\n+                                return;\n+                            }\n+                            HttpResponse<Buffer> response = uploadHandler.result();\n+                            future.complete(\n+                                    new ResponseMessage(\n+                                            response.statusCode(),\n+                                            response.statusMessage(),\n+                                            response.bodyAsString()));\n+                        });\n+        return future.get();\n+    }\n+\n+    Optional<Path> getRecordingPath(String recordingName) throws Exception {\n+        Path archivedRecording = savedRecordingsPath.resolve(recordingName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3OTQ2NA==", "bodyText": "handleAuthenticated is called in AbstractAuthenticatedRequestHandler.handle(), which will catch any exception thrown by handleAuthenticated and handle it appropriately. For an InvalidPathException or any other generally unexpected exception, it will be wrapped in an HttpStatusException with status code 500, which will later on be caught by the WebServer and turned into a failure response on the wire.\nIt probably does make sense to catch the InvalidPathException and wrap it into an HttpStatusException with a 4xx response status though, since that's most likely due to the client making a bad request for a recording name that doesn't make sense.", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466679464", "createdAt": "2020-08-06T20:52:01Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.MainModule;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+import io.vertx.ext.web.multipart.MultipartForm;\n+\n+class RecordingUploadPostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    private final Environment env;\n+    private final WebClient webClient;\n+    private final FileSystem fs;\n+    private final Path savedRecordingsPath;\n+\n+    @Inject\n+    RecordingUploadPostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            WebClient webClient,\n+            FileSystem fs,\n+            @Named(MainModule.RECORDINGS_PATH) Path savedRecordingsPath) {\n+        super(auth);\n+        this.env = env;\n+        this.webClient = webClient;\n+        this.fs = fs;\n+        this.savedRecordingsPath = savedRecordingsPath;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/api/v1/recordings/:recordingName/upload\";\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        String recordingName = ctx.pathParam(\"recordingName\");\n+        try {\n+            URL uploadUrl = new URL(env.getEnv(\"GRAFANA_DATASOURCE_URL\"));\n+            // TODO validate URL before POST attempt\n+            ResponseMessage response = doPost(recordingName, uploadUrl);\n+            ctx.response().setStatusCode(response.statusCode);\n+            ctx.response().setStatusMessage(response.statusMessage);\n+            ctx.response().end(response.body);\n+        } catch (MalformedURLException e) {\n+            throw new HttpStatusException(501, e);\n+        }\n+    }\n+\n+    // FindBugs thinks the recordingPath or its properties is null somehow\n+    @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")\n+    private ResponseMessage doPost(String recordingName, URL uploadUrl) throws Exception {\n+        Path recordingPath =\n+                getRecordingPath(recordingName)\n+                        .orElseThrow(() -> new HttpStatusException(404, recordingName));\n+\n+        MultipartForm form =\n+                MultipartForm.create()\n+                        .binaryFileUpload(\n+                                \"file\",\n+                                recordingName,\n+                                recordingPath.toString(),\n+                                HttpMimeType.OCTET_STREAM.toString());\n+\n+        CompletableFuture<ResponseMessage> future = new CompletableFuture<>();\n+        webClient\n+                .postAbs(uploadUrl.toURI().resolve(\"/load\").normalize().toString())\n+                .timeout(30_000L)\n+                .sendMultipartForm(\n+                        form,\n+                        uploadHandler -> {\n+                            if (uploadHandler.failed()) {\n+                                future.completeExceptionally(uploadHandler.cause());\n+                                return;\n+                            }\n+                            HttpResponse<Buffer> response = uploadHandler.result();\n+                            future.complete(\n+                                    new ResponseMessage(\n+                                            response.statusCode(),\n+                                            response.statusMessage(),\n+                                            response.bodyAsString()));\n+                        });\n+        return future.get();\n+    }\n+\n+    Optional<Path> getRecordingPath(String recordingName) throws Exception {\n+        Path archivedRecording = savedRecordingsPath.resolve(recordingName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NjE2OA=="}, "originalCommit": {"oid": "ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3OTgyNA==", "bodyText": "re: missing test - nope, not intended, looks like I forgot to write one. Good catch :-) I'll add one now.", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466679824", "createdAt": "2020-08-06T20:52:46Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.MainModule;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+import io.vertx.ext.web.multipart.MultipartForm;\n+\n+class RecordingUploadPostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    private final Environment env;\n+    private final WebClient webClient;\n+    private final FileSystem fs;\n+    private final Path savedRecordingsPath;\n+\n+    @Inject\n+    RecordingUploadPostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            WebClient webClient,\n+            FileSystem fs,\n+            @Named(MainModule.RECORDINGS_PATH) Path savedRecordingsPath) {\n+        super(auth);\n+        this.env = env;\n+        this.webClient = webClient;\n+        this.fs = fs;\n+        this.savedRecordingsPath = savedRecordingsPath;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/api/v1/recordings/:recordingName/upload\";\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        String recordingName = ctx.pathParam(\"recordingName\");\n+        try {\n+            URL uploadUrl = new URL(env.getEnv(\"GRAFANA_DATASOURCE_URL\"));\n+            // TODO validate URL before POST attempt\n+            ResponseMessage response = doPost(recordingName, uploadUrl);\n+            ctx.response().setStatusCode(response.statusCode);\n+            ctx.response().setStatusMessage(response.statusMessage);\n+            ctx.response().end(response.body);\n+        } catch (MalformedURLException e) {\n+            throw new HttpStatusException(501, e);\n+        }\n+    }\n+\n+    // FindBugs thinks the recordingPath or its properties is null somehow\n+    @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")\n+    private ResponseMessage doPost(String recordingName, URL uploadUrl) throws Exception {\n+        Path recordingPath =\n+                getRecordingPath(recordingName)\n+                        .orElseThrow(() -> new HttpStatusException(404, recordingName));\n+\n+        MultipartForm form =\n+                MultipartForm.create()\n+                        .binaryFileUpload(\n+                                \"file\",\n+                                recordingName,\n+                                recordingPath.toString(),\n+                                HttpMimeType.OCTET_STREAM.toString());\n+\n+        CompletableFuture<ResponseMessage> future = new CompletableFuture<>();\n+        webClient\n+                .postAbs(uploadUrl.toURI().resolve(\"/load\").normalize().toString())\n+                .timeout(30_000L)\n+                .sendMultipartForm(\n+                        form,\n+                        uploadHandler -> {\n+                            if (uploadHandler.failed()) {\n+                                future.completeExceptionally(uploadHandler.cause());\n+                                return;\n+                            }\n+                            HttpResponse<Buffer> response = uploadHandler.result();\n+                            future.complete(\n+                                    new ResponseMessage(\n+                                            response.statusCode(),\n+                                            response.statusMessage(),\n+                                            response.bodyAsString()));\n+                        });\n+        return future.get();\n+    }\n+\n+    Optional<Path> getRecordingPath(String recordingName) throws Exception {\n+        Path archivedRecording = savedRecordingsPath.resolve(recordingName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NjE2OA=="}, "originalCommit": {"oid": "ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4ODk1Ng==", "bodyText": "Okay. I agree, I think it can be caught in this class and handled as a 4xx.", "url": "https://github.com/cryostatio/cryostat/pull/222#discussion_r466688956", "createdAt": "2020-08-06T21:11:59Z", "author": {"login": "jiekang"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingUploadPostHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.MainModule;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.HttpMimeType;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+import io.vertx.ext.web.multipart.MultipartForm;\n+\n+class RecordingUploadPostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    private final Environment env;\n+    private final WebClient webClient;\n+    private final FileSystem fs;\n+    private final Path savedRecordingsPath;\n+\n+    @Inject\n+    RecordingUploadPostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            WebClient webClient,\n+            FileSystem fs,\n+            @Named(MainModule.RECORDINGS_PATH) Path savedRecordingsPath) {\n+        super(auth);\n+        this.env = env;\n+        this.webClient = webClient;\n+        this.fs = fs;\n+        this.savedRecordingsPath = savedRecordingsPath;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"/api/v1/recordings/:recordingName/upload\";\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        String recordingName = ctx.pathParam(\"recordingName\");\n+        try {\n+            URL uploadUrl = new URL(env.getEnv(\"GRAFANA_DATASOURCE_URL\"));\n+            // TODO validate URL before POST attempt\n+            ResponseMessage response = doPost(recordingName, uploadUrl);\n+            ctx.response().setStatusCode(response.statusCode);\n+            ctx.response().setStatusMessage(response.statusMessage);\n+            ctx.response().end(response.body);\n+        } catch (MalformedURLException e) {\n+            throw new HttpStatusException(501, e);\n+        }\n+    }\n+\n+    // FindBugs thinks the recordingPath or its properties is null somehow\n+    @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\")\n+    private ResponseMessage doPost(String recordingName, URL uploadUrl) throws Exception {\n+        Path recordingPath =\n+                getRecordingPath(recordingName)\n+                        .orElseThrow(() -> new HttpStatusException(404, recordingName));\n+\n+        MultipartForm form =\n+                MultipartForm.create()\n+                        .binaryFileUpload(\n+                                \"file\",\n+                                recordingName,\n+                                recordingPath.toString(),\n+                                HttpMimeType.OCTET_STREAM.toString());\n+\n+        CompletableFuture<ResponseMessage> future = new CompletableFuture<>();\n+        webClient\n+                .postAbs(uploadUrl.toURI().resolve(\"/load\").normalize().toString())\n+                .timeout(30_000L)\n+                .sendMultipartForm(\n+                        form,\n+                        uploadHandler -> {\n+                            if (uploadHandler.failed()) {\n+                                future.completeExceptionally(uploadHandler.cause());\n+                                return;\n+                            }\n+                            HttpResponse<Buffer> response = uploadHandler.result();\n+                            future.complete(\n+                                    new ResponseMessage(\n+                                            response.statusCode(),\n+                                            response.statusMessage(),\n+                                            response.bodyAsString()));\n+                        });\n+        return future.get();\n+    }\n+\n+    Optional<Path> getRecordingPath(String recordingName) throws Exception {\n+        Path archivedRecording = savedRecordingsPath.resolve(recordingName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NjE2OA=="}, "originalCommit": {"oid": "ab0b68c55fa917838b5c4c0d5057a15b7e4ccefe"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 853, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}