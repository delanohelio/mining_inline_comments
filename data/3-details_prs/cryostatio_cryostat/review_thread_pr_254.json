{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NzgwODgx", "number": 254, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoxMzo1OFrOEgd4Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoyODozMVrOEiPf9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDc5NDIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoxMzo1OFrOHNWAvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTo0MDoxNVrOHOjJxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NDE3Mw==", "bodyText": "Can these three if/elses be refactored into a loop over a set of keys? And rather than using constant strings like toDisk, could these use the RecordingOptionsCustomizer.OptionKeys?", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483754173", "createdAt": "2020-09-04T17:13:58Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.common.unit.IOptionDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RecordingOptionsGetHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    protected final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+    private static final Pattern NUMBER_PATTERN = Pattern.compile(\"\\\\d+\");\n+\n+    @Inject\n+    RecordingOptionsGetHandler(\n+            AuthManager auth,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> optionMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            RecordingOptionsBuilder builder =\n+                                    recordingOptionsBuilderFactory.create(connection.getService());\n+                            IConstrainedMap<String> recordingOptions = builder.build();\n+\n+                            Map<String, IOptionDescriptor<?>> TargetRecordingOptions =\n+                                    connection.getService().getAvailableRecordingOptions();\n+\n+                            Map<String, String> map = new HashMap<String, String>();\n+\n+                            if (recordingOptions.get(\"toDisk\") != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MjkwOQ==", "bodyText": "I made a similar loop in the PATCH handler, but this one makes less sense because toDisk has to be handled differently than the other two. It would have to be a loop for just two of the options.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483842909", "createdAt": "2020-09-04T21:03:15Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.common.unit.IOptionDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RecordingOptionsGetHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    protected final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+    private static final Pattern NUMBER_PATTERN = Pattern.compile(\"\\\\d+\");\n+\n+    @Inject\n+    RecordingOptionsGetHandler(\n+            AuthManager auth,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> optionMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            RecordingOptionsBuilder builder =\n+                                    recordingOptionsBuilderFactory.create(connection.getService());\n+                            IConstrainedMap<String> recordingOptions = builder.build();\n+\n+                            Map<String, IOptionDescriptor<?>> TargetRecordingOptions =\n+                                    connection.getService().getAvailableRecordingOptions();\n+\n+                            Map<String, String> map = new HashMap<String, String>();\n+\n+                            if (recordingOptions.get(\"toDisk\") != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NDE3Mw=="}, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MzU0OA==", "bodyText": "How about extracting utility methods for handling plain textual values like toDisk and numeric values like the other two?\nAlthough - the other two have a regex to check that they are numeric, but toDisk doesn't seem to have any check that its text encodes a boolean value. So that should be implemented too, IMO.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483843548", "createdAt": "2020-09-04T21:05:04Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.common.unit.IOptionDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RecordingOptionsGetHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    protected final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+    private static final Pattern NUMBER_PATTERN = Pattern.compile(\"\\\\d+\");\n+\n+    @Inject\n+    RecordingOptionsGetHandler(\n+            AuthManager auth,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> optionMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            RecordingOptionsBuilder builder =\n+                                    recordingOptionsBuilderFactory.create(connection.getService());\n+                            IConstrainedMap<String> recordingOptions = builder.build();\n+\n+                            Map<String, IOptionDescriptor<?>> TargetRecordingOptions =\n+                                    connection.getService().getAvailableRecordingOptions();\n+\n+                            Map<String, String> map = new HashMap<String, String>();\n+\n+                            if (recordingOptions.get(\"toDisk\") != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NDE3Mw=="}, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0NDkxMw==", "bodyText": "How would that work, how would the utility method know which type it need to check? woudl this still be in a loop?", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483844913", "createdAt": "2020-09-04T21:09:29Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.common.unit.IOptionDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RecordingOptionsGetHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    protected final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+    private static final Pattern NUMBER_PATTERN = Pattern.compile(\"\\\\d+\");\n+\n+    @Inject\n+    RecordingOptionsGetHandler(\n+            AuthManager auth,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> optionMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            RecordingOptionsBuilder builder =\n+                                    recordingOptionsBuilderFactory.create(connection.getService());\n+                            IConstrainedMap<String> recordingOptions = builder.build();\n+\n+                            Map<String, IOptionDescriptor<?>> TargetRecordingOptions =\n+                                    connection.getService().getAvailableRecordingOptions();\n+\n+                            Map<String, String> map = new HashMap<String, String>();\n+\n+                            if (recordingOptions.get(\"toDisk\") != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NDE3Mw=="}, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0NTY0NQ==", "bodyText": "No loop. Make a utility method like getNumericOption and another like getBooleanOption.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483845645", "createdAt": "2020-09-04T21:11:52Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.common.unit.IOptionDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RecordingOptionsGetHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    protected final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+    private static final Pattern NUMBER_PATTERN = Pattern.compile(\"\\\\d+\");\n+\n+    @Inject\n+    RecordingOptionsGetHandler(\n+            AuthManager auth,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> optionMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            RecordingOptionsBuilder builder =\n+                                    recordingOptionsBuilderFactory.create(connection.getService());\n+                            IConstrainedMap<String> recordingOptions = builder.build();\n+\n+                            Map<String, IOptionDescriptor<?>> TargetRecordingOptions =\n+                                    connection.getService().getAvailableRecordingOptions();\n+\n+                            Map<String, String> map = new HashMap<String, String>();\n+\n+                            if (recordingOptions.get(\"toDisk\") != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NDE3Mw=="}, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxODA1Mg==", "bodyText": "I created a helper function for the numeric ones, I don't know if it makes sense for the boolean one because for some reason the name of the option is different between recordingOptionsCustomizer and the target recordingOptions default", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r485018052", "createdAt": "2020-09-08T15:40:15Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.common.unit.IOptionDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RecordingOptionsGetHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    protected final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+    private static final Pattern NUMBER_PATTERN = Pattern.compile(\"\\\\d+\");\n+\n+    @Inject\n+    RecordingOptionsGetHandler(\n+            AuthManager auth,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> optionMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            RecordingOptionsBuilder builder =\n+                                    recordingOptionsBuilderFactory.create(connection.getService());\n+                            IConstrainedMap<String> recordingOptions = builder.build();\n+\n+                            Map<String, IOptionDescriptor<?>> TargetRecordingOptions =\n+                                    connection.getService().getAvailableRecordingOptions();\n+\n+                            Map<String, String> map = new HashMap<String, String>();\n+\n+                            if (recordingOptions.get(\"toDisk\") != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NDE3Mw=="}, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDgxMjI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMDoyOFrOHNWLmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxODo0OTozM1rOHNYdnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1Njk1Mg==", "bodyText": "Does the recordingOptions have a method like .containsKey()? If so, it would be better to use that than .get() != null.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483756952", "createdAt": "2020-09-04T17:20:28Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.common.unit.IOptionDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RecordingOptionsGetHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    protected final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+    private static final Pattern NUMBER_PATTERN = Pattern.compile(\"\\\\d+\");\n+\n+    @Inject\n+    RecordingOptionsGetHandler(\n+            AuthManager auth,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> optionMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            RecordingOptionsBuilder builder =\n+                                    recordingOptionsBuilderFactory.create(connection.getService());\n+                            IConstrainedMap<String> recordingOptions = builder.build();\n+\n+                            Map<String, IOptionDescriptor<?>> TargetRecordingOptions =\n+                                    connection.getService().getAvailableRecordingOptions();\n+\n+                            Map<String, String> map = new HashMap<String, String>();\n+\n+                            if (recordingOptions.get(\"toDisk\") != null) {\n+                                map.put(\"toDisk\", recordingOptions.get(\"toDisk\").toString());\n+                            } else {\n+                                map.put(\n+                                        \"toDisk\",\n+                                        TargetRecordingOptions.get(\"disk\").getDefault().toString());\n+                            }\n+\n+                            String maxAge;\n+                            if (recordingOptions.get(\"maxAge\") != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc5MTcxNA==", "bodyText": "the IConstrainedMap does not seem to have that method, the only method that I can tell that serves the purpose is .get", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483791714", "createdAt": "2020-09-04T18:42:51Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.common.unit.IOptionDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RecordingOptionsGetHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    protected final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+    private static final Pattern NUMBER_PATTERN = Pattern.compile(\"\\\\d+\");\n+\n+    @Inject\n+    RecordingOptionsGetHandler(\n+            AuthManager auth,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> optionMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            RecordingOptionsBuilder builder =\n+                                    recordingOptionsBuilderFactory.create(connection.getService());\n+                            IConstrainedMap<String> recordingOptions = builder.build();\n+\n+                            Map<String, IOptionDescriptor<?>> TargetRecordingOptions =\n+                                    connection.getService().getAvailableRecordingOptions();\n+\n+                            Map<String, String> map = new HashMap<String, String>();\n+\n+                            if (recordingOptions.get(\"toDisk\") != null) {\n+                                map.put(\"toDisk\", recordingOptions.get(\"toDisk\").toString());\n+                            } else {\n+                                map.put(\n+                                        \"toDisk\",\n+                                        TargetRecordingOptions.get(\"disk\").getDefault().toString());\n+                            }\n+\n+                            String maxAge;\n+                            if (recordingOptions.get(\"maxAge\") != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1Njk1Mg=="}, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc5MjI3OQ==", "bodyText": "What about a .keySet().contains()?", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483792279", "createdAt": "2020-09-04T18:44:17Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.common.unit.IOptionDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RecordingOptionsGetHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    protected final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+    private static final Pattern NUMBER_PATTERN = Pattern.compile(\"\\\\d+\");\n+\n+    @Inject\n+    RecordingOptionsGetHandler(\n+            AuthManager auth,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> optionMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            RecordingOptionsBuilder builder =\n+                                    recordingOptionsBuilderFactory.create(connection.getService());\n+                            IConstrainedMap<String> recordingOptions = builder.build();\n+\n+                            Map<String, IOptionDescriptor<?>> TargetRecordingOptions =\n+                                    connection.getService().getAvailableRecordingOptions();\n+\n+                            Map<String, String> map = new HashMap<String, String>();\n+\n+                            if (recordingOptions.get(\"toDisk\") != null) {\n+                                map.put(\"toDisk\", recordingOptions.get(\"toDisk\").toString());\n+                            } else {\n+                                map.put(\n+                                        \"toDisk\",\n+                                        TargetRecordingOptions.get(\"disk\").getDefault().toString());\n+                            }\n+\n+                            String maxAge;\n+                            if (recordingOptions.get(\"maxAge\") != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1Njk1Mg=="}, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc5NDMzMw==", "bodyText": "Hmm.\n\t/**\n\t * @return A {@link Set set} of keys which are known to be valid. That is, those that currently\n\t *         are known to have a {@link IConstraint constraint}. This includes all keys which\n\t *         currently have a value, but additional keys may be included. In other words,\n\t *         {@link #get(Object)} may return {@code null} for some keys included in this set.\n\t */\n\tSet<K> keySet();\n\nWell, nevermind. Just keep using .get() != null then.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483794333", "createdAt": "2020-09-04T18:49:33Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.common.unit.IOptionDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RecordingOptionsGetHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    protected final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+    private static final Pattern NUMBER_PATTERN = Pattern.compile(\"\\\\d+\");\n+\n+    @Inject\n+    RecordingOptionsGetHandler(\n+            AuthManager auth,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> optionMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            RecordingOptionsBuilder builder =\n+                                    recordingOptionsBuilderFactory.create(connection.getService());\n+                            IConstrainedMap<String> recordingOptions = builder.build();\n+\n+                            Map<String, IOptionDescriptor<?>> TargetRecordingOptions =\n+                                    connection.getService().getAvailableRecordingOptions();\n+\n+                            Map<String, String> map = new HashMap<String, String>();\n+\n+                            if (recordingOptions.get(\"toDisk\") != null) {\n+                                map.put(\"toDisk\", recordingOptions.get(\"toDisk\").toString());\n+                            } else {\n+                                map.put(\n+                                        \"toDisk\",\n+                                        TargetRecordingOptions.get(\"disk\").getDefault().toString());\n+                            }\n+\n+                            String maxAge;\n+                            if (recordingOptions.get(\"maxAge\") != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1Njk1Mg=="}, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDgxNTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMTo0MlrOHNWNhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMTo0MlrOHNWNhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NzQ0Nw==", "bodyText": "This should be renamed targetRecordingOptions (camelCase, not PascalCase)", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483757447", "createdAt": "2020-09-04T17:21:42Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.common.unit.IOptionDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RecordingOptionsGetHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    protected final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+    private static final Pattern NUMBER_PATTERN = Pattern.compile(\"\\\\d+\");\n+\n+    @Inject\n+    RecordingOptionsGetHandler(\n+            AuthManager auth,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.GET;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> optionMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            RecordingOptionsBuilder builder =\n+                                    recordingOptionsBuilderFactory.create(connection.getService());\n+                            IConstrainedMap<String> recordingOptions = builder.build();\n+\n+                            Map<String, IOptionDescriptor<?>> TargetRecordingOptions =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDgxODg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMjo1OFrOHNWPnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMjo1OFrOHNWPnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1Nzk4MQ==", "bodyText": "This is duplicated from the GET handler, isn't it? One of them should probably reference the other's path here.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483757981", "createdAt": "2020-09-04T17:22:58Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class RecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDgxOTY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMzoxOFrOHNWQLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMzoxOFrOHNWQLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1ODEyNQ==", "bodyText": "The handleAuthenticated here is non-blocking so I think this can be omitted.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483758125", "createdAt": "2020-09-04T17:23:18Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class RecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    private final RecordingOptionsCustomizer customizer;\n+\n+    @Inject\n+    RecordingOptionsPatchHandler(AuthManager auth, RecordingOptionsCustomizer customizer) {\n+        super(auth);\n+        this.customizer = customizer;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDgyMjQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyNDoyMVrOHNWR2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDozMzowM1rOHNa0nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1ODU1Mw==", "bodyText": "I wonder if it would make sense to respond with 200 and then send back the updated map, or respond 204 and no response body? If the client doesn't care about the updated value then they can simply ignore it.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483758553", "createdAt": "2020-09-04T17:24:21Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class RecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    private final RecordingOptionsCustomizer customizer;\n+\n+    @Inject\n+    RecordingOptionsPatchHandler(AuthManager auth, RecordingOptionsCustomizer customizer) {\n+        super(auth);\n+        this.customizer = customizer;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        MultiMap attrs = ctx.request().formAttributes();\n+\n+        if (attrs.contains(\"toDisk\")) {\n+            OptionKey.fromOptionName(\"toDisk\")\n+                    .ifPresent(key -> customizer.set(key, attrs.get(\"toDisk\")));\n+        }\n+        if (attrs.contains(\"maxAge\")) {\n+            OptionKey.fromOptionName(\"maxAge\")\n+                    .ifPresent(key -> customizer.set(key, attrs.get(\"maxAge\")));\n+        }\n+        if (attrs.contains(\"maxSize\")) {\n+            OptionKey.fromOptionName(\"maxSize\")\n+                    .ifPresent(key -> customizer.set(key, attrs.get(\"maxSize\")));\n+        }\n+        ctx.response().setStatusCode(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc4MzgwOA==", "bodyText": "Yes, returning the updated map is good, do I need to convert it to json when sending it back?", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483783808", "createdAt": "2020-09-04T18:23:39Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class RecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    private final RecordingOptionsCustomizer customizer;\n+\n+    @Inject\n+    RecordingOptionsPatchHandler(AuthManager auth, RecordingOptionsCustomizer customizer) {\n+        super(auth);\n+        this.customizer = customizer;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        MultiMap attrs = ctx.request().formAttributes();\n+\n+        if (attrs.contains(\"toDisk\")) {\n+            OptionKey.fromOptionName(\"toDisk\")\n+                    .ifPresent(key -> customizer.set(key, attrs.get(\"toDisk\")));\n+        }\n+        if (attrs.contains(\"maxAge\")) {\n+            OptionKey.fromOptionName(\"maxAge\")\n+                    .ifPresent(key -> customizer.set(key, attrs.get(\"maxAge\")));\n+        }\n+        if (attrs.contains(\"maxSize\")) {\n+            OptionKey.fromOptionName(\"maxSize\")\n+                    .ifPresent(key -> customizer.set(key, attrs.get(\"maxSize\")));\n+        }\n+        ctx.response().setStatusCode(200);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1ODU1Mw=="}, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc4NDA4Nw==", "bodyText": "Yes.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483784087", "createdAt": "2020-09-04T18:24:19Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class RecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    private final RecordingOptionsCustomizer customizer;\n+\n+    @Inject\n+    RecordingOptionsPatchHandler(AuthManager auth, RecordingOptionsCustomizer customizer) {\n+        super(auth);\n+        this.customizer = customizer;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        MultiMap attrs = ctx.request().formAttributes();\n+\n+        if (attrs.contains(\"toDisk\")) {\n+            OptionKey.fromOptionName(\"toDisk\")\n+                    .ifPresent(key -> customizer.set(key, attrs.get(\"toDisk\")));\n+        }\n+        if (attrs.contains(\"maxAge\")) {\n+            OptionKey.fromOptionName(\"maxAge\")\n+                    .ifPresent(key -> customizer.set(key, attrs.get(\"maxAge\")));\n+        }\n+        if (attrs.contains(\"maxSize\")) {\n+            OptionKey.fromOptionName(\"maxSize\")\n+                    .ifPresent(key -> customizer.set(key, attrs.get(\"maxSize\")));\n+        }\n+        ctx.response().setStatusCode(200);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1ODU1Mw=="}, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzMjk4OQ==", "bodyText": "Should work now!", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483832989", "createdAt": "2020-09-04T20:33:03Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class RecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    private final RecordingOptionsCustomizer customizer;\n+\n+    @Inject\n+    RecordingOptionsPatchHandler(AuthManager auth, RecordingOptionsCustomizer customizer) {\n+        super(auth);\n+        this.customizer = customizer;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        MultiMap attrs = ctx.request().formAttributes();\n+\n+        if (attrs.contains(\"toDisk\")) {\n+            OptionKey.fromOptionName(\"toDisk\")\n+                    .ifPresent(key -> customizer.set(key, attrs.get(\"toDisk\")));\n+        }\n+        if (attrs.contains(\"maxAge\")) {\n+            OptionKey.fromOptionName(\"maxAge\")\n+                    .ifPresent(key -> customizer.set(key, attrs.get(\"maxAge\")));\n+        }\n+        if (attrs.contains(\"maxSize\")) {\n+            OptionKey.fromOptionName(\"maxSize\")\n+                    .ifPresent(key -> customizer.set(key, attrs.get(\"maxSize\")));\n+        }\n+        ctx.response().setStatusCode(200);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1ODU1Mw=="}, "originalCommit": {"oid": "7eb021723ba2fbafa00c8dbaf0a59f1c918c4ab1"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTMxMDU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDozNTo1NFrOHNa4CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDozNTo1NFrOHNa4CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzMzg2NQ==", "bodyText": "I think this can be private, too.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483833865", "createdAt": "2020-09-04T20:35:54Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.common.unit.IOptionDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RecordingOptionsGetHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"/api/v1/targets/:targetId/recordingOptions\";\n+    protected final TargetConnectionManager connectionManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0f279ec809e7f6e2f0d19ec2839e90c21b3e76"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTMxNTE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDozNzo1OVrOHNa6ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDozNzo1OVrOHNa6ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNDU1NA==", "bodyText": "private here too", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483834554", "createdAt": "2020-09-04T20:37:59Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class RecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = RecordingOptionsGetHandler.PATH;\n+    private final RecordingOptionsCustomizer customizer;\n+    protected final TargetConnectionManager connectionManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0f279ec809e7f6e2f0d19ec2839e90c21b3e76"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTMyMTM3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDo0MDo1OVrOHNa-Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDo0MDo1OVrOHNa-Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNTQ5MQ==", "bodyText": "should be requestAttrs", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483835491", "createdAt": "2020-09-04T20:40:59Z", "author": {"login": "andrewazores"}, "path": "src/test/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandlerTest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Map;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.core.net.JFRConnection;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.ConnectionDescriptor;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager.ConnectedTask;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ExtendWith(MockitoExtension.class)\n+class RecordingOptionsPatchHandlerTest {\n+\n+    RecordingOptionsPatchHandler handler;\n+    @Mock AuthManager auth;\n+    @Mock RecordingOptionsCustomizer customizer;\n+    @Mock TargetConnectionManager connectionManager;\n+    @Mock RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    @Mock RecordingOptionsBuilder builder;\n+    @Mock IConstrainedMap<String> recordingOptions;\n+    @Mock JFRConnection jfrConnection;\n+    @Mock Gson gson;\n+\n+    @BeforeEach\n+    void setup() {\n+        this.handler =\n+                new RecordingOptionsPatchHandler(\n+                        auth, customizer, connectionManager, recordingOptionsBuilderFactory, gson);\n+    }\n+\n+    @Test\n+    void shouldHandleGETRequest() {\n+        MatcherAssert.assertThat(handler.httpMethod(), Matchers.equalTo(HttpMethod.PATCH));\n+    }\n+\n+    @Test\n+    void shouldHandleCorrectPath() {\n+        MatcherAssert.assertThat(\n+                handler.path(), Matchers.equalTo(\"/api/v1/targets/:targetId/recordingOptions\"));\n+    }\n+\n+    @Test\n+    void shouldSetRecordingOptions() throws Exception {\n+        Map<String, String> defaultValues =\n+                Map.of(\"toDisk\", \"true\", \"maxAge\", \"50\", \"maxSize\", \"32\");\n+        Mockito.when(recordingOptionsBuilderFactory.create(Mockito.any())).thenReturn(builder);\n+        Mockito.when(builder.build()).thenReturn(recordingOptions);\n+        Mockito.when(recordingOptions.get(\"toDisk\")).thenReturn(defaultValues.get(\"toDisk\"));\n+        Mockito.when(recordingOptions.get(\"maxAge\")).thenReturn(defaultValues.get(\"maxAge\"));\n+        Mockito.when(recordingOptions.get(\"maxSize\")).thenReturn(defaultValues.get(\"maxSize\"));\n+\n+        MultiMap RequestAttrs = MultiMap.caseInsensitiveMultiMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0f279ec809e7f6e2f0d19ec2839e90c21b3e76"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTM4NzQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMToxMToyMFrOHNblZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTozODo1NlrOHOjGNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0NTQ3Ng==", "bodyText": "keys can be inlined since it isn't used anywhere lower down in the scope. Or, to be extra fancy, you could do:\nArrays.asList(\"toDisk\", \"maxAge\", \"maxSize\").forEach(key -> {\n  if (attrs.contains(key)) {\n  ...\n  }\n...\n});", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r483845476", "createdAt": "2020-09-04T21:11:20Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandler.java", "diffHunk": "@@ -98,19 +98,17 @@ void handleAuthenticated(RoutingContext ctx) throws Exception {\n                         getConnectionDescriptorFromContext(ctx),\n                         connection -> {\n                             MultiMap attrs = ctx.request().formAttributes();\n-                            if (attrs.contains(\"toDisk\")) {\n-                                OptionKey.fromOptionName(\"toDisk\")\n-                                        .ifPresent(key -> customizer.set(key, attrs.get(\"toDisk\")));\n-                            }\n-                            if (attrs.contains(\"maxAge\")) {\n-                                OptionKey.fromOptionName(\"maxAge\")\n-                                        .ifPresent(key -> customizer.set(key, attrs.get(\"maxAge\")));\n-                            }\n-                            if (attrs.contains(\"maxSize\")) {\n-                                OptionKey.fromOptionName(\"maxSize\")\n-                                        .ifPresent(\n-                                                key -> customizer.set(key, attrs.get(\"maxSize\")));\n+                            String[] keys = {\"toDisk\", \"maxAge\", \"maxSize\"};\n+                            for (String key : keys) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb12c41a0cbb10bd5c17a1ff01127d66a9b80ef"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxNzE0MQ==", "bodyText": "Ok, that's definitely better!", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r485017141", "createdAt": "2020-09-08T15:38:56Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsPatchHandler.java", "diffHunk": "@@ -98,19 +98,17 @@ void handleAuthenticated(RoutingContext ctx) throws Exception {\n                         getConnectionDescriptorFromContext(ctx),\n                         connection -> {\n                             MultiMap attrs = ctx.request().formAttributes();\n-                            if (attrs.contains(\"toDisk\")) {\n-                                OptionKey.fromOptionName(\"toDisk\")\n-                                        .ifPresent(key -> customizer.set(key, attrs.get(\"toDisk\")));\n-                            }\n-                            if (attrs.contains(\"maxAge\")) {\n-                                OptionKey.fromOptionName(\"maxAge\")\n-                                        .ifPresent(key -> customizer.set(key, attrs.get(\"maxAge\")));\n-                            }\n-                            if (attrs.contains(\"maxSize\")) {\n-                                OptionKey.fromOptionName(\"maxSize\")\n-                                        .ifPresent(\n-                                                key -> customizer.set(key, attrs.get(\"maxSize\")));\n+                            String[] keys = {\"toDisk\", \"maxAge\", \"maxSize\"};\n+                            for (String key : keys) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0NTQ3Ng=="}, "originalCommit": {"oid": "9eb12c41a0cbb10bd5c17a1ff01127d66a9b80ef"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzc1Mzc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjoxNzoyMFrOHOkpfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjoxNzoyMFrOHOkpfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MjU1OA==", "bodyText": "Ah, now that the path includes the targetId portion, these handlers should be renamed like TargetRecordingOptionsVerbHandler.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r485042558", "createdAt": "2020-09-08T16:17:20Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/RecordingOptionsGetHandler.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.common.unit.IOptionDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class RecordingOptionsGetHandler extends AbstractAuthenticatedRequestHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b5ddb8a1f190a167c782373775274de7168151"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODM1MzQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandler.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjozNDozNlrOHPQOlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToxMjozOFrOHPWA5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1NjU2NQ==", "bodyText": "Last thing:\n$ curl -vk -X PATCH -d \"maxAge=no&toDisk=123\" -H \"X-JMX-Authorization: Basic $(echo -n user:pass | base64)\" https://0.0.0.0:8181/api/v1/targets/localhost/recordingOptions\n*   Trying 0.0.0.0:8181...\n* TCP_NODELAY set\n* Connected to 0.0.0.0 (127.0.0.1) port 8181 (#0)\n* ALPN, offering h2\n* ALPN, offering http/1.1\n* successfully set certificate verify locations:\n*   CAfile: /etc/pki/tls/certs/ca-bundle.crt\n  CApath: none\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\n* TLSv1.2 (IN), TLS handshake, Finished (20):\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\n* ALPN, server did not agree to a protocol\n* Server certificate:\n*  subject: C=US; O=Red Hat; CN=container-jfr\n*  start date: Sep  9 16:27:38 2020 GMT\n*  expire date: Mar  8 16:27:38 2021 GMT\n*  issuer: C=US; O=Red Hat; CN=container-jfr\n*  SSL certificate verify result: self signed certificate (18), continuing anyway.\n> PATCH /api/v1/targets/localhost/recordingOptions HTTP/1.1\n> Host: 0.0.0.0:8181\n> User-Agent: curl/7.66.0\n> Accept: */*\n> X-JMX-Authorization: Basic dXNlcjpwYXNz\n> Content-Length: 20\n> Content-Type: application/x-www-form-urlencoded\n> \n* upload completely sent off: 20 out of 20 bytes\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 200 OK\n< content-length: 45\n< \n* Connection #0 to host 0.0.0.0 left intact\n{\"maxAge\":\"0\",\"toDisk\":\"false\",\"maxSize\":\"0\"}\n\nThe options I set are invalid, and the ContainerJFR logs do reflect that, but the response sent is still a 200 OK. The Customizer needs refactoring to throw exceptions when its validations fail instead of simply logging them, however, that refactor should probably wait until the Command equivalent to this handler is removed so that the Customizer doesn't need to support both cases.\nSo, for now, please add some basic validations for these three attributes, and if the validation fails respond with some 4xx status code.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r485756565", "createdAt": "2020-09-09T16:34:36Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class TargetRecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = TargetRecordingOptionsGetHandler.PATH;\n+    private final RecordingOptionsCustomizer customizer;\n+    private final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+\n+    @Inject\n+    TargetRecordingOptionsPatchHandler(\n+            AuthManager auth,\n+            RecordingOptionsCustomizer customizer,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.customizer = customizer;\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> updatedMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            MultiMap attrs = ctx.request().formAttributes();\n+                            Arrays.asList(\"toDisk\", \"maxAge\", \"maxSize\")\n+                                    .forEach(\n+                                            key -> {\n+                                                if (attrs.contains(key)) {\n+                                                    OptionKey.fromOptionName(key)\n+                                                            .ifPresent(\n+                                                                    optionKey ->\n+                                                                            customizer.set(\n+                                                                                    optionKey,\n+                                                                                    attrs.get(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d891efe3e7752e58d050b275b894f030874a82"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1NzE4Mw==", "bodyText": "Here's the backend log snippet from the invalid request above:\n[WARN] java.lang.NumberFormatException: For input string: \"no\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.parseLong(Long.java:817)\n\tat com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer$OptionKey$1.acceptThrows(RecordingOptionsCustomizer.java:88)\n\tat com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer$OptionKey$1.acceptThrows(RecordingOptionsCustomizer.java:85)\n\tat com.redhat.rhjmc.containerjfr.core.util.CheckedConsumer.accept(CheckedConsumer.java:49)\n\tat com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.lambda$apply$0(RecordingOptionsCustomizer.java:67)\n\tat java.base/java.util.HashMap$Values.forEach(HashMap.java:976)\n\tat com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.apply(RecordingOptionsCustomizer.java:67)\n\tat com.redhat.rhjmc.containerjfr.commands.internal.CommandsInternalModule.lambda$provideRecordingOptionsBuilderFactory$0(CommandsInternalModule.java:172)\n\tat com.redhat.rhjmc.containerjfr.net.web.handlers.TargetRecordingOptionsPatchHandler.lambda$handleAuthenticated$2(TargetRecordingOptionsPatchHandler.java:117)\n\tat com.redhat.rhjmc.containerjfr.net.TargetConnectionManager.executeConnectedTask(TargetConnectionManager.java:86)\n\tat com.redhat.rhjmc.containerjfr.net.web.handlers.TargetRecordingOptionsPatchHandler.handleAuthenticated(TargetRecordingOptionsPatchHandler.java:98)\n\tat com.redhat.rhjmc.containerjfr.net.web.handlers.AbstractAuthenticatedRequestHandler.handle(AbstractAuthenticatedRequestHandler.java:82)\n\tat com.redhat.rhjmc.containerjfr.net.web.handlers.AbstractAuthenticatedRequestHandler.handle(AbstractAuthenticatedRequestHandler.java:61)\n\tat io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1034)\n\tat io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:131)\n\tat io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:133)\n\tat io.vertx.ext.web.handler.impl.BodyHandlerImpl$BHandler.doEnd(BodyHandlerImpl.java:296)\n\tat io.vertx.ext.web.handler.impl.BodyHandlerImpl$BHandler.end(BodyHandlerImpl.java:276)\n\tat io.vertx.ext.web.handler.impl.BodyHandlerImpl.lambda$handle$0(BodyHandlerImpl.java:87)\n\tat io.vertx.core.http.impl.HttpServerRequestImpl.onEnd(HttpServerRequestImpl.java:521)\n\tat io.vertx.core.http.impl.HttpServerRequestImpl.handleEnd(HttpServerRequestImpl.java:507)\n\tat io.vertx.core.http.impl.Http1xServerConnection.handleEnd(Http1xServerConnection.java:176)\n\tat io.vertx.core.http.impl.Http1xServerConnection.handleContent(Http1xServerConnection.java:163)\n\tat io.vertx.core.http.impl.Http1xServerConnection.handleMessage(Http1xServerConnection.java:140)\n\tat io.vertx.core.impl.ContextImpl.executeTask(ContextImpl.java:366)\n\tat io.vertx.core.impl.EventLoopContext.execute(EventLoopContext.java:43)\n\tat io.vertx.core.impl.ContextImpl.executeFromIO(ContextImpl.java:229)\n\tat io.vertx.core.net.impl.VertxHandler.channelRead(VertxHandler.java:173)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\n\tat io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:93)\n\tat io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler.channelRead(WebSocketServerExtensionHandler.java:101)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\n\tat io.netty.handler.codec.MessageToMessageCodec.channelRead(MessageToMessageCodec.java:111)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:271)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\n\tat io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1518)\n\tat io.netty.handler.ssl.SslHandler.decodeJdkCompatible(SslHandler.java:1267)\n\tat io.netty.handler.ssl.SslHandler.decode(SslHandler.java:1314)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:501)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:440)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:834)", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r485757183", "createdAt": "2020-09-09T16:35:21Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class TargetRecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = TargetRecordingOptionsGetHandler.PATH;\n+    private final RecordingOptionsCustomizer customizer;\n+    private final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+\n+    @Inject\n+    TargetRecordingOptionsPatchHandler(\n+            AuthManager auth,\n+            RecordingOptionsCustomizer customizer,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.customizer = customizer;\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> updatedMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            MultiMap attrs = ctx.request().formAttributes();\n+                            Arrays.asList(\"toDisk\", \"maxAge\", \"maxSize\")\n+                                    .forEach(\n+                                            key -> {\n+                                                if (attrs.contains(key)) {\n+                                                    OptionKey.fromOptionName(key)\n+                                                            .ifPresent(\n+                                                                    optionKey ->\n+                                                                            customizer.set(\n+                                                                                    optionKey,\n+                                                                                    attrs.get(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1NjU2NQ=="}, "originalCommit": {"oid": "11d891efe3e7752e58d050b275b894f030874a82"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2Nzk3NQ==", "bodyText": "Should none of the options be set if any of them are invalid?", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r485767975", "createdAt": "2020-09-09T16:48:09Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class TargetRecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = TargetRecordingOptionsGetHandler.PATH;\n+    private final RecordingOptionsCustomizer customizer;\n+    private final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+\n+    @Inject\n+    TargetRecordingOptionsPatchHandler(\n+            AuthManager auth,\n+            RecordingOptionsCustomizer customizer,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.customizer = customizer;\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> updatedMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            MultiMap attrs = ctx.request().formAttributes();\n+                            Arrays.asList(\"toDisk\", \"maxAge\", \"maxSize\")\n+                                    .forEach(\n+                                            key -> {\n+                                                if (attrs.contains(key)) {\n+                                                    OptionKey.fromOptionName(key)\n+                                                            .ifPresent(\n+                                                                    optionKey ->\n+                                                                            customizer.set(\n+                                                                                    optionKey,\n+                                                                                    attrs.get(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1NjU2NQ=="}, "originalCommit": {"oid": "11d891efe3e7752e58d050b275b894f030874a82"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2OTk3OA==", "bodyText": "Yea, that's probably best. Otherwise it will be difficult to communicate to a client that their request has been only partially accepted.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r485769978", "createdAt": "2020-09-09T16:50:38Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class TargetRecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = TargetRecordingOptionsGetHandler.PATH;\n+    private final RecordingOptionsCustomizer customizer;\n+    private final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+\n+    @Inject\n+    TargetRecordingOptionsPatchHandler(\n+            AuthManager auth,\n+            RecordingOptionsCustomizer customizer,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.customizer = customizer;\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> updatedMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            MultiMap attrs = ctx.request().formAttributes();\n+                            Arrays.asList(\"toDisk\", \"maxAge\", \"maxSize\")\n+                                    .forEach(\n+                                            key -> {\n+                                                if (attrs.contains(key)) {\n+                                                    OptionKey.fromOptionName(key)\n+                                                            .ifPresent(\n+                                                                    optionKey ->\n+                                                                            customizer.set(\n+                                                                                    optionKey,\n+                                                                                    attrs.get(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1NjU2NQ=="}, "originalCommit": {"oid": "11d891efe3e7752e58d050b275b894f030874a82"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3MDM0Nw==", "bodyText": "Ok!", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r485770347", "createdAt": "2020-09-09T16:51:03Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class TargetRecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = TargetRecordingOptionsGetHandler.PATH;\n+    private final RecordingOptionsCustomizer customizer;\n+    private final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+\n+    @Inject\n+    TargetRecordingOptionsPatchHandler(\n+            AuthManager auth,\n+            RecordingOptionsCustomizer customizer,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.customizer = customizer;\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> updatedMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            MultiMap attrs = ctx.request().formAttributes();\n+                            Arrays.asList(\"toDisk\", \"maxAge\", \"maxSize\")\n+                                    .forEach(\n+                                            key -> {\n+                                                if (attrs.contains(key)) {\n+                                                    OptionKey.fromOptionName(key)\n+                                                            .ifPresent(\n+                                                                    optionKey ->\n+                                                                            customizer.set(\n+                                                                                    optionKey,\n+                                                                                    attrs.get(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1NjU2NQ=="}, "originalCommit": {"oid": "11d891efe3e7752e58d050b275b894f030874a82"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MTM2Ng==", "bodyText": "My solution was very unelegant, if you can think of a more compact way I can redo it!", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r485851366", "createdAt": "2020-09-09T19:12:38Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+\n+class TargetRecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = TargetRecordingOptionsGetHandler.PATH;\n+    private final RecordingOptionsCustomizer customizer;\n+    private final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+\n+    @Inject\n+    TargetRecordingOptionsPatchHandler(\n+            AuthManager auth,\n+            RecordingOptionsCustomizer customizer,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.customizer = customizer;\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        Map<String, String> updatedMap =\n+                connectionManager.executeConnectedTask(\n+                        getConnectionDescriptorFromContext(ctx),\n+                        connection -> {\n+                            MultiMap attrs = ctx.request().formAttributes();\n+                            Arrays.asList(\"toDisk\", \"maxAge\", \"maxSize\")\n+                                    .forEach(\n+                                            key -> {\n+                                                if (attrs.contains(key)) {\n+                                                    OptionKey.fromOptionName(key)\n+                                                            .ifPresent(\n+                                                                    optionKey ->\n+                                                                            customizer.set(\n+                                                                                    optionKey,\n+                                                                                    attrs.get(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1NjU2NQ=="}, "originalCommit": {"oid": "11d891efe3e7752e58d050b275b894f030874a82"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTAzNzEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandler.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTozNDozMFrOHPW2NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo1MToyNFrOHP6pZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2NTAxMw==", "bodyText": "This doesn't quite work as intended - parseBoolean is true if the input string is \"true\", case insensitive, and false for all other inputs. It doesn't throw.\nOn a related note, it would be good to exercise these validations with unit tests.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r485865013", "createdAt": "2020-09-09T19:34:30Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class TargetRecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = TargetRecordingOptionsGetHandler.PATH;\n+    private final RecordingOptionsCustomizer customizer;\n+    private final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+\n+    @Inject\n+    TargetRecordingOptionsPatchHandler(\n+            AuthManager auth,\n+            RecordingOptionsCustomizer customizer,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.customizer = customizer;\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        MultiMap attrs = ctx.request().formAttributes();\n+        if (attrs.contains(\"toDisk\")) {\n+            try {\n+                Boolean.parseBoolean(attrs.get(\"toDisk\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f08571acdc719401cb79d6ca74ae6772fb9a5d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxMDg0Mw==", "bodyText": "I just realized that the POST handler should probably also do validation right?", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r485910843", "createdAt": "2020-09-09T20:44:21Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class TargetRecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = TargetRecordingOptionsGetHandler.PATH;\n+    private final RecordingOptionsCustomizer customizer;\n+    private final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+\n+    @Inject\n+    TargetRecordingOptionsPatchHandler(\n+            AuthManager auth,\n+            RecordingOptionsCustomizer customizer,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.customizer = customizer;\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        MultiMap attrs = ctx.request().formAttributes();\n+        if (attrs.contains(\"toDisk\")) {\n+            try {\n+                Boolean.parseBoolean(attrs.get(\"toDisk\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2NTAxMw=="}, "originalCommit": {"oid": "b8f08571acdc719401cb79d6ca74ae6772fb9a5d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0NzYwMA==", "bodyText": "Yes, it probably should", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r485947600", "createdAt": "2020-09-09T22:04:21Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class TargetRecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = TargetRecordingOptionsGetHandler.PATH;\n+    private final RecordingOptionsCustomizer customizer;\n+    private final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+\n+    @Inject\n+    TargetRecordingOptionsPatchHandler(\n+            AuthManager auth,\n+            RecordingOptionsCustomizer customizer,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.customizer = customizer;\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        MultiMap attrs = ctx.request().formAttributes();\n+        if (attrs.contains(\"toDisk\")) {\n+            try {\n+                Boolean.parseBoolean(attrs.get(\"toDisk\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2NTAxMw=="}, "originalCommit": {"oid": "b8f08571acdc719401cb79d6ca74ae6772fb9a5d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyMTgwNA==", "bodyText": "Ok, there are now tests for the validations I added. I also added validation for the boolean value in TargetRecordingPostHandler, I throw a NumberFormatException when the boolean can't be parsed to handle it together with the other exceptions, but I realize this is probably not the best way, Im just not sure what exception I should use.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r486421804", "createdAt": "2020-09-10T15:10:47Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class TargetRecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = TargetRecordingOptionsGetHandler.PATH;\n+    private final RecordingOptionsCustomizer customizer;\n+    private final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+\n+    @Inject\n+    TargetRecordingOptionsPatchHandler(\n+            AuthManager auth,\n+            RecordingOptionsCustomizer customizer,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.customizer = customizer;\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        MultiMap attrs = ctx.request().formAttributes();\n+        if (attrs.contains(\"toDisk\")) {\n+            try {\n+                Boolean.parseBoolean(attrs.get(\"toDisk\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2NTAxMw=="}, "originalCommit": {"oid": "b8f08571acdc719401cb79d6ca74ae6772fb9a5d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1MTU1OA==", "bodyText": "I agree that NumberFormatException seems like not quite the right fit here, although I don't think it's too important anyway - in any case, this will be an uncaught exception that is then later on caught by the AbstractAuthenticatedRequestHandler and turned into a response with status 500, so all the exception type (and message) does is become part of the response status message. That will probably be displayed to end users in the end, but clients (as in, the web-client, operator, etc. - other automated clients) should only really care about the status code.\nMaybe just IllegalArgumentException is fine, unless you want to create a custom one like BooleanValueException or BooleanFormatException. That would be nice, but it's probably overkill here.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r486451558", "createdAt": "2020-09-10T15:51:24Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class TargetRecordingOptionsPatchHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = TargetRecordingOptionsGetHandler.PATH;\n+    private final RecordingOptionsCustomizer customizer;\n+    private final TargetConnectionManager connectionManager;\n+    private final RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    private final Gson gson;\n+\n+    @Inject\n+    TargetRecordingOptionsPatchHandler(\n+            AuthManager auth,\n+            RecordingOptionsCustomizer customizer,\n+            TargetConnectionManager connectionManager,\n+            RecordingOptionsBuilderFactory recordingOptionsBuilderFactory,\n+            Gson gson) {\n+        super(auth);\n+        this.customizer = customizer;\n+        this.connectionManager = connectionManager;\n+        this.recordingOptionsBuilderFactory = recordingOptionsBuilderFactory;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.PATCH;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return PATH;\n+    }\n+\n+    @Override\n+    void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        MultiMap attrs = ctx.request().formAttributes();\n+        if (attrs.contains(\"toDisk\")) {\n+            try {\n+                Boolean.parseBoolean(attrs.get(\"toDisk\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2NTAxMw=="}, "originalCommit": {"oid": "b8f08571acdc719401cb79d6ca74ae6772fb9a5d"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjgxMTgxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo1NTo1OFrOHP61pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo0MzoxNFrOHP-8KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1NDY5Mg==", "bodyText": "I'd like to see a few more cases covered here - toDisk: '', maxAge: '', toDisk: null, toDisk: T, maxAge: 0.5, maxAge: 1e3 for example. And since both this handler and the TargetRecordingsPostHandler share similar validation implementations, that handler should also have tests similar to this one.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r486454692", "createdAt": "2020-09-10T15:55:58Z", "author": {"login": "andrewazores"}, "path": "src/test/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandlerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.core.net.JFRConnection;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.ConnectionDescriptor;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager.ConnectedTask;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+@ExtendWith(MockitoExtension.class)\n+class TargetRecordingOptionsPatchHandlerTest {\n+\n+    TargetRecordingOptionsPatchHandler handler;\n+    @Mock AuthManager auth;\n+    @Mock RecordingOptionsCustomizer customizer;\n+    @Mock TargetConnectionManager connectionManager;\n+    @Mock RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    @Mock RecordingOptionsBuilder builder;\n+    @Mock IConstrainedMap<String> recordingOptions;\n+    @Mock JFRConnection jfrConnection;\n+    @Mock Gson gson;\n+\n+    @BeforeEach\n+    void setup() {\n+        this.handler =\n+                new TargetRecordingOptionsPatchHandler(\n+                        auth, customizer, connectionManager, recordingOptionsBuilderFactory, gson);\n+    }\n+\n+    @Test\n+    void shouldHandleGETRequest() {\n+        MatcherAssert.assertThat(handler.httpMethod(), Matchers.equalTo(HttpMethod.PATCH));\n+    }\n+\n+    @Test\n+    void shouldHandleCorrectPath() {\n+        MatcherAssert.assertThat(\n+                handler.path(), Matchers.equalTo(\"/api/v1/targets/:targetId/recordingOptions\"));\n+    }\n+\n+    @Test\n+    void shouldSetRecordingOptions() throws Exception {\n+        Map<String, String> defaultValues =\n+                Map.of(\"toDisk\", \"true\", \"maxAge\", \"50\", \"maxSize\", \"32\");\n+        Mockito.when(recordingOptionsBuilderFactory.create(Mockito.any())).thenReturn(builder);\n+        Mockito.when(builder.build()).thenReturn(recordingOptions);\n+        Mockito.when(recordingOptions.get(\"toDisk\")).thenReturn(defaultValues.get(\"toDisk\"));\n+        Mockito.when(recordingOptions.get(\"maxAge\")).thenReturn(defaultValues.get(\"maxAge\"));\n+        Mockito.when(recordingOptions.get(\"maxSize\")).thenReturn(defaultValues.get(\"maxSize\"));\n+\n+        MultiMap requestAttrs = MultiMap.caseInsensitiveMultiMap();\n+        requestAttrs.addAll(defaultValues);\n+\n+        Mockito.when(\n+                        connectionManager.executeConnectedTask(\n+                                Mockito.any(ConnectionDescriptor.class), Mockito.any()))\n+                .thenAnswer(\n+                        new Answer<>() {\n+                            @Override\n+                            public Map answer(InvocationOnMock args) throws Throwable {\n+                                ConnectedTask ct = (ConnectedTask) args.getArguments()[1];\n+                                return (Map) ct.execute(jfrConnection);\n+                            }\n+                        });\n+\n+        RoutingContext ctx = Mockito.mock(RoutingContext.class);\n+        Mockito.when(ctx.pathParam(\"targetId\")).thenReturn(\"foo:9091\");\n+        HttpServerRequest req = Mockito.mock(HttpServerRequest.class);\n+        Mockito.when(ctx.request()).thenReturn(req);\n+        Mockito.when(req.headers()).thenReturn(MultiMap.caseInsensitiveMultiMap());\n+        Mockito.when(req.formAttributes()).thenReturn(requestAttrs);\n+        HttpServerResponse resp = Mockito.mock(HttpServerResponse.class);\n+        Mockito.when(ctx.response()).thenReturn(resp);\n+        IFlightRecorderService service = Mockito.mock(IFlightRecorderService.class);\n+        Mockito.when(jfrConnection.getService()).thenReturn(service);\n+\n+        handler.handleAuthenticated(ctx);\n+\n+        for (var entry : requestAttrs.entries()) {\n+            var key = OptionKey.fromOptionName(entry.getKey());\n+            Mockito.verify(customizer).set(key.get(), entry.getValue());\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getRequestMaps\")\n+    void shouldThrowInvalidOptionException(Map<String, String> defaultValues) throws Exception {\n+        MultiMap requestAttrs = MultiMap.caseInsensitiveMultiMap();\n+        requestAttrs.addAll(defaultValues);\n+\n+        RoutingContext ctx = Mockito.mock(RoutingContext.class);\n+        HttpServerRequest req = Mockito.mock(HttpServerRequest.class);\n+        Mockito.when(ctx.request()).thenReturn(req);\n+        Mockito.when(req.formAttributes()).thenReturn(requestAttrs);\n+        HttpStatusException ex =\n+                Assertions.assertThrows(\n+                        HttpStatusException.class, () -> handler.handleAuthenticated(ctx));\n+        MatcherAssert.assertThat(ex.getStatusCode(), Matchers.equalTo(400));\n+    }\n+\n+    private static Stream<Map<String, String>> getRequestMaps() {\n+        return Stream.of(\n+                Map.of(\"toDisk\", \"5\"), Map.of(\"maxAge\", \"true\"), Map.of(\"maxSize\", \"false\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e8b05fccb77d20ba37a91105fcd4a407417df94"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyMTg5Ng==", "bodyText": "Ok, there are more cases for both handlers.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r486521896", "createdAt": "2020-09-10T17:43:14Z", "author": {"login": "Alexjsenn"}, "path": "src/test/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingOptionsPatchHandlerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.handlers;\n+\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n+\n+import org.openjdk.jmc.common.unit.IConstrainedMap;\n+import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;\n+import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n+\n+import com.google.gson.Gson;\n+\n+import com.redhat.rhjmc.containerjfr.commands.internal.RecordingOptionsBuilderFactory;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer;\n+import com.redhat.rhjmc.containerjfr.core.RecordingOptionsCustomizer.OptionKey;\n+import com.redhat.rhjmc.containerjfr.core.net.JFRConnection;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.ConnectionDescriptor;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager;\n+import com.redhat.rhjmc.containerjfr.net.TargetConnectionManager.ConnectedTask;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+@ExtendWith(MockitoExtension.class)\n+class TargetRecordingOptionsPatchHandlerTest {\n+\n+    TargetRecordingOptionsPatchHandler handler;\n+    @Mock AuthManager auth;\n+    @Mock RecordingOptionsCustomizer customizer;\n+    @Mock TargetConnectionManager connectionManager;\n+    @Mock RecordingOptionsBuilderFactory recordingOptionsBuilderFactory;\n+    @Mock RecordingOptionsBuilder builder;\n+    @Mock IConstrainedMap<String> recordingOptions;\n+    @Mock JFRConnection jfrConnection;\n+    @Mock Gson gson;\n+\n+    @BeforeEach\n+    void setup() {\n+        this.handler =\n+                new TargetRecordingOptionsPatchHandler(\n+                        auth, customizer, connectionManager, recordingOptionsBuilderFactory, gson);\n+    }\n+\n+    @Test\n+    void shouldHandleGETRequest() {\n+        MatcherAssert.assertThat(handler.httpMethod(), Matchers.equalTo(HttpMethod.PATCH));\n+    }\n+\n+    @Test\n+    void shouldHandleCorrectPath() {\n+        MatcherAssert.assertThat(\n+                handler.path(), Matchers.equalTo(\"/api/v1/targets/:targetId/recordingOptions\"));\n+    }\n+\n+    @Test\n+    void shouldSetRecordingOptions() throws Exception {\n+        Map<String, String> defaultValues =\n+                Map.of(\"toDisk\", \"true\", \"maxAge\", \"50\", \"maxSize\", \"32\");\n+        Mockito.when(recordingOptionsBuilderFactory.create(Mockito.any())).thenReturn(builder);\n+        Mockito.when(builder.build()).thenReturn(recordingOptions);\n+        Mockito.when(recordingOptions.get(\"toDisk\")).thenReturn(defaultValues.get(\"toDisk\"));\n+        Mockito.when(recordingOptions.get(\"maxAge\")).thenReturn(defaultValues.get(\"maxAge\"));\n+        Mockito.when(recordingOptions.get(\"maxSize\")).thenReturn(defaultValues.get(\"maxSize\"));\n+\n+        MultiMap requestAttrs = MultiMap.caseInsensitiveMultiMap();\n+        requestAttrs.addAll(defaultValues);\n+\n+        Mockito.when(\n+                        connectionManager.executeConnectedTask(\n+                                Mockito.any(ConnectionDescriptor.class), Mockito.any()))\n+                .thenAnswer(\n+                        new Answer<>() {\n+                            @Override\n+                            public Map answer(InvocationOnMock args) throws Throwable {\n+                                ConnectedTask ct = (ConnectedTask) args.getArguments()[1];\n+                                return (Map) ct.execute(jfrConnection);\n+                            }\n+                        });\n+\n+        RoutingContext ctx = Mockito.mock(RoutingContext.class);\n+        Mockito.when(ctx.pathParam(\"targetId\")).thenReturn(\"foo:9091\");\n+        HttpServerRequest req = Mockito.mock(HttpServerRequest.class);\n+        Mockito.when(ctx.request()).thenReturn(req);\n+        Mockito.when(req.headers()).thenReturn(MultiMap.caseInsensitiveMultiMap());\n+        Mockito.when(req.formAttributes()).thenReturn(requestAttrs);\n+        HttpServerResponse resp = Mockito.mock(HttpServerResponse.class);\n+        Mockito.when(ctx.response()).thenReturn(resp);\n+        IFlightRecorderService service = Mockito.mock(IFlightRecorderService.class);\n+        Mockito.when(jfrConnection.getService()).thenReturn(service);\n+\n+        handler.handleAuthenticated(ctx);\n+\n+        for (var entry : requestAttrs.entries()) {\n+            var key = OptionKey.fromOptionName(entry.getKey());\n+            Mockito.verify(customizer).set(key.get(), entry.getValue());\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getRequestMaps\")\n+    void shouldThrowInvalidOptionException(Map<String, String> defaultValues) throws Exception {\n+        MultiMap requestAttrs = MultiMap.caseInsensitiveMultiMap();\n+        requestAttrs.addAll(defaultValues);\n+\n+        RoutingContext ctx = Mockito.mock(RoutingContext.class);\n+        HttpServerRequest req = Mockito.mock(HttpServerRequest.class);\n+        Mockito.when(ctx.request()).thenReturn(req);\n+        Mockito.when(req.formAttributes()).thenReturn(requestAttrs);\n+        HttpStatusException ex =\n+                Assertions.assertThrows(\n+                        HttpStatusException.class, () -> handler.handleAuthenticated(ctx));\n+        MatcherAssert.assertThat(ex.getStatusCode(), Matchers.equalTo(400));\n+    }\n+\n+    private static Stream<Map<String, String>> getRequestMaps() {\n+        return Stream.of(\n+                Map.of(\"toDisk\", \"5\"), Map.of(\"maxAge\", \"true\"), Map.of(\"maxSize\", \"false\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1NDY5Mg=="}, "originalCommit": {"oid": "0e8b05fccb77d20ba37a91105fcd4a407417df94"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzQwOTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingsPostHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoyODozMVrOHQAsxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoxMDoyOFrOHQEA1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU1MDcyNA==", "bodyText": "The other handler looks like it directly throws an HttpStatusException, but this one is still a NumberFormatException - they should probably be consistent with each other", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r486550724", "createdAt": "2020-09-10T18:28:31Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingsPostHandler.java", "diffHunk": "@@ -162,6 +162,22 @@ void handleAuthenticated(RoutingContext ctx) throws Exception {\n                                                     TimeUnit.SECONDS.toMillis(\n                                                             Long.parseLong(attrs.get(\"duration\"))));\n                                 }\n+                                if (attrs.contains(\"toDisk\")) {\n+                                    Pattern bool = Pattern.compile(\"true|false\");\n+                                    Matcher m = bool.matcher(attrs.get(\"toDisk\"));\n+                                    if (!m.find())\n+                                        throw new NumberFormatException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98767d8cb0f728017b31e1b9d235ce1607269577"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MjM0Mw==", "bodyText": "I had issues throwing HttpStatusExceptions inside executeConnectedTask, so I changed the PATCH handler to match this one.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r486582343", "createdAt": "2020-09-10T19:25:03Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingsPostHandler.java", "diffHunk": "@@ -162,6 +162,22 @@ void handleAuthenticated(RoutingContext ctx) throws Exception {\n                                                     TimeUnit.SECONDS.toMillis(\n                                                             Long.parseLong(attrs.get(\"duration\"))));\n                                 }\n+                                if (attrs.contains(\"toDisk\")) {\n+                                    Pattern bool = Pattern.compile(\"true|false\");\n+                                    Matcher m = bool.matcher(attrs.get(\"toDisk\"));\n+                                    if (!m.find())\n+                                        throw new NumberFormatException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU1MDcyNA=="}, "originalCommit": {"oid": "98767d8cb0f728017b31e1b9d235ce1607269577"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NDY3MA==", "bodyText": "What kind of issues?\nI still think the NumberFormatException is out of place when parsing a boolean.", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r486584670", "createdAt": "2020-09-10T19:29:34Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingsPostHandler.java", "diffHunk": "@@ -162,6 +162,22 @@ void handleAuthenticated(RoutingContext ctx) throws Exception {\n                                                     TimeUnit.SECONDS.toMillis(\n                                                             Long.parseLong(attrs.get(\"duration\"))));\n                                 }\n+                                if (attrs.contains(\"toDisk\")) {\n+                                    Pattern bool = Pattern.compile(\"true|false\");\n+                                    Matcher m = bool.matcher(attrs.get(\"toDisk\"));\n+                                    if (!m.find())\n+                                        throw new NumberFormatException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU1MDcyNA=="}, "originalCommit": {"oid": "98767d8cb0f728017b31e1b9d235ce1607269577"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNTAxNA==", "bodyText": "Ok, I went back to the old format, and throw a HttpStatusException for the boolean instead of the NumberFormatException", "url": "https://github.com/cryostatio/cryostat/pull/254#discussion_r486605014", "createdAt": "2020-09-10T20:10:28Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/handlers/TargetRecordingsPostHandler.java", "diffHunk": "@@ -162,6 +162,22 @@ void handleAuthenticated(RoutingContext ctx) throws Exception {\n                                                     TimeUnit.SECONDS.toMillis(\n                                                             Long.parseLong(attrs.get(\"duration\"))));\n                                 }\n+                                if (attrs.contains(\"toDisk\")) {\n+                                    Pattern bool = Pattern.compile(\"true|false\");\n+                                    Matcher m = bool.matcher(attrs.get(\"toDisk\"));\n+                                    if (!m.find())\n+                                        throw new NumberFormatException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU1MDcyNA=="}, "originalCommit": {"oid": "98767d8cb0f728017b31e1b9d235ce1607269577"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 871, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}