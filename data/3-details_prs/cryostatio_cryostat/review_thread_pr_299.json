{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0Mzk1Njgy", "number": 299, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTozMToxOFrOEuMJnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDozMjozNlrOExO1oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODY5MDIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTozMToxOFrOHib7qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNToyMjo1MVrOHkUKUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3MTI3NA==", "bodyText": "Maybe this should be more direct about the problem, like A file named \"cert\" was not included in the request?", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r505871274", "createdAt": "2020-10-15T21:31:18Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.spec.*;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    @Inject\n+    CertificatePostHandler(AuthManager auth, Environment env, FileSystem fs, Logger logger) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(400, \"No certificate found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a03e8372d02b33211767d1230a2b8052447e81f2"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1OTM0NA==", "bodyText": "How can it distinguish between the file name and the form entry? because cert is the entry, not the file name right?", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r507759344", "createdAt": "2020-10-19T13:46:42Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.spec.*;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    @Inject\n+    CertificatePostHandler(AuthManager auth, Environment env, FileSystem fs, Logger logger) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(400, \"No certificate found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3MTI3NA=="}, "originalCommit": {"oid": "a03e8372d02b33211767d1230a2b8052447e81f2"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2ODc5OA==", "bodyText": "The file uploads is something like a map of name to file contents, so what I mean here is that the literal string \"cert\" is not a key in the map. That's what cert == null is basically testing here already, right?", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r507768798", "createdAt": "2020-10-19T13:58:20Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.spec.*;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    @Inject\n+    CertificatePostHandler(AuthManager auth, Environment env, FileSystem fs, Logger logger) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(400, \"No certificate found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3MTI3NA=="}, "originalCommit": {"oid": "a03e8372d02b33211767d1230a2b8052447e81f2"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNzU3Nw==", "bodyText": "Yes, exactly, I guess what I thought was confusing was that the key in the map is not the same as the name of the uploaded file, but I guess it makes sense.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r507837577", "createdAt": "2020-10-19T15:18:08Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.spec.*;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    @Inject\n+    CertificatePostHandler(AuthManager auth, Environment env, FileSystem fs, Logger logger) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(400, \"No certificate found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3MTI3NA=="}, "originalCommit": {"oid": "a03e8372d02b33211767d1230a2b8052447e81f2"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzODcwNw==", "bodyText": "No, it's the value in the map that is the name of the file. We should just tell the user which key they missed so that they can correct the response by including it and retrying.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r507838707", "createdAt": "2020-10-19T15:19:39Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.spec.*;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    @Inject\n+    CertificatePostHandler(AuthManager auth, Environment env, FileSystem fs, Logger logger) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(400, \"No certificate found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3MTI3NA=="}, "originalCommit": {"oid": "a03e8372d02b33211767d1230a2b8052447e81f2"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0MTEwNw==", "bodyText": "Yea, makes sense.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r507841107", "createdAt": "2020-10-19T15:22:51Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.spec.*;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    @Inject\n+    CertificatePostHandler(AuthManager auth, Environment env, FileSystem fs, Logger logger) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(400, \"No certificate found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3MTI3NA=="}, "originalCommit": {"oid": "a03e8372d02b33211767d1230a2b8052447e81f2"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODcwNjg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTozNTowMVrOHicGSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTozNTowMVrOHicGSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3Mzk5NA==", "bodyText": "Better to avoid manually constructing paths like this. fs.pathOf takes varargs, so you should just be able to do fs.exists(fs.pathOf(truststoreDir, cert.fileName()))", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r505873994", "createdAt": "2020-10-15T21:35:01Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.spec.*;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    @Inject\n+    CertificatePostHandler(AuthManager auth, Environment env, FileSystem fs, Logger logger) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(400, \"No certificate found\");\n+        }\n+\n+        String certPath = fs.pathOf(cert.uploadedFileName()).normalize().toString();\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        String filePath = truststoreDir + \"/\" + cert.fileName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a03e8372d02b33211767d1230a2b8052447e81f2"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODcyNTgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTozOToxOFrOHicStg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTozOToxOFrOHicStg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3NzE3NA==", "bodyText": "This looks like it can/should be refactored to use try-with-resources:\ntry (DataInputStream dis = new DataInputStream(new FileInputStream(certPath))) {\n// do stuff\n}\n\nThis is assuming that these resources are autocloseable, but I would expect they are. Generally anything that is autocloseable should be wrapped in a try-with-resources, since it guarantees that the resource is properly closed, even if an exception is thrown or there is an early return statement or any other exit condition. Probably all of the various Streams in here should be wrapped in this way.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r505877174", "createdAt": "2020-10-15T21:39:18Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.spec.*;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    @Inject\n+    CertificatePostHandler(AuthManager auth, Environment env, FileSystem fs, Logger logger) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(400, \"No certificate found\");\n+        }\n+\n+        String certPath = fs.pathOf(cert.uploadedFileName()).normalize().toString();\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        String filePath = truststoreDir + \"/\" + cert.fileName();\n+        if (fs.exists(fs.pathOf(filePath))) {\n+            throw new HttpStatusException(409, \"Certificate already exists\");\n+        }\n+\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a03e8372d02b33211767d1230a2b8052447e81f2"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODczMjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo0MDo1MVrOHicWzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo0MDo1MVrOHicWzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3ODIyMQ==", "bodyText": "May as well include the name of the conflicting certificate here, just for ease of debugging if this is showing up in ex. Operator logs or something.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r505878221", "createdAt": "2020-10-15T21:40:51Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.spec.*;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    @Inject\n+    CertificatePostHandler(AuthManager auth, Environment env, FileSystem fs, Logger logger) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(400, \"No certificate found\");\n+        }\n+\n+        String certPath = fs.pathOf(cert.uploadedFileName()).normalize().toString();\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        String filePath = truststoreDir + \"/\" + cert.fileName();\n+        if (fs.exists(fs.pathOf(filePath))) {\n+            throw new HttpStatusException(409, \"Certificate already exists\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a03e8372d02b33211767d1230a2b8052447e81f2"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTA5NDk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNToyNzozMFrOHkUX8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNToyNzozMFrOHkUX8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NDU5NQ==", "bodyText": "I think ByteArrayInputStream must also be closed, and is AutoCloseable.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r507844595", "createdAt": "2020-10-19T15:27:30Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.spec.*;\n+\n+import javax.inject.Inject;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    @Inject\n+    CertificatePostHandler(AuthManager auth, Environment env, FileSystem fs, Logger logger) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(400, \"A file named \\\"cert\\\" was not included in the request\");\n+        }\n+\n+        String certPath = fs.pathOf(cert.uploadedFileName()).normalize().toString();\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        String filePath = fs.pathOf(truststoreDir, cert.fileName()).normalize().toString();\n+        if (fs.exists(fs.pathOf(filePath))) {\n+            throw new HttpStatusException(409, filePath + \" Certificate already exists\");\n+        }\n+\n+        File certFile = new File(filePath);\n+\n+        try (FileInputStream fis = new FileInputStream(certPath);\n+                DataInputStream dis = new DataInputStream(fis);\n+                FileOutputStream out = new FileOutputStream(certFile)) {\n+            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+\n+            byte[] bytes = new byte[dis.available()];\n+            dis.readFully(bytes);\n+\n+            ByteArrayInputStream bytestream = new ByteArrayInputStream(bytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16df3bb3d6b19bb305fcf980f33829dcc2318de1"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjMzMzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/security/CertificateValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTo0Njo1MVrOHmA6mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTo0Njo1MVrOHmA6mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyMjkzNw==", "bodyText": "verify doesn't seem like the right name given the argument types and return type, even though it does reflect what the caller is currently using the method for. certificateFromBytes or something might be a more accurate/descriptive name, or even just createCertificate or parseCertificate.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r509622937", "createdAt": "2020-10-21T19:46:51Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/security/CertificateValidator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.security;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+\n+public class CertificateValidator {\n+\n+    public Certificate verify(ByteArrayInputStream byteStream) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc75015f9d01666a2c53e81bb3057ef39fe906e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjM0MDU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTo0ODo0OFrOHmA_lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTo0ODo0OFrOHmA_lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyNDIxMw==", "bodyText": "I think filePath can be left as type Path here, removing the .toString()...", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r509624213", "createdAt": "2020-10-21T19:48:48Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.security.cert.Certificate;\n+import java.util.function.Function;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.security.CertificateValidator;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    private Function<File, FileOutputStream> outputStreamFunction;\n+    private CertificateValidator certValidator;\n+\n+    @Inject\n+    CertificatePostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            FileSystem fs,\n+            Logger logger,\n+            @Named(\"OutputStreamFunction\") Function<File, FileOutputStream> outputStreamFunction,\n+            CertificateValidator certValidator) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+        this.outputStreamFunction = outputStreamFunction;\n+        this.certValidator = certValidator;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(\n+                    400, \"A file named \\\"cert\\\" was not included in the request\");\n+        }\n+\n+        Path certPath = fs.pathOf(cert.uploadedFileName());\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        String filePath = fs.pathOf(truststoreDir, cert.fileName()).normalize().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc75015f9d01666a2c53e81bb3057ef39fe906e"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjM0MTgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTo0OToxMlrOHmBAVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTo0OToxMlrOHmBAVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyNDQwNg==", "bodyText": "... which would remove the need for the repeated fs.pathOf here...", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r509624406", "createdAt": "2020-10-21T19:49:12Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.security.cert.Certificate;\n+import java.util.function.Function;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.security.CertificateValidator;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    private Function<File, FileOutputStream> outputStreamFunction;\n+    private CertificateValidator certValidator;\n+\n+    @Inject\n+    CertificatePostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            FileSystem fs,\n+            Logger logger,\n+            @Named(\"OutputStreamFunction\") Function<File, FileOutputStream> outputStreamFunction,\n+            CertificateValidator certValidator) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+        this.outputStreamFunction = outputStreamFunction;\n+        this.certValidator = certValidator;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(\n+                    400, \"A file named \\\"cert\\\" was not included in the request\");\n+        }\n+\n+        Path certPath = fs.pathOf(cert.uploadedFileName());\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        String filePath = fs.pathOf(truststoreDir, cert.fileName()).normalize().toString();\n+\n+        if (fs.exists(fs.pathOf(filePath))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc75015f9d01666a2c53e81bb3057ef39fe906e"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjM0MzYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTo0OTo0NFrOHmBBkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTo0OTo0NFrOHmBBkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyNDcyMg==", "bodyText": "... and here, filePath.toFile() would achieve the same thing if you really need it as a File.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r509624722", "createdAt": "2020-10-21T19:49:44Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.security.cert.Certificate;\n+import java.util.function.Function;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.security.CertificateValidator;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    private Function<File, FileOutputStream> outputStreamFunction;\n+    private CertificateValidator certValidator;\n+\n+    @Inject\n+    CertificatePostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            FileSystem fs,\n+            Logger logger,\n+            @Named(\"OutputStreamFunction\") Function<File, FileOutputStream> outputStreamFunction,\n+            CertificateValidator certValidator) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+        this.outputStreamFunction = outputStreamFunction;\n+        this.certValidator = certValidator;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(\n+                    400, \"A file named \\\"cert\\\" was not included in the request\");\n+        }\n+\n+        Path certPath = fs.pathOf(cert.uploadedFileName());\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        String filePath = fs.pathOf(truststoreDir, cert.fileName()).normalize().toString();\n+\n+        if (fs.exists(fs.pathOf(filePath))) {\n+            throw new HttpStatusException(409, filePath + \" Certificate already exists\");\n+        }\n+\n+        File certFile = new File(filePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc75015f9d01666a2c53e81bb3057ef39fe906e"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjM2OTQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTo1Mzo1NVrOHmBTmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDoxNjoyMVrOHmC9Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyOTMzNw==", "bodyText": "This catch clause should probably be removed - the parent AbstractAuthenticatedRequestHandler class already has handling for exceptions thrown by subclasses, including general Exceptions which get wrapped into 500s similar to what has been repeated here. IMO it would be better to allow the abstract parent class to handle this so that the behaviour across all concrete implementations is uniform.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r509629337", "createdAt": "2020-10-21T19:53:55Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.security.cert.Certificate;\n+import java.util.function.Function;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.security.CertificateValidator;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    private Function<File, FileOutputStream> outputStreamFunction;\n+    private CertificateValidator certValidator;\n+\n+    @Inject\n+    CertificatePostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            FileSystem fs,\n+            Logger logger,\n+            @Named(\"OutputStreamFunction\") Function<File, FileOutputStream> outputStreamFunction,\n+            CertificateValidator certValidator) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+        this.outputStreamFunction = outputStreamFunction;\n+        this.certValidator = certValidator;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(\n+                    400, \"A file named \\\"cert\\\" was not included in the request\");\n+        }\n+\n+        Path certPath = fs.pathOf(cert.uploadedFileName());\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        String filePath = fs.pathOf(truststoreDir, cert.fileName()).normalize().toString();\n+\n+        if (fs.exists(fs.pathOf(filePath))) {\n+            throw new HttpStatusException(409, filePath + \" Certificate already exists\");\n+        }\n+\n+        File certFile = new File(filePath);\n+\n+        try (InputStream fis = fs.newInputStream(certPath);\n+                DataInputStream dis = new DataInputStream(fis);\n+                FileOutputStream out = outputStreamFunction.apply(certFile)) {\n+\n+            byte[] bytes = new byte[dis.available()];\n+            dis.readFully(bytes);\n+            ByteArrayInputStream bytestream = new ByteArrayInputStream(bytes);\n+            Certificate certificate = certValidator.verify(bytestream);\n+            byte[] buf = certificate.getEncoded();\n+\n+            out.write(buf);\n+        } catch (Exception e) {\n+            throw new HttpStatusException(500, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc75015f9d01666a2c53e81bb3057ef39fe906e"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY1NjM0Mw==", "bodyText": "Yes, that is definitely better!", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r509656343", "createdAt": "2020-10-21T20:16:21Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.security.cert.Certificate;\n+import java.util.function.Function;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.security.CertificateValidator;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    private Function<File, FileOutputStream> outputStreamFunction;\n+    private CertificateValidator certValidator;\n+\n+    @Inject\n+    CertificatePostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            FileSystem fs,\n+            Logger logger,\n+            @Named(\"OutputStreamFunction\") Function<File, FileOutputStream> outputStreamFunction,\n+            CertificateValidator certValidator) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+        this.outputStreamFunction = outputStreamFunction;\n+        this.certValidator = certValidator;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(\n+                    400, \"A file named \\\"cert\\\" was not included in the request\");\n+        }\n+\n+        Path certPath = fs.pathOf(cert.uploadedFileName());\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        String filePath = fs.pathOf(truststoreDir, cert.fileName()).normalize().toString();\n+\n+        if (fs.exists(fs.pathOf(filePath))) {\n+            throw new HttpStatusException(409, filePath + \" Certificate already exists\");\n+        }\n+\n+        File certFile = new File(filePath);\n+\n+        try (InputStream fis = fs.newInputStream(certPath);\n+                DataInputStream dis = new DataInputStream(fis);\n+                FileOutputStream out = outputStreamFunction.apply(certFile)) {\n+\n+            byte[] bytes = new byte[dis.available()];\n+            dis.readFully(bytes);\n+            ByteArrayInputStream bytestream = new ByteArrayInputStream(bytes);\n+            Certificate certificate = certValidator.verify(bytestream);\n+            byte[] buf = certificate.getEncoded();\n+\n+            out.write(buf);\n+        } catch (Exception e) {\n+            throw new HttpStatusException(500, e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyOTMzNw=="}, "originalCommit": {"oid": "edc75015f9d01666a2c53e81bb3057ef39fe906e"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjI5NDI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNToyNzo0MlrOHmndfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0MTowMVrOHmoEjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1NDQ2Mw==", "bodyText": "buf seems unnecessary - if parseCertificate is just being used to validate that bytestream represents a well-formed certificate, can't we do out.write(bytestream) and avoid potentially re-encoding the Certificate back into a byte array, since we already have the byte array that encoded it to begin with?", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r510254463", "createdAt": "2020-10-22T15:27:42Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.security.cert.Certificate;\n+import java.util.function.Function;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.security.CertificateValidator;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    private Function<File, FileOutputStream> outputStreamFunction;\n+    private CertificateValidator certValidator;\n+\n+    @Inject\n+    CertificatePostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            FileSystem fs,\n+            Logger logger,\n+            @Named(\"OutputStreamFunction\") Function<File, FileOutputStream> outputStreamFunction,\n+            CertificateValidator certValidator) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+        this.outputStreamFunction = outputStreamFunction;\n+        this.certValidator = certValidator;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(\n+                    400, \"A file named \\\"cert\\\" was not included in the request\");\n+        }\n+\n+        Path certPath = fs.pathOf(cert.uploadedFileName());\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        Path filePath = fs.pathOf(truststoreDir, cert.fileName()).normalize();\n+\n+        if (fs.exists(filePath)) {\n+            throw new HttpStatusException(409, filePath.toString() + \" Certificate already exists\");\n+        }\n+\n+        try (InputStream fis = fs.newInputStream(certPath);\n+                DataInputStream dis = new DataInputStream(fis);\n+                FileOutputStream out = outputStreamFunction.apply(filePath.toFile())) {\n+\n+            byte[] bytes = new byte[dis.available()];\n+            dis.readFully(bytes);\n+            ByteArrayInputStream bytestream = new ByteArrayInputStream(bytes);\n+            Certificate certificate = certValidator.parseCertificate(bytestream);\n+            byte[] buf = certificate.getEncoded();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c32f319801869263927398dca550de1510e98f0e"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2MzA4Mg==", "bodyText": "Is it possible that the bytestream contain other information that is not part of the certificate but parsing the certificate still works? Or would it fail in that case?", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r510263082", "createdAt": "2020-10-22T15:39:10Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.security.cert.Certificate;\n+import java.util.function.Function;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.security.CertificateValidator;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    private Function<File, FileOutputStream> outputStreamFunction;\n+    private CertificateValidator certValidator;\n+\n+    @Inject\n+    CertificatePostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            FileSystem fs,\n+            Logger logger,\n+            @Named(\"OutputStreamFunction\") Function<File, FileOutputStream> outputStreamFunction,\n+            CertificateValidator certValidator) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+        this.outputStreamFunction = outputStreamFunction;\n+        this.certValidator = certValidator;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(\n+                    400, \"A file named \\\"cert\\\" was not included in the request\");\n+        }\n+\n+        Path certPath = fs.pathOf(cert.uploadedFileName());\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        Path filePath = fs.pathOf(truststoreDir, cert.fileName()).normalize();\n+\n+        if (fs.exists(filePath)) {\n+            throw new HttpStatusException(409, filePath.toString() + \" Certificate already exists\");\n+        }\n+\n+        try (InputStream fis = fs.newInputStream(certPath);\n+                DataInputStream dis = new DataInputStream(fis);\n+                FileOutputStream out = outputStreamFunction.apply(filePath.toFile())) {\n+\n+            byte[] bytes = new byte[dis.available()];\n+            dis.readFully(bytes);\n+            ByteArrayInputStream bytestream = new ByteArrayInputStream(bytes);\n+            Certificate certificate = certValidator.parseCertificate(bytestream);\n+            byte[] buf = certificate.getEncoded();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1NDQ2Mw=="}, "originalCommit": {"oid": "c32f319801869263927398dca550de1510e98f0e"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NDQ2Mg==", "bodyText": "I don't think so - if there were some additional garbage bytes then I should hope that parsing the buffer as a certificate should fail.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r510264462", "createdAt": "2020-10-22T15:41:01Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.security.cert.Certificate;\n+import java.util.function.Function;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.security.CertificateValidator;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    private Function<File, FileOutputStream> outputStreamFunction;\n+    private CertificateValidator certValidator;\n+\n+    @Inject\n+    CertificatePostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            FileSystem fs,\n+            Logger logger,\n+            @Named(\"OutputStreamFunction\") Function<File, FileOutputStream> outputStreamFunction,\n+            CertificateValidator certValidator) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+        this.outputStreamFunction = outputStreamFunction;\n+        this.certValidator = certValidator;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(\n+                    400, \"A file named \\\"cert\\\" was not included in the request\");\n+        }\n+\n+        Path certPath = fs.pathOf(cert.uploadedFileName());\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        Path filePath = fs.pathOf(truststoreDir, cert.fileName()).normalize();\n+\n+        if (fs.exists(filePath)) {\n+            throw new HttpStatusException(409, filePath.toString() + \" Certificate already exists\");\n+        }\n+\n+        try (InputStream fis = fs.newInputStream(certPath);\n+                DataInputStream dis = new DataInputStream(fis);\n+                FileOutputStream out = outputStreamFunction.apply(filePath.toFile())) {\n+\n+            byte[] bytes = new byte[dis.available()];\n+            dis.readFully(bytes);\n+            ByteArrayInputStream bytestream = new ByteArrayInputStream(bytes);\n+            Certificate certificate = certValidator.parseCertificate(bytestream);\n+            byte[] buf = certificate.getEncoded();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1NDQ2Mw=="}, "originalCommit": {"oid": "c32f319801869263927398dca550de1510e98f0e"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjM0NzY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozOToyN1rOHmn_-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToyNzoyOFrOHmwmng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2MzI5MA==", "bodyText": "Are you sure dis.available() tells you the total size of the certificate data in all scenarios? Not all streams implement available() in this way - it's more common that this method reports the number of bytes that can be read without blocking on the next invocation of read(). If this is the case, then for larger certificates (or various other conditions perhaps to do with the underlying OS/kernel, filesystem, etc.), this byte buffer may end up undersized and only some initial chunk of the certificate will be read into the buffer, rather than the whole thing.\nWhy is the ByteArrayInputStream wrapping around this buffer needed to begin with? Can't fis or dis be passed directly to parseCertificate? The docs for generateCertificate say it accepts a generic InputStream, not specifically a ByteArrayInputStream.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r510263290", "createdAt": "2020-10-22T15:39:27Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.security.cert.Certificate;\n+import java.util.function.Function;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.security.CertificateValidator;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    private Function<File, FileOutputStream> outputStreamFunction;\n+    private CertificateValidator certValidator;\n+\n+    @Inject\n+    CertificatePostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            FileSystem fs,\n+            Logger logger,\n+            @Named(\"OutputStreamFunction\") Function<File, FileOutputStream> outputStreamFunction,\n+            CertificateValidator certValidator) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+        this.outputStreamFunction = outputStreamFunction;\n+        this.certValidator = certValidator;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(\n+                    400, \"A file named \\\"cert\\\" was not included in the request\");\n+        }\n+\n+        Path certPath = fs.pathOf(cert.uploadedFileName());\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        Path filePath = fs.pathOf(truststoreDir, cert.fileName()).normalize();\n+\n+        if (fs.exists(filePath)) {\n+            throw new HttpStatusException(409, filePath.toString() + \" Certificate already exists\");\n+        }\n+\n+        try (InputStream fis = fs.newInputStream(certPath);\n+                DataInputStream dis = new DataInputStream(fis);\n+                FileOutputStream out = outputStreamFunction.apply(filePath.toFile())) {\n+\n+            byte[] bytes = new byte[dis.available()];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86ef8d24b71af739a45de9b8e86907b91b4d0f3e"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI4MDkwNw==", "bodyText": "It gives parsing errors when passing in the InputStream or DataInputStream. However I could add the byte array part into the parseCertificate method.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r510280907", "createdAt": "2020-10-22T16:03:00Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.security.cert.Certificate;\n+import java.util.function.Function;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.security.CertificateValidator;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    private Function<File, FileOutputStream> outputStreamFunction;\n+    private CertificateValidator certValidator;\n+\n+    @Inject\n+    CertificatePostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            FileSystem fs,\n+            Logger logger,\n+            @Named(\"OutputStreamFunction\") Function<File, FileOutputStream> outputStreamFunction,\n+            CertificateValidator certValidator) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+        this.outputStreamFunction = outputStreamFunction;\n+        this.certValidator = certValidator;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(\n+                    400, \"A file named \\\"cert\\\" was not included in the request\");\n+        }\n+\n+        Path certPath = fs.pathOf(cert.uploadedFileName());\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        Path filePath = fs.pathOf(truststoreDir, cert.fileName()).normalize();\n+\n+        if (fs.exists(filePath)) {\n+            throw new HttpStatusException(409, filePath.toString() + \" Certificate already exists\");\n+        }\n+\n+        try (InputStream fis = fs.newInputStream(certPath);\n+                DataInputStream dis = new DataInputStream(fis);\n+                FileOutputStream out = outputStreamFunction.apply(filePath.toFile())) {\n+\n+            byte[] bytes = new byte[dis.available()];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2MzI5MA=="}, "originalCommit": {"oid": "86ef8d24b71af739a45de9b8e86907b91b4d0f3e"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NDkzOA==", "bodyText": "What \"parsing errors\"? Does it throw a CertificateException, and if so, does the exception say anything informative?\nThe official docs suggest that passing the FileInputStream wrapped in a BufferedInputStream should be sufficient: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/cert/CertificateFactory.html\nie.\n FileInputStream fis = new FileInputStream(filename);\n BufferedInputStream bis = new BufferedInputStream(fis);\n\n CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n\n while (bis.available() > 0) {\n    Certificate cert = cf.generateCertificate(bis);\n    System.out.println(cert.toString());\n }\n\nand\n FileInputStream fis = new FileInputStream(filename);\n CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n Collection c = cf.generateCertificates(fis);\n Iterator i = c.iterator();\n while (i.hasNext()) {\n    Certificate cert = (Certificate)i.next();\n    System.out.println(cert);\n }\n\nIt would be much better if we can figure a way to generate the certificate more directly from a stream of the file, without first reading the whole file into an application memory buffer and making a stream out of that. Less bug prone and probably better overall throughput performance.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r510294938", "createdAt": "2020-10-22T16:23:12Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.security.cert.Certificate;\n+import java.util.function.Function;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.security.CertificateValidator;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    private Function<File, FileOutputStream> outputStreamFunction;\n+    private CertificateValidator certValidator;\n+\n+    @Inject\n+    CertificatePostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            FileSystem fs,\n+            Logger logger,\n+            @Named(\"OutputStreamFunction\") Function<File, FileOutputStream> outputStreamFunction,\n+            CertificateValidator certValidator) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+        this.outputStreamFunction = outputStreamFunction;\n+        this.certValidator = certValidator;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(\n+                    400, \"A file named \\\"cert\\\" was not included in the request\");\n+        }\n+\n+        Path certPath = fs.pathOf(cert.uploadedFileName());\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        Path filePath = fs.pathOf(truststoreDir, cert.fileName()).normalize();\n+\n+        if (fs.exists(filePath)) {\n+            throw new HttpStatusException(409, filePath.toString() + \" Certificate already exists\");\n+        }\n+\n+        try (InputStream fis = fs.newInputStream(certPath);\n+                DataInputStream dis = new DataInputStream(fis);\n+                FileOutputStream out = outputStreamFunction.apply(filePath.toFile())) {\n+\n+            byte[] bytes = new byte[dis.available()];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2MzI5MA=="}, "originalCommit": {"oid": "86ef8d24b71af739a45de9b8e86907b91b4d0f3e"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNDI1NA==", "bodyText": "I changed the certificateValidator, it now takes in a InputStream, and outputs a Collection.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r510404254", "createdAt": "2020-10-22T19:27:28Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.security.cert.Certificate;\n+import java.util.function.Function;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.security.CertificateValidator;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    private Function<File, FileOutputStream> outputStreamFunction;\n+    private CertificateValidator certValidator;\n+\n+    @Inject\n+    CertificatePostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            FileSystem fs,\n+            Logger logger,\n+            @Named(\"OutputStreamFunction\") Function<File, FileOutputStream> outputStreamFunction,\n+            CertificateValidator certValidator) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+        this.outputStreamFunction = outputStreamFunction;\n+        this.certValidator = certValidator;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(\n+                    400, \"A file named \\\"cert\\\" was not included in the request\");\n+        }\n+\n+        Path certPath = fs.pathOf(cert.uploadedFileName());\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        Path filePath = fs.pathOf(truststoreDir, cert.fileName()).normalize();\n+\n+        if (fs.exists(filePath)) {\n+            throw new HttpStatusException(409, filePath.toString() + \" Certificate already exists\");\n+        }\n+\n+        try (InputStream fis = fs.newInputStream(certPath);\n+                DataInputStream dis = new DataInputStream(fis);\n+                FileOutputStream out = outputStreamFunction.apply(filePath.toFile())) {\n+\n+            byte[] bytes = new byte[dis.available()];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2MzI5MA=="}, "originalCommit": {"oid": "86ef8d24b71af739a45de9b8e86907b91b4d0f3e"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzMzNzY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/security/CertificateValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTo1NzozOVrOHmxmpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTo1ODozMVrOHmxodg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMDY0Nw==", "bodyText": "Little nitpick: since this now returns a Collection, the method name should probably be update to reflect that. ie parseCertificates. Also, the raw type Collection could probably be written here as Collection<Certificate> for a bit of extra type-safety.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r510420647", "createdAt": "2020-10-22T19:57:39Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/security/CertificateValidator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.security;\n+\n+import java.io.InputStream;\n+import java.security.cert.CertificateFactory;\n+import java.util.Collection;\n+\n+public class CertificateValidator {\n+\n+    public Collection parseCertificate(InputStream stream) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4409c0d1ccd80fcac088d2441ad2c45d690fdefc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMTExMA==", "bodyText": "https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/cert/CertificateFactory.html#generateCertificates(java.io.InputStream)\nActually, Collection<? extends Certificate> - makes sense as there are subtypes of Certificate as well, like X509Certificate.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r510421110", "createdAt": "2020-10-22T19:58:31Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/security/CertificateValidator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.security;\n+\n+import java.io.InputStream;\n+import java.security.cert.CertificateFactory;\n+import java.util.Collection;\n+\n+public class CertificateValidator {\n+\n+    public Collection parseCertificate(InputStream stream) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMDY0Nw=="}, "originalCommit": {"oid": "4409c0d1ccd80fcac088d2441ad2c45d690fdefc"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzM0NTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTo1OTo0MlrOHmxrIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTo1OTo0MlrOHmxrIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMTc5NQ==", "bodyText": "Likewise, this Collection and its Iterator are raw types here but are generics and so should be Collection<? extends Certificate> and Iterator<? extends Certificate>.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r510421795", "createdAt": "2020-10-22T19:59:42Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/web/http/api/v2/CertificatePostHandler.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.web.http.api.v2;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.security.cert.Certificate;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.function.Function;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.redhat.rhjmc.containerjfr.core.log.Logger;\n+import com.redhat.rhjmc.containerjfr.core.sys.Environment;\n+import com.redhat.rhjmc.containerjfr.core.sys.FileSystem;\n+import com.redhat.rhjmc.containerjfr.net.AuthManager;\n+import com.redhat.rhjmc.containerjfr.net.security.CertificateValidator;\n+import com.redhat.rhjmc.containerjfr.net.web.http.AbstractAuthenticatedRequestHandler;\n+import com.redhat.rhjmc.containerjfr.net.web.http.api.ApiVersion;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.FileUpload;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.impl.HttpStatusException;\n+\n+class CertificatePostHandler extends AbstractAuthenticatedRequestHandler {\n+\n+    static final String PATH = \"certificates\";\n+\n+    private final Environment env;\n+    private final FileSystem fs;\n+    private final Logger logger;\n+\n+    private static final String TRUSTSTORE_DIR = \"TRUSTSTORE_DIR\";\n+\n+    private Function<File, FileOutputStream> outputStreamFunction;\n+    private CertificateValidator certValidator;\n+\n+    @Inject\n+    CertificatePostHandler(\n+            AuthManager auth,\n+            Environment env,\n+            FileSystem fs,\n+            Logger logger,\n+            @Named(\"OutputStreamFunction\") Function<File, FileOutputStream> outputStreamFunction,\n+            CertificateValidator certValidator) {\n+        super(auth);\n+        this.env = env;\n+        this.fs = fs;\n+        this.logger = logger;\n+        this.outputStreamFunction = outputStreamFunction;\n+        this.certValidator = certValidator;\n+    }\n+\n+    @Override\n+    public ApiVersion apiVersion() {\n+        return ApiVersion.V2;\n+    }\n+\n+    @Override\n+    public HttpMethod httpMethod() {\n+        return HttpMethod.POST;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return basePath() + PATH;\n+    }\n+\n+    @Override\n+    public boolean isAsync() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isOrdered() {\n+        return true;\n+    }\n+\n+    @Override\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public void handleAuthenticated(RoutingContext ctx) throws Exception {\n+        FileUpload cert = null;\n+        for (FileUpload fu : ctx.fileUploads()) {\n+            if (\"cert\".equals(fu.name())) {\n+                cert = fu;\n+                break;\n+            }\n+        }\n+\n+        if (cert == null) {\n+            throw new HttpStatusException(\n+                    400, \"A file named \\\"cert\\\" was not included in the request\");\n+        }\n+\n+        Path certPath = fs.pathOf(cert.uploadedFileName());\n+\n+        if (!env.hasEnv(TRUSTSTORE_DIR)) {\n+            throw new HttpStatusException(500, \"Truststore directory not set\");\n+        }\n+\n+        String truststoreDir = env.getEnv(TRUSTSTORE_DIR);\n+        Path filePath = fs.pathOf(truststoreDir, cert.fileName()).normalize();\n+\n+        if (fs.exists(filePath)) {\n+            throw new HttpStatusException(409, filePath.toString() + \" Certificate already exists\");\n+        }\n+\n+        try (InputStream fis = fs.newInputStream(certPath);\n+                FileOutputStream out = outputStreamFunction.apply(filePath.toFile())) {\n+\n+            Collection certificates = certValidator.parseCertificate(fis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4409c0d1ccd80fcac088d2441ad2c45d690fdefc"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDU4Nzg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/security/CertificateValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDozMjozNlrOHnQdfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDo0NzoxMFrOHnRFRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyNjIwNw==", "bodyText": "This is failing to compile for me - this line returns Collection<? extends Certificate> but the return type of parseCertificates is Collection<Certificate>. The method return type should be updated to match the bounded wildcard as we discussed over IRC.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r510926207", "createdAt": "2020-10-23T14:32:36Z", "author": {"login": "andrewazores"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/security/CertificateValidator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.security;\n+\n+import java.io.InputStream;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.util.Collection;\n+\n+public class CertificateValidator {\n+\n+    public Collection<Certificate> parseCertificates(InputStream stream) throws Exception {\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+        return cf.generateCertificates(stream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ee4e9d18a55802d54a404367e9bcbe06d74f5ed"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkzNjM4OQ==", "bodyText": "Sorry about that, should be fixed.", "url": "https://github.com/cryostatio/cryostat/pull/299#discussion_r510936389", "createdAt": "2020-10-23T14:47:10Z", "author": {"login": "Alexjsenn"}, "path": "src/main/java/com/redhat/rhjmc/containerjfr/net/security/CertificateValidator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*-\n+ * #%L\n+ * Container JFR\n+ * %%\n+ * Copyright (C) 2020 Red Hat, Inc.\n+ * %%\n+ * The Universal Permissive License (UPL), Version 1.0\n+ *\n+ * Subject to the condition set forth below, permission is hereby granted to any\n+ * person obtaining a copy of this software, associated documentation and/or data\n+ * (collectively the \"Software\"), free of charge and under any and all copyright\n+ * rights in the Software, and any and all patent rights owned or freely\n+ * licensable by each licensor hereunder covering either (i) the unmodified\n+ * Software as contributed to or provided by such licensor, or (ii) the Larger\n+ * Works (as defined below), to deal in both\n+ *\n+ * (a) the Software, and\n+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if\n+ * one is included with the Software (each a \"Larger Work\" to which the Software\n+ * is contributed by such licensors),\n+ *\n+ * without restriction, including without limitation the rights to copy, create\n+ * derivative works of, display, perform, and distribute the Software and make,\n+ * use, sell, offer for sale, import, export, have made, and have sold the\n+ * Software and the Larger Work(s), and to sublicense the foregoing rights on\n+ * either these or other terms.\n+ *\n+ * This license is subject to the following condition:\n+ * The above copyright notice and either this complete permission notice or at\n+ * a minimum a reference to the UPL must be included in all copies or\n+ * substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ * #L%\n+ */\n+package com.redhat.rhjmc.containerjfr.net.security;\n+\n+import java.io.InputStream;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.util.Collection;\n+\n+public class CertificateValidator {\n+\n+    public Collection<Certificate> parseCertificates(InputStream stream) throws Exception {\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+        return cf.generateCertificates(stream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyNjIwNw=="}, "originalCommit": {"oid": "5ee4e9d18a55802d54a404367e9bcbe06d74f5ed"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 789, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}