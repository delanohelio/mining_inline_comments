{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3ODAyMzk4", "number": 8612, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDo1MzowNFrOENmsag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDo1MzowNFrOENmsag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzAwOTA2OnYy", "diffSide": "RIGHT", "path": "main/src/cgeo/geocaching/utils/LiUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDo1MzowNFrOGwU1lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDo1MzowNFrOGwU1lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyNjIzMQ==", "bodyText": "Codacy found an issue: Avoid long parameter lists.", "url": "https://github.com/cgeo/cgeo/pull/8612#discussion_r453326231", "createdAt": "2020-07-12T14:53:04Z", "author": {"login": "cgeo-ci-bot"}, "path": "main/src/cgeo/geocaching/utils/LiUtils.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package cgeo.geocaching.utils;\n+\n+import android.graphics.Canvas;\n+import android.graphics.Paint;\n+import android.graphics.Path;\n+import android.os.Build;\n+import android.text.Editable;\n+import android.text.Html;\n+import android.text.Layout;\n+import android.text.Spannable;\n+import android.text.SpannableStringBuilder;\n+import android.text.Spanned;\n+import android.text.style.BulletSpan;\n+import android.text.style.LeadingMarginSpan;\n+import android.util.TypedValue;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.xml.sax.XMLReader;\n+\n+/**\n+ * Extends the standard spannable by recognizing and formatting <li>...</li> tags\n+ * even on systems < API 24 + including fixes for higher API levels\n+ */\n+public class LiUtils {\n+\n+    private LiUtils() {\n+        // utility class\n+    }\n+\n+    public static SpannableStringBuilder formatHTML(final String html) {\n+        // replace our standard bullet points ... \\n by HTML <li> ... </li>\n+        final Pattern p = Pattern.compile(\"([\u00b7])([^\u00b7\\n\\r]+)([\\\\n]?)([\\n\\r]+)\");\n+        final Matcher m = p.matcher(html);\n+        final String input = m.find() ? m.replaceAll(\"<li>$2</li>\") : html;\n+\n+        // now apply HTML formatting (including <li> tags)\n+        final Spanned spanned = Build.VERSION.SDK_INT >= Build.VERSION_CODES.N ? Html.fromHtml(input, Html.FROM_HTML_MODE_LEGACY) : Html.fromHtml(input, null, new LiTagHandler());\n+        final SpannableStringBuilder builder = new SpannableStringBuilder(spanned);\n+        final BulletSpan[] bulletSpans = builder.getSpans(0, builder.length(), BulletSpan.class);\n+        for (BulletSpan bulletSpan :bulletSpans) {\n+            final int start = builder.getSpanStart(bulletSpan);\n+            final int end = builder.getSpanEnd(bulletSpan);\n+            builder.removeSpan(bulletSpan);\n+            builder.setSpan(new LiAwareBulletSpan(), start, end, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);\n+        }\n+        return builder;\n+    }\n+}\n+\n+class LiAwareBulletSpan implements LeadingMarginSpan {\n+\n+    private static final int BULLET_RADIUS = dip(3);\n+\n+    @Override\n+    public int getLeadingMargin(final boolean first) {\n+        return dip(8) + 2 * BULLET_RADIUS;\n+    }\n+\n+    @Override\n+    public void drawLeadingMargin(final Canvas canvas, final Paint paint, final int x, final int dir, final int top, final int baseline,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a136508970dd0ad58474a57aad994555bfecfb3"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1825, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}