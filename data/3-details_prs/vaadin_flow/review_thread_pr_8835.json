{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NjIwOTgx", "number": 8835, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODowMDozOFrOEW5qvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODowMDozOFrOEW5qvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDQ4OTU2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/server/connect/generator/tsmodel/TsFormEndpoint.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODowMDozOFrOG-ZdFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDo1MzowMFrOHAGYGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4MTk0Mw==", "bodyText": "This combination of annotations doesn't look right. I think @Nullable has to be removed.", "url": "https://github.com/vaadin/flow/pull/8835#discussion_r468081943", "createdAt": "2020-08-10T18:00:38Z", "author": {"login": "knoobie"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/connect/generator/tsmodel/TsFormEndpoint.java", "diffHunk": "@@ -110,5 +110,6 @@ public String stringNullable() {\n         @Nullable MyEntity nullableEntity;\n         @Nullable List<Optional<String>> nullableList;\n         @Nullable Optional<String>[][] nullableMatrix;\n+        @Nullable @NotNull MyEntity nullableNotNullEntity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42836a1e6056a818921f3b9efd76976d97ed014a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxOTY0MA==", "bodyText": "Thanks a lot for the quick feedback. I agree, this does look strange. This is just a test fixture code, it does not matter much which of supported annotations are listed here.\nLet me kindly a related question though, because I think I have a use case for this strange combination. Consider below:\nclass MySelection {\n  long id;\n  // ...\n}\n\nclass MyForm {\n  // @Nullable?\n  @NotNull\n  MySelection selection; \n}\nWe generate TypeScript definitions corresponding to the Java beans above. When doing that, we assume everything to be kind of a @Nonnull by default, so that the TypeScript interfaces are strict, nicely require initialisation of all the fields on creation, and guarantee a value presence when are being read.\nHowever, when it comes to binding a form with a combo-box to the selection field, the following is expected:\n\nThe combo-box is empty by default, unless an initial value is provided or selected by the user. That\u2019s why I\u2019d add @Nullable to make the generated TypeScript type interface for MyForm allow selection to be undefined. We need to explicitly opt-out from the \u201call the data must be defined\u201d\u00a0assumption.\nThe empty combo-box errors when submitted. That\u2019s why I\u2019d add the @NotNull validation constrain.\n\nDo you have any suggestions for how to more reasonably express that kind of a field in Java?", "url": "https://github.com/vaadin/flow/pull/8835#discussion_r468619640", "createdAt": "2020-08-11T14:20:49Z", "author": {"login": "platosha"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/connect/generator/tsmodel/TsFormEndpoint.java", "diffHunk": "@@ -110,5 +110,6 @@ public String stringNullable() {\n         @Nullable MyEntity nullableEntity;\n         @Nullable List<Optional<String>> nullableList;\n         @Nullable Optional<String>[][] nullableMatrix;\n+        @Nullable @NotNull MyEntity nullableNotNullEntity;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4MTk0Mw=="}, "originalCommit": {"oid": "42836a1e6056a818921f3b9efd76976d97ed014a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwOTc1NA==", "bodyText": "From a java point of view combining both annotation doesn't make sense (and probably (not tested; just a guess) some validation frameworks are going to complain about it). My understanding for this kind of TS \"magic\" is that \"java is always first\". Meaning that I create the bean / pojo / dto / object with the annotations or re-use an existing piece of code and just add vaadin as presentation layer.\nExamples:\nclass Person {\n\n  String doctorate;\n\n  @NotNull\n  String name;\n\n  @NotNull\n  Address mainAddress;\n\n  List<Address> secondaryAddresses;\n\n}\n\nclass Address {\n\n  @NotNull\n  String street;\n  // ... and more\n}\nGiven this example; I would expect the following from vaadin to generate:\n\noptional text-input for doctorate\nrequired text-input for name\nrequired layout for mainAddress (in this example a simple text-field)\nbutton \"Add Secondary Address\" which creates a new layout for an address input + a \"Delete this secondary address button\"\n\nor am I mistaken that the Java Bean Validation says that every property is optional until otherwise specified via annotation?\nEdit: Currently with Binder you can specify \"asRequired()\" and the default value passed from server side won't break the UI. Meaning if it is null the combo box is just empty, otherwise it's filled with the current selected item. The TS world should be able to handle such cases as well. (without adding not intuitive annotations ;))", "url": "https://github.com/vaadin/flow/pull/8835#discussion_r468709754", "createdAt": "2020-08-11T16:28:19Z", "author": {"login": "knoobie"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/connect/generator/tsmodel/TsFormEndpoint.java", "diffHunk": "@@ -110,5 +110,6 @@ public String stringNullable() {\n         @Nullable MyEntity nullableEntity;\n         @Nullable List<Optional<String>> nullableList;\n         @Nullable Optional<String>[][] nullableMatrix;\n+        @Nullable @NotNull MyEntity nullableNotNullEntity;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4MTk0Mw=="}, "originalCommit": {"oid": "42836a1e6056a818921f3b9efd76976d97ed014a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEzNzMzMQ==", "bodyText": "@platosha Did I get the use case right that selection of MyForm (in the above example) is supposed to be a required field so that a null value is not considered valid (for submission), but it's \"nullable\" in the sense that we need to be able to store or refer to the state of the form when the user has not yet filled in the selection field?\nSo internally we need to be able to know that this field is null/empty even though it is a required field that must not be null for validation/submission.", "url": "https://github.com/vaadin/flow/pull/8835#discussion_r469137331", "createdAt": "2020-08-12T09:42:30Z", "author": {"login": "Haprog"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/connect/generator/tsmodel/TsFormEndpoint.java", "diffHunk": "@@ -110,5 +110,6 @@ public String stringNullable() {\n         @Nullable MyEntity nullableEntity;\n         @Nullable List<Optional<String>> nullableList;\n         @Nullable Optional<String>[][] nullableMatrix;\n+        @Nullable @NotNull MyEntity nullableNotNullEntity;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4MTk0Mw=="}, "originalCommit": {"oid": "42836a1e6056a818921f3b9efd76976d97ed014a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NDAzOA==", "bodyText": "I agree that combining annotations like @NotNull and @Nullable makes no sense at least if they would be visible in user projects. If we need an additional annotation, better naming would be required for it.", "url": "https://github.com/vaadin/flow/pull/8835#discussion_r469144038", "createdAt": "2020-08-12T09:54:12Z", "author": {"login": "Haprog"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/connect/generator/tsmodel/TsFormEndpoint.java", "diffHunk": "@@ -110,5 +110,6 @@ public String stringNullable() {\n         @Nullable MyEntity nullableEntity;\n         @Nullable List<Optional<String>> nullableList;\n         @Nullable Optional<String>[][] nullableMatrix;\n+        @Nullable @NotNull MyEntity nullableNotNullEntity;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4MTk0Mw=="}, "originalCommit": {"oid": "42836a1e6056a818921f3b9efd76976d97ed014a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg2NjUyMw==", "bodyText": "@knoobie very good point. Thanks again for your detailed response.\n@Haprog yes, that\u2019s the use case.\nLooks like it is a problem in the way our existing TS magic works. Perhaps have to reconsider our defaults in there to make our generated TypeScript fields nullable by default, as they work in Java. This change is not in scope of this PR, so to be done separately.\nFor now I removed the annotation from the fixture.", "url": "https://github.com/vaadin/flow/pull/8835#discussion_r469866523", "createdAt": "2020-08-13T10:53:00Z", "author": {"login": "platosha"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/connect/generator/tsmodel/TsFormEndpoint.java", "diffHunk": "@@ -110,5 +110,6 @@ public String stringNullable() {\n         @Nullable MyEntity nullableEntity;\n         @Nullable List<Optional<String>> nullableList;\n         @Nullable Optional<String>[][] nullableMatrix;\n+        @Nullable @NotNull MyEntity nullableNotNullEntity;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4MTk0Mw=="}, "originalCommit": {"oid": "42836a1e6056a818921f3b9efd76976d97ed014a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3179, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}