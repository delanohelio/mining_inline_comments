{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1OTMwMzQ5", "number": 9198, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzowMTo1MVrOEvTW-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzowNjo1MVrOEvTeag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDM1NzA2OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzowMTo1MVrOHkNMpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowNzoyMFrOHkyTtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyNzAxNQ==", "bodyText": "Maybe requestFlush is better name", "url": "https://github.com/vaadin/flow/pull/9198#discussion_r507727015", "createdAt": "2020-10-19T13:01:51Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -225,17 +304,36 @@ public DataCommunicator(DataGenerator<T> dataGenerator,\n     }\n \n     /**\n-     * Sets the requested range of data to be sent.\n+     * Sets the requested range of data to be sent and requests the data of this\n+     * range from the data provider immediately.\n      *\n      * @param start\n      *            the start of the requested range\n      * @param length\n      *            the end of the requested range\n      */\n     public void setRequestedRange(int start, int length) {\n+        setRequestedRange(start, length, true);\n+    }\n+\n+    /**\n+     * Sets the requested range of data to be sent and sets whether the data\n+     * should be requested immediately or not.\n+     * \n+     * @param start\n+     *            the start of the requested range\n+     * @param length\n+     *            the end of the requested range\n+     * @param requestNow\n+     *            if {@code true}, the data will be requested immediately,\n+     *            otherwise it will just set the range.\n+     */\n+    public void setRequestedRange(int start, int length, boolean requestNow) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d0e7aded18c6c7071e5b180194214c2afc0fb1f"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNTAyOA==", "bodyText": "I reverted the changes for setRequestedRange because actually this extra flush call will anyway merged with the flush from filter slot callback into the one call, so it's not necessary for CB.", "url": "https://github.com/vaadin/flow/pull/9198#discussion_r508335028", "createdAt": "2020-10-20T09:07:20Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -225,17 +304,36 @@ public DataCommunicator(DataGenerator<T> dataGenerator,\n     }\n \n     /**\n-     * Sets the requested range of data to be sent.\n+     * Sets the requested range of data to be sent and requests the data of this\n+     * range from the data provider immediately.\n      *\n      * @param start\n      *            the start of the requested range\n      * @param length\n      *            the end of the requested range\n      */\n     public void setRequestedRange(int start, int length) {\n+        setRequestedRange(start, length, true);\n+    }\n+\n+    /**\n+     * Sets the requested range of data to be sent and sets whether the data\n+     * should be requested immediately or not.\n+     * \n+     * @param start\n+     *            the start of the requested range\n+     * @param length\n+     *            the end of the requested range\n+     * @param requestNow\n+     *            if {@code true}, the data will be requested immediately,\n+     *            otherwise it will just set the range.\n+     */\n+    public void setRequestedRange(int start, int length, boolean requestNow) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyNzAxNQ=="}, "originalCommit": {"oid": "6d0e7aded18c6c7071e5b180194214c2afc0fb1f"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDM3NjEwOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzowNjo1MVrOHkNYYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowNzo0MlrOHkyUkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczMDAxNg==", "bodyText": "What is a disposable filter ?\nThe semantics should be explained in this method", "url": "https://github.com/vaadin/flow/pull/9198#discussion_r507730016", "createdAt": "2020-10-19T13:06:51Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -306,16 +404,26 @@ public void confirmUpdate(int updateId) {\n      * @param initialFilter\n      *            the initial filter value to use, or <code>null</code> to not\n      *            use any initial filter value\n+     * @param permanentFilter\n+     *            if {@code true}, then the initial filter is considered as a\n+     *            permanent and won't be discarded after the next call to data\n+     *            provider, otherwise it will be treated as a disposable filter\n+     *            and will be discarded", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d0e7aded18c6c7071e5b180194214c2afc0fb1f"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNTI1MQ==", "bodyText": "Made a clarifications in javadocs", "url": "https://github.com/vaadin/flow/pull/9198#discussion_r508335251", "createdAt": "2020-10-20T09:07:42Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -306,16 +404,26 @@ public void confirmUpdate(int updateId) {\n      * @param initialFilter\n      *            the initial filter value to use, or <code>null</code> to not\n      *            use any initial filter value\n+     * @param permanentFilter\n+     *            if {@code true}, then the initial filter is considered as a\n+     *            permanent and won't be discarded after the next call to data\n+     *            provider, otherwise it will be treated as a disposable filter\n+     *            and will be discarded", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczMDAxNg=="}, "originalCommit": {"oid": "6d0e7aded18c6c7071e5b180194214c2afc0fb1f"}, "originalPosition": 144}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2941, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}