{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NjUwNjY5", "number": 7937, "title": "Last cherry-picks for 2.2.0.alpha16", "bodyText": "This change is\u2002", "createdAt": "2020-03-30T13:28:38Z", "url": "https://github.com/vaadin/flow/pull/7937", "merged": true, "mergeCommit": {"oid": "264b9a6503e9d1ebca2195827b1ce0f8b2b2e4fe"}, "closed": true, "closedAt": "2020-04-01T12:44:24Z", "author": {"login": "pleku"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRyxDxAH2gAyMzk1NjUwNjY5OmJkZTcyNmRiM2NiMTQ0YmExODYyOThlNzA4MjUyYmJiZTRiMDI5MDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTV4bWgFqTM4NTQ5MDY4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bde726db3cb144ba186298e708252bbbe4b02904", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/bde726db3cb144ba186298e708252bbbe4b02904", "committedDate": "2020-03-27T15:51:38Z", "message": "Add stats for pnpm usage (#7917)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f7f56816aa70a2cc875b3b081bd8bb16cbb29c7", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/5f7f56816aa70a2cc875b3b081bd8bb16cbb29c7", "committedDate": "2020-03-30T07:26:48Z", "message": "Validate Route and ParentLayout annotations presence at the same time (#7870)\n\n* Validate Route and ParentLayout annotations presence at the same time\n\nFixes #3865\n\n* Correct unit test\n\n* Improve wording"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed80f82d092c11afe3de45249e255e5399ee9141", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/ed80f82d092c11afe3de45249e255e5399ee9141", "committedDate": "2020-03-30T07:53:02Z", "message": "Apply push setting after navigation (#7838)\n\nFixes #5759\n# Conflicts:\n#\tflow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n#\tflow-server/src/test/java/com/vaadin/flow/component/internal/UIInternalsTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bac5f8e4497601845abf148b62b4671ae1df4fa", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/4bac5f8e4497601845abf148b62b4671ae1df4fa", "committedDate": "2020-03-30T09:36:08Z", "message": "Reload the page on ESC (#7669)\n\n* Reload the page on ESC\n\nFixes #6284\n\n* Add IT test\n\n* Check if test fails\n\n* Merge master into 6284-reload-page-on-esc\n\n* Remove not working test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fefd2cd382881634d3365691500138d4d0d76f73", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/fefd2cd382881634d3365691500138d4d0d76f73", "committedDate": "2020-03-30T13:11:56Z", "message": "Switch npm back to default for 2.2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "083531f528dcc9b672c5bbc2afbd9cc04467e7aa", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/083531f528dcc9b672c5bbc2afbd9cc04467e7aa", "committedDate": "2020-03-30T13:23:44Z", "message": "Use pnpm for flow 2.2 build"}, "afterCommit": {"oid": "3c2335112368a3569584ca26486d9d933eebf296", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/3c2335112368a3569584ca26486d9d933eebf296", "committedDate": "2020-03-30T13:30:19Z", "message": "Use pnpm for flow 2.2 build"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c2335112368a3569584ca26486d9d933eebf296", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/3c2335112368a3569584ca26486d9d933eebf296", "committedDate": "2020-03-30T13:30:19Z", "message": "Use pnpm for flow 2.2 build"}, "afterCommit": {"oid": "f2a977d00c51beeb6c6dacf3918522da541b7010", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/f2a977d00c51beeb6c6dacf3918522da541b7010", "committedDate": "2020-03-30T13:32:08Z", "message": "Use pnpm for flow 2.2 build"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjE2NzUy", "url": "https://github.com/vaadin/flow/pull/7937#pullrequestreview-384616752", "createdAt": "2020-03-31T10:52:21Z", "commit": {"oid": "881328568f73b0f11f680712db9462cc112ddf03"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo1MjoyMVrOF-QDYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo1MjoyMVrOF-QDYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxOTA0Mg==", "bodyText": "Use the built-in formatting to construct this argument.", "url": "https://github.com/vaadin/flow/pull/7937#discussion_r400819042", "createdAt": "2020-03-31T10:52:21Z", "author": {"login": "vaadin-bot"}, "path": "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassFinder.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.testutil;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Superclass for testing classes which need to scan project's classpath.\n+ * \n+ * @author Vaadin Ltd\n+ *\n+ */\n+public abstract class ClassFinder {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ClassFinder.class);\n+\n+    protected boolean isTestClassPath(String classPath) {\n+        File file = new File(classPath);\n+        return \"test-classes\".equals(file.getName());\n+    }\n+\n+    protected static boolean isFunctionalType(Type type) {\n+        return type.getTypeName().contains(\"java.util.function\");\n+    }\n+\n+    /**\n+     * Lists all class path entries by splitting the class path string.\n+     * <p>\n+     * Adapted from ClassPathExplorer.getRawClasspathEntries(), but without\n+     * filtering.\n+     *\n+     * @return List of class path segment strings\n+     */\n+    protected static List<String> getRawClasspathEntries() {\n+        // try to keep the order of the classpath\n+\n+        String pathSep = System.getProperty(\"path.separator\");\n+        String classpath = System.getProperty(\"java.class.path\");\n+\n+        if (classpath.startsWith(\"\\\"\")) {\n+            classpath = classpath.substring(1);\n+        }\n+        if (classpath.endsWith(\"\\\"\")) {\n+            classpath = classpath.substring(0, classpath.length() - 1);\n+        }\n+\n+        String[] split = classpath.split(pathSep);\n+        return Arrays.asList(split);\n+    }\n+\n+    /**\n+     * Lists class names (based on .class files) in a directory (a package path\n+     * root).\n+     *\n+     * @param parentPackage\n+     *            parent package name or null at root of hierarchy, used by\n+     *            recursion\n+     * @param parent\n+     *            File representing the directory to scan\n+     * @return collection of fully qualified class names in the directory\n+     */\n+    private static Collection<String> findClassesInDirectory(\n+            String parentPackage, File parent) {\n+        if (parent.isHidden()\n+                || parent.getPath().contains(File.separator + \".\")) {\n+            return Collections.emptyList();\n+        }\n+\n+        if (parentPackage == null) {\n+            parentPackage = \"\";\n+        } else {\n+            parentPackage += \".\";\n+        }\n+\n+        Collection<String> classNames = new ArrayList<>();\n+\n+        // add all directories recursively\n+        File[] files = parent.listFiles();\n+        assertNotNull(files);\n+        for (File child : files) {\n+            if (child.isDirectory()) {\n+                classNames.addAll(findClassesInDirectory(\n+                        parentPackage + child.getName(), child));\n+            } else if (child.getName().endsWith(\".class\")) {\n+                classNames.add(parentPackage.replace(File.separatorChar, '.')\n+                        + child.getName().replaceAll(\"\\\\.class\", \"\"));\n+            }\n+        }\n+\n+        return classNames;\n+    }\n+\n+    /**\n+     * JARs that will be scanned for classes to test, in addition to classpath\n+     * directories.\n+     *\n+     * @return the compiled pattern\n+     */\n+    @SuppressWarnings(\"WeakerAccess\")\n+    protected Pattern getJarPattern() {\n+        return Pattern.compile(\"(.*vaadin.*)|(.*flow.*)\\\\.jar\");\n+    }\n+\n+    @SuppressWarnings(\"WeakerAccess\")\n+    protected Stream<String> getBasePackages() {\n+        return Stream.of(\"com.vaadin\");\n+    }\n+\n+    protected boolean isTestClass(Class<?> cls) {\n+        if (cls.getEnclosingClass() != null\n+                && isTestClass(cls.getEnclosingClass())) {\n+            return true;\n+        }\n+\n+        // Test classes with a @Test annotation on some method\n+        for (Method method : cls.getMethods()) {\n+            if (method.isAnnotationPresent(Test.class)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Finds the server side classes/interfaces under a class path entry -\n+     * either a directory or a JAR that matches {@link #getJarPattern()}.\n+     * <p>\n+     * Only classes under {@link #getBasePackages} are considered, and those\n+     * matching {@code excludes} are filtered out.\n+     */\n+    protected List<String> findServerClasses(String classpathEntry,\n+            Collection<Pattern> excludes) throws IOException {\n+        Collection<String> classes;\n+\n+        File file = new File(classpathEntry);\n+        if (file.isDirectory()) {\n+            classes = findClassesInDirectory(null, file);\n+        } else if (getJarPattern().matcher(file.getName()).matches()) {\n+            classes = findClassesInJar(file);\n+        } else {\n+            logger.debug(\"Ignoring \" + classpathEntry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "881328568f73b0f11f680712db9462cc112ddf03"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjE2NzY0", "url": "https://github.com/vaadin/flow/pull/7937#pullrequestreview-384616764", "createdAt": "2020-03-31T10:52:22Z", "commit": {"oid": "881328568f73b0f11f680712db9462cc112ddf03"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo1MjoyMlrOF-QDbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo1MjoyMlrOF-QDbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxOTA1NA==", "bodyText": "Call \"Optional#isPresent()\" before accessing the value.", "url": "https://github.com/vaadin/flow/pull/7937#discussion_r400819054", "createdAt": "2020-03-31T10:52:22Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Allows to load the implementation class by one classloader but accepts\n+ * classes in {@link #onStartup(Set, ServletContext)} method loaded by another\n+ * classloader.\n+ * <p>\n+ * Workaround for https://github.com/vaadin/flow/issues/7805.\n+ *\n+ * @author Vaadin Ltd\n+ *\n+ */\n+public interface ClassLoaderAwareServletContainerInitializer\n+        extends ServletContainerInitializer {\n+\n+    /**\n+     * Overridden to use different classloaders if needed.\n+     * <p>\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n+            throws ServletException {\n+        ClassLoader webClassLoader = ctx.getClassLoader();\n+        ClassLoader classLoader = getClass().getClassLoader();\n+\n+        /*\n+         * Hack is needed to make a workaround for weird behavior of WildFly\n+         * with skinnywar See https://github.com/vaadin/flow/issues/7805\n+         */\n+        boolean noHack = false;\n+        while (classLoader != null) {\n+            if (classLoader.equals(webClassLoader)) {\n+                noHack = true;\n+                break;\n+            } else {\n+                /*\n+                 * The classloader which has loaded this class ({@code\n+                 * classLoader}) should be either the {@code webClassLoader} or\n+                 * its child: in this case it knows how to handle the classes\n+                 * loaded by the {@code webClassLoader} : it either is able to\n+                 * load them itself or delegate to its parent (which is the\n+                 * {@code webClassLoader}): in this case hack is not needed and\n+                 * the {@link #process(Set, ServletContext)} method can be\n+                 * called directly.\n+                 */\n+                classLoader = classLoader.getParent();\n+            }\n+        }\n+\n+        if (noHack) {\n+            process(set, ctx);\n+            return;\n+        }\n+\n+        try {\n+            Class<?> initializer = ctx.getClassLoader()\n+                    .loadClass(getClass().getName());\n+\n+            String processMethodName = Stream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "881328568f73b0f11f680712db9462cc112ddf03"}, "originalPosition": 84}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3aae82632ce3c029405626c993c61b7bc86c7e5", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/f3aae82632ce3c029405626c993c61b7bc86c7e5", "committedDate": "2020-03-31T11:04:33Z", "message": "correct unit test"}, "afterCommit": {"oid": "120239ff2c1acfa5a04b3c1c63b88ce7467a0378", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/120239ff2c1acfa5a04b3c1c63b88ce7467a0378", "committedDate": "2020-03-31T11:06:36Z", "message": "correct unit test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "120239ff2c1acfa5a04b3c1c63b88ce7467a0378", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/120239ff2c1acfa5a04b3c1c63b88ce7467a0378", "committedDate": "2020-03-31T11:06:36Z", "message": "correct unit test"}, "afterCommit": {"oid": "c827da439820748bd3ed73ccbf574055d5aeb132", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/c827da439820748bd3ed73ccbf574055d5aeb132", "committedDate": "2020-03-31T11:27:44Z", "message": "correct unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2c0e1e60ddf6b90fbe39ebcf7338f7fd435acad", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/c2c0e1e60ddf6b90fbe39ebcf7338f7fd435acad", "committedDate": "2020-03-31T14:08:33Z", "message": "Use pnpm for flow 2.2 build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce18495ee45a1f9cd5b538ee635c3a13e617e16a", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/ce18495ee45a1f9cd5b538ee635c3a13e617e16a", "committedDate": "2020-03-31T14:08:43Z", "message": "Make a workaround for skinnywar/Wildfly (#7904)\n\nFixes #7805"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c55119604f450444dbbcae978ab4a15435ef285d", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/c55119604f450444dbbcae978ab4a15435ef285d", "committedDate": "2020-03-31T14:08:43Z", "message": "Lock terser version to 4.6.7 (#7951)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47bc53cb5d2b2021613e2da55c726aee1d0a1acf", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/47bc53cb5d2b2021613e2da55c726aee1d0a1acf", "committedDate": "2020-03-31T12:11:52Z", "message": "1000th thanks to git cherry-pick."}, "afterCommit": {"oid": "59a521419c65953ea8d7e2db0a9def59b240c7b2", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/59a521419c65953ea8d7e2db0a9def59b240c7b2", "committedDate": "2020-03-31T16:51:12Z", "message": "Use token file to write parameters for dev mode from maven config (#7666)\n\n* Move parameters into a super class.\n* Set init parameter values based on the token file data."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1Mjk3NDYz", "url": "https://github.com/vaadin/flow/pull/7937#pullrequestreview-385297463", "createdAt": "2020-04-01T06:31:54Z", "commit": {"oid": "59a521419c65953ea8d7e2db0a9def59b240c7b2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzAwNTY4", "url": "https://github.com/vaadin/flow/pull/7937#pullrequestreview-385300568", "createdAt": "2020-04-01T06:38:36Z", "commit": {"oid": "59a521419c65953ea8d7e2db0a9def59b240c7b2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzAxODAx", "url": "https://github.com/vaadin/flow/pull/7937#pullrequestreview-385301801", "createdAt": "2020-04-01T06:41:12Z", "commit": {"oid": "59a521419c65953ea8d7e2db0a9def59b240c7b2"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzA0NTA4", "url": "https://github.com/vaadin/flow/pull/7937#pullrequestreview-385304508", "createdAt": "2020-04-01T06:47:22Z", "commit": {"oid": "59a521419c65953ea8d7e2db0a9def59b240c7b2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzEwNjEy", "url": "https://github.com/vaadin/flow/pull/7937#pullrequestreview-385310612", "createdAt": "2020-04-01T06:59:27Z", "commit": {"oid": "59a521419c65953ea8d7e2db0a9def59b240c7b2"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzExMTQx", "url": "https://github.com/vaadin/flow/pull/7937#pullrequestreview-385311141", "createdAt": "2020-04-01T07:00:30Z", "commit": {"oid": "59a521419c65953ea8d7e2db0a9def59b240c7b2"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7867faa2529ceef2bdfc4ea8672c654b45659d9", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/c7867faa2529ceef2bdfc4ea8672c654b45659d9", "committedDate": "2020-04-01T11:15:18Z", "message": "Use token file to write parameters for dev mode from maven config (#7666)\n\n* Move parameters into a super class.\n* Set init parameter values based on the token file data."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19a365fdb5a6b2d181045f80257b4cf2bc122e86", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/19a365fdb5a6b2d181045f80257b4cf2bc122e86", "committedDate": "2020-04-01T11:15:42Z", "message": "Fix pnpm stubbing in test (#7909)\n\nWhen using pnpm in test we need the\n.modules.yaml to not delete node_modules.\n\npackage-lock.json should use given directory\nnot baseDir as we might not be using base.\n\nFixes #7848"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ef4f7120251bb432bf5e5f02cafaf5473568b06", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/8ef4f7120251bb432bf5e5f02cafaf5473568b06", "committedDate": "2020-04-01T08:18:05Z", "message": "Fix pnpm stubbing in test (#7909)\n\nWhen using pnpm in test we need the\n.modules.yaml to not delete node_modules.\n\npackage-lock.json should use given directory\nnot baseDir as we might not be using base.\n\nFixes #7848"}, "afterCommit": {"oid": "19a365fdb5a6b2d181045f80257b4cf2bc122e86", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/19a365fdb5a6b2d181045f80257b4cf2bc122e86", "committedDate": "2020-04-01T11:15:42Z", "message": "Fix pnpm stubbing in test (#7909)\n\nWhen using pnpm in test we need the\n.modules.yaml to not delete node_modules.\n\npackage-lock.json should use given directory\nnot baseDir as we might not be using base.\n\nFixes #7848"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDg4OTYx", "url": "https://github.com/vaadin/flow/pull/7937#pullrequestreview-385488961", "createdAt": "2020-04-01T11:17:34Z", "commit": {"oid": "19a365fdb5a6b2d181045f80257b4cf2bc122e86"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDkwNjg1", "url": "https://github.com/vaadin/flow/pull/7937#pullrequestreview-385490685", "createdAt": "2020-04-01T11:20:17Z", "commit": {"oid": "19a365fdb5a6b2d181045f80257b4cf2bc122e86"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 634, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}