{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5OTQxNzU0", "number": 9391, "title": "fix!: Store in-memory filtering and sorting in component", "bodyText": "In-memory filtering and sorting are now stored directly in component, which gives an opportunity to change it through the data view API for a certain component separately from other components bound to the same data provider.\nRelated-to: #8655", "createdAt": "2020-11-12T14:57:05Z", "url": "https://github.com/vaadin/flow/pull/9391", "merged": true, "mergeCommit": {"oid": "3bc2e60af3600735fc5b188ebb31b48059a13349"}, "closed": true, "closedAt": "2020-11-16T12:35:46Z", "author": {"login": "mshabarov"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbzvGuAH2gAyNTE5OTQxNzU0OjhiNjE0MTQyNDA0ZWQxZWI1ODg5NDAzNTY1NTE3MjU4NzVjZjhkOGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddBBHpAFqTUzMTExODI2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8b614142404ed1eb588940356551725875cf8d8c", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/8b614142404ed1eb588940356551725875cf8d8c", "committedDate": "2020-11-12T14:49:48Z", "message": "fix!: Use data view filter and sorting only to that component (#9315)\n\nIn-memory filtering and sorting are now stored directly in component, which gives an opportunity to change it through the data view API for a certain component separately from other components bound to the same data provider.\n\nFixes #8655\n\n(cherry picked from commit 5b2d4d8259a2efb3de70ea9d38fda18c4979cac6)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1450fe19d136dcb454696ccc113eb0aef18d87a6", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/1450fe19d136dcb454696ccc113eb0aef18d87a6", "committedDate": "2020-11-12T14:54:58Z", "message": "fix: move filter and sorting handling methods to util class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzAyMzY3", "url": "https://github.com/vaadin/flow/pull/9391#pullrequestreview-529302367", "createdAt": "2020-11-12T17:08:06Z", "commit": {"oid": "1450fe19d136dcb454696ccc113eb0aef18d87a6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzowODowNlrOHyE0Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzowODoxMlrOHyE0iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTc1OQ==", "bodyText": "apparently this could be null to remove it ?", "url": "https://github.com/vaadin/flow/pull/9391#discussion_r522269759", "createdAt": "2020-11-12T17:08:06Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Internal utility class used by data view implementations and components to\n+ * simplify the filtering and sorting handling, but not limited to it.\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ */\n+public final class DataViewUtils {\n+\n+    private static final String COMPONENT_IN_MEMORY_FILTER_KEY = \"component-in-memory-filter-key\";\n+    private static final String COMPONENT_IN_MEMORY_SORTING_KEY = \"component-in-memory-sorting-key\";\n+\n+    private DataViewUtils() {\n+        // avoid instantiating utility class\n+    }\n+\n+    /**\n+     * Gets the in-memory filter of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory filter.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializablePredicate<T>> getComponentFilter(\n+            Component component) {\n+        return Optional.ofNullable((SerializablePredicate<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_FILTER_KEY));\n+    }\n+\n+    /**\n+     * Gets the in-memory sort comparator of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the sort comparator is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory sort comparator.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializableComparator<T>> getComponentSortComparator(\n+            Component component) {\n+        return Optional.ofNullable((SerializableComparator<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_SORTING_KEY));\n+    }\n+\n+    /**\n+     * Sets the in-memory filter to a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param filter\n+     *            component's in-memory filter\n+     * @param <T>\n+     *            items type\n+     */\n+    public static <T> void setComponentFilter(Component component,\n+            SerializablePredicate<T> filter) {\n+        ComponentUtil.setData(component, COMPONENT_IN_MEMORY_FILTER_KEY,\n+                filter);\n+    }\n+\n+    /**\n+     * Sets the in-memory sort comparator to a given component instance.\n+     *\n+     * @param component\n+     *            component instance the sort comparator is bound to\n+     * @param sortComparator\n+     *            component's in-memory sort comparator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1450fe19d136dcb454696ccc113eb0aef18d87a6"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTgzNQ==", "bodyText": "apparently this could be null to remove it ?", "url": "https://github.com/vaadin/flow/pull/9391#discussion_r522269835", "createdAt": "2020-11-12T17:08:12Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Internal utility class used by data view implementations and components to\n+ * simplify the filtering and sorting handling, but not limited to it.\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ */\n+public final class DataViewUtils {\n+\n+    private static final String COMPONENT_IN_MEMORY_FILTER_KEY = \"component-in-memory-filter-key\";\n+    private static final String COMPONENT_IN_MEMORY_SORTING_KEY = \"component-in-memory-sorting-key\";\n+\n+    private DataViewUtils() {\n+        // avoid instantiating utility class\n+    }\n+\n+    /**\n+     * Gets the in-memory filter of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory filter.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializablePredicate<T>> getComponentFilter(\n+            Component component) {\n+        return Optional.ofNullable((SerializablePredicate<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_FILTER_KEY));\n+    }\n+\n+    /**\n+     * Gets the in-memory sort comparator of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the sort comparator is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory sort comparator.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializableComparator<T>> getComponentSortComparator(\n+            Component component) {\n+        return Optional.ofNullable((SerializableComparator<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_SORTING_KEY));\n+    }\n+\n+    /**\n+     * Sets the in-memory filter to a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param filter\n+     *            component's in-memory filter\n+     * @param <T>\n+     *            items type\n+     */\n+    public static <T> void setComponentFilter(Component component,\n+            SerializablePredicate<T> filter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1450fe19d136dcb454696ccc113eb0aef18d87a6"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d79914437c7cbb96de3f7d28fafd901d791c8cbf", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/d79914437c7cbb96de3f7d28fafd901d791c8cbf", "committedDate": "2020-11-12T19:22:39Z", "message": "Exclude unnecessary generic type and add more util methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3400f17b6cfbcff17df8398300e38b52cb42710", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/d3400f17b6cfbcff17df8398300e38b52cb42710", "committedDate": "2020-11-12T19:31:28Z", "message": "Clarify javadoc regarding null values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d317dcdb37ff83141b49da4f2a6f933544379f27", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/d317dcdb37ff83141b49da4f2a6f933544379f27", "committedDate": "2020-11-13T07:36:11Z", "message": "Remove unnecessary generic type in util methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d03760c716d80a00553a3cdec8d7aeb334c9d948", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/d03760c716d80a00553a3cdec8d7aeb334c9d948", "committedDate": "2020-11-13T07:50:32Z", "message": "Back to generic type in utils methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5ODc0Njc5", "url": "https://github.com/vaadin/flow/pull/9391#pullrequestreview-529874679", "createdAt": "2020-11-13T08:44:03Z", "commit": {"oid": "d03760c716d80a00553a3cdec8d7aeb334c9d948"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e21c73591a1ad47fdbaea2b90de9080d23c61b02", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/e21c73591a1ad47fdbaea2b90de9080d23c61b02", "committedDate": "2020-11-14T18:54:58Z", "message": "Change callback name to reflect its meaning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dcc49c26d96cd54883dc1f2efa7053db258dab7", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/7dcc49c26d96cd54883dc1f2efa7053db258dab7", "committedDate": "2020-11-14T18:55:11Z", "message": "Merge remote-tracking branch 'origin/master' into 8655-filter-and-sort-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b24cad86d560a5b743baf864ff5fb6648ed99a32", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/b24cad86d560a5b743baf864ff5fb6648ed99a32", "committedDate": "2020-11-16T06:13:25Z", "message": "Fix error message in test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTE4MjYy", "url": "https://github.com/vaadin/flow/pull/9391#pullrequestreview-531118262", "createdAt": "2020-11-16T08:52:10Z", "commit": {"oid": "b24cad86d560a5b743baf864ff5fb6648ed99a32"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4846, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}