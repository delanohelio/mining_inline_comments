{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNzc4MDI4", "number": 8988, "title": "Read template attributes as properties", "bodyText": "Fixes #8974", "createdAt": "2020-09-09T11:34:22Z", "url": "https://github.com/vaadin/flow/pull/8988", "merged": true, "mergeCommit": {"oid": "66fe870c37d5350cebc4bc120a29079ae3201b2c"}, "closed": true, "closedAt": "2020-09-14T08:17:11Z", "author": {"login": "denis-anisimov"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHdV8LgBqjM3NDk5NTk0MTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdIuM5cgFqTQ4NzQ5MjIyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6df8be6e7d5ab6baff2d46652ccd8210bc9c49c9", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/6df8be6e7d5ab6baff2d46652ccd8210bc9c49c9", "committedDate": "2020-09-10T08:14:58Z", "message": "Fix javadoc"}, "afterCommit": {"oid": "e44fb27adef91c129a5dfb3c164fd226b3126521", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/e44fb27adef91c129a5dfb3c164fd226b3126521", "committedDate": "2020-09-10T09:25:08Z", "message": "Fix javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NzgwOTQ0", "url": "https://github.com/vaadin/flow/pull/8988#pullrequestreview-486780944", "createdAt": "2020-09-11T12:56:58Z", "commit": {"oid": "49acd2e76b461dc49be5ae552c5ff900c0848aaa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjo1Njo1OFrOHQdvDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzowMTowM1rOHQd37g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNjQ0NA==", "bodyText": "Typo, should be \"Initialize\"", "url": "https://github.com/vaadin/flow/pull/8988#discussion_r487026444", "createdAt": "2020-09-11T12:56:58Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/InjectableElementInitializer.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.template.internal;\n+\n+import java.util.HashMap;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.dom.Element;\n+\n+/**\n+ * Initializer the template element with data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49acd2e76b461dc49be5ae552c5ff900c0848aaa"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNzc1Mg==", "bodyText": "Is element parameter needed? Seems it could be omitted as this is always called with argument this.element.", "url": "https://github.com/vaadin/flow/pull/8988#discussion_r487027752", "createdAt": "2020-09-11T12:59:17Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/InjectableElementInitializer.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.template.internal;\n+\n+import java.util.HashMap;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.dom.Element;\n+\n+/**\n+ * Initializer the template element with data.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+public class InjectableElementInitializer\n+        implements Consumer<Map<String, String>> {\n+\n+    private final Element element;\n+\n+    private final Class<? extends Component> templateClass;\n+\n+    private static final Map<String, ElementInitializationStrategy> INIT_STRATEGIES = createStategies();\n+    private static final IdentityHashMap<Pattern, ElementInitializationStrategy> PATTERN_STRATEGIES = createPatternStategies();\n+\n+    private static final ElementInitializationStrategy DEFAULT_STRATEGY = new PropertyInitializationStrategy();\n+\n+    /**\n+     * Creates an initializer for the {@code element}.\n+     * \n+     * @param element\n+     *            element to initialize\n+     * @param templateClass\n+     *            the class of the template component\n+     */\n+    public InjectableElementInitializer(Element element,\n+            Class<? extends Component> templateClass) {\n+        this.element = element;\n+        this.templateClass = templateClass;\n+    }\n+\n+    @Override\n+    public void accept(Map<String, String> templateAttributes) {\n+        templateAttributes\n+                .forEach((name, value) -> initialize(element, name, value));\n+    }\n+\n+    private void initialize(Element element, String name, String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49acd2e76b461dc49be5ae552c5ff900c0848aaa"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyODcxOA==", "bodyText": "I got an NPE here when using the attribute-without-value syntax in my template. For example autofocus:\n<vaadin-text-field id=\"textField\" autofocus></vaadin-text-field>\nAlso, how about about ${...} in the attribute? For example:\n<vaadin-text-field id=\"textField\" label=\"${this.dynamicLabel}\"></vaadin-text-field>\nShould it then also not be read to the server side?", "url": "https://github.com/vaadin/flow/pull/8988#discussion_r487028718", "createdAt": "2020-09-11T13:01:03Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/InjectableElementInitializer.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.template.internal;\n+\n+import java.util.HashMap;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.dom.Element;\n+\n+/**\n+ * Initializer the template element with data.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+public class InjectableElementInitializer\n+        implements Consumer<Map<String, String>> {\n+\n+    private final Element element;\n+\n+    private final Class<? extends Component> templateClass;\n+\n+    private static final Map<String, ElementInitializationStrategy> INIT_STRATEGIES = createStategies();\n+    private static final IdentityHashMap<Pattern, ElementInitializationStrategy> PATTERN_STRATEGIES = createPatternStategies();\n+\n+    private static final ElementInitializationStrategy DEFAULT_STRATEGY = new PropertyInitializationStrategy();\n+\n+    /**\n+     * Creates an initializer for the {@code element}.\n+     * \n+     * @param element\n+     *            element to initialize\n+     * @param templateClass\n+     *            the class of the template component\n+     */\n+    public InjectableElementInitializer(Element element,\n+            Class<? extends Component> templateClass) {\n+        this.element = element;\n+        this.templateClass = templateClass;\n+    }\n+\n+    @Override\n+    public void accept(Map<String, String> templateAttributes) {\n+        templateAttributes\n+                .forEach((name, value) -> initialize(element, name, value));\n+    }\n+\n+    private void initialize(Element element, String name, String value) {\n+        if (name.endsWith(\"$\")) {\n+            // this is an attribute binding, ignore it since we don't support\n+            // bindings: the value is not an expression\n+            getLogger().debug(\n+                    \"Template {} contains an attribute {} in element {} which \"\n+                            + \"ends with $ and ignored by initialization since this is an attribute binding\",\n+                    templateClass.getSimpleName(), name, element.getTag());\n+            return;\n+        }\n+        if (value.contains(\"{{\") && value.contains(\"}}\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49acd2e76b461dc49be5ae552c5ff900c0848aaa"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8aa53ca4e4152370a122defba4285f265fc0c219", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/8aa53ca4e4152370a122defba4285f265fc0c219", "committedDate": "2020-09-11T16:18:54Z", "message": "Refactor injectable element initialization to reuse the logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22e58c56079925f01de72c7933a6f978d26a9c60", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/22e58c56079925f01de72c7933a6f978d26a9c60", "committedDate": "2020-09-11T16:18:54Z", "message": "Refactor internal initialization logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6a21f61c0b752eba1ae7f7cb8b629d077f7562e", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/a6a21f61c0b752eba1ae7f7cb8b629d077f7562e", "committedDate": "2020-09-11T16:18:55Z", "message": "Add test for element initializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb5b14fb7892eb3d114714c7c4f0c88d5e2dd0eb", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/eb5b14fb7892eb3d114714c7c4f0c88d5e2dd0eb", "committedDate": "2020-09-11T16:18:55Z", "message": "Correct javadocs and serializable test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99d61c001823ee950a05d1a4399cf0c5c4900ef6", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/99d61c001823ee950a05d1a4399cf0c5c4900ef6", "committedDate": "2020-09-11T16:18:56Z", "message": "Set global attributes as attributes and not as properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0f2bf6edf2351a4e7a000b7dd99cc3b504ef49e", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/f0f2bf6edf2351a4e7a000b7dd99cc3b504ef49e", "committedDate": "2020-09-11T16:18:56Z", "message": "Set file header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "476a5646254cf6ed75929cd9ea49d29399ec4d01", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/476a5646254cf6ed75929cd9ea49d29399ec4d01", "committedDate": "2020-09-11T16:18:56Z", "message": "Fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25c266617b408f52c6c1896830b27d64938ab529", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/25c266617b408f52c6c1896830b27d64938ab529", "committedDate": "2020-09-11T16:18:57Z", "message": "Set global attributes as attributes and not as properties\n\nConflicts:\n\tflow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55d235fcf738c42e9a3b4bd4e7cc431d0f93774b", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/55d235fcf738c42e9a3b4bd4e7cc431d0f93774b", "committedDate": "2020-09-11T16:18:57Z", "message": "remove new line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f410fe515cefd760be4e571afb3ec60b380fe20", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/3f410fe515cefd760be4e571afb3ec60b380fe20", "committedDate": "2020-09-11T16:18:57Z", "message": "Revert unrelated changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae1716ac66703e5fd4204475c089f79ccb7b069b", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/ae1716ac66703e5fd4204475c089f79ccb7b069b", "committedDate": "2020-09-11T16:58:55Z", "message": "Refactor: distinguish injectable initializers for Polymer and Lit\nImplement initialization for Lit templates\nCheck the attribute value for dynamic declaration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49acd2e76b461dc49be5ae552c5ff900c0848aaa", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/49acd2e76b461dc49be5ae552c5ff900c0848aaa", "committedDate": "2020-09-10T09:30:05Z", "message": "Revert unrelated changes"}, "afterCommit": {"oid": "ae1716ac66703e5fd4204475c089f79ccb7b069b", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/ae1716ac66703e5fd4204475c089f79ccb7b069b", "committedDate": "2020-09-11T16:58:55Z", "message": "Refactor: distinguish injectable initializers for Polymer and Lit\nImplement initialization for Lit templates\nCheck the attribute value for dynamic declaration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9aad9b10ab77a716c4162a0d2b97b354d88062c0", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/9aad9b10ab77a716c4162a0d2b97b354d88062c0", "committedDate": "2020-09-11T17:20:19Z", "message": "Exclude classes from serializable test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7cb291bbe510f91ce6a144b32a829dc5e151600", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/f7cb291bbe510f91ce6a144b32a829dc5e151600", "committedDate": "2020-09-13T14:10:26Z", "message": "Add unit test for Lit template and correct the code\n\n* Correct parser usage in CTORs\n* Use boolean attribute\n* Add headers for files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caeb8dc7a499a8a5ccf3514a278401c941b65277", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/caeb8dc7a499a8a5ccf3514a278401c941b65277", "committedDate": "2020-09-14T05:57:00Z", "message": "Add IT for Lit template attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36a1ed08d32be13296f2122fe76fc510a016ed34", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/36a1ed08d32be13296f2122fe76fc510a016ed34", "committedDate": "2020-09-14T06:07:34Z", "message": "Satisfy Sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3cb38b43a3f7c6232de694181c344e3165caf97", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/a3cb38b43a3f7c6232de694181c344e3165caf97", "committedDate": "2020-09-14T06:39:12Z", "message": "Be aware of null attribute values."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5341d876046fdf269f10fd86b46b35e0823857b", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/a5341d876046fdf269f10fd86b46b35e0823857b", "committedDate": "2020-09-14T07:19:41Z", "message": "Recognize boolean attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a487d82a1f8d412599a4bea1da44ca2104e58498", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/a487d82a1f8d412599a4bea1da44ca2104e58498", "committedDate": "2020-09-14T07:25:38Z", "message": "Make Sonar happy: use prefix as a parameter in debug method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDkyMjI3", "url": "https://github.com/vaadin/flow/pull/8988#pullrequestreview-487492227", "createdAt": "2020-09-14T07:38:21Z", "commit": {"oid": "a487d82a1f8d412599a4bea1da44ca2104e58498"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 161, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}