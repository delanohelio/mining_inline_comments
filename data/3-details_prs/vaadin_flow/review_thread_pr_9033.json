{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MjkxMTA3", "number": 9033, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTowOToyNVrOElkLFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODo0OTo0OVrOEl_Dyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODI1NDMwOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTowOToyNVrOHVGvww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNjowNzoxM1rOHVrThQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg5MjY3NQ==", "bodyText": "Good catch but where is the unit test ?", "url": "https://github.com/vaadin/flow/pull/9033#discussion_r491892675", "createdAt": "2020-09-21T09:09:25Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -541,7 +541,7 @@ public void setDefinedSize(boolean definedSize) {\n              * estimated size. If there was a previous defined size used, then\n              * that is kept until a reset occurs.\n              */\n-            if (requestedRange.contains(assumedSize)) {\n+            if (requestedRange.contains(assumedSize - 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667e30c24b5b7cd06ac5027da6d77f4e83fc3538"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ5MTY1Mw==", "bodyText": "Unit test added", "url": "https://github.com/vaadin/flow/pull/9033#discussion_r492491653", "createdAt": "2020-09-22T06:07:13Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -541,7 +541,7 @@ public void setDefinedSize(boolean definedSize) {\n              * estimated size. If there was a previous defined size used, then\n              * that is kept until a reset occurs.\n              */\n-            if (requestedRange.contains(assumedSize)) {\n+            if (requestedRange.contains(assumedSize - 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg5MjY3NQ=="}, "originalCommit": {"oid": "667e30c24b5b7cd06ac5027da6d77f4e83fc3538"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjY1OTE1OnYy", "diffSide": "RIGHT", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/DataCommunicatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODo0OTo0NlrOHVwP1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1MzoyMVrOHWykQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MjYzMA==", "bodyText": "Could have been nice to add a comment here that states that // the size will be 100 so it makes it very clear how this test works", "url": "https://github.com/vaadin/flow/pull/9033#discussion_r492572630", "createdAt": "2020-09-22T08:49:46Z", "author": {"login": "pleku"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/DataCommunicatorTest.java", "diffHunk": "@@ -1072,6 +1073,30 @@ public void itemCountChangeEvent_estimatedCount_estimateUsedUntilEndReached() {\n         Assert.assertFalse(event.isItemCountEstimated());\n     }\n \n+    @Test\n+    public void setDefinedSize_rangeEndEqualsAssumedSize_flushRequested() {\n+        // trigger client communication in order to initialise it and avoid\n+        // infinite loop inside 'requestFlush()'\n+        fakeClientCommunication();\n+\n+        StateNode stateNode = Mockito.spy(element.getNode());\n+        DataCommunicator<Item> dataCommunicator = new DataCommunicator<>(\n+                dataGenerator, arrayUpdater, data -> {}, stateNode);\n+        dataCommunicator.setPageSize(pageSize);\n+        dataCommunicator.setDataProvider(createDataProvider(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f236d1a0974014ff221a8456655bff22ac8e1a3c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1OTIwMw==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/9033#discussion_r493659203", "createdAt": "2020-09-23T14:53:21Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/DataCommunicatorTest.java", "diffHunk": "@@ -1072,6 +1073,30 @@ public void itemCountChangeEvent_estimatedCount_estimateUsedUntilEndReached() {\n         Assert.assertFalse(event.isItemCountEstimated());\n     }\n \n+    @Test\n+    public void setDefinedSize_rangeEndEqualsAssumedSize_flushRequested() {\n+        // trigger client communication in order to initialise it and avoid\n+        // infinite loop inside 'requestFlush()'\n+        fakeClientCommunication();\n+\n+        StateNode stateNode = Mockito.spy(element.getNode());\n+        DataCommunicator<Item> dataCommunicator = new DataCommunicator<>(\n+                dataGenerator, arrayUpdater, data -> {}, stateNode);\n+        dataCommunicator.setPageSize(pageSize);\n+        dataCommunicator.setDataProvider(createDataProvider(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MjYzMA=="}, "originalCommit": {"oid": "f236d1a0974014ff221a8456655bff22ac8e1a3c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjY1OTMwOnYy", "diffSide": "RIGHT", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/DataCommunicatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODo0OTo0OVrOHVwP8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1MzoyOFrOHWyksg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MjY1Ng==", "bodyText": "Like (most?) other tests here, shouldn't this very that the (estimated) count is increased properly too (which is the desired outcome in terms of internal DC logic) instead of just relying that call to flush has been done ?", "url": "https://github.com/vaadin/flow/pull/9033#discussion_r492572656", "createdAt": "2020-09-22T08:49:49Z", "author": {"login": "pleku"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/DataCommunicatorTest.java", "diffHunk": "@@ -1072,6 +1073,30 @@ public void itemCountChangeEvent_estimatedCount_estimateUsedUntilEndReached() {\n         Assert.assertFalse(event.isItemCountEstimated());\n     }\n \n+    @Test\n+    public void setDefinedSize_rangeEndEqualsAssumedSize_flushRequested() {\n+        // trigger client communication in order to initialise it and avoid\n+        // infinite loop inside 'requestFlush()'\n+        fakeClientCommunication();\n+\n+        StateNode stateNode = Mockito.spy(element.getNode());\n+        DataCommunicator<Item> dataCommunicator = new DataCommunicator<>(\n+                dataGenerator, arrayUpdater, data -> {}, stateNode);\n+        dataCommunicator.setPageSize(pageSize);\n+        dataCommunicator.setDataProvider(createDataProvider(), null);\n+        // Trigger flush() to set the assumedSize\n+        fakeClientCommunication();\n+\n+        dataCommunicator.setRequestedRange(0, 100);\n+        // clean flushRequest\n+        fakeClientCommunication();\n+\n+        Mockito.reset(stateNode);\n+        dataCommunicator.setDefinedSize(false);\n+        // Verify that requestFlush has been invoked\n+        Mockito.verify(stateNode).runWhenAttached(Mockito.anyObject());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f236d1a0974014ff221a8456655bff22ac8e1a3c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1OTMxNA==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/9033#discussion_r493659314", "createdAt": "2020-09-23T14:53:28Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/DataCommunicatorTest.java", "diffHunk": "@@ -1072,6 +1073,30 @@ public void itemCountChangeEvent_estimatedCount_estimateUsedUntilEndReached() {\n         Assert.assertFalse(event.isItemCountEstimated());\n     }\n \n+    @Test\n+    public void setDefinedSize_rangeEndEqualsAssumedSize_flushRequested() {\n+        // trigger client communication in order to initialise it and avoid\n+        // infinite loop inside 'requestFlush()'\n+        fakeClientCommunication();\n+\n+        StateNode stateNode = Mockito.spy(element.getNode());\n+        DataCommunicator<Item> dataCommunicator = new DataCommunicator<>(\n+                dataGenerator, arrayUpdater, data -> {}, stateNode);\n+        dataCommunicator.setPageSize(pageSize);\n+        dataCommunicator.setDataProvider(createDataProvider(), null);\n+        // Trigger flush() to set the assumedSize\n+        fakeClientCommunication();\n+\n+        dataCommunicator.setRequestedRange(0, 100);\n+        // clean flushRequest\n+        fakeClientCommunication();\n+\n+        Mockito.reset(stateNode);\n+        dataCommunicator.setDefinedSize(false);\n+        // Verify that requestFlush has been invoked\n+        Mockito.verify(stateNode).runWhenAttached(Mockito.anyObject());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MjY1Ng=="}, "originalCommit": {"oid": "f236d1a0974014ff221a8456655bff22ac8e1a3c"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3072, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}