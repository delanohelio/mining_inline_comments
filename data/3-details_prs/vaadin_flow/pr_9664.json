{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNjQ1MzU3", "number": 9664, "title": "Merge master to offline", "bodyText": "Merge, do not squash", "createdAt": "2020-12-15T19:55:20Z", "url": "https://github.com/vaadin/flow/pull/9664", "merged": true, "mergeCommit": {"oid": "093c95cc54b32c08a62aa781f7d3154dea46dc37"}, "closed": true, "closedAt": "2020-12-16T19:11:49Z", "author": {"login": "haijian-vaadin"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdh45UxAH2gAyNTQwNjQ1MzU3OjIxNmRkNTMxYzNlMTNmN2RjZWZiNTM5NGQ1MjRlZDVmMzhlYTQyZGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmy0dxgFqTU1Mzk0NTMyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "216dd531c3e13f7dcefb5394d524ed5f38ea42df", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/216dd531c3e13f7dcefb5394d524ed5f38ea42df", "committedDate": "2020-12-01T12:14:02Z", "message": "Fix: Update Lit bundle parser regex. (#9546)\n\nNow the pattern will not fail with a StackOverflowException\r\nas we will search from the start character accepting\r\nany characters until we reach the caught start character with ;"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae47abc0ee03aafe3dbbe1f503804a9db8cf0a92", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/ae47abc0ee03aafe3dbbe1f503804a9db8cf0a92", "committedDate": "2020-12-02T06:43:01Z", "message": "fix: Enable lit css importing (#9550)\n\nFixes #9532"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "079c7d260a42ee87c474844ef93bc2275ce44b3a", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/079c7d260a42ee87c474844ef93bc2275ce44b3a", "committedDate": "2020-12-02T11:33:35Z", "message": "fix: use provided executor for frontend tools (#9553)\n\nfixes vaadin/spring#691"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a635dc68edca91cb74af6dec4f4150e756fbf579", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/a635dc68edca91cb74af6dec4f4150e756fbf579", "committedDate": "2020-12-04T07:07:48Z", "message": "feat: Resource handling to not need plugin copying (#9558)\n\nFixed the url handling so that theme resources\r\nget prepended with theme/[themeName] while\r\nhaving the correct absolute path. With this we can handle\r\nthese url resources with the css-loader which in turn\r\nleads to file-loader gettign the files for copying.\r\n\r\nExternal url are still not touched in any way.\r\n\r\npart of #9410 and #9533"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5957bf93ff6bab0c93b2d2744e5f7f7477141a4d", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/5957bf93ff6bab0c93b2d2744e5f7f7477141a4d", "committedDate": "2020-12-04T13:08:05Z", "message": "fix: file-loader name for windows execution (#9575)\n\nWindows file path separator \\ should not\r\nbe used as it will result in %0B when it should\r\nbe /"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16f75856e1297096b4974c0e5fed1ec31f8cbda9", "author": {"user": {"login": "KellyShao", "name": "Kelly Shao"}}, "url": "https://github.com/vaadin/flow/commit/16f75856e1297096b4974c0e5fed1ec31f8cbda9", "committedDate": "2020-12-04T15:14:52Z", "message": "test: Fixed flaky tests caused by variable ui in ValidatorTestBase.java (#9524)\n\nAdded a ui variable in the ValidatorTestBase class to attach strong reference, in order to avoid garbage collecting it during the test run."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dedb8dd1e643e09bc977ffc0c0a6c4a3928b38ed", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/dedb8dd1e643e09bc977ffc0c0a6c4a3928b38ed", "committedDate": "2020-12-07T07:49:46Z", "message": "refactor: get Executor service from Lookup instead init params (#9572)\n\nfixes #9570"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c60b51bd775a036982af580998e89097e165751c", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/c60b51bd775a036982af580998e89097e165751c", "committedDate": "2020-12-07T08:25:43Z", "message": "fix: Add missing refreshAll method to data view\n\nAdds the missed refresh all method to data view API.\r\n\r\nFixes: #9574"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "152cdcb0474fecff28fa5237d847a131843ba1ae", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/152cdcb0474fecff28fa5237d847a131843ba1ae", "committedDate": "2020-12-07T09:40:17Z", "message": "chore: Update contributing guide with setup info (#9576)\n\nThe contribution guide was missing the project setup information.\r\n\r\nThere were outdated instructions in the readme, which was on the other hand not up to date and only had instructions for Eclipse. Now everything is in contribution guide and readme is short and simple, pointing to contribution guide for those who want to work with the project."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1991961ce7779aec6b81800ab254867f6c4b5295", "author": {"user": {"login": "fluorumlabs", "name": "Artem Godin"}}, "url": "https://github.com/vaadin/flow/commit/1991961ce7779aec6b81800ab254867f6c4b5295", "committedDate": "2020-12-07T09:59:32Z", "message": "fix!: Make VaadinService.dependencyFilters unmodifiable\n\nWhile the change is backwards compatible from API perspective, it could be considered a behavior change although there is quite low risk of exposure in apps. Thus targeting 2.5 for the LTS and the recently released 5.0."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3735611f8d945b13cb1d40ffceb5b217d48d46e", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/a3735611f8d945b13cb1d40ffceb5b217d48d46e", "committedDate": "2020-12-08T10:08:10Z", "message": "fix: encode attribute value during transfer from embedded web app (#9583)\n\nencode attribute value during transfer from embedded web app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ba194f354ea4ee039324e7ca9d42eece5a50708", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/4ba194f354ea4ee039324e7ca9d42eece5a50708", "committedDate": "2020-12-08T11:04:24Z", "message": "chore: move fusion endpoint code to fusion-endpoint module (#9499)\n\nFixes: #9354\r\nmove fusion code to a separate fusion-endpoint module, so that the fusion dependencies which are not OSGi compatible can be removed from the flow-server module.\r\n\r\n- move the code in the connect package  to fusion-server\r\n- removed the non OSGi compatible packages from the bnd file in flow-server\r\n- change  `TaskGenerateOpenApi` and `TaskGenerateConnect` to interfaces in flow-server, have the implementations in fusion-endpoint since they are using code inside the connect package\r\n- Move endpoint related tests:\r\n   - from NodeTasksTest to  NodeTasksEndpointTest, \r\n   - from DevModeInitializerTest to DevModeInitializerEndpointTest \r\n- Add a `LookupImpl` class in the `flow-maven-plugin` module for finding endpoint services.\r\n- Introduce a `isInstantiableService`method in `ReflectTools`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd84a1d4a7932f92c2f08f30cfe015ec59969a73", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/bd84a1d4a7932f92c2f08f30cfe015ec59969a73", "committedDate": "2020-12-08T11:38:06Z", "message": "feat: Embedded component appTheme support (#9588)\n\nAdd support for application theme with\r\nembedded components.\r\n\r\nFixes #8564"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb5bc35d9abf445406f1087acaaec26aeb906263", "author": {"user": {"login": "tanbt", "name": "Tan Bui"}}, "url": "https://github.com/vaadin/flow/commit/cb5bc35d9abf445406f1087acaaec26aeb906263", "committedDate": "2020-12-09T08:00:51Z", "message": "feat: Enable importing CSS from node_modules (#9543)\n\nEnable using CSS files from installed node_modules by adding 'importCss' to theme/my-theme/theme.json.\r\n\r\nFixes #9410"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89190a5a6d173bd7bec86306e658d08bc4eaab6c", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/89190a5a6d173bd7bec86306e658d08bc4eaab6c", "committedDate": "2020-12-09T10:07:10Z", "message": "refactor: simplify ResourceProvider (#9609)\n\nfixes #9605"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0a6e84eda0b2e838ef05bb0978ecba6707921c3", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/f0a6e84eda0b2e838ef05bb0978ecba6707921c3", "committedDate": "2020-12-09T13:04:44Z", "message": "chore: add internal classes to access classloader and init context (#9618)\n\n* chore: add internal classes to access classloader and init context\r\n\r\nrelated to #9601 : needed to restore OSGi resource provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93a0be290e3d4ed6c9328d5503ecd80463faf64a", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/93a0be290e3d4ed6c9328d5503ecd80463faf64a", "committedDate": "2020-12-09T20:31:03Z", "message": "fix: loading indicator visible and isActive true while endpoint fetch (#9593)\n\n* fix: loading indicator visible and isActive true while endpoint fetch\r\n\r\n* Clarified code and added test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5703853db8142ea2f6ecf928fa1b6c91ad42739f", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/5703853db8142ea2f6ecf928fa1b6c91ad42739f", "committedDate": "2020-12-10T07:49:49Z", "message": "fix: theme files can now be referenced as theme/theme-name (#9590)\n\nTheme files are now copied under theme/[theme-name]\r\nand can be referenced by theme/them-name/path/file.ff\r\neven though they are located at VAADIN/static\r\n\r\nFixes: #9405 and #9535"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5d2162833064dd0ee15af47a68d4a3a66b24765", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/c5d2162833064dd0ee15af47a68d4a3a66b24765", "committedDate": "2020-12-10T09:36:04Z", "message": "Fix: Generated theme.js is now named theme.generated.js (#9616)\n\nmy-theme.js is now generated as my-theme.generated.js\r\n\r\nFixes #9595"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bb6181293d9f29f333d7977985f4c719af0e06a", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/7bb6181293d9f29f333d7977985f4c719af0e06a", "committedDate": "2020-12-10T12:20:17Z", "message": "Feat: Check that npm resources are available (#9617)\n\nCheck that we have named npm resources\r\navailable or throw an exception informing\r\nthe user to install it using a NpmPackage\r\nannotation or manually with (p)npm i\r\n\r\nFixes #9615"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3298e3e973f79c0f93687cd963fad55844eb27b", "author": {"user": {"login": "taefi", "name": "Soroosh Taefi"}}, "url": "https://github.com/vaadin/flow/commit/f3298e3e973f79c0f93687cd963fad55844eb27b", "committedDate": "2020-12-11T05:20:03Z", "message": "refactor: rename the app-theme root folder from theme to themes (#9626)\n\nFixes #9611"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbfa1e7e655e35f5c2d280248899eab3e92ac0e7", "author": {"user": {"login": "taefi", "name": "Soroosh Taefi"}}, "url": "https://github.com/vaadin/flow/commit/bbfa1e7e655e35f5c2d280248899eab3e92ac0e7", "committedDate": "2020-12-11T12:15:33Z", "message": "refactor: refine renaming and incorrect paths in ThemeIT (#9634)\n\n* rename app-theme root folder to themes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df7a5f80b8c77f5d1505ecd6aea7e1adf70141bf", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/df7a5f80b8c77f5d1505ecd6aea7e1adf70141bf", "committedDate": "2020-12-14T08:01:11Z", "message": "chore: fix flaky tests that depends on mock count (#9631)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31796bb835221fcbd567bc3779d7c5b53178c043", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/31796bb835221fcbd567bc3779d7c5b53178c043", "committedDate": "2020-12-15T07:24:46Z", "message": "chore: create deepClean profile (#9311)\n\nUsing the deepClean profile one can\r\nclean up all the generated files and\r\nnode_modules folders from all test modules."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e30cf1182b3b61c83896ddeec42b88ba85b6b7a", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/6e30cf1182b3b61c83896ddeec42b88ba85b6b7a", "committedDate": "2020-12-15T13:12:49Z", "message": "test: add document.css level styles tests (#9646)\n\nAdds a tests for checking that the document.css file is injected to the document scope and not injected to embedded element shadow root.\r\n\r\nFixes #9552"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b89af1bd28f83daa86f7c149659af611cec65aed", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/b89af1bd28f83daa86f7c149659af611cec65aed", "committedDate": "2020-12-15T19:44:17Z", "message": "Merge branch 'master' into merge-master-to-offline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31c0d8cdc1fa03346494b3b36d961e01f21ab7f2", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/31c0d8cdc1fa03346494b3b36d961e01f21ab7f2", "committedDate": "2020-12-15T19:45:50Z", "message": "remove legacy test from Flow.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29c8a30f5e57e742b074ed80b26efd84df6e0387", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/29c8a30f5e57e742b074ed80b26efd84df6e0387", "committedDate": "2020-12-15T19:54:29Z", "message": "chore: avoid race condition in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53ef27adddd8bbd68d6f99d954f953ca0824a114", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/53ef27adddd8bbd68d6f99d954f953ca0824a114", "committedDate": "2020-12-15T21:40:04Z", "message": "fix: set file-loader to use VAADIN/static/ prefix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODgzMzU0", "url": "https://github.com/vaadin/flow/pull/9664#pullrequestreview-553883354", "createdAt": "2020-12-16T16:48:33Z", "commit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODozM1rOIHO-1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODozM1rOIHO-1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjQwNA==", "bodyText": "Replace this if-then-else statement by a single return statement.", "url": "https://github.com/vaadin/flow/pull/9664#discussion_r544456404", "createdAt": "2020-12-16T16:48:33Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ReflectTools.java", "diffHunk": "@@ -842,6 +842,38 @@ public static Object getAnnotationMethodValue(Annotation annotation,\n         return Optional.empty();\n     }\n \n+    /**\n+     * Check if a class can be instantiated via its default \n+     * constructor via reflection.\n+     * \n+     * @param clazz\n+     *            the class to check\n+     * @return true if the class can be instantiated, otherwise false\n+     */\n+    public static boolean isInstantiableService(Class<?> clazz) {\n+        if (clazz.isInterface()) {\n+          return false;\n+        }\n+        if (clazz.isSynthetic()) {\n+          return false;\n+        }\n+        if (Modifier.isAbstract(clazz.getModifiers())) {\n+          return false;\n+        }\n+        if (!Modifier.isPublic(clazz.getModifiers())) {\n+          return false;\n+        }\n+        Optional<Constructor<?>> constructor = Stream.of(clazz.getConstructors())\n+            .filter(ctor -> ctor.getParameterCount() == 0).findFirst();\n+        if (!constructor.isPresent() || !Modifier.isPublic(constructor.get().getModifiers())) {\n+          return false;\n+        }\n+        if (clazz.getEnclosingClass() != null && !Modifier.isStatic(clazz.getModifiers())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODgzMzcx", "url": "https://github.com/vaadin/flow/pull/9664#pullrequestreview-553883371", "createdAt": "2020-12-16T16:48:34Z", "commit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODozNFrOIHO-3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODozNFrOIHO-3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjQxNA==", "bodyText": "Remove this use of \"Thread.sleep()\".", "url": "https://github.com/vaadin/flow/pull/9664#discussion_r544456414", "createdAt": "2020-12-16T16:48:34Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java", "diffHunk": "@@ -567,13 +571,14 @@ public void start_twoInstances_secondInstanceUsesAnotherPort()\n         // since the timeout is quite big the server port still should be\n         // available and the second instance should try to reuse it\n \n-        DevModeHandler.start(0, configuration, npmFolder,\n+        DevModeHandler.start(0, createDevModeLookup(), npmFolder,\n                 CompletableFuture.completedFuture(null));\n \n         // make checks only if webpack has not yet completed\n \n-        DevModeHandler anotherHandler = DevModeHandler.start(0, configuration,\n-                npmFolder, CompletableFuture.completedFuture(null));\n+        DevModeHandler anotherHandler = DevModeHandler.start(0,\n+                createDevModeLookup(), npmFolder,\n+                CompletableFuture.completedFuture(null));\n \n         while (handler.getPort() == 0) {\n             Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "originalPosition": 309}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODgzMzkx", "url": "https://github.com/vaadin/flow/pull/9664#pullrequestreview-553883391", "createdAt": "2020-12-16T16:48:35Z", "commit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODozNVrOIHO-5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODozNVrOIHO-5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjQyMw==", "bodyText": "A \"NullPointerException\" could be thrown; \"lookup\" is nullable here.", "url": "https://github.com/vaadin/flow/pull/9664#discussion_r544456423", "createdAt": "2020-12-16T16:48:35Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DevModeInitializer.java", "diffHunk": "@@ -377,34 +385,39 @@ public static void initDevModeHandler(Set<Class<?>> classes,\n                 .withEmbeddableWebComponents(true).enablePnpm(enablePnpm)\n                 .withHomeNodeExecRequired(useHomeNodeExec).build();\n \n-        CompletableFuture<Void> runNodeTasks = CompletableFuture\n-                .runAsync(() -> {\n-                    try {\n-                        tasks.execute();\n-\n-                        FallbackChunk chunk = FrontendUtils\n-                                .readFallbackChunk(tokenFileData);\n-                        if (chunk != null) {\n-                            vaadinContext.setAttribute(chunk);\n-                        }\n-                    } catch (ExecutionFailedException exception) {\n-                        log().debug(\n-                                \"Could not initialize dev mode handler. One of the node tasks failed\",\n-                                exception);\n-                        throw new CompletionException(exception);\n-                    }\n-                });\n-\n-        DevModeHandler.start(config, builder.npmFolder, runNodeTasks);\n+        // Check whether executor is provided by the caller (framework)\n+        Executor service = lookup.lookup(Executor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODgzNDA1", "url": "https://github.com/vaadin/flow/pull/9664#pullrequestreview-553883405", "createdAt": "2020-12-16T16:48:36Z", "commit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODozNlrOIHO-8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODozNlrOIHO-8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjQzNA==", "bodyText": "Remove this use of \"DeprecatedPolymerPublishedEventHandler\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9664#discussion_r544456434", "createdAt": "2020-12-16T16:48:36Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/LookupInitializer.java", "diffHunk": "@@ -56,7 +57,8 @@\n  *\n  */\n @HandlesTypes({ ResourceProvider.class, InstantiatorFactory.class,\n-        DeprecatedPolymerPublishedEventHandler.class })\n+        DeprecatedPolymerPublishedEventHandler.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODgzNDI0", "url": "https://github.com/vaadin/flow/pull/9664#pullrequestreview-553883424", "createdAt": "2020-12-16T16:48:37Z", "commit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODozN1rOIHO_AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODozN1rOIHO_AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjQ0OQ==", "bodyText": "A \"Set\" cannot contain a \"Class\"", "url": "https://github.com/vaadin/flow/pull/9664#discussion_r544456449", "createdAt": "2020-12-16T16:48:37Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/di/Lookup.java", "diffHunk": "@@ -89,4 +104,91 @@\n      *         returned)\n      */\n     <T> Collection<T> lookupAll(Class<T> serviceClass);\n+\n+    /**\n+     * Creates a lookup which contains (only) the provided {@code service} as\n+     * instance of given {@code serviceTypes}.\n+     * <p>\n+     * This method may be used to create a temporary lookup which then can be\n+     * used to extend an existing lookup via {@link #compose(Lookup, Lookup)}.\n+     * \n+     * @param <T>\n+     *            the service type\n+     * @param service\n+     *            the service object\n+     * @param serviceTypes\n+     *            the supertypes of the service which may be used to access the\n+     *            service\n+     * @return a lookup initialized with the given {@code service}\n+     */\n+    @SafeVarargs\n+    static <T> Lookup of(T service, Class<? super T>... serviceTypes) {\n+        Objects.requireNonNull(service);\n+        Set<Class<? super T>> services = Stream.of(serviceTypes).peek(type -> {\n+            if (!type.isInstance(service)) {\n+                throw new IllegalArgumentException(\n+                        \"Service type\" + service.getClass().getName()\n+                                + \" is not a subtype of \" + type.getName());\n+            }\n+        }).collect(Collectors.toSet());\n+        return new Lookup() {\n+\n+            @Override\n+            public <U> Collection<U> lookupAll(Class<U> serviceClass) {\n+                U service = lookup(serviceClass);\n+                return service == null ? Collections.emptyList()\n+                        : Collections.singleton(service);\n+            }\n+\n+            @Override\n+            public <U> U lookup(Class<U> serviceClass) {\n+                if (services.contains(serviceClass)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODgzNDQ1", "url": "https://github.com/vaadin/flow/pull/9664#pullrequestreview-553883445", "createdAt": "2020-12-16T16:48:39Z", "commit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODozOVrOIHO_Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODozOVrOIHO_Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjQ2Ng==", "bodyText": "Replace this lambda with a method reference.", "url": "https://github.com/vaadin/flow/pull/9664#discussion_r544456466", "createdAt": "2020-12-16T16:48:39Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java", "diffHunk": "@@ -513,4 +520,22 @@ public void destroy() {\n         getService().destroy();\n     }\n \n+    private VaadinServletContext initializeContext() {\n+        ServletContext servletContext = getServletConfig().getServletContext();\n+        VaadinServletContext vaadinServletContext = new VaadinServletContext(\n+                servletContext);\n+        // ensure the web application classloader is available via context\n+        ApplicationClassLoaderAccess access = () -> servletContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODgzNDYz", "url": "https://github.com/vaadin/flow/pull/9664#pullrequestreview-553883463", "createdAt": "2020-12-16T16:48:40Z", "commit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODo0MFrOIHO_IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODo0MFrOIHO_IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjQ4MA==", "bodyText": "Remove the declaration of thrown exception 'java.io.UnsupportedEncodingException', as it cannot be thrown from method's body.", "url": "https://github.com/vaadin/flow/pull/9664#discussion_r544456480", "createdAt": "2020-12-16T16:48:40Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java", "diffHunk": "@@ -378,16 +379,27 @@ private void transferAttribute(Writer writer, String elementRef,\n      * @param path\n      *            original resource path\n      * @return new resource path, relative to basePath\n+     * @throws UnsupportedEncodingException\n      */\n-    protected String modifyPath(String basePath, String path) {\n+    protected String modifyPath(String basePath, String path)\n+            throws UnsupportedEncodingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODgzNDg0", "url": "https://github.com/vaadin/flow/pull/9664#pullrequestreview-553883484", "createdAt": "2020-12-16T16:48:40Z", "commit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODo0MVrOIHO_Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODo0MVrOIHO_Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjQ5OQ==", "bodyText": "Either re-interrupt this method or rethrow the \"InterruptedException\".", "url": "https://github.com/vaadin/flow/pull/9664#discussion_r544456499", "createdAt": "2020-12-16T16:48:41Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -712,8 +730,10 @@ private boolean doStartWebpack(DeploymentConfiguration config,\n             long ms = (System.nanoTime() - start) / 1000000;\n             getLogger().info(LOG_END, ms);\n             return true;\n-        } catch (IOException | InterruptedException e) {\n+        } catch (IOException e) {\n             getLogger().error(\"Failed to start the webpack process\", e);\n+        } catch (InterruptedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "originalPosition": 207}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODgzNTAx", "url": "https://github.com/vaadin/flow/pull/9664#pullrequestreview-553883501", "createdAt": "2020-12-16T16:48:41Z", "commit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODo0MVrOIHO_Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODo0MVrOIHO_Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjUwNw==", "bodyText": "Make \"lookup\" transient or serializable.", "url": "https://github.com/vaadin/flow/pull/9664#discussion_r544456507", "createdAt": "2020-12-16T16:48:41Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java", "diffHunk": "@@ -130,51 +131,54 @@\n          */\n         private URI nodeDownloadRoot = URI.create(NodeInstaller.DEFAULT_NODEJS_DOWNLOAD_ROOT);\n \n+        private Lookup lookup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODgzNTEz", "url": "https://github.com/vaadin/flow/pull/9664#pullrequestreview-553883513", "createdAt": "2020-12-16T16:48:42Z", "commit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODo0MlrOIHO_Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODo0MlrOIHO_Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjUxNQ==", "bodyText": "Remove this use of \"Thread.sleep()\".", "url": "https://github.com/vaadin/flow/pull/9664#discussion_r544456515", "createdAt": "2020-12-16T16:48:42Z", "author": {"login": "vaadin-bot"}, "path": "fusion-endpoint/src/test/java/com/vaadin/flow/server/startup/fusion/DevModeInitializerEndpointTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package com.vaadin.flow.server.startup.fusion;\n+\n+import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_REUSE_DEV_SERVER;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_GENERATED_TS_DIR;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_JAVA_SOURCE_FOLDER;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_OPENAPI_JSON_FILE;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletRegistration;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.server.DevModeHandler;\n+import com.vaadin.flow.server.VaadinServlet;\n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.server.frontend.fusion.EndpointGeneratorTaskFactoryImpl;\n+import com.vaadin.flow.server.startup.DevModeInitializer;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+\n+@NotThreadSafe\n+public class DevModeInitializerEndpointTest {\n+    private final AtomicReference<DevModeHandler> atomicHandler = new AtomicReference<>();\n+    \n+    String baseDir;\n+    ServletContext servletContext;\n+    Map<String, String> initParams;\n+    Set<Class<?>> classes;\n+    DevModeInitializer devModeInitializer;\n+\n+    private final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    private static class VaadinServletSubClass extends VaadinServlet {\n+\n+    }\n+\n+    @Before\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public void setup() throws Exception {\n+        assertNull(getDevModeHandler());\n+\n+        temporaryFolder.create();\n+        baseDir = temporaryFolder.getRoot().getPath();\n+\n+        servletContext = Mockito.mock(ServletContext.class);\n+        ServletRegistration vaadinServletRegistration = Mockito\n+                .mock(ServletRegistration.class);\n+\n+        Lookup lookup = Mockito.mock(Lookup.class);\n+        Mockito.when(servletContext.getAttribute(Lookup.class.getName()))\n+                .thenReturn(lookup);\n+        Mockito.doReturn(new EndpointGeneratorTaskFactoryImpl()).when(lookup).lookup(EndpointGeneratorTaskFactory.class);\n+\n+        ResourceProvider resourceProvider = Mockito\n+                .mock(ResourceProvider.class);\n+        Mockito.when(lookup.lookup(ResourceProvider.class))\n+                .thenReturn(resourceProvider);\n+\n+        Mockito.when(vaadinServletRegistration.getClassName())\n+                .thenReturn(VaadinServletSubClass.class.getName());\n+\n+        initParams = new HashMap<>();\n+        initParams.put(FrontendUtils.PROJECT_BASEDIR, baseDir);\n+\n+        Mockito.when(vaadinServletRegistration.getInitParameters())\n+                .thenReturn(initParams);\n+\n+        classes = new HashSet<>();\n+        classes.add(this.getClass());\n+\n+        Map registry = new HashMap();\n+\n+        // Adding extra registrations to make sure that DevModeInitializer picks\n+        // the correct registration which is a VaadinServlet registration.\n+        registry.put(\"extra1\", Mockito.mock(ServletRegistration.class));\n+        registry.put(\"foo\", vaadinServletRegistration);\n+        registry.put(\"extra2\", Mockito.mock(ServletRegistration.class));\n+        Mockito.when(servletContext.getServletRegistrations())\n+                .thenReturn(registry);\n+        Mockito.when(servletContext.getInitParameterNames())\n+                .thenReturn(Collections.emptyEnumeration());\n+        Mockito.when(servletContext.getClassLoader())\n+                .thenReturn(this.getClass().getClassLoader());\n+\n+        FileUtils.forceMkdir(\n+                new File(baseDir, DEFAULT_CONNECT_JAVA_SOURCE_FOLDER));\n+\n+        devModeInitializer = new DevModeInitializer();\n+    }\n+\n+    @After\n+    public void teardown() throws Exception, SecurityException {\n+        System.clearProperty(\"vaadin.\" + SERVLET_PARAMETER_PRODUCTION_MODE);\n+        System.clearProperty(\"vaadin.\" + SERVLET_PARAMETER_REUSE_DEV_SERVER);\n+        System.clearProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n+\n+        temporaryFolder.delete();\n+        if (getDevModeHandler() != null) {\n+            getDevModeHandler().stop();\n+        }\n+    }\n+\n+    @Test\n+    public void should_generateOpenApi_when_EndpointPresents()\n+            throws Exception {\n+        String originalJavaSourceFolder = null;\n+        File generatedOpenApiJson = Paths\n+                    .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n+        try {\n+            originalJavaSourceFolder = System.getProperty(\"vaadin.\" \n+                + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n+            // Configure a folder that has .java classes with valid endpoints\n+            // Not using `src/test/java` because there are invalid endpoint names\n+            // in some tests\n+            File src = new File(\n+                    getClass().getClassLoader().getResource(\"java\").getFile());\n+            System.setProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n+                    src.getAbsolutePath());\n+\n+            Assert.assertFalse(generatedOpenApiJson.exists());\n+            DevModeInitializer devModeInitializer = new DevModeInitializer();\n+            devModeInitializer.onStartup(classes, servletContext);\n+            waitForDevModeServer();\n+            Thread.sleep(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee"}, "originalPosition": 149}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "18d8f6a315020a096914e0bff90bcfc4d13102ee", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/18d8f6a315020a096914e0bff90bcfc4d13102ee", "committedDate": "2020-12-16T08:00:34Z", "message": "chore: add --no-sandbox for chromedriver"}, "afterCommit": {"oid": "53ef27adddd8bbd68d6f99d954f953ca0824a114", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/53ef27adddd8bbd68d6f99d954f953ca0824a114", "committedDate": "2020-12-15T21:40:04Z", "message": "fix: set file-loader to use VAADIN/static/ prefix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzOTQ1MzIz", "url": "https://github.com/vaadin/flow/pull/9664#pullrequestreview-553945323", "createdAt": "2020-12-16T17:58:55Z", "commit": {"oid": "53ef27adddd8bbd68d6f99d954f953ca0824a114"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 782, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}