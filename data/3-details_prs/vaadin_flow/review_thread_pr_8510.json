{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NDE1MjEw", "number": 8510, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowNjozMlrOEC8sTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODowODo1NFrOEDVyZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTI2OTg4OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowNjozMlrOGftuNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowNjozMlrOGftuNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwODE0OA==", "bodyText": "Cast one of the operands of this subtraction operation to a \"long\".", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r435908148", "createdAt": "2020-06-05T13:06:32Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -54,33 +56,19 @@ public AbstractListDataView(\n     }\n \n     @Override\n-    public boolean hasNextItem(T item) {\n+    public Optional<T> getNextItem(T item) {\n         int index = getItemIndex(item);\n         if (index < 0)\n-            return false;\n-        return getAllItems().skip(index + 1).findAny().isPresent();\n+            return Optional.empty();\n+        return getItems().skip(index + 1).findFirst();\n     }\n \n     @Override\n-    public T getNextItem(T item) {\n-        int index = getItemIndex(item);\n-        if (index < 0)\n-            return null;\n-        return getAllItems().skip(index + 1).findFirst().orElse(null);\n-    }\n-\n-    @Override\n-    public boolean hasPreviousItem(T item) {\n-        int index = getItemIndex(item);\n-        return index > 0;\n-    }\n-\n-    @Override\n-    public T getPreviousItem(T item) {\n+    public Optional<T> getPreviousItem(T item) {\n         int index = getItemIndex(item);\n         if (index <= 0)\n-            return null;\n-        return getAllItems().skip(index - 1).findFirst().orElse(null);\n+            return Optional.empty();\n+        return getItems().skip(index - 1).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTI3MDAzOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowNjozNFrOGftuRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowNjozNFrOGftuRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwODE2Nw==", "bodyText": "Cast one of the operands of this addition operation to a \"long\".", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r435908167", "createdAt": "2020-06-05T13:06:34Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -54,33 +56,19 @@ public AbstractListDataView(\n     }\n \n     @Override\n-    public boolean hasNextItem(T item) {\n+    public Optional<T> getNextItem(T item) {\n         int index = getItemIndex(item);\n         if (index < 0)\n-            return false;\n-        return getAllItems().skip(index + 1).findAny().isPresent();\n+            return Optional.empty();\n+        return getItems().skip(index + 1).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTI3MDA1OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowNjozNVrOGftuTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowNjozNVrOGftuTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwODE3NA==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r435908174", "createdAt": "2020-06-05T13:06:35Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -90,30 +78,56 @@ public T getPreviousItem(T item) {\n     }\n \n     @Override\n-    public AbstractListDataView<T> clearFilters() {\n+    public AbstractListDataView<T> removeFilters() {\n         getDataProvider().clearFilters();\n         return this;\n     }\n \n     @Override\n-    public AbstractListDataView<T> withFilter(SerializablePredicate<T> filter) {\n-        return withFilterOrOrder(\n+    public AbstractListDataView<T> setFilter(SerializablePredicate<T> filter) {\n+        return setFilterOrOrder(\n                 dataProvider -> dataProvider.setFilter(filter));\n     }\n \n     @Override\n-    public AbstractListDataView<T> withSortComparator(\n+    public AbstractListDataView<T> setSortComparator(\n             SerializableComparator<T> sortComparator) {\n-        return withFilterOrOrder(\n+        return setFilterOrOrder(\n                 dataProvider -> dataProvider.setSortComparator(sortComparator));\n     }\n \n     @Override\n-    public boolean isItemPresent(T item) {\n+    public AbstractListDataView<T> addSortComparator(\n+            SerializableComparator<T> sortComparator) {\n+        return setFilterOrOrder(\n+                dataProvider -> dataProvider.addSortComparator(sortComparator));\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> removeSorting() {\n+        return setSortComparator(null);\n+    }\n+\n+    @Override\n+    public <VALUE extends Comparable<? super VALUE>> AbstractListDataView<T> setSortOrder(\n+            ValueProvider<T, VALUE> valueProvider, SortDirection sortDirection) {\n+        return setFilterOrOrder(\n+                dataProvider -> dataProvider.setSortOrder(valueProvider, sortDirection));\n+    }\n+\n+    @Override\n+    public <VALUE extends Comparable<? super VALUE>> AbstractListDataView<T> addSortOrder(\n+            ValueProvider<T, VALUE> valueProvider, SortDirection sortDirection) {\n+        return setFilterOrOrder(\n+                dataProvider -> dataProvider.addSortOrder(valueProvider, sortDirection));\n+    }\n+\n+    @Override\n+    public boolean contains(T item) {\n         // TODO: delegate this to the data communicator/component, since the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAwODMxOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTozMTozMFrOGgPquQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoyNjoyNlrOGgR_aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NDMxMw==", "bodyText": "Missing Braces {} for if", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436464313", "createdAt": "2020-06-08T05:31:30Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -54,33 +56,19 @@ public AbstractListDataView(\n     }\n \n     @Override\n-    public boolean hasNextItem(T item) {\n+    public Optional<T> getNextItem(T item) {\n         int index = getItemIndex(item);\n         if (index < 0)\n-            return false;\n-        return getAllItems().skip(index + 1).findAny().isPresent();\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMjM3Nw==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436502377", "createdAt": "2020-06-08T07:26:26Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -54,33 +56,19 @@ public AbstractListDataView(\n     }\n \n     @Override\n-    public boolean hasNextItem(T item) {\n+    public Optional<T> getNextItem(T item) {\n         int index = getItemIndex(item);\n         if (index < 0)\n-            return false;\n-        return getAllItems().skip(index + 1).findAny().isPresent();\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NDMxMw=="}, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAwODQ4OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTozMTozNVrOGgPq0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoyNjozMFrOGgR_jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NDMzOA==", "bodyText": "Missing Braces {} for if", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436464338", "createdAt": "2020-06-08T05:31:35Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -54,33 +56,19 @@ public AbstractListDataView(\n     }\n \n     @Override\n-    public boolean hasNextItem(T item) {\n+    public Optional<T> getNextItem(T item) {\n         int index = getItemIndex(item);\n         if (index < 0)\n-            return false;\n-        return getAllItems().skip(index + 1).findAny().isPresent();\n+            return Optional.empty();\n+        return getItems().skip(index + 1).findFirst();\n     }\n \n     @Override\n-    public T getNextItem(T item) {\n-        int index = getItemIndex(item);\n-        if (index < 0)\n-            return null;\n-        return getAllItems().skip(index + 1).findFirst().orElse(null);\n-    }\n-\n-    @Override\n-    public boolean hasPreviousItem(T item) {\n-        int index = getItemIndex(item);\n-        return index > 0;\n-    }\n-\n-    @Override\n-    public T getPreviousItem(T item) {\n+    public Optional<T> getPreviousItem(T item) {\n         int index = getItemIndex(item);\n         if (index <= 0)\n-            return null;\n-        return getAllItems().skip(index - 1).findFirst().orElse(null);\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMjQxNA==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436502414", "createdAt": "2020-06-08T07:26:30Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -54,33 +56,19 @@ public AbstractListDataView(\n     }\n \n     @Override\n-    public boolean hasNextItem(T item) {\n+    public Optional<T> getNextItem(T item) {\n         int index = getItemIndex(item);\n         if (index < 0)\n-            return false;\n-        return getAllItems().skip(index + 1).findAny().isPresent();\n+            return Optional.empty();\n+        return getItems().skip(index + 1).findFirst();\n     }\n \n     @Override\n-    public T getNextItem(T item) {\n-        int index = getItemIndex(item);\n-        if (index < 0)\n-            return null;\n-        return getAllItems().skip(index + 1).findFirst().orElse(null);\n-    }\n-\n-    @Override\n-    public boolean hasPreviousItem(T item) {\n-        int index = getItemIndex(item);\n-        return index > 0;\n-    }\n-\n-    @Override\n-    public T getPreviousItem(T item) {\n+    public Optional<T> getPreviousItem(T item) {\n         int index = getItemIndex(item);\n         if (index <= 0)\n-            return null;\n-        return getAllItems().skip(index - 1).findFirst().orElse(null);\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NDMzOA=="}, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAxNDA3OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTozNToyNFrOGgPuWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoyNjozNVrOGgR_uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NTI0MQ==", "bodyText": "or not in current filtered items sounds more precise", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436465241", "createdAt": "2020-06-08T05:35:24Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -29,66 +32,61 @@\n  */\n public interface ListDataView<T, V extends ListDataView<T, ?>> extends DataView<T> {\n     /**\n-     * Check if the given item has a next item in the filtered and sorted data.\n-     *\n-     * @param item\n-     *         item to check if it has a next item\n-     * @return true if the item is present and it is not the last item\n-     */\n-    boolean hasNextItem(T item);\n-\n-    /**\n-     * Get the item after given item from the filtered and sorted data.\n+     * Gets the item after given item from the filtered and sorted data.\n+     * <p>\n+     * Note! Item might be present in the data set, but be filtered out\n+     * so that the next item won't be available.\n      *\n      * @param item\n      *         item to get next for\n-     * @return next item if available, else null\n-     */\n-    T getNextItem(T item);\n-\n-    /**\n-     * Check if the given item has a previous item in the filtered and sorted\n-     * data.\n+     * @return next item if available, else empty optional if item\n+     *         doesn't exist or filtered out", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMjQ1Ng==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436502456", "createdAt": "2020-06-08T07:26:35Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -29,66 +32,61 @@\n  */\n public interface ListDataView<T, V extends ListDataView<T, ?>> extends DataView<T> {\n     /**\n-     * Check if the given item has a next item in the filtered and sorted data.\n-     *\n-     * @param item\n-     *         item to check if it has a next item\n-     * @return true if the item is present and it is not the last item\n-     */\n-    boolean hasNextItem(T item);\n-\n-    /**\n-     * Get the item after given item from the filtered and sorted data.\n+     * Gets the item after given item from the filtered and sorted data.\n+     * <p>\n+     * Note! Item might be present in the data set, but be filtered out\n+     * so that the next item won't be available.\n      *\n      * @param item\n      *         item to get next for\n-     * @return next item if available, else null\n-     */\n-    T getNextItem(T item);\n-\n-    /**\n-     * Check if the given item has a previous item in the filtered and sorted\n-     * data.\n+     * @return next item if available, else empty optional if item\n+     *         doesn't exist or filtered out", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NTI0MQ=="}, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAxNjE1OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTozNjozOFrOGgPvkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoyNjozOVrOGgR_2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NTU1Mw==", "bodyText": "be filtered out or be the first item so ..", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436465553", "createdAt": "2020-06-08T05:36:38Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -29,66 +32,61 @@\n  */\n public interface ListDataView<T, V extends ListDataView<T, ?>> extends DataView<T> {\n     /**\n-     * Check if the given item has a next item in the filtered and sorted data.\n-     *\n-     * @param item\n-     *         item to check if it has a next item\n-     * @return true if the item is present and it is not the last item\n-     */\n-    boolean hasNextItem(T item);\n-\n-    /**\n-     * Get the item after given item from the filtered and sorted data.\n+     * Gets the item after given item from the filtered and sorted data.\n+     * <p>\n+     * Note! Item might be present in the data set, but be filtered out\n+     * so that the next item won't be available.\n      *\n      * @param item\n      *         item to get next for\n-     * @return next item if available, else null\n-     */\n-    T getNextItem(T item);\n-\n-    /**\n-     * Check if the given item has a previous item in the filtered and sorted\n-     * data.\n+     * @return next item if available, else empty optional if item\n+     *         doesn't exist or filtered out\n      *\n-     * @param item\n-     *         item to check if it has a previous item\n-     * @return true if the item is present and it is not the first item\n+     * @see #getPreviousItem(Object)\n      */\n-    boolean hasPreviousItem(T item);\n+    Optional<T> getNextItem(T item);\n \n     /**\n-     * Get the item before given item from the filtered and sorted data.\n+     * Gets the item before given item from the filtered and sorted data.\n+     * <p>\n+     * Note! Item might be present in the data set, but be filtered out\n+     * so that the previous item won't be available.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMjQ5MQ==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436502491", "createdAt": "2020-06-08T07:26:39Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -29,66 +32,61 @@\n  */\n public interface ListDataView<T, V extends ListDataView<T, ?>> extends DataView<T> {\n     /**\n-     * Check if the given item has a next item in the filtered and sorted data.\n-     *\n-     * @param item\n-     *         item to check if it has a next item\n-     * @return true if the item is present and it is not the last item\n-     */\n-    boolean hasNextItem(T item);\n-\n-    /**\n-     * Get the item after given item from the filtered and sorted data.\n+     * Gets the item after given item from the filtered and sorted data.\n+     * <p>\n+     * Note! Item might be present in the data set, but be filtered out\n+     * so that the next item won't be available.\n      *\n      * @param item\n      *         item to get next for\n-     * @return next item if available, else null\n-     */\n-    T getNextItem(T item);\n-\n-    /**\n-     * Check if the given item has a previous item in the filtered and sorted\n-     * data.\n+     * @return next item if available, else empty optional if item\n+     *         doesn't exist or filtered out\n      *\n-     * @param item\n-     *         item to check if it has a previous item\n-     * @return true if the item is present and it is not the first item\n+     * @see #getPreviousItem(Object)\n      */\n-    boolean hasPreviousItem(T item);\n+    Optional<T> getNextItem(T item);\n \n     /**\n-     * Get the item before given item from the filtered and sorted data.\n+     * Gets the item before given item from the filtered and sorted data.\n+     * <p>\n+     * Note! Item might be present in the data set, but be filtered out\n+     * so that the previous item won't be available.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NTU1Mw=="}, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAxNjYwOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTozNjo1NlrOGgPv2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoyNjo0NFrOGgSACA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NTYyNg==", "bodyText": "be filtered out or be the last item so ..", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436465626", "createdAt": "2020-06-08T05:36:56Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -29,66 +32,61 @@\n  */\n public interface ListDataView<T, V extends ListDataView<T, ?>> extends DataView<T> {\n     /**\n-     * Check if the given item has a next item in the filtered and sorted data.\n-     *\n-     * @param item\n-     *         item to check if it has a next item\n-     * @return true if the item is present and it is not the last item\n-     */\n-    boolean hasNextItem(T item);\n-\n-    /**\n-     * Get the item after given item from the filtered and sorted data.\n+     * Gets the item after given item from the filtered and sorted data.\n+     * <p>\n+     * Note! Item might be present in the data set, but be filtered out\n+     * so that the next item won't be available.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMjUzNg==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436502536", "createdAt": "2020-06-08T07:26:44Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -29,66 +32,61 @@\n  */\n public interface ListDataView<T, V extends ListDataView<T, ?>> extends DataView<T> {\n     /**\n-     * Check if the given item has a next item in the filtered and sorted data.\n-     *\n-     * @param item\n-     *         item to check if it has a next item\n-     * @return true if the item is present and it is not the last item\n-     */\n-    boolean hasNextItem(T item);\n-\n-    /**\n-     * Get the item after given item from the filtered and sorted data.\n+     * Gets the item after given item from the filtered and sorted data.\n+     * <p>\n+     * Note! Item might be present in the data set, but be filtered out\n+     * so that the next item won't be available.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NTYyNg=="}, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAyNTA4OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0MTo1M1rOGgP04w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoyNjo0OFrOGgSAKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NjkxNQ==", "bodyText": "Given filter replaces any previous filter. Setting {@code null} clears filtering. -> The filter replaces any filter that has been set or added previously. {@code null} will clear all filters.", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436466915", "createdAt": "2020-06-08T05:41:53Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -118,45 +117,162 @@\n      *         if backing collection doesn't support modification\n      * @throws IllegalArgumentException\n      *         if item doesn't exist or collection is not a list\n+     * @see #addItemAfter(Object, Object)\n      */\n     V addItemBefore(T item, T before);\n \n     /**\n-     * Adds a filter to be applied to all queries. The filter will be used in\n-     * addition to any filter that has been set or added previously.\n+     * Sets a filter to be applied to the data. Given filter replaces any\n+     * previous filter. Setting {@code null} clears filtering.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMjU3MA==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436502570", "createdAt": "2020-06-08T07:26:48Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -118,45 +117,162 @@\n      *         if backing collection doesn't support modification\n      * @throws IllegalArgumentException\n      *         if item doesn't exist or collection is not a list\n+     * @see #addItemAfter(Object, Object)\n      */\n     V addItemBefore(T item, T before);\n \n     /**\n-     * Adds a filter to be applied to all queries. The filter will be used in\n-     * addition to any filter that has been set or added previously.\n+     * Sets a filter to be applied to the data. Given filter replaces any\n+     * previous filter. Setting {@code null} clears filtering.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NjkxNQ=="}, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAyNjkzOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0MzowMlrOGgP17g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoyNjo1MlrOGgSASA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NzE4Mg==", "bodyText": "Drop data as it just confuses the line. Also on the next line I would drop of the data", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436467182", "createdAt": "2020-06-08T05:43:02Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -118,45 +117,162 @@\n      *         if backing collection doesn't support modification\n      * @throws IllegalArgumentException\n      *         if item doesn't exist or collection is not a list\n+     * @see #addItemAfter(Object, Object)\n      */\n     V addItemBefore(T item, T before);\n \n     /**\n-     * Adds a filter to be applied to all queries. The filter will be used in\n-     * addition to any filter that has been set or added previously.\n+     * Sets a filter to be applied to the data. Given filter replaces any\n+     * previous filter. Setting {@code null} clears filtering.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means this filter\n+     * won't be retained when a new data or data provider is set to the\n+     * component. Any other component using the same data provider object\n+     * would be affected by setting a filter through data view of another\n+     * component.\n      *\n      * @param filter\n-     *         the filter to add, not <code>null</code>\n+     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V addFilter(SerializablePredicate<T> filter);\n+    V setFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Remove all in-memory filters set or added.\n+     * Adds a filter to be applied to all queries. The filter will be\n+     * used in addition to any filter that has been set or added previously.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means\n+     * this filter and previously added filters won't be retained when\n+     * a new data or data provider is set to the component. Any other\n+     * component using the same data provider object would be affected\n+     * by adding a filter through data view of another component.\n      *\n+     * @param filter\n+     *         the filter to add, not <code>null</code>\n      * @return ListDataView instance\n+     *\n+     * @see #setFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V clearFilters();\n+    V addFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Set a filter to be applied to the data. Given filter replaces any\n-     * previous filter. Setting {@code null} clears filtering.\n+     * Removes all in-memory filters set or added.\n      *\n-     * @param filter\n-     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #setFilter(SerializablePredicate)\n      */\n-    V withFilter(SerializablePredicate<T> filter);\n+    V removeFilters();\n \n     /**\n-     * Sets the comparator to use as the default sorting for data.\n+     * Sets the comparator to use as the data default sorting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMjYwMA==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436502600", "createdAt": "2020-06-08T07:26:52Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -118,45 +117,162 @@\n      *         if backing collection doesn't support modification\n      * @throws IllegalArgumentException\n      *         if item doesn't exist or collection is not a list\n+     * @see #addItemAfter(Object, Object)\n      */\n     V addItemBefore(T item, T before);\n \n     /**\n-     * Adds a filter to be applied to all queries. The filter will be used in\n-     * addition to any filter that has been set or added previously.\n+     * Sets a filter to be applied to the data. Given filter replaces any\n+     * previous filter. Setting {@code null} clears filtering.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means this filter\n+     * won't be retained when a new data or data provider is set to the\n+     * component. Any other component using the same data provider object\n+     * would be affected by setting a filter through data view of another\n+     * component.\n      *\n      * @param filter\n-     *         the filter to add, not <code>null</code>\n+     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V addFilter(SerializablePredicate<T> filter);\n+    V setFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Remove all in-memory filters set or added.\n+     * Adds a filter to be applied to all queries. The filter will be\n+     * used in addition to any filter that has been set or added previously.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means\n+     * this filter and previously added filters won't be retained when\n+     * a new data or data provider is set to the component. Any other\n+     * component using the same data provider object would be affected\n+     * by adding a filter through data view of another component.\n      *\n+     * @param filter\n+     *         the filter to add, not <code>null</code>\n      * @return ListDataView instance\n+     *\n+     * @see #setFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V clearFilters();\n+    V addFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Set a filter to be applied to the data. Given filter replaces any\n-     * previous filter. Setting {@code null} clears filtering.\n+     * Removes all in-memory filters set or added.\n      *\n-     * @param filter\n-     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #setFilter(SerializablePredicate)\n      */\n-    V withFilter(SerializablePredicate<T> filter);\n+    V removeFilters();\n \n     /**\n-     * Sets the comparator to use as the default sorting for data.\n+     * Sets the comparator to use as the data default sorting.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NzE4Mg=="}, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAyOTE4OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0NDozMVrOGgP3Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoyNjo1N1rOGgSAbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NzUzMA==", "bodyText": "Remove data and only use default sorting", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436467530", "createdAt": "2020-06-08T05:44:31Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -118,45 +117,162 @@\n      *         if backing collection doesn't support modification\n      * @throws IllegalArgumentException\n      *         if item doesn't exist or collection is not a list\n+     * @see #addItemAfter(Object, Object)\n      */\n     V addItemBefore(T item, T before);\n \n     /**\n-     * Adds a filter to be applied to all queries. The filter will be used in\n-     * addition to any filter that has been set or added previously.\n+     * Sets a filter to be applied to the data. Given filter replaces any\n+     * previous filter. Setting {@code null} clears filtering.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means this filter\n+     * won't be retained when a new data or data provider is set to the\n+     * component. Any other component using the same data provider object\n+     * would be affected by setting a filter through data view of another\n+     * component.\n      *\n      * @param filter\n-     *         the filter to add, not <code>null</code>\n+     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V addFilter(SerializablePredicate<T> filter);\n+    V setFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Remove all in-memory filters set or added.\n+     * Adds a filter to be applied to all queries. The filter will be\n+     * used in addition to any filter that has been set or added previously.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means\n+     * this filter and previously added filters won't be retained when\n+     * a new data or data provider is set to the component. Any other\n+     * component using the same data provider object would be affected\n+     * by adding a filter through data view of another component.\n      *\n+     * @param filter\n+     *         the filter to add, not <code>null</code>\n      * @return ListDataView instance\n+     *\n+     * @see #setFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V clearFilters();\n+    V addFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Set a filter to be applied to the data. Given filter replaces any\n-     * previous filter. Setting {@code null} clears filtering.\n+     * Removes all in-memory filters set or added.\n      *\n-     * @param filter\n-     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #setFilter(SerializablePredicate)\n      */\n-    V withFilter(SerializablePredicate<T> filter);\n+    V removeFilters();\n \n     /**\n-     * Sets the comparator to use as the default sorting for data.\n+     * Sets the comparator to use as the data default sorting.\n      * This overrides the sorting set by any other method that manipulates the\n      * default sorting of the data.\n+     * <p>\n+     * A comparator bound to data set, not to the component. That means\n+     * the default sorting won't be retained when a new data or data provider\n+     * is set to the component. Any other component using the same\n+     * data provider object would be affected by setting a sort comparator\n+     * through data view of another component.\n      *\n      * @param sortComparator\n      *         a comparator to use, or <code>null</code> to clear any\n      *         previously set sort order\n      * @return ListDataView instance\n+     *\n+     * @see #addSortComparator(SerializableComparator)\n+     */\n+    V setSortComparator(SerializableComparator<T> sortComparator);\n+\n+    /**\n+     * Adds a comparator to the data default sorting. If no\n+     * default sorting has been defined, then the provided comparator will be\n+     * used as the default sorting. If a default sorting has been defined, then\n+     * the provided comparator will be used to determine the ordering of items\n+     * that are considered equal by the previously defined default sorting.\n+     * <p>\n+     * A comparator added to data set, not to the component. That means\n+     * the default sorting won't be retained when a new data or {@link DataProvider}\n+     * is set to the component. Any other component using the same\n+     * data provider object would be affected by adding a sort comparator\n+     * through data view of another component.\n+     *\n+     * @param sortComparator\n+     *         a comparator to add, not <code>null</code>\n+     * @return ListDataView instance\n+     *\n+     * @see #setSortComparator(SerializableComparator)\n+     */\n+    V addSortComparator(SerializableComparator<T> sortComparator);\n+\n+    /**\n+     * Removes any data default sorting that has been set or added previously.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMjYzNw==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436502637", "createdAt": "2020-06-08T07:26:57Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -118,45 +117,162 @@\n      *         if backing collection doesn't support modification\n      * @throws IllegalArgumentException\n      *         if item doesn't exist or collection is not a list\n+     * @see #addItemAfter(Object, Object)\n      */\n     V addItemBefore(T item, T before);\n \n     /**\n-     * Adds a filter to be applied to all queries. The filter will be used in\n-     * addition to any filter that has been set or added previously.\n+     * Sets a filter to be applied to the data. Given filter replaces any\n+     * previous filter. Setting {@code null} clears filtering.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means this filter\n+     * won't be retained when a new data or data provider is set to the\n+     * component. Any other component using the same data provider object\n+     * would be affected by setting a filter through data view of another\n+     * component.\n      *\n      * @param filter\n-     *         the filter to add, not <code>null</code>\n+     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V addFilter(SerializablePredicate<T> filter);\n+    V setFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Remove all in-memory filters set or added.\n+     * Adds a filter to be applied to all queries. The filter will be\n+     * used in addition to any filter that has been set or added previously.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means\n+     * this filter and previously added filters won't be retained when\n+     * a new data or data provider is set to the component. Any other\n+     * component using the same data provider object would be affected\n+     * by adding a filter through data view of another component.\n      *\n+     * @param filter\n+     *         the filter to add, not <code>null</code>\n      * @return ListDataView instance\n+     *\n+     * @see #setFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V clearFilters();\n+    V addFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Set a filter to be applied to the data. Given filter replaces any\n-     * previous filter. Setting {@code null} clears filtering.\n+     * Removes all in-memory filters set or added.\n      *\n-     * @param filter\n-     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #setFilter(SerializablePredicate)\n      */\n-    V withFilter(SerializablePredicate<T> filter);\n+    V removeFilters();\n \n     /**\n-     * Sets the comparator to use as the default sorting for data.\n+     * Sets the comparator to use as the data default sorting.\n      * This overrides the sorting set by any other method that manipulates the\n      * default sorting of the data.\n+     * <p>\n+     * A comparator bound to data set, not to the component. That means\n+     * the default sorting won't be retained when a new data or data provider\n+     * is set to the component. Any other component using the same\n+     * data provider object would be affected by setting a sort comparator\n+     * through data view of another component.\n      *\n      * @param sortComparator\n      *         a comparator to use, or <code>null</code> to clear any\n      *         previously set sort order\n      * @return ListDataView instance\n+     *\n+     * @see #addSortComparator(SerializableComparator)\n+     */\n+    V setSortComparator(SerializableComparator<T> sortComparator);\n+\n+    /**\n+     * Adds a comparator to the data default sorting. If no\n+     * default sorting has been defined, then the provided comparator will be\n+     * used as the default sorting. If a default sorting has been defined, then\n+     * the provided comparator will be used to determine the ordering of items\n+     * that are considered equal by the previously defined default sorting.\n+     * <p>\n+     * A comparator added to data set, not to the component. That means\n+     * the default sorting won't be retained when a new data or {@link DataProvider}\n+     * is set to the component. Any other component using the same\n+     * data provider object would be affected by adding a sort comparator\n+     * through data view of another component.\n+     *\n+     * @param sortComparator\n+     *         a comparator to add, not <code>null</code>\n+     * @return ListDataView instance\n+     *\n+     * @see #setSortComparator(SerializableComparator)\n+     */\n+    V addSortComparator(SerializableComparator<T> sortComparator);\n+\n+    /**\n+     * Removes any data default sorting that has been set or added previously.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NzUzMA=="}, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAzMzQwOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0NzowM1rOGgP6Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoyNzowMVrOGgSAjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2ODIyNw==", "bodyText": "drop for data  also the mention of data provider in the first paragraph should be unified through out the sorting JavaDocs", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436468227", "createdAt": "2020-06-08T05:47:03Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -118,45 +117,162 @@\n      *         if backing collection doesn't support modification\n      * @throws IllegalArgumentException\n      *         if item doesn't exist or collection is not a list\n+     * @see #addItemAfter(Object, Object)\n      */\n     V addItemBefore(T item, T before);\n \n     /**\n-     * Adds a filter to be applied to all queries. The filter will be used in\n-     * addition to any filter that has been set or added previously.\n+     * Sets a filter to be applied to the data. Given filter replaces any\n+     * previous filter. Setting {@code null} clears filtering.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means this filter\n+     * won't be retained when a new data or data provider is set to the\n+     * component. Any other component using the same data provider object\n+     * would be affected by setting a filter through data view of another\n+     * component.\n      *\n      * @param filter\n-     *         the filter to add, not <code>null</code>\n+     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V addFilter(SerializablePredicate<T> filter);\n+    V setFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Remove all in-memory filters set or added.\n+     * Adds a filter to be applied to all queries. The filter will be\n+     * used in addition to any filter that has been set or added previously.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means\n+     * this filter and previously added filters won't be retained when\n+     * a new data or data provider is set to the component. Any other\n+     * component using the same data provider object would be affected\n+     * by adding a filter through data view of another component.\n      *\n+     * @param filter\n+     *         the filter to add, not <code>null</code>\n      * @return ListDataView instance\n+     *\n+     * @see #setFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V clearFilters();\n+    V addFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Set a filter to be applied to the data. Given filter replaces any\n-     * previous filter. Setting {@code null} clears filtering.\n+     * Removes all in-memory filters set or added.\n      *\n-     * @param filter\n-     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #setFilter(SerializablePredicate)\n      */\n-    V withFilter(SerializablePredicate<T> filter);\n+    V removeFilters();\n \n     /**\n-     * Sets the comparator to use as the default sorting for data.\n+     * Sets the comparator to use as the data default sorting.\n      * This overrides the sorting set by any other method that manipulates the\n      * default sorting of the data.\n+     * <p>\n+     * A comparator bound to data set, not to the component. That means\n+     * the default sorting won't be retained when a new data or data provider\n+     * is set to the component. Any other component using the same\n+     * data provider object would be affected by setting a sort comparator\n+     * through data view of another component.\n      *\n      * @param sortComparator\n      *         a comparator to use, or <code>null</code> to clear any\n      *         previously set sort order\n      * @return ListDataView instance\n+     *\n+     * @see #addSortComparator(SerializableComparator)\n+     */\n+    V setSortComparator(SerializableComparator<T> sortComparator);\n+\n+    /**\n+     * Adds a comparator to the data default sorting. If no\n+     * default sorting has been defined, then the provided comparator will be\n+     * used as the default sorting. If a default sorting has been defined, then\n+     * the provided comparator will be used to determine the ordering of items\n+     * that are considered equal by the previously defined default sorting.\n+     * <p>\n+     * A comparator added to data set, not to the component. That means\n+     * the default sorting won't be retained when a new data or {@link DataProvider}\n+     * is set to the component. Any other component using the same\n+     * data provider object would be affected by adding a sort comparator\n+     * through data view of another component.\n+     *\n+     * @param sortComparator\n+     *         a comparator to add, not <code>null</code>\n+     * @return ListDataView instance\n+     *\n+     * @see #setSortComparator(SerializableComparator)\n+     */\n+    V addSortComparator(SerializableComparator<T> sortComparator);\n+\n+    /**\n+     * Removes any data default sorting that has been set or added previously.\n+     * <p>\n+     * Any other component using the same data provider object would be affected\n+     * by removing default sorting through data view of another component.\n+     *\n+     * @return ListDataView instance\n+     *\n+     * @see #setSortComparator(SerializableComparator)\n+     * @see #addSortComparator(SerializableComparator)\n+     */\n+    V removeSorting();\n+\n+    /**\n+     * Sets the property and direction to use as the default sorting for data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMjY3MQ==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436502671", "createdAt": "2020-06-08T07:27:01Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -118,45 +117,162 @@\n      *         if backing collection doesn't support modification\n      * @throws IllegalArgumentException\n      *         if item doesn't exist or collection is not a list\n+     * @see #addItemAfter(Object, Object)\n      */\n     V addItemBefore(T item, T before);\n \n     /**\n-     * Adds a filter to be applied to all queries. The filter will be used in\n-     * addition to any filter that has been set or added previously.\n+     * Sets a filter to be applied to the data. Given filter replaces any\n+     * previous filter. Setting {@code null} clears filtering.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means this filter\n+     * won't be retained when a new data or data provider is set to the\n+     * component. Any other component using the same data provider object\n+     * would be affected by setting a filter through data view of another\n+     * component.\n      *\n      * @param filter\n-     *         the filter to add, not <code>null</code>\n+     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V addFilter(SerializablePredicate<T> filter);\n+    V setFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Remove all in-memory filters set or added.\n+     * Adds a filter to be applied to all queries. The filter will be\n+     * used in addition to any filter that has been set or added previously.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means\n+     * this filter and previously added filters won't be retained when\n+     * a new data or data provider is set to the component. Any other\n+     * component using the same data provider object would be affected\n+     * by adding a filter through data view of another component.\n      *\n+     * @param filter\n+     *         the filter to add, not <code>null</code>\n      * @return ListDataView instance\n+     *\n+     * @see #setFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V clearFilters();\n+    V addFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Set a filter to be applied to the data. Given filter replaces any\n-     * previous filter. Setting {@code null} clears filtering.\n+     * Removes all in-memory filters set or added.\n      *\n-     * @param filter\n-     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #setFilter(SerializablePredicate)\n      */\n-    V withFilter(SerializablePredicate<T> filter);\n+    V removeFilters();\n \n     /**\n-     * Sets the comparator to use as the default sorting for data.\n+     * Sets the comparator to use as the data default sorting.\n      * This overrides the sorting set by any other method that manipulates the\n      * default sorting of the data.\n+     * <p>\n+     * A comparator bound to data set, not to the component. That means\n+     * the default sorting won't be retained when a new data or data provider\n+     * is set to the component. Any other component using the same\n+     * data provider object would be affected by setting a sort comparator\n+     * through data view of another component.\n      *\n      * @param sortComparator\n      *         a comparator to use, or <code>null</code> to clear any\n      *         previously set sort order\n      * @return ListDataView instance\n+     *\n+     * @see #addSortComparator(SerializableComparator)\n+     */\n+    V setSortComparator(SerializableComparator<T> sortComparator);\n+\n+    /**\n+     * Adds a comparator to the data default sorting. If no\n+     * default sorting has been defined, then the provided comparator will be\n+     * used as the default sorting. If a default sorting has been defined, then\n+     * the provided comparator will be used to determine the ordering of items\n+     * that are considered equal by the previously defined default sorting.\n+     * <p>\n+     * A comparator added to data set, not to the component. That means\n+     * the default sorting won't be retained when a new data or {@link DataProvider}\n+     * is set to the component. Any other component using the same\n+     * data provider object would be affected by adding a sort comparator\n+     * through data view of another component.\n+     *\n+     * @param sortComparator\n+     *         a comparator to add, not <code>null</code>\n+     * @return ListDataView instance\n+     *\n+     * @see #setSortComparator(SerializableComparator)\n+     */\n+    V addSortComparator(SerializableComparator<T> sortComparator);\n+\n+    /**\n+     * Removes any data default sorting that has been set or added previously.\n+     * <p>\n+     * Any other component using the same data provider object would be affected\n+     * by removing default sorting through data view of another component.\n+     *\n+     * @return ListDataView instance\n+     *\n+     * @see #setSortComparator(SerializableComparator)\n+     * @see #addSortComparator(SerializableComparator)\n+     */\n+    V removeSorting();\n+\n+    /**\n+     * Sets the property and direction to use as the default sorting for data.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2ODIyNw=="}, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAzNTE3OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0ODowMVrOGgP7EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoyNzowOFrOGgSA0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2ODQ5Nw==", "bodyText": "Drop for data", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436468497", "createdAt": "2020-06-08T05:48:01Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -118,45 +117,162 @@\n      *         if backing collection doesn't support modification\n      * @throws IllegalArgumentException\n      *         if item doesn't exist or collection is not a list\n+     * @see #addItemAfter(Object, Object)\n      */\n     V addItemBefore(T item, T before);\n \n     /**\n-     * Adds a filter to be applied to all queries. The filter will be used in\n-     * addition to any filter that has been set or added previously.\n+     * Sets a filter to be applied to the data. Given filter replaces any\n+     * previous filter. Setting {@code null} clears filtering.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means this filter\n+     * won't be retained when a new data or data provider is set to the\n+     * component. Any other component using the same data provider object\n+     * would be affected by setting a filter through data view of another\n+     * component.\n      *\n      * @param filter\n-     *         the filter to add, not <code>null</code>\n+     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V addFilter(SerializablePredicate<T> filter);\n+    V setFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Remove all in-memory filters set or added.\n+     * Adds a filter to be applied to all queries. The filter will be\n+     * used in addition to any filter that has been set or added previously.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means\n+     * this filter and previously added filters won't be retained when\n+     * a new data or data provider is set to the component. Any other\n+     * component using the same data provider object would be affected\n+     * by adding a filter through data view of another component.\n      *\n+     * @param filter\n+     *         the filter to add, not <code>null</code>\n      * @return ListDataView instance\n+     *\n+     * @see #setFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V clearFilters();\n+    V addFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Set a filter to be applied to the data. Given filter replaces any\n-     * previous filter. Setting {@code null} clears filtering.\n+     * Removes all in-memory filters set or added.\n      *\n-     * @param filter\n-     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #setFilter(SerializablePredicate)\n      */\n-    V withFilter(SerializablePredicate<T> filter);\n+    V removeFilters();\n \n     /**\n-     * Sets the comparator to use as the default sorting for data.\n+     * Sets the comparator to use as the data default sorting.\n      * This overrides the sorting set by any other method that manipulates the\n      * default sorting of the data.\n+     * <p>\n+     * A comparator bound to data set, not to the component. That means\n+     * the default sorting won't be retained when a new data or data provider\n+     * is set to the component. Any other component using the same\n+     * data provider object would be affected by setting a sort comparator\n+     * through data view of another component.\n      *\n      * @param sortComparator\n      *         a comparator to use, or <code>null</code> to clear any\n      *         previously set sort order\n      * @return ListDataView instance\n+     *\n+     * @see #addSortComparator(SerializableComparator)\n+     */\n+    V setSortComparator(SerializableComparator<T> sortComparator);\n+\n+    /**\n+     * Adds a comparator to the data default sorting. If no\n+     * default sorting has been defined, then the provided comparator will be\n+     * used as the default sorting. If a default sorting has been defined, then\n+     * the provided comparator will be used to determine the ordering of items\n+     * that are considered equal by the previously defined default sorting.\n+     * <p>\n+     * A comparator added to data set, not to the component. That means\n+     * the default sorting won't be retained when a new data or {@link DataProvider}\n+     * is set to the component. Any other component using the same\n+     * data provider object would be affected by adding a sort comparator\n+     * through data view of another component.\n+     *\n+     * @param sortComparator\n+     *         a comparator to add, not <code>null</code>\n+     * @return ListDataView instance\n+     *\n+     * @see #setSortComparator(SerializableComparator)\n+     */\n+    V addSortComparator(SerializableComparator<T> sortComparator);\n+\n+    /**\n+     * Removes any data default sorting that has been set or added previously.\n+     * <p>\n+     * Any other component using the same data provider object would be affected\n+     * by removing default sorting through data view of another component.\n+     *\n+     * @return ListDataView instance\n+     *\n+     * @see #setSortComparator(SerializableComparator)\n+     * @see #addSortComparator(SerializableComparator)\n+     */\n+    V removeSorting();\n+\n+    /**\n+     * Sets the property and direction to use as the default sorting for data.\n+     * This overrides the sorting set by any other method that\n+     * manipulates the default sorting of this data provider.\n+     * <p>\n+     * A sort order bound to data set, not to the component. That means\n+     * the default sorting won't be retained when a new data or\n+     * {@link DataProvider} is set to the component. Any other component\n+     * using the same data provider object would be affected by setting\n+     * a sort order through data view of another component.\n+     *\n+     * @param valueProvider\n+     *            the value provider that defines the property do sort by, not\n+     *            <code>null</code>\n+     * @param sortDirection\n+     *            the sort direction to use, not <code>null</code>\n+     * @param <VALUE>\n+     *            the provided value type\n+     *\n+     * @return ListDataView instance\n+     *\n+     * @see #addSortOrder(ValueProvider, SortDirection)\n+     */\n+    <VALUE extends Comparable<? super VALUE>> V setSortOrder(\n+            ValueProvider<T, VALUE> valueProvider, SortDirection sortDirection);\n+\n+    /**\n+     * Adds a property and direction to the default sorting for data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMjczNw==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436502737", "createdAt": "2020-06-08T07:27:08Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -118,45 +117,162 @@\n      *         if backing collection doesn't support modification\n      * @throws IllegalArgumentException\n      *         if item doesn't exist or collection is not a list\n+     * @see #addItemAfter(Object, Object)\n      */\n     V addItemBefore(T item, T before);\n \n     /**\n-     * Adds a filter to be applied to all queries. The filter will be used in\n-     * addition to any filter that has been set or added previously.\n+     * Sets a filter to be applied to the data. Given filter replaces any\n+     * previous filter. Setting {@code null} clears filtering.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means this filter\n+     * won't be retained when a new data or data provider is set to the\n+     * component. Any other component using the same data provider object\n+     * would be affected by setting a filter through data view of another\n+     * component.\n      *\n      * @param filter\n-     *         the filter to add, not <code>null</code>\n+     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V addFilter(SerializablePredicate<T> filter);\n+    V setFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Remove all in-memory filters set or added.\n+     * Adds a filter to be applied to all queries. The filter will be\n+     * used in addition to any filter that has been set or added previously.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means\n+     * this filter and previously added filters won't be retained when\n+     * a new data or data provider is set to the component. Any other\n+     * component using the same data provider object would be affected\n+     * by adding a filter through data view of another component.\n      *\n+     * @param filter\n+     *         the filter to add, not <code>null</code>\n      * @return ListDataView instance\n+     *\n+     * @see #setFilter(SerializablePredicate)\n+     * @see #removeFilters()\n      */\n-    V clearFilters();\n+    V addFilter(SerializablePredicate<T> filter);\n \n     /**\n-     * Set a filter to be applied to the data. Given filter replaces any\n-     * previous filter. Setting {@code null} clears filtering.\n+     * Removes all in-memory filters set or added.\n      *\n-     * @param filter\n-     *         filter to add for the data\n      * @return ListDataView instance\n+     *\n+     * @see #addFilter(SerializablePredicate)\n+     * @see #setFilter(SerializablePredicate)\n      */\n-    V withFilter(SerializablePredicate<T> filter);\n+    V removeFilters();\n \n     /**\n-     * Sets the comparator to use as the default sorting for data.\n+     * Sets the comparator to use as the data default sorting.\n      * This overrides the sorting set by any other method that manipulates the\n      * default sorting of the data.\n+     * <p>\n+     * A comparator bound to data set, not to the component. That means\n+     * the default sorting won't be retained when a new data or data provider\n+     * is set to the component. Any other component using the same\n+     * data provider object would be affected by setting a sort comparator\n+     * through data view of another component.\n      *\n      * @param sortComparator\n      *         a comparator to use, or <code>null</code> to clear any\n      *         previously set sort order\n      * @return ListDataView instance\n+     *\n+     * @see #addSortComparator(SerializableComparator)\n+     */\n+    V setSortComparator(SerializableComparator<T> sortComparator);\n+\n+    /**\n+     * Adds a comparator to the data default sorting. If no\n+     * default sorting has been defined, then the provided comparator will be\n+     * used as the default sorting. If a default sorting has been defined, then\n+     * the provided comparator will be used to determine the ordering of items\n+     * that are considered equal by the previously defined default sorting.\n+     * <p>\n+     * A comparator added to data set, not to the component. That means\n+     * the default sorting won't be retained when a new data or {@link DataProvider}\n+     * is set to the component. Any other component using the same\n+     * data provider object would be affected by adding a sort comparator\n+     * through data view of another component.\n+     *\n+     * @param sortComparator\n+     *         a comparator to add, not <code>null</code>\n+     * @return ListDataView instance\n+     *\n+     * @see #setSortComparator(SerializableComparator)\n+     */\n+    V addSortComparator(SerializableComparator<T> sortComparator);\n+\n+    /**\n+     * Removes any data default sorting that has been set or added previously.\n+     * <p>\n+     * Any other component using the same data provider object would be affected\n+     * by removing default sorting through data view of another component.\n+     *\n+     * @return ListDataView instance\n+     *\n+     * @see #setSortComparator(SerializableComparator)\n+     * @see #addSortComparator(SerializableComparator)\n+     */\n+    V removeSorting();\n+\n+    /**\n+     * Sets the property and direction to use as the default sorting for data.\n+     * This overrides the sorting set by any other method that\n+     * manipulates the default sorting of this data provider.\n+     * <p>\n+     * A sort order bound to data set, not to the component. That means\n+     * the default sorting won't be retained when a new data or\n+     * {@link DataProvider} is set to the component. Any other component\n+     * using the same data provider object would be affected by setting\n+     * a sort order through data view of another component.\n+     *\n+     * @param valueProvider\n+     *            the value provider that defines the property do sort by, not\n+     *            <code>null</code>\n+     * @param sortDirection\n+     *            the sort direction to use, not <code>null</code>\n+     * @param <VALUE>\n+     *            the provided value type\n+     *\n+     * @return ListDataView instance\n+     *\n+     * @see #addSortOrder(ValueProvider, SortDirection)\n+     */\n+    <VALUE extends Comparable<? super VALUE>> V setSortOrder(\n+            ValueProvider<T, VALUE> valueProvider, SortDirection sortDirection);\n+\n+    /**\n+     * Adds a property and direction to the default sorting for data.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2ODQ5Nw=="}, "originalCommit": {"oid": "0546159def17c955058c55c8c6f58f7400339af5"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTM4MTUxOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODowODo1NVrOGgTP9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODowODo1NVrOGgTP9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyMjk5OQ==", "bodyText": "This is set filter, but the param documents it as to add", "url": "https://github.com/vaadin/flow/pull/8510#discussion_r436522999", "createdAt": "2020-06-08T08:08:55Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -118,45 +117,164 @@\n      *         if backing collection doesn't support modification\n      * @throws IllegalArgumentException\n      *         if item doesn't exist or collection is not a list\n+     * @see #addItemAfter(Object, Object)\n      */\n     V addItemBefore(T item, T before);\n \n     /**\n-     * Adds a filter to be applied to all queries. The filter will be used in\n-     * addition to any filter that has been set or added previously.\n+     * Sets a filter to be applied to the data. The filter replaces any filter\n+     * that has been set or added previously. {@code null} will clear all filters.\n+     * <p>\n+     * A filter bound to data set, not to the component. That means this filter\n+     * won't be retained when a new data or {@link DataProvider} is set to the\n+     * component. Any other component using the same {@link DataProvider} object\n+     * would be affected by setting a filter through data view of another\n+     * component.\n      *\n      * @param filter\n-     *         the filter to add, not <code>null</code>\n+     *         filter to add for the data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb61f53c82309ce644e7d36a7340888bf01fc7a"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3458, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}