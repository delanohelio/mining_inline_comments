{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMjIwMTMx", "number": 9059, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDoyNDoxNlrOEnemng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDoyNDoxNlrOEnemng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODMxMzI2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDoyNDoxNlrOHYF4SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDoyNDoxNlrOHYF4SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAyNDIwMA==", "bodyText": "Remove this use of \"Thread.sleep()\".", "url": "https://github.com/vaadin/flow/pull/9059#discussion_r495024200", "createdAt": "2020-09-25T14:24:16Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java", "diffHunk": "@@ -461,6 +465,80 @@ public void serveDevModeRequest_prepareTasksThrows_serveDevModeReturnsFalseAndDo\n         Assert.assertFalse(handler.serveDevModeRequest(request, response));\n     }\n \n+    @Test\n+    public void start_twoTimes_onlyOneHandlerInstanceIsCreated() {\n+        MockDeploymentConfiguration configuration = Mockito\n+                .spy(MockDeploymentConfiguration.class);\n+        DevModeHandler handler = DevModeHandler.start(0, configuration,\n+                npmFolder, CompletableFuture.completedFuture(null));\n+        handler.join();\n+\n+        // This is how new server handler instantiation checked:\n+        Mockito.verify(configuration).reuseDevServer();\n+\n+        // \"start\" one more time: there should not be another instance of dev\n+        // mode handler created\n+        DevModeHandler anotherHandler = DevModeHandler.start(0, configuration,\n+                npmFolder, CompletableFuture.completedFuture(null));\n+        anotherHandler.join();\n+\n+        // The handler instances are the same but there should be no attempt to\n+        // create another instance (which won't be stored anywhere), see below\n+        Assert.assertSame(handler, anotherHandler);\n+\n+        // No more \"reuseDevServer\" calls are done: see above, it has been\n+        // already called one time\n+        Mockito.verify(configuration).reuseDevServer();\n+    }\n+\n+    @Test\n+    public void start_twoInstances_secondInstanceUsesAnotherPort()\n+            throws Exception {\n+\n+        // start the first instance\n+        DevModeHandler handler = DevModeHandler.start(0, configuration,\n+                npmFolder, CompletableFuture.completedFuture(null));\n+\n+        // remove the \"singleton\" instance to be able to start another one\n+        removeDevModeHandlerInstance();\n+\n+        // since the timeout is quite big the server port still should be\n+        // available and the second instance should try to reuse it\n+\n+        DevModeHandler.start(0, configuration, npmFolder,\n+                CompletableFuture.completedFuture(null));\n+\n+        // make checks only if webpack has not yet completed\n+\n+        DevModeHandler anotherHandler = DevModeHandler.start(0, configuration,\n+                npmFolder, CompletableFuture.completedFuture(null));\n+\n+        while (handler.getPort() == 0) {\n+            Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "443fc0586d847f585a717c20d5378ecc304ca59c"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3085, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}