{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NzY3OTI2", "number": 8708, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoyMToyM1rOEM5F_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDo0NDozMlrOEObNag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTUzNzg5OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoyMToyM1rOGvQ17g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMDoyNToxNFrOGxNqQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjIwNg==", "bodyText": "Are these symbols a part of the public API? What's the main reason to add the symbol postfix? It looks unnecessary, at least in the auto-completion list.\n\nI would like to see shorter API names where possible, e.g. this.binder.model[keys] instead of this.binder.model[keysSymbol]. What would be the downside of renaming all xyzSymbol into xyz?", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r452212206", "createdAt": "2020-07-09T13:21:23Z", "author": {"login": "vlukashov"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "diffHunk": "@@ -7,6 +7,7 @@ export const ItemModelSymbol = Symbol('ItemModel');\n export const parentSymbol = Symbol('parent');\n \n export const keySymbol = Symbol('key');\n+export const keysSymbol = Symbol('keys');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccd1ac37644f920cf667436c8fa4686a97f3368"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI1NzIxOA==", "bodyText": "Per offline discussion, will change to _xyz.\nBut I prefer to do it in a separate PR.", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r454257218", "createdAt": "2020-07-14T10:25:14Z", "author": {"login": "haijian-vaadin"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "diffHunk": "@@ -7,6 +7,7 @@ export const ItemModelSymbol = Symbol('ItemModel');\n export const parentSymbol = Symbol('parent');\n \n export const keySymbol = Symbol('key');\n+export const keysSymbol = Symbol('keys');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjIwNg=="}, "originalCommit": {"oid": "0ccd1ac37644f920cf667436c8fa4686a97f3368"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTc5MDc5OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDoxOToyNlrOGvTWGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDoxOToyNlrOGvTWGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MzIwOA==", "bodyText": "In what situation would this be useful as a public API? Can we make it private?", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r452253208", "createdAt": "2020-07-09T14:19:26Z", "author": {"login": "vlukashov"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "diffHunk": "@@ -80,14 +81,35 @@ export class StringModel extends PrimitiveModel<string> implements HasFromString\n \n export class ObjectModel<T> extends AbstractModel<T> {\n   static createEmptyValue() {\n-    const modelInstance = new this({value: undefined as any}, 'value')\n-    return Object.keys(modelInstance).reduce(\n-      (obj: any, key: keyof any) => {\n-        (obj = (obj || {}))[key] = (\n-          (modelInstance as any)[key].constructor as ModelConstructor<any, AbstractModel<any>>\n-        ).createEmptyValue();\n-        return obj;\n-      }, null);\n+    const modelInstance = new this({value: undefined as any}, 'value');\n+    let obj = {};\n+    for (let proto = Object.getPrototypeOf(modelInstance); proto !== ObjectModel.prototype; proto = Object.getPrototypeOf(proto)) {\n+      obj = Object.getOwnPropertyNames(proto)\n+        .filter(propertyName => propertyName !== 'constructor')\n+        .reduce((o, propertyName) => {\n+          (o as any)[propertyName] = (\n+            (modelInstance as any)[propertyName]\n+              .constructor as ModelConstructor<any, AbstractModel<any>>\n+          ).createEmptyValue();\n+          return o;\n+        }, obj)\n+    }\n+    return obj;\n+  }\n+\n+  [keysSymbol]: {[key in keyof T]?: AbstractModel<T[key]>} = {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccd1ac37644f920cf667436c8fa4686a97f3368"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTgxMDk4OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDoyMzo1M1rOGvTifw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDoyMzo1M1rOGvTifw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1NjM4Mw==", "bodyText": "This would benefit from a comment explaining what this loop does and why.", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r452256383", "createdAt": "2020-07-09T14:23:53Z", "author": {"login": "vlukashov"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "diffHunk": "@@ -80,14 +81,35 @@ export class StringModel extends PrimitiveModel<string> implements HasFromString\n \n export class ObjectModel<T> extends AbstractModel<T> {\n   static createEmptyValue() {\n-    const modelInstance = new this({value: undefined as any}, 'value')\n-    return Object.keys(modelInstance).reduce(\n-      (obj: any, key: keyof any) => {\n-        (obj = (obj || {}))[key] = (\n-          (modelInstance as any)[key].constructor as ModelConstructor<any, AbstractModel<any>>\n-        ).createEmptyValue();\n-        return obj;\n-      }, null);\n+    const modelInstance = new this({value: undefined as any}, 'value');\n+    let obj = {};\n+    for (let proto = Object.getPrototypeOf(modelInstance); proto !== ObjectModel.prototype; proto = Object.getPrototypeOf(proto)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccd1ac37644f920cf667436c8fa4686a97f3368"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTgzMjQ1OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDoyODo1MlrOGvTwQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDoyODo1MlrOGvTwQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1OTkwNQ==", "bodyText": "The symbol name keys is very similar to key, which makes it easy to assume they are of the same type / closely related, and which seems like a wrong assumption.\nDo I understand it right that key is the own name of the modeled field, i.e. a string like 'customer', whereas keys is an object with initialized models for subfields, like { firstname: StringModel }?\nIf so, can one of them or both be renamed to avoid the possible confusion? Maybe name and properties / fields / keys?", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r452259905", "createdAt": "2020-07-09T14:28:52Z", "author": {"login": "vlukashov"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "diffHunk": "@@ -7,6 +7,7 @@ export const ItemModelSymbol = Symbol('ItemModel');\n export const parentSymbol = Symbol('parent');\n \n export const keySymbol = Symbol('key');\n+export const keysSymbol = Symbol('keys');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccd1ac37644f920cf667436c8fa4686a97f3368"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTg3NjE3OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDozODoxOFrOGvUK9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDozODoxOFrOGvUK9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2Njc0MA==", "bodyText": "How can we ensure no name collision could happen if a Java bean has a property called getKey? Should this be a symbol-named method?", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r452266740", "createdAt": "2020-07-09T14:38:18Z", "author": {"login": "vlukashov"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "diffHunk": "@@ -80,14 +81,35 @@ export class StringModel extends PrimitiveModel<string> implements HasFromString\n \n export class ObjectModel<T> extends AbstractModel<T> {\n   static createEmptyValue() {\n-    const modelInstance = new this({value: undefined as any}, 'value')\n-    return Object.keys(modelInstance).reduce(\n-      (obj: any, key: keyof any) => {\n-        (obj = (obj || {}))[key] = (\n-          (modelInstance as any)[key].constructor as ModelConstructor<any, AbstractModel<any>>\n-        ).createEmptyValue();\n-        return obj;\n-      }, null);\n+    const modelInstance = new this({value: undefined as any}, 'value');\n+    let obj = {};\n+    for (let proto = Object.getPrototypeOf(modelInstance); proto !== ObjectModel.prototype; proto = Object.getPrototypeOf(proto)) {\n+      obj = Object.getOwnPropertyNames(proto)\n+        .filter(propertyName => propertyName !== 'constructor')\n+        .reduce((o, propertyName) => {\n+          (o as any)[propertyName] = (\n+            (modelInstance as any)[propertyName]\n+              .constructor as ModelConstructor<any, AbstractModel<any>>\n+          ).createEmptyValue();\n+          return o;\n+        }, obj)\n+    }\n+    return obj;\n+  }\n+\n+  [keysSymbol]: {[key in keyof T]?: AbstractModel<T[key]>} = {};\n+\n+  protected getKey<", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccd1ac37644f920cf667436c8fa4686a97f3368"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTkwMjQ3OnYy", "diffSide": "RIGHT", "path": "flow-client/src/test/frontend/form/TestModels.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo0NDowMlrOGvUboA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo0NDowMlrOGvUboA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3MTAwOA==", "bodyText": "+1\nI'm slightly in favor of using a helper method over a direct implementation in each generated property getter, like\nget idString() {\n  return this[keysSymbol]['idString'] ||\n    this[keysSymbol]['idString'] = new StringModel(this, 'idString');\n}\nArguably, a helper method like getKey() would be easier to understand and more size-efficient compared to a direct alternative.", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r452271008", "createdAt": "2020-07-09T14:44:02Z", "author": {"login": "vlukashov"}, "path": "flow-client/src/test/frontend/form/TestModels.ts", "diffHunk": "@@ -17,7 +18,9 @@ export interface IdEntity {\n }\n export class IdEntityModel<T extends IdEntity = IdEntity> extends ObjectModel<T> {\n   static createEmptyValue: () => IdEntity;\n-  readonly idString = new StringModel(this, 'idString');\n+  get idString(): StringModel {\n+    return this.getKey('idString', StringModel, []);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccd1ac37644f920cf667436c8fa4686a97f3368"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTYxMzIyOnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDo0NDozMlrOGxknwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDo0NDozMlrOGxknwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzMzQxMA==", "bodyText": "I suggest to keep consistency in naming symbols. I think it's better to pick a naming convention and follow it with all symbols used in this module. i.e. either all are called abcSymbol or all are called abc, but not a mix of those.", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r454633410", "createdAt": "2020-07-14T20:44:32Z", "author": {"login": "vlukashov"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "diffHunk": "@@ -10,21 +10,25 @@ export const keySymbol = Symbol('key');\n export const fromStringSymbol = Symbol('fromString');\n export const validatorsSymbol = Symbol('validators');\n export const binderNodeSymbol = Symbol('binderNode');\n+export const optionalSymbol = Symbol('optional');\n+\n+export const getPropertyModel = Symbol('getPropertyModel');\n+const properties = Symbol('properties');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f874cbcd7ba8798e5e3fb0452fd40c25b889e763"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3362, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}