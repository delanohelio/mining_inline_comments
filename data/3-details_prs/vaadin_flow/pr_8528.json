{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMzAzMTc5", "number": 8528, "title": "Add updateItem to DataView #8499", "bodyText": "Fixes #8499", "createdAt": "2020-06-08T17:58:54Z", "url": "https://github.com/vaadin/flow/pull/8528", "merged": true, "mergeCommit": {"oid": "714e318ca90b85642e2740a32a7282d17d80cffc"}, "closed": true, "closedAt": "2020-06-10T06:04:30Z", "author": {"login": "mshabarov"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpUQ2agH2gAyNDMxMzAzMTc5OjVkZmUxZDhjYWY2Njg4ZGZlZGM5NGFhNjg5ZDZlMGJjMDBlYzJkYTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpzUGAgFqTQyNzczMzkwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5dfe1d8caf6688dfedc94aa689d6e0bc00ec2da2", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/5dfe1d8caf6688dfedc94aa689d6e0bc00ec2da2", "committedDate": "2020-06-08T17:53:29Z", "message": "Add updateItem to DataView #8499"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "committedDate": "2020-06-08T19:14:50Z", "message": "Fix javadoc for update methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NTYzMzQz", "url": "https://github.com/vaadin/flow/pull/8528#pullrequestreview-426563343", "createdAt": "2020-06-08T19:41:14Z", "commit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTo0MToxNFrOGgttQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTo0Njo1MlrOGgt4Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1NjQ4MA==", "bodyText": "Should getDataProvider() only be called once in the method?\nAnd should itemIdentifier.equals() be used because it can't be null?", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r436956480", "createdAt": "2020-06-08T19:41:14Z", "author": {"login": "knoobie"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -126,10 +130,11 @@ public AbstractListDataView(\n \n     @Override\n     public boolean contains(T item) {\n-        // TODO: delegate this to the data communicator/component, since the\n-        // equality could be\n-        // determined by the provided identity checker (the default is equals).\n-        return getItems().anyMatch(i -> Objects.equals(i, item));\n+        final Object itemIdentifier = getDataProvider().getId(item);\n+        Objects.requireNonNull(itemIdentifier,\n+                \"Identity Provider should not return null\");\n+        return getItems().anyMatch(i -> getDataProvider().getId(i)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1OTI1OQ==", "bodyText": "The javadoc on both methods isn't clear if it updates an item or items.\nRandom question: why does data provider allows for multiple items with the same id? If I remember correctly V8 allows it too.. but only on the server side, the client side is broken once multiple rows have the same id in a grid. For example if you place components inside a row and scrolling.. the components aren't displayed in all rows correctly.. instead only some are shown.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r436959259", "createdAt": "2020-06-08T19:46:52Z", "author": {"login": "knoobie"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2Nzk4NjI2", "url": "https://github.com/vaadin/flow/pull/8528#pullrequestreview-426798626", "createdAt": "2020-06-09T05:29:07Z", "commit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNToyOTowN1rOGg5REw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjoxMDo1NlrOGg6Fgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NTg3NQ==", "bodyText": "For a non List implementation we could if needed just remove and add if the item is not the same item as in the collection.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437145875", "createdAt": "2020-06-09T05:29:07Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);\n+                    getDataProvider().refreshItem(item);\n+                }\n+            }\n+            return this;\n+        }\n+        throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NjEzOQ==", "bodyText": "Before setting we could check if item.equals(nextItem) and only refresh if they are the same item.\ne.g.\n            if (itemIdentifier.equals(\n                        identityProvider.apply(nextItem))) {\n                if (!itemList.get(i).equals(item)) {\n                    itemList.set(i, item);\n                }\n                provider.refresh(item);\n            }", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437146139", "createdAt": "2020-06-09T05:30:03Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0Njk0OA==", "bodyText": "This formatting change is not correct as our line length is 80, but now this is already 101.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437146948", "createdAt": "2020-06-09T05:32:42Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -164,8 +203,7 @@ public boolean contains(T item) {\n     public AbstractListDataView<T> addItemAfter(T item, T after) {\n         final Collection<T> items = getDataProvider().getItems();\n         if (!items.contains(after)) {\n-            throw new IllegalArgumentException(\n-                    \"Item to insert after is not available in the data\");\n+            throw new IllegalArgumentException(\"Item to insert after is not available in the data\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NzUxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Equality between items relies on equality of its identifiers\n          \n          \n            \n                 * Equality between the items is determined by the identifiers", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437147513", "createdAt": "2020-06-09T05:34:47Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NzY5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Finds an items equal to {@code item} in the non-filtered data set\n          \n          \n            \n                 * Finds an item equal to {@code item} in the non-filtered data set", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437147699", "createdAt": "2020-06-09T05:35:26Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers\n+     * provided by {@link DataProvider#getId(Object)}.\n+     *\n+     * @param item\n+     *         item containing updated state\n+     * @return this ListDataView instance\n+     *\n+     * @see #updateItem(Object, SerializableFunction)\n+     */\n+    V updateItem(T item);\n+\n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODQ3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Equality between items relies on equality of its identifiers\n          \n          \n            \n                  * Equality between the items is determined by the identifiers", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437148476", "createdAt": "2020-06-09T05:37:48Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers\n+     * provided by {@link DataProvider#getId(Object)}.\n+     *\n+     * @param item\n+     *         item containing updated state\n+     * @return this ListDataView instance\n+     *\n+     * @see #updateItem(Object, SerializableFunction)\n+     */\n+    V updateItem(T item);\n+\n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODcyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *         object which is used to find the equal items in data set.\n          \n          \n            \n                 *         object which is used to determine the equality between items.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437148725", "createdAt": "2020-06-09T05:38:44Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers\n+     * provided by {@link DataProvider#getId(Object)}.\n+     *\n+     * @param item\n+     *         item containing updated state\n+     * @return this ListDataView instance\n+     *\n+     * @see #updateItem(Object, SerializableFunction)\n+     */\n+    V updateItem(T item);\n+\n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers\n+     * provided by {@code identityProvider}.\n+     *\n+     * @param item\n+     *         item containing updated state\n+     * @param identityProvider\n+     *         callback that transforms {@code item} object into identifier\n+     *         object which is used to find the equal items in data set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODkwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Finds an items equal to {@code item} in the non-filtered data set\n          \n          \n            \n                 * Finds an item equal to {@code item} in the non-filtered data set", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437148908", "createdAt": "2020-06-09T05:39:26Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MDI4OQ==", "bodyText": "This is duplicated 3 times so it could be a method getIdentifier(T item) also the unchecked getId calls could then use this method to get the non null check.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437150289", "createdAt": "2020-06-09T05:43:45Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -278,9 +316,13 @@ protected void validateItemIndex(int itemIndex) {\n \n     private int getItemIndex(T item) {\n         Objects.requireNonNull(item, \"item cannot be null\");\n+        final Object itemIdentifier = getDataProvider().getId(item);\n+        Objects.requireNonNull(itemIdentifier,\n+                \"Identity Provider should not return null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MjYxNQ==", "bodyText": "Would move item creation to the test class as it's  nice if the item content could be seen from the test class.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437152615", "createdAt": "2020-06-09T05:51:10Z", "author": {"login": "caalador"}, "path": "flow-data/src/test/java/com/vaadin/flow/tests/data/bean/Item.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.tests.data.bean;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Objects;\n+\n+public class Item {\n+\n+    private long id;\n+    private String value;\n+    private String description;\n+\n+    public Item(long id) {\n+        this.id = id;\n+    }\n+\n+    public Item(long id, String value, String description) {\n+        this.id = id;\n+        this.value = value;\n+        this.description = description;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Item item = (Item) o;\n+        return id == item.id;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id);\n+    }\n+\n+    public static Collection<Item> getTestItems() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NTM1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                            break;\n          \n          \n            \n                        }\n          \n      \n    \n    \n  \n\nWe should break on the  first match as we only update item not multiple items.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437155350", "createdAt": "2020-06-09T05:59:13Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);\n+                    getDataProvider().refreshItem(item);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NTQ1MQ==", "bodyText": "This test does bring up the question of @knoobie that why does data provider allow for multiple items with the same identifier as I would say that this is a bit confusing that we can suddenly change the contents of 2 items", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437155451", "createdAt": "2020-06-09T05:59:36Z", "author": {"login": "caalador"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -431,6 +433,103 @@ public void clearFilters_removesAllSetAndAddedFilters() {\n                 dataView.getItems().count());\n     }\n \n+    @Test\n+    public void updateItem_idEquality_updatesExistingItem() {\n+        Collection<Item> items = Item.getTestItems();\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(\n+                new Item(1L, \"updatedValue\", \"updatedDescr\"));\n+\n+        Optional<Item> firstItem =\n+                items.stream().filter(i -> i.getId() == 1L).findFirst();\n+\n+        // Item with id = 1 supposed to be updated\n+        Assert.assertTrue(firstItem.isPresent());\n+        Assert.assertEquals(3, items.size());\n+        Assert.assertEquals(\"updatedValue\", firstItem.get().getValue());\n+        Assert.assertEquals(\"updatedDescr\", firstItem.get().getDescription());\n+    }\n+\n+    @Test\n+    public void updateItem_idEquality_updatesExistingItems() {\n+        Collection<Item> items = Item.getTestItems();\n+        items.add(new Item(1L, \"duplicatedValue\", \"duplicatedDescr\"));\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1ODk0Ng==", "bodyText": "The dataprovider should be created once and that instance served. This due to the fact that the suplier is already called 2 times just for the updateItem so we now create 4 ItemDataProviders during this simple test.\nThis goes for all the other tests also.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437158946", "createdAt": "2020-06-09T06:10:03Z", "author": {"login": "caalador"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -431,6 +433,103 @@ public void clearFilters_removesAllSetAndAddedFilters() {\n                 dataView.getItems().count());\n     }\n \n+    @Test\n+    public void updateItem_idEquality_updatesExistingItem() {\n+        Collection<Item> items = Item.getTestItems();\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(\n+                new Item(1L, \"updatedValue\", \"updatedDescr\"));\n+\n+        Optional<Item> firstItem =\n+                items.stream().filter(i -> i.getId() == 1L).findFirst();\n+\n+        // Item with id = 1 supposed to be updated\n+        Assert.assertTrue(firstItem.isPresent());\n+        Assert.assertEquals(3, items.size());\n+        Assert.assertEquals(\"updatedValue\", firstItem.get().getValue());\n+        Assert.assertEquals(\"updatedDescr\", firstItem.get().getDescription());\n+    }\n+\n+    @Test\n+    public void updateItem_idEquality_updatesExistingItems() {\n+        Collection<Item> items = Item.getTestItems();\n+        items.add(new Item(1L, \"duplicatedValue\", \"duplicatedDescr\"));\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(\n+                new Item(1L, \"updatedValue\", \"updatedDescr\"));\n+\n+        List<Item> updatedItems =\n+                items.stream().filter(i -> i.getId() == 1L).collect(Collectors.toList());\n+\n+        // Two items with id = 1 supposed to be updated\n+        Assert.assertEquals(2, updatedItems.size());\n+        Assert.assertEquals(4, items.size());\n+        Assert.assertEquals(\"updatedValue\", updatedItems.get(0).getValue());\n+        Assert.assertEquals(\"updatedDescr\", updatedItems.get(0).getDescription());\n+        Assert.assertEquals(\"updatedValue\", updatedItems.get(1).getValue());\n+        Assert.assertEquals(\"updatedDescr\", updatedItems.get(1).getDescription());\n+    }\n+\n+    @Test\n+    public void updateItem_descrIdentity_updatesExistingItem() {\n+        Collection<Item> items = Item.getTestItems();\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> new ItemDataProvider(items), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1OTI5OA==", "bodyText": "The name could perhaps somehow note that it has the Id as Description", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437159298", "createdAt": "2020-06-09T06:10:56Z", "author": {"login": "caalador"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -439,4 +538,26 @@ public ListDataViewImpl(\n             super(dataProviderSupplier, component);\n         }\n     }\n+\n+    private static class ItemDataProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 125}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c7a435e1ef57fa8bd86ceb24f65f1994aca54ca", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/9c7a435e1ef57fa8bd86ceb24f65f1994aca54ca", "committedDate": "2020-06-09T12:03:27Z", "message": "UpdateItem javadoc fix\n\nCo-authored-by: caalador <mikael.grankvist@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87b8b24243cc51548dabbaa6a83a33934c04347e", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/87b8b24243cc51548dabbaa6a83a33934c04347e", "committedDate": "2020-06-09T12:04:55Z", "message": "UpdateItem javadoc fix\n\nCo-authored-by: caalador <mikael.grankvist@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62674a19d3aa60c4083ff376f4c8a574509ffd08", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/62674a19d3aa60c4083ff376f4c8a574509ffd08", "committedDate": "2020-06-09T12:05:35Z", "message": "UpdateItem javadoc fix\n\nCo-authored-by: caalador <mikael.grankvist@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4410773cccd46d98960334e9404c40ac92dbab26", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/4410773cccd46d98960334e9404c40ac92dbab26", "committedDate": "2020-06-09T18:07:22Z", "message": "Multiple items update exclusion, javadoc and unit tests elaboration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d777f56dce182464652749eab705ced349582810", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/d777f56dce182464652749eab705ced349582810", "committedDate": "2020-06-09T18:42:11Z", "message": "Add exceptions to javadoc, code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NzE0NTIy", "url": "https://github.com/vaadin/flow/pull/8528#pullrequestreview-427714522", "createdAt": "2020-06-10T05:09:53Z", "commit": {"oid": "d777f56dce182464652749eab705ced349582810"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNTowOTo1M1rOGhlDRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNToyMzozN1rOGhlSRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2MzIzOQ==", "bodyText": "Well if you have the default id and the objects equal then there is no need to set the item and we only need to refresh.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437863239", "createdAt": "2020-06-10T05:09:53Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NjEzOQ=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NDY4OA==", "bodyText": "Do we need the dataProvider here as we  can just use the getDataProvider() method to get a ListDataProvider.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437864688", "createdAt": "2020-06-10T05:15:03Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -276,13 +317,37 @@ protected void validateItemIndex(int itemIndex) {\n         return this;\n     }\n \n-    private int getItemIndex(T item) {\n+    private int getItemIndex(\n+            T item, SerializableFunction<T, ?> identityProvider) {\n         Objects.requireNonNull(item, \"item cannot be null\");\n+        final Object itemIdentifier = getIdentifier(item,\n+                identityProvider);\n         AtomicInteger index = new AtomicInteger(-1);\n         if (!getItems().peek(t -> index.incrementAndGet())\n-                .filter(t -> Objects.equals(item, t)).findFirst().isPresent()) {\n+                .filter(t -> itemIdentifier.equals(\n+                        getIdentifier(t, identityProvider)))\n+                .findFirst().isPresent()) {\n             return -1;\n         }\n         return index.get();\n     }\n+\n+    private int getItemIndex(T item) {\n+        ListDataProvider<T> dataProvider = getDataProvider();\n+        return getItemIndex(item, dataProvider::getId);\n+    }\n+\n+    private Object getIdentifier(T item,\n+                                 SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        final Object itemIdentifier = identityProvider.apply(item);\n+        Objects.requireNonNull(itemIdentifier,\n+                \"Identity provider should not return null\");\n+        return itemIdentifier;\n+    }\n+\n+    private Object getIdentifier(T item, ListDataProvider<T> dataProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d777f56dce182464652749eab705ced349582810"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NzA3OQ==", "bodyText": "Just create a new issue for it.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437867079", "createdAt": "2020-06-10T05:23:37Z", "author": {"login": "caalador"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -431,6 +433,103 @@ public void clearFilters_removesAllSetAndAddedFilters() {\n                 dataView.getItems().count());\n     }\n \n+    @Test\n+    public void updateItem_idEquality_updatesExistingItem() {\n+        Collection<Item> items = Item.getTestItems();\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(\n+                new Item(1L, \"updatedValue\", \"updatedDescr\"));\n+\n+        Optional<Item> firstItem =\n+                items.stream().filter(i -> i.getId() == 1L).findFirst();\n+\n+        // Item with id = 1 supposed to be updated\n+        Assert.assertTrue(firstItem.isPresent());\n+        Assert.assertEquals(3, items.size());\n+        Assert.assertEquals(\"updatedValue\", firstItem.get().getValue());\n+        Assert.assertEquals(\"updatedDescr\", firstItem.get().getDescription());\n+    }\n+\n+    @Test\n+    public void updateItem_idEquality_updatesExistingItems() {\n+        Collection<Item> items = Item.getTestItems();\n+        items.add(new Item(1L, \"duplicatedValue\", \"duplicatedDescr\"));\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NTQ1MQ=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NzMzOTAz", "url": "https://github.com/vaadin/flow/pull/8528#pullrequestreview-427733903", "createdAt": "2020-06-10T06:04:05Z", "commit": {"oid": "d777f56dce182464652749eab705ced349582810"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 464, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}