{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0Mzc1Mjcy", "number": 9604, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo0MToxM1rOFDYZiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTozMzozMVrOFFLBnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDg5ODAzOnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Validators.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo0MToxM1rOIDAHwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo0MToxM1rOIDAHwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxODYyNA==", "bodyText": "redundant string?", "url": "https://github.com/vaadin/flow/pull/9604#discussion_r540018624", "createdAt": "2020-12-10T09:41:13Z", "author": {"login": "haijian-vaadin"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Validators.ts", "diffHunk": "@@ -56,15 +56,30 @@ export class Required<T> extends AbstractValidator<T> {\n   }\n }\n \n-function _asValidatorAttributes(attrs: ValueNumberAttributes | number | string | PatternAttributes | RegExp) {\n+function _asValidatorAttributes(attrs: ValueNumberAttributes | number | string | PatternAttributes | string | RegExp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71564b9bf121b708d6154aca60908e6c966182bb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTYwNDcwOnYy", "diffSide": "RIGHT", "path": "flow-client/src/test/frontend/form/FieldTests.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToyMjo1MlrOIFiToQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToyMjo1MlrOIFiToQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY3NTg3Mw==", "bodyText": "remove debugger?", "url": "https://github.com/vaadin/flow/pull/9604#discussion_r542675873", "createdAt": "2020-12-14T19:22:52Z", "author": {"login": "haijian-vaadin"}, "path": "flow-client/src/test/frontend/form/FieldTests.ts", "diffHunk": "@@ -311,6 +394,76 @@ suite(\"form/Field\", () => {\n       sinon.assert.calledTwice(orderViewWithInput.customerFullNameField!.setAttributeSpy);\n       sinon.assert.calledOnce(orderViewWithInput.customerNickNameField!.setAttributeSpy);\n     });\n+\n+    suite('number model', () => {\n+      let view: OrderViewWithInput,\n+        priorityField: MockInputElement,\n+        binder: Binder<Order, OrderModel>;\n+\n+      beforeEach(async () => {\n+        view = orderViewWithInput;\n+        binder = view.binder;\n+        priorityField = view.priorityField!;\n+      });\n+\n+      test('should set initial zero', async () => {\n+        expect(priorityField.value).to.equal('0');\n+      });\n+\n+      test('should set number value from binder', async () => {\n+        priorityField.valueSpy.get.resetHistory();\n+        priorityField.valueSpy.set.resetHistory();\n+\n+        binder.for(binder.model.priority).value = 1.2;\n+        await view.updateComplete;\n+        sinon.assert.calledOnceWithExactly(priorityField.valueSpy.set, 1.2);\n+      });\n+\n+      test('should update binder value on typing', async () => {\n+        const cases: Array<[string, number]> = [\n+          ['1', 1],\n+          ['1.', NaN], // not allowed format\n+          ['1.2', 1.2],\n+          ['', NaN],\n+          ['not a number', NaN],\n+          ['.', NaN],\n+          ['.1', 0.1],\n+          // Invalid separator\n+          [',', NaN],\n+          [',2', NaN],\n+          ['1,', NaN],\n+          ['1,2', NaN]\n+        ];\n+\n+        for (const [inputValue, expectedNumber] of cases) {\n+          for (const eventName of ['input', 'change']) {\n+            debugger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c64e78daebd42962f58d510bbae841d6d7b75e4"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTY0OTk2OnYy", "diffSide": "RIGHT", "path": "flow-client/src/test/frontend/form/ValidatorsTests.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToyOToyMFrOIFiwyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDozNDo0OVrOIGEF7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY4MzMzOQ==", "bodyText": "Maybe we could add validations for 1,2, 1,abc, abc etc?", "url": "https://github.com/vaadin/flow/pull/9604#discussion_r542683339", "createdAt": "2020-12-14T19:29:20Z", "author": {"login": "haijian-vaadin"}, "path": "flow-client/src/test/frontend/form/ValidatorsTests.ts", "diffHunk": "@@ -120,6 +121,18 @@ suite(\"form/Validators\", () => {\n     assert.isFalse(validator.validate(true));\n   });\n \n+  test('IsNumber', () => {\n+    const validator = new IsNumber();\n+    assert.isNotTrue(validator.impliesRequired);\n+    assert.isTrue(validator.validate(0));\n+    assert.isTrue(validator.validate(1));\n+    assert.isTrue(validator.validate(1.2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c64e78daebd42962f58d510bbae841d6d7b75e4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyOTQyMg==", "bodyText": "This validator cannot check those cases \u2014\u00a0it only works on the number data type, which is the only type NumberModel works with.", "url": "https://github.com/vaadin/flow/pull/9604#discussion_r543229422", "createdAt": "2020-12-15T10:34:49Z", "author": {"login": "platosha"}, "path": "flow-client/src/test/frontend/form/ValidatorsTests.ts", "diffHunk": "@@ -120,6 +121,18 @@ suite(\"form/Validators\", () => {\n     assert.isFalse(validator.validate(true));\n   });\n \n+  test('IsNumber', () => {\n+    const validator = new IsNumber();\n+    assert.isNotTrue(validator.impliesRequired);\n+    assert.isTrue(validator.validate(0));\n+    assert.isTrue(validator.validate(1));\n+    assert.isTrue(validator.validate(1.2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY4MzMzOQ=="}, "originalCommit": {"oid": "4c64e78daebd42962f58d510bbae841d6d7b75e4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTY3ODM5OnYy", "diffSide": "RIGHT", "path": "flow-client/src/test/frontend/form/FieldTests.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTozMzozMVrOIFjC2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDozNTowOVrOIGEGuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY4Nzk2MQ==", "bodyText": "remove debugger?", "url": "https://github.com/vaadin/flow/pull/9604#discussion_r542687961", "createdAt": "2020-12-14T19:33:31Z", "author": {"login": "haijian-vaadin"}, "path": "flow-client/src/test/frontend/form/FieldTests.ts", "diffHunk": "@@ -311,6 +394,76 @@ suite(\"form/Field\", () => {\n       sinon.assert.calledTwice(orderViewWithInput.customerFullNameField!.setAttributeSpy);\n       sinon.assert.calledOnce(orderViewWithInput.customerNickNameField!.setAttributeSpy);\n     });\n+\n+    suite('number model', () => {\n+      let view: OrderViewWithInput,\n+        priorityField: MockInputElement,\n+        binder: Binder<Order, OrderModel>;\n+\n+      beforeEach(async () => {\n+        view = orderViewWithInput;\n+        binder = view.binder;\n+        priorityField = view.priorityField!;\n+      });\n+\n+      test('should set initial zero', async () => {\n+        expect(priorityField.value).to.equal('0');\n+      });\n+\n+      test('should set number value from binder', async () => {\n+        priorityField.valueSpy.get.resetHistory();\n+        priorityField.valueSpy.set.resetHistory();\n+\n+        binder.for(binder.model.priority).value = 1.2;\n+        await view.updateComplete;\n+        sinon.assert.calledOnceWithExactly(priorityField.valueSpy.set, 1.2);\n+      });\n+\n+      test('should update binder value on typing', async () => {\n+        const cases: Array<[string, number]> = [\n+          ['1', 1],\n+          ['1.', NaN], // not allowed format\n+          ['1.2', 1.2],\n+          ['', NaN],\n+          ['not a number', NaN],\n+          ['.', NaN],\n+          ['.1', 0.1],\n+          // Invalid separator\n+          [',', NaN],\n+          [',2', NaN],\n+          ['1,', NaN],\n+          ['1,2', NaN]\n+        ];\n+\n+        for (const [inputValue, expectedNumber] of cases) {\n+          for (const eventName of ['input', 'change']) {\n+            debugger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c64e78daebd42962f58d510bbae841d6d7b75e4"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyOTYyNQ==", "bodyText": "done", "url": "https://github.com/vaadin/flow/pull/9604#discussion_r543229625", "createdAt": "2020-12-15T10:35:09Z", "author": {"login": "platosha"}, "path": "flow-client/src/test/frontend/form/FieldTests.ts", "diffHunk": "@@ -311,6 +394,76 @@ suite(\"form/Field\", () => {\n       sinon.assert.calledTwice(orderViewWithInput.customerFullNameField!.setAttributeSpy);\n       sinon.assert.calledOnce(orderViewWithInput.customerNickNameField!.setAttributeSpy);\n     });\n+\n+    suite('number model', () => {\n+      let view: OrderViewWithInput,\n+        priorityField: MockInputElement,\n+        binder: Binder<Order, OrderModel>;\n+\n+      beforeEach(async () => {\n+        view = orderViewWithInput;\n+        binder = view.binder;\n+        priorityField = view.priorityField!;\n+      });\n+\n+      test('should set initial zero', async () => {\n+        expect(priorityField.value).to.equal('0');\n+      });\n+\n+      test('should set number value from binder', async () => {\n+        priorityField.valueSpy.get.resetHistory();\n+        priorityField.valueSpy.set.resetHistory();\n+\n+        binder.for(binder.model.priority).value = 1.2;\n+        await view.updateComplete;\n+        sinon.assert.calledOnceWithExactly(priorityField.valueSpy.set, 1.2);\n+      });\n+\n+      test('should update binder value on typing', async () => {\n+        const cases: Array<[string, number]> = [\n+          ['1', 1],\n+          ['1.', NaN], // not allowed format\n+          ['1.2', 1.2],\n+          ['', NaN],\n+          ['not a number', NaN],\n+          ['.', NaN],\n+          ['.1', 0.1],\n+          // Invalid separator\n+          [',', NaN],\n+          [',2', NaN],\n+          ['1,', NaN],\n+          ['1,2', NaN]\n+        ];\n+\n+        for (const [inputValue, expectedNumber] of cases) {\n+          for (const eventName of ['input', 'change']) {\n+            debugger;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY4Nzk2MQ=="}, "originalCommit": {"oid": "4c64e78daebd42962f58d510bbae841d6d7b75e4"}, "originalPosition": 190}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2904, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}