{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzOTU0MjUz", "number": 9278, "title": "refactoring: App classpath resources should be access via ResourceProvider", "bodyText": "Fixes #9269", "createdAt": "2020-11-02T10:22:20Z", "url": "https://github.com/vaadin/flow/pull/9278", "merged": true, "mergeCommit": {"oid": "19e71d8bf744dc258209bb91f0cf3d318f831ab7"}, "closed": true, "closedAt": "2020-11-04T11:56:32Z", "author": {"login": "denis-anisimov"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYh5uQAH2gAyNTEzOTU0MjUzOjhmZjE4MGZlNTRkZDkyYjQzNGEwMzdiZGY0YTE1MDEwZTE5YTgwN2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZLarLAFqTUyMzI0MTMxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8ff180fe54dd92b434a037bdf4a15010e19a807a", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/8ff180fe54dd92b434a037bdf4a15010e19a807a", "committedDate": "2020-11-02T10:21:20Z", "message": "refactoring: App classpath resources should be access via\nResourceProvider\n\nFixes #9269"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/3d376470bf585aa062651b60532f34cb97c4c400", "committedDate": "2020-11-02T11:17:41Z", "message": "fix: report the exception in the logger"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTAyNTky", "url": "https://github.com/vaadin/flow/pull/9278#pullrequestreview-523102592", "createdAt": "2020-11-04T07:38:50Z", "commit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzozODo1MFrOHtMEFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzo1MzowNFrOHtMcyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0NTYyMQ==", "bodyText": "Missing service parameter from the javaDoc", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517145621", "createdAt": "2020-11-04T07:38:50Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "diffHunk": "@@ -162,16 +166,31 @@ private boolean dependencyHasTagName(Dependency dependency, String tag) {\n     /**\n      * Finds the JavaScript sources for given tag.\n      *\n-     * @param tag the value of the {@link com.vaadin.flow.component.Tag} annotation,\n-     *            e.g. `my-component`\n-     * @param url the URL resolved according to the {@link com.vaadin.flow.component.dependency.JsModule}\n-     *            spec, for example {@code ./view/my-view.js} or {@code @vaadin/vaadin-button.js}.\n+     * @param tag", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0Nzc0Ng==", "bodyText": "Should we just have a method getResourceProvider in service so you wouldn't need to do this dance in every place as now it's basically the same code in every place and then we could have some null checks in place also.\nPerhaps even have the shorthand of getApplicationResource in  service", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517147746", "createdAt": "2020-11-04T07:43:30Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "diffHunk": "@@ -162,16 +166,31 @@ private boolean dependencyHasTagName(Dependency dependency, String tag) {\n     /**\n      * Finds the JavaScript sources for given tag.\n      *\n-     * @param tag the value of the {@link com.vaadin.flow.component.Tag} annotation,\n-     *            e.g. `my-component`\n-     * @param url the URL resolved according to the {@link com.vaadin.flow.component.dependency.JsModule}\n-     *            spec, for example {@code ./view/my-view.js} or {@code @vaadin/vaadin-button.js}.\n+     * @param tag\n+     *            the value of the {@link com.vaadin.flow.component.Tag}\n+     *            annotation, e.g. `my-component`\n+     * @param url\n+     *            the URL resolved according to the\n+     *            {@link com.vaadin.flow.component.dependency.JsModule} spec,\n+     *            for example {@code ./view/my-view.js} or\n+     *            {@code @vaadin/vaadin-button.js}.\n      * @return the .js source which declares given custom element, or null if no\n      *         such source can be found.\n      */\n-    protected String getSourcesFromTemplate(String tag, String url) {\n-        InputStream content = getClass().getClassLoader()\n-                .getResourceAsStream(url);\n+    protected String getSourcesFromTemplate(VaadinService service, String tag,\n+            String url) {\n+        Lookup lookup = service.getContext().getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE1MDI4NA==", "bodyText": "the inputStream should be closed after the streamToString call.", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517150284", "createdAt": "2020-11-04T07:49:18Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "diffHunk": "@@ -162,16 +166,31 @@ private boolean dependencyHasTagName(Dependency dependency, String tag) {\n     /**\n      * Finds the JavaScript sources for given tag.\n      *\n-     * @param tag the value of the {@link com.vaadin.flow.component.Tag} annotation,\n-     *            e.g. `my-component`\n-     * @param url the URL resolved according to the {@link com.vaadin.flow.component.dependency.JsModule}\n-     *            spec, for example {@code ./view/my-view.js} or {@code @vaadin/vaadin-button.js}.\n+     * @param tag\n+     *            the value of the {@link com.vaadin.flow.component.Tag}\n+     *            annotation, e.g. `my-component`\n+     * @param url\n+     *            the URL resolved according to the\n+     *            {@link com.vaadin.flow.component.dependency.JsModule} spec,\n+     *            for example {@code ./view/my-view.js} or\n+     *            {@code @vaadin/vaadin-button.js}.\n      * @return the .js source which declares given custom element, or null if no\n      *         such source can be found.\n      */\n-    protected String getSourcesFromTemplate(String tag, String url) {\n-        InputStream content = getClass().getClassLoader()\n-                .getResourceAsStream(url);\n+    protected String getSourcesFromTemplate(VaadinService service, String tag,\n+            String url) {\n+        Lookup lookup = service.getContext().getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);\n+        InputStream content = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE1MTY3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                file, e));\n          \n          \n            \n                                file), e);", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517151674", "createdAt": "2020-11-04T07:52:24Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/BootstrapUtils.java", "diffHunk": "@@ -301,13 +305,24 @@ static String getDependencyContents(VaadinRequest request, String file) {\n \n     private static InputStream getInlineResourceStream(VaadinRequest request,\n             String file) {\n-        InputStream stream = request.getService().getClassLoader()\n-                .getResourceAsStream(file);\n+        VaadinService service = request.getService();\n+        ResourceProvider resourceProvider = service.getContext()\n+                .getAttribute(Lookup.class).lookup(ResourceProvider.class);\n+        URL appResource = resourceProvider.getApplicationResource(service,\n+                file);\n+\n+        InputStream stream = null;\n+        try {\n+            stream = appResource == null ? null : appResource.openStream();\n+        } catch (IOException e) {\n+            throw new IllegalStateException(String.format(\n+                    \"Couldn't open application resource '%s' for inline resource\",\n+                    file, e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE1MTk0Ng==", "bodyText": "Unrelated formatting change", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517151946", "createdAt": "2020-11-04T07:53:04Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/BootstrapUtils.java", "diffHunk": "@@ -462,26 +477,26 @@ private static JsonObject createInlineDependencyObject(String content) {\n         // found\" target\n         return resolveRouteNotFoundNavigationTarget(\n                 ui.getSession().getService().getContext())\n-                .map(errorNavigationTarget -> {\n-                    /*\n-                     * {@code resolveTopParentLayout} is theoretically the\n-                     * correct way to get the parent layout. But in fact it does\n-                     * work for non route targets.\n-                     */\n-                    List<Class<? extends RouterLayout>> layouts = RouteUtil\n-                            .getParentLayoutsForNonRouteTarget(\n-                                    errorNavigationTarget);\n-                    if (layouts.isEmpty()) {\n-                        return errorNavigationTarget;\n-                    } else {\n-                        return layouts.get(layouts.size() - 1);\n-                    }\n-                });\n+                        .map(errorNavigationTarget -> {\n+                            /*\n+                             * {@code resolveTopParentLayout} is theoretically\n+                             * the correct way to get the parent layout. But in\n+                             * fact it does work for non route targets.\n+                             */\n+                            List<Class<? extends RouterLayout>> layouts = RouteUtil\n+                                    .getParentLayoutsForNonRouteTarget(\n+                                            errorNavigationTarget);\n+                            if (layouts.isEmpty()) {\n+                                return errorNavigationTarget;\n+                            } else {\n+                                return layouts.get(layouts.size() - 1);\n+                            }\n+                        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "352c34ef1fbc2184c7ca4ef81b51bebf6cc7e720", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/352c34ef1fbc2184c7ca4ef81b51bebf6cc7e720", "committedDate": "2020-11-04T10:34:55Z", "message": "fix: fix review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjQxMzEy", "url": "https://github.com/vaadin/flow/pull/9278#pullrequestreview-523241312", "createdAt": "2020-11-04T10:43:26Z", "commit": {"oid": "352c34ef1fbc2184c7ca4ef81b51bebf6cc7e720"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4757, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}