{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMjUzNTAz", "number": 8639, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjowMzozNlrOEJ8Y6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjowNDoyMFrOEJ8ZvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODYyMDU5OnYy", "diffSide": "RIGHT", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractComponentDataViewTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjowMzozNlrOGqs8uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjowMzozNlrOGqs8uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyOTgxNw==", "bodyText": "Maybe add some comments on what is this about and what it is meant for ?", "url": "https://github.com/vaadin/flow/pull/8639#discussion_r447429817", "createdAt": "2020-06-30T06:03:36Z", "author": {"login": "pleku"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractComponentDataViewTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializablePredicate;\n+import com.vaadin.flow.shared.Registration;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public abstract class AbstractComponentDataViewTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d659713afe4e697355f354fcc8ed724c4eae6ba"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODYyMjY4OnYy", "diffSide": "RIGHT", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractComponentDataViewTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjowNDoyMFrOGqs93A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjowNDoyMFrOGqs93A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMDEwOA==", "bodyText": "NIT: addSizeListener", "url": "https://github.com/vaadin/flow/pull/8639#discussion_r447430108", "createdAt": "2020-06-30T06:04:20Z", "author": {"login": "pleku"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractComponentDataViewTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializablePredicate;\n+import com.vaadin.flow.shared.Registration;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public abstract class AbstractComponentDataViewTest {\n+\n+    protected List<String> items;\n+    protected InMemoryDataProvider<String> dataProvider;\n+    protected DataView<String> dataView;\n+    protected HasDataView<String, ? extends DataView<String>> component;\n+\n+    @Before\n+    public void init() {\n+        items = new ArrayList<>(Arrays.asList(\"first\", \"middle\", \"last\"));\n+        dataProvider = new InMemoryProvider(items);\n+        component = getVerifiedComponent();\n+        dataView = component.setDataSource(dataProvider);\n+    }\n+\n+    @Test\n+    public void getItems_noFiltersSet_allItemsObtained() {\n+        Stream<String> allItems = dataView.getItems();\n+        Assert.assertArrayEquals(\"Unexpected data set\", items.toArray(),\n+                allItems.toArray());\n+    }\n+\n+    @Test\n+    public void getItems_filtersSet_filteredItemsObtained() {\n+        dataProvider.setFilter(item -> item.equals(\"first\"));\n+        Assert.assertArrayEquals(\"Unexpected data set after filtering\",\n+                new String[] {\"first\"},\n+                dataView.getItems().toArray());\n+    }\n+\n+    @Test\n+    public void getItems_sortingSet_sortedItemsObtained() {\n+        dataProvider.setSortComparator(String::compareToIgnoreCase);\n+        Assert.assertArrayEquals(\"Unexpected items sorting\",\n+                new String[] {\"first\", \"last\", \"middle\"},\n+                dataView.getItems().toArray());\n+    }\n+\n+    @Test\n+    public void getSize_filtersSet_filteredItemsObtained() {\n+        dataProvider.setFilter(item -> item.equals(\"first\"));\n+        Assert.assertEquals(\"Unexpected size for data\",\n+                1, dataView.getSize());\n+    }\n+\n+    @Test\n+    public void getSize_noFiltersSet_dataSizeObtained() {\n+        Assert.assertEquals(\"Unexpected size for data\", items.size(),\n+                dataView.getSize());\n+    }\n+\n+    @Test\n+    public void addListener_fireEvent_listenerIsCalled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d659713afe4e697355f354fcc8ed724c4eae6ba"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3311, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}