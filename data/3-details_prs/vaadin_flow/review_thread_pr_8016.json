{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMjkyMTUx", "number": 8016, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDozMToyNlrODvlthA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1NzoyM1rODvwbRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjI3NTI0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/connect/VaadinConnectControllerConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDozMToyNlrOGCGb1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDozMToyNlrOGCGb1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1NTc2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ObjectMapper objectMapper(ApplicationContext context) {\n          \n          \n            \n                public ObjectMapper vaadinEndpointMapper(ApplicationContext context) {\n          \n      \n    \n    \n  \n\nChange method name to reflect the Bean that's going to be created.\nOptional/Personal opinion: I would wrap the ObjectMapper in an object VaadinConnectMapper#getObjectMapper and return VaadinConnectMapper here as Bean, so it's easy to differentiate between the normal ObjectMapper and the Object Vaadin is using internally.", "url": "https://github.com/vaadin/flow/pull/8016#discussion_r404855764", "createdAt": "2020-04-07T14:31:26Z", "author": {"login": "knoobie"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/connect/VaadinConnectControllerConfiguration.java", "diffHunk": "@@ -137,4 +146,30 @@ public VaadinConnectAccessChecker accessChecker() {\n     public ExplicitNullableTypeChecker typeChecker() {\n         return new ExplicitNullableTypeChecker();\n     }\n+\n+    /**\n+     * Registers a {@link ObjectMapper} bean instance.\n+     *\n+     * @return the object mapper for endpoint.\n+     */\n+    @Bean\n+    @Qualifier(VAADIN_ENDPOINT_MAPPER_BEAN_QUALIFIER)\n+    ObjectMapper objectMapper(ApplicationContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa09257f228e98c451ede8e1959db7177d8c988"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjI3NzEwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/connect/VaadinConnectControllerConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDozMTo1MFrOGCGc_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDozMTo1MFrOGCGc_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1NjA2Mg==", "bodyText": "The whole try/catch could be removed?", "url": "https://github.com/vaadin/flow/pull/8016#discussion_r404856062", "createdAt": "2020-04-07T14:31:50Z", "author": {"login": "knoobie"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/connect/VaadinConnectControllerConfiguration.java", "diffHunk": "@@ -137,4 +146,30 @@ public VaadinConnectAccessChecker accessChecker() {\n     public ExplicitNullableTypeChecker typeChecker() {\n         return new ExplicitNullableTypeChecker();\n     }\n+\n+    /**\n+     * Registers a {@link ObjectMapper} bean instance.\n+     *\n+     * @return the object mapper for endpoint.\n+     */\n+    @Bean\n+    @Qualifier(VAADIN_ENDPOINT_MAPPER_BEAN_QUALIFIER)\n+    ObjectMapper objectMapper(ApplicationContext context) {\n+        try {\n+            ObjectMapper objectMapper = new ObjectMapper();\n+            JacksonProperties jacksonProperties = context\n+                    .getBean(JacksonProperties.class);\n+            if (jacksonProperties.getVisibility().isEmpty()) {\n+                objectMapper.setVisibility(PropertyAccessor.ALL,\n+                        JsonAutoDetect.Visibility.ANY);\n+            }\n+            return objectMapper;\n+        } catch (Exception e) {\n+            throw new IllegalStateException(String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa09257f228e98c451ede8e1959db7177d8c988"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjI4NDExOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/connect/VaadinConnectController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDozMzoyOFrOGCGheQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDozMzoyOFrOGCGheQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1NzIwOQ==", "bodyText": "Autowired could be removed - every instance in the constructor is autowired.\nThis has to be updated, if my comment from above is accepted.", "url": "https://github.com/vaadin/flow/pull/8016#discussion_r404857209", "createdAt": "2020-04-07T14:33:28Z", "author": {"login": "knoobie"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/connect/VaadinConnectController.java", "diffHunk": "@@ -136,15 +133,13 @@\n      *            The servlet context for the controller.\n      */\n     public VaadinConnectController(\n-            @Autowired(required = false) @Qualifier(VAADIN_ENDPOINT_MAPPER_BEAN_QUALIFIER) ObjectMapper vaadinEndpointMapper,\n+            @Autowired @Qualifier(VAADIN_ENDPOINT_MAPPER_BEAN_QUALIFIER) ObjectMapper vaadinEndpointMapper,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa09257f228e98c451ede8e1959db7177d8c988"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDAzMDc5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/server/connect/VaadinConnectControllerConfigurationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1NzoyM1rOGCXpKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1NzoyM1rOGCXpKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzcwNQ==", "bodyText": "Was thinking about this.. is this the right way to test it? I didn't have to time to look into VaadinConnect, so I'm not sure if this could break any existing usecases you wanted to handle.\nWhat I would expect from the test:\n\nAsking the ApplicationContext for two beans (normal ObjectMapper and the qualified ObjectMapper)\nNormal ObjectMapper should have all configuration provided by the user\nQualified ObjectMapper should have all configuration Vaadin needs to work\nBoth ObjectMapper serialize the same object.. depending on the configuration of the normal ObjectMapper both serialized strings should not look the same. (for example one could use Getter and the other properties for Serialization)\n\nOr am I missing something?", "url": "https://github.com/vaadin/flow/pull/8016#discussion_r405137705", "createdAt": "2020-04-07T21:57:23Z", "author": {"login": "knoobie"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/connect/VaadinConnectControllerConfigurationTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.vaadin.flow.server.connect;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Collections;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.junit.Test;\n+import org.springframework.boot.autoconfigure.jackson.JacksonProperties;\n+import org.springframework.context.ApplicationContext;\n+\n+public class VaadinConnectControllerConfigurationTest {\n+\n+    @Test\n+    public void should_NotOverrideVisibility_When_JacksonPropertiesProvideVisibility() {\n+        ApplicationContext contextMock = mock(ApplicationContext.class);\n+        VaadinEndpointProperties endpointPropertiesMock = mock(VaadinEndpointProperties.class);\n+        VaadinConnectControllerConfiguration configuration = new VaadinConnectControllerConfiguration(endpointPropertiesMock);\n+        \n+        JacksonProperties mockJacksonProperties = mock(JacksonProperties.class);\n+        when(contextMock.getBean(JacksonProperties.class))\n+                .thenReturn(mockJacksonProperties);\n+        when(mockJacksonProperties.getVisibility())\n+                .thenReturn(Collections.singletonMap(PropertyAccessor.ALL,\n+                        JsonAutoDetect.Visibility.PUBLIC_ONLY));\n+\n+        ObjectMapper objectMapper = configuration.vaadinEndpointMapper(contextMock);\n+\n+        verify(contextMock, times(1)).getBean(JacksonProperties.class);\n+\n+        try{\n+                String result = objectMapper.writeValueAsString(new Entity());\n+                assertEquals(\"{\\\"name\\\":\\\"Bond\\\"}\", result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52048910c9872d63925d6afeb1e9fffe2494e4bd"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3553, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}