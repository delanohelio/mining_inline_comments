{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMDUxMzc3", "number": 8993, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoyNToxMlrOEifQcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoyNDo1NFrOEk8rOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTk5MTU1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoyNToxMlrOHQZX_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNjoxODoyNlrOHTS-nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NTAwNg==", "bodyText": "This is not thread-safe collection.\nAlso field could be made final", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486955006", "createdAt": "2020-09-11T10:25:12Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -37,6 +41,7 @@\n  * @since 2.0\n  */\n final class FrontendAnnotatedClassVisitor extends ClassVisitor {\n+    private static Map<String, Map<String, Object>> annotationDefaults = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk4MDA2MA==", "bodyText": "I have doubts about this static collection: SpringBoot dev tools can do a hot restart of Spring Application in certain cases (method signature changes, for example); in this case the collection contents will be retained.", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486980060", "createdAt": "2020-09-11T11:21:15Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -37,6 +41,7 @@\n  * @since 2.0\n  */\n final class FrontendAnnotatedClassVisitor extends ClassVisitor {\n+    private static Map<String, Map<String, Object>> annotationDefaults = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NTAwNg=="}, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU0MDE1Mw==", "bodyText": "Changed to final instance member. Thus it re-reads defaults upon every parent build task execution.\nAFAIK this is a build step rather then runtime code. I wonder if thread-safety critical here. At least this change does not make it worse, since this is only used in FrontendDependencies.java, which has a bunch of HashMaps anyway.\nAlso, this only concerns framework-provided @PWA annotation default values. Would not expect those to change between hot reloads. Or am I wrong?", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r489540153", "createdAt": "2020-09-16T15:44:41Z", "author": {"login": "platosha"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -37,6 +41,7 @@\n  * @since 2.0\n  */\n final class FrontendAnnotatedClassVisitor extends ClassVisitor {\n+    private static Map<String, Map<String, Object>> annotationDefaults = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NTAwNg=="}, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk5NTkzMg==", "bodyText": "In FrontendDependencies hashMaps are instance variables, so that's ok.\nI had a second look at the code, and realized that you can just use https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Method.html#getDefaultValue() intead of invoking ASM :)\n    /**\n     * Returns the default value for the annotation member represented by\n     * this {@code Method} instance.  If the member is of a primitive type,\n     * an instance of the corresponding wrapper type is returned. Returns\n     * null if no default is associated with the member, or if the method\n     * instance does not represent a declared member of an annotation type.\n     *\n     * @return the default value for the annotation member represented\n     *     by this {@code Method} instance.\n     * @throws TypeNotPresentException if the annotation is of type\n     *     {@link Class} and no definition can be found for the\n     *     default class value.\n     * @since  1.5\n     */\n    public Object getDefaultValue() {\n    ...\n    }", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r489995932", "createdAt": "2020-09-17T06:18:26Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -37,6 +41,7 @@\n  * @since 2.0\n  */\n final class FrontendAnnotatedClassVisitor extends ClassVisitor {\n+    private static Map<String, Map<String, Object>> annotationDefaults = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NTAwNg=="}, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjAxMDU1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozMToxOFrOHQZjbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozMToxOFrOHQZjbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NzkzNA==", "bodyText": "Can be replaced with !data.contains(info)", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486957934", "createdAt": "2020-09-11T10:31:18Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -66,34 +75,65 @@\n      *             when the class name is not found\n      */\n     public void visitClass(String name) {\n+        visitClass(name, this);\n+    }\n+\n+    /**\n+     * Visit recursively a class to find annotations.\n+     *\n+     * @param name\n+     *            the class name\n+     * @param visitor\n+     *            the visitor to use\n+     * @throws IOException\n+     *             when the class name is not found\n+     */\n+    public void visitClass(String name, ClassVisitor visitor) {\n         if (name == null) {\n             return;\n         }\n         try {\n             ClassReader cr;\n             URL url = finder.getResource(name.replace(\".\", \"/\") + \".class\");\n             cr = new ClassReader(url.openStream());\n-            cr.accept(this, 0);\n+            cr.accept(visitor, 0);\n         } catch (IOException e) {\n             throw new UncheckedIOException(e);\n         }\n     }\n \n     // Executed for the class definition info.\n     @Override\n-    public void visit(int version, int access, String name, String signature, String superName,\n-            String[] interfaces) {\n-        visitClass(superName);\n+    public void visit(int version, int access, String name, String signature,\n+            String superName, String[] interfaces) {\n+        visitClass(superName, this);\n     }\n \n     @Override\n-    public AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {\n+    public AnnotationVisitor visitAnnotation(String descriptor,\n+            boolean visible) {\n         String cname = descriptor.replace(\"/\", \".\");\n         if (cname.contains(annotationName)) {\n             return new RepeatedAnnotationVisitor() {\n                 // initialize for non repeated annotations\n                 HashMap<String, Object> info = new HashMap<>();\n \n+                @Override\n+                public AnnotationVisitor visitArray(String name) {\n+                    List values = new ArrayList<>();\n+                    info.put(name, values);\n+\n+                    return new AnnotationVisitor(api, this) {\n+                        @Override\n+                        public void visit(String dummy, Object value) {\n+                            if (data.indexOf(info) < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjAxOTM1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozNDoxNFrOHQZozA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozNDoxNFrOHQZozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1OTMwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IOException\n          \n          \n            \n                 * @throws UncheckedIOException", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486959308", "createdAt": "2020-09-11T10:34:14Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -66,34 +75,65 @@\n      *             when the class name is not found\n      */\n     public void visitClass(String name) {\n+        visitClass(name, this);\n+    }\n+\n+    /**\n+     * Visit recursively a class to find annotations.\n+     *\n+     * @param name\n+     *            the class name\n+     * @param visitor\n+     *            the visitor to use\n+     * @throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjAyODM2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozNzo0MVrOHQZuow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozNzo0MVrOHQZuow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MDgwMw==", "bodyText": "All those anonymous visitors should be extracted into static inner classes", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486960803", "createdAt": "2020-09-11T10:37:41Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -66,34 +75,65 @@\n      *             when the class name is not found\n      */\n     public void visitClass(String name) {\n+        visitClass(name, this);\n+    }\n+\n+    /**\n+     * Visit recursively a class to find annotations.\n+     *\n+     * @param name\n+     *            the class name\n+     * @param visitor\n+     *            the visitor to use\n+     * @throws IOException\n+     *             when the class name is not found\n+     */\n+    public void visitClass(String name, ClassVisitor visitor) {\n         if (name == null) {\n             return;\n         }\n         try {\n             ClassReader cr;\n             URL url = finder.getResource(name.replace(\".\", \"/\") + \".class\");\n             cr = new ClassReader(url.openStream());\n-            cr.accept(this, 0);\n+            cr.accept(visitor, 0);\n         } catch (IOException e) {\n             throw new UncheckedIOException(e);\n         }\n     }\n \n     // Executed for the class definition info.\n     @Override\n-    public void visit(int version, int access, String name, String signature, String superName,\n-            String[] interfaces) {\n-        visitClass(superName);\n+    public void visit(int version, int access, String name, String signature,\n+            String superName, String[] interfaces) {\n+        visitClass(superName, this);\n     }\n \n     @Override\n-    public AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {\n+    public AnnotationVisitor visitAnnotation(String descriptor,\n+            boolean visible) {\n         String cname = descriptor.replace(\"/\", \".\");\n         if (cname.contains(annotationName)) {\n             return new RepeatedAnnotationVisitor() {\n                 // initialize for non repeated annotations\n                 HashMap<String, Object> info = new HashMap<>();\n \n+                @Override\n+                public AnnotationVisitor visitArray(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjAzOTUwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0MTozNFrOHQZ1IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0MTozNFrOHQZ1IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MjQ2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return LoggerFactory.getLogger(this.getClass());\n          \n          \n            \n                    return LoggerFactory.getLogger(FrontendAnnotatedClassVisitor.class);", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486962465", "createdAt": "2020-09-11T10:41:34Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -165,10 +204,106 @@ public AnnotationVisitor visitAnnotation(String name, String descriptor) {\n      * @return a set of all values found\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public <T> Set<T> getValuesForKey(String key, String value, String property) {\n-        return (Set<T>)data.stream()\n+    public <T> Set<T> getValuesForKey(String key, String value,\n+            String property) {\n+        return (Set<T>) data.stream()\n                 .filter(h -> h.containsKey(key) && h.get(key).equals(value))\n-                .map(h -> h.get(property))\n-                .collect(Collectors.toSet());\n+                .map(h -> h.get(property)).collect(Collectors.toSet());\n+    }\n+\n+    /**\n+     * Return the values of a an annotation parameter.\n+     *\n+     * @throws IllegalArgumentException\n+     *             if there is not one single annotation\n+     * @param parameter\n+     *            the annotation parameter used for getting values\n+     * @return the value from the annotation\n+     */\n+    public <T> T getValue(String parameter) {\n+        if (data.size() != 1) {\n+            throw new IllegalArgumentException(\n+                    \"getValue can only be used when there is one annotation. There are \"\n+                            + data.size() + \" instances of \" + annotationName);\n+        }\n+        Set<T> values = getValues(parameter);\n+        if (values.isEmpty()) {\n+            getLogger().debug(\"No value for {} using default: {}\", parameter,\n+                    getDefault(parameter));\n+            return getDefault(parameter);\n+        }\n+        return values.iterator().next();\n+    }\n+\n+    private <T> T getDefault(String parameter) {\n+        return (T) annotationDefaults.get(annotationName).get(parameter);\n+    }\n+\n+    private Map<String, Object> readAnnotationDefaultValues(\n+            String annotationName) {\n+        getLogger().debug(\"Reading default values for {}\", annotationName);\n+        Map<String, Object> defaults = new HashMap<>();\n+\n+        visitClass(annotationName, new AnnotationClassVisitor(defaults));\n+\n+        getLogger().debug(\"Default values for {}: {}\", annotationName,\n+                defaults);\n+\n+        return defaults;\n+    }\n+\n+    private Logger getLogger() {\n+        return LoggerFactory.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA1ODMyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0NzozNlrOHQaAEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0NzozNlrOHQaAEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NTI2NQ==", "bodyText": "Replace with an empty String[] array constant: preallocation is not needed since Java 6", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486965265", "createdAt": "2020-09-11T10:47:36Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "diffHunk": "@@ -369,6 +385,59 @@ private void computePackages() throws ClassNotFoundException, IOException {\n         }\n     }\n \n+    /**\n+     * Find the class with a {@link com.vaadin.flow.server.PWA} annotation and\n+     * read it into a {@link com.vaadin.flow.server.PwaConfiguration} object.\n+     *\n+     * @throws ClassNotFoundException\n+     * @throws IllegalStateException\n+     */\n+    private void computePwaConfiguration()\n+            throws ClassNotFoundException, IllegalStateException {\n+\n+        FrontendAnnotatedClassVisitor pwaVisitor = new FrontendAnnotatedClassVisitor(\n+                getFinder(), PWA.class.getName());\n+        Class<?> AppShellConfigurator = getFinder().loadClass(\n+                AppShellConfigurator.class.getName());\n+\n+        for (Class<?> hopefullyAppShellClass :\n+                getFinder().getAnnotatedClasses(PWA.class.getName())) {\n+                    if (!Arrays.asList(hopefullyAppShellClass.getInterfaces())\n+                            .contains(AppShellConfigurator)) {\n+                        throw new IllegalStateException(\n+                                ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION);\n+                    }\n+                    pwaVisitor.visitClass(hopefullyAppShellClass.getName());\n+        }\n+\n+        Set<String> dependencies = pwaVisitor.getValues(\"name\");\n+        if (dependencies.size() > 1) {\n+            throw new IllegalStateException(ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION);\n+        }\n+        if (dependencies.isEmpty()) {\n+            this.pwaConfiguration = new PwaConfiguration();\n+            return;\n+        }\n+\n+        String name = pwaVisitor.getValue(\"name\");\n+        String shortName = pwaVisitor.getValue(\"shortName\");\n+        String description = pwaVisitor.getValue(\"description\");\n+        String backgroundColor = pwaVisitor.getValue(\"backgroundColor\");\n+        String themeColor = pwaVisitor.getValue(\"themeColor\");\n+        String iconPath = pwaVisitor.getValue(\"iconPath\");\n+        log().error(\"iconPath in {}: {}\", getClass().getSimpleName(), iconPath);\n+        String manifestPath = pwaVisitor.getValue(\"manifestPath\");\n+        String offlinePath = pwaVisitor.getValue(\"offlinePath\");\n+        String display = pwaVisitor.getValue(\"display\");\n+        String startPath = pwaVisitor.getValue(\"startPath\");\n+        List<String> offlineResources = pwaVisitor.getValue(\"offlineResources\");\n+\n+        this.pwaConfiguration = new PwaConfiguration(true, name, shortName,\n+                description, backgroundColor, themeColor, iconPath,\n+                manifestPath, offlinePath, display, startPath,\n+                offlineResources.toArray(new String[offlineResources.size()]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA2Njg4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo1MDoxMlrOHQaFFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNjowNzozNFrOHTSuqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NjU1MA==", "bodyText": "shortName might be null here, PwaConfiguration constructor will throw NPE in that case", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486966550", "createdAt": "2020-09-11T10:50:12Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java", "diffHunk": "@@ -407,6 +426,62 @@ private Object invokeAnnotationMethod(Annotation target,\n         }\n     }\n \n+    private PwaConfiguration discoverPwa() {\n+        try {\n+            Class<? extends Annotation> loadedPWAAnnotation = getFinder()\n+                    .loadClass(PWA.class.getName());\n+\n+            Set<Class<?>> annotatedClasses = getFinder()\n+                    .getAnnotatedClasses(loadedPWAAnnotation);\n+            if (annotatedClasses.isEmpty()) {\n+                return new PwaConfiguration();\n+            } else if (annotatedClasses.size() != 1) {\n+                throw new IllegalStateException(\n+                        ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION);\n+            }\n+\n+            Class<?> hopefullyAppShellClass =\n+                    annotatedClasses.iterator().next();\n+            if (!Arrays.asList(hopefullyAppShellClass.getInterfaces()).stream()\n+                    .map(Class::getName).collect(Collectors.toList())\n+                    .contains(AppShellConfigurator.class.getName())) {\n+                throw new IllegalStateException(\n+                        ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION);\n+            }\n+\n+            Annotation pwa = annotationFinder\n+                    .apply(hopefullyAppShellClass, loadedPWAAnnotation).get(0);\n+\n+            String name = getAnnotationValueAsString(pwa, \"name\");\n+            String shortName = getAnnotationValueAsString(pwa, \"shortName\");\n+            String description = getAnnotationValueAsString(pwa,\n+                    \"description\");\n+            String backgroundColor = getAnnotationValueAsString(pwa,\n+                    \"backgroundColor\");\n+            String themeColor = getAnnotationValueAsString(pwa,\n+                    \"themeColor\");\n+            String iconPath = getAnnotationValueAsString(pwa, \"iconPath\");\n+\n+            getLogger().error(\"iconPath in \" + getClass().getSimpleName() + \": \"\n+                    + iconPath);\n+            String manifestPath = getAnnotationValueAsString(pwa,\n+                    \"manifestPath\");\n+            String offlinePath = getAnnotationValueAsString(pwa,\n+                    \"offlinePath\");\n+            String display = getAnnotationValueAsString(pwa, \"display\");\n+            String startPath = getAnnotationValueAsString(pwa, \"startPath\");\n+            String[] offlineResources = (String[]) getAnnotationValue(pwa,\n+                    \"offlineResources\");\n+\n+            return new PwaConfiguration(true, name, shortName, description,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU0ODYyMg==", "bodyText": "I don\u2019t see how that\u2019s possible in practice. @PWA annotation is found at this point, and seems like it must have shortName by definition. I\u2019ve tried declaring @PWA with shortName null and absent, it does not compile.\nAdded an assert just in case to make dev tools happy though.", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r489548622", "createdAt": "2020-09-16T15:56:31Z", "author": {"login": "platosha"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java", "diffHunk": "@@ -407,6 +426,62 @@ private Object invokeAnnotationMethod(Annotation target,\n         }\n     }\n \n+    private PwaConfiguration discoverPwa() {\n+        try {\n+            Class<? extends Annotation> loadedPWAAnnotation = getFinder()\n+                    .loadClass(PWA.class.getName());\n+\n+            Set<Class<?>> annotatedClasses = getFinder()\n+                    .getAnnotatedClasses(loadedPWAAnnotation);\n+            if (annotatedClasses.isEmpty()) {\n+                return new PwaConfiguration();\n+            } else if (annotatedClasses.size() != 1) {\n+                throw new IllegalStateException(\n+                        ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION);\n+            }\n+\n+            Class<?> hopefullyAppShellClass =\n+                    annotatedClasses.iterator().next();\n+            if (!Arrays.asList(hopefullyAppShellClass.getInterfaces()).stream()\n+                    .map(Class::getName).collect(Collectors.toList())\n+                    .contains(AppShellConfigurator.class.getName())) {\n+                throw new IllegalStateException(\n+                        ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION);\n+            }\n+\n+            Annotation pwa = annotationFinder\n+                    .apply(hopefullyAppShellClass, loadedPWAAnnotation).get(0);\n+\n+            String name = getAnnotationValueAsString(pwa, \"name\");\n+            String shortName = getAnnotationValueAsString(pwa, \"shortName\");\n+            String description = getAnnotationValueAsString(pwa,\n+                    \"description\");\n+            String backgroundColor = getAnnotationValueAsString(pwa,\n+                    \"backgroundColor\");\n+            String themeColor = getAnnotationValueAsString(pwa,\n+                    \"themeColor\");\n+            String iconPath = getAnnotationValueAsString(pwa, \"iconPath\");\n+\n+            getLogger().error(\"iconPath in \" + getClass().getSimpleName() + \": \"\n+                    + iconPath);\n+            String manifestPath = getAnnotationValueAsString(pwa,\n+                    \"manifestPath\");\n+            String offlinePath = getAnnotationValueAsString(pwa,\n+                    \"offlinePath\");\n+            String display = getAnnotationValueAsString(pwa, \"display\");\n+            String startPath = getAnnotationValueAsString(pwa, \"startPath\");\n+            String[] offlineResources = (String[]) getAnnotationValue(pwa,\n+                    \"offlineResources\");\n+\n+            return new PwaConfiguration(true, name, shortName, description,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NjU1MA=="}, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk5MTg0OQ==", "bodyText": "You are correct, com.vaadin.flow.server.frontend.scanner.FullDependenciesScanner#getAnnotationValueAsString confused me", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r489991849", "createdAt": "2020-09-17T06:07:34Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java", "diffHunk": "@@ -407,6 +426,62 @@ private Object invokeAnnotationMethod(Annotation target,\n         }\n     }\n \n+    private PwaConfiguration discoverPwa() {\n+        try {\n+            Class<? extends Annotation> loadedPWAAnnotation = getFinder()\n+                    .loadClass(PWA.class.getName());\n+\n+            Set<Class<?>> annotatedClasses = getFinder()\n+                    .getAnnotatedClasses(loadedPWAAnnotation);\n+            if (annotatedClasses.isEmpty()) {\n+                return new PwaConfiguration();\n+            } else if (annotatedClasses.size() != 1) {\n+                throw new IllegalStateException(\n+                        ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION);\n+            }\n+\n+            Class<?> hopefullyAppShellClass =\n+                    annotatedClasses.iterator().next();\n+            if (!Arrays.asList(hopefullyAppShellClass.getInterfaces()).stream()\n+                    .map(Class::getName).collect(Collectors.toList())\n+                    .contains(AppShellConfigurator.class.getName())) {\n+                throw new IllegalStateException(\n+                        ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION);\n+            }\n+\n+            Annotation pwa = annotationFinder\n+                    .apply(hopefullyAppShellClass, loadedPWAAnnotation).get(0);\n+\n+            String name = getAnnotationValueAsString(pwa, \"name\");\n+            String shortName = getAnnotationValueAsString(pwa, \"shortName\");\n+            String description = getAnnotationValueAsString(pwa,\n+                    \"description\");\n+            String backgroundColor = getAnnotationValueAsString(pwa,\n+                    \"backgroundColor\");\n+            String themeColor = getAnnotationValueAsString(pwa,\n+                    \"themeColor\");\n+            String iconPath = getAnnotationValueAsString(pwa, \"iconPath\");\n+\n+            getLogger().error(\"iconPath in \" + getClass().getSimpleName() + \": \"\n+                    + iconPath);\n+            String manifestPath = getAnnotationValueAsString(pwa,\n+                    \"manifestPath\");\n+            String offlinePath = getAnnotationValueAsString(pwa,\n+                    \"offlinePath\");\n+            String display = getAnnotationValueAsString(pwa, \"display\");\n+            String startPath = getAnnotationValueAsString(pwa, \"startPath\");\n+            String[] offlineResources = (String[]) getAnnotationValue(pwa,\n+                    \"offlineResources\");\n+\n+            return new PwaConfiguration(true, name, shortName, description,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NjU1MA=="}, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njg3MjQ5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1ODoxOFrOHTcm2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1ODoxOFrOHTcm2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1MzY4OQ==", "bodyText": "Consider using java.lang.reflect.Method#getDefaultValue instead of ASM to collect default annotation values.", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r490153689", "createdAt": "2020-09-17T10:58:18Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -165,10 +170,187 @@ public AnnotationVisitor visitAnnotation(String name, String descriptor) {\n      * @return a set of all values found\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public <T> Set<T> getValuesForKey(String key, String value, String property) {\n-        return (Set<T>)data.stream()\n+    public <T> Set<T> getValuesForKey(String key, String value,\n+            String property) {\n+        return (Set<T>) data.stream()\n                 .filter(h -> h.containsKey(key) && h.get(key).equals(value))\n-                .map(h -> h.get(property))\n-                .collect(Collectors.toSet());\n+                .map(h -> h.get(property)).collect(Collectors.toSet());\n+    }\n+\n+    /**\n+     * Return the values of a an annotation parameter.\n+     *\n+     * @throws IllegalArgumentException\n+     *             if there is not one single annotation\n+     * @param parameter\n+     *            the annotation parameter used for getting values\n+     * @return the value from the annotation\n+     */\n+    public <T> T getValue(String parameter) {\n+        if (data.size() != 1) {\n+            throw new IllegalArgumentException(\n+                    \"getValue can only be used when there is one annotation. There are \"\n+                            + data.size() + \" instances of \" + annotationName);\n+        }\n+        Set<T> values = getValues(parameter);\n+        if (values.isEmpty()) {\n+            getLogger().debug(\"No value for {} using default: {}\", parameter,\n+                    getDefault(parameter));\n+            return getDefault(parameter);\n+        }\n+        return values.iterator().next();\n+    }\n+\n+    private <T> T getDefault(String parameter) {\n+        return (T) annotationDefaults.get(annotationName).get(parameter);\n+    }\n+\n+    private Map<String, Object> readAnnotationDefaultValues(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbdb451a234014bb5ab578918963a931304f731"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTcyNzAxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjowNzowNlrOHUKaAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjowNzowNlrOHUKaAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwNDA2Nw==", "bodyText": "The name of the error message constant ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION seems counter intuitive in this case, though the actual value does mention both cases (\"There can only be one @PWA annotation and it must be set on the \" + AppShellConfigurator.class.getSimpleName() + \" implementor.\").\nI'd consider renaming the constant as now it seems like it's only about the other case below.\nMy suggestion for a name: ERROR_INVALID_PWA_ANNOTATION.\n(Not a blocker though)", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r490904067", "createdAt": "2020-09-18T12:07:06Z", "author": {"login": "Haprog"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "diffHunk": "@@ -370,6 +386,56 @@ private void computePackages() throws ClassNotFoundException, IOException {\n         }\n     }\n \n+    /**\n+     * Find the class with a {@link com.vaadin.flow.server.PWA} annotation and\n+     * read it into a {@link com.vaadin.flow.server.PwaConfiguration} object.\n+     *\n+     * @throws ClassNotFoundException\n+     */\n+    private void computePwaConfiguration() throws ClassNotFoundException {\n+        FrontendAnnotatedClassVisitor pwaVisitor = new FrontendAnnotatedClassVisitor(\n+                getFinder(), PWA.class.getName());\n+        Class<?> appShellConfiguratorClass = getFinder().loadClass(\n+                AppShellConfigurator.class.getName());\n+\n+        for (Class<?> hopefullyAppShellClass :\n+                getFinder().getAnnotatedClasses(PWA.class.getName())) {\n+                    if (!Arrays.asList(hopefullyAppShellClass.getInterfaces())\n+                            .contains(appShellConfiguratorClass)) {\n+                        throw new IllegalStateException(\n+                                ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da67112e8ef98668a17ce224b6d1447538252226"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTc4MjExOnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeTasksTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoyNDo0MFrOHUK7hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoyNDo0MFrOHUK7hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxMjY0Ng==", "bodyText": "DEAULT_FLOW_RESOURCES_FOLDER (with typo) is now deprecated (since last rebase). Please use the corrected one:\nDEFAULT_FLOW_RESOURCES_FOLDER instead.", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r490912646", "createdAt": "2020-09-18T12:24:40Z", "author": {"login": "Haprog"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeTasksTest.java", "diffHunk": "@@ -17,8 +19,11 @@\n import com.vaadin.flow.server.ExecutionFailedException;\n import com.vaadin.flow.server.connect.Endpoint;\n import com.vaadin.flow.server.frontend.NodeTasks.Builder;\n+import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder.DefaultClassFinder;\n+import com.vaadin.flow.server.frontend.scanner.samples.pwa.AppShellWithPwa;\n \n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEAULT_FLOW_RESOURCES_FOLDER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da67112e8ef98668a17ce224b6d1447538252226"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTc4Mjk5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeTasksTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoyNDo1NFrOHUK8DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoyNDo1NFrOHUK8DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxMjc4MA==", "bodyText": "DEAULT_FLOW_RESOURCES_FOLDER (with typo) is now deprecated. Please use the corrected one:\nDEFAULT_FLOW_RESOURCES_FOLDER instead.", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r490912780", "createdAt": "2020-09-18T12:24:54Z", "author": {"login": "Haprog"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeTasksTest.java", "diffHunk": "@@ -132,19 +140,46 @@ public void should_Generate_Connect_Files() throws Exception {\n \n         Arrays.asList(\n                 // enableClientSide\n-                \"target/index.html\",\n-                \"target/index.ts\",\n-                // withConnectJavaSourceFolder and withConnectGeneratedOpenApiJson\n+                \"target/index.html\", \"target/index.ts\",\n+                // withConnectJavaSourceFolder and\n+                // withConnectGeneratedOpenApiJson\n                 \"api-file.json\",\n                 // withConnectClientTsApiFolder\n-                \"api/connect-client.default.ts\",\n-                \"api/MyEndpoint.ts\")\n-                .forEach(name -> assertTrue(name + \" not created.\", new File(dir, name).exists()));\n+                \"api/connect-client.default.ts\", \"api/MyEndpoint.ts\")\n+                .forEach(name -> assertTrue(name + \" not created.\",\n+                        new File(dir, name).exists()));\n+    }\n+\n+    @Test\n+    public void should_Set_PWA_Offline_Resources() throws Exception {\n+        ClassFinder classFinder = new DefaultClassFinder(new HashSet<>(\n+                new ArrayList<>(Arrays.asList(AppShellWithPwa.class))));\n+\n+        Builder builder = new Builder(classFinder, new File(userDir))\n+                .withFlowResourcesFolder(\n+                        new File(userDir, DEAULT_FLOW_RESOURCES_FOLDER))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da67112e8ef98668a17ce224b6d1447538252226"}, "originalPosition": 157}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3252, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}