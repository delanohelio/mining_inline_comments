{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwOTMwMjk2", "number": 9665, "reviewThreads": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTozOFrOFGDfZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyNFrOFGDgkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkyOTY2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTozOFrOIG4Sdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTozOFrOIG4Sdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDU5OA==", "bodyText": "Define a constant instead of duplicating this literal \"jar!/\" 3 times.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084598", "createdAt": "2020-12-16T07:55:38Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.server.AbstractPropertyConfiguration;\n+import com.vaadin.flow.server.VaadinContext;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.impl.JsonUtil;\n+\n+import static com.vaadin.flow.server.Constants.VAADIN_SERVLET_RESOURCES;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.TOKEN_FILE;\n+\n+/**\n+ * Default implementation of {@link ApplicationConfigurationFactory}.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+public class DefaultApplicationConfigurationFactory\n+        extends AbstractConfigurationFactory\n+        implements ApplicationConfigurationFactory {\n+\n+    protected static class ApplicationConfigurationImpl extends\n+            AbstractPropertyConfiguration implements ApplicationConfiguration {\n+\n+        private final VaadinContext context;\n+\n+        protected ApplicationConfigurationImpl(VaadinContext context,\n+                Map<String, String> properties) {\n+            super(properties);\n+            this.context = context;\n+        }\n+\n+        @Override\n+        public boolean isProductionMode() {\n+            return getBooleanProperty(SERVLET_PARAMETER_PRODUCTION_MODE, false);\n+        }\n+\n+        @Override\n+        public Enumeration<String> getPropertyNames() {\n+            return Collections.enumeration(getProperties().keySet());\n+        }\n+\n+        @Override\n+        public VaadinContext getContext() {\n+            return context;\n+        }\n+\n+    }\n+\n+    @Override\n+    public ApplicationConfiguration create(VaadinContext context) {\n+        Map<String, String> props = new HashMap<>();\n+        for (final Enumeration<String> e = context.getContextParameterNames(); e\n+                .hasMoreElements();) {\n+            final String name = e.nextElement();\n+            props.put(name, context.getContextParameter(name));\n+        }\n+        try {\n+            JsonObject buildInfo = JsonUtil\n+                    .parse(getTokenFileFromClassloader(context));\n+\n+            props.putAll(getConfigParametersUsingTokenData(buildInfo));\n+        } catch (IOException exception) {\n+            throw new UncheckedIOException(exception);\n+        }\n+        return new ApplicationConfigurationImpl(context, props);\n+    }\n+\n+    /**\n+     * Gets token file from the classpath using the provided {@code context}.\n+     * <p>\n+     * The {@code contextClass} may be a class which is defined in the Web\n+     * Application module/bundle and in this case it may be used to get Web\n+     * Application resources. Also a {@link VaadinContext} {@code context}\n+     * instance may be used to get a context of the Web Application (since the\n+     * {@code contextClass} may be a class not from Web Application module). In\n+     * WAR case it doesn't matter which class is used to get the resources (Web\n+     * Application classes or e.g. \"flow-server\" classes) since they are loaded\n+     * by the same {@link ClassLoader}. But in OSGi \"flow-server\" module classes\n+     * can't be used to get Web Application resources since they are in\n+     * different bundles.\n+     * \n+     * @param context\n+     *            a VaadinContext which may provide information how to get token\n+     *            file for the web application\n+     * @return the token file content\n+     * @throws IOException\n+     *             if I/O fails during access to the token file\n+     */\n+    protected String getTokenFileFromClassloader(VaadinContext context)\n+            throws IOException {\n+        String tokenResource = VAADIN_SERVLET_RESOURCES + TOKEN_FILE;\n+\n+        Lookup lookup = context.getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);\n+\n+        List<URL> resources = resourceProvider\n+                .getApplicationResources(tokenResource);\n+\n+        // Accept resource that doesn't contain\n+        // 'jar!/META-INF/Vaadin/config/flow-build-info.json'\n+        URL resource = resources.stream()\n+                .filter(url -> !url.getPath().endsWith(\"jar!/\" + tokenResource))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkyOTcwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTozOVrOIG4SfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTozOVrOIG4SfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDYwNA==", "bodyText": "Remove this use of \"Thread.sleep()\".", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084604", "createdAt": "2020-12-16T07:55:39Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java", "diffHunk": "@@ -521,13 +534,14 @@ public void start_twoInstances_secondInstanceUsesAnotherPort()\n         // since the timeout is quite big the server port still should be\n         // available and the second instance should try to reuse it\n \n-        DevModeHandler.start(0, configuration, npmFolder,\n+        DevModeHandler.start(0, createDevModeLookup(), npmFolder,\n                 CompletableFuture.completedFuture(null));\n \n         // make checks only if webpack has not yet completed\n \n-        DevModeHandler anotherHandler = DevModeHandler.start(0, configuration,\n-                npmFolder, CompletableFuture.completedFuture(null));\n+        DevModeHandler anotherHandler = DevModeHandler.start(0,\n+                createDevModeLookup(), npmFolder,\n+                CompletableFuture.completedFuture(null));\n \n         while (handler.getPort() == 0) {\n             Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 369}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkyOTczOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DeferredServletContextInitializers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0MFrOIG4SgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0MFrOIG4SgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDYwOA==", "bodyText": "This call to \"add()\" may be a performance hot spot if the collection is large.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084608", "createdAt": "2020-12-16T07:55:40Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DeferredServletContextInitializers.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.server.VaadinContext;\n+\n+/**\n+ * Internal collection of initializers which may not be executed immediately but\n+ * requires a {@link Lookup} instance which will be set in the\n+ * {@link VaadinContext} ({@link ServletContext}) only when\n+ * {@link LookupInitializer} completed.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+class DeferredServletContextInitializers {\n+\n+    /**\n+     * A callback which will be called to run\n+     * {@link ServletContainerInitializer} logic once a {@link ServletContext}\n+     * is initialized with {@link Lookup}.\n+     * \n+     * @author Vaadin Ltd\n+     * @since\n+     *\n+     */\n+    interface Initializer {\n+        /**\n+         * Runs {@link ServletContainerInitializer} logic with the provided\n+         * {@code context}.\n+         * \n+         * @param context\n+         *            a ServletContext for the initializer\n+         * @throws ServletException\n+         *             thrown if the initializer throws an exception\n+         */\n+        void init(ServletContext context) throws ServletException;\n+    }\n+\n+    private final List<Initializer> initializers = new CopyOnWriteArrayList<>();\n+\n+    /**\n+     * Adds deferred initializer.\n+     * \n+     * @param initializer\n+     *            an initializer\n+     */\n+    void addInitializer(Initializer initializer) {\n+        initializers.add(initializer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkyOTkxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0MVrOIG4Slg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0MVrOIG4Slg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDYzMA==", "bodyText": "Replace this lambda with a method reference.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084630", "createdAt": "2020-12-16T07:55:41Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java", "diffHunk": "@@ -472,4 +519,23 @@ public void destroy() {\n         super.destroy();\n         getService().destroy();\n     }\n+\n+    private VaadinServletContext initializeContext() {\n+        ServletContext servletContext = getServletConfig().getServletContext();\n+        VaadinServletContext vaadinServletContext = new VaadinServletContext(\n+                servletContext);\n+        // ensure the web application classloader is available via context\n+        ApplicationClassLoaderAccess access = () -> servletContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkyOTk4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0MlrOIG4SoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0MlrOIG4SoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDY0MQ==", "bodyText": "Rename \"instantiator\" which hides the field declared at line 191.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084641", "createdAt": "2020-12-16T07:55:42Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java", "diffHunk": "@@ -407,11 +413,33 @@ protected Instantiator createInstantiator() throws ServiceException {\n      */\n     protected Optional<Instantiator> loadInstantiators()\n             throws ServiceException {\n-        List<Instantiator> instantiators = StreamSupport\n+        Lookup lookup = getContext().getAttribute(Lookup.class);\n+        List<Instantiator> instantiators = null;\n+        if (lookup != null) {\n+            // lookup may be null in tests\n+            Collection<InstantiatorFactory> factories = lookup\n+                    .lookupAll(InstantiatorFactory.class);\n+            instantiators = new ArrayList<>(factories.size());\n+            for (InstantiatorFactory factory : factories) {\n+                Instantiator instantiator = factory.createInstantitor(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDA0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0M1rOIG4Spw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0M1rOIG4Spw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDY0Nw==", "bodyText": "Remove this use of \"init\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084647", "createdAt": "2020-12-16T07:55:43Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java", "diffHunk": "@@ -407,11 +413,33 @@ protected Instantiator createInstantiator() throws ServiceException {\n      */\n     protected Optional<Instantiator> loadInstantiators()\n             throws ServiceException {\n-        List<Instantiator> instantiators = StreamSupport\n+        Lookup lookup = getContext().getAttribute(Lookup.class);\n+        List<Instantiator> instantiators = null;\n+        if (lookup != null) {\n+            // lookup may be null in tests\n+            Collection<InstantiatorFactory> factories = lookup\n+                    .lookupAll(InstantiatorFactory.class);\n+            instantiators = new ArrayList<>(factories.size());\n+            for (InstantiatorFactory factory : factories) {\n+                Instantiator instantiator = factory.createInstantitor(this);\n+                // if the existing instantiator is converted to new API then\n+                // let's respect its deprecated method\n+                if (instantiator != null && instantiator.init(this)) {\n+                    instantiators.add(instantiator);\n+                }\n+            }\n+        }\n+\n+        if (instantiators == null) {\n+            instantiators = new ArrayList<>();\n+        }\n+\n+        // the code to support previous way of loading instantiators\n+        StreamSupport\n                 .stream(ServiceLoader.load(Instantiator.class, getClassLoader())\n                         .spliterator(), false)\n                 .filter(iterator -> iterator.init(this))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDA3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0NVrOIG4SsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0NVrOIG4SsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDY1Ng==", "bodyText": "Remove this use of \"init\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084656", "createdAt": "2020-12-16T07:55:45Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java", "diffHunk": "@@ -407,11 +413,33 @@ protected Instantiator createInstantiator() throws ServiceException {\n      */\n     protected Optional<Instantiator> loadInstantiators()\n             throws ServiceException {\n-        List<Instantiator> instantiators = StreamSupport\n+        Lookup lookup = getContext().getAttribute(Lookup.class);\n+        List<Instantiator> instantiators = null;\n+        if (lookup != null) {\n+            // lookup may be null in tests\n+            Collection<InstantiatorFactory> factories = lookup\n+                    .lookupAll(InstantiatorFactory.class);\n+            instantiators = new ArrayList<>(factories.size());\n+            for (InstantiatorFactory factory : factories) {\n+                Instantiator instantiator = factory.createInstantitor(this);\n+                // if the existing instantiator is converted to new API then\n+                // let's respect its deprecated method\n+                if (instantiator != null && instantiator.init(this)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDEyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ReflectTools.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0NlrOIG4SuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0NlrOIG4SuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDY2NA==", "bodyText": "Replace this if-then-else statement by a single return statement.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084664", "createdAt": "2020-12-16T07:55:46Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ReflectTools.java", "diffHunk": "@@ -825,6 +825,38 @@ public static Object getAnnotationMethodValue(Annotation annotation,\n         return Optional.empty();\n     }\n \n+    /**\n+     * Check if a class can be instantiated via its default \n+     * constructor via reflection.\n+     * \n+     * @param clazz\n+     *            the class to check\n+     * @return true if the class can be instantiated, otherwise false\n+     */\n+    public static boolean isInstantiableService(Class<?> clazz) {\n+        if (clazz.isInterface()) {\n+          return false;\n+        }\n+        if (clazz.isSynthetic()) {\n+          return false;\n+        }\n+        if (Modifier.isAbstract(clazz.getModifiers())) {\n+          return false;\n+        }\n+        if (!Modifier.isPublic(clazz.getModifiers())) {\n+          return false;\n+        }\n+        Optional<Constructor<?>> constructor = Stream.of(clazz.getConstructors())\n+            .filter(ctor -> ctor.getParameterCount() == 0).findFirst();\n+        if (!constructor.isPresent() || !Modifier.isPublic(constructor.get().getModifiers())) {\n+          return false;\n+        }\n+        if (clazz.getEnclosingClass() != null && !Modifier.isStatic(clazz.getModifiers())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDE2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/di/Instantiator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0N1rOIG4Svw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0N1rOIG4Svw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDY3MQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084671", "createdAt": "2020-12-16T07:55:47Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/di/Instantiator.java", "diffHunk": "@@ -63,7 +63,12 @@\n      * @return <code>true</code> if this instance should be considered as a\n      *         candidate for usage for the provided service; <code>false</code>\n      *         to opt-out from the selection process\n+     * @deprecated The {@link Instantiator} instance should be created by an\n+     *             {@link InstantiatorFactory} which should just return\n+     *             {@code null} if the provided {@code service} can't be handled\n+     *             by it\n      */\n+    @Deprecated\n     boolean init(VaadinService service);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDI3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0OFrOIG4Syg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0OFrOIG4Syg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDY4Mg==", "bodyText": "This block of commented-out lines of code should be removed.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084682", "createdAt": "2020-12-16T07:55:48Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get names for plugins to install into node_modules.\n+     *\n+     * @return names of plugins to install\n+     */\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\n+                    \"Couldn't locate plugins/webpack-plugins.json, no Webpack plugins for Flow will be installed.\"\n+                        + \"If webpack build fails validate flow-server jar content.\");\n+                return Collections.emptyList();\n+            }\n+\n+            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n+            for (int i = 0; i < plugins.length(); i++) {\n+                pluginsToInstall.add(plugins.getString(i));\n+            }\n+            return pluginsToInstall;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(\n+                \"Couldn't load webpack-plugins.json file\", ioe);\n+        }\n+    }\n+\n+    private void generatePluginFiles(String pluginName) throws IOException {\n+        // Get the target folder where the plugin should be installed to\n+        File pluginTargetFile = new File(nodeModulesFolder,\n+            \"@vaadin/\" + pluginName);\n+\n+        final String pluginFolderName = \"plugins/\" + pluginName + \"/\";\n+        final JsonObject packageJson = getJsonFile(\n+            pluginFolderName + PACKAGE_JSON);\n+        if (packageJson == null) {\n+            log().error(\n+                \"Couldn't locate '{}' for plugin '{}'. Plugin will not be installed.\",\n+                PACKAGE_JSON, pluginName);\n+            return;\n+        }\n+\n+        // Validate installed version and don't override if same\n+        if (pluginTargetFile.exists() && new File(pluginTargetFile,\n+            PACKAGE_JSON).exists()) {\n+            String packageFile = FileUtils\n+                .readFileToString(new File(pluginTargetFile, PACKAGE_JSON),\n+                    StandardCharsets.UTF_8);\n+            final FrontendVersion packageVersion = new FrontendVersion(\n+                Json.parse(packageFile).getString(\"version\"));\n+            FrontendVersion pluginVersion = new FrontendVersion(\n+                packageJson.getString(\"version\"));\n+            if (packageVersion.isEqualTo(pluginVersion)) {\n+                log().debug(\n+                    \"Skipping install of {} for version {} already installed\",\n+                    pluginName, pluginVersion.getFullVersion());\n+                return;\n+            }\n+        }\n+\n+        // Create target folder if necessary\n+        FileUtils.forceMkdir(pluginTargetFile);\n+\n+        // copy only files named in package.json { files }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDMzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/DeprecatedPolymerPublishedEventHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0OVrOIG4S1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0OVrOIG4S1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDY5Mg==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084692", "createdAt": "2020-12-16T07:55:49Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/DeprecatedPolymerPublishedEventHandler.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.template.internal;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Type;\n+\n+import com.vaadin.flow.component.Component;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * Service for injecting the polymer event handler when the module is available.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public interface DeprecatedPolymerPublishedEventHandler extends Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDQyOnYy", "diffSide": "RIGHT", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MFrOIG4S3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MFrOIG4S3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDcwMQ==", "bodyText": "Remove this use of \"PolymerTemplate\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084701", "createdAt": "2020-12-16T07:55:50Z", "author": {"login": "vaadin-bot"}, "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.lang.reflect.Type;\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * Polymer utilitiy class for handling polymer rpc events for @EventHandler.\n+ *\n+ * Registers {@link PolymerPublishedEventRpcHandler} as a service to make it\n+ * available in {@link Lookup} in an OSGi container. *\n+ * \n+ * @since\n+ */\n+// This is OSGi specific annotation for the class which may be used without\n+// OSGi. But RetentionPolicy.CLASS used for the annotation makes it safe to use\n+// in runtime because JVM doesn't see it.\n+@org.osgi.service.component.annotations.Component(immediate = true)\n+public class PolymerPublishedEventRpcHandler\n+        implements DeprecatedPolymerPublishedEventHandler {\n+\n+    /**\n+     * Validate that the given Component instance is a PolymerTemplate and that\n+     * the value can be converted.\n+     *\n+     * @param instance\n+     *            Component to be validated\n+     * @param argValue\n+     *            received value\n+     * @param convertedType\n+     *            target type that value should be converted to\n+     * @return true if valid template model value\n+     */\n+    @Override\n+    public boolean isTemplateModelValue(Component instance, JsonValue argValue,\n+            Class<?> convertedType) {\n+        return instance instanceof PolymerTemplate\n+                && argValue instanceof JsonObject\n+                && ((PolymerTemplate<?>) instance)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDQ2OnYy", "diffSide": "RIGHT", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MVrOIG4S5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MVrOIG4S5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDcwOA==", "bodyText": "Remove this use of \"ModelType\"; it is deprecated. \n Remove this use of \"PolymerTemplate\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084708", "createdAt": "2020-12-16T07:55:51Z", "author": {"login": "vaadin-bot"}, "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.lang.reflect.Type;\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * Polymer utilitiy class for handling polymer rpc events for @EventHandler.\n+ *\n+ * Registers {@link PolymerPublishedEventRpcHandler} as a service to make it\n+ * available in {@link Lookup} in an OSGi container. *\n+ * \n+ * @since\n+ */\n+// This is OSGi specific annotation for the class which may be used without\n+// OSGi. But RetentionPolicy.CLASS used for the annotation makes it safe to use\n+// in runtime because JVM doesn't see it.\n+@org.osgi.service.component.annotations.Component(immediate = true)\n+public class PolymerPublishedEventRpcHandler\n+        implements DeprecatedPolymerPublishedEventHandler {\n+\n+    /**\n+     * Validate that the given Component instance is a PolymerTemplate and that\n+     * the value can be converted.\n+     *\n+     * @param instance\n+     *            Component to be validated\n+     * @param argValue\n+     *            received value\n+     * @param convertedType\n+     *            target type that value should be converted to\n+     * @return true if valid template model value\n+     */\n+    @Override\n+    public boolean isTemplateModelValue(Component instance, JsonValue argValue,\n+            Class<?> convertedType) {\n+        return instance instanceof PolymerTemplate\n+                && argValue instanceof JsonObject\n+                && ((PolymerTemplate<?>) instance)\n+                        .isSupportedClass(convertedType)\n+                && ((JsonObject) argValue).hasKey(\"nodeId\");\n+    }\n+\n+    /**\n+     * Get the template model object and type.\n+     *\n+     * @param template\n+     *            polymer template to get model from\n+     * @param argValue\n+     *            argument value\n+     * @param convertedType\n+     *            value type\n+     * @return the provided model value\n+     * @throws IllegalStateException\n+     *             if the component is not attached to the UI\n+     */\n+    @Override\n+    public Object getTemplateItem(Component template, JsonObject argValue,\n+            Type convertedType) {\n+        final Optional<UI> ui = template.getUI();\n+        if (ui.isPresent()) {\n+            StateNode node = ui.get().getInternals().getStateTree()\n+                    .getNodeById((int) argValue.getNumber(\"nodeId\"));\n+\n+            ModelType propertyType = ((PolymerTemplate<?>) template)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDQ4OnYy", "diffSide": "RIGHT", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MlrOIG4S6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MlrOIG4S6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDcxMw==", "bodyText": "Remove this use of \"DeprecatedPolymerPublishedEventHandler\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084713", "createdAt": "2020-12-16T07:55:52Z", "author": {"login": "vaadin-bot"}, "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.lang.reflect.Type;\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * Polymer utilitiy class for handling polymer rpc events for @EventHandler.\n+ *\n+ * Registers {@link PolymerPublishedEventRpcHandler} as a service to make it\n+ * available in {@link Lookup} in an OSGi container. *\n+ * \n+ * @since\n+ */\n+// This is OSGi specific annotation for the class which may be used without\n+// OSGi. But RetentionPolicy.CLASS used for the annotation makes it safe to use\n+// in runtime because JVM doesn't see it.\n+@org.osgi.service.component.annotations.Component(immediate = true)\n+public class PolymerPublishedEventRpcHandler\n+        implements DeprecatedPolymerPublishedEventHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDYxOnYy", "diffSide": "RIGHT", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MlrOIG4S9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MlrOIG4S9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDcyNg==", "bodyText": "Remove this use of \"PolymerTemplate\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084726", "createdAt": "2020-12-16T07:55:52Z", "author": {"login": "vaadin-bot"}, "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.lang.reflect.Type;\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * Polymer utilitiy class for handling polymer rpc events for @EventHandler.\n+ *\n+ * Registers {@link PolymerPublishedEventRpcHandler} as a service to make it\n+ * available in {@link Lookup} in an OSGi container. *\n+ * \n+ * @since\n+ */\n+// This is OSGi specific annotation for the class which may be used without\n+// OSGi. But RetentionPolicy.CLASS used for the annotation makes it safe to use\n+// in runtime because JVM doesn't see it.\n+@org.osgi.service.component.annotations.Component(immediate = true)\n+public class PolymerPublishedEventRpcHandler\n+        implements DeprecatedPolymerPublishedEventHandler {\n+\n+    /**\n+     * Validate that the given Component instance is a PolymerTemplate and that\n+     * the value can be converted.\n+     *\n+     * @param instance\n+     *            Component to be validated\n+     * @param argValue\n+     *            received value\n+     * @param convertedType\n+     *            target type that value should be converted to\n+     * @return true if valid template model value\n+     */\n+    @Override\n+    public boolean isTemplateModelValue(Component instance, JsonValue argValue,\n+            Class<?> convertedType) {\n+        return instance instanceof PolymerTemplate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDcyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/HandlerHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1M1rOIG4TCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1M1rOIG4TCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDc0NQ==", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084745", "createdAt": "2020-12-16T07:55:53Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/HandlerHelper.java", "diffHunk": "@@ -176,4 +189,26 @@ public static String getCancelingRelativePath(String pathToCancel) {\n         return sb.toString();\n     }\n \n+    /**\n+     * Checks if the given URL path contains the directory change instruction\n+     * (dot-dot), taking into account possible double encoding in hexadecimal\n+     * format, which can be injected maliciously.\n+     *\n+     * @param path\n+     *            the URL path to be verified.\n+     * @return {@code true}, if the given path has a directory change\n+     *         instruction, {@code false} otherwise.\n+     */\n+    public static boolean isPathUnsafe(String path) {\n+        // Check that the path does not have '/../', '\\..\\', %5C..%5C,\n+        // %2F..%2F, nor '/..', '\\..', %5C.., %2F..\n+        try {\n+            path = URLDecoder.decode(path, StandardCharsets.UTF_8.name());\n+        } catch (UnsupportedEncodingException e) {\n+            throw new RuntimeException(\"An error occurred during decoding URL.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDc5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/AppShellRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1NFrOIG4TEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1NFrOIG4TEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDc1Mw==", "bodyText": "This block of commented-out lines of code should be removed.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084753", "createdAt": "2020-12-16T07:55:54Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/AppShellRegistry.java", "diffHunk": "@@ -151,6 +151,11 @@ public void setShell(Class<? extends AppShellConfigurator> shell) {\n     public boolean isShell(Class<?> clz) {\n         assert clz != null;\n         try {\n+            // first try to check without loading class via the {@code clz}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDg0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1NVrOIG4THA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1NVrOIG4THA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDc2NA==", "bodyText": "Remove the declaration of thrown exception 'java.io.UnsupportedEncodingException', as it cannot be thrown from method's body.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084764", "createdAt": "2020-12-16T07:55:55Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java", "diffHunk": "@@ -378,16 +379,27 @@ private void transferAttribute(Writer writer, String elementRef,\n      * @param path\n      *            original resource path\n      * @return new resource path, relative to basePath\n+     * @throws UnsupportedEncodingException\n      */\n-    protected String modifyPath(String basePath, String path) {\n+    protected String modifyPath(String basePath, String path)\n+            throws UnsupportedEncodingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDg3OnYy", "diffSide": "RIGHT", "path": "flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1NlrOIG4TIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1NlrOIG4TIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDc2OA==", "bodyText": "Remove this use of \"REQUIRE_HOME_NODE_EXECUTABLE\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084768", "createdAt": "2020-12-16T07:55:56Z", "author": {"login": "vaadin-bot"}, "path": "flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java", "diffHunk": "@@ -120,22 +117,6 @@\n     @Parameter(property = Constants.REQUIRE_HOME_NODE_EXECUTABLE, defaultValue = \"false\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMDk1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1N1rOIG4TLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1N1rOIG4TLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDc4Mg==", "bodyText": "Refactor this code to not nest more than 3 if/for/while/switch/try statements.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084782", "createdAt": "2020-12-16T07:55:57Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "diffHunk": "@@ -296,21 +304,36 @@ private void computeApplicationTheme() throws ClassNotFoundException,\n \n         Class<? extends AbstractTheme> theme = null;\n         String variant = \"\";\n+        String themeName = \"\";\n         if (themes.isEmpty()) {\n             theme = getDefaultTheme();\n         } else {\n             // we have a proper theme or no-theme for the app\n             ThemeData themeData = themes.iterator().next();\n             if (!themeData.isNotheme()) {\n+                String themeClass = themeData.getThemeClass();\n+                if (!themeData.getThemeName().isEmpty() && themeClass != null) {\n+                    throw new IllegalStateException(\n+                        \"Theme name and theme class can not both be specified. \"\n+                            + \"Theme name uses Lumo and can not be used in combination with custom theme class.\");\n+                }\n                 variant = themeData.getVariant();\n-                theme = getFinder().loadClass(themeData.getName());\n+                if (themeClass != null) {\n+                    theme = getFinder().loadClass(themeClass);\n+                } else {\n+                    theme = getDefaultTheme();\n+                    if (theme == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTAxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/LookupInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1OFrOIG4TNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1OFrOIG4TNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDc5MA==", "bodyText": "\"servletContext\" is a method parameter, and should not be used for synchronization.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084790", "createdAt": "2020-12-16T07:55:58Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/LookupInitializer.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.HandlesTypes;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.reflect.Modifier;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n+import com.vaadin.flow.di.InstantiatorFactory;\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.server.VaadinServletContext;\n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n+\n+/**\n+ * Standard servlet initializer for collecting all SPI implementations.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+@HandlesTypes({ ResourceProvider.class, InstantiatorFactory.class,\n+        DeprecatedPolymerPublishedEventHandler.class,\n+        EndpointGeneratorTaskFactory.class })\n+public class LookupInitializer\n+        implements ClassLoaderAwareServletContainerInitializer {\n+\n+    private static final String SPI = \" SPI: \";\n+\n+    private static final String ONE_IMPL_REQUIRED = \". Only one implementation should be registered. \"\n+            + \"Use lookupAll to get all instances of the given type.\";\n+\n+    private static final String SEVERAL_IMPLS = \"Found several implementations in the classpath for \";\n+\n+    /**\n+     * This class is private because it's an implementation detail/one of the\n+     * possible implementation and is explicitly made non-overridable because it\n+     * provides the way to override everything.\n+     */\n+    private static class LookupImpl implements Lookup {\n+\n+        private final Map<Class<?>, Collection<Object>> serviceMap;\n+\n+        private LookupImpl(Map<Class<?>, Collection<Object>> initialServices) {\n+            serviceMap = Collections\n+                    .unmodifiableMap(new HashMap<>(initialServices));\n+        }\n+\n+        @Override\n+        public <T> T lookup(Class<T> serviceClass) {\n+            Collection<Object> registered = serviceMap.get(serviceClass);\n+            if (registered == null || registered.isEmpty()) {\n+                ServiceLoader<T> loader = ServiceLoader.load(serviceClass);\n+                List<T> services = new ArrayList<>();\n+                for (Iterator<T> iterator = loader.iterator(); iterator\n+                        .hasNext();) {\n+                    services.add(iterator.next());\n+                }\n+                if (services.size() > 1) {\n+                    throw new IllegalStateException(SEVERAL_IMPLS + serviceClass\n+                            + SPI + services + ONE_IMPL_REQUIRED);\n+                } else if (services.size() == 1) {\n+                    return services.get(0);\n+                }\n+                return null;\n+            } else if (registered.size() > 1) {\n+                throw new IllegalStateException(SEVERAL_IMPLS + serviceClass\n+                        + SPI + registered + ONE_IMPL_REQUIRED);\n+            } else {\n+                return serviceClass.cast(registered.iterator().next());\n+            }\n+        }\n+\n+        @Override\n+        public <T> Collection<T> lookupAll(Class<T> serviceClass) {\n+            List<T> result = new ArrayList<>();\n+            Collection<Object> registered = serviceMap.get(serviceClass);\n+\n+            Set<?> registeredClasses = registered == null\n+                    ? Collections.emptySet()\n+                    : registered.stream().map(Object::getClass)\n+                            .collect(Collectors.toSet());\n+            if (registered != null) {\n+                registered.forEach(\n+                        service -> result.add(serviceClass.cast(service)));\n+            }\n+            ServiceLoader<T> loader = ServiceLoader.load(serviceClass);\n+            for (Iterator<T> iterator = loader.iterator(); iterator\n+                    .hasNext();) {\n+                T next = iterator.next();\n+                if (!registeredClasses.contains(next.getClass())) {\n+                    result.add(next);\n+                }\n+            }\n+            return result;\n+        }\n+    }\n+\n+    private static class CachedStreamData {\n+\n+        private final byte[] data;\n+        private final IOException exception;\n+\n+        private CachedStreamData(byte[] data, IOException exception) {\n+            this.data = data;\n+            this.exception = exception;\n+        }\n+    }\n+\n+    /**\n+     * This class is private because it's an implementation detail/one of the\n+     * possible implementation and should not be available as public because\n+     * {@link LookupInitializer} will find it in the classpath and it will be\n+     * always used instead custom {@link ResourceProvider} implementation.\n+     */\n+    private static class ResourceProviderImpl implements ResourceProvider {\n+\n+        private Map<String, CachedStreamData> cache = new ConcurrentHashMap<>();\n+\n+        @Override\n+        public URL getApplicationResource(String path) {\n+            return ResourceProviderImpl.class.getClassLoader()\n+                    .getResource(path);\n+        }\n+\n+        @Override\n+        public List<URL> getApplicationResources(String path)\n+                throws IOException {\n+            return Collections.list(ResourceProviderImpl.class.getClassLoader()\n+                    .getResources(path));\n+        }\n+\n+        @Override\n+        public URL getClientResource(String path) {\n+            return getApplicationResource(path);\n+        }\n+\n+        @Override\n+        public InputStream getClientResourceAsStream(String path)\n+                throws IOException {\n+            // the client resource should be available in the classpath, so\n+            // its content is cached once. If an exception is thrown then\n+            // something is broken and it's also cached and will be rethrown on\n+            // every subsequent access\n+            CachedStreamData cached = cache.computeIfAbsent(path, key -> {\n+                URL url = getClientResource(key);\n+                try (InputStream stream = url.openStream()) {\n+                    ByteArrayOutputStream tempBuffer = new ByteArrayOutputStream();\n+                    IOUtils.copy(stream, tempBuffer);\n+                    return new CachedStreamData(tempBuffer.toByteArray(), null);\n+                } catch (IOException e) {\n+                    return new CachedStreamData(null, e);\n+                }\n+            });\n+\n+            IOException exception = cached.exception;\n+            if (exception == null) {\n+                return new ByteArrayInputStream(cached.data);\n+            }\n+            throw exception;\n+        }\n+\n+    }\n+\n+    @Override\n+    public void process(Set<Class<?>> classSet, ServletContext servletContext)\n+            throws ServletException {\n+        VaadinServletContext vaadinContext = new VaadinServletContext(\n+                servletContext);\n+        initStandardLookup(classSet, servletContext);\n+\n+        DeferredServletContextInitializers initializers;\n+        synchronized (servletContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTA3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/LookupInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1OVrOIG4TQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1OVrOIG4TQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDgwMw==", "bodyText": "Remove this use of \"DeprecatedPolymerPublishedEventHandler\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084803", "createdAt": "2020-12-16T07:55:59Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/LookupInitializer.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.HandlesTypes;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.reflect.Modifier;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n+import com.vaadin.flow.di.InstantiatorFactory;\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.server.VaadinServletContext;\n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n+\n+/**\n+ * Standard servlet initializer for collecting all SPI implementations.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+@HandlesTypes({ ResourceProvider.class, InstantiatorFactory.class,\n+        DeprecatedPolymerPublishedEventHandler.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTE0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowMFrOIG4TTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowMFrOIG4TTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDgxNA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084814", "createdAt": "2020-12-16T07:56:00Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java", "diffHunk": "@@ -135,13 +139,13 @@\n     /**\n      * Default folder for copying front-end resources present in the classpath\n      * jars.\n-     * @deprecated This is deprecated due to a typo.\n-     *             Use DEFAULT_FLOW_RESOURCES_FOLDER instead.\n+     * \n+     * @deprecated This is deprecated due to a typo. Use\n+     *             DEFAULT_FLOW_RESOURCES_FOLDER instead.\n      * @see #DEFAULT_FLOW_RESOURCES_FOLDER\n      */\n     @Deprecated\n-    public static final String DEAULT_FLOW_RESOURCES_FOLDER =\n-            DEFAULT_FLOW_RESOURCES_FOLDER;\n+    public static final String DEAULT_FLOW_RESOURCES_FOLDER = DEFAULT_FLOW_RESOURCES_FOLDER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTI0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowMVrOIG4TWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowMVrOIG4TWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDgyNQ==", "bodyText": "Either re-interrupt this method or rethrow the \"InterruptedException\".", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084825", "createdAt": "2020-12-16T07:56:01Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -658,8 +683,10 @@ private boolean doStartWebpack(DeploymentConfiguration config,\n             long ms = (System.nanoTime() - start) / 1000000;\n             getLogger().info(LOG_END, ms);\n             return true;\n-        } catch (IOException | InterruptedException e) {\n+        } catch (IOException e) {\n             getLogger().error(\"Failed to start the webpack process\", e);\n+        } catch (InterruptedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTMzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowMlrOIG4TZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowMlrOIG4TZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDgzNw==", "bodyText": "Reduce this lambda expression number of lines from 37 to at most 20.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084837", "createdAt": "2020-12-16T07:56:02Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "diffHunk": "@@ -43,61 +46,90 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n+    default void onStartup(Set<Class<?>> set, ServletContext context)\n             throws ServletException {\n-        ClassLoader webClassLoader = ctx.getClassLoader();\n-        ClassLoader classLoader = getClass().getClassLoader();\n+        // see DeferredServletContextIntializers\n+        DeferredServletContextInitializers.Initializer deferredInitializer = ctx -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTM4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowM1rOIG4TbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowM1rOIG4TbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDg0NQ==", "bodyText": "This block of commented-out lines of code should be removed.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084845", "createdAt": "2020-12-16T07:56:03Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "diffHunk": "@@ -43,61 +46,90 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n+    default void onStartup(Set<Class<?>> set, ServletContext context)\n             throws ServletException {\n-        ClassLoader webClassLoader = ctx.getClassLoader();\n-        ClassLoader classLoader = getClass().getClassLoader();\n+        // see DeferredServletContextIntializers\n+        DeferredServletContextInitializers.Initializer deferredInitializer = ctx -> {\n+            ClassLoader webClassLoader = ctx.getClassLoader();\n+            ClassLoader classLoader = getClass().getClassLoader();\n \n-        /*\n-         * Hack is needed to make a workaround for weird behavior of WildFly\n-         * with skinnywar See https://github.com/vaadin/flow/issues/7805\n-         */\n-        boolean noHack = false;\n-        while (classLoader != null) {\n-            if (classLoader.equals(webClassLoader)) {\n-                noHack = true;\n-                break;\n-            } else {\n-                /*\n-                 * The classloader which has loaded this class ({@code\n-                 * classLoader}) should be either the {@code webClassLoader} or\n-                 * its child: in this case it knows how to handle the classes\n-                 * loaded by the {@code webClassLoader} : it either is able to\n-                 * load them itself or delegate to its parent (which is the\n-                 * {@code webClassLoader}): in this case hack is not needed and\n-                 * the {@link #process(Set, ServletContext)} method can be\n-                 * called directly.\n-                 */\n-                classLoader = classLoader.getParent();\n+            /*\n+             * Hack is needed to make a workaround for weird behavior of WildFly\n+             * with skinnywar See https://github.com/vaadin/flow/issues/7805\n+             */\n+            boolean noHack = false;\n+            while (classLoader != null) {\n+                if (classLoader.equals(webClassLoader)) {\n+                    noHack = true;\n+                    break;\n+                } else {\n+                    /*\n+                     * The classloader which has loaded this class ({@code\n+                     * classLoader}) should be either the {@code webClassLoader}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTUwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowNFrOIG4Teg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowNFrOIG4Teg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDg1OA==", "bodyText": "Replace this lambda with a method reference.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084858", "createdAt": "2020-12-16T07:56:04Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "diffHunk": "@@ -43,61 +46,90 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n+    default void onStartup(Set<Class<?>> set, ServletContext context)\n             throws ServletException {\n-        ClassLoader webClassLoader = ctx.getClassLoader();\n-        ClassLoader classLoader = getClass().getClassLoader();\n+        // see DeferredServletContextIntializers\n+        DeferredServletContextInitializers.Initializer deferredInitializer = ctx -> {\n+            ClassLoader webClassLoader = ctx.getClassLoader();\n+            ClassLoader classLoader = getClass().getClassLoader();\n \n-        /*\n-         * Hack is needed to make a workaround for weird behavior of WildFly\n-         * with skinnywar See https://github.com/vaadin/flow/issues/7805\n-         */\n-        boolean noHack = false;\n-        while (classLoader != null) {\n-            if (classLoader.equals(webClassLoader)) {\n-                noHack = true;\n-                break;\n-            } else {\n-                /*\n-                 * The classloader which has loaded this class ({@code\n-                 * classLoader}) should be either the {@code webClassLoader} or\n-                 * its child: in this case it knows how to handle the classes\n-                 * loaded by the {@code webClassLoader} : it either is able to\n-                 * load them itself or delegate to its parent (which is the\n-                 * {@code webClassLoader}): in this case hack is not needed and\n-                 * the {@link #process(Set, ServletContext)} method can be\n-                 * called directly.\n-                 */\n-                classLoader = classLoader.getParent();\n+            /*\n+             * Hack is needed to make a workaround for weird behavior of WildFly\n+             * with skinnywar See https://github.com/vaadin/flow/issues/7805\n+             */\n+            boolean noHack = false;\n+            while (classLoader != null) {\n+                if (classLoader.equals(webClassLoader)) {\n+                    noHack = true;\n+                    break;\n+                } else {\n+                    /*\n+                     * The classloader which has loaded this class ({@code\n+                     * classLoader}) should be either the {@code webClassLoader}\n+                     * or its child: in this case it knows how to handle the\n+                     * classes loaded by the {@code webClassLoader} : it either\n+                     * is able to load them itself or delegate to its parent\n+                     * (which is the {@code webClassLoader}): in this case hack\n+                     * is not needed and the {@link #process(Set,\n+                     * ServletContext)} method can be called directly.\n+                     */\n+                    classLoader = classLoader.getParent();\n+                }\n             }\n-        }\n \n-        if (noHack) {\n-            process(set, ctx);\n-            return;\n-        }\n+            if (noHack) {\n+                process(set, ctx);\n+                return;\n+            }\n+\n+            try {\n+                Class<?> initializer = ctx.getClassLoader()\n+                        .loadClass(getClass().getName());\n \n-        try {\n-            Class<?> initializer = ctx.getClassLoader()\n-                    .loadClass(getClass().getName());\n+                String processMethodName = Stream\n+                        .of(ClassLoaderAwareServletContainerInitializer.class\n+                                .getDeclaredMethods())\n+                        .filter(method -> !method.isDefault()\n+                                && !method.isSynthetic())\n+                        .findFirst().get().getName();\n+                Method operation = Stream.of(initializer.getDeclaredMethods())\n+                        .filter(method -> method.getName()\n+                                .equals(processMethodName))\n+                        .findFirst().get();\n+                operation.invoke(initializer.newInstance(),\n+                        new Object[] { set, ctx });\n+            } catch (ClassNotFoundException | IllegalAccessException\n+                    | IllegalArgumentException | InvocationTargetException\n+                    | InstantiationException e) {\n+                throw new ServletException(e);\n+            }\n+        };\n \n-            String processMethodName = Stream\n-                    .of(ClassLoaderAwareServletContainerInitializer.class\n-                            .getDeclaredMethods())\n-                    .filter(method -> !method.isDefault()\n-                            && !method.isSynthetic())\n-                    .findFirst().get().getName();\n-            Method operation = Stream.of(initializer.getDeclaredMethods())\n-                    .filter(method -> method.getName()\n-                            .equals(processMethodName))\n-                    .findFirst().get();\n-            operation.invoke(initializer.newInstance(),\n-                    new Object[] { set, ctx });\n-        } catch (ClassNotFoundException | IllegalAccessException\n-                | IllegalArgumentException | InvocationTargetException\n-                | InstantiationException e) {\n-            throw new ServletException(e);\n+        if (requiresLookup()) {\n+            VaadinServletContext vaadinContext = new VaadinServletContext(\n+                    context);\n+            synchronized (context) {\n+                if (vaadinContext.getAttribute(Lookup.class) == null) {\n+                    DeferredServletContextInitializers initializers = vaadinContext\n+                            .getAttribute(\n+                                    DeferredServletContextInitializers.class,\n+                                    () -> new DeferredServletContextInitializers());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTYyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowNlrOIG4TiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowNlrOIG4TiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDg3Mw==", "bodyText": "Replace this lambda with a method reference.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084873", "createdAt": "2020-12-16T07:56:06Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "diffHunk": "@@ -43,61 +46,90 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n+    default void onStartup(Set<Class<?>> set, ServletContext context)\n             throws ServletException {\n-        ClassLoader webClassLoader = ctx.getClassLoader();\n-        ClassLoader classLoader = getClass().getClassLoader();\n+        // see DeferredServletContextIntializers\n+        DeferredServletContextInitializers.Initializer deferredInitializer = ctx -> {\n+            ClassLoader webClassLoader = ctx.getClassLoader();\n+            ClassLoader classLoader = getClass().getClassLoader();\n \n-        /*\n-         * Hack is needed to make a workaround for weird behavior of WildFly\n-         * with skinnywar See https://github.com/vaadin/flow/issues/7805\n-         */\n-        boolean noHack = false;\n-        while (classLoader != null) {\n-            if (classLoader.equals(webClassLoader)) {\n-                noHack = true;\n-                break;\n-            } else {\n-                /*\n-                 * The classloader which has loaded this class ({@code\n-                 * classLoader}) should be either the {@code webClassLoader} or\n-                 * its child: in this case it knows how to handle the classes\n-                 * loaded by the {@code webClassLoader} : it either is able to\n-                 * load them itself or delegate to its parent (which is the\n-                 * {@code webClassLoader}): in this case hack is not needed and\n-                 * the {@link #process(Set, ServletContext)} method can be\n-                 * called directly.\n-                 */\n-                classLoader = classLoader.getParent();\n+            /*\n+             * Hack is needed to make a workaround for weird behavior of WildFly\n+             * with skinnywar See https://github.com/vaadin/flow/issues/7805\n+             */\n+            boolean noHack = false;\n+            while (classLoader != null) {\n+                if (classLoader.equals(webClassLoader)) {\n+                    noHack = true;\n+                    break;\n+                } else {\n+                    /*\n+                     * The classloader which has loaded this class ({@code\n+                     * classLoader}) should be either the {@code webClassLoader}\n+                     * or its child: in this case it knows how to handle the\n+                     * classes loaded by the {@code webClassLoader} : it either\n+                     * is able to load them itself or delegate to its parent\n+                     * (which is the {@code webClassLoader}): in this case hack\n+                     * is not needed and the {@link #process(Set,\n+                     * ServletContext)} method can be called directly.\n+                     */\n+                    classLoader = classLoader.getParent();\n+                }\n             }\n-        }\n \n-        if (noHack) {\n-            process(set, ctx);\n-            return;\n-        }\n+            if (noHack) {\n+                process(set, ctx);\n+                return;\n+            }\n+\n+            try {\n+                Class<?> initializer = ctx.getClassLoader()\n+                        .loadClass(getClass().getName());\n \n-        try {\n-            Class<?> initializer = ctx.getClassLoader()\n-                    .loadClass(getClass().getName());\n+                String processMethodName = Stream\n+                        .of(ClassLoaderAwareServletContainerInitializer.class\n+                                .getDeclaredMethods())\n+                        .filter(method -> !method.isDefault()\n+                                && !method.isSynthetic())\n+                        .findFirst().get().getName();\n+                Method operation = Stream.of(initializer.getDeclaredMethods())\n+                        .filter(method -> method.getName()\n+                                .equals(processMethodName))\n+                        .findFirst().get();\n+                operation.invoke(initializer.newInstance(),\n+                        new Object[] { set, ctx });\n+            } catch (ClassNotFoundException | IllegalAccessException\n+                    | IllegalArgumentException | InvocationTargetException\n+                    | InstantiationException e) {\n+                throw new ServletException(e);\n+            }\n+        };\n \n-            String processMethodName = Stream\n-                    .of(ClassLoaderAwareServletContainerInitializer.class\n-                            .getDeclaredMethods())\n-                    .filter(method -> !method.isDefault()\n-                            && !method.isSynthetic())\n-                    .findFirst().get().getName();\n-            Method operation = Stream.of(initializer.getDeclaredMethods())\n-                    .filter(method -> method.getName()\n-                            .equals(processMethodName))\n-                    .findFirst().get();\n-            operation.invoke(initializer.newInstance(),\n-                    new Object[] { set, ctx });\n-        } catch (ClassNotFoundException | IllegalAccessException\n-                | IllegalArgumentException | InvocationTargetException\n-                | InstantiationException e) {\n-            throw new ServletException(e);\n+        if (requiresLookup()) {\n+            VaadinServletContext vaadinContext = new VaadinServletContext(\n+                    context);\n+            synchronized (context) {\n+                if (vaadinContext.getAttribute(Lookup.class) == null) {\n+                    DeferredServletContextInitializers initializers = vaadinContext\n+                            .getAttribute(\n+                                    DeferredServletContextInitializers.class,\n+                                    () -> new DeferredServletContextInitializers());\n+                    initializers.addInitializer(\n+                            ctx -> deferredInitializer.init(ctx));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTY5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowN1rOIG4Tkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowN1rOIG4Tkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDg4Mg==", "bodyText": "\"context\" is a method parameter, and should not be used for synchronization.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084882", "createdAt": "2020-12-16T07:56:07Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "diffHunk": "@@ -43,61 +46,90 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n+    default void onStartup(Set<Class<?>> set, ServletContext context)\n             throws ServletException {\n-        ClassLoader webClassLoader = ctx.getClassLoader();\n-        ClassLoader classLoader = getClass().getClassLoader();\n+        // see DeferredServletContextIntializers\n+        DeferredServletContextInitializers.Initializer deferredInitializer = ctx -> {\n+            ClassLoader webClassLoader = ctx.getClassLoader();\n+            ClassLoader classLoader = getClass().getClassLoader();\n \n-        /*\n-         * Hack is needed to make a workaround for weird behavior of WildFly\n-         * with skinnywar See https://github.com/vaadin/flow/issues/7805\n-         */\n-        boolean noHack = false;\n-        while (classLoader != null) {\n-            if (classLoader.equals(webClassLoader)) {\n-                noHack = true;\n-                break;\n-            } else {\n-                /*\n-                 * The classloader which has loaded this class ({@code\n-                 * classLoader}) should be either the {@code webClassLoader} or\n-                 * its child: in this case it knows how to handle the classes\n-                 * loaded by the {@code webClassLoader} : it either is able to\n-                 * load them itself or delegate to its parent (which is the\n-                 * {@code webClassLoader}): in this case hack is not needed and\n-                 * the {@link #process(Set, ServletContext)} method can be\n-                 * called directly.\n-                 */\n-                classLoader = classLoader.getParent();\n+            /*\n+             * Hack is needed to make a workaround for weird behavior of WildFly\n+             * with skinnywar See https://github.com/vaadin/flow/issues/7805\n+             */\n+            boolean noHack = false;\n+            while (classLoader != null) {\n+                if (classLoader.equals(webClassLoader)) {\n+                    noHack = true;\n+                    break;\n+                } else {\n+                    /*\n+                     * The classloader which has loaded this class ({@code\n+                     * classLoader}) should be either the {@code webClassLoader}\n+                     * or its child: in this case it knows how to handle the\n+                     * classes loaded by the {@code webClassLoader} : it either\n+                     * is able to load them itself or delegate to its parent\n+                     * (which is the {@code webClassLoader}): in this case hack\n+                     * is not needed and the {@link #process(Set,\n+                     * ServletContext)} method can be called directly.\n+                     */\n+                    classLoader = classLoader.getParent();\n+                }\n             }\n-        }\n \n-        if (noHack) {\n-            process(set, ctx);\n-            return;\n-        }\n+            if (noHack) {\n+                process(set, ctx);\n+                return;\n+            }\n+\n+            try {\n+                Class<?> initializer = ctx.getClassLoader()\n+                        .loadClass(getClass().getName());\n \n-        try {\n-            Class<?> initializer = ctx.getClassLoader()\n-                    .loadClass(getClass().getName());\n+                String processMethodName = Stream\n+                        .of(ClassLoaderAwareServletContainerInitializer.class\n+                                .getDeclaredMethods())\n+                        .filter(method -> !method.isDefault()\n+                                && !method.isSynthetic())\n+                        .findFirst().get().getName();\n+                Method operation = Stream.of(initializer.getDeclaredMethods())\n+                        .filter(method -> method.getName()\n+                                .equals(processMethodName))\n+                        .findFirst().get();\n+                operation.invoke(initializer.newInstance(),\n+                        new Object[] { set, ctx });\n+            } catch (ClassNotFoundException | IllegalAccessException\n+                    | IllegalArgumentException | InvocationTargetException\n+                    | InstantiationException e) {\n+                throw new ServletException(e);\n+            }\n+        };\n \n-            String processMethodName = Stream\n-                    .of(ClassLoaderAwareServletContainerInitializer.class\n-                            .getDeclaredMethods())\n-                    .filter(method -> !method.isDefault()\n-                            && !method.isSynthetic())\n-                    .findFirst().get().getName();\n-            Method operation = Stream.of(initializer.getDeclaredMethods())\n-                    .filter(method -> method.getName()\n-                            .equals(processMethodName))\n-                    .findFirst().get();\n-            operation.invoke(initializer.newInstance(),\n-                    new Object[] { set, ctx });\n-        } catch (ClassNotFoundException | IllegalAccessException\n-                | IllegalArgumentException | InvocationTargetException\n-                | InstantiationException e) {\n-            throw new ServletException(e);\n+        if (requiresLookup()) {\n+            VaadinServletContext vaadinContext = new VaadinServletContext(\n+                    context);\n+            synchronized (context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTczOnYy", "diffSide": "RIGHT", "path": "fusion-endpoint/src/test/java/com/vaadin/flow/server/startup/fusion/DevModeInitializerEndpointTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowOFrOIG4TmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowOFrOIG4TmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDg4OQ==", "bodyText": "Remove this use of \"Thread.sleep()\".", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084889", "createdAt": "2020-12-16T07:56:08Z", "author": {"login": "vaadin-bot"}, "path": "fusion-endpoint/src/test/java/com/vaadin/flow/server/startup/fusion/DevModeInitializerEndpointTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package com.vaadin.flow.server.startup.fusion;\n+\n+import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_REUSE_DEV_SERVER;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_GENERATED_TS_DIR;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_JAVA_SOURCE_FOLDER;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_OPENAPI_JSON_FILE;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletRegistration;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.server.DevModeHandler;\n+import com.vaadin.flow.server.VaadinServlet;\n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.server.frontend.fusion.EndpointGeneratorTaskFactoryImpl;\n+import com.vaadin.flow.server.startup.DevModeInitializer;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+\n+@NotThreadSafe\n+public class DevModeInitializerEndpointTest {\n+    private final AtomicReference<DevModeHandler> atomicHandler = new AtomicReference<>();\n+    \n+    String baseDir;\n+    ServletContext servletContext;\n+    Map<String, String> initParams;\n+    Set<Class<?>> classes;\n+    DevModeInitializer devModeInitializer;\n+\n+    private final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    private static class VaadinServletSubClass extends VaadinServlet {\n+\n+    }\n+\n+    @Before\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public void setup() throws Exception {\n+        assertNull(getDevModeHandler());\n+\n+        temporaryFolder.create();\n+        baseDir = temporaryFolder.getRoot().getPath();\n+\n+        servletContext = Mockito.mock(ServletContext.class);\n+        ServletRegistration vaadinServletRegistration = Mockito\n+                .mock(ServletRegistration.class);\n+\n+        Lookup lookup = Mockito.mock(Lookup.class);\n+        Mockito.when(servletContext.getAttribute(Lookup.class.getName()))\n+                .thenReturn(lookup);\n+        Mockito.doReturn(new EndpointGeneratorTaskFactoryImpl()).when(lookup).lookup(EndpointGeneratorTaskFactory.class);\n+\n+        ResourceProvider resourceProvider = Mockito\n+                .mock(ResourceProvider.class);\n+        Mockito.when(lookup.lookup(ResourceProvider.class))\n+                .thenReturn(resourceProvider);\n+\n+        Mockito.when(vaadinServletRegistration.getClassName())\n+                .thenReturn(VaadinServletSubClass.class.getName());\n+\n+        initParams = new HashMap<>();\n+        initParams.put(FrontendUtils.PROJECT_BASEDIR, baseDir);\n+\n+        Mockito.when(vaadinServletRegistration.getInitParameters())\n+                .thenReturn(initParams);\n+\n+        classes = new HashSet<>();\n+        classes.add(this.getClass());\n+\n+        Map registry = new HashMap();\n+\n+        // Adding extra registrations to make sure that DevModeInitializer picks\n+        // the correct registration which is a VaadinServlet registration.\n+        registry.put(\"extra1\", Mockito.mock(ServletRegistration.class));\n+        registry.put(\"foo\", vaadinServletRegistration);\n+        registry.put(\"extra2\", Mockito.mock(ServletRegistration.class));\n+        Mockito.when(servletContext.getServletRegistrations())\n+                .thenReturn(registry);\n+        Mockito.when(servletContext.getInitParameterNames())\n+                .thenReturn(Collections.emptyEnumeration());\n+        Mockito.when(servletContext.getClassLoader())\n+                .thenReturn(this.getClass().getClassLoader());\n+\n+        FileUtils.forceMkdir(\n+                new File(baseDir, DEFAULT_CONNECT_JAVA_SOURCE_FOLDER));\n+\n+        devModeInitializer = new DevModeInitializer();\n+    }\n+\n+    @After\n+    public void teardown() throws Exception, SecurityException {\n+        System.clearProperty(\"vaadin.\" + SERVLET_PARAMETER_PRODUCTION_MODE);\n+        System.clearProperty(\"vaadin.\" + SERVLET_PARAMETER_REUSE_DEV_SERVER);\n+        System.clearProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n+\n+        temporaryFolder.delete();\n+        if (getDevModeHandler() != null) {\n+            getDevModeHandler().stop();\n+        }\n+    }\n+\n+    @Test\n+    public void should_generateOpenApi_when_EndpointPresents()\n+            throws Exception {\n+        String originalJavaSourceFolder = null;\n+        File generatedOpenApiJson = Paths\n+                    .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n+        try {\n+            originalJavaSourceFolder = System.getProperty(\"vaadin.\" \n+                + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n+            // Configure a folder that has .java classes with valid endpoints\n+            // Not using `src/test/java` because there are invalid endpoint names\n+            // in some tests\n+            File src = new File(\n+                    getClass().getClassLoader().getResource(\"java\").getFile());\n+            System.setProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n+                    src.getAbsolutePath());\n+\n+            Assert.assertFalse(generatedOpenApiJson.exists());\n+            DevModeInitializer devModeInitializer = new DevModeInitializer();\n+            devModeInitializer.onStartup(classes, servletContext);\n+            waitForDevModeServer();\n+            Thread.sleep(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTc3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowOFrOIG4Tnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowOFrOIG4Tnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDg5NQ==", "bodyText": "Refactor this method to reduce its Cognitive Complexity from 18 to the 15 allowed.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084895", "createdAt": "2020-12-16T07:56:08Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import java.io.File;\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.vaadin.flow.server.InitParameters;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+\n+import elemental.json.JsonObject;\n+\n+import static com.vaadin.flow.server.Constants.CONNECT_APPLICATION_PROPERTIES_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_GENERATED_TS_DIR_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_OPEN_API_FILE_TOKEN;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_FILE;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_FILE_TOKEN;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_URL;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_URL_TOKEN;\n+import static com.vaadin.flow.server.Constants.FRONTEND_TOKEN;\n+import static com.vaadin.flow.server.Constants.NPM_TOKEN;\n+import static com.vaadin.flow.server.Constants.VAADIN_PREFIX;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_ENABLE_DEV_SERVER;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_INITIAL_UIDL;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_REUSE_DEV_SERVER;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_USE_V14_BOOTSTRAP;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.PROJECT_BASEDIR;\n+\n+/**\n+ * A configuration factory base logic which reads the token file.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+public class AbstractConfigurationFactory implements Serializable {\n+\n+    public static final String DEV_FOLDER_MISSING_MESSAGE = \"Running project in development mode with no access to folder '%s'.%n\"\n+            + \"Build project in production mode instead, see https://vaadin.com/docs/v15/flow/production/tutorial-production-mode-basic.html\";\n+\n+    /**\n+     * Returns the config parameters from the token file data {@code buildInfo}.\n+     * \n+     * @param buildInfo\n+     *            the token file data\n+     * @return the config parameters\n+     */\n+    public Map<String, String> getConfigParametersUsingTokenData(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTgzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowOVrOIG4Tqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowOVrOIG4Tqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDkwNw==", "bodyText": "Remove this unused method parameter \"systemPropertyBaseClass\".", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084907", "createdAt": "2020-12-16T07:56:09Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java", "diffHunk": "@@ -183,127 +177,13 @@ private static void readBuildInfo(Properties initParameters) {\n         }\n     }\n \n-    private static void setInitParametersUsingTokenData(\n-            Properties initParameters, JsonObject buildInfo) {\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_PRODUCTION_MODE)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_PRODUCTION_MODE,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_PRODUCTION_MODE)));\n-        }\n-        if (buildInfo.hasKey(EXTERNAL_STATS_FILE_TOKEN)\n-                || buildInfo.hasKey(EXTERNAL_STATS_URL_TOKEN)) {\n-            // If external stats file is flagged then\n-            // dev server should be false - only variable that can\n-            // be configured, in addition to stats variables, is\n-            // production mode\n-            initParameters.setProperty(SERVLET_PARAMETER_ENABLE_DEV_SERVER,\n-                    Boolean.toString(false));\n-            initParameters.setProperty(EXTERNAL_STATS_FILE,\n-                    Boolean.toString(true));\n-            if (buildInfo.hasKey(EXTERNAL_STATS_URL_TOKEN)) {\n-                initParameters.setProperty(EXTERNAL_STATS_URL,\n-                        buildInfo.getString(EXTERNAL_STATS_URL_TOKEN));\n-            }\n-            // NO OTHER CONFIGURATION:\n-            return;\n-        }\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_USE_V14_BOOTSTRAP)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_USE_V14_BOOTSTRAP,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_USE_V14_BOOTSTRAP)));\n-            // Need to be sure that we remove the system property,\n-            // because it has priority in the configuration getter\n-            System.clearProperty(\n-                    VAADIN_PREFIX + SERVLET_PARAMETER_USE_V14_BOOTSTRAP);\n-        }\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_INITIAL_UIDL)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_INITIAL_UIDL,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_INITIAL_UIDL)));\n-            // Need to be sure that we remove the system property,\n-            // because it has priority in the configuration getter\n-            System.clearProperty(\n-                    VAADIN_PREFIX + SERVLET_PARAMETER_INITIAL_UIDL);\n-        }\n-\n-        if (buildInfo.hasKey(NPM_TOKEN)) {\n-            initParameters.setProperty(PROJECT_BASEDIR,\n-                    buildInfo.getString(NPM_TOKEN));\n-            verifyFolderExists(initParameters, buildInfo.getString(NPM_TOKEN));\n-        }\n-\n-        if (buildInfo.hasKey(FRONTEND_TOKEN)) {\n-            initParameters.setProperty(FrontendUtils.PARAM_FRONTEND_DIR,\n-                    buildInfo.getString(FRONTEND_TOKEN));\n-            // Only verify frontend folder if it's not a subfolder of the\n-            // npm folder.\n-            if (!buildInfo.hasKey(NPM_TOKEN)\n-                    || !buildInfo.getString(FRONTEND_TOKEN)\n-                            .startsWith(buildInfo.getString(NPM_TOKEN))) {\n-                verifyFolderExists(initParameters,\n-                        buildInfo.getString(FRONTEND_TOKEN));\n-            }\n-        }\n-\n-        // These should be internal only so if there is a System\n-        // property override then the user probably knows what\n-        // they are doing.\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_ENABLE_DEV_SERVER)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_ENABLE_DEV_SERVER,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_ENABLE_DEV_SERVER)));\n-        }\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_REUSE_DEV_SERVER)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_REUSE_DEV_SERVER,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_REUSE_DEV_SERVER)));\n-        }\n-        if (buildInfo.hasKey(CONNECT_JAVA_SOURCE_FOLDER_TOKEN)) {\n-            initParameters.setProperty(CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n-                    buildInfo.getString(CONNECT_JAVA_SOURCE_FOLDER_TOKEN));\n-        }\n-        if (buildInfo.hasKey(CONNECT_OPEN_API_FILE_TOKEN)) {\n-            initParameters.setProperty(CONNECT_OPEN_API_FILE_TOKEN,\n-                    buildInfo.getString(CONNECT_OPEN_API_FILE_TOKEN));\n-        }\n-        if (buildInfo.hasKey(CONNECT_APPLICATION_PROPERTIES_TOKEN)) {\n-            initParameters.setProperty(CONNECT_APPLICATION_PROPERTIES_TOKEN,\n-                    buildInfo.getString(CONNECT_APPLICATION_PROPERTIES_TOKEN));\n-        }\n-        if (buildInfo.hasKey(CONNECT_GENERATED_TS_DIR_TOKEN)) {\n-            initParameters.setProperty(CONNECT_GENERATED_TS_DIR_TOKEN,\n-                    buildInfo.getString(CONNECT_GENERATED_TS_DIR_TOKEN));\n-        }\n-\n-        setDevModePropertiesUsingTokenData(initParameters, buildInfo);\n-    }\n-\n-    private static void setDevModePropertiesUsingTokenData(\n-            Properties initParameters, JsonObject buildInfo) {\n-        // read dev mode properties from the token and set init parameter only\n-        // if it's not yet set\n-        if (initParameters\n-                .getProperty(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM) == null\n-                && buildInfo.hasKey(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)) {\n-            initParameters.setProperty(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM,\n-                    String.valueOf(buildInfo.getBoolean(\n-                            InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)));\n-        }\n-        if (initParameters\n-                .getProperty(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE) == null\n-                && buildInfo.hasKey(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE)) {\n-            initParameters.setProperty(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE,\n-                    String.valueOf(buildInfo.getBoolean(\n-                            InitParameters.REQUIRE_HOME_NODE_EXECUTABLE)));\n-        }\n-    }\n-\n-    private static String getTokenFileContents(Properties initParameters) {\n+    private static String getTokenFileContents(Class<?> systemPropertyBaseClass,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTg4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxMVrOIG4Tsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxMVrOIG4Tsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDkxNQ==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084915", "createdAt": "2020-12-16T07:56:11Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java", "diffHunk": "@@ -162,18 +150,24 @@ protected static Properties createInitParameters(\n                     vaadinConfig.getConfigParameter(name));\n         }\n \n-        readBuildInfo(initParameters);\n+        readBuildInfo(systemPropertyBaseClass, initParameters,\n+                vaadinConfig.getVaadinContext());\n         return initParameters;\n     }\n \n-    private static void readBuildInfo(Properties initParameters) {\n-        String json = getTokenFileContents(initParameters);\n+    private static void readBuildInfo(Class<?> systemPropertyBaseClass,\n+            Properties initParameters, VaadinContext context) {\n+        String json = getTokenFileContents(systemPropertyBaseClass,\n+                initParameters, context);\n \n         // Read the json and set the appropriate system properties if not\n         // already set.\n         if (json != null) {\n             JsonObject buildInfo = JsonUtil.parse(json);\n-            setInitParametersUsingTokenData(initParameters, buildInfo);\n+            // TODO : will be rewritten properly without extra instantiation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTkyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxMVrOIG4TuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxMVrOIG4TuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDkyMQ==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084921", "createdAt": "2020-12-16T07:56:11Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java", "diffHunk": "@@ -146,6 +133,7 @@ protected static Properties createInitParameters(\n         readUiFromEnclosingClass(systemPropertyBaseClass, initParameters);\n         readConfigurationAnnotation(systemPropertyBaseClass, initParameters);\n \n+        // TODO : will be removed in futher commits", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTk1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DevModeInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxMlrOIG4Tvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxMlrOIG4Tvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDkyNg==", "bodyText": "A \"NullPointerException\" could be thrown; \"lookup\" is nullable here.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084926", "createdAt": "2020-12-16T07:56:12Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DevModeInitializer.java", "diffHunk": "@@ -372,34 +381,39 @@ public static void initDevModeHandler(Set<Class<?>> classes,\n                 .withEmbeddableWebComponents(true).enablePnpm(enablePnpm)\n                 .withHomeNodeExecRequired(useHomeNodeExec).build();\n \n-        CompletableFuture<Void> runNodeTasks = CompletableFuture\n-                .runAsync(() -> {\n-                    try {\n-                        tasks.execute();\n-\n-                        FallbackChunk chunk = FrontendUtils\n-                                .readFallbackChunk(tokenFileData);\n-                        if (chunk != null) {\n-                            vaadinContext.setAttribute(chunk);\n-                        }\n-                    } catch (ExecutionFailedException exception) {\n-                        log().debug(\n-                                \"Could not initialize dev mode handler. One of the node tasks failed\",\n-                                exception);\n-                        throw new CompletionException(exception);\n-                    }\n-                });\n-\n-        DevModeHandler.start(config, builder.npmFolder, runNodeTasks);\n+        // Check whether executor is provided by the caller (framework)\n+        Executor service = lookup.lookup(Executor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMTk3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxM1rOIG4Twg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxM1rOIG4Twg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDkzMA==", "bodyText": "Immediately return this expression instead of assigning it to the temporary variable \"resourceProvider\".", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084930", "createdAt": "2020-12-16T07:56:13Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java", "diffHunk": "@@ -832,20 +827,52 @@ private String getClientEngineUrl(BootstrapContext context) {\n             final boolean productionMode = context.getSession()\n                     .getConfiguration().isProductionMode();\n \n-            boolean resolveNow = !productionMode || getClientEngine() == null;\n+            ResourceProvider resourceProvider = getResourceProvider(context);\n+            String clientEngine = getClientEngine(resourceProvider);\n+            boolean resolveNow = !productionMode || clientEngine == null;\n             if (resolveNow\n-                    && ClientResourcesUtils.getResource(\"/META-INF/resources/\"\n+                    && resourceProvider.getClientResource(\"/META-INF/resources/\"\n                             + CLIENT_ENGINE_NOCACHE_FILE) != null) {\n                 return context.getUriResolver().resolveVaadinUri(\n                         \"context://\" + CLIENT_ENGINE_NOCACHE_FILE);\n             }\n \n-            if (getClientEngine() == null) {\n+            if (clientEngine == null) {\n                 throw new BootstrapException(\n                         \"Client engine file name has not been resolved during initialization\");\n             }\n             return context.getUriResolver()\n-                    .resolveVaadinUri(\"context://\" + getClientEngine());\n+                    .resolveVaadinUri(\"context://\" + clientEngine);\n+        }\n+\n+        private ResourceProvider getResourceProvider(BootstrapContext context) {\n+            ResourceProvider resourceProvider = context.getSession()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMjAyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/di/Lookup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxNFrOIG4TyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxNFrOIG4TyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDkzNw==", "bodyText": "A \"Set\" cannot contain a \"Class\"", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084937", "createdAt": "2020-12-16T07:56:14Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/di/Lookup.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.di;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.server.VaadinContext;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.VaadinServlet;\n+\n+/**\n+ * Provides a way to discover services used by Flow (SPI).\n+ * <p>\n+ * A lookup instance may be created based on a service, see\n+ * {@link #of(Object, Class...)}. Several lookup instances may be combined via\n+ * {@link #compose(Lookup, Lookup)} method which allows to make a lookup\n+ * instance based on a number of services. The resulting lookup instance may be\n+ * used in internal Flow code to transfer data in the unified way which allows\n+ * to change the available data types during the code evolution without changing\n+ * the internal API (like arguments in methods and constructors).\n+ * <p>\n+ * There is the \"global\" application {@link Lookup} instance and the\n+ * {@link VaadinContext}. It has one to one mapping and is available even before\n+ * a {@link DeploymentConfiguration} (and {@link VaadinServlet}) is created. So\n+ * this is kind of a singleton for a Web Application. As a consequence it\n+ * provides and may return only web app singleton services. Dependency injection\n+ * frameworks can provide an implementation for the application {@code Lookup}\n+ * which manages instances according to the conventions of that framework.\n+ * <p>\n+ * The application {@code Lookup} is similar to the {@link Instantiator} class\n+ * but a {@link Lookup} instance is available even before a\n+ * {@link VaadinService} instance is created (and as a consequence there is no\n+ * yet an {@link Instantiator} instance).\n+ * <p>\n+ * This is the code which one may use to get the application {@link Lookup}\n+ * instance:\n+ * \n+ * <pre>\n+ * <code>\n+ *     VaadinContext context = ...;\n+ *     Lookup lookup = context.getAttribute(Lookup.class);\n+ * </code>\n+ * </pre>\n+ * <p>\n+ * This SPI is mostly for internal framework usage since {@link Instantiator}\n+ * provides all required services for the application developer.\n+ * \n+ * \n+ * @see Instantiator\n+ * @author Vaadin Ltd\n+ * @since\n+ */\n+public interface Lookup {\n+\n+    /**\n+     * Lookup for a service of the given type.\n+     * <p>\n+     * The {@code serviceClass} is usually an interface (though it doesn't have\n+     * to be) and the returned value is some implementation of this interface.\n+     * \n+     * @param <T>\n+     *            a service type\n+     * @param serviceClass\n+     *            a service SPI class\n+     * \n+     * @see Lookup#lookupAll(Class)\n+     * @return a service which implements the {@code serviceClass}, may be\n+     *         {@code null} if no services are registered for this SPI\n+     */\n+    <T> T lookup(Class<T> serviceClass);\n+\n+    /**\n+     * Lookup for all services by the provided {@code serviceClass}.\n+     * <p>\n+     * The {@code serviceClass} is usually an interface class (though it doesn't\n+     * have to be) and the returned value is all implementations of this\n+     * interface.\n+     *\n+     * @param <T>\n+     *            a service type\n+     * @param serviceClass\n+     *            a service SPI class\n+     * @return all services which implement the {@code serviceClass}, if no\n+     *         services found an empty list is returned (so {@code null} is not\n+     *         returned)\n+     */\n+    <T> Collection<T> lookupAll(Class<T> serviceClass);\n+\n+    /**\n+     * Creates a lookup which contains (only) the provided {@code service} as\n+     * instance of given {@code serviceTypes}.\n+     * <p>\n+     * This method may be used to create a temporary lookup which then can be\n+     * used to extend an existing lookup via {@link #compose(Lookup, Lookup)}.\n+     * \n+     * @param <T>\n+     *            the service type\n+     * @param service\n+     *            the service object\n+     * @param serviceTypes\n+     *            the supertypes of the service which may be used to access the\n+     *            service\n+     * @return a lookup initialized with the given {@code service}\n+     */\n+    @SafeVarargs\n+    static <T> Lookup of(T service, Class<? super T>... serviceTypes) {\n+        Objects.requireNonNull(service);\n+        Set<Class<? super T>> services = Stream.of(serviceTypes).peek(type -> {\n+            if (!type.isInstance(service)) {\n+                throw new IllegalArgumentException(\n+                        \"Service type\" + service.getClass().getName()\n+                                + \" is not a subtype of \" + type.getName());\n+            }\n+        }).collect(Collectors.toSet());\n+        return new Lookup() {\n+\n+            @Override\n+            public <U> Collection<U> lookupAll(Class<U> serviceClass) {\n+                U service = lookup(serviceClass);\n+                return service == null ? Collections.emptyList()\n+                        : Collections.singleton(service);\n+            }\n+\n+            @Override\n+            public <U> U lookup(Class<U> serviceClass) {\n+                if (services.contains(serviceClass)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMjA1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxNlrOIG4Tzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxNlrOIG4Tzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDk0Mg==", "bodyText": "Replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\".", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084942", "createdAt": "2020-12-16T07:56:16Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,18 +208,36 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n-            final long start = Long.parseLong(rangeMatcher.group(1));\n-            final long end = Long.parseLong(rangeMatcher.group(2));\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMjE0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxN1rOIG4T2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxN1rOIG4T2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDk1Mw==", "bodyText": "Invoke method(s) only conditionally.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084953", "createdAt": "2020-12-16T07:56:17Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,18 +208,36 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n-            final long start = Long.parseLong(rangeMatcher.group(1));\n-            final long end = Long.parseLong(rangeMatcher.group(2));\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {\n+            String startGroup = rangeMatcher.group(1);\n+            String endGroup = rangeMatcher.group(2);\n+            if (startGroup.isEmpty() && endGroup.isEmpty()) {\n+                response.setContentLengthLong(0L);\n+                response.setStatus(416); // Range Not Satisfiable\n+                getLogger().info(\"received a malformed range: '{}'\", rangeMatcher.group());\n+                return;\n+            }\n+            long start = startGroup.isEmpty() ? 0L : Long.parseLong(startGroup);\n+            long end = endGroup.isEmpty() ? Long.MAX_VALUE\n+                    : Long.parseLong(endGroup);\n             if (end < start\n                     || (resourceLength >= 0 && start >= resourceLength)) {\n                 // illegal range -> 416\n+                getLogger().info(\"received an illegal range '{}' for resource '{}'\",\n+                        rangeMatcher.group(), resourceURL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMjIxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxOFrOIG4T4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxOFrOIG4T4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDk2MQ==", "bodyText": "Invoke method(s) only conditionally.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084961", "createdAt": "2020-12-16T07:56:18Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,18 +208,36 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n-            final long start = Long.parseLong(rangeMatcher.group(1));\n-            final long end = Long.parseLong(rangeMatcher.group(2));\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {\n+            String startGroup = rangeMatcher.group(1);\n+            String endGroup = rangeMatcher.group(2);\n+            if (startGroup.isEmpty() && endGroup.isEmpty()) {\n+                response.setContentLengthLong(0L);\n+                response.setStatus(416); // Range Not Satisfiable\n+                getLogger().info(\"received a malformed range: '{}'\", rangeMatcher.group());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMjI2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxOVrOIG4T7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxOVrOIG4T7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDk3Mw==", "bodyText": "Make \"lookup\" transient or serializable.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084973", "createdAt": "2020-12-16T07:56:19Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java", "diffHunk": "@@ -125,51 +126,54 @@\n          */\n         private URI nodeDownloadRoot = URI.create(NodeInstaller.DEFAULT_NODEJS_DOWNLOAD_ROOT);\n \n+        private Lookup lookup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMjMzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMFrOIG4T9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMFrOIG4T9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDk4MA==", "bodyText": "Remove this use of \"DeprecatedPolymerPublishedEventHandler\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084980", "createdAt": "2020-12-16T07:56:20Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -280,50 +284,36 @@ private static Object decodeArg(Component instance, Method method,\n         // the model\n         assert argValue != null;\n         if (type.isPrimitive() && argValue.getType() == JsonType.NULL) {\n-            String msg = String\n-                    .format(\"Null values are not allowed for primitive types but \"\n-                                    + \"a 'null' value was received for parameter %d \"\n-                                    + \"which refers to primitive type '%s' \"\n-                                    + \"in the method '%s' defined in the class '%s'\",\n-                            index, type.getName(), method.getName(),\n-                            method.getDeclaringClass().getName());\n+            String msg = String.format(\n+                    \"Null values are not allowed for primitive types but \"\n+                            + \"a 'null' value was received for parameter %d \"\n+                            + \"which refers to primitive type '%s' \"\n+                            + \"in the method '%s' defined in the class '%s'\",\n+                    index, type.getName(), method.getName(),\n+                    method.getDeclaringClass().getName());\n             throw new IllegalArgumentException(msg);\n         } else if (type.isArray()) {\n             return decodeArray(method, type, index, argValue);\n         } else {\n             Class<?> convertedType = ReflectTools.convertPrimitiveType(type);\n \n-            try {\n-                final Class<?> polymerUtil = PublishedServerEventHandlerRpcHandler.class\n-                        .getClassLoader().loadClass(\n-                                \"com.vaadin.flow.component.polymertemplate.rpc.PublishedEventRpcHandlerUtil\");\n-                if ((Boolean) polymerUtil\n-                        .getMethod(\"isTemplateModelValue\", Component.class,\n-                                JsonValue.class, Class.class)\n-                        .invoke(polymerUtil, instance, argValue,\n-                                convertedType)) {\n-                    return polymerUtil\n-                            .getMethod(\"getTemplateItem\", Component.class,\n-                                    JsonObject.class, Type.class)\n-                            .invoke(polymerUtil, instance, argValue,\n-                                    method.getGenericParameterTypes()[index]);\n+            if (instance != null) {\n+                Optional<UI> ui = instance.getUI();\n+                if (!ui.isPresent()) {\n+                    throw new IllegalStateException(\n+                            \"Rpc handler may not be called for a detached component\");\n+                }\n+                VaadinContext context = ui.get().getSession().getService()\n+                        .getContext();\n+                DeprecatedPolymerPublishedEventHandler handler = context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMjM4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMVrOIG4T-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMVrOIG4T-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDk4Nw==", "bodyText": "Remove this use of \"DeprecatedPolymerPublishedEventHandler\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084987", "createdAt": "2020-12-16T07:56:21Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -280,50 +284,36 @@ private static Object decodeArg(Component instance, Method method,\n         // the model\n         assert argValue != null;\n         if (type.isPrimitive() && argValue.getType() == JsonType.NULL) {\n-            String msg = String\n-                    .format(\"Null values are not allowed for primitive types but \"\n-                                    + \"a 'null' value was received for parameter %d \"\n-                                    + \"which refers to primitive type '%s' \"\n-                                    + \"in the method '%s' defined in the class '%s'\",\n-                            index, type.getName(), method.getName(),\n-                            method.getDeclaringClass().getName());\n+            String msg = String.format(\n+                    \"Null values are not allowed for primitive types but \"\n+                            + \"a 'null' value was received for parameter %d \"\n+                            + \"which refers to primitive type '%s' \"\n+                            + \"in the method '%s' defined in the class '%s'\",\n+                    index, type.getName(), method.getName(),\n+                    method.getDeclaringClass().getName());\n             throw new IllegalArgumentException(msg);\n         } else if (type.isArray()) {\n             return decodeArray(method, type, index, argValue);\n         } else {\n             Class<?> convertedType = ReflectTools.convertPrimitiveType(type);\n \n-            try {\n-                final Class<?> polymerUtil = PublishedServerEventHandlerRpcHandler.class\n-                        .getClassLoader().loadClass(\n-                                \"com.vaadin.flow.component.polymertemplate.rpc.PublishedEventRpcHandlerUtil\");\n-                if ((Boolean) polymerUtil\n-                        .getMethod(\"isTemplateModelValue\", Component.class,\n-                                JsonValue.class, Class.class)\n-                        .invoke(polymerUtil, instance, argValue,\n-                                convertedType)) {\n-                    return polymerUtil\n-                            .getMethod(\"getTemplateItem\", Component.class,\n-                                    JsonObject.class, Type.class)\n-                            .invoke(polymerUtil, instance, argValue,\n-                                    method.getGenericParameterTypes()[index]);\n+            if (instance != null) {\n+                Optional<UI> ui = instance.getUI();\n+                if (!ui.isPresent()) {\n+                    throw new IllegalStateException(\n+                            \"Rpc handler may not be called for a detached component\");\n+                }\n+                VaadinContext context = ui.get().getSession().getService()\n+                        .getContext();\n+                DeprecatedPolymerPublishedEventHandler handler = context\n+                        .getAttribute(Lookup.class)\n+                        .lookup(DeprecatedPolymerPublishedEventHandler.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMjQxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMlrOIG4T_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMlrOIG4T_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDk5MQ==", "bodyText": "A \"NullPointerException\" could be thrown; \"instance\" is nullable here.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084991", "createdAt": "2020-12-16T07:56:22Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -180,14 +182,16 @@ private static void invokeMethod(Component instance, Method method,\n                 Serializable returnValue = (Serializable) invokeMethod(instance,\n                         method, args);\n \n-                instance.getElement().executeJs(\"this.$server['\"\n+                instance.getElement()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMjUwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMlrOIG4UCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMlrOIG4UCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NTAwMw==", "bodyText": "Remove this use of \"PolymerServerEventHandlers\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544085003", "createdAt": "2020-12-16T07:56:22Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -107,13 +110,12 @@ public String getRpcType() {\n             PolymerServerEventHandlers eventHandlers = node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMjU3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyM1rOIG4UEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyM1rOIG4UEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NTAxMQ==", "bodyText": "A \"NullPointerException\" could be thrown; \"instance\" is nullable here.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544085011", "createdAt": "2020-12-16T07:56:23Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -180,14 +182,16 @@ private static void invokeMethod(Component instance, Method method,\n                 Serializable returnValue = (Serializable) invokeMethod(instance,\n                         method, args);\n \n-                instance.getElement().executeJs(\"this.$server['\"\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n                                 + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n-                                + \"']($0, true, $1)\", Integer.valueOf(promiseId),\n-                        returnValue);\n+                                + \"']($0, true, $1)\",\n+                                Integer.valueOf(promiseId), returnValue);\n             } catch (RuntimeException e) {\n-                instance.getElement().executeJs(\"this.$server['\"\n-                        + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n-                        + \"']($0, false)\", Integer.valueOf(promiseId));\n+                instance.getElement()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODkzMjY0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyNFrOIG4UHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyNFrOIG4UHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NTAyMw==", "bodyText": "Remove this use of \"PolymerServerEventHandlers\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544085023", "createdAt": "2020-12-16T07:56:24Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -107,13 +110,12 @@ public String getRpcType() {\n             PolymerServerEventHandlers eventHandlers = node\n                     .getFeature(PolymerServerEventHandlers.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3757, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}