{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMTY1MjUy", "number": 9438, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDozNDowMlrOE8KAKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDoyMjoxNlrOE9p8ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTEzODk5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/HandlerHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDozNDowMlrOH4HirQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDozNDowMlrOH4HirQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwNTg2OQ==", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "url": "https://github.com/vaadin/flow/pull/9438#discussion_r528605869", "createdAt": "2020-11-23T10:34:02Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/HandlerHelper.java", "diffHunk": "@@ -171,4 +184,26 @@ public static String getCancelingRelativePath(String pathToCancel) {\n         return sb.toString();\n     }\n \n+    /**\n+     * Checks if the given URL path contains the directory change instruction\n+     * (dot-dot), taking into account possible double encoding in hexadecimal\n+     * format, which can be injected maliciously.\n+     *\n+     * @param path\n+     *            the URL path to be verified.\n+     * @return {@code true}, if the given path has a directory change\n+     *         instruction, {@code false} otherwise.\n+     */\n+    public static boolean isPathUnsafe(String path) {\n+        // Check that the path does not have '/../', '\\..\\', %5C..%5C,\n+        // %2F..%2F, nor '/..', '\\..', %5C.., %2F..\n+        try {\n+            path = URLDecoder.decode(path, StandardCharsets.UTF_8.name());\n+        } catch (UnsupportedEncodingException e) {\n+            throw new RuntimeException(\"An error occurred during decoding URL.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16c6f3a9151d5cfd25e74660f8887c51d3e06168"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjUxMzc5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1OTo1MVrOH50q5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1OTo1MVrOH50q5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5MzgzMQ==", "bodyText": "Replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\".", "url": "https://github.com/vaadin/flow/pull/9438#discussion_r530393831", "createdAt": "2020-11-25T13:59:51Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -226,18 +238,36 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n-            final long start = Long.parseLong(rangeMatcher.group(1));\n-            final long end = Long.parseLong(rangeMatcher.group(2));\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c88882aee79a716c361e36ce11d1dae1807fc1"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjUxMzkzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1OTo1MlrOH50q9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1OTo1MlrOH50q9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5Mzg0Nw==", "bodyText": "Invoke method(s) only conditionally.", "url": "https://github.com/vaadin/flow/pull/9438#discussion_r530393847", "createdAt": "2020-11-25T13:59:52Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -226,18 +238,36 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n-            final long start = Long.parseLong(rangeMatcher.group(1));\n-            final long end = Long.parseLong(rangeMatcher.group(2));\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {\n+            String startGroup = rangeMatcher.group(1);\n+            String endGroup = rangeMatcher.group(2);\n+            if (startGroup.isEmpty() && endGroup.isEmpty()) {\n+                response.setContentLengthLong(0L);\n+                response.setStatus(416); // Range Not Satisfiable\n+                getLogger().info(\"received a malformed range: '{}'\", rangeMatcher.group());\n+                return;\n+            }\n+            long start = startGroup.isEmpty() ? 0L : Long.parseLong(startGroup);\n+            long end = endGroup.isEmpty() ? Long.MAX_VALUE\n+                    : Long.parseLong(endGroup);\n             if (end < start\n                     || (resourceLength >= 0 && start >= resourceLength)) {\n                 // illegal range -> 416\n+                getLogger().info(\"received an illegal range '{}' for resource '{}'\",\n+                        rangeMatcher.group(), resourceURL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c88882aee79a716c361e36ce11d1dae1807fc1"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjUxNDAwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1OTo1M1rOH50rAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1OTo1M1rOH50rAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5Mzg1Nw==", "bodyText": "Invoke method(s) only conditionally.", "url": "https://github.com/vaadin/flow/pull/9438#discussion_r530393857", "createdAt": "2020-11-25T13:59:53Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -226,18 +238,36 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n-            final long start = Long.parseLong(rangeMatcher.group(1));\n-            final long end = Long.parseLong(rangeMatcher.group(2));\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {\n+            String startGroup = rangeMatcher.group(1);\n+            String endGroup = rangeMatcher.group(2);\n+            if (startGroup.isEmpty() && endGroup.isEmpty()) {\n+                response.setContentLengthLong(0L);\n+                response.setStatus(416); // Range Not Satisfiable\n+                getLogger().info(\"received a malformed range: '{}'\", rangeMatcher.group());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c88882aee79a716c361e36ce11d1dae1807fc1"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDg1ODU0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/WebBrowser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDoyMjoxNlrOH6daNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDoyMjoxNlrOH6daNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2MTMwMA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9438#discussion_r531061300", "createdAt": "2020-11-26T14:22:16Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/WebBrowser.java", "diffHunk": "@@ -323,7 +349,12 @@ public boolean isChromeOS() {\n      *\n      * @param request\n      *            the Vaadin request to read the information from\n+     *\n+     * @deprecated Use {@link #WebBrowser(VaadinRequest)} constructor instead\n+     *             and create a new instance of WebBrowser to apply the changes\n+     *             from given {@link VaadinRequest}.\n      */\n+    @Deprecated\n     public void updateRequestDetails(VaadinRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e74bd72d87a1819560b9b703d642a7f0902116c"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2797, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}