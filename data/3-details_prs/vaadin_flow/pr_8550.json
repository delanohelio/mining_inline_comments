{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTI5MTIz", "number": 8550, "title": "Protect add- methods in ListDataView from adding the duplicated items #8538", "bodyText": "Fixes #8538", "createdAt": "2020-06-11T14:45:22Z", "url": "https://github.com/vaadin/flow/pull/8550", "merged": true, "mergeCommit": {"oid": "64cbb52a4c4722df1aacbda8dc786afda9ba1797"}, "closed": true, "closedAt": "2020-06-16T11:00:44Z", "author": {"login": "mshabarov"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqQc_hgFqTQyOTA2MjEzMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrw2FygFqTQzMTI2ODI0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDYyMTMx", "url": "https://github.com/vaadin/flow/pull/8550#pullrequestreview-429062131", "createdAt": "2020-06-11T16:01:02Z", "commit": {"oid": "782383f656982449eeffa97b56c00b982af30326"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjowMTowMlrOGikSlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjowMTowMlrOGikSlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5OTM1MA==", "bodyText": "What do you think about public contains(T item) calls a private boolean contains(ListDataProvider<T> dataProvider, T item) instead of creating the dataProvider itself? This could increase the performance especially if you call containsinside a loop like in addItems, addItemsAfter or addItemsBefore.", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r438899350", "createdAt": "2020-06-11T16:01:02Z", "author": {"login": "knoobie"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -153,8 +154,10 @@ public boolean contains(T item) {\n     @Override\n     public AbstractListDataView<T> addItem(T item) {\n         final ListDataProvider<T> dataProvider = getDataProvider();\n-        dataProvider.getItems().add(item);\n-        dataProvider.refreshAll();\n+        if (!contains(item)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782383f656982449eeffa97b56c00b982af30326"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjQ2ODc2", "url": "https://github.com/vaadin/flow/pull/8550#pullrequestreview-429646876", "createdAt": "2020-06-12T10:52:57Z", "commit": {"oid": "ad3a15513c08337e7b1aa23b0f63b898600b224c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo1Mjo1N1rOGi_uUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo1NzoyMlrOGi_2ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0ODgxOQ==", "bodyText": "Shouldn't the item be moved to the new position and not left as is?", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r439348819", "createdAt": "2020-06-12T10:52:57Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -196,96 +196,146 @@ public boolean contains(T item) {\n     @Override\n     public AbstractListDataView<T> addItems(Collection<T> items) {\n         final ListDataProvider<T> dataProvider = getDataProvider();\n-        dataProvider.getItems().addAll(items);\n-        dataProvider.refreshAll();\n+        Collection<T> backendItems = dataProvider.getItems();\n+        if (items != null && !items.isEmpty()) {\n+            items.stream()\n+                    .filter(item ->\n+                            !contains(item, dataProvider))\n+                    .forEach(backendItems::add);\n+            dataProvider.refreshAll();\n+        }\n         return this;\n     }\n \n     @Override\n     public AbstractListDataView<T> addItemAfter(T item, T after) {\n-        final Collection<T> items = getDataProvider().getItems();\n-        if (!items.contains(after)) {\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+        final Collection<T> backendItems = dataProvider.getItems();\n+        final int afterItemIndex = getItemIndex(after);\n+        if (afterItemIndex == -1) {\n             throw new IllegalArgumentException(\n                     \"Item to insert after is not available in the data\");\n         }\n-        if (items instanceof List) {\n-            final List<T> itemList = (List<T>) items;\n-            itemList.add(itemList.indexOf(after) + 1, item);\n-            getDataProvider().refreshAll();\n+\n+        // Do nothing if the backend collection already contains such an item\n+        if (contains(item, dataProvider)) {\n+            return this;\n+        }\n+\n+        if (backendItems instanceof List) {\n+            final List<T> itemList = (List<T>) backendItems;\n+            itemList.add(afterItemIndex + 1, item);\n+            dataProvider.refreshAll();\n             return this;\n         }\n         throw new IllegalArgumentException(\n                 String.format(COLLECTION_TYPE_ERROR_MESSAGE_PATTERN,\n-                        items.getClass().getSimpleName()));\n+                        backendItems.getClass().getSimpleName()));\n     }\n \n     @Override\n     public AbstractListDataView<T> addItemsAfter(Collection<T> items, T after) {\n-        final Collection<T> backendItems = getDataProvider().getItems();\n-        if (!backendItems.contains(after)) {\n+        if (items == null || items.isEmpty()) {\n+            return this;\n+        }\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+        final Collection<T> backendItems = dataProvider.getItems();\n+        final int afterItemIndex = getItemIndex(after);\n+        if (afterItemIndex == -1) {\n             throw new IllegalArgumentException(\n                     \"Item to insert after is not available in the data\");\n         }\n         if (backendItems instanceof List) {\n             final List<T> itemList = (List<T>) backendItems;\n-            itemList.addAll(itemList.indexOf(after) + 1, items);\n-            getDataProvider().refreshAll();\n+            final List<T> itemsToAdd = items.stream()\n+                    .filter(item ->\n+                            !contains(item, dataProvider))\n+                    .collect(Collectors.toList());\n+            itemList.addAll(afterItemIndex + 1, itemsToAdd);\n+            dataProvider.refreshAll();\n             return this;\n         }\n         throw new IllegalArgumentException(\n                 String.format(COLLECTION_TYPE_ERROR_MESSAGE_PATTERN,\n-                        items.getClass().getSimpleName()));\n+                        backendItems.getClass().getSimpleName()));\n     }\n \n     @Override\n     public AbstractListDataView<T> addItemBefore(T item, T before) {\n-        final Collection<T> items = getDataProvider().getItems();\n-        if (!items.contains(before)) {\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+        final Collection<T> backendItems = dataProvider.getItems();\n+        final int beforeItemIndex = getItemIndex(before);\n+        if (beforeItemIndex == -1) {\n             throw new IllegalArgumentException(\n                     \"Item to insert before is not available in the data\");\n         }\n-        if (items instanceof List) {\n-            final List<T> itemList = (List<T>) items;\n-            itemList.add(itemList.indexOf(before), item);\n-            getDataProvider().refreshAll();\n+\n+        // Do nothing if the backend collection already contains such an item", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad3a15513c08337e7b1aa23b0f63b898600b224c"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0ODk0MA==", "bodyText": "Shouldn't the item be moved to the new position and not left as is?", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r439348940", "createdAt": "2020-06-12T10:53:13Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -196,96 +196,146 @@ public boolean contains(T item) {\n     @Override\n     public AbstractListDataView<T> addItems(Collection<T> items) {\n         final ListDataProvider<T> dataProvider = getDataProvider();\n-        dataProvider.getItems().addAll(items);\n-        dataProvider.refreshAll();\n+        Collection<T> backendItems = dataProvider.getItems();\n+        if (items != null && !items.isEmpty()) {\n+            items.stream()\n+                    .filter(item ->\n+                            !contains(item, dataProvider))\n+                    .forEach(backendItems::add);\n+            dataProvider.refreshAll();\n+        }\n         return this;\n     }\n \n     @Override\n     public AbstractListDataView<T> addItemAfter(T item, T after) {\n-        final Collection<T> items = getDataProvider().getItems();\n-        if (!items.contains(after)) {\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+        final Collection<T> backendItems = dataProvider.getItems();\n+        final int afterItemIndex = getItemIndex(after);\n+        if (afterItemIndex == -1) {\n             throw new IllegalArgumentException(\n                     \"Item to insert after is not available in the data\");\n         }\n-        if (items instanceof List) {\n-            final List<T> itemList = (List<T>) items;\n-            itemList.add(itemList.indexOf(after) + 1, item);\n-            getDataProvider().refreshAll();\n+\n+        // Do nothing if the backend collection already contains such an item", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad3a15513c08337e7b1aa23b0f63b898600b224c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0OTIzOQ==", "bodyText": "Shouldn't the collection be added as given and the existing items be \"moved\" to the new positions?", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r439349239", "createdAt": "2020-06-12T10:53:53Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -196,96 +196,146 @@ public boolean contains(T item) {\n     @Override\n     public AbstractListDataView<T> addItems(Collection<T> items) {\n         final ListDataProvider<T> dataProvider = getDataProvider();\n-        dataProvider.getItems().addAll(items);\n-        dataProvider.refreshAll();\n+        Collection<T> backendItems = dataProvider.getItems();\n+        if (items != null && !items.isEmpty()) {\n+            items.stream()\n+                    .filter(item ->\n+                            !contains(item, dataProvider))\n+                    .forEach(backendItems::add);\n+            dataProvider.refreshAll();\n+        }\n         return this;\n     }\n \n     @Override\n     public AbstractListDataView<T> addItemAfter(T item, T after) {\n-        final Collection<T> items = getDataProvider().getItems();\n-        if (!items.contains(after)) {\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+        final Collection<T> backendItems = dataProvider.getItems();\n+        final int afterItemIndex = getItemIndex(after);\n+        if (afterItemIndex == -1) {\n             throw new IllegalArgumentException(\n                     \"Item to insert after is not available in the data\");\n         }\n-        if (items instanceof List) {\n-            final List<T> itemList = (List<T>) items;\n-            itemList.add(itemList.indexOf(after) + 1, item);\n-            getDataProvider().refreshAll();\n+\n+        // Do nothing if the backend collection already contains such an item\n+        if (contains(item, dataProvider)) {\n+            return this;\n+        }\n+\n+        if (backendItems instanceof List) {\n+            final List<T> itemList = (List<T>) backendItems;\n+            itemList.add(afterItemIndex + 1, item);\n+            dataProvider.refreshAll();\n             return this;\n         }\n         throw new IllegalArgumentException(\n                 String.format(COLLECTION_TYPE_ERROR_MESSAGE_PATTERN,\n-                        items.getClass().getSimpleName()));\n+                        backendItems.getClass().getSimpleName()));\n     }\n \n     @Override\n     public AbstractListDataView<T> addItemsAfter(Collection<T> items, T after) {\n-        final Collection<T> backendItems = getDataProvider().getItems();\n-        if (!backendItems.contains(after)) {\n+        if (items == null || items.isEmpty()) {\n+            return this;\n+        }\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+        final Collection<T> backendItems = dataProvider.getItems();\n+        final int afterItemIndex = getItemIndex(after);\n+        if (afterItemIndex == -1) {\n             throw new IllegalArgumentException(\n                     \"Item to insert after is not available in the data\");\n         }\n         if (backendItems instanceof List) {\n             final List<T> itemList = (List<T>) backendItems;\n-            itemList.addAll(itemList.indexOf(after) + 1, items);\n-            getDataProvider().refreshAll();\n+            final List<T> itemsToAdd = items.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad3a15513c08337e7b1aa23b0f63b898600b224c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0OTMxMw==", "bodyText": "Shouldn't the collection be added as given and the existing items be \"moved\" to the new positions?", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r439349313", "createdAt": "2020-06-12T10:54:02Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -196,96 +196,146 @@ public boolean contains(T item) {\n     @Override\n     public AbstractListDataView<T> addItems(Collection<T> items) {\n         final ListDataProvider<T> dataProvider = getDataProvider();\n-        dataProvider.getItems().addAll(items);\n-        dataProvider.refreshAll();\n+        Collection<T> backendItems = dataProvider.getItems();\n+        if (items != null && !items.isEmpty()) {\n+            items.stream()\n+                    .filter(item ->\n+                            !contains(item, dataProvider))\n+                    .forEach(backendItems::add);\n+            dataProvider.refreshAll();\n+        }\n         return this;\n     }\n \n     @Override\n     public AbstractListDataView<T> addItemAfter(T item, T after) {\n-        final Collection<T> items = getDataProvider().getItems();\n-        if (!items.contains(after)) {\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+        final Collection<T> backendItems = dataProvider.getItems();\n+        final int afterItemIndex = getItemIndex(after);\n+        if (afterItemIndex == -1) {\n             throw new IllegalArgumentException(\n                     \"Item to insert after is not available in the data\");\n         }\n-        if (items instanceof List) {\n-            final List<T> itemList = (List<T>) items;\n-            itemList.add(itemList.indexOf(after) + 1, item);\n-            getDataProvider().refreshAll();\n+\n+        // Do nothing if the backend collection already contains such an item\n+        if (contains(item, dataProvider)) {\n+            return this;\n+        }\n+\n+        if (backendItems instanceof List) {\n+            final List<T> itemList = (List<T>) backendItems;\n+            itemList.add(afterItemIndex + 1, item);\n+            dataProvider.refreshAll();\n             return this;\n         }\n         throw new IllegalArgumentException(\n                 String.format(COLLECTION_TYPE_ERROR_MESSAGE_PATTERN,\n-                        items.getClass().getSimpleName()));\n+                        backendItems.getClass().getSimpleName()));\n     }\n \n     @Override\n     public AbstractListDataView<T> addItemsAfter(Collection<T> items, T after) {\n-        final Collection<T> backendItems = getDataProvider().getItems();\n-        if (!backendItems.contains(after)) {\n+        if (items == null || items.isEmpty()) {\n+            return this;\n+        }\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+        final Collection<T> backendItems = dataProvider.getItems();\n+        final int afterItemIndex = getItemIndex(after);\n+        if (afterItemIndex == -1) {\n             throw new IllegalArgumentException(\n                     \"Item to insert after is not available in the data\");\n         }\n         if (backendItems instanceof List) {\n             final List<T> itemList = (List<T>) backendItems;\n-            itemList.addAll(itemList.indexOf(after) + 1, items);\n-            getDataProvider().refreshAll();\n+            final List<T> itemsToAdd = items.stream()\n+                    .filter(item ->\n+                            !contains(item, dataProvider))\n+                    .collect(Collectors.toList());\n+            itemList.addAll(afterItemIndex + 1, itemsToAdd);\n+            dataProvider.refreshAll();\n             return this;\n         }\n         throw new IllegalArgumentException(\n                 String.format(COLLECTION_TYPE_ERROR_MESSAGE_PATTERN,\n-                        items.getClass().getSimpleName()));\n+                        backendItems.getClass().getSimpleName()));\n     }\n \n     @Override\n     public AbstractListDataView<T> addItemBefore(T item, T before) {\n-        final Collection<T> items = getDataProvider().getItems();\n-        if (!items.contains(before)) {\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+        final Collection<T> backendItems = dataProvider.getItems();\n+        final int beforeItemIndex = getItemIndex(before);\n+        if (beforeItemIndex == -1) {\n             throw new IllegalArgumentException(\n                     \"Item to insert before is not available in the data\");\n         }\n-        if (items instanceof List) {\n-            final List<T> itemList = (List<T>) items;\n-            itemList.add(itemList.indexOf(before), item);\n-            getDataProvider().refreshAll();\n+\n+        // Do nothing if the backend collection already contains such an item\n+        if (contains(item, dataProvider)) {\n+            return this;\n+        }\n+\n+        if (backendItems instanceof List) {\n+            final List<T> itemList = (List<T>) backendItems;\n+            itemList.add(beforeItemIndex, item);\n+            dataProvider.refreshAll();\n             return this;\n         }\n         throw new IllegalArgumentException(\n                 String.format(COLLECTION_TYPE_ERROR_MESSAGE_PATTERN,\n-                        items.getClass().getSimpleName()));\n+                        backendItems.getClass().getSimpleName()));\n     }\n \n     @Override\n     public AbstractListDataView<T> addItemsBefore(Collection<T> items,\n             T before) {\n-        final Collection<T> backendItems = getDataProvider().getItems();\n-        if (!backendItems.contains(before)) {\n+        if (items == null || items.isEmpty()) {\n+            return this;\n+        }\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+        final Collection<T> backendItems = dataProvider.getItems();\n+        final int beforeItemIndex = getItemIndex(before);\n+        if (beforeItemIndex == -1) {\n             throw new IllegalArgumentException(\n                     \"Item to insert before is not available in the data\");\n         }\n         if (backendItems instanceof List) {\n             final List<T> itemList = (List<T>) backendItems;\n-            itemList.addAll(itemList.indexOf(before), items);\n-            getDataProvider().refreshAll();\n+            final List<T> itemsToAdd = items.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad3a15513c08337e7b1aa23b0f63b898600b224c"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0OTk0NQ==", "bodyText": "Item should be moved to the new position if it already exists. Same for a ll the other before and after methods.", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r439349945", "createdAt": "2020-06-12T10:55:20Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -79,7 +79,8 @@\n     V addItem(T item);\n \n     /**\n-     * Adds an item after the given target item.\n+     * Adds an item after the given target item if it is not already", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad3a15513c08337e7b1aa23b0f63b898600b224c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM1MDk0Mg==", "bodyText": "This should also probably relocate any old items to the order given in the collection. e.g. collect existing, removeAll(existing), addAll(items)", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r439350942", "createdAt": "2020-06-12T10:57:22Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -196,96 +196,146 @@ public boolean contains(T item) {\n     @Override\n     public AbstractListDataView<T> addItems(Collection<T> items) {\n         final ListDataProvider<T> dataProvider = getDataProvider();\n-        dataProvider.getItems().addAll(items);\n-        dataProvider.refreshAll();\n+        Collection<T> backendItems = dataProvider.getItems();\n+        if (items != null && !items.isEmpty()) {\n+            items.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad3a15513c08337e7b1aa23b0f63b898600b224c"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6139f974b318b886cd24c062eff20323e69311b1", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/6139f974b318b886cd24c062eff20323e69311b1", "committedDate": "2020-06-15T08:41:20Z", "message": "Protect add- methods in ListDataView from adding the duplicated items #8538"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d048c8b4ff58e0b3a5c0cb892c9f6ca3f6b87e3", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/0d048c8b4ff58e0b3a5c0cb892c9f6ca3f6b87e3", "committedDate": "2020-06-15T08:41:20Z", "message": "Invoke data provider getter once, update the javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25695a2c9a1e104663e305751e3ca8a7062254ce", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/25695a2c9a1e104663e305751e3ca8a7062254ce", "committedDate": "2020-06-15T08:41:20Z", "message": "Rearrange backend collection items in add- methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdb0360695cc8636752914b92ebfd6f5b1d1380e", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/bdb0360695cc8636752914b92ebfd6f5b1d1380e", "committedDate": "2020-06-15T08:41:20Z", "message": "Update javadoc to emphasize the reordering on items"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "129af183d4d5f6539efb726515ee8f17f53941b6", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/129af183d4d5f6539efb726515ee8f17f53941b6", "committedDate": "2020-06-15T05:27:18Z", "message": "Update javadoc to emphasize the reordering on items"}, "afterCommit": {"oid": "bdb0360695cc8636752914b92ebfd6f5b1d1380e", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/bdb0360695cc8636752914b92ebfd6f5b1d1380e", "committedDate": "2020-06-15T08:41:20Z", "message": "Update javadoc to emphasize the reordering on items"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNDYzNzI2", "url": "https://github.com/vaadin/flow/pull/8550#pullrequestreview-430463726", "createdAt": "2020-06-15T09:17:09Z", "commit": {"oid": "bdb0360695cc8636752914b92ebfd6f5b1d1380e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxNzowOVrOGjp6zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxOTo0MlrOGjqApQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0MDE0MA==", "bodyText": "Why is the getItemIndex(T) method still kept even adding this one ???\nWhy not just force all places to call this new one or the existing one and merge the implementation to the same method ?", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440040140", "createdAt": "2020-06-15T09:17:09Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -332,9 +302,13 @@ private int getItemIndex(\n         return index.get();\n     }\n \n+    private int getItemIndex(T item, ListDataProvider<T> dataProvider) {\n+        return getItemIndex(item, dataProvider::getId);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb0360695cc8636752914b92ebfd6f5b1d1380e"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0MDk3Nw==", "bodyText": "Also this method seems just totally unnecessary by itself, or otherwise there is something happening here that is not visible in the code.\nShould be merge to the above method.", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440040977", "createdAt": "2020-06-15T09:18:30Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -350,4 +324,113 @@ private Object getIdentifier(T item,\n     private Object getIdentifier(T item, ListDataProvider<T> dataProvider) {\n         return getIdentifier(item, dataProvider::getId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb0360695cc8636752914b92ebfd6f5b1d1380e"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0MTYzNw==", "bodyText": "Again I get the feeling that this method is just adding more methods which add no value but just have one line.\nI think the code should be refactored to include the logic properly in the correct method instead of split around many methods small methods which makes is harder to follow the code flow", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440041637", "createdAt": "2020-06-15T09:19:42Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -350,4 +324,113 @@ private Object getIdentifier(T item,\n     private Object getIdentifier(T item, ListDataProvider<T> dataProvider) {\n         return getIdentifier(item, dataProvider::getId);\n     }\n+\n+    private boolean contains(T item, ListDataProvider<T> dataProvider) {\n+        return contains(item, dataProvider, getItems());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb0360695cc8636752914b92ebfd6f5b1d1380e"}, "originalPosition": 189}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00f8688b640c44428a8fddb97a48288b0c8c6998", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/00f8688b640c44428a8fddb97a48288b0c8c6998", "committedDate": "2020-06-15T10:45:11Z", "message": "Delete extra overloaded methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNTQyOTQ2", "url": "https://github.com/vaadin/flow/pull/8550#pullrequestreview-430542946", "createdAt": "2020-06-15T11:10:05Z", "commit": {"oid": "00f8688b640c44428a8fddb97a48288b0c8c6998"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/55e30875759a03eea00850e3f24b9cbfe0f4b592", "committedDate": "2020-06-15T12:40:05Z", "message": "Delete unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNjE5MjYw", "url": "https://github.com/vaadin/flow/pull/8550#pullrequestreview-430619260", "createdAt": "2020-06-15T13:00:42Z", "commit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzowMDo0MlrOGjxG6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzo0NzowOFrOGjy6QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1NzkzMQ==", "bodyText": "The way the data provider is still passed to all methods makes me wonder that \"will these methods ever be called with another data provider than the one that would anyway be provided with getDataProvider()\" ...\nBut if you feel that it really makes a difference to not have to call it again in the methods since the calling method needs it, then I guess it can stay like this.", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440157931", "createdAt": "2020-06-15T13:00:42Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -347,7 +311,107 @@ private Object getIdentifier(T item,\n         return itemIdentifier;\n     }\n \n-    private Object getIdentifier(T item, ListDataProvider<T> dataProvider) {\n-        return getIdentifier(item, dataProvider::getId);\n+    private boolean contains(T item, ListDataProvider<T> dataProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2MTQwNA==", "bodyText": "Why is this method returning anything, or in this case the data view ???", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440161404", "createdAt": "2020-06-15T13:06:35Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -347,7 +311,107 @@ private Object getIdentifier(T item,\n         return itemIdentifier;\n     }\n \n-    private Object getIdentifier(T item, ListDataProvider<T> dataProvider) {\n-        return getIdentifier(item, dataProvider::getId);\n+    private boolean contains(T item, ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        return getItems().anyMatch(i -> itemIdentifier.equals(\n+                getIdentifier(i, dataProvider::getId)));\n+    }\n+\n+    private void removeItemIfPresent(T item,\n+                                     ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        dataProvider.getItems().removeIf(i -> itemIdentifier.equals(\n+                getIdentifier(i, dataProvider::getId)));\n+    }\n+\n+    private void removeItemIfPresent(T item, ListDataProvider<T> dataProvider,\n+                                     List<T> from) {\n+        final int itemIndex = getItemIndex(item, dataProvider::getId);\n+        if (itemIndex != -1) {\n+            from.remove(itemIndex);\n+        }\n+    }\n+\n+    private boolean equals(T item, T compareTo,\n+                           ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        return itemIdentifier.equals(\n+                getIdentifier(compareTo, dataProvider::getId));\n+    }\n+\n+    private AbstractListDataView<T> doAddItemOnTarget(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2MjAwNw==", "bodyText": "String noTargetErrMessage\nI can't make out from this name what is the message used for", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440162007", "createdAt": "2020-06-15T13:07:37Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -347,7 +311,107 @@ private Object getIdentifier(T item,\n         return itemIdentifier;\n     }\n \n-    private Object getIdentifier(T item, ListDataProvider<T> dataProvider) {\n-        return getIdentifier(item, dataProvider::getId);\n+    private boolean contains(T item, ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        return getItems().anyMatch(i -> itemIdentifier.equals(\n+                getIdentifier(i, dataProvider::getId)));\n+    }\n+\n+    private void removeItemIfPresent(T item,\n+                                     ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        dataProvider.getItems().removeIf(i -> itemIdentifier.equals(\n+                getIdentifier(i, dataProvider::getId)));\n+    }\n+\n+    private void removeItemIfPresent(T item, ListDataProvider<T> dataProvider,\n+                                     List<T> from) {\n+        final int itemIndex = getItemIndex(item, dataProvider::getId);\n+        if (itemIndex != -1) {\n+            from.remove(itemIndex);\n+        }\n+    }\n+\n+    private boolean equals(T item, T compareTo,\n+                           ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        return itemIdentifier.equals(\n+                getIdentifier(compareTo, dataProvider::getId));\n+    }\n+\n+    private AbstractListDataView<T> doAddItemOnTarget(\n+            T item, T target, String noTargetErrMessage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2OTM0OQ==", "bodyText": "Shouldn't null be checked separately and thrown directly since it is likely an error by the developer and we should \"help\" them realize it instead of silently not doing anything ?", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440169349", "createdAt": "2020-06-15T13:19:37Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -347,7 +311,107 @@ private Object getIdentifier(T item,\n         return itemIdentifier;\n     }\n \n-    private Object getIdentifier(T item, ListDataProvider<T> dataProvider) {\n-        return getIdentifier(item, dataProvider::getId);\n+    private boolean contains(T item, ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        return getItems().anyMatch(i -> itemIdentifier.equals(\n+                getIdentifier(i, dataProvider::getId)));\n+    }\n+\n+    private void removeItemIfPresent(T item,\n+                                     ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        dataProvider.getItems().removeIf(i -> itemIdentifier.equals(\n+                getIdentifier(i, dataProvider::getId)));\n+    }\n+\n+    private void removeItemIfPresent(T item, ListDataProvider<T> dataProvider,\n+                                     List<T> from) {\n+        final int itemIndex = getItemIndex(item, dataProvider::getId);\n+        if (itemIndex != -1) {\n+            from.remove(itemIndex);\n+        }\n+    }\n+\n+    private boolean equals(T item, T compareTo,\n+                           ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        return itemIdentifier.equals(\n+                getIdentifier(compareTo, dataProvider::getId));\n+    }\n+\n+    private AbstractListDataView<T> doAddItemOnTarget(\n+            T item, T target, String noTargetErrMessage,\n+            SerializableFunction<Integer, Integer> insertItemsIndexProvider) {\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+\n+        if (equals(item, target, dataProvider)) {\n+            return this;\n+        }\n+\n+        final int targetItemIndex = getItemIndex(target, dataProvider::getId);\n+        if (targetItemIndex == -1) {\n+            throw new IllegalArgumentException(noTargetErrMessage);\n+        }\n+        final Collection<T> backendItems = dataProvider.getItems();\n+        if (backendItems instanceof List) {\n+            final List<T> itemList = (List<T>) backendItems;\n+            removeItemIfPresent(item, dataProvider, itemList);\n+            itemList.add(insertItemsIndexProvider.apply(targetItemIndex), item);\n+            dataProvider.refreshAll();\n+            return this;\n+        }\n+        throw new IllegalArgumentException(\n+                String.format(COLLECTION_TYPE_ERROR_MESSAGE_PATTERN,\n+                        backendItems.getClass().getSimpleName()));\n+    }\n+\n+    private AbstractListDataView<T> doAddItemsOnTarget(\n+            Collection<T> items, T target, String noTargetErrMessage,\n+        SerializableBiFunction<Integer, Boolean, Integer> insertItemsIndexProvider) {\n+\n+        if (items == null || items.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3NDYzMA==", "bodyText": "It is not obvious from the method signatures or parameters that why is there a need for two doAddItemsOnTarget methods, please answer that as a clarifying comment", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440174630", "createdAt": "2020-06-15T13:28:04Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -347,7 +311,107 @@ private Object getIdentifier(T item,\n         return itemIdentifier;\n     }\n \n-    private Object getIdentifier(T item, ListDataProvider<T> dataProvider) {\n-        return getIdentifier(item, dataProvider::getId);\n+    private boolean contains(T item, ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        return getItems().anyMatch(i -> itemIdentifier.equals(\n+                getIdentifier(i, dataProvider::getId)));\n+    }\n+\n+    private void removeItemIfPresent(T item,\n+                                     ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        dataProvider.getItems().removeIf(i -> itemIdentifier.equals(\n+                getIdentifier(i, dataProvider::getId)));\n+    }\n+\n+    private void removeItemIfPresent(T item, ListDataProvider<T> dataProvider,\n+                                     List<T> from) {\n+        final int itemIndex = getItemIndex(item, dataProvider::getId);\n+        if (itemIndex != -1) {\n+            from.remove(itemIndex);\n+        }\n+    }\n+\n+    private boolean equals(T item, T compareTo,\n+                           ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        return itemIdentifier.equals(\n+                getIdentifier(compareTo, dataProvider::getId));\n+    }\n+\n+    private AbstractListDataView<T> doAddItemOnTarget(\n+            T item, T target, String noTargetErrMessage,\n+            SerializableFunction<Integer, Integer> insertItemsIndexProvider) {\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+\n+        if (equals(item, target, dataProvider)) {\n+            return this;\n+        }\n+\n+        final int targetItemIndex = getItemIndex(target, dataProvider::getId);\n+        if (targetItemIndex == -1) {\n+            throw new IllegalArgumentException(noTargetErrMessage);\n+        }\n+        final Collection<T> backendItems = dataProvider.getItems();\n+        if (backendItems instanceof List) {\n+            final List<T> itemList = (List<T>) backendItems;\n+            removeItemIfPresent(item, dataProvider, itemList);\n+            itemList.add(insertItemsIndexProvider.apply(targetItemIndex), item);\n+            dataProvider.refreshAll();\n+            return this;\n+        }\n+        throw new IllegalArgumentException(\n+                String.format(COLLECTION_TYPE_ERROR_MESSAGE_PATTERN,\n+                        backendItems.getClass().getSimpleName()));\n+    }\n+\n+    private AbstractListDataView<T> doAddItemsOnTarget(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3NTMzMA==", "bodyText": "Couple of questions/observations when looking at this method:\n\nWhy does it have to be a List or an exception is thrown ? Why is not Collection suitable ? If it is required to be so, shouldn't it be checked immediately in the method and exception thrown always  - referring to checking first that something else might be null or empty or not present...\nWhy not utilize existing Collection::removeAll or Collection::removeIfPresent in this case since those are already done for us ? So basically first remove existing and then just add those that are available in the provided collection.\n\nApparently it seems that the code is written for the special case of having the target item also present in the new list. But I've had to take a lot of time to read the implementation to figure that out, which is not good.\nWhen is this needed and why - what is the use case ? I just get the feeling that this is adding some overly complex code here and there is no reason for this - at least it is not documented in the code any way. If there is a good reason for these decisions, please also document that in the code (as comments).", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440175330", "createdAt": "2020-06-15T13:29:10Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -347,7 +311,107 @@ private Object getIdentifier(T item,\n         return itemIdentifier;\n     }\n \n-    private Object getIdentifier(T item, ListDataProvider<T> dataProvider) {\n-        return getIdentifier(item, dataProvider::getId);\n+    private boolean contains(T item, ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        return getItems().anyMatch(i -> itemIdentifier.equals(\n+                getIdentifier(i, dataProvider::getId)));\n+    }\n+\n+    private void removeItemIfPresent(T item,\n+                                     ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        dataProvider.getItems().removeIf(i -> itemIdentifier.equals(\n+                getIdentifier(i, dataProvider::getId)));\n+    }\n+\n+    private void removeItemIfPresent(T item, ListDataProvider<T> dataProvider,\n+                                     List<T> from) {\n+        final int itemIndex = getItemIndex(item, dataProvider::getId);\n+        if (itemIndex != -1) {\n+            from.remove(itemIndex);\n+        }\n+    }\n+\n+    private boolean equals(T item, T compareTo,\n+                           ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        return itemIdentifier.equals(\n+                getIdentifier(compareTo, dataProvider::getId));\n+    }\n+\n+    private AbstractListDataView<T> doAddItemOnTarget(\n+            T item, T target, String noTargetErrMessage,\n+            SerializableFunction<Integer, Integer> insertItemsIndexProvider) {\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+\n+        if (equals(item, target, dataProvider)) {\n+            return this;\n+        }\n+\n+        final int targetItemIndex = getItemIndex(target, dataProvider::getId);\n+        if (targetItemIndex == -1) {\n+            throw new IllegalArgumentException(noTargetErrMessage);\n+        }\n+        final Collection<T> backendItems = dataProvider.getItems();\n+        if (backendItems instanceof List) {\n+            final List<T> itemList = (List<T>) backendItems;\n+            removeItemIfPresent(item, dataProvider, itemList);\n+            itemList.add(insertItemsIndexProvider.apply(targetItemIndex), item);\n+            dataProvider.refreshAll();\n+            return this;\n+        }\n+        throw new IllegalArgumentException(\n+                String.format(COLLECTION_TYPE_ERROR_MESSAGE_PATTERN,\n+                        backendItems.getClass().getSimpleName()));\n+    }\n+\n+    private AbstractListDataView<T> doAddItemsOnTarget(\n+            Collection<T> items, T target, String noTargetErrMessage,\n+        SerializableBiFunction<Integer, Boolean, Integer> insertItemsIndexProvider) {\n+\n+        if (items == null || items.isEmpty()) {\n+            return this;\n+        }\n+\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+\n+        if (!contains(target, dataProvider)) {\n+            throw new IllegalArgumentException(noTargetErrMessage);\n+        }\n+\n+        final Collection<T> backendItems = dataProvider.getItems();\n+        if (backendItems instanceof List) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3NjA0MA==", "bodyText": "Two methods with the same name and almost same parameters makes one wonder why - please add a comment to clarify so future maintainers don't have to read all the code or search git history for this", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440176040", "createdAt": "2020-06-15T13:30:10Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -347,7 +311,107 @@ private Object getIdentifier(T item,\n         return itemIdentifier;\n     }\n \n-    private Object getIdentifier(T item, ListDataProvider<T> dataProvider) {\n-        return getIdentifier(item, dataProvider::getId);\n+    private boolean contains(T item, ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        return getItems().anyMatch(i -> itemIdentifier.equals(\n+                getIdentifier(i, dataProvider::getId)));\n+    }\n+\n+    private void removeItemIfPresent(T item,\n+                                     ListDataProvider<T> dataProvider) {\n+        final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n+        dataProvider.getItems().removeIf(i -> itemIdentifier.equals(\n+                getIdentifier(i, dataProvider::getId)));\n+    }\n+\n+    private void removeItemIfPresent(T item, ListDataProvider<T> dataProvider,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3OTkzNw==", "bodyText": "* Moves an item to the proper position (next to {@code after} item) if it\n* is already in the data list, but not after the given item.\n\n\nIs this really so ? To me it means that the item is not moved at all if it is after the item even now ??? Shouldn't it be moved always? Thus the javadocs should be formulated as\n\"If the item is already present in the backend, then it is moved\"\nand then one doesn't have to stop to think about where it might be", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440179937", "createdAt": "2020-06-15T13:36:05Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -81,6 +81,9 @@\n     /**\n      * Adds an item after the given target item.\n      * <p>\n+     * Moves an item to the proper position (next to {@code after} item) if it\n+     * is already in the data list, but not after the given item.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4MTA4NA==", "bodyText": "Again the same thing as above - this indicates that it is not moved if it is already before the item, like on index 0 and the target item is on index 5.", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440181084", "createdAt": "2020-06-15T13:37:48Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -100,6 +103,9 @@\n     /**\n      * Adds an item before the given target item.\n      * <p>\n+     * Moves an item to the proper position (next to {@code before} item) if it\n+     * is already in the data list, but not before the given item.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4MzMwNA==", "bodyText": "Again, I think this should be formulated clearer, like:\n\"Any items that already exist in the data provider are moved to the end.\"", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440183304", "createdAt": "2020-06-15T13:41:10Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -161,6 +167,9 @@\n \n     /**\n      * Adds multiple items to the data list.\n+     * <p>\n+     * Moves the data list items to the end of the data list if they already\n+     * present, so as to keep the ordering of the {@code items} collection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4NDQwOA==", "bodyText": "the data list items\n\nI think you should just say \"items\" or \"given items\" or \"given collection\", data list items doesn't sound right", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440184408", "createdAt": "2020-06-15T13:42:49Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -177,6 +186,10 @@\n      * Adds multiple items after the given target item.\n      * The full collection is added in order after the target.\n      * <p>\n+     * Moves the data list items to the proper position (next to {@code after}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4NTcwOA==", "bodyText": "Maybe something like\n\"Any items that are already present in the data provider are moved.\"", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440185708", "createdAt": "2020-06-15T13:44:46Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -177,6 +186,10 @@\n      * Adds multiple items after the given target item.\n      * The full collection is added in order after the target.\n      * <p>\n+     * Moves the data list items to the proper position (next to {@code after}\n+     * item) if they already present, so as to keep the ordering of the\n+     * {@code items} collection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4NjE4Nw==", "bodyText": "Maybe something like\n\"Any items that are already present in the data provider are moved.\"", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440186187", "createdAt": "2020-06-15T13:45:25Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -197,6 +210,10 @@\n      * Adds multiple items before the given target item.\n      * The full collection is added in order before the target.\n      * <p>\n+     * Moves the data list items to the proper position (next to {@code before}\n+     * item) if they already present, so as to keep the ordering of the\n+     * {@code items} collection.\n+     * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4NzQ1Ng==", "bodyText": "It seems to me there are some exceptions that are thrown from the code on purpose, but there are no unit tests added that verify that and help us not to accidentally remove those. Or are those tested already by existing tests ?", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440187456", "createdAt": "2020-06-15T13:47:08Z", "author": {"login": "pleku"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -327,6 +418,38 @@ public void addItemsBefore_allItemsAreAddedBeforeTargetItem() {\n                 dataView.getItems().toArray(String[]::new));\n     }\n \n+    @Test\n+    public void addItemsBefore_someItemsAlreadyInList_allItemsAreMovedBeforeTargetAndOrdered() {\n+\n+        dataView.addItemsBefore(Arrays.asList(\"first\", \"newOne\", \"newTwo\"),\n+                \"last\");\n+\n+        Assert.assertArrayEquals(\n+                new String[]{\"middle\", \"first\", \"newOne\", \"newTwo\", \"last\"},\n+                dataView.getItems().toArray(String[]::new));\n+\n+        dataView.addItemsBefore(Arrays.asList(\"newThree\", \"last\"),\n+                \"last\");\n+\n+        Assert.assertArrayEquals(\n+                new String[]{\"middle\", \"first\", \"newOne\", \"newTwo\", \"newThree\", \"last\"},\n+                dataView.getItems().toArray(String[]::new));\n+\n+        dataView.addItemsBefore(Arrays.asList(\"newFour\", \"middle\"),\n+                \"middle\");\n+\n+        Assert.assertArrayEquals(\n+                new String[]{\"newFour\", \"middle\", \"first\", \"newOne\", \"newTwo\", \"newThree\", \"last\"},\n+                dataView.getItems().toArray(String[]::new));\n+\n+        dataView.addItemsBefore(Collections.singletonList(\"newFive\"), \"newFour\");\n+\n+        Assert.assertArrayEquals(\n+                new String[]{\"newFive\", \"newFour\", \"middle\", \"first\", \"newOne\"\n+                        , \"newTwo\", \"newThree\", \"last\"},\n+                dataView.getItems().toArray(String[]::new));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e30875759a03eea00850e3f24b9cbfe0f4b592"}, "originalPosition": 161}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d82da251fddf62dc71a3ecc1d041843beec5b9a7", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/d82da251fddf62dc71a3ecc1d041843beec5b9a7", "committedDate": "2020-06-15T17:04:40Z", "message": "Fix the code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "981c15d0c4ab159bb34c78383e18f9ba2434fb39", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/981c15d0c4ab159bb34c78383e18f9ba2434fb39", "committedDate": "2020-06-15T17:32:16Z", "message": "Delete extra removeIf method, naming improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb84bc0bb899a3dd873e91e0f834666d19d0ac8b", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/eb84bc0bb899a3dd873e91e0f834666d19d0ac8b", "committedDate": "2020-06-16T06:07:26Z", "message": "Add a comments for specific item collection adding case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMjUxODcw", "url": "https://github.com/vaadin/flow/pull/8550#pullrequestreview-431251870", "createdAt": "2020-06-16T07:58:16Z", "commit": {"oid": "eb84bc0bb899a3dd873e91e0f834666d19d0ac8b"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo1ODoxNlrOGkPqog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODowMDo0MVrOGkPwIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1ODU5NA==", "bodyText": "Like we commonly do, this exception could be thrown in the beginning of the method in a \"if not instance of list\" check. That would remove the need for having this if-else later on. I think it could be thrown after the null check, before the contains", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440658594", "createdAt": "2020-06-16T07:58:16Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -408,10 +429,10 @@ private boolean equals(T item, T compareTo,\n \n             itemList.addAll(indexToInsertItems, items);\n             dataProvider.refreshAll();\n-            return this;\n+        } else {\n+            throw new IllegalArgumentException(\n+                    String.format(COLLECTION_TYPE_ERROR_MESSAGE_PATTERN,\n+                            backendItems.getClass().getSimpleName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb84bc0bb899a3dd873e91e0f834666d19d0ac8b"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MDAwMA==", "bodyText": "I must apologize - I swear I read yesterday again and again that this method name was the same as above the case without a list, I read it as doAddItemOnTarget instead of doAddItemsOnTarget with the S in the middle. Sorry for that.\nWell, at least now it is obvious :)", "url": "https://github.com/vaadin/flow/pull/8550#discussion_r440660000", "createdAt": "2020-06-16T08:00:41Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -324,81 +333,93 @@ private void removeItemIfPresent(T item,\n                 getIdentifier(i, dataProvider::getId)));\n     }\n \n-    private void removeItemIfPresent(T item, ListDataProvider<T> dataProvider,\n-                                     List<T> from) {\n-        final int itemIndex = getItemIndex(item, dataProvider::getId);\n-        if (itemIndex != -1) {\n-            from.remove(itemIndex);\n-        }\n-    }\n-\n     private boolean equals(T item, T compareTo,\n                            ListDataProvider<T> dataProvider) {\n         final Object itemIdentifier = getIdentifier(item, dataProvider::getId);\n         return itemIdentifier.equals(\n                 getIdentifier(compareTo, dataProvider::getId));\n     }\n \n-    private AbstractListDataView<T> doAddItemOnTarget(\n-            T item, T target, String noTargetErrMessage,\n+    private void addItemOnTarget(\n+            T item, T target, String targetItemNotFoundErrorMessage,\n             SerializableFunction<Integer, Integer> insertItemsIndexProvider) {\n         final ListDataProvider<T> dataProvider = getDataProvider();\n \n         if (equals(item, target, dataProvider)) {\n-            return this;\n+            return;\n         }\n \n         final int targetItemIndex = getItemIndex(target, dataProvider::getId);\n         if (targetItemIndex == -1) {\n-            throw new IllegalArgumentException(noTargetErrMessage);\n+            throw new IllegalArgumentException(targetItemNotFoundErrorMessage);\n         }\n         final Collection<T> backendItems = dataProvider.getItems();\n         if (backendItems instanceof List) {\n             final List<T> itemList = (List<T>) backendItems;\n-            removeItemIfPresent(item, dataProvider, itemList);\n+            /*\n+             * If the item is already present in the data provider, then it\n+             * firstly removed from a data provider and secondly re-added into\n+             * the proper position towards to target item.\n+             */\n+            removeItemIfPresent(item, dataProvider);\n             itemList.add(insertItemsIndexProvider.apply(targetItemIndex), item);\n             dataProvider.refreshAll();\n-            return this;\n+        } else {\n+            throw new IllegalArgumentException(\n+                    String.format(COLLECTION_TYPE_ERROR_MESSAGE_PATTERN,\n+                            backendItems.getClass().getSimpleName()));\n         }\n-        throw new IllegalArgumentException(\n-                String.format(COLLECTION_TYPE_ERROR_MESSAGE_PATTERN,\n-                        backendItems.getClass().getSimpleName()));\n     }\n \n-    private AbstractListDataView<T> doAddItemsOnTarget(\n-            Collection<T> items, T target, String noTargetErrMessage,\n+    private void addItemCollectionOnTarget(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb84bc0bb899a3dd873e91e0f834666d19d0ac8b"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36145491e02611f5cb39a92f957d391aad4ff976", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/36145491e02611f5cb39a92f957d391aad4ff976", "committedDate": "2020-06-16T08:17:02Z", "message": "Simplify collection type verification"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMjY4MjQy", "url": "https://github.com/vaadin/flow/pull/8550#pullrequestreview-431268242", "createdAt": "2020-06-16T08:19:21Z", "commit": {"oid": "36145491e02611f5cb39a92f957d391aad4ff976"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 496, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}