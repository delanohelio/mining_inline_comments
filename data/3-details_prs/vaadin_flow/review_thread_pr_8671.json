{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNTc1NzY3", "number": 8671, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDozNzoyNVrOEKdRgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDozNzoyNVrOEKdRgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDAwODMzOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/hierarchy/HasHierarchicalDataProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDozNzoyNVrOGrgevg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDozNzoyNVrOGrgevg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NDExMA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/8671#discussion_r448274110", "createdAt": "2020-07-01T10:37:25Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/hierarchy/HasHierarchicalDataProvider.java", "diffHunk": "@@ -157,108 +158,26 @@ public default void setItems(Stream<T> rootItems,\n     }\n \n     /**\n-     * Sets the data items of this component provided as a collection.\n+     * Sets the data provider for this listing. The data provider is queried for\n+     * displayed items as needed.\n      * <p>\n-     * The provided items are wrapped into a {@link TreeDataProvider} backed by\n-     * a flat {@link TreeData} structure. The data provider instance is used as\n-     * a parameter for the {@link #setDataProvider(DataProvider)} method. It\n-     * means that the items collection can be accessed later on via\n-     * {@link #getTreeData()}:\n-     *\n-     * <pre>\n-     * <code>\n-     * HasHierarchicalDataProvider&lt;String&gt; treeGrid = new TreeGrid&lt;&gt;();\n-     * treeGrid.setItems(Arrays.asList(\"a\",\"b\"));\n-     * ...\n-     *\n-     * TreeData&lt;String&gt; data = treeGrid.getTreeData();\n-     * </code>\n-     * </pre>\n-     * <p>\n-     * The returned {@link TreeData} instance may be used as-is to add, remove\n-     * or modify items in the hierarchy. These modifications to the object are\n-     * not automatically reflected back to the TreeGrid. Items modified should\n-     * be refreshed with {@link HierarchicalDataProvider#refreshItem(Object)}\n-     * and when adding or removing items\n-     * {@link HierarchicalDataProvider#refreshAll()} should be called.\n-     *\n-     * @param items\n-     *            the data items to display, not {@code null}\n+     * <em>NOTE:</em> This method is here for backwards compatibility, but the\n+     * implementation for it will most likely throw if the data provider is not\n+     * a {@link HierarchicalDataProvider}.\n+     * \n+     * @param dataProvider\n+     *            the data provider, not null\n+     * @deprecated Use {@link #setDataProvider(HierarchicalDataProvider)}\n+     *             instead as the data should be hierarchical\n      */\n-    @Override\n-    public default void setItems(Collection<T> items) {\n-        Objects.requireNonNull(items, \"Given collection may not be null\");\n-        setDataProvider(new TreeDataProvider<>(\n-                new TreeData<T>().addItems(null, items)));\n-    }\n+    void setDataProvider(DataProvider<T, ?> dataProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fdde25b69d79ca33607e9d30b494dbe530ae18"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3329, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}