{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NjgwMDk5", "number": 9499, "title": "chore: move fusion endpoint code to fusion-endpoint module", "bodyText": "Fixes: #9354\nmove fusion code to a separate fusion-endpoint module, so that the fusion dependencies which are not OSGi compatible can be removed from the flow-server module.\n\nmove the code in the connect package  to fusion-server\nremoved the non OSGi compatible packages from the bnd file in flow-server\nchange  TaskGenerateOpenApi and TaskGenerateConnect to interfaces in flow-server, have the implementations in fusion-endpoint since they are using code inside the connect package\nMove endpoint related tests:\n\nfrom NodeTasksTest to  NodeTasksEndpointTest,\nfrom DevModeInitializerTest to DevModeInitializerEndpointTest\n\n\nAdd a LookupImpl class in the flow-maven-plugin module for finding endpoint services.\nIntroduce a isInstantiableServicemethod in ReflectTools", "createdAt": "2020-11-25T20:34:03Z", "url": "https://github.com/vaadin/flow/pull/9499", "merged": true, "mergeCommit": {"oid": "4ba194f354ea4ee039324e7ca9d42eece5a50708"}, "closed": true, "closedAt": "2020-12-08T11:04:25Z", "author": {"login": "haijian-vaadin"}, "timelineItems": {"totalCount": 66, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgEbIaAH2gAyNTI3NjgwMDk5OmIzZTY2NDU4ZjBmMDAzYjkwMTc4MTVmYjgyODAzZmE2YThkNGE4MWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkIAkLAFqTU0NzA5MjE3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b3e66458f0f003b9017815fb82803fa6a8d4a81f", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/b3e66458f0f003b9017815fb82803fa6a8d4a81f", "committedDate": "2020-11-25T20:32:04Z", "message": "chore: move fusion code to fusion-server module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "880a3a48054551d64552a58a934b1387c36ff12d", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/880a3a48054551d64552a58a934b1387c36ff12d", "committedDate": "2020-11-25T21:17:58Z", "message": "ignore failed tests in BuildFrontendMojoTest and PrepareFrontendMojoTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MTA0ODQw", "url": "https://github.com/vaadin/flow/pull/9499#pullrequestreview-539104840", "createdAt": "2020-11-26T08:51:11Z", "commit": {"oid": "880a3a48054551d64552a58a934b1387c36ff12d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODo1MToxMVrOH6RWeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTowMzo1NFrOH6R09g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg2MzczOA==", "bodyText": "This is needed for connect only and also has to be removed from here.\nThis dep breaks things.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r530863738", "createdAt": "2020-11-26T08:51:11Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/pom.xml", "diffHunk": "@@ -164,51 +164,6 @@\n             <scope>test</scope>\n         </dependency>\n \n-\n-        <!--  Fusion Dependencies -->\n-        <dependency>\n-            <groupId>javax.validation</groupId>\n-            <artifactId>validation-api</artifactId>\n-            <version>${validation.api.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.springframework</groupId>\n-            <artifactId>spring-web</artifactId>\n-            <version>${spring.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.springframework</groupId>\n-            <artifactId>spring-webmvc</artifactId>\n-            <version>${spring.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.springframework.boot</groupId>\n-            <artifactId>spring-boot-autoconfigure</artifactId>\n-            <version>${spring.autoconfigure.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>com.fasterxml.jackson.core</groupId>\n-            <artifactId>jackson-annotations</artifactId>\n-            <version>${jackson.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>com.fasterxml.jackson.core</groupId>\n-            <artifactId>jackson-core</artifactId>\n-            <version>${jackson.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>com.fasterxml.jackson.core</groupId>\n-            <artifactId>jackson-databind</artifactId>\n-            <version>${jackson.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>com.fasterxml.jackson.datatype</groupId>\n-            <artifactId>jackson-datatype-jsr310</artifactId>\n-            <version>${jackson.version}</version>\n-        </dependency>\n         <!-- Needed for security annotations -->\n         <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "880a3a48054551d64552a58a934b1387c36ff12d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg2NDM1NA==", "bodyText": "com.github.javaparser deps below also should be removed", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r530864354", "createdAt": "2020-11-26T08:52:17Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/pom.xml", "diffHunk": "@@ -164,51 +164,6 @@\n             <scope>test</scope>\n         </dependency>\n \n-\n-        <!--  Fusion Dependencies -->\n-        <dependency>\n-            <groupId>javax.validation</groupId>\n-            <artifactId>validation-api</artifactId>\n-            <version>${validation.api.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.springframework</groupId>\n-            <artifactId>spring-web</artifactId>\n-            <version>${spring.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.springframework</groupId>\n-            <artifactId>spring-webmvc</artifactId>\n-            <version>${spring.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.springframework.boot</groupId>\n-            <artifactId>spring-boot-autoconfigure</artifactId>\n-            <version>${spring.autoconfigure.version}</version>\n-            <scope>provided</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>com.fasterxml.jackson.core</groupId>\n-            <artifactId>jackson-annotations</artifactId>\n-            <version>${jackson.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>com.fasterxml.jackson.core</groupId>\n-            <artifactId>jackson-core</artifactId>\n-            <version>${jackson.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>com.fasterxml.jackson.core</groupId>\n-            <artifactId>jackson-databind</artifactId>\n-            <version>${jackson.version}</version>\n-        </dependency>\n-        <dependency>\n-            <groupId>com.fasterxml.jackson.datatype</groupId>\n-            <artifactId>jackson-datatype-jsr310</artifactId>\n-            <version>${jackson.version}</version>\n-        </dependency>\n         <!-- Needed for security annotations -->\n         <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg2MzczOA=="}, "originalCommit": {"oid": "880a3a48054551d64552a58a934b1387c36ff12d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg3MTU0Mg==", "bodyText": "new line OR is it generated ?", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r530871542", "createdAt": "2020-11-26T09:03:54Z", "author": {"login": "denis-anisimov"}, "path": "fusion-server/src/test/resources/com/vaadin/flow/server/connect/generator/endpoints/collectionendpoint/expected-model-collectionendpoint.CollectionEndpoint.Collection.ts", "diffHunk": "@@ -0,0 +1,9 @@\n+/**\n+ * This module is generated from com.vaadin.flow.server.connect.generator.endpoints.collectionendpoint.CollectionEndpoint.Collection.\n+ * All changes to this file are overridden. Please consider to make changes in the corresponding Java file if necessary.\n+ */\n+export default interface Collection {\n+  author: string;\n+  collectionName: string;\n+  type: string;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "880a3a48054551d64552a58a934b1387c36ff12d"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec1727890db23fd6287a61d2b2c7cd0ed18cbbd3", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/ec1727890db23fd6287a61d2b2c7cd0ed18cbbd3", "committedDate": "2020-11-26T18:59:24Z", "message": "update pom dependencies in flow-server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0539390d527ab165bb397cb990ebc7d4bfdbf22d", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/0539390d527ab165bb397cb990ebc7d4bfdbf22d", "committedDate": "2020-11-27T11:05:54Z", "message": "rename to fusion-endpoint, use Lookup for getting TaskGenerateOpenApi and TaskGenerateConnect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05a342d8119c3358331f2f12448f6974080b568e", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/05a342d8119c3358331f2f12448f6974080b568e", "committedDate": "2020-11-27T11:08:41Z", "message": "fusion-server->fusion-endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77150caaa1ca249e4ca382d456307d6f3efc3cca", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/77150caaa1ca249e4ca382d456307d6f3efc3cca", "committedDate": "2020-11-27T11:52:01Z", "message": "servlet container initializer for fusion-endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5217d14b8e962ceec2d636cefd6896c85cb9a950", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/5217d14b8e962ceec2d636cefd6896c85cb9a950", "committedDate": "2020-11-27T13:22:51Z", "message": "Merge branch 'master' into haijian/fusion-server-module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b83a288641d10fd1014e690af654986d94073f81", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/b83a288641d10fd1014e690af654986d94073f81", "committedDate": "2020-11-27T13:47:04Z", "message": "remove use of guava-primitives"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9099d1365c9ea5f84230c3f96c2899e4140c108", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/e9099d1365c9ea5f84230c3f96c2899e4140c108", "committedDate": "2020-11-27T13:53:44Z", "message": "fix compile error in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73e1bac3ce87856f174a8c7a58fda9df95841754", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/73e1bac3ce87856f174a8c7a58fda9df95841754", "committedDate": "2020-11-27T14:07:07Z", "message": "ignore known failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04680f5692ff297c2b8eb78b08cd17ace0f68c9a", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/04680f5692ff297c2b8eb78b08cd17ace0f68c9a", "committedDate": "2020-11-27T14:57:18Z", "message": "add missing commons-lang3 dep for test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f28dab6e4f5bb0b8177f9988e52a0155123e5b53", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/f28dab6e4f5bb0b8177f9988e52a0155123e5b53", "committedDate": "2020-11-27T19:50:25Z", "message": "move endpoint test resoruces to fusion-endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTg2MzI0", "url": "https://github.com/vaadin/flow/pull/9499#pullrequestreview-540186324", "createdAt": "2020-11-27T20:41:56Z", "commit": {"oid": "f28dab6e4f5bb0b8177f9988e52a0155123e5b53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMDo0MTo1NlrOH7JVwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMDo0MTo1NlrOH7JVwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4MTA1Ng==", "bodyText": "Make \"lookup\" transient or serializable.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r531781056", "createdAt": "2020-11-27T20:41:56Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java", "diffHunk": "@@ -125,6 +126,8 @@\n          */\n         private URI nodeDownloadRoot = URI.create(NodeInstaller.DEFAULT_NODEJS_DOWNLOAD_ROOT);\n \n+        private Lookup lookup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28dab6e4f5bb0b8177f9988e52a0155123e5b53"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcf1984032a3198648e6fc593dde13ac1df2040f", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/fcf1984032a3198648e6fc593dde13ac1df2040f", "committedDate": "2020-11-27T21:07:24Z", "message": "move endpoint test in NodeTasksTest to fusion-endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a767bf5e1881ee95ad06e02b435377a52dc2f7ec", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/a767bf5e1881ee95ad06e02b435377a52dc2f7ec", "committedDate": "2020-11-30T11:56:19Z", "message": "move endpoint related tests to fusion-endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7fee518964be7a59a817dcbb8a252171f0b3e44", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/a7fee518964be7a59a817dcbb8a252171f0b3e44", "committedDate": "2020-11-30T19:26:41Z", "message": "delete endpoint related tests from BuildFrontendMojo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e26ce35521f5299076df1be630db847689b6952b", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/e26ce35521f5299076df1be630db847689b6952b", "committedDate": "2020-12-01T06:51:17Z", "message": "Merge branch 'master' into haijian/fusion-server-module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNTI3Nzk0", "url": "https://github.com/vaadin/flow/pull/9499#pullrequestreview-541527794", "createdAt": "2020-12-01T06:44:47Z", "commit": {"oid": "a7fee518964be7a59a817dcbb8a252171f0b3e44"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjo0NDo0N1rOH8aMgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzoyMDoxOFrOH8a_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwNTc5Mw==", "bodyText": "Is it possible to extract lookup creation into a method in a superclass ?\nI would even make it with no-args.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533105793", "createdAt": "2020-12-01T06:44:47Z", "author": {"login": "denis-anisimov"}, "path": "flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/PrepareFrontendMojo.java", "diffHunk": "@@ -123,8 +126,10 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n         try {\n             File flowResourcesFolder = new File(npmFolder,\n                     DEFAULT_FLOW_RESOURCES_FOLDER);\n+            ClassFinder classFinder = getClassFinder(project);\n+            Lookup lookup= new LookupImpl(classFinder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fee518964be7a59a817dcbb8a252171f0b3e44"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExMDA1MQ==", "bodyText": "Is this removed without replacement / moving ?", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533110051", "createdAt": "2020-12-01T06:57:00Z", "author": {"login": "denis-anisimov"}, "path": "flow-maven-plugin/src/test/java/com/vaadin/flow/plugin/maven/BuildFrontendMojoTest.java", "diffHunk": "@@ -408,14 +408,6 @@ public void noTokenFile_noTokenFileShouldBeCreated()\n         Assert.assertFalse(tokenFile.exists());\n     }\n \n-    @Test\n-    public void mavenGoal_generateOpenApiJson_when_itIsInClientSideMode()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fee518964be7a59a817dcbb8a252171f0b3e44"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExMDgzNQ==", "bodyText": "I wold move Lookup as the first arg.\nAnd this param requires javadocs", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533110835", "createdAt": "2020-12-01T06:59:20Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java", "diffHunk": "@@ -133,8 +136,8 @@\n          * @param npmFolder\n          *            folder with the `package.json` file\n          */\n-        public Builder(ClassFinder classFinder, File npmFolder) {\n-            this(classFinder, npmFolder, new File(npmFolder, System\n+        public Builder(ClassFinder classFinder, File npmFolder, Lookup lookup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fee518964be7a59a817dcbb8a252171f0b3e44"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExMjU0Mw==", "bodyText": "Not sure the final usage of this interface but it seems the methods with the return type should return the class and not its superclass.\nSo may be it should be\nTaskGenerateEndpointBase<T extends TaskGenerateEndpointBase> extends FallibleCommand{\n\nT withApplicationProperties(File applicationProperties);\n}", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533112543", "createdAt": "2020-12-01T07:04:25Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateEndpointBase.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+\n+/**\n+ * Base interface for endpoint generation related tasks.\n+ */\n+public interface TaskGenerateEndpointBase extends FallibleCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fee518964be7a59a817dcbb8a252171f0b3e44"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNjMxMQ==", "bodyText": "Another thing which I would recommend: methods withXXX are good for builders.\nThese are commands, not builders.\nI would  make factories instead which produces the command.\nFactory should accept paramer(s) and produces the command instance.\nThe only issue which I see here: there should be only one method. It means the fixed amount of parameters.\nSo factories extending has no sense.\nInstead I would may be make builder (which may extends one each other) and the builder may produce an immutable instance of configuration which will be passed to a factory.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533116311", "createdAt": "2020-12-01T07:14:14Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateEndpointBase.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+\n+/**\n+ * Base interface for endpoint generation related tasks.\n+ */\n+public interface TaskGenerateEndpointBase extends FallibleCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fee518964be7a59a817dcbb8a252171f0b3e44"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNjU3MA==", "bodyText": "same comments as above for TaskGenerateEndpointBase.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533116570", "createdAt": "2020-12-01T07:14:49Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateOpenApi.java", "diffHunk": "@@ -16,53 +16,25 @@\n package com.vaadin.flow.server.frontend;\n \n import java.io.File;\n-import java.util.Collections;\n-import java.util.Objects;\n-\n-import com.vaadin.flow.server.ExecutionFailedException;\n-import com.vaadin.flow.server.connect.Endpoint;\n-import com.vaadin.flow.server.connect.generator.OpenApiSpecGenerator;\n \n /**\n  * Generate OpenAPI json file for Vaadin Endpoints.\n  */\n-public class TaskGenerateOpenApi extends AbstractTaskConnectGenerator {\n-\n-    private final File javaSourceFolder;\n-    private final transient ClassLoader classLoader;\n-    private final File output;\n+public interface TaskGenerateOpenApi extends TaskGenerateEndpointBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fee518964be7a59a817dcbb8a252171f0b3e44"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExODgwMw==", "bodyText": "This code and code below assumes that connect will be available and configured.\n(see withConnectApplicationProperties, etc...).\nThe proper logic should check whether a service is available and the configure it only if it's available.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533118803", "createdAt": "2020-12-01T07:20:18Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DevModeInitializer.java", "diffHunk": "@@ -281,8 +282,9 @@ public static void initDevModeHandler(Set<Class<?>> classes,\n         File flowResourcesFolder = new File(baseDir,\n                 DEFAULT_FLOW_RESOURCES_FOLDER);\n \n+        Lookup lookup = new VaadinServletContext(context).getAttribute(Lookup.class);\n         Builder builder = new NodeTasks.Builder(new DevModeClassFinder(classes),\n-                new File(baseDir), new File(generatedDir),\n+                new File(baseDir), lookup, new File(generatedDir),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fee518964be7a59a817dcbb8a252171f0b3e44"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12635e6e7bf5c7a285038449ec3906902b7e0657", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/12635e6e7bf5c7a285038449ec3906902b7e0657", "committedDate": "2020-12-01T08:00:25Z", "message": "update fusion-endpoint pom to fix compile errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f630dbd8ac1fe1bcee0b25f72d0a45d38acbbcfe", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/f630dbd8ac1fe1bcee0b25f72d0a45d38acbbcfe", "committedDate": "2020-12-01T09:27:34Z", "message": "apply some code review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "372e18ed853e1bcdd79d9fb1196ca6e3b7672d5f", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/372e18ed853e1bcdd79d9fb1196ca6e3b7672d5f", "committedDate": "2020-12-01T10:43:41Z", "message": "fix compile errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cc2d0f1f0a1c9688e3dad3aa9c5a6b00494fddb", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/2cc2d0f1f0a1c9688e3dad3aa9c5a6b00494fddb", "committedDate": "2020-12-01T14:45:21Z", "message": "clean up fusion and flow-server dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0a89329818a61a7274fceac1c19c39f94b8d192", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/d0a89329818a61a7274fceac1c19c39f94b8d192", "committedDate": "2020-12-01T21:07:03Z", "message": "remove unnecessray interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa3e9873e0a1382130685603493f0ca9381d04cb", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/fa3e9873e0a1382130685603493f0ca9381d04cb", "committedDate": "2020-12-01T23:06:52Z", "message": "unignore BuildFrontendMojoEndpointTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a60554001238bb41f49e6874c62b61ddd452e9a", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/0a60554001238bb41f49e6874c62b61ddd452e9a", "committedDate": "2020-12-02T06:36:14Z", "message": "move endpoint related tests from DevModeInitializerTest to DevModeInitializerEndpointTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "249ff821194ce3509e7ca1d4560bba83efef9df0", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/249ff821194ce3509e7ca1d4560bba83efef9df0", "committedDate": "2020-12-02T06:46:15Z", "message": "Merge branch 'master' into haijian/fusion-server-module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f739dc98a5e2735b462b848344bb4f9749e41c8", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/1f739dc98a5e2735b462b848344bb4f9749e41c8", "committedDate": "2020-12-02T07:18:36Z", "message": "move instantiable check to ReflectTools"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63183d171b57a710dfd9e1ee3b2da2a79d9f8826", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/63183d171b57a710dfd9e1ee3b2da2a79d9f8826", "committedDate": "2020-12-02T07:24:24Z", "message": "move lookup creation to the super class (FlowModeAbstractMojo)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00e043281d18491631fc7e6f55643b9b1f75e79b", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/00e043281d18491631fc7e6f55643b9b1f75e79b", "committedDate": "2020-12-02T07:49:09Z", "message": "fix broken link in javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3de4d91ab89583ab335c6f52dcb149ff115b535d", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/3de4d91ab89583ab335c6f52dcb149ff115b535d", "committedDate": "2020-12-02T07:54:22Z", "message": "move one more endpoint related test from BuildFrontendMojoTest to BuildFrontendMojoEndpointTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2fd79944bee05f2d8c00f9a3196824135575d91", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/e2fd79944bee05f2d8c00f9a3196824135575d91", "committedDate": "2020-12-02T08:04:52Z", "message": "fix broken javadoc link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "475b4864a81150fc3ec4e7af0efdeb76d2ed25b4", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/475b4864a81150fc3ec4e7af0efdeb76d2ed25b4", "committedDate": "2020-12-02T08:41:45Z", "message": "move spring.factories file from flow-server to fusion-endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNjIwOTE2", "url": "https://github.com/vaadin/flow/pull/9499#pullrequestreview-542620916", "createdAt": "2020-12-02T09:02:13Z", "commit": {"oid": "475b4864a81150fc3ec4e7af0efdeb76d2ed25b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOTowMjoxM1rOH9Qtrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOTowMjoxM1rOH9Qtrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk5OTAyMw==", "bodyText": "Replace this if-then-else statement by a single return statement.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533999023", "createdAt": "2020-12-02T09:02:13Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ReflectTools.java", "diffHunk": "@@ -825,6 +825,37 @@ public static Object getAnnotationMethodValue(Annotation annotation,\n         return Optional.empty();\n     }\n \n+    /**\n+     * Check if a class can be instantiated or not\n+     * \n+     * @param clazz\n+     *            the class to check\n+     * @return true if the class can be instantiated, otherwise false\n+     */\n+    public static boolean isInstantiable(Class<?> clazz) {\n+        if (clazz.isInterface()) {\n+          return false;\n+        }\n+        if (clazz.isSynthetic()) {\n+          return false;\n+        }\n+        if (Modifier.isAbstract(clazz.getModifiers())) {\n+          return false;\n+        }\n+        if (!Modifier.isPublic(clazz.getModifiers())) {\n+          return false;\n+        }\n+        Optional<Constructor<?>> constructor = Stream.of(clazz.getConstructors())\n+            .filter(ctor -> ctor.getParameterCount() == 0).findFirst();\n+        if (!constructor.isPresent() || !Modifier.isPublic(constructor.get().getModifiers())) {\n+          return false;\n+        }\n+        if (clazz.getEnclosingClass() != null && !Modifier.isStatic(clazz.getModifiers())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "475b4864a81150fc3ec4e7af0efdeb76d2ed25b4"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNjIwOTg5", "url": "https://github.com/vaadin/flow/pull/9499#pullrequestreview-542620989", "createdAt": "2020-12-02T09:02:18Z", "commit": {"oid": "475b4864a81150fc3ec4e7af0efdeb76d2ed25b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOTowMjoxOFrOH9Qt7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOTowMjoxOFrOH9Qt7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk5OTA4Ng==", "bodyText": "Remove this use of \"Thread.sleep()\".", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r533999086", "createdAt": "2020-12-02T09:02:18Z", "author": {"login": "vaadin-bot"}, "path": "fusion-endpoint/src/test/java/com/vaadin/flow/server/startup/fusion/DevModeInitializerEndpointTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package com.vaadin.flow.server.startup.fusion;\n+\n+import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_REUSE_DEV_SERVER;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_GENERATED_TS_DIR;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_JAVA_SOURCE_FOLDER;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_OPENAPI_JSON_FILE;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletRegistration;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.server.DevModeHandler;\n+import com.vaadin.flow.server.VaadinServlet;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.server.frontend.TaskGenerateConnect;\n+import com.vaadin.flow.server.frontend.TaskGenerateOpenApi;\n+import com.vaadin.flow.server.frontend.fusion.TaskGenerateConnectImpl;\n+import com.vaadin.flow.server.frontend.fusion.TaskGenerateOpenApiImpl;\n+import com.vaadin.flow.server.startup.DevModeInitializer;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+\n+@NotThreadSafe\n+public class DevModeInitializerEndpointTest {\n+    private final AtomicReference<DevModeHandler> atomicHandler = new AtomicReference<>();\n+    \n+    String baseDir;\n+    ServletContext servletContext;\n+    Map<String, String> initParams;\n+    Set<Class<?>> classes;\n+    DevModeInitializer devModeInitializer;\n+\n+    private final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    private static class VaadinServletSubClass extends VaadinServlet {\n+\n+    }\n+\n+    @Before\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public void setup() throws Exception {\n+        assertNull(getDevModeHandler());\n+\n+        temporaryFolder.create();\n+        baseDir = temporaryFolder.getRoot().getPath();\n+\n+        servletContext = Mockito.mock(ServletContext.class);\n+        ServletRegistration vaadinServletRegistration = Mockito\n+                .mock(ServletRegistration.class);\n+\n+        Lookup lookup = Mockito.mock(Lookup.class);\n+        Mockito.when(servletContext.getAttribute(Lookup.class.getName()))\n+                .thenReturn(lookup);\n+        Mockito.doReturn(new TaskGenerateConnectImpl()).when(lookup).lookup(TaskGenerateConnect.class);\n+        Mockito.doReturn(new TaskGenerateOpenApiImpl()).when(lookup).lookup(TaskGenerateOpenApi.class);\n+\n+        ResourceProvider resourceProvider = Mockito\n+                .mock(ResourceProvider.class);\n+        Mockito.when(lookup.lookup(ResourceProvider.class))\n+                .thenReturn(resourceProvider);\n+\n+        Mockito.when(vaadinServletRegistration.getClassName())\n+                .thenReturn(VaadinServletSubClass.class.getName());\n+\n+        initParams = new HashMap<>();\n+        initParams.put(FrontendUtils.PROJECT_BASEDIR, baseDir);\n+\n+        Mockito.when(vaadinServletRegistration.getInitParameters())\n+                .thenReturn(initParams);\n+\n+        classes = new HashSet<>();\n+        classes.add(this.getClass());\n+\n+        Map registry = new HashMap();\n+\n+        // Adding extra registrations to make sure that DevModeInitializer picks\n+        // the correct registration which is a VaadinServlet registration.\n+        registry.put(\"extra1\", Mockito.mock(ServletRegistration.class));\n+        registry.put(\"foo\", vaadinServletRegistration);\n+        registry.put(\"extra2\", Mockito.mock(ServletRegistration.class));\n+        Mockito.when(servletContext.getServletRegistrations())\n+                .thenReturn(registry);\n+        Mockito.when(servletContext.getInitParameterNames())\n+                .thenReturn(Collections.emptyEnumeration());\n+        Mockito.when(servletContext.getClassLoader())\n+                .thenReturn(this.getClass().getClassLoader());\n+\n+        FileUtils.forceMkdir(\n+                new File(baseDir, DEFAULT_CONNECT_JAVA_SOURCE_FOLDER));\n+\n+        devModeInitializer = new DevModeInitializer();\n+    }\n+\n+    @After\n+    public void teardown() throws Exception, SecurityException {\n+        System.clearProperty(\"vaadin.\" + SERVLET_PARAMETER_PRODUCTION_MODE);\n+        System.clearProperty(\"vaadin.\" + SERVLET_PARAMETER_REUSE_DEV_SERVER);\n+        System.clearProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n+\n+        temporaryFolder.delete();\n+        if (getDevModeHandler() != null) {\n+            getDevModeHandler().stop();\n+        }\n+    }\n+\n+    @Test\n+    public void should_generateOpenApi_when_EndpointPresents()\n+            throws Exception {\n+\n+        // Configure a folder that has .java classes with valid endpoints\n+        // Not using `src/test/java` because there are invalid endpoint names\n+        // in some tests\n+        File src = new File(\n+                getClass().getClassLoader().getResource(\"java\").getFile());\n+        System.setProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n+                src.getAbsolutePath());\n+\n+        File generatedOpenApiJson = Paths\n+                .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n+\n+        Assert.assertFalse(generatedOpenApiJson.exists());\n+        DevModeInitializer devModeInitializer = new DevModeInitializer();\n+        devModeInitializer.onStartup(classes, servletContext);\n+        waitForDevModeServer();\n+        Thread.sleep(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "475b4864a81150fc3ec4e7af0efdeb76d2ed25b4"}, "originalPosition": 150}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d19d1088d9920ee34aefd85c061c2a517b6b6cb7", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/d19d1088d9920ee34aefd85c061c2a517b6b6cb7", "committedDate": "2020-12-02T10:27:32Z", "message": "use a factory to create endpoint generator tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac0a1e825df92eefcaec6c678e7c6b9d912e7a61", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/ac0a1e825df92eefcaec6c678e7c6b9d912e7a61", "committedDate": "2020-12-02T10:32:43Z", "message": "fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2837ad291b1b3035ca3f0e98f5c94df5ec050688", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/2837ad291b1b3035ca3f0e98f5c94df5ec050688", "committedDate": "2020-12-02T13:09:32Z", "message": "refactor: rename method name in ReflectTools"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7824a8a2e1bbaa3ae0e12b3c05ad2f5ceef858e1", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/7824a8a2e1bbaa3ae0e12b3c05ad2f5ceef858e1", "committedDate": "2020-12-02T13:58:43Z", "message": "use class find to load class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1a40cb21b45d679c1af6471791f97a221478fb9", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/a1a40cb21b45d679c1af6471791f97a221478fb9", "committedDate": "2020-12-02T14:00:14Z", "message": "code format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eba16ecd67064ac0bdc320add74deef1c536d0f", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/7eba16ecd67064ac0bdc320add74deef1c536d0f", "committedDate": "2020-12-02T19:16:14Z", "message": "fix sonar issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0ed6a7f33d526b87b7811eaaa4b310fa386f06f", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/b0ed6a7f33d526b87b7811eaaa4b310fa386f06f", "committedDate": "2020-12-02T19:18:07Z", "message": "fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08be3ae4c5545ae82b8fd1ddc848e7afbee20665", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/08be3ae4c5545ae82b8fd1ddc848e7afbee20665", "committedDate": "2020-12-02T20:25:46Z", "message": "fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdec6d1146386adf84b6c580a722269f06e91795", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/bdec6d1146386adf84b6c580a722269f06e91795", "committedDate": "2020-12-03T06:39:47Z", "message": "fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a7b878b4b03854e5daeb7dbfd89e15783af393e", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/2a7b878b4b03854e5daeb7dbfd89e15783af393e", "committedDate": "2020-12-03T06:43:19Z", "message": "fix: load found classes by the plugin's classloader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "791f57f80d81476a2373815495f33f9209b5ad5f", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/791f57f80d81476a2373815495f33f9209b5ad5f", "committedDate": "2020-12-03T06:43:35Z", "message": "Merge branch 'haijian/fusion-server-module' of git@github.com:vaadin/flow.git into haijian/fusion-server-module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "354c80581676ac8b1f8e4e07326e872bedd4754d", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/354c80581676ac8b1f8e4e07326e872bedd4754d", "committedDate": "2020-12-03T07:16:11Z", "message": "remove flow-maven-plugin dependency from fusion-endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87ed7b3d1c18863e3ed85e81f07524a1c44ad9af", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/87ed7b3d1c18863e3ed85e81f07524a1c44ad9af", "committedDate": "2020-12-03T07:16:46Z", "message": "remove flow-maven-plugin dependency from fusion-endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49d4a51e82d723271334fad273b82f87a28d077f", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/49d4a51e82d723271334fad273b82f87a28d077f", "committedDate": "2020-12-03T08:16:45Z", "message": "code format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f81cfe67f57fb094dffbb54c1826d759204bc608", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/f81cfe67f57fb094dffbb54c1826d759204bc608", "committedDate": "2020-12-04T07:26:50Z", "message": "change init method back to constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0db98c8897160eebb7fb552c38a4364b28ad4e14", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/0db98c8897160eebb7fb552c38a4364b28ad4e14", "committedDate": "2020-12-04T07:30:13Z", "message": "code format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6", "committedDate": "2020-12-04T07:43:08Z", "message": "remove endpoint generation templates from flow-server, since they were moved to fusion-endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0ODQxNDEx", "url": "https://github.com/vaadin/flow/pull/9499#pullrequestreview-544841411", "createdAt": "2020-12-04T10:37:06Z", "commit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6"}, "state": "DISMISSED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDozNzowNlrOH_K9aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDo1Mzo1N1rOH_Lm0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMTg5Nw==", "bodyText": "I would may be avoid passing ClassFinder  as a separate parameter here and everywhere.\nLookup may be created so that it may return the ClassFinder by ClassFinder.class.\nYou may implement this by yourself here or wait for #9572 where I introduced two static methods into Lookup which allows to extend it.\nBut this is not very important.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536001897", "createdAt": "2020-12-04T10:37:06Z", "author": {"login": "denis-anisimov"}, "path": "flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/BuildFrontendMojo.java", "diffHunk": "@@ -161,8 +159,11 @@ private void runNodeUpdater() throws ExecutionFailedException, MojoExecutionExce\n         } catch (URISyntaxException e) {\n             throw new MojoExecutionException(\"Failed to parse \" + nodeDownloadRoot, e);\n         }\n+        \n+        ClassFinder classFinder = getClassFinder(project);\n+        Lookup lookup= createLookup(classFinder);\n         // @formatter:off\n-        new NodeTasks.Builder(getClassFinder(project),\n+        new NodeTasks.Builder(lookup, classFinder,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMjQyOQ==", "bodyText": "Here you may add directly a special case for ClassFinder.class.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536002429", "createdAt": "2020-12-04T10:37:56Z", "author": {"login": "denis-anisimov"}, "path": "flow-maven-plugin/src/main/java/com/vaadin/flow/utils/LookupImpl.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n+\n+/**\n+ * An implementation of Lookup, which could be used to find service(s) of a give\n+ * type.\n+ */\n+public class LookupImpl implements Lookup {\n+\n+    private ClassFinder classFinder;\n+\n+    /**\n+     * Creates an implementation of Lookup.\n+     * \n+     * @param classFinder\n+     *            for searching service implementations.\n+     */\n+    public LookupImpl(ClassFinder classFinder) {\n+        this.classFinder = classFinder;\n+    }\n+\n+    @Override\n+    public <T> T lookup(Class<T> serviceClass) {\n+        return lookupAll(serviceClass).stream().findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzEwNA==", "bodyText": "Have you checked that these deps don't break OSGi ?\nDo they have proper OSGi manifest ?", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536003104", "createdAt": "2020-12-04T10:39:06Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/pom.xml", "diffHunk": "@@ -78,6 +78,16 @@\n             <groupId>commons-io</groupId>\n             <artifactId>commons-io</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzM4Mg==", "bodyText": "By the way : why they are needed ?", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536003382", "createdAt": "2020-12-04T10:39:29Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/pom.xml", "diffHunk": "@@ -78,6 +78,16 @@\n             <groupId>commons-io</groupId>\n             <artifactId>commons-io</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzEwNA=="}, "originalCommit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNTMzNg==", "bodyText": "Would be good to improve javadoc.\nIt should explain what the service is: this is a static check whether a class may be instantiated via its default CTOR via reflection. static check means that the CTOR may throw an exception and this is not checked but only possibility to instantiate the class based on type data", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536005336", "createdAt": "2020-12-04T10:42:39Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ReflectTools.java", "diffHunk": "@@ -825,6 +825,37 @@ public static Object getAnnotationMethodValue(Annotation annotation,\n         return Optional.empty();\n     }\n \n+    /**\n+     * Check if a class can be instantiated as a service or not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNjA3MA==", "bodyText": "I suggest to skip ClassFinder  passing as a parameter here (and everywhere).", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536006070", "createdAt": "2020-12-04T10:43:55Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java", "diffHunk": "@@ -125,39 +126,47 @@\n          */\n         private URI nodeDownloadRoot = URI.create(NodeInstaller.DEFAULT_NODEJS_DOWNLOAD_ROOT);\n \n+        private Lookup lookup;\n+\n         /**\n          * Create a builder instance given an specific npm folder.\n          *\n+         * @param lookup\n+         *            a {@link Lookup} to discover services used by Flow (SPI)\n          * @param classFinder\n          *            a class finder\n          * @param npmFolder\n          *            folder with the `package.json` file\n          */\n-        public Builder(ClassFinder classFinder, File npmFolder) {\n-            this(classFinder, npmFolder, new File(npmFolder, System\n+        public Builder(Lookup lookup, ClassFinder classFinder, File npmFolder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNjk1OQ==", "bodyText": "create implies that the return value won't be null  but anyway please add to the @return that it's never null", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536006959", "createdAt": "2020-12-04T10:45:21Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/EndpointGeneratorTaskFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+\n+/**\n+ * A factory for creating Vaadin Endpoint generator tasks\n+ *\n+ * @author Vaadin Ltd.\n+ * @since 6.0\n+ */\n+public interface EndpointGeneratorTaskFactory {\n+\n+    /**\n+     * Create a task for generating TS files based.\n+     *\n+     * @param applicationProperties\n+     *            application properties file.\n+     * @param openApi\n+     *            openApi json file.\n+     * @param outputFolder\n+     *            the output folder.\n+     * @param frontendDirectory\n+     *            the frontend folder.\n+     * @return an endpoint tasks for generating TypeScript files for endpoints.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNzQyMw==", "bodyText": "This is technically extra check.\nThe lookup is never null here.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536007423", "createdAt": "2020-12-04T10:46:06Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DevModeInitializer.java", "diffHunk": "@@ -394,13 +397,19 @@ public static void initDevModeHandler(Set<Class<?>> classes,\n         DevModeHandler.start(config, builder.npmFolder, runNodeTasks);\n     }\n \n+    private static boolean isEndpointServiceAvailable(Lookup lookup) {\n+        if (lookup == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwOTM3Mg==", "bodyText": "Should these test be really removed ?\nAre they moved somewhere else ?\nShould there be some replacement ?\nE.g. now there is no need to check the functionality (integration: something is generated and so on).\nBut you may check that some methods of classes that are in the lookup are called: e.g. factory is called.\nAnd also objects produced by the factory are called somehow (doesn't matter what they do but they are called).", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536009372", "createdAt": "2020-12-04T10:49:10Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/startup/DevModeInitializerTest.java", "diffHunk": "@@ -299,29 +295,6 @@ public void shouldUseFullPathScannerByDefault() throws Exception {\n                 Mockito.any(FallbackChunk.class));\n     }\n \n-    @Test\n-    public void should_generateOpenApi_when_EndpointPresents()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMDM4Nw==", "bodyText": "Up to you , but I would may be add checks that arguments are not null (if they should not be null ).\nAnd javadocs should be extended so it mentions which arguments are allowed to be null and which not.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536010387", "createdAt": "2020-12-04T10:50:45Z", "author": {"login": "denis-anisimov"}, "path": "fusion-endpoint/src/main/java/com/vaadin/flow/server/frontend/fusion/EndpointGeneratorTaskFactoryImpl.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend.fusion;\n+\n+import java.io.File;\n+\n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n+import com.vaadin.flow.server.frontend.TaskGenerateConnect;\n+import com.vaadin.flow.server.frontend.TaskGenerateOpenApi;\n+\n+/**\n+ * An implementation of the EndpointGeneratorTaskFactory, which creates endpoint generator tasks.\n+ */\n+public class EndpointGeneratorTaskFactoryImpl implements EndpointGeneratorTaskFactory {\n+\n+    @Override\n+    public TaskGenerateConnect createTaskGenerateConnect(File applicationProperties, File openApi, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMTA0NQ==", "bodyText": "I think all (or most) fields may be set final.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536011045", "createdAt": "2020-12-04T10:51:42Z", "author": {"login": "denis-anisimov"}, "path": "fusion-endpoint/src/main/java/com/vaadin/flow/server/frontend/fusion/TaskGenerateConnectImpl.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend.fusion;\n+\n+import java.io.File;\n+import java.util.Objects;\n+\n+import com.vaadin.flow.server.ExecutionFailedException;\n+import com.vaadin.flow.server.frontend.TaskGenerateConnect;\n+import com.vaadin.flow.server.connect.generator.VaadinConnectClientGenerator;\n+import com.vaadin.flow.server.connect.generator.VaadinConnectTsGenerator;\n+\n+import static com.vaadin.flow.server.connect.generator.VaadinConnectClientGenerator.CONNECT_CLIENT_NAME;\n+import static com.vaadin.flow.server.connect.generator.VaadinConnectClientGenerator.CUSTOM_CONNECT_CLIENT_NAME;\n+\n+/**\n+ * Generate the Vaadin TS files for endpoints, and the Client API file.\n+ */\n+public class TaskGenerateConnectImpl extends AbstractTaskConnectGenerator implements TaskGenerateConnect {\n+\n+    private File outputFolder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMTI0OA==", "bodyText": "All fields are most likely final.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536011248", "createdAt": "2020-12-04T10:52:00Z", "author": {"login": "denis-anisimov"}, "path": "fusion-endpoint/src/main/java/com/vaadin/flow/server/frontend/fusion/TaskGenerateOpenApiImpl.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend.fusion;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n+import com.vaadin.flow.server.ExecutionFailedException;\n+import com.vaadin.flow.server.frontend.TaskGenerateOpenApi;\n+import com.vaadin.flow.server.connect.generator.OpenApiSpecGenerator;\n+\n+/**\n+ * Generate OpenAPI json file for Vaadin Endpoints.\n+ */\n+public class TaskGenerateOpenApiImpl extends AbstractTaskConnectGenerator implements TaskGenerateOpenApi {\n+\n+    private File javaSourceFolder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMjQ5OQ==", "bodyText": "Do you need this class to be Serializable?\nDoes this class even implement Serializable?\nI think the class should not be Serializable : it's not stored anywhere.\nSo if the class is serializable then you should care about transient fields: they won't be restored after deseriallization.\nIf class should not be serialzable then transient is not needed here.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536012499", "createdAt": "2020-12-04T10:53:57Z", "author": {"login": "denis-anisimov"}, "path": "fusion-endpoint/src/main/java/com/vaadin/flow/server/frontend/fusion/TaskGenerateOpenApiImpl.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend.fusion;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n+import com.vaadin.flow.server.ExecutionFailedException;\n+import com.vaadin.flow.server.frontend.TaskGenerateOpenApi;\n+import com.vaadin.flow.server.connect.generator.OpenApiSpecGenerator;\n+\n+/**\n+ * Generate OpenAPI json file for Vaadin Endpoints.\n+ */\n+public class TaskGenerateOpenApiImpl extends AbstractTaskConnectGenerator implements TaskGenerateOpenApi {\n+\n+    private File javaSourceFolder;\n+    private transient ClassLoader classLoader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b028a7da9a47dc0c51d1bbe477ed0c6688a2edd6"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73cc7610e8e4391d89fb8d3e6ac9d3eeeeec830a", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/73cc7610e8e4391d89fb8d3e6ac9d3eeeeec830a", "committedDate": "2020-12-04T12:54:39Z", "message": "add final modifier, remove unnecessary transient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1479f707d26a1cac677a5006451b072a2ae051a", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/b1479f707d26a1cac677a5006451b072a2ae051a", "committedDate": "2020-12-04T13:34:38Z", "message": "add tests in DevModeInitializerTest to very ednpoint tasks execution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MTE4NDU4", "url": "https://github.com/vaadin/flow/pull/9499#pullrequestreview-545118458", "createdAt": "2020-12-04T16:38:24Z", "commit": {"oid": "b1479f707d26a1cac677a5006451b072a2ae051a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozODoyNFrOH_Y0Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo0MDo0MFrOH_Y5vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyODkwNg==", "bodyText": "typo?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Class<?> loadCassFromClassFindler(Class<?> clz) {\n          \n          \n            \n                private Class<?> loadClassFromClassFindler(Class<?> clz) {", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536228906", "createdAt": "2020-12-04T16:38:24Z", "author": {"login": "platosha"}, "path": "flow-maven-plugin/src/main/java/com/vaadin/flow/utils/LookupImpl.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n+\n+/**\n+ * An implementation of Lookup, which could be used to find service(s) of a give\n+ * type.\n+ */\n+public class LookupImpl implements Lookup {\n+\n+    private ClassFinder classFinder;\n+\n+    /**\n+     * Creates an implementation of Lookup.\n+     * \n+     * @param classFinder\n+     *            for searching service implementations.\n+     */\n+    public LookupImpl(ClassFinder classFinder) {\n+        this.classFinder = classFinder;\n+    }\n+\n+    @Override\n+    public <T> T lookup(Class<T> serviceClass) {\n+        return lookupAll(serviceClass).stream().findFirst().orElse(null);\n+    }\n+\n+    @Override\n+    public <T> List<T> lookupAll(Class<T> serviceClass) {\n+        Set<?> subTypes = classFinder\n+                .getSubTypesOf(loadCassFromClassFindler(serviceClass));\n+        List<T> result = new ArrayList<>(subTypes.size());\n+        try {\n+            for (Object clazz : subTypes) {\n+                if (!ReflectTools.isInstantiableService((Class<?>) clazz)) {\n+                    continue;\n+                }\n+                Class<?> serviceType = serviceClass.getClassLoader()\n+                        .loadClass(((Class<?>) clazz).getName());\n+                result.add(serviceClass\n+                        .cast(ReflectTools.createInstance(serviceType)));\n+            }\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalStateException(\"Could not find service class\", e);\n+        }\n+        return result;\n+    }\n+\n+    private Class<?> loadCassFromClassFindler(Class<?> clz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1479f707d26a1cac677a5006451b072a2ae051a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzMDMzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * An implementation of Lookup, which could be used to find service(s) of a give\n          \n          \n            \n             * type.\n          \n          \n            \n             * An implementation of Lookup, which could be used to find service(s) of a given\n          \n          \n            \n             * type.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r536230332", "createdAt": "2020-12-04T16:40:40Z", "author": {"login": "platosha"}, "path": "flow-maven-plugin/src/main/java/com/vaadin/flow/utils/LookupImpl.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n+\n+/**\n+ * An implementation of Lookup, which could be used to find service(s) of a give\n+ * type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1479f707d26a1cac677a5006451b072a2ae051a"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf87f70d4937e9f7ab95fec0fce0728219118e66", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/bf87f70d4937e9f7ab95fec0fce0728219118e66", "committedDate": "2020-12-07T11:23:23Z", "message": "fix typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57482521139643d0fb6cb123321a2009a0edca44", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/57482521139643d0fb6cb123321a2009a0edca44", "committedDate": "2020-12-07T11:40:51Z", "message": "null check and improve javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f0d83d8e3a3d0eca28fb5ccee3370617ef9d096", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/4f0d83d8e3a3d0eca28fb5ccee3370617ef9d096", "committedDate": "2020-12-07T11:41:22Z", "message": "Merge branch 'master' into haijian/fusion-server-module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08b46428e7692433de7bb90cdcfebdf1688c290d", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/08b46428e7692433de7bb90cdcfebdf1688c290d", "committedDate": "2020-12-07T11:49:40Z", "message": "add special check for ClassFinder in LookupImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aca21504210c30e8d51085bcb9b67fead0784819", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/aca21504210c30e8d51085bcb9b67fead0784819", "committedDate": "2020-12-07T22:02:47Z", "message": "get ClassFinder from lookup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NjExNzYw", "url": "https://github.com/vaadin/flow/pull/9499#pullrequestreview-546611760", "createdAt": "2020-12-07T23:03:55Z", "commit": {"oid": "aca21504210c30e8d51085bcb9b67fead0784819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzowMzo1NVrOIA-zAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzowMzo1NVrOIA-zAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5OTc3Nw==", "bodyText": "A \"NullPointerException\" could be thrown; \"lookup\" is nullable here.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r537899777", "createdAt": "2020-12-07T23:03:55Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DevModeInitializer.java", "diffHunk": "@@ -376,8 +381,6 @@ public static void initDevModeHandler(Set<Class<?>> classes,\n                 .withEmbeddableWebComponents(true).enablePnpm(enablePnpm)\n                 .withHomeNodeExecRequired(useHomeNodeExec).build();\n \n-        Lookup lookup = vaadinContext.getAttribute(Lookup.class);\n-\n         // Check whether executor is provided by the caller (framework)\n         Executor service = lookup.lookup(Executor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca21504210c30e8d51085bcb9b67fead0784819"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f555a1b1fd4ea03c49a1f1159db397d4e761cde1", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/f555a1b1fd4ea03c49a1f1159db397d4e761cde1", "committedDate": "2020-12-08T10:05:54Z", "message": "add EndpointGeneratorTaskFactory to LookupInitializer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MDExMjk1", "url": "https://github.com/vaadin/flow/pull/9499#pullrequestreview-547011295", "createdAt": "2020-12-08T10:11:43Z", "commit": {"oid": "f555a1b1fd4ea03c49a1f1159db397d4e761cde1"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MDI5MzAw", "url": "https://github.com/vaadin/flow/pull/9499#pullrequestreview-547029300", "createdAt": "2020-12-08T10:21:12Z", "commit": {"oid": "f555a1b1fd4ea03c49a1f1159db397d4e761cde1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MDkyMTc3", "url": "https://github.com/vaadin/flow/pull/9499#pullrequestreview-547092177", "createdAt": "2020-12-08T10:58:22Z", "commit": {"oid": "f555a1b1fd4ea03c49a1f1159db397d4e761cde1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo1ODoyMlrOIBTtTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo1ODoyMlrOIBTtTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0MjM4MA==", "bodyText": "Remove this use of \"DeprecatedPolymerPublishedEventHandler\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9499#discussion_r538242380", "createdAt": "2020-12-08T10:58:22Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/LookupInitializer.java", "diffHunk": "@@ -58,7 +59,8 @@\n  *\n  */\n @HandlesTypes({ ResourceProvider.class, InstantiatorFactory.class,\n-        DeprecatedPolymerPublishedEventHandler.class })\n+        DeprecatedPolymerPublishedEventHandler.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f555a1b1fd4ea03c49a1f1159db397d4e761cde1"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4569, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}