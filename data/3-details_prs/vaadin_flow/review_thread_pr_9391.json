{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5OTQxNzU0", "number": 9391, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzowODowNlrOE4Qpsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzowODoxMlrOE4Qp4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDI4NTMwOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzowODowNlrOHyE0Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTozMjoyNVrOHyK5Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTc1OQ==", "bodyText": "apparently this could be null to remove it ?", "url": "https://github.com/vaadin/flow/pull/9391#discussion_r522269759", "createdAt": "2020-11-12T17:08:06Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Internal utility class used by data view implementations and components to\n+ * simplify the filtering and sorting handling, but not limited to it.\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ */\n+public final class DataViewUtils {\n+\n+    private static final String COMPONENT_IN_MEMORY_FILTER_KEY = \"component-in-memory-filter-key\";\n+    private static final String COMPONENT_IN_MEMORY_SORTING_KEY = \"component-in-memory-sorting-key\";\n+\n+    private DataViewUtils() {\n+        // avoid instantiating utility class\n+    }\n+\n+    /**\n+     * Gets the in-memory filter of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory filter.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializablePredicate<T>> getComponentFilter(\n+            Component component) {\n+        return Optional.ofNullable((SerializablePredicate<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_FILTER_KEY));\n+    }\n+\n+    /**\n+     * Gets the in-memory sort comparator of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the sort comparator is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory sort comparator.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializableComparator<T>> getComponentSortComparator(\n+            Component component) {\n+        return Optional.ofNullable((SerializableComparator<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_SORTING_KEY));\n+    }\n+\n+    /**\n+     * Sets the in-memory filter to a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param filter\n+     *            component's in-memory filter\n+     * @param <T>\n+     *            items type\n+     */\n+    public static <T> void setComponentFilter(Component component,\n+            SerializablePredicate<T> filter) {\n+        ComponentUtil.setData(component, COMPONENT_IN_MEMORY_FILTER_KEY,\n+                filter);\n+    }\n+\n+    /**\n+     * Sets the in-memory sort comparator to a given component instance.\n+     *\n+     * @param component\n+     *            component instance the sort comparator is bound to\n+     * @param sortComparator\n+     *            component's in-memory sort comparator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1450fe19d136dcb454696ccc113eb0aef18d87a6"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2OTMxOA==", "bodyText": "Yeah, added the explanations about it", "url": "https://github.com/vaadin/flow/pull/9391#discussion_r522369318", "createdAt": "2020-11-12T19:32:25Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Internal utility class used by data view implementations and components to\n+ * simplify the filtering and sorting handling, but not limited to it.\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ */\n+public final class DataViewUtils {\n+\n+    private static final String COMPONENT_IN_MEMORY_FILTER_KEY = \"component-in-memory-filter-key\";\n+    private static final String COMPONENT_IN_MEMORY_SORTING_KEY = \"component-in-memory-sorting-key\";\n+\n+    private DataViewUtils() {\n+        // avoid instantiating utility class\n+    }\n+\n+    /**\n+     * Gets the in-memory filter of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory filter.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializablePredicate<T>> getComponentFilter(\n+            Component component) {\n+        return Optional.ofNullable((SerializablePredicate<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_FILTER_KEY));\n+    }\n+\n+    /**\n+     * Gets the in-memory sort comparator of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the sort comparator is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory sort comparator.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializableComparator<T>> getComponentSortComparator(\n+            Component component) {\n+        return Optional.ofNullable((SerializableComparator<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_SORTING_KEY));\n+    }\n+\n+    /**\n+     * Sets the in-memory filter to a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param filter\n+     *            component's in-memory filter\n+     * @param <T>\n+     *            items type\n+     */\n+    public static <T> void setComponentFilter(Component component,\n+            SerializablePredicate<T> filter) {\n+        ComponentUtil.setData(component, COMPONENT_IN_MEMORY_FILTER_KEY,\n+                filter);\n+    }\n+\n+    /**\n+     * Sets the in-memory sort comparator to a given component instance.\n+     *\n+     * @param component\n+     *            component instance the sort comparator is bound to\n+     * @param sortComparator\n+     *            component's in-memory sort comparator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTc1OQ=="}, "originalCommit": {"oid": "1450fe19d136dcb454696ccc113eb0aef18d87a6"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDI4NTc4OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzowODoxMlrOHyE0iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTozMjo0NVrOHyK53A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTgzNQ==", "bodyText": "apparently this could be null to remove it ?", "url": "https://github.com/vaadin/flow/pull/9391#discussion_r522269835", "createdAt": "2020-11-12T17:08:12Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Internal utility class used by data view implementations and components to\n+ * simplify the filtering and sorting handling, but not limited to it.\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ */\n+public final class DataViewUtils {\n+\n+    private static final String COMPONENT_IN_MEMORY_FILTER_KEY = \"component-in-memory-filter-key\";\n+    private static final String COMPONENT_IN_MEMORY_SORTING_KEY = \"component-in-memory-sorting-key\";\n+\n+    private DataViewUtils() {\n+        // avoid instantiating utility class\n+    }\n+\n+    /**\n+     * Gets the in-memory filter of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory filter.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializablePredicate<T>> getComponentFilter(\n+            Component component) {\n+        return Optional.ofNullable((SerializablePredicate<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_FILTER_KEY));\n+    }\n+\n+    /**\n+     * Gets the in-memory sort comparator of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the sort comparator is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory sort comparator.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializableComparator<T>> getComponentSortComparator(\n+            Component component) {\n+        return Optional.ofNullable((SerializableComparator<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_SORTING_KEY));\n+    }\n+\n+    /**\n+     * Sets the in-memory filter to a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param filter\n+     *            component's in-memory filter\n+     * @param <T>\n+     *            items type\n+     */\n+    public static <T> void setComponentFilter(Component component,\n+            SerializablePredicate<T> filter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1450fe19d136dcb454696ccc113eb0aef18d87a6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2OTUwMA==", "bodyText": "Yeah, added the explanations about it", "url": "https://github.com/vaadin/flow/pull/9391#discussion_r522369500", "createdAt": "2020-11-12T19:32:45Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Internal utility class used by data view implementations and components to\n+ * simplify the filtering and sorting handling, but not limited to it.\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ */\n+public final class DataViewUtils {\n+\n+    private static final String COMPONENT_IN_MEMORY_FILTER_KEY = \"component-in-memory-filter-key\";\n+    private static final String COMPONENT_IN_MEMORY_SORTING_KEY = \"component-in-memory-sorting-key\";\n+\n+    private DataViewUtils() {\n+        // avoid instantiating utility class\n+    }\n+\n+    /**\n+     * Gets the in-memory filter of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory filter.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializablePredicate<T>> getComponentFilter(\n+            Component component) {\n+        return Optional.ofNullable((SerializablePredicate<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_FILTER_KEY));\n+    }\n+\n+    /**\n+     * Gets the in-memory sort comparator of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the sort comparator is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory sort comparator.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializableComparator<T>> getComponentSortComparator(\n+            Component component) {\n+        return Optional.ofNullable((SerializableComparator<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_SORTING_KEY));\n+    }\n+\n+    /**\n+     * Sets the in-memory filter to a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param filter\n+     *            component's in-memory filter\n+     * @param <T>\n+     *            items type\n+     */\n+    public static <T> void setComponentFilter(Component component,\n+            SerializablePredicate<T> filter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTgzNQ=="}, "originalCommit": {"oid": "1450fe19d136dcb454696ccc113eb0aef18d87a6"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3026, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}