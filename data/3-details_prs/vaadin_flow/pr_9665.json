{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwOTMwMjk2", "number": 9665, "title": "Update branch", "bodyText": "", "createdAt": "2020-12-16T06:36:27Z", "url": "https://github.com/vaadin/flow/pull/9665", "merged": true, "mergeCommit": {"oid": "8c75d58009aae3736ed70a62abc878d7e37df259"}, "closed": true, "closedAt": "2020-12-16T06:36:41Z", "author": {"login": "TatuLund"}, "timelineItems": {"totalCount": 181, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgUKVWAH2gAyNTQwOTMwMjk2OjMwMDdhZjdiYTU2NWRhYjE3N2Q5YzE2MDJhMzA0OTM4YjExMzhiMDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmqM2EAFqTU1MzQzMjM0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3007af7ba565dab177d9c1602a304938b1138b01", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/3007af7ba565dab177d9c1602a304938b1138b01", "committedDate": "2020-11-26T14:52:12Z", "message": "test: add unit test for clear all in the servlet init method (#9507)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "899a6ea8fd546addbe9210dcbbfc21f57165ba50", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/899a6ea8fd546addbe9210dcbbfc21f57165ba50", "committedDate": "2020-11-26T15:49:32Z", "message": "Fix: fix file system traversal of theme-loader to stop at root (#9505)\n\nThe theme-loader recursion for themeFolder should stop\r\nat the root level. Also if no theme folder found we should\r\nnot spend time on replacement."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18ef55f477be20e62c9e39d7f0913de4bad7abac", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/18ef55f477be20e62c9e39d7f0913de4bad7abac", "committedDate": "2020-11-27T12:53:03Z", "message": "fix: enable PlainScriptViaJavaScriptIT in OSGi (#9520)\n\nfixes #9461"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4465264dc7c1978390b857dbe2d66fe9c07e2f8", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/f4465264dc7c1978390b857dbe2d66fe9c07e2f8", "committedDate": "2020-11-30T06:44:15Z", "message": "fix: enable PushRouteWildcardParameterIT in OSGi (#9518)\n\nfixes #9459"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2da02bc4422fa27abda8c5ac08d6bbcb628929c", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/a2da02bc4422fa27abda8c5ac08d6bbcb628929c", "committedDate": "2020-11-30T06:44:38Z", "message": "fix: enable BaseHref IT back (#9515)\n\nFixes #9458"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f35c6e0ed3535aee25a44362ab26320f76e4132", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/7f35c6e0ed3535aee25a44362ab26320f76e4132", "committedDate": "2020-11-30T11:01:51Z", "message": "chore: Add information on logging in webpack (#9527)\n\nAdded information on log levels\r\nwith webpack loaders and plugins."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c65750be3605bb3a60a1d0c040620c32bc8e207", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/4c65750be3605bb3a60a1d0c040620c32bc8e207", "committedDate": "2020-11-30T13:50:35Z", "message": "test: fix test class and register view servlet with a context in OSGi (#9528)\n\nPart of vaadin/osgi#5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2589a18dd7a0dde7f09211528b18b1579fbd7a2a", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/2589a18dd7a0dde7f09211528b18b1579fbd7a2a", "committedDate": "2020-12-01T08:10:48Z", "message": "fix: removed `hasClientIssue(\"8236\")` guard as ITs now pass (#9536)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "216dd531c3e13f7dcefb5394d524ed5f38ea42df", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/216dd531c3e13f7dcefb5394d524ed5f38ea42df", "committedDate": "2020-12-01T12:14:02Z", "message": "Fix: Update Lit bundle parser regex. (#9546)\n\nNow the pattern will not fail with a StackOverflowException\r\nas we will search from the start character accepting\r\nany characters until we reach the caught start character with ;"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae47abc0ee03aafe3dbbe1f503804a9db8cf0a92", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/ae47abc0ee03aafe3dbbe1f503804a9db8cf0a92", "committedDate": "2020-12-02T06:43:01Z", "message": "fix: Enable lit css importing (#9550)\n\nFixes #9532"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "079c7d260a42ee87c474844ef93bc2275ce44b3a", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/079c7d260a42ee87c474844ef93bc2275ce44b3a", "committedDate": "2020-12-02T11:33:35Z", "message": "fix: use provided executor for frontend tools (#9553)\n\nfixes vaadin/spring#691"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a635dc68edca91cb74af6dec4f4150e756fbf579", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/a635dc68edca91cb74af6dec4f4150e756fbf579", "committedDate": "2020-12-04T07:07:48Z", "message": "feat: Resource handling to not need plugin copying (#9558)\n\nFixed the url handling so that theme resources\r\nget prepended with theme/[themeName] while\r\nhaving the correct absolute path. With this we can handle\r\nthese url resources with the css-loader which in turn\r\nleads to file-loader gettign the files for copying.\r\n\r\nExternal url are still not touched in any way.\r\n\r\npart of #9410 and #9533"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5957bf93ff6bab0c93b2d2744e5f7f7477141a4d", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/5957bf93ff6bab0c93b2d2744e5f7f7477141a4d", "committedDate": "2020-12-04T13:08:05Z", "message": "fix: file-loader name for windows execution (#9575)\n\nWindows file path separator \\ should not\r\nbe used as it will result in %0B when it should\r\nbe /"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16f75856e1297096b4974c0e5fed1ec31f8cbda9", "author": {"user": {"login": "KellyShao", "name": "Kelly Shao"}}, "url": "https://github.com/vaadin/flow/commit/16f75856e1297096b4974c0e5fed1ec31f8cbda9", "committedDate": "2020-12-04T15:14:52Z", "message": "test: Fixed flaky tests caused by variable ui in ValidatorTestBase.java (#9524)\n\nAdded a ui variable in the ValidatorTestBase class to attach strong reference, in order to avoid garbage collecting it during the test run."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dedb8dd1e643e09bc977ffc0c0a6c4a3928b38ed", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/dedb8dd1e643e09bc977ffc0c0a6c4a3928b38ed", "committedDate": "2020-12-07T07:49:46Z", "message": "refactor: get Executor service from Lookup instead init params (#9572)\n\nfixes #9570"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c60b51bd775a036982af580998e89097e165751c", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/c60b51bd775a036982af580998e89097e165751c", "committedDate": "2020-12-07T08:25:43Z", "message": "fix: Add missing refreshAll method to data view\n\nAdds the missed refresh all method to data view API.\r\n\r\nFixes: #9574"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "152cdcb0474fecff28fa5237d847a131843ba1ae", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/152cdcb0474fecff28fa5237d847a131843ba1ae", "committedDate": "2020-12-07T09:40:17Z", "message": "chore: Update contributing guide with setup info (#9576)\n\nThe contribution guide was missing the project setup information.\r\n\r\nThere were outdated instructions in the readme, which was on the other hand not up to date and only had instructions for Eclipse. Now everything is in contribution guide and readme is short and simple, pointing to contribution guide for those who want to work with the project."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1991961ce7779aec6b81800ab254867f6c4b5295", "author": {"user": {"login": "fluorumlabs", "name": "Artem Godin"}}, "url": "https://github.com/vaadin/flow/commit/1991961ce7779aec6b81800ab254867f6c4b5295", "committedDate": "2020-12-07T09:59:32Z", "message": "fix!: Make VaadinService.dependencyFilters unmodifiable\n\nWhile the change is backwards compatible from API perspective, it could be considered a behavior change although there is quite low risk of exposure in apps. Thus targeting 2.5 for the LTS and the recently released 5.0."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3735611f8d945b13cb1d40ffceb5b217d48d46e", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/a3735611f8d945b13cb1d40ffceb5b217d48d46e", "committedDate": "2020-12-08T10:08:10Z", "message": "fix: encode attribute value during transfer from embedded web app (#9583)\n\nencode attribute value during transfer from embedded web app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ba194f354ea4ee039324e7ca9d42eece5a50708", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/4ba194f354ea4ee039324e7ca9d42eece5a50708", "committedDate": "2020-12-08T11:04:24Z", "message": "chore: move fusion endpoint code to fusion-endpoint module (#9499)\n\nFixes: #9354\r\nmove fusion code to a separate fusion-endpoint module, so that the fusion dependencies which are not OSGi compatible can be removed from the flow-server module.\r\n\r\n- move the code in the connect package  to fusion-server\r\n- removed the non OSGi compatible packages from the bnd file in flow-server\r\n- change  `TaskGenerateOpenApi` and `TaskGenerateConnect` to interfaces in flow-server, have the implementations in fusion-endpoint since they are using code inside the connect package\r\n- Move endpoint related tests:\r\n   - from NodeTasksTest to  NodeTasksEndpointTest, \r\n   - from DevModeInitializerTest to DevModeInitializerEndpointTest \r\n- Add a `LookupImpl` class in the `flow-maven-plugin` module for finding endpoint services.\r\n- Introduce a `isInstantiableService`method in `ReflectTools`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd84a1d4a7932f92c2f08f30cfe015ec59969a73", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/bd84a1d4a7932f92c2f08f30cfe015ec59969a73", "committedDate": "2020-12-08T11:38:06Z", "message": "feat: Embedded component appTheme support (#9588)\n\nAdd support for application theme with\r\nembedded components.\r\n\r\nFixes #8564"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb5bc35d9abf445406f1087acaaec26aeb906263", "author": {"user": {"login": "tanbt", "name": "Tan Bui"}}, "url": "https://github.com/vaadin/flow/commit/cb5bc35d9abf445406f1087acaaec26aeb906263", "committedDate": "2020-12-09T08:00:51Z", "message": "feat: Enable importing CSS from node_modules (#9543)\n\nEnable using CSS files from installed node_modules by adding 'importCss' to theme/my-theme/theme.json.\r\n\r\nFixes #9410"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89190a5a6d173bd7bec86306e658d08bc4eaab6c", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/89190a5a6d173bd7bec86306e658d08bc4eaab6c", "committedDate": "2020-12-09T10:07:10Z", "message": "refactor: simplify ResourceProvider (#9609)\n\nfixes #9605"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0a6e84eda0b2e838ef05bb0978ecba6707921c3", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/f0a6e84eda0b2e838ef05bb0978ecba6707921c3", "committedDate": "2020-12-09T13:04:44Z", "message": "chore: add internal classes to access classloader and init context (#9618)\n\n* chore: add internal classes to access classloader and init context\r\n\r\nrelated to #9601 : needed to restore OSGi resource provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93a0be290e3d4ed6c9328d5503ecd80463faf64a", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/93a0be290e3d4ed6c9328d5503ecd80463faf64a", "committedDate": "2020-12-09T20:31:03Z", "message": "fix: loading indicator visible and isActive true while endpoint fetch (#9593)\n\n* fix: loading indicator visible and isActive true while endpoint fetch\r\n\r\n* Clarified code and added test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5703853db8142ea2f6ecf928fa1b6c91ad42739f", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/5703853db8142ea2f6ecf928fa1b6c91ad42739f", "committedDate": "2020-12-10T07:49:49Z", "message": "fix: theme files can now be referenced as theme/theme-name (#9590)\n\nTheme files are now copied under theme/[theme-name]\r\nand can be referenced by theme/them-name/path/file.ff\r\neven though they are located at VAADIN/static\r\n\r\nFixes: #9405 and #9535"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5d2162833064dd0ee15af47a68d4a3a66b24765", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/c5d2162833064dd0ee15af47a68d4a3a66b24765", "committedDate": "2020-12-10T09:36:04Z", "message": "Fix: Generated theme.js is now named theme.generated.js (#9616)\n\nmy-theme.js is now generated as my-theme.generated.js\r\n\r\nFixes #9595"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bb6181293d9f29f333d7977985f4c719af0e06a", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/7bb6181293d9f29f333d7977985f4c719af0e06a", "committedDate": "2020-12-10T12:20:17Z", "message": "Feat: Check that npm resources are available (#9617)\n\nCheck that we have named npm resources\r\navailable or throw an exception informing\r\nthe user to install it using a NpmPackage\r\nannotation or manually with (p)npm i\r\n\r\nFixes #9615"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3298e3e973f79c0f93687cd963fad55844eb27b", "author": {"user": {"login": "taefi", "name": "Soroosh Taefi"}}, "url": "https://github.com/vaadin/flow/commit/f3298e3e973f79c0f93687cd963fad55844eb27b", "committedDate": "2020-12-11T05:20:03Z", "message": "refactor: rename the app-theme root folder from theme to themes (#9626)\n\nFixes #9611"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbfa1e7e655e35f5c2d280248899eab3e92ac0e7", "author": {"user": {"login": "taefi", "name": "Soroosh Taefi"}}, "url": "https://github.com/vaadin/flow/commit/bbfa1e7e655e35f5c2d280248899eab3e92ac0e7", "committedDate": "2020-12-11T12:15:33Z", "message": "refactor: refine renaming and incorrect paths in ThemeIT (#9634)\n\n* rename app-theme root folder to themes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df7a5f80b8c77f5d1505ecd6aea7e1adf70141bf", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/df7a5f80b8c77f5d1505ecd6aea7e1adf70141bf", "committedDate": "2020-12-14T08:01:11Z", "message": "chore: fix flaky tests that depends on mock count (#9631)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31796bb835221fcbd567bc3779d7c5b53178c043", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/31796bb835221fcbd567bc3779d7c5b53178c043", "committedDate": "2020-12-15T07:24:46Z", "message": "chore: create deepClean profile (#9311)\n\nUsing the deepClean profile one can\r\nclean up all the generated files and\r\nnode_modules folders from all test modules."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e30cf1182b3b61c83896ddeec42b88ba85b6b7a", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/6e30cf1182b3b61c83896ddeec42b88ba85b6b7a", "committedDate": "2020-12-15T13:12:49Z", "message": "test: add document.css level styles tests (#9646)\n\nAdds a tests for checking that the document.css file is injected to the document scope and not injected to embedded element shadow root.\r\n\r\nFixes #9552"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/fafc0f21a693a13a95f48c1ca307de3a548275c9", "committedDate": "2020-12-16T06:21:38Z", "message": "refactor: extract common config functionality and introduce add config (#9635)\n\nrefactor: extract common config functionality and introduce add config\r\n\r\npart of #9417"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxODI4", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431828", "createdAt": "2020-12-16T07:55:38Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTozOFrOIG4Sdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTozOFrOIG4Sdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDU5OA==", "bodyText": "Define a constant instead of duplicating this literal \"jar!/\" 3 times.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084598", "createdAt": "2020-12-16T07:55:38Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.server.AbstractPropertyConfiguration;\n+import com.vaadin.flow.server.VaadinContext;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.impl.JsonUtil;\n+\n+import static com.vaadin.flow.server.Constants.VAADIN_SERVLET_RESOURCES;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.TOKEN_FILE;\n+\n+/**\n+ * Default implementation of {@link ApplicationConfigurationFactory}.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+public class DefaultApplicationConfigurationFactory\n+        extends AbstractConfigurationFactory\n+        implements ApplicationConfigurationFactory {\n+\n+    protected static class ApplicationConfigurationImpl extends\n+            AbstractPropertyConfiguration implements ApplicationConfiguration {\n+\n+        private final VaadinContext context;\n+\n+        protected ApplicationConfigurationImpl(VaadinContext context,\n+                Map<String, String> properties) {\n+            super(properties);\n+            this.context = context;\n+        }\n+\n+        @Override\n+        public boolean isProductionMode() {\n+            return getBooleanProperty(SERVLET_PARAMETER_PRODUCTION_MODE, false);\n+        }\n+\n+        @Override\n+        public Enumeration<String> getPropertyNames() {\n+            return Collections.enumeration(getProperties().keySet());\n+        }\n+\n+        @Override\n+        public VaadinContext getContext() {\n+            return context;\n+        }\n+\n+    }\n+\n+    @Override\n+    public ApplicationConfiguration create(VaadinContext context) {\n+        Map<String, String> props = new HashMap<>();\n+        for (final Enumeration<String> e = context.getContextParameterNames(); e\n+                .hasMoreElements();) {\n+            final String name = e.nextElement();\n+            props.put(name, context.getContextParameter(name));\n+        }\n+        try {\n+            JsonObject buildInfo = JsonUtil\n+                    .parse(getTokenFileFromClassloader(context));\n+\n+            props.putAll(getConfigParametersUsingTokenData(buildInfo));\n+        } catch (IOException exception) {\n+            throw new UncheckedIOException(exception);\n+        }\n+        return new ApplicationConfigurationImpl(context, props);\n+    }\n+\n+    /**\n+     * Gets token file from the classpath using the provided {@code context}.\n+     * <p>\n+     * The {@code contextClass} may be a class which is defined in the Web\n+     * Application module/bundle and in this case it may be used to get Web\n+     * Application resources. Also a {@link VaadinContext} {@code context}\n+     * instance may be used to get a context of the Web Application (since the\n+     * {@code contextClass} may be a class not from Web Application module). In\n+     * WAR case it doesn't matter which class is used to get the resources (Web\n+     * Application classes or e.g. \"flow-server\" classes) since they are loaded\n+     * by the same {@link ClassLoader}. But in OSGi \"flow-server\" module classes\n+     * can't be used to get Web Application resources since they are in\n+     * different bundles.\n+     * \n+     * @param context\n+     *            a VaadinContext which may provide information how to get token\n+     *            file for the web application\n+     * @return the token file content\n+     * @throws IOException\n+     *             if I/O fails during access to the token file\n+     */\n+    protected String getTokenFileFromClassloader(VaadinContext context)\n+            throws IOException {\n+        String tokenResource = VAADIN_SERVLET_RESOURCES + TOKEN_FILE;\n+\n+        Lookup lookup = context.getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);\n+\n+        List<URL> resources = resourceProvider\n+                .getApplicationResources(tokenResource);\n+\n+        // Accept resource that doesn't contain\n+        // 'jar!/META-INF/Vaadin/config/flow-build-info.json'\n+        URL resource = resources.stream()\n+                .filter(url -> !url.getPath().endsWith(\"jar!/\" + tokenResource))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxODM2", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431836", "createdAt": "2020-12-16T07:55:39Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTozOVrOIG4SfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTozOVrOIG4SfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDYwNA==", "bodyText": "Remove this use of \"Thread.sleep()\".", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084604", "createdAt": "2020-12-16T07:55:39Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java", "diffHunk": "@@ -521,13 +534,14 @@ public void start_twoInstances_secondInstanceUsesAnotherPort()\n         // since the timeout is quite big the server port still should be\n         // available and the second instance should try to reuse it\n \n-        DevModeHandler.start(0, configuration, npmFolder,\n+        DevModeHandler.start(0, createDevModeLookup(), npmFolder,\n                 CompletableFuture.completedFuture(null));\n \n         // make checks only if webpack has not yet completed\n \n-        DevModeHandler anotherHandler = DevModeHandler.start(0, configuration,\n-                npmFolder, CompletableFuture.completedFuture(null));\n+        DevModeHandler anotherHandler = DevModeHandler.start(0,\n+                createDevModeLookup(), npmFolder,\n+                CompletableFuture.completedFuture(null));\n \n         while (handler.getPort() == 0) {\n             Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 369}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxODQy", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431842", "createdAt": "2020-12-16T07:55:40Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0MFrOIG4SgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0MFrOIG4SgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDYwOA==", "bodyText": "This call to \"add()\" may be a performance hot spot if the collection is large.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084608", "createdAt": "2020-12-16T07:55:40Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DeferredServletContextInitializers.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.server.VaadinContext;\n+\n+/**\n+ * Internal collection of initializers which may not be executed immediately but\n+ * requires a {@link Lookup} instance which will be set in the\n+ * {@link VaadinContext} ({@link ServletContext}) only when\n+ * {@link LookupInitializer} completed.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+class DeferredServletContextInitializers {\n+\n+    /**\n+     * A callback which will be called to run\n+     * {@link ServletContainerInitializer} logic once a {@link ServletContext}\n+     * is initialized with {@link Lookup}.\n+     * \n+     * @author Vaadin Ltd\n+     * @since\n+     *\n+     */\n+    interface Initializer {\n+        /**\n+         * Runs {@link ServletContainerInitializer} logic with the provided\n+         * {@code context}.\n+         * \n+         * @param context\n+         *            a ServletContext for the initializer\n+         * @throws ServletException\n+         *             thrown if the initializer throws an exception\n+         */\n+        void init(ServletContext context) throws ServletException;\n+    }\n+\n+    private final List<Initializer> initializers = new CopyOnWriteArrayList<>();\n+\n+    /**\n+     * Adds deferred initializer.\n+     * \n+     * @param initializer\n+     *            an initializer\n+     */\n+    void addInitializer(Initializer initializer) {\n+        initializers.add(initializer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxODU4", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431858", "createdAt": "2020-12-16T07:55:41Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0MVrOIG4Slg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0MVrOIG4Slg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDYzMA==", "bodyText": "Replace this lambda with a method reference.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084630", "createdAt": "2020-12-16T07:55:41Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java", "diffHunk": "@@ -472,4 +519,23 @@ public void destroy() {\n         super.destroy();\n         getService().destroy();\n     }\n+\n+    private VaadinServletContext initializeContext() {\n+        ServletContext servletContext = getServletConfig().getServletContext();\n+        VaadinServletContext vaadinServletContext = new VaadinServletContext(\n+                servletContext);\n+        // ensure the web application classloader is available via context\n+        ApplicationClassLoaderAccess access = () -> servletContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxODcw", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431870", "createdAt": "2020-12-16T07:55:42Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0MlrOIG4SoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0MlrOIG4SoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDY0MQ==", "bodyText": "Rename \"instantiator\" which hides the field declared at line 191.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084641", "createdAt": "2020-12-16T07:55:42Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java", "diffHunk": "@@ -407,11 +413,33 @@ protected Instantiator createInstantiator() throws ServiceException {\n      */\n     protected Optional<Instantiator> loadInstantiators()\n             throws ServiceException {\n-        List<Instantiator> instantiators = StreamSupport\n+        Lookup lookup = getContext().getAttribute(Lookup.class);\n+        List<Instantiator> instantiators = null;\n+        if (lookup != null) {\n+            // lookup may be null in tests\n+            Collection<InstantiatorFactory> factories = lookup\n+                    .lookupAll(InstantiatorFactory.class);\n+            instantiators = new ArrayList<>(factories.size());\n+            for (InstantiatorFactory factory : factories) {\n+                Instantiator instantiator = factory.createInstantitor(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxODgw", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431880", "createdAt": "2020-12-16T07:55:43Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0M1rOIG4Spw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0M1rOIG4Spw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDY0Nw==", "bodyText": "Remove this use of \"init\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084647", "createdAt": "2020-12-16T07:55:43Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java", "diffHunk": "@@ -407,11 +413,33 @@ protected Instantiator createInstantiator() throws ServiceException {\n      */\n     protected Optional<Instantiator> loadInstantiators()\n             throws ServiceException {\n-        List<Instantiator> instantiators = StreamSupport\n+        Lookup lookup = getContext().getAttribute(Lookup.class);\n+        List<Instantiator> instantiators = null;\n+        if (lookup != null) {\n+            // lookup may be null in tests\n+            Collection<InstantiatorFactory> factories = lookup\n+                    .lookupAll(InstantiatorFactory.class);\n+            instantiators = new ArrayList<>(factories.size());\n+            for (InstantiatorFactory factory : factories) {\n+                Instantiator instantiator = factory.createInstantitor(this);\n+                // if the existing instantiator is converted to new API then\n+                // let's respect its deprecated method\n+                if (instantiator != null && instantiator.init(this)) {\n+                    instantiators.add(instantiator);\n+                }\n+            }\n+        }\n+\n+        if (instantiators == null) {\n+            instantiators = new ArrayList<>();\n+        }\n+\n+        // the code to support previous way of loading instantiators\n+        StreamSupport\n                 .stream(ServiceLoader.load(Instantiator.class, getClassLoader())\n                         .spliterator(), false)\n                 .filter(iterator -> iterator.init(this))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxODkx", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431891", "createdAt": "2020-12-16T07:55:45Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0NVrOIG4SsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0NVrOIG4SsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDY1Ng==", "bodyText": "Remove this use of \"init\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084656", "createdAt": "2020-12-16T07:55:45Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java", "diffHunk": "@@ -407,11 +413,33 @@ protected Instantiator createInstantiator() throws ServiceException {\n      */\n     protected Optional<Instantiator> loadInstantiators()\n             throws ServiceException {\n-        List<Instantiator> instantiators = StreamSupport\n+        Lookup lookup = getContext().getAttribute(Lookup.class);\n+        List<Instantiator> instantiators = null;\n+        if (lookup != null) {\n+            // lookup may be null in tests\n+            Collection<InstantiatorFactory> factories = lookup\n+                    .lookupAll(InstantiatorFactory.class);\n+            instantiators = new ArrayList<>(factories.size());\n+            for (InstantiatorFactory factory : factories) {\n+                Instantiator instantiator = factory.createInstantitor(this);\n+                // if the existing instantiator is converted to new API then\n+                // let's respect its deprecated method\n+                if (instantiator != null && instantiator.init(this)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxOTA0", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431904", "createdAt": "2020-12-16T07:55:46Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0NlrOIG4SuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0NlrOIG4SuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDY2NA==", "bodyText": "Replace this if-then-else statement by a single return statement.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084664", "createdAt": "2020-12-16T07:55:46Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ReflectTools.java", "diffHunk": "@@ -825,6 +825,38 @@ public static Object getAnnotationMethodValue(Annotation annotation,\n         return Optional.empty();\n     }\n \n+    /**\n+     * Check if a class can be instantiated via its default \n+     * constructor via reflection.\n+     * \n+     * @param clazz\n+     *            the class to check\n+     * @return true if the class can be instantiated, otherwise false\n+     */\n+    public static boolean isInstantiableService(Class<?> clazz) {\n+        if (clazz.isInterface()) {\n+          return false;\n+        }\n+        if (clazz.isSynthetic()) {\n+          return false;\n+        }\n+        if (Modifier.isAbstract(clazz.getModifiers())) {\n+          return false;\n+        }\n+        if (!Modifier.isPublic(clazz.getModifiers())) {\n+          return false;\n+        }\n+        Optional<Constructor<?>> constructor = Stream.of(clazz.getConstructors())\n+            .filter(ctor -> ctor.getParameterCount() == 0).findFirst();\n+        if (!constructor.isPresent() || !Modifier.isPublic(constructor.get().getModifiers())) {\n+          return false;\n+        }\n+        if (clazz.getEnclosingClass() != null && !Modifier.isStatic(clazz.getModifiers())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxOTE1", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431915", "createdAt": "2020-12-16T07:55:47Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0N1rOIG4Svw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0N1rOIG4Svw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDY3MQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084671", "createdAt": "2020-12-16T07:55:47Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/di/Instantiator.java", "diffHunk": "@@ -63,7 +63,12 @@\n      * @return <code>true</code> if this instance should be considered as a\n      *         candidate for usage for the provided service; <code>false</code>\n      *         to opt-out from the selection process\n+     * @deprecated The {@link Instantiator} instance should be created by an\n+     *             {@link InstantiatorFactory} which should just return\n+     *             {@code null} if the provided {@code service} can't be handled\n+     *             by it\n      */\n+    @Deprecated\n     boolean init(VaadinService service);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxOTMw", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431930", "createdAt": "2020-12-16T07:55:48Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0OFrOIG4Syg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0OFrOIG4Syg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDY4Mg==", "bodyText": "This block of commented-out lines of code should be removed.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084682", "createdAt": "2020-12-16T07:55:48Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get names for plugins to install into node_modules.\n+     *\n+     * @return names of plugins to install\n+     */\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\n+                    \"Couldn't locate plugins/webpack-plugins.json, no Webpack plugins for Flow will be installed.\"\n+                        + \"If webpack build fails validate flow-server jar content.\");\n+                return Collections.emptyList();\n+            }\n+\n+            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n+            for (int i = 0; i < plugins.length(); i++) {\n+                pluginsToInstall.add(plugins.getString(i));\n+            }\n+            return pluginsToInstall;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(\n+                \"Couldn't load webpack-plugins.json file\", ioe);\n+        }\n+    }\n+\n+    private void generatePluginFiles(String pluginName) throws IOException {\n+        // Get the target folder where the plugin should be installed to\n+        File pluginTargetFile = new File(nodeModulesFolder,\n+            \"@vaadin/\" + pluginName);\n+\n+        final String pluginFolderName = \"plugins/\" + pluginName + \"/\";\n+        final JsonObject packageJson = getJsonFile(\n+            pluginFolderName + PACKAGE_JSON);\n+        if (packageJson == null) {\n+            log().error(\n+                \"Couldn't locate '{}' for plugin '{}'. Plugin will not be installed.\",\n+                PACKAGE_JSON, pluginName);\n+            return;\n+        }\n+\n+        // Validate installed version and don't override if same\n+        if (pluginTargetFile.exists() && new File(pluginTargetFile,\n+            PACKAGE_JSON).exists()) {\n+            String packageFile = FileUtils\n+                .readFileToString(new File(pluginTargetFile, PACKAGE_JSON),\n+                    StandardCharsets.UTF_8);\n+            final FrontendVersion packageVersion = new FrontendVersion(\n+                Json.parse(packageFile).getString(\"version\"));\n+            FrontendVersion pluginVersion = new FrontendVersion(\n+                packageJson.getString(\"version\"));\n+            if (packageVersion.isEqualTo(pluginVersion)) {\n+                log().debug(\n+                    \"Skipping install of {} for version {} already installed\",\n+                    pluginName, pluginVersion.getFullVersion());\n+                return;\n+            }\n+        }\n+\n+        // Create target folder if necessary\n+        FileUtils.forceMkdir(pluginTargetFile);\n+\n+        // copy only files named in package.json { files }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxOTM3", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431937", "createdAt": "2020-12-16T07:55:49Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0OVrOIG4S1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo0OVrOIG4S1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDY5Mg==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084692", "createdAt": "2020-12-16T07:55:49Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/DeprecatedPolymerPublishedEventHandler.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.template.internal;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Type;\n+\n+import com.vaadin.flow.component.Component;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * Service for injecting the polymer event handler when the module is available.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public interface DeprecatedPolymerPublishedEventHandler extends Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxOTQ5", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431949", "createdAt": "2020-12-16T07:55:50Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MFrOIG4S3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MFrOIG4S3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDcwMQ==", "bodyText": "Remove this use of \"PolymerTemplate\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084701", "createdAt": "2020-12-16T07:55:50Z", "author": {"login": "vaadin-bot"}, "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.lang.reflect.Type;\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * Polymer utilitiy class for handling polymer rpc events for @EventHandler.\n+ *\n+ * Registers {@link PolymerPublishedEventRpcHandler} as a service to make it\n+ * available in {@link Lookup} in an OSGi container. *\n+ * \n+ * @since\n+ */\n+// This is OSGi specific annotation for the class which may be used without\n+// OSGi. But RetentionPolicy.CLASS used for the annotation makes it safe to use\n+// in runtime because JVM doesn't see it.\n+@org.osgi.service.component.annotations.Component(immediate = true)\n+public class PolymerPublishedEventRpcHandler\n+        implements DeprecatedPolymerPublishedEventHandler {\n+\n+    /**\n+     * Validate that the given Component instance is a PolymerTemplate and that\n+     * the value can be converted.\n+     *\n+     * @param instance\n+     *            Component to be validated\n+     * @param argValue\n+     *            received value\n+     * @param convertedType\n+     *            target type that value should be converted to\n+     * @return true if valid template model value\n+     */\n+    @Override\n+    public boolean isTemplateModelValue(Component instance, JsonValue argValue,\n+            Class<?> convertedType) {\n+        return instance instanceof PolymerTemplate\n+                && argValue instanceof JsonObject\n+                && ((PolymerTemplate<?>) instance)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxOTU5", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431959", "createdAt": "2020-12-16T07:55:51Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MVrOIG4S5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MVrOIG4S5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDcwOA==", "bodyText": "Remove this use of \"ModelType\"; it is deprecated. \n Remove this use of \"PolymerTemplate\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084708", "createdAt": "2020-12-16T07:55:51Z", "author": {"login": "vaadin-bot"}, "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.lang.reflect.Type;\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * Polymer utilitiy class for handling polymer rpc events for @EventHandler.\n+ *\n+ * Registers {@link PolymerPublishedEventRpcHandler} as a service to make it\n+ * available in {@link Lookup} in an OSGi container. *\n+ * \n+ * @since\n+ */\n+// This is OSGi specific annotation for the class which may be used without\n+// OSGi. But RetentionPolicy.CLASS used for the annotation makes it safe to use\n+// in runtime because JVM doesn't see it.\n+@org.osgi.service.component.annotations.Component(immediate = true)\n+public class PolymerPublishedEventRpcHandler\n+        implements DeprecatedPolymerPublishedEventHandler {\n+\n+    /**\n+     * Validate that the given Component instance is a PolymerTemplate and that\n+     * the value can be converted.\n+     *\n+     * @param instance\n+     *            Component to be validated\n+     * @param argValue\n+     *            received value\n+     * @param convertedType\n+     *            target type that value should be converted to\n+     * @return true if valid template model value\n+     */\n+    @Override\n+    public boolean isTemplateModelValue(Component instance, JsonValue argValue,\n+            Class<?> convertedType) {\n+        return instance instanceof PolymerTemplate\n+                && argValue instanceof JsonObject\n+                && ((PolymerTemplate<?>) instance)\n+                        .isSupportedClass(convertedType)\n+                && ((JsonObject) argValue).hasKey(\"nodeId\");\n+    }\n+\n+    /**\n+     * Get the template model object and type.\n+     *\n+     * @param template\n+     *            polymer template to get model from\n+     * @param argValue\n+     *            argument value\n+     * @param convertedType\n+     *            value type\n+     * @return the provided model value\n+     * @throws IllegalStateException\n+     *             if the component is not attached to the UI\n+     */\n+    @Override\n+    public Object getTemplateItem(Component template, JsonObject argValue,\n+            Type convertedType) {\n+        final Optional<UI> ui = template.getUI();\n+        if (ui.isPresent()) {\n+            StateNode node = ui.get().getInternals().getStateTree()\n+                    .getNodeById((int) argValue.getNumber(\"nodeId\"));\n+\n+            ModelType propertyType = ((PolymerTemplate<?>) template)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxOTcx", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431971", "createdAt": "2020-12-16T07:55:51Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MlrOIG4S6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MlrOIG4S6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDcxMw==", "bodyText": "Remove this use of \"DeprecatedPolymerPublishedEventHandler\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084713", "createdAt": "2020-12-16T07:55:52Z", "author": {"login": "vaadin-bot"}, "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.lang.reflect.Type;\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * Polymer utilitiy class for handling polymer rpc events for @EventHandler.\n+ *\n+ * Registers {@link PolymerPublishedEventRpcHandler} as a service to make it\n+ * available in {@link Lookup} in an OSGi container. *\n+ * \n+ * @since\n+ */\n+// This is OSGi specific annotation for the class which may be used without\n+// OSGi. But RetentionPolicy.CLASS used for the annotation makes it safe to use\n+// in runtime because JVM doesn't see it.\n+@org.osgi.service.component.annotations.Component(immediate = true)\n+public class PolymerPublishedEventRpcHandler\n+        implements DeprecatedPolymerPublishedEventHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxOTg1", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431985", "createdAt": "2020-12-16T07:55:52Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MlrOIG4S9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1MlrOIG4S9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDcyNg==", "bodyText": "Remove this use of \"PolymerTemplate\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084726", "createdAt": "2020-12-16T07:55:52Z", "author": {"login": "vaadin-bot"}, "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PolymerPublishedEventRpcHandler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.lang.reflect.Type;\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * Polymer utilitiy class for handling polymer rpc events for @EventHandler.\n+ *\n+ * Registers {@link PolymerPublishedEventRpcHandler} as a service to make it\n+ * available in {@link Lookup} in an OSGi container. *\n+ * \n+ * @since\n+ */\n+// This is OSGi specific annotation for the class which may be used without\n+// OSGi. But RetentionPolicy.CLASS used for the annotation makes it safe to use\n+// in runtime because JVM doesn't see it.\n+@org.osgi.service.component.annotations.Component(immediate = true)\n+public class PolymerPublishedEventRpcHandler\n+        implements DeprecatedPolymerPublishedEventHandler {\n+\n+    /**\n+     * Validate that the given Component instance is a PolymerTemplate and that\n+     * the value can be converted.\n+     *\n+     * @param instance\n+     *            Component to be validated\n+     * @param argValue\n+     *            received value\n+     * @param convertedType\n+     *            target type that value should be converted to\n+     * @return true if valid template model value\n+     */\n+    @Override\n+    public boolean isTemplateModelValue(Component instance, JsonValue argValue,\n+            Class<?> convertedType) {\n+        return instance instanceof PolymerTemplate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxOTk4", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553431998", "createdAt": "2020-12-16T07:55:53Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1M1rOIG4TCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1M1rOIG4TCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDc0NQ==", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084745", "createdAt": "2020-12-16T07:55:53Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/HandlerHelper.java", "diffHunk": "@@ -176,4 +189,26 @@ public static String getCancelingRelativePath(String pathToCancel) {\n         return sb.toString();\n     }\n \n+    /**\n+     * Checks if the given URL path contains the directory change instruction\n+     * (dot-dot), taking into account possible double encoding in hexadecimal\n+     * format, which can be injected maliciously.\n+     *\n+     * @param path\n+     *            the URL path to be verified.\n+     * @return {@code true}, if the given path has a directory change\n+     *         instruction, {@code false} otherwise.\n+     */\n+    public static boolean isPathUnsafe(String path) {\n+        // Check that the path does not have '/../', '\\..\\', %5C..%5C,\n+        // %2F..%2F, nor '/..', '\\..', %5C.., %2F..\n+        try {\n+            path = URLDecoder.decode(path, StandardCharsets.UTF_8.name());\n+        } catch (UnsupportedEncodingException e) {\n+            throw new RuntimeException(\"An error occurred during decoding URL.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMDA2", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432006", "createdAt": "2020-12-16T07:55:54Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1NFrOIG4TEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1NFrOIG4TEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDc1Mw==", "bodyText": "This block of commented-out lines of code should be removed.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084753", "createdAt": "2020-12-16T07:55:54Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/AppShellRegistry.java", "diffHunk": "@@ -151,6 +151,11 @@ public void setShell(Class<? extends AppShellConfigurator> shell) {\n     public boolean isShell(Class<?> clz) {\n         assert clz != null;\n         try {\n+            // first try to check without loading class via the {@code clz}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMDE3", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432017", "createdAt": "2020-12-16T07:55:55Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1NVrOIG4THA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1NVrOIG4THA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDc2NA==", "bodyText": "Remove the declaration of thrown exception 'java.io.UnsupportedEncodingException', as it cannot be thrown from method's body.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084764", "createdAt": "2020-12-16T07:55:55Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java", "diffHunk": "@@ -378,16 +379,27 @@ private void transferAttribute(Writer writer, String elementRef,\n      * @param path\n      *            original resource path\n      * @return new resource path, relative to basePath\n+     * @throws UnsupportedEncodingException\n      */\n-    protected String modifyPath(String basePath, String path) {\n+    protected String modifyPath(String basePath, String path)\n+            throws UnsupportedEncodingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMDIw", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432020", "createdAt": "2020-12-16T07:55:56Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1NlrOIG4TIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1NlrOIG4TIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDc2OA==", "bodyText": "Remove this use of \"REQUIRE_HOME_NODE_EXECUTABLE\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084768", "createdAt": "2020-12-16T07:55:56Z", "author": {"login": "vaadin-bot"}, "path": "flow-maven-plugin/src/main/java/com/vaadin/flow/plugin/maven/FlowModeAbstractMojo.java", "diffHunk": "@@ -120,22 +117,6 @@\n     @Parameter(property = Constants.REQUIRE_HOME_NODE_EXECUTABLE, defaultValue = \"false\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMDM5", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432039", "createdAt": "2020-12-16T07:55:57Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1N1rOIG4TLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1N1rOIG4TLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDc4Mg==", "bodyText": "Refactor this code to not nest more than 3 if/for/while/switch/try statements.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084782", "createdAt": "2020-12-16T07:55:57Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "diffHunk": "@@ -296,21 +304,36 @@ private void computeApplicationTheme() throws ClassNotFoundException,\n \n         Class<? extends AbstractTheme> theme = null;\n         String variant = \"\";\n+        String themeName = \"\";\n         if (themes.isEmpty()) {\n             theme = getDefaultTheme();\n         } else {\n             // we have a proper theme or no-theme for the app\n             ThemeData themeData = themes.iterator().next();\n             if (!themeData.isNotheme()) {\n+                String themeClass = themeData.getThemeClass();\n+                if (!themeData.getThemeName().isEmpty() && themeClass != null) {\n+                    throw new IllegalStateException(\n+                        \"Theme name and theme class can not both be specified. \"\n+                            + \"Theme name uses Lumo and can not be used in combination with custom theme class.\");\n+                }\n                 variant = themeData.getVariant();\n-                theme = getFinder().loadClass(themeData.getName());\n+                if (themeClass != null) {\n+                    theme = getFinder().loadClass(themeClass);\n+                } else {\n+                    theme = getDefaultTheme();\n+                    if (theme == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMDUw", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432050", "createdAt": "2020-12-16T07:55:58Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1OFrOIG4TNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1OFrOIG4TNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDc5MA==", "bodyText": "\"servletContext\" is a method parameter, and should not be used for synchronization.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084790", "createdAt": "2020-12-16T07:55:58Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/LookupInitializer.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.HandlesTypes;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.reflect.Modifier;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n+import com.vaadin.flow.di.InstantiatorFactory;\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.server.VaadinServletContext;\n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n+\n+/**\n+ * Standard servlet initializer for collecting all SPI implementations.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+@HandlesTypes({ ResourceProvider.class, InstantiatorFactory.class,\n+        DeprecatedPolymerPublishedEventHandler.class,\n+        EndpointGeneratorTaskFactory.class })\n+public class LookupInitializer\n+        implements ClassLoaderAwareServletContainerInitializer {\n+\n+    private static final String SPI = \" SPI: \";\n+\n+    private static final String ONE_IMPL_REQUIRED = \". Only one implementation should be registered. \"\n+            + \"Use lookupAll to get all instances of the given type.\";\n+\n+    private static final String SEVERAL_IMPLS = \"Found several implementations in the classpath for \";\n+\n+    /**\n+     * This class is private because it's an implementation detail/one of the\n+     * possible implementation and is explicitly made non-overridable because it\n+     * provides the way to override everything.\n+     */\n+    private static class LookupImpl implements Lookup {\n+\n+        private final Map<Class<?>, Collection<Object>> serviceMap;\n+\n+        private LookupImpl(Map<Class<?>, Collection<Object>> initialServices) {\n+            serviceMap = Collections\n+                    .unmodifiableMap(new HashMap<>(initialServices));\n+        }\n+\n+        @Override\n+        public <T> T lookup(Class<T> serviceClass) {\n+            Collection<Object> registered = serviceMap.get(serviceClass);\n+            if (registered == null || registered.isEmpty()) {\n+                ServiceLoader<T> loader = ServiceLoader.load(serviceClass);\n+                List<T> services = new ArrayList<>();\n+                for (Iterator<T> iterator = loader.iterator(); iterator\n+                        .hasNext();) {\n+                    services.add(iterator.next());\n+                }\n+                if (services.size() > 1) {\n+                    throw new IllegalStateException(SEVERAL_IMPLS + serviceClass\n+                            + SPI + services + ONE_IMPL_REQUIRED);\n+                } else if (services.size() == 1) {\n+                    return services.get(0);\n+                }\n+                return null;\n+            } else if (registered.size() > 1) {\n+                throw new IllegalStateException(SEVERAL_IMPLS + serviceClass\n+                        + SPI + registered + ONE_IMPL_REQUIRED);\n+            } else {\n+                return serviceClass.cast(registered.iterator().next());\n+            }\n+        }\n+\n+        @Override\n+        public <T> Collection<T> lookupAll(Class<T> serviceClass) {\n+            List<T> result = new ArrayList<>();\n+            Collection<Object> registered = serviceMap.get(serviceClass);\n+\n+            Set<?> registeredClasses = registered == null\n+                    ? Collections.emptySet()\n+                    : registered.stream().map(Object::getClass)\n+                            .collect(Collectors.toSet());\n+            if (registered != null) {\n+                registered.forEach(\n+                        service -> result.add(serviceClass.cast(service)));\n+            }\n+            ServiceLoader<T> loader = ServiceLoader.load(serviceClass);\n+            for (Iterator<T> iterator = loader.iterator(); iterator\n+                    .hasNext();) {\n+                T next = iterator.next();\n+                if (!registeredClasses.contains(next.getClass())) {\n+                    result.add(next);\n+                }\n+            }\n+            return result;\n+        }\n+    }\n+\n+    private static class CachedStreamData {\n+\n+        private final byte[] data;\n+        private final IOException exception;\n+\n+        private CachedStreamData(byte[] data, IOException exception) {\n+            this.data = data;\n+            this.exception = exception;\n+        }\n+    }\n+\n+    /**\n+     * This class is private because it's an implementation detail/one of the\n+     * possible implementation and should not be available as public because\n+     * {@link LookupInitializer} will find it in the classpath and it will be\n+     * always used instead custom {@link ResourceProvider} implementation.\n+     */\n+    private static class ResourceProviderImpl implements ResourceProvider {\n+\n+        private Map<String, CachedStreamData> cache = new ConcurrentHashMap<>();\n+\n+        @Override\n+        public URL getApplicationResource(String path) {\n+            return ResourceProviderImpl.class.getClassLoader()\n+                    .getResource(path);\n+        }\n+\n+        @Override\n+        public List<URL> getApplicationResources(String path)\n+                throws IOException {\n+            return Collections.list(ResourceProviderImpl.class.getClassLoader()\n+                    .getResources(path));\n+        }\n+\n+        @Override\n+        public URL getClientResource(String path) {\n+            return getApplicationResource(path);\n+        }\n+\n+        @Override\n+        public InputStream getClientResourceAsStream(String path)\n+                throws IOException {\n+            // the client resource should be available in the classpath, so\n+            // its content is cached once. If an exception is thrown then\n+            // something is broken and it's also cached and will be rethrown on\n+            // every subsequent access\n+            CachedStreamData cached = cache.computeIfAbsent(path, key -> {\n+                URL url = getClientResource(key);\n+                try (InputStream stream = url.openStream()) {\n+                    ByteArrayOutputStream tempBuffer = new ByteArrayOutputStream();\n+                    IOUtils.copy(stream, tempBuffer);\n+                    return new CachedStreamData(tempBuffer.toByteArray(), null);\n+                } catch (IOException e) {\n+                    return new CachedStreamData(null, e);\n+                }\n+            });\n+\n+            IOException exception = cached.exception;\n+            if (exception == null) {\n+                return new ByteArrayInputStream(cached.data);\n+            }\n+            throw exception;\n+        }\n+\n+    }\n+\n+    @Override\n+    public void process(Set<Class<?>> classSet, ServletContext servletContext)\n+            throws ServletException {\n+        VaadinServletContext vaadinContext = new VaadinServletContext(\n+                servletContext);\n+        initStandardLookup(classSet, servletContext);\n+\n+        DeferredServletContextInitializers initializers;\n+        synchronized (servletContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 210}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMDY1", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432065", "createdAt": "2020-12-16T07:55:59Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1OVrOIG4TQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NTo1OVrOIG4TQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDgwMw==", "bodyText": "Remove this use of \"DeprecatedPolymerPublishedEventHandler\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084803", "createdAt": "2020-12-16T07:55:59Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/LookupInitializer.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.HandlesTypes;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.reflect.Modifier;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n+import com.vaadin.flow.di.InstantiatorFactory;\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.server.VaadinServletContext;\n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n+\n+/**\n+ * Standard servlet initializer for collecting all SPI implementations.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+@HandlesTypes({ ResourceProvider.class, InstantiatorFactory.class,\n+        DeprecatedPolymerPublishedEventHandler.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMDc4", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432078", "createdAt": "2020-12-16T07:56:00Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowMFrOIG4TTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowMFrOIG4TTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDgxNA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084814", "createdAt": "2020-12-16T07:56:00Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java", "diffHunk": "@@ -135,13 +139,13 @@\n     /**\n      * Default folder for copying front-end resources present in the classpath\n      * jars.\n-     * @deprecated This is deprecated due to a typo.\n-     *             Use DEFAULT_FLOW_RESOURCES_FOLDER instead.\n+     * \n+     * @deprecated This is deprecated due to a typo. Use\n+     *             DEFAULT_FLOW_RESOURCES_FOLDER instead.\n      * @see #DEFAULT_FLOW_RESOURCES_FOLDER\n      */\n     @Deprecated\n-    public static final String DEAULT_FLOW_RESOURCES_FOLDER =\n-            DEFAULT_FLOW_RESOURCES_FOLDER;\n+    public static final String DEAULT_FLOW_RESOURCES_FOLDER = DEFAULT_FLOW_RESOURCES_FOLDER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMDg3", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432087", "createdAt": "2020-12-16T07:56:01Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowMVrOIG4TWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowMVrOIG4TWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDgyNQ==", "bodyText": "Either re-interrupt this method or rethrow the \"InterruptedException\".", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084825", "createdAt": "2020-12-16T07:56:01Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -658,8 +683,10 @@ private boolean doStartWebpack(DeploymentConfiguration config,\n             long ms = (System.nanoTime() - start) / 1000000;\n             getLogger().info(LOG_END, ms);\n             return true;\n-        } catch (IOException | InterruptedException e) {\n+        } catch (IOException e) {\n             getLogger().error(\"Failed to start the webpack process\", e);\n+        } catch (InterruptedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 214}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMDkz", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432093", "createdAt": "2020-12-16T07:56:02Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowMlrOIG4TZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowMlrOIG4TZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDgzNw==", "bodyText": "Reduce this lambda expression number of lines from 37 to at most 20.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084837", "createdAt": "2020-12-16T07:56:02Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "diffHunk": "@@ -43,61 +46,90 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n+    default void onStartup(Set<Class<?>> set, ServletContext context)\n             throws ServletException {\n-        ClassLoader webClassLoader = ctx.getClassLoader();\n-        ClassLoader classLoader = getClass().getClassLoader();\n+        // see DeferredServletContextIntializers\n+        DeferredServletContextInitializers.Initializer deferredInitializer = ctx -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMTA1", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432105", "createdAt": "2020-12-16T07:56:03Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowM1rOIG4TbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowM1rOIG4TbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDg0NQ==", "bodyText": "This block of commented-out lines of code should be removed.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084845", "createdAt": "2020-12-16T07:56:03Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "diffHunk": "@@ -43,61 +46,90 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n+    default void onStartup(Set<Class<?>> set, ServletContext context)\n             throws ServletException {\n-        ClassLoader webClassLoader = ctx.getClassLoader();\n-        ClassLoader classLoader = getClass().getClassLoader();\n+        // see DeferredServletContextIntializers\n+        DeferredServletContextInitializers.Initializer deferredInitializer = ctx -> {\n+            ClassLoader webClassLoader = ctx.getClassLoader();\n+            ClassLoader classLoader = getClass().getClassLoader();\n \n-        /*\n-         * Hack is needed to make a workaround for weird behavior of WildFly\n-         * with skinnywar See https://github.com/vaadin/flow/issues/7805\n-         */\n-        boolean noHack = false;\n-        while (classLoader != null) {\n-            if (classLoader.equals(webClassLoader)) {\n-                noHack = true;\n-                break;\n-            } else {\n-                /*\n-                 * The classloader which has loaded this class ({@code\n-                 * classLoader}) should be either the {@code webClassLoader} or\n-                 * its child: in this case it knows how to handle the classes\n-                 * loaded by the {@code webClassLoader} : it either is able to\n-                 * load them itself or delegate to its parent (which is the\n-                 * {@code webClassLoader}): in this case hack is not needed and\n-                 * the {@link #process(Set, ServletContext)} method can be\n-                 * called directly.\n-                 */\n-                classLoader = classLoader.getParent();\n+            /*\n+             * Hack is needed to make a workaround for weird behavior of WildFly\n+             * with skinnywar See https://github.com/vaadin/flow/issues/7805\n+             */\n+            boolean noHack = false;\n+            while (classLoader != null) {\n+                if (classLoader.equals(webClassLoader)) {\n+                    noHack = true;\n+                    break;\n+                } else {\n+                    /*\n+                     * The classloader which has loaded this class ({@code\n+                     * classLoader}) should be either the {@code webClassLoader}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMTIw", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432120", "createdAt": "2020-12-16T07:56:04Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowNFrOIG4Teg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowNFrOIG4Teg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDg1OA==", "bodyText": "Replace this lambda with a method reference.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084858", "createdAt": "2020-12-16T07:56:04Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "diffHunk": "@@ -43,61 +46,90 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n+    default void onStartup(Set<Class<?>> set, ServletContext context)\n             throws ServletException {\n-        ClassLoader webClassLoader = ctx.getClassLoader();\n-        ClassLoader classLoader = getClass().getClassLoader();\n+        // see DeferredServletContextIntializers\n+        DeferredServletContextInitializers.Initializer deferredInitializer = ctx -> {\n+            ClassLoader webClassLoader = ctx.getClassLoader();\n+            ClassLoader classLoader = getClass().getClassLoader();\n \n-        /*\n-         * Hack is needed to make a workaround for weird behavior of WildFly\n-         * with skinnywar See https://github.com/vaadin/flow/issues/7805\n-         */\n-        boolean noHack = false;\n-        while (classLoader != null) {\n-            if (classLoader.equals(webClassLoader)) {\n-                noHack = true;\n-                break;\n-            } else {\n-                /*\n-                 * The classloader which has loaded this class ({@code\n-                 * classLoader}) should be either the {@code webClassLoader} or\n-                 * its child: in this case it knows how to handle the classes\n-                 * loaded by the {@code webClassLoader} : it either is able to\n-                 * load them itself or delegate to its parent (which is the\n-                 * {@code webClassLoader}): in this case hack is not needed and\n-                 * the {@link #process(Set, ServletContext)} method can be\n-                 * called directly.\n-                 */\n-                classLoader = classLoader.getParent();\n+            /*\n+             * Hack is needed to make a workaround for weird behavior of WildFly\n+             * with skinnywar See https://github.com/vaadin/flow/issues/7805\n+             */\n+            boolean noHack = false;\n+            while (classLoader != null) {\n+                if (classLoader.equals(webClassLoader)) {\n+                    noHack = true;\n+                    break;\n+                } else {\n+                    /*\n+                     * The classloader which has loaded this class ({@code\n+                     * classLoader}) should be either the {@code webClassLoader}\n+                     * or its child: in this case it knows how to handle the\n+                     * classes loaded by the {@code webClassLoader} : it either\n+                     * is able to load them itself or delegate to its parent\n+                     * (which is the {@code webClassLoader}): in this case hack\n+                     * is not needed and the {@link #process(Set,\n+                     * ServletContext)} method can be called directly.\n+                     */\n+                    classLoader = classLoader.getParent();\n+                }\n             }\n-        }\n \n-        if (noHack) {\n-            process(set, ctx);\n-            return;\n-        }\n+            if (noHack) {\n+                process(set, ctx);\n+                return;\n+            }\n+\n+            try {\n+                Class<?> initializer = ctx.getClassLoader()\n+                        .loadClass(getClass().getName());\n \n-        try {\n-            Class<?> initializer = ctx.getClassLoader()\n-                    .loadClass(getClass().getName());\n+                String processMethodName = Stream\n+                        .of(ClassLoaderAwareServletContainerInitializer.class\n+                                .getDeclaredMethods())\n+                        .filter(method -> !method.isDefault()\n+                                && !method.isSynthetic())\n+                        .findFirst().get().getName();\n+                Method operation = Stream.of(initializer.getDeclaredMethods())\n+                        .filter(method -> method.getName()\n+                                .equals(processMethodName))\n+                        .findFirst().get();\n+                operation.invoke(initializer.newInstance(),\n+                        new Object[] { set, ctx });\n+            } catch (ClassNotFoundException | IllegalAccessException\n+                    | IllegalArgumentException | InvocationTargetException\n+                    | InstantiationException e) {\n+                throw new ServletException(e);\n+            }\n+        };\n \n-            String processMethodName = Stream\n-                    .of(ClassLoaderAwareServletContainerInitializer.class\n-                            .getDeclaredMethods())\n-                    .filter(method -> !method.isDefault()\n-                            && !method.isSynthetic())\n-                    .findFirst().get().getName();\n-            Method operation = Stream.of(initializer.getDeclaredMethods())\n-                    .filter(method -> method.getName()\n-                            .equals(processMethodName))\n-                    .findFirst().get();\n-            operation.invoke(initializer.newInstance(),\n-                    new Object[] { set, ctx });\n-        } catch (ClassNotFoundException | IllegalAccessException\n-                | IllegalArgumentException | InvocationTargetException\n-                | InstantiationException e) {\n-            throw new ServletException(e);\n+        if (requiresLookup()) {\n+            VaadinServletContext vaadinContext = new VaadinServletContext(\n+                    context);\n+            synchronized (context) {\n+                if (vaadinContext.getAttribute(Lookup.class) == null) {\n+                    DeferredServletContextInitializers initializers = vaadinContext\n+                            .getAttribute(\n+                                    DeferredServletContextInitializers.class,\n+                                    () -> new DeferredServletContextInitializers());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMTM3", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432137", "createdAt": "2020-12-16T07:56:06Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowNlrOIG4TiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowNlrOIG4TiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDg3Mw==", "bodyText": "Replace this lambda with a method reference.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084873", "createdAt": "2020-12-16T07:56:06Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "diffHunk": "@@ -43,61 +46,90 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n+    default void onStartup(Set<Class<?>> set, ServletContext context)\n             throws ServletException {\n-        ClassLoader webClassLoader = ctx.getClassLoader();\n-        ClassLoader classLoader = getClass().getClassLoader();\n+        // see DeferredServletContextIntializers\n+        DeferredServletContextInitializers.Initializer deferredInitializer = ctx -> {\n+            ClassLoader webClassLoader = ctx.getClassLoader();\n+            ClassLoader classLoader = getClass().getClassLoader();\n \n-        /*\n-         * Hack is needed to make a workaround for weird behavior of WildFly\n-         * with skinnywar See https://github.com/vaadin/flow/issues/7805\n-         */\n-        boolean noHack = false;\n-        while (classLoader != null) {\n-            if (classLoader.equals(webClassLoader)) {\n-                noHack = true;\n-                break;\n-            } else {\n-                /*\n-                 * The classloader which has loaded this class ({@code\n-                 * classLoader}) should be either the {@code webClassLoader} or\n-                 * its child: in this case it knows how to handle the classes\n-                 * loaded by the {@code webClassLoader} : it either is able to\n-                 * load them itself or delegate to its parent (which is the\n-                 * {@code webClassLoader}): in this case hack is not needed and\n-                 * the {@link #process(Set, ServletContext)} method can be\n-                 * called directly.\n-                 */\n-                classLoader = classLoader.getParent();\n+            /*\n+             * Hack is needed to make a workaround for weird behavior of WildFly\n+             * with skinnywar See https://github.com/vaadin/flow/issues/7805\n+             */\n+            boolean noHack = false;\n+            while (classLoader != null) {\n+                if (classLoader.equals(webClassLoader)) {\n+                    noHack = true;\n+                    break;\n+                } else {\n+                    /*\n+                     * The classloader which has loaded this class ({@code\n+                     * classLoader}) should be either the {@code webClassLoader}\n+                     * or its child: in this case it knows how to handle the\n+                     * classes loaded by the {@code webClassLoader} : it either\n+                     * is able to load them itself or delegate to its parent\n+                     * (which is the {@code webClassLoader}): in this case hack\n+                     * is not needed and the {@link #process(Set,\n+                     * ServletContext)} method can be called directly.\n+                     */\n+                    classLoader = classLoader.getParent();\n+                }\n             }\n-        }\n \n-        if (noHack) {\n-            process(set, ctx);\n-            return;\n-        }\n+            if (noHack) {\n+                process(set, ctx);\n+                return;\n+            }\n+\n+            try {\n+                Class<?> initializer = ctx.getClassLoader()\n+                        .loadClass(getClass().getName());\n \n-        try {\n-            Class<?> initializer = ctx.getClassLoader()\n-                    .loadClass(getClass().getName());\n+                String processMethodName = Stream\n+                        .of(ClassLoaderAwareServletContainerInitializer.class\n+                                .getDeclaredMethods())\n+                        .filter(method -> !method.isDefault()\n+                                && !method.isSynthetic())\n+                        .findFirst().get().getName();\n+                Method operation = Stream.of(initializer.getDeclaredMethods())\n+                        .filter(method -> method.getName()\n+                                .equals(processMethodName))\n+                        .findFirst().get();\n+                operation.invoke(initializer.newInstance(),\n+                        new Object[] { set, ctx });\n+            } catch (ClassNotFoundException | IllegalAccessException\n+                    | IllegalArgumentException | InvocationTargetException\n+                    | InstantiationException e) {\n+                throw new ServletException(e);\n+            }\n+        };\n \n-            String processMethodName = Stream\n-                    .of(ClassLoaderAwareServletContainerInitializer.class\n-                            .getDeclaredMethods())\n-                    .filter(method -> !method.isDefault()\n-                            && !method.isSynthetic())\n-                    .findFirst().get().getName();\n-            Method operation = Stream.of(initializer.getDeclaredMethods())\n-                    .filter(method -> method.getName()\n-                            .equals(processMethodName))\n-                    .findFirst().get();\n-            operation.invoke(initializer.newInstance(),\n-                    new Object[] { set, ctx });\n-        } catch (ClassNotFoundException | IllegalAccessException\n-                | IllegalArgumentException | InvocationTargetException\n-                | InstantiationException e) {\n-            throw new ServletException(e);\n+        if (requiresLookup()) {\n+            VaadinServletContext vaadinContext = new VaadinServletContext(\n+                    context);\n+            synchronized (context) {\n+                if (vaadinContext.getAttribute(Lookup.class) == null) {\n+                    DeferredServletContextInitializers initializers = vaadinContext\n+                            .getAttribute(\n+                                    DeferredServletContextInitializers.class,\n+                                    () -> new DeferredServletContextInitializers());\n+                    initializers.addInitializer(\n+                            ctx -> deferredInitializer.init(ctx));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMTQ2", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432146", "createdAt": "2020-12-16T07:56:07Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowN1rOIG4Tkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowN1rOIG4Tkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDg4Mg==", "bodyText": "\"context\" is a method parameter, and should not be used for synchronization.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084882", "createdAt": "2020-12-16T07:56:07Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "diffHunk": "@@ -43,61 +46,90 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n+    default void onStartup(Set<Class<?>> set, ServletContext context)\n             throws ServletException {\n-        ClassLoader webClassLoader = ctx.getClassLoader();\n-        ClassLoader classLoader = getClass().getClassLoader();\n+        // see DeferredServletContextIntializers\n+        DeferredServletContextInitializers.Initializer deferredInitializer = ctx -> {\n+            ClassLoader webClassLoader = ctx.getClassLoader();\n+            ClassLoader classLoader = getClass().getClassLoader();\n \n-        /*\n-         * Hack is needed to make a workaround for weird behavior of WildFly\n-         * with skinnywar See https://github.com/vaadin/flow/issues/7805\n-         */\n-        boolean noHack = false;\n-        while (classLoader != null) {\n-            if (classLoader.equals(webClassLoader)) {\n-                noHack = true;\n-                break;\n-            } else {\n-                /*\n-                 * The classloader which has loaded this class ({@code\n-                 * classLoader}) should be either the {@code webClassLoader} or\n-                 * its child: in this case it knows how to handle the classes\n-                 * loaded by the {@code webClassLoader} : it either is able to\n-                 * load them itself or delegate to its parent (which is the\n-                 * {@code webClassLoader}): in this case hack is not needed and\n-                 * the {@link #process(Set, ServletContext)} method can be\n-                 * called directly.\n-                 */\n-                classLoader = classLoader.getParent();\n+            /*\n+             * Hack is needed to make a workaround for weird behavior of WildFly\n+             * with skinnywar See https://github.com/vaadin/flow/issues/7805\n+             */\n+            boolean noHack = false;\n+            while (classLoader != null) {\n+                if (classLoader.equals(webClassLoader)) {\n+                    noHack = true;\n+                    break;\n+                } else {\n+                    /*\n+                     * The classloader which has loaded this class ({@code\n+                     * classLoader}) should be either the {@code webClassLoader}\n+                     * or its child: in this case it knows how to handle the\n+                     * classes loaded by the {@code webClassLoader} : it either\n+                     * is able to load them itself or delegate to its parent\n+                     * (which is the {@code webClassLoader}): in this case hack\n+                     * is not needed and the {@link #process(Set,\n+                     * ServletContext)} method can be called directly.\n+                     */\n+                    classLoader = classLoader.getParent();\n+                }\n             }\n-        }\n \n-        if (noHack) {\n-            process(set, ctx);\n-            return;\n-        }\n+            if (noHack) {\n+                process(set, ctx);\n+                return;\n+            }\n+\n+            try {\n+                Class<?> initializer = ctx.getClassLoader()\n+                        .loadClass(getClass().getName());\n \n-        try {\n-            Class<?> initializer = ctx.getClassLoader()\n-                    .loadClass(getClass().getName());\n+                String processMethodName = Stream\n+                        .of(ClassLoaderAwareServletContainerInitializer.class\n+                                .getDeclaredMethods())\n+                        .filter(method -> !method.isDefault()\n+                                && !method.isSynthetic())\n+                        .findFirst().get().getName();\n+                Method operation = Stream.of(initializer.getDeclaredMethods())\n+                        .filter(method -> method.getName()\n+                                .equals(processMethodName))\n+                        .findFirst().get();\n+                operation.invoke(initializer.newInstance(),\n+                        new Object[] { set, ctx });\n+            } catch (ClassNotFoundException | IllegalAccessException\n+                    | IllegalArgumentException | InvocationTargetException\n+                    | InstantiationException e) {\n+                throw new ServletException(e);\n+            }\n+        };\n \n-            String processMethodName = Stream\n-                    .of(ClassLoaderAwareServletContainerInitializer.class\n-                            .getDeclaredMethods())\n-                    .filter(method -> !method.isDefault()\n-                            && !method.isSynthetic())\n-                    .findFirst().get().getName();\n-            Method operation = Stream.of(initializer.getDeclaredMethods())\n-                    .filter(method -> method.getName()\n-                            .equals(processMethodName))\n-                    .findFirst().get();\n-            operation.invoke(initializer.newInstance(),\n-                    new Object[] { set, ctx });\n-        } catch (ClassNotFoundException | IllegalAccessException\n-                | IllegalArgumentException | InvocationTargetException\n-                | InstantiationException e) {\n-            throw new ServletException(e);\n+        if (requiresLookup()) {\n+            VaadinServletContext vaadinContext = new VaadinServletContext(\n+                    context);\n+            synchronized (context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMTU3", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432157", "createdAt": "2020-12-16T07:56:07Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowOFrOIG4TmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowOFrOIG4TmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDg4OQ==", "bodyText": "Remove this use of \"Thread.sleep()\".", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084889", "createdAt": "2020-12-16T07:56:08Z", "author": {"login": "vaadin-bot"}, "path": "fusion-endpoint/src/test/java/com/vaadin/flow/server/startup/fusion/DevModeInitializerEndpointTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package com.vaadin.flow.server.startup.fusion;\n+\n+import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_REUSE_DEV_SERVER;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_GENERATED_TS_DIR;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_JAVA_SOURCE_FOLDER;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_OPENAPI_JSON_FILE;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletRegistration;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.server.DevModeHandler;\n+import com.vaadin.flow.server.VaadinServlet;\n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.server.frontend.fusion.EndpointGeneratorTaskFactoryImpl;\n+import com.vaadin.flow.server.startup.DevModeInitializer;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+\n+@NotThreadSafe\n+public class DevModeInitializerEndpointTest {\n+    private final AtomicReference<DevModeHandler> atomicHandler = new AtomicReference<>();\n+    \n+    String baseDir;\n+    ServletContext servletContext;\n+    Map<String, String> initParams;\n+    Set<Class<?>> classes;\n+    DevModeInitializer devModeInitializer;\n+\n+    private final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    private static class VaadinServletSubClass extends VaadinServlet {\n+\n+    }\n+\n+    @Before\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public void setup() throws Exception {\n+        assertNull(getDevModeHandler());\n+\n+        temporaryFolder.create();\n+        baseDir = temporaryFolder.getRoot().getPath();\n+\n+        servletContext = Mockito.mock(ServletContext.class);\n+        ServletRegistration vaadinServletRegistration = Mockito\n+                .mock(ServletRegistration.class);\n+\n+        Lookup lookup = Mockito.mock(Lookup.class);\n+        Mockito.when(servletContext.getAttribute(Lookup.class.getName()))\n+                .thenReturn(lookup);\n+        Mockito.doReturn(new EndpointGeneratorTaskFactoryImpl()).when(lookup).lookup(EndpointGeneratorTaskFactory.class);\n+\n+        ResourceProvider resourceProvider = Mockito\n+                .mock(ResourceProvider.class);\n+        Mockito.when(lookup.lookup(ResourceProvider.class))\n+                .thenReturn(resourceProvider);\n+\n+        Mockito.when(vaadinServletRegistration.getClassName())\n+                .thenReturn(VaadinServletSubClass.class.getName());\n+\n+        initParams = new HashMap<>();\n+        initParams.put(FrontendUtils.PROJECT_BASEDIR, baseDir);\n+\n+        Mockito.when(vaadinServletRegistration.getInitParameters())\n+                .thenReturn(initParams);\n+\n+        classes = new HashSet<>();\n+        classes.add(this.getClass());\n+\n+        Map registry = new HashMap();\n+\n+        // Adding extra registrations to make sure that DevModeInitializer picks\n+        // the correct registration which is a VaadinServlet registration.\n+        registry.put(\"extra1\", Mockito.mock(ServletRegistration.class));\n+        registry.put(\"foo\", vaadinServletRegistration);\n+        registry.put(\"extra2\", Mockito.mock(ServletRegistration.class));\n+        Mockito.when(servletContext.getServletRegistrations())\n+                .thenReturn(registry);\n+        Mockito.when(servletContext.getInitParameterNames())\n+                .thenReturn(Collections.emptyEnumeration());\n+        Mockito.when(servletContext.getClassLoader())\n+                .thenReturn(this.getClass().getClassLoader());\n+\n+        FileUtils.forceMkdir(\n+                new File(baseDir, DEFAULT_CONNECT_JAVA_SOURCE_FOLDER));\n+\n+        devModeInitializer = new DevModeInitializer();\n+    }\n+\n+    @After\n+    public void teardown() throws Exception, SecurityException {\n+        System.clearProperty(\"vaadin.\" + SERVLET_PARAMETER_PRODUCTION_MODE);\n+        System.clearProperty(\"vaadin.\" + SERVLET_PARAMETER_REUSE_DEV_SERVER);\n+        System.clearProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n+\n+        temporaryFolder.delete();\n+        if (getDevModeHandler() != null) {\n+            getDevModeHandler().stop();\n+        }\n+    }\n+\n+    @Test\n+    public void should_generateOpenApi_when_EndpointPresents()\n+            throws Exception {\n+        String originalJavaSourceFolder = null;\n+        File generatedOpenApiJson = Paths\n+                    .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n+        try {\n+            originalJavaSourceFolder = System.getProperty(\"vaadin.\" \n+                + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n+            // Configure a folder that has .java classes with valid endpoints\n+            // Not using `src/test/java` because there are invalid endpoint names\n+            // in some tests\n+            File src = new File(\n+                    getClass().getClassLoader().getResource(\"java\").getFile());\n+            System.setProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n+                    src.getAbsolutePath());\n+\n+            Assert.assertFalse(generatedOpenApiJson.exists());\n+            DevModeInitializer devModeInitializer = new DevModeInitializer();\n+            devModeInitializer.onStartup(classes, servletContext);\n+            waitForDevModeServer();\n+            Thread.sleep(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 149}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMTcw", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432170", "createdAt": "2020-12-16T07:56:08Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowOFrOIG4Tnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowOFrOIG4Tnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDg5NQ==", "bodyText": "Refactor this method to reduce its Cognitive Complexity from 18 to the 15 allowed.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084895", "createdAt": "2020-12-16T07:56:08Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import java.io.File;\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.vaadin.flow.server.InitParameters;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+\n+import elemental.json.JsonObject;\n+\n+import static com.vaadin.flow.server.Constants.CONNECT_APPLICATION_PROPERTIES_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_GENERATED_TS_DIR_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_OPEN_API_FILE_TOKEN;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_FILE;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_FILE_TOKEN;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_URL;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_URL_TOKEN;\n+import static com.vaadin.flow.server.Constants.FRONTEND_TOKEN;\n+import static com.vaadin.flow.server.Constants.NPM_TOKEN;\n+import static com.vaadin.flow.server.Constants.VAADIN_PREFIX;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_ENABLE_DEV_SERVER;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_INITIAL_UIDL;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_REUSE_DEV_SERVER;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_USE_V14_BOOTSTRAP;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.PROJECT_BASEDIR;\n+\n+/**\n+ * A configuration factory base logic which reads the token file.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+public class AbstractConfigurationFactory implements Serializable {\n+\n+    public static final String DEV_FOLDER_MISSING_MESSAGE = \"Running project in development mode with no access to folder '%s'.%n\"\n+            + \"Build project in production mode instead, see https://vaadin.com/docs/v15/flow/production/tutorial-production-mode-basic.html\";\n+\n+    /**\n+     * Returns the config parameters from the token file data {@code buildInfo}.\n+     * \n+     * @param buildInfo\n+     *            the token file data\n+     * @return the config parameters\n+     */\n+    public Map<String, String> getConfigParametersUsingTokenData(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMTgw", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432180", "createdAt": "2020-12-16T07:56:09Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowOVrOIG4Tqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjowOVrOIG4Tqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDkwNw==", "bodyText": "Remove this unused method parameter \"systemPropertyBaseClass\".", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084907", "createdAt": "2020-12-16T07:56:09Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java", "diffHunk": "@@ -183,127 +177,13 @@ private static void readBuildInfo(Properties initParameters) {\n         }\n     }\n \n-    private static void setInitParametersUsingTokenData(\n-            Properties initParameters, JsonObject buildInfo) {\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_PRODUCTION_MODE)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_PRODUCTION_MODE,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_PRODUCTION_MODE)));\n-        }\n-        if (buildInfo.hasKey(EXTERNAL_STATS_FILE_TOKEN)\n-                || buildInfo.hasKey(EXTERNAL_STATS_URL_TOKEN)) {\n-            // If external stats file is flagged then\n-            // dev server should be false - only variable that can\n-            // be configured, in addition to stats variables, is\n-            // production mode\n-            initParameters.setProperty(SERVLET_PARAMETER_ENABLE_DEV_SERVER,\n-                    Boolean.toString(false));\n-            initParameters.setProperty(EXTERNAL_STATS_FILE,\n-                    Boolean.toString(true));\n-            if (buildInfo.hasKey(EXTERNAL_STATS_URL_TOKEN)) {\n-                initParameters.setProperty(EXTERNAL_STATS_URL,\n-                        buildInfo.getString(EXTERNAL_STATS_URL_TOKEN));\n-            }\n-            // NO OTHER CONFIGURATION:\n-            return;\n-        }\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_USE_V14_BOOTSTRAP)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_USE_V14_BOOTSTRAP,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_USE_V14_BOOTSTRAP)));\n-            // Need to be sure that we remove the system property,\n-            // because it has priority in the configuration getter\n-            System.clearProperty(\n-                    VAADIN_PREFIX + SERVLET_PARAMETER_USE_V14_BOOTSTRAP);\n-        }\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_INITIAL_UIDL)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_INITIAL_UIDL,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_INITIAL_UIDL)));\n-            // Need to be sure that we remove the system property,\n-            // because it has priority in the configuration getter\n-            System.clearProperty(\n-                    VAADIN_PREFIX + SERVLET_PARAMETER_INITIAL_UIDL);\n-        }\n-\n-        if (buildInfo.hasKey(NPM_TOKEN)) {\n-            initParameters.setProperty(PROJECT_BASEDIR,\n-                    buildInfo.getString(NPM_TOKEN));\n-            verifyFolderExists(initParameters, buildInfo.getString(NPM_TOKEN));\n-        }\n-\n-        if (buildInfo.hasKey(FRONTEND_TOKEN)) {\n-            initParameters.setProperty(FrontendUtils.PARAM_FRONTEND_DIR,\n-                    buildInfo.getString(FRONTEND_TOKEN));\n-            // Only verify frontend folder if it's not a subfolder of the\n-            // npm folder.\n-            if (!buildInfo.hasKey(NPM_TOKEN)\n-                    || !buildInfo.getString(FRONTEND_TOKEN)\n-                            .startsWith(buildInfo.getString(NPM_TOKEN))) {\n-                verifyFolderExists(initParameters,\n-                        buildInfo.getString(FRONTEND_TOKEN));\n-            }\n-        }\n-\n-        // These should be internal only so if there is a System\n-        // property override then the user probably knows what\n-        // they are doing.\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_ENABLE_DEV_SERVER)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_ENABLE_DEV_SERVER,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_ENABLE_DEV_SERVER)));\n-        }\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_REUSE_DEV_SERVER)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_REUSE_DEV_SERVER,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_REUSE_DEV_SERVER)));\n-        }\n-        if (buildInfo.hasKey(CONNECT_JAVA_SOURCE_FOLDER_TOKEN)) {\n-            initParameters.setProperty(CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n-                    buildInfo.getString(CONNECT_JAVA_SOURCE_FOLDER_TOKEN));\n-        }\n-        if (buildInfo.hasKey(CONNECT_OPEN_API_FILE_TOKEN)) {\n-            initParameters.setProperty(CONNECT_OPEN_API_FILE_TOKEN,\n-                    buildInfo.getString(CONNECT_OPEN_API_FILE_TOKEN));\n-        }\n-        if (buildInfo.hasKey(CONNECT_APPLICATION_PROPERTIES_TOKEN)) {\n-            initParameters.setProperty(CONNECT_APPLICATION_PROPERTIES_TOKEN,\n-                    buildInfo.getString(CONNECT_APPLICATION_PROPERTIES_TOKEN));\n-        }\n-        if (buildInfo.hasKey(CONNECT_GENERATED_TS_DIR_TOKEN)) {\n-            initParameters.setProperty(CONNECT_GENERATED_TS_DIR_TOKEN,\n-                    buildInfo.getString(CONNECT_GENERATED_TS_DIR_TOKEN));\n-        }\n-\n-        setDevModePropertiesUsingTokenData(initParameters, buildInfo);\n-    }\n-\n-    private static void setDevModePropertiesUsingTokenData(\n-            Properties initParameters, JsonObject buildInfo) {\n-        // read dev mode properties from the token and set init parameter only\n-        // if it's not yet set\n-        if (initParameters\n-                .getProperty(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM) == null\n-                && buildInfo.hasKey(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)) {\n-            initParameters.setProperty(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM,\n-                    String.valueOf(buildInfo.getBoolean(\n-                            InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)));\n-        }\n-        if (initParameters\n-                .getProperty(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE) == null\n-                && buildInfo.hasKey(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE)) {\n-            initParameters.setProperty(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE,\n-                    String.valueOf(buildInfo.getBoolean(\n-                            InitParameters.REQUIRE_HOME_NODE_EXECUTABLE)));\n-        }\n-    }\n-\n-    private static String getTokenFileContents(Properties initParameters) {\n+    private static String getTokenFileContents(Class<?> systemPropertyBaseClass,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 206}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMTkx", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432191", "createdAt": "2020-12-16T07:56:10Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxMVrOIG4Tsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxMVrOIG4Tsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDkxNQ==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084915", "createdAt": "2020-12-16T07:56:11Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java", "diffHunk": "@@ -162,18 +150,24 @@ protected static Properties createInitParameters(\n                     vaadinConfig.getConfigParameter(name));\n         }\n \n-        readBuildInfo(initParameters);\n+        readBuildInfo(systemPropertyBaseClass, initParameters,\n+                vaadinConfig.getVaadinContext());\n         return initParameters;\n     }\n \n-    private static void readBuildInfo(Properties initParameters) {\n-        String json = getTokenFileContents(initParameters);\n+    private static void readBuildInfo(Class<?> systemPropertyBaseClass,\n+            Properties initParameters, VaadinContext context) {\n+        String json = getTokenFileContents(systemPropertyBaseClass,\n+                initParameters, context);\n \n         // Read the json and set the appropriate system properties if not\n         // already set.\n         if (json != null) {\n             JsonObject buildInfo = JsonUtil.parse(json);\n-            setInitParametersUsingTokenData(initParameters, buildInfo);\n+            // TODO : will be rewritten properly without extra instantiation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMTk5", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432199", "createdAt": "2020-12-16T07:56:11Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxMVrOIG4TuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxMVrOIG4TuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDkyMQ==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084921", "createdAt": "2020-12-16T07:56:11Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java", "diffHunk": "@@ -146,6 +133,7 @@ protected static Properties createInitParameters(\n         readUiFromEnclosingClass(systemPropertyBaseClass, initParameters);\n         readConfigurationAnnotation(systemPropertyBaseClass, initParameters);\n \n+        // TODO : will be removed in futher commits", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMjA5", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432209", "createdAt": "2020-12-16T07:56:12Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxMlrOIG4Tvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxMlrOIG4Tvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDkyNg==", "bodyText": "A \"NullPointerException\" could be thrown; \"lookup\" is nullable here.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084926", "createdAt": "2020-12-16T07:56:12Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DevModeInitializer.java", "diffHunk": "@@ -372,34 +381,39 @@ public static void initDevModeHandler(Set<Class<?>> classes,\n                 .withEmbeddableWebComponents(true).enablePnpm(enablePnpm)\n                 .withHomeNodeExecRequired(useHomeNodeExec).build();\n \n-        CompletableFuture<Void> runNodeTasks = CompletableFuture\n-                .runAsync(() -> {\n-                    try {\n-                        tasks.execute();\n-\n-                        FallbackChunk chunk = FrontendUtils\n-                                .readFallbackChunk(tokenFileData);\n-                        if (chunk != null) {\n-                            vaadinContext.setAttribute(chunk);\n-                        }\n-                    } catch (ExecutionFailedException exception) {\n-                        log().debug(\n-                                \"Could not initialize dev mode handler. One of the node tasks failed\",\n-                                exception);\n-                        throw new CompletionException(exception);\n-                    }\n-                });\n-\n-        DevModeHandler.start(config, builder.npmFolder, runNodeTasks);\n+        // Check whether executor is provided by the caller (framework)\n+        Executor service = lookup.lookup(Executor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMjE4", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432218", "createdAt": "2020-12-16T07:56:13Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxM1rOIG4Twg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxM1rOIG4Twg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDkzMA==", "bodyText": "Immediately return this expression instead of assigning it to the temporary variable \"resourceProvider\".", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084930", "createdAt": "2020-12-16T07:56:13Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java", "diffHunk": "@@ -832,20 +827,52 @@ private String getClientEngineUrl(BootstrapContext context) {\n             final boolean productionMode = context.getSession()\n                     .getConfiguration().isProductionMode();\n \n-            boolean resolveNow = !productionMode || getClientEngine() == null;\n+            ResourceProvider resourceProvider = getResourceProvider(context);\n+            String clientEngine = getClientEngine(resourceProvider);\n+            boolean resolveNow = !productionMode || clientEngine == null;\n             if (resolveNow\n-                    && ClientResourcesUtils.getResource(\"/META-INF/resources/\"\n+                    && resourceProvider.getClientResource(\"/META-INF/resources/\"\n                             + CLIENT_ENGINE_NOCACHE_FILE) != null) {\n                 return context.getUriResolver().resolveVaadinUri(\n                         \"context://\" + CLIENT_ENGINE_NOCACHE_FILE);\n             }\n \n-            if (getClientEngine() == null) {\n+            if (clientEngine == null) {\n                 throw new BootstrapException(\n                         \"Client engine file name has not been resolved during initialization\");\n             }\n             return context.getUriResolver()\n-                    .resolveVaadinUri(\"context://\" + getClientEngine());\n+                    .resolveVaadinUri(\"context://\" + clientEngine);\n+        }\n+\n+        private ResourceProvider getResourceProvider(BootstrapContext context) {\n+            ResourceProvider resourceProvider = context.getSession()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMjI1", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432225", "createdAt": "2020-12-16T07:56:14Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxNFrOIG4TyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxNFrOIG4TyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDkzNw==", "bodyText": "A \"Set\" cannot contain a \"Class\"", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084937", "createdAt": "2020-12-16T07:56:14Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/di/Lookup.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.di;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.server.VaadinContext;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.VaadinServlet;\n+\n+/**\n+ * Provides a way to discover services used by Flow (SPI).\n+ * <p>\n+ * A lookup instance may be created based on a service, see\n+ * {@link #of(Object, Class...)}. Several lookup instances may be combined via\n+ * {@link #compose(Lookup, Lookup)} method which allows to make a lookup\n+ * instance based on a number of services. The resulting lookup instance may be\n+ * used in internal Flow code to transfer data in the unified way which allows\n+ * to change the available data types during the code evolution without changing\n+ * the internal API (like arguments in methods and constructors).\n+ * <p>\n+ * There is the \"global\" application {@link Lookup} instance and the\n+ * {@link VaadinContext}. It has one to one mapping and is available even before\n+ * a {@link DeploymentConfiguration} (and {@link VaadinServlet}) is created. So\n+ * this is kind of a singleton for a Web Application. As a consequence it\n+ * provides and may return only web app singleton services. Dependency injection\n+ * frameworks can provide an implementation for the application {@code Lookup}\n+ * which manages instances according to the conventions of that framework.\n+ * <p>\n+ * The application {@code Lookup} is similar to the {@link Instantiator} class\n+ * but a {@link Lookup} instance is available even before a\n+ * {@link VaadinService} instance is created (and as a consequence there is no\n+ * yet an {@link Instantiator} instance).\n+ * <p>\n+ * This is the code which one may use to get the application {@link Lookup}\n+ * instance:\n+ * \n+ * <pre>\n+ * <code>\n+ *     VaadinContext context = ...;\n+ *     Lookup lookup = context.getAttribute(Lookup.class);\n+ * </code>\n+ * </pre>\n+ * <p>\n+ * This SPI is mostly for internal framework usage since {@link Instantiator}\n+ * provides all required services for the application developer.\n+ * \n+ * \n+ * @see Instantiator\n+ * @author Vaadin Ltd\n+ * @since\n+ */\n+public interface Lookup {\n+\n+    /**\n+     * Lookup for a service of the given type.\n+     * <p>\n+     * The {@code serviceClass} is usually an interface (though it doesn't have\n+     * to be) and the returned value is some implementation of this interface.\n+     * \n+     * @param <T>\n+     *            a service type\n+     * @param serviceClass\n+     *            a service SPI class\n+     * \n+     * @see Lookup#lookupAll(Class)\n+     * @return a service which implements the {@code serviceClass}, may be\n+     *         {@code null} if no services are registered for this SPI\n+     */\n+    <T> T lookup(Class<T> serviceClass);\n+\n+    /**\n+     * Lookup for all services by the provided {@code serviceClass}.\n+     * <p>\n+     * The {@code serviceClass} is usually an interface class (though it doesn't\n+     * have to be) and the returned value is all implementations of this\n+     * interface.\n+     *\n+     * @param <T>\n+     *            a service type\n+     * @param serviceClass\n+     *            a service SPI class\n+     * @return all services which implement the {@code serviceClass}, if no\n+     *         services found an empty list is returned (so {@code null} is not\n+     *         returned)\n+     */\n+    <T> Collection<T> lookupAll(Class<T> serviceClass);\n+\n+    /**\n+     * Creates a lookup which contains (only) the provided {@code service} as\n+     * instance of given {@code serviceTypes}.\n+     * <p>\n+     * This method may be used to create a temporary lookup which then can be\n+     * used to extend an existing lookup via {@link #compose(Lookup, Lookup)}.\n+     * \n+     * @param <T>\n+     *            the service type\n+     * @param service\n+     *            the service object\n+     * @param serviceTypes\n+     *            the supertypes of the service which may be used to access the\n+     *            service\n+     * @return a lookup initialized with the given {@code service}\n+     */\n+    @SafeVarargs\n+    static <T> Lookup of(T service, Class<? super T>... serviceTypes) {\n+        Objects.requireNonNull(service);\n+        Set<Class<? super T>> services = Stream.of(serviceTypes).peek(type -> {\n+            if (!type.isInstance(service)) {\n+                throw new IllegalArgumentException(\n+                        \"Service type\" + service.getClass().getName()\n+                                + \" is not a subtype of \" + type.getName());\n+            }\n+        }).collect(Collectors.toSet());\n+        return new Lookup() {\n+\n+            @Override\n+            public <U> Collection<U> lookupAll(Class<U> serviceClass) {\n+                U service = lookup(serviceClass);\n+                return service == null ? Collections.emptyList()\n+                        : Collections.singleton(service);\n+            }\n+\n+            @Override\n+            public <U> U lookup(Class<U> serviceClass) {\n+                if (services.contains(serviceClass)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMjM1", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432235", "createdAt": "2020-12-16T07:56:15Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxNlrOIG4Tzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxNlrOIG4Tzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDk0Mg==", "bodyText": "Replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\".", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084942", "createdAt": "2020-12-16T07:56:16Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,18 +208,36 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n-            final long start = Long.parseLong(rangeMatcher.group(1));\n-            final long end = Long.parseLong(rangeMatcher.group(2));\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMjQ4", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432248", "createdAt": "2020-12-16T07:56:17Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxN1rOIG4T2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxN1rOIG4T2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDk1Mw==", "bodyText": "Invoke method(s) only conditionally.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084953", "createdAt": "2020-12-16T07:56:17Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,18 +208,36 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n-            final long start = Long.parseLong(rangeMatcher.group(1));\n-            final long end = Long.parseLong(rangeMatcher.group(2));\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {\n+            String startGroup = rangeMatcher.group(1);\n+            String endGroup = rangeMatcher.group(2);\n+            if (startGroup.isEmpty() && endGroup.isEmpty()) {\n+                response.setContentLengthLong(0L);\n+                response.setStatus(416); // Range Not Satisfiable\n+                getLogger().info(\"received a malformed range: '{}'\", rangeMatcher.group());\n+                return;\n+            }\n+            long start = startGroup.isEmpty() ? 0L : Long.parseLong(startGroup);\n+            long end = endGroup.isEmpty() ? Long.MAX_VALUE\n+                    : Long.parseLong(endGroup);\n             if (end < start\n                     || (resourceLength >= 0 && start >= resourceLength)) {\n                 // illegal range -> 416\n+                getLogger().info(\"received an illegal range '{}' for resource '{}'\",\n+                        rangeMatcher.group(), resourceURL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMjYw", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432260", "createdAt": "2020-12-16T07:56:18Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxOFrOIG4T4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxOFrOIG4T4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDk2MQ==", "bodyText": "Invoke method(s) only conditionally.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084961", "createdAt": "2020-12-16T07:56:18Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,18 +208,36 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n-            final long start = Long.parseLong(rangeMatcher.group(1));\n-            final long end = Long.parseLong(rangeMatcher.group(2));\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {\n+            String startGroup = rangeMatcher.group(1);\n+            String endGroup = rangeMatcher.group(2);\n+            if (startGroup.isEmpty() && endGroup.isEmpty()) {\n+                response.setContentLengthLong(0L);\n+                response.setStatus(416); // Range Not Satisfiable\n+                getLogger().info(\"received a malformed range: '{}'\", rangeMatcher.group());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMjc5", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432279", "createdAt": "2020-12-16T07:56:19Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxOVrOIG4T7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoxOVrOIG4T7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDk3Mw==", "bodyText": "Make \"lookup\" transient or serializable.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084973", "createdAt": "2020-12-16T07:56:19Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java", "diffHunk": "@@ -125,51 +126,54 @@\n          */\n         private URI nodeDownloadRoot = URI.create(NodeInstaller.DEFAULT_NODEJS_DOWNLOAD_ROOT);\n \n+        private Lookup lookup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMjky", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432292", "createdAt": "2020-12-16T07:56:20Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMFrOIG4T9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMFrOIG4T9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDk4MA==", "bodyText": "Remove this use of \"DeprecatedPolymerPublishedEventHandler\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084980", "createdAt": "2020-12-16T07:56:20Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -280,50 +284,36 @@ private static Object decodeArg(Component instance, Method method,\n         // the model\n         assert argValue != null;\n         if (type.isPrimitive() && argValue.getType() == JsonType.NULL) {\n-            String msg = String\n-                    .format(\"Null values are not allowed for primitive types but \"\n-                                    + \"a 'null' value was received for parameter %d \"\n-                                    + \"which refers to primitive type '%s' \"\n-                                    + \"in the method '%s' defined in the class '%s'\",\n-                            index, type.getName(), method.getName(),\n-                            method.getDeclaringClass().getName());\n+            String msg = String.format(\n+                    \"Null values are not allowed for primitive types but \"\n+                            + \"a 'null' value was received for parameter %d \"\n+                            + \"which refers to primitive type '%s' \"\n+                            + \"in the method '%s' defined in the class '%s'\",\n+                    index, type.getName(), method.getName(),\n+                    method.getDeclaringClass().getName());\n             throw new IllegalArgumentException(msg);\n         } else if (type.isArray()) {\n             return decodeArray(method, type, index, argValue);\n         } else {\n             Class<?> convertedType = ReflectTools.convertPrimitiveType(type);\n \n-            try {\n-                final Class<?> polymerUtil = PublishedServerEventHandlerRpcHandler.class\n-                        .getClassLoader().loadClass(\n-                                \"com.vaadin.flow.component.polymertemplate.rpc.PublishedEventRpcHandlerUtil\");\n-                if ((Boolean) polymerUtil\n-                        .getMethod(\"isTemplateModelValue\", Component.class,\n-                                JsonValue.class, Class.class)\n-                        .invoke(polymerUtil, instance, argValue,\n-                                convertedType)) {\n-                    return polymerUtil\n-                            .getMethod(\"getTemplateItem\", Component.class,\n-                                    JsonObject.class, Type.class)\n-                            .invoke(polymerUtil, instance, argValue,\n-                                    method.getGenericParameterTypes()[index]);\n+            if (instance != null) {\n+                Optional<UI> ui = instance.getUI();\n+                if (!ui.isPresent()) {\n+                    throw new IllegalStateException(\n+                            \"Rpc handler may not be called for a detached component\");\n+                }\n+                VaadinContext context = ui.get().getSession().getService()\n+                        .getContext();\n+                DeprecatedPolymerPublishedEventHandler handler = context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 180}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMzAx", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432301", "createdAt": "2020-12-16T07:56:21Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMVrOIG4T-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMVrOIG4T-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDk4Nw==", "bodyText": "Remove this use of \"DeprecatedPolymerPublishedEventHandler\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084987", "createdAt": "2020-12-16T07:56:21Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -280,50 +284,36 @@ private static Object decodeArg(Component instance, Method method,\n         // the model\n         assert argValue != null;\n         if (type.isPrimitive() && argValue.getType() == JsonType.NULL) {\n-            String msg = String\n-                    .format(\"Null values are not allowed for primitive types but \"\n-                                    + \"a 'null' value was received for parameter %d \"\n-                                    + \"which refers to primitive type '%s' \"\n-                                    + \"in the method '%s' defined in the class '%s'\",\n-                            index, type.getName(), method.getName(),\n-                            method.getDeclaringClass().getName());\n+            String msg = String.format(\n+                    \"Null values are not allowed for primitive types but \"\n+                            + \"a 'null' value was received for parameter %d \"\n+                            + \"which refers to primitive type '%s' \"\n+                            + \"in the method '%s' defined in the class '%s'\",\n+                    index, type.getName(), method.getName(),\n+                    method.getDeclaringClass().getName());\n             throw new IllegalArgumentException(msg);\n         } else if (type.isArray()) {\n             return decodeArray(method, type, index, argValue);\n         } else {\n             Class<?> convertedType = ReflectTools.convertPrimitiveType(type);\n \n-            try {\n-                final Class<?> polymerUtil = PublishedServerEventHandlerRpcHandler.class\n-                        .getClassLoader().loadClass(\n-                                \"com.vaadin.flow.component.polymertemplate.rpc.PublishedEventRpcHandlerUtil\");\n-                if ((Boolean) polymerUtil\n-                        .getMethod(\"isTemplateModelValue\", Component.class,\n-                                JsonValue.class, Class.class)\n-                        .invoke(polymerUtil, instance, argValue,\n-                                convertedType)) {\n-                    return polymerUtil\n-                            .getMethod(\"getTemplateItem\", Component.class,\n-                                    JsonObject.class, Type.class)\n-                            .invoke(polymerUtil, instance, argValue,\n-                                    method.getGenericParameterTypes()[index]);\n+            if (instance != null) {\n+                Optional<UI> ui = instance.getUI();\n+                if (!ui.isPresent()) {\n+                    throw new IllegalStateException(\n+                            \"Rpc handler may not be called for a detached component\");\n+                }\n+                VaadinContext context = ui.get().getSession().getService()\n+                        .getContext();\n+                DeprecatedPolymerPublishedEventHandler handler = context\n+                        .getAttribute(Lookup.class)\n+                        .lookup(DeprecatedPolymerPublishedEventHandler.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 182}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMzA4", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432308", "createdAt": "2020-12-16T07:56:21Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMlrOIG4T_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMlrOIG4T_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NDk5MQ==", "bodyText": "A \"NullPointerException\" could be thrown; \"instance\" is nullable here.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544084991", "createdAt": "2020-12-16T07:56:22Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -180,14 +182,16 @@ private static void invokeMethod(Component instance, Method method,\n                 Serializable returnValue = (Serializable) invokeMethod(instance,\n                         method, args);\n \n-                instance.getElement().executeJs(\"this.$server['\"\n+                instance.getElement()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMzIw", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432320", "createdAt": "2020-12-16T07:56:22Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMlrOIG4UCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyMlrOIG4UCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NTAwMw==", "bodyText": "Remove this use of \"PolymerServerEventHandlers\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544085003", "createdAt": "2020-12-16T07:56:22Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -107,13 +110,12 @@ public String getRpcType() {\n             PolymerServerEventHandlers eventHandlers = node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMzMw", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432330", "createdAt": "2020-12-16T07:56:23Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyM1rOIG4UEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyM1rOIG4UEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NTAxMQ==", "bodyText": "A \"NullPointerException\" could be thrown; \"instance\" is nullable here.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544085011", "createdAt": "2020-12-16T07:56:23Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -180,14 +182,16 @@ private static void invokeMethod(Component instance, Method method,\n                 Serializable returnValue = (Serializable) invokeMethod(instance,\n                         method, args);\n \n-                instance.getElement().executeJs(\"this.$server['\"\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n                                 + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n-                                + \"']($0, true, $1)\", Integer.valueOf(promiseId),\n-                        returnValue);\n+                                + \"']($0, true, $1)\",\n+                                Integer.valueOf(promiseId), returnValue);\n             } catch (RuntimeException e) {\n-                instance.getElement().executeJs(\"this.$server['\"\n-                        + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n-                        + \"']($0, false)\", Integer.valueOf(promiseId));\n+                instance.getElement()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMyMzQz", "url": "https://github.com/vaadin/flow/pull/9665#pullrequestreview-553432343", "createdAt": "2020-12-16T07:56:24Z", "commit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyNFrOIG4UHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo1NjoyNFrOIG4UHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4NTAyMw==", "bodyText": "Remove this use of \"PolymerServerEventHandlers\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9665#discussion_r544085023", "createdAt": "2020-12-16T07:56:24Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -107,13 +110,12 @@ public String getRpcType() {\n             PolymerServerEventHandlers eventHandlers = node\n                     .getFeature(PolymerServerEventHandlers.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4d34f98905b55a34dd8319f739125ce5120d89a", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/f4d34f98905b55a34dd8319f739125ce5120d89a", "committedDate": "2020-10-26T10:32:05Z", "message": "test: Fix duplicate registration (#9233)\n\nLock the registry when registering\r\ndynamic route in serviceInit to not have\r\na race where 2 inits note that path is not\r\nregistered and then try to register the route.\r\n\r\nFixes #9223"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a044f5d4c8029916b9f0b1e6c0e2c7ae62ddf133", "author": {"user": {"login": "alvarezguille", "name": "Guille"}}, "url": "https://github.com/vaadin/flow/commit/a044f5d4c8029916b9f0b1e6c0e2c7ae62ddf133", "committedDate": "2020-10-28T14:22:31Z", "message": "refactor: Remove log usage in embedded components (#9254)\n\n8d012f755ccf8b00288959bfa7bc6dd7a3f51284 removed some log and converted others into debug\r\nbut log in disconnectedCallback was left."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ee754f7c2352027dc5fe8b8a569b467ec3a575a", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/9ee754f7c2352027dc5fe8b8a569b467ec3a575a", "committedDate": "2020-10-28T15:00:41Z", "message": "refactor: expose the items count API to components (#9257)\n\nExposes DataCommunicator::getDataProviderSize to the components, in order to get the items count taking into account the countCallback, if it has been set previously.\r\n\r\nRelated-to: vaadin/vaadin-flow-components#282"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "970b73a7a159e90cb50dd959559b496fffbea550", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/970b73a7a159e90cb50dd959559b496fffbea550", "committedDate": "2020-10-30T04:42:37Z", "message": "chore: unit test for devmode-not-ready page contents and type (#9266)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "427ca7840cb2ec4fea44e7bb81fef22cf9d41965", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/427ca7840cb2ec4fea44e7bb81fef22cf9d41965", "committedDate": "2020-11-03T05:11:12Z", "message": "chore: do not depend on commons.lang3 (#9271)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fd66e0fb14b2fb7e11e92d198cc776f0fb14de5", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/3fd66e0fb14b2fb7e11e92d198cc776f0fb14de5", "committedDate": "2020-11-03T06:36:05Z", "message": "chore: fix typo (#9272)\n\nFix typo in DataCommunicator::getDataProviderSize() javadoc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb51a2b5d3e04e28994f1fc619e7cf0848596625", "author": {"user": {"login": "taefi", "name": "Soroosh Taefi"}}, "url": "https://github.com/vaadin/flow/commit/bb51a2b5d3e04e28994f1fc619e7cf0848596625", "committedDate": "2020-11-03T07:37:28Z", "message": "fix: Sync HierarchicalDataCommunicator's expand state with client side (#9275)\n\nHierarchicalDataCommunicator's expanded state were not being synchronised with client side and TreeGrid's expanded nodes were being collapsed after re-attaching.\r\n\r\nWarranty: Sync TreeGrid expanded items state with the client side when detaching and reattaching\r\n\r\nFixes: https://github.com/vaadin/flow/issues/9175"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84f92fec423e12298c16c377e198e2906f316421", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/84f92fec423e12298c16c377e198e2906f316421", "committedDate": "2020-11-03T11:47:57Z", "message": "chore: Bump version to 6.0-SNAPSHOT (#9279)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f7cfa76fd21d8d18338237e6e325c1eeaf5c21b", "author": {"user": {"login": "fluorumlabs", "name": "Artem Godin"}}, "url": "https://github.com/vaadin/flow/commit/9f7cfa76fd21d8d18338237e6e325c1eeaf5c21b", "committedDate": "2020-11-04T15:17:40Z", "message": "refactor: make web browser immutable (#9298)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "526792ad8bc7b481fa24e37fff034a5963a04616", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/526792ad8bc7b481fa24e37fff034a5963a04616", "committedDate": "2020-11-05T13:34:05Z", "message": "feat: Create Flow plugins for webpack (#9295)\n\n* feat: Create Flow plugins for webpack\r\n\r\nMoved stats file handling to a custom plugin.\r\nAdded feature for copying custom Flow plugins\r\nfor use with webpack.\r\n\r\nFixes #9283"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ad3b215d2487bab11477e9379d8b063581bb656", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/0ad3b215d2487bab11477e9379d8b063581bb656", "committedDate": "2020-11-06T14:55:03Z", "message": "fix: AppShellConfigurator is now considered for theme endpoint (#9332)\n\nAppShellConfigurator is now also considered when\r\nscanning for annotations and deciding theme.\r\n\r\nFixes #9110"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73ebb9eaf052afa2ad9843153a21b70eab67ee29", "author": {"user": {"login": "taefi", "name": "Soroosh Taefi"}}, "url": "https://github.com/vaadin/flow/commit/73ebb9eaf052afa2ad9843153a21b70eab67ee29", "committedDate": "2020-11-06T16:44:35Z", "message": "fix: fix TreeGrid updating wrong expanded items state on setDataProvider (#9336)\n\nFixes: #9328\r\nDetails: HierarchicalDataProvider's reset method was called before recreating the HierrarchyMapper in setDataProvider. This was creating wrong updates for the client side."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5f531937fe99ae7b49b2a7310abfccfdc5e5bcc", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/c5f531937fe99ae7b49b2a7310abfccfdc5e5bcc", "committedDate": "2020-11-09T08:21:31Z", "message": "feat!: Theme annotation should be only on AppShellConfigurator (#9313)\n\nHaving the `@Theme` annotation on Flow views or router layouts will not be allowed anymore, it should be on `AppShellConfigurator` instead.\r\n\r\nFixes #9092"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a385294ad6d12f81da3244d9941c0373587d6fa", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/5a385294ad6d12f81da3244d9941c0373587d6fa", "committedDate": "2020-11-10T16:45:00Z", "message": "test(TypeScript): ensure CSRF token is updated when session is invalidated (#9329)\n\n* test(TypeScript): ensure CSRF token is updated when session is invalidated\r\n\r\nFixes #9164\r\n\r\n* add log message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "529f7111729fe68c3c3190d12b22e3d41fcb84b6", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/529f7111729fe68c3c3190d12b22e3d41fcb84b6", "committedDate": "2020-11-11T12:21:19Z", "message": "fix: increase threshold for performance test (#9381)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "676f7529f1eafeb188d3cf3bb87be86ea7722af6", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/676f7529f1eafeb188d3cf3bb87be86ea7722af6", "committedDate": "2020-11-11T17:01:04Z", "message": "fix: hide loading indicator when endpoint call fails (#9380)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6608604b94af4f11013463dfdcf9521681ddb4e0", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/6608604b94af4f11013463dfdcf9521681ddb4e0", "committedDate": "2020-11-11T18:45:51Z", "message": "feat: tree-shakeable ES imports for TS form validators (#9374)\n\n- Use tree-shakeable ES imports for TS form validators based on the latest version of validators lib.\r\n- Add missing `return` in the `submit()` method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f5b5ed3316b21fc4f5b85a2b00ab15356adb9bf", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/7f5b5ed3316b21fc4f5b85a2b00ab15356adb9bf", "committedDate": "2020-11-12T07:42:40Z", "message": "feat: Theme can be defined as string or class (#9349)\n\nAdd a string definition for theme that matches the \"application theme\" in the theme folder inside /frontend/theme/, loading the css automatically from there. This is based on Lumo theme, always.\r\nChange old class based theme to use themeClass for theme selection.\r\n\r\nFixes #9281"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b2d4d8259a2efb3de70ea9d38fda18c4979cac6", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/5b2d4d8259a2efb3de70ea9d38fda18c4979cac6", "committedDate": "2020-11-12T08:01:31Z", "message": "fix!: Use data view filter and sorting only to that component (#9315)\n\nIn-memory filtering and sorting are now stored directly in component, which gives an opportunity to change it through the data view API for a certain component separately from other components bound to the same data provider.\r\n\r\nFixes #8655"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff28dd041ce8f477b4a0734c37540cec71ea524d", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/ff28dd041ce8f477b4a0734c37540cec71ea524d", "committedDate": "2020-11-12T08:30:21Z", "message": "fix: support Range requests with either start or end byte index omitted (#9368)\n\nSupports headers of the type Range: -123 and Range: 123-.\r\n\r\nFixes #9083."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "775db42f470f41f1e84fdcfd6f7cbdd978ab6866", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/775db42f470f41f1e84fdcfd6f7cbdd978ab6866", "committedDate": "2020-11-12T14:00:17Z", "message": "refactor: revert 'Use data view filter and sorting only to that component' (#9390)\n\nRevert the changes for https://github.com/vaadin/flow/issues/8655 to be able to bump the version of components and avoid compile errors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea7d5c6ace26628da706bf335ec5bfef5e37df44", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/ea7d5c6ace26628da706bf335ec5bfef5e37df44", "committedDate": "2020-11-13T05:35:29Z", "message": "chore: remove test module test-subcontext (#9394)\n\nThis module is subsumed by test-router-custom-context."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b26485146c7333e7527a1a02e22325a02c00e27", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/1b26485146c7333e7527a1a02e22325a02c00e27", "committedDate": "2020-11-13T07:28:35Z", "message": "chore: update readme with discord link (#9382)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1fcf4f51ff3e70f6056a02d042fa67345a2d9de", "author": {"user": {"login": "manolo", "name": "Manuel Carrasco Mo\u00f1ino"}}, "url": "https://github.com/vaadin/flow/commit/f1fcf4f51ff3e70f6056a02d042fa67345a2d9de", "committedDate": "2020-11-13T08:58:21Z", "message": "test: remove Theme annotation from demo helpers module (#9395)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abd92e71d462b2a37e2866cab0b6105243cfbcab", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/abd92e71d462b2a37e2866cab0b6105243cfbcab", "committedDate": "2020-11-16T10:23:31Z", "message": "feat: Do not allow themeClass and themeName in same annotation (#9389)\n\nTheme Class and Theme Name is not supported in\r\nthe same Theme annotation as theme name builds\r\non the Lumo theme.\r\n\r\ntest-themes is now for testing the Application theme only.\r\nOld theme test was moved into test-misc.\r\n\r\nFixes #9370"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bc2e60af3600735fc5b188ebb31b48059a13349", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/3bc2e60af3600735fc5b188ebb31b48059a13349", "committedDate": "2020-11-16T12:35:45Z", "message": "fix!: Use data view filter and sorting only to that component (#9315)\n\nIn-memory filtering and sorting are now stored directly in component, which gives an opportunity to change it through the data view API for a certain component separately from other components bound to the same data provider.\r\n\r\nFixes: #8655"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8d95df1196793cbd202c9e776aaa82e34d231c4", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/f8d95df1196793cbd202c9e776aaa82e34d231c4", "committedDate": "2020-11-17T13:31:32Z", "message": "feat: Only use one theme and fail for duplicates (#9406)\n\nNow we only handle the theme with the name inside the Theme annotation.\r\n\r\nFixes #9383"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8f1087b0ed606ff4738e3292859e58b4cf4781a", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/a8f1087b0ed606ff4738e3292859e58b4cf4781a", "committedDate": "2020-11-18T05:41:06Z", "message": "Read stats.json content as a bundle resource in OSGi\nRead token file as a bundle resource in OSGi\n\nFixes #9146\nFix NPE\nRevert logic back to the previous state\n# Conflicts:\n#\tflow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\n#\tflow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java\n#\tflow-server/src/main/java/com/vaadin/flow/server/osgi/OSGiAccess.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f17fa6aa2a2ee9c6150aefba86a83c91fc8991ce", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/f17fa6aa2a2ee9c6150aefba86a83c91fc8991ce", "committedDate": "2020-11-18T05:41:06Z", "message": "Refactor Instantiator and resources access\n\nFixes #9185\nExclude non-serializable classes\nDrop dependency to flow-push from flow-server\n# Conflicts:\n#\tflow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\n#\tflow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\n#\tflow-server/src/main/resources/META-INF/services/javax.servlet.ServletContainerInitializer\n#\tflow-server/src/test/java/com/vaadin/flow/server/connect/generator/endpoints/model/OSGiInstantiatorFactory.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/connect/generator/endpoints/model/OSGiResourceProvider.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/connect/typeconversion/StringConversionTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9313114c602c5e3577a430244bee9f7a342267e9", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/9313114c602c5e3577a430244bee9f7a342267e9", "committedDate": "2020-11-18T05:41:06Z", "message": "Remove flow-osgi dep from flow-push, increase osgi cmpn version\n# Conflicts:\n#\tflow-push/pom.xml\n#\tflow-server/src/main/java/com/vaadin/flow/server/osgi/VaadinBundleTracker.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f372558d37fd1723e1e840702832a1a6a307bf56", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/f372558d37fd1723e1e840702832a1a6a307bf56", "committedDate": "2020-11-18T05:41:06Z", "message": "Correct unit tests after refactoring: make them compiling\nMock VaadinServlet in MockVaadinServletService\nAdapt unit tests for refactored code\nAdapt more unti tests and add one more new SPI method\nFix serializable test, proceed with unit tests adaption\nAdapt unit tests for classes in com.vaadin.flow.server\nAdapt unit tests in the com.vaadin.flow.server.communication package\n* Adapt more unit tests\n\n* Make sure that ServletContextInitializers are executed after\nLookupInitializer\nFix OSGi presence check to be able to run unit test\nAdapt servlet deployer unit tests\nExclude OSGi related classes from test\nExclude all OSGi impl classes from serializable test\n# Conflicts:\n#\tflow-polymer-template/src/test/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParserTest.java\n#\tflow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\n#\tflow-server/src/main/java/com/vaadin/flow/server/startup/ApplicationRouteRegistry.java\n#\tflow-server/src/main/resources/META-INF/services/javax.servlet.ServletContainerInitializer\n#\tflow-server/src/test/java/com/vaadin/flow/component/InvalidUrlTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/component/UITest.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/BootstrapHandlerDependenciesTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/BootstrapHandlerTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/I18NProviderTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/MockServletServiceSessionSetup.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/MockVaadinServletService.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/VaadinServletConfigurationTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/VaadinServletServiceTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/VaadinSessionTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/communication/PushHandlerTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/frontend/FrontendUtilsTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/startup/DevModeInitializerTestBase.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/startup/EnableOSGiRunner.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/startup/ServletDeployerTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5b1480a62c938bf258ff7aae420ed6f8f7d7366", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/d5b1480a62c938bf258ff7aae420ed6f8f7d7366", "committedDate": "2020-11-18T05:41:06Z", "message": "Fix OSGi Lookup related issues\nFix OSGi related unit test one more time\n\n# Conflicts:\n#\tflow-osgi/src/main/java/com/vaadin/flow/osgi/support/OSGiResourceProvider.java\n#\tflow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java\n#\tflow-server/src/main/java/com/vaadin/flow/server/osgi/OSGiAccess.java\n#\tflow-server/src/main/java/com/vaadin/flow/server/osgi/VaadinBundleTracker.java\n#\tflow-server/src/main/java/com/vaadin/flow/server/startup/LookupInitializer.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/startup/EnableOSGiRunner.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/startup/OSGiInitApplicationRouteRegistryTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/webcomponent/OSGiWebComponentConfigurationRegistryTest.java\n#\tflow-tests/test-root-context/src/main/java/com/vaadin/flow/osgi/Activator.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "778b7dff3cbdf184b29ffe1e1c67f0769b0a8ce9", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/778b7dff3cbdf184b29ffe1e1c67f0769b0a8ce9", "committedDate": "2020-11-18T05:41:06Z", "message": "Correct the resource access for VaadinService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "028fae73f08924ca85991efa153ab757c59f4a4b", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/028fae73f08924ca85991efa153ab757c59f4a4b", "committedDate": "2020-11-18T05:41:06Z", "message": "Extend SPI, provide javadocs some unit tests fixes\nMinor code corrections, javadocs\nCorrect unit test\n# Conflicts:\n#\tflow-polymer-template/src/test/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParserTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "205659c9727a2f301cbba745cf1563d6b3dc5b00", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/205659c9727a2f301cbba745cf1563d6b3dc5b00", "committedDate": "2020-11-18T05:41:06Z", "message": "test: add unit tests\n\n# Conflicts:\n#\tflow-tests/test-root-context/src/main/java/com/vaadin/flow/osgi/Activator.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8aaadb7f68428553e532d1d629c81ee8941b1e8", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/f8aaadb7f68428553e532d1d629c81ee8941b1e8", "committedDate": "2020-11-18T05:41:06Z", "message": "test: make it possible to run felix-jetty in npm mode\n# Conflicts:\n#\tflow-tests/servlet-containers/felix-jetty/pom.xml\n#\tflow-tests/test-root-context/pom-npm.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d58ac32df6f6a0489965dadff58205dc6f9b05b9", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/d58ac32df6f6a0489965dadff58205dc6f9b05b9", "committedDate": "2020-11-18T05:41:06Z", "message": "Make httpclient dependency optional for now. (#9262)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f3df01f6b5101f95f041a33be57929d2fb46c1d", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/5f3df01f6b5101f95f041a33be57929d2fb46c1d", "committedDate": "2020-11-18T05:41:06Z", "message": "refactoring: move OSGi resource provider impl to flow-server (#9268)\n\nOSGi ResourceProvider impl should be available as a service at the moment when Vaadin WAB register a servlet.\r\nIt's not possible without extra unclear config to make sure that the service is registered if it's in the flow-osgi : the bundle may be activated at any moment regardless of servlet registration.\r\nThe issue doesn't appear if the service is registered at the flow-bundle start phase."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79c1bb6bfb9c2ed45f941f0ee7f4adce8e874811", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/79c1bb6bfb9c2ed45f941f0ee7f4adce8e874811", "committedDate": "2020-11-18T05:41:06Z", "message": "refactor: review fixes for OSGi (#9289)\n\n* refactoring: review fixes\n\n* chore: add a comment about Jar packaging in test-root-context module\n\n* fix: ensureServletContext should be always called\n\n* fix: fix review comments\n# Conflicts:\n#\tflow-tests/test-root-context/pom-npm.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "355a290b0780bc009e95b80dd086d62384423569", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/355a290b0780bc009e95b80dd086d62384423569", "committedDate": "2020-11-18T05:41:06Z", "message": "refactor: get rid of cmpn osgi dependency (#9307)\n\nNot needed for flow-server."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21920102e9566939fdd4f997bd9d4a8d25e1c863", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/21920102e9566939fdd4f997bd9d4a8d25e1c863", "committedDate": "2020-11-18T05:41:06Z", "message": "refactoring: App classpath resources should be access via\nResourceProvider (#9278)\n\nFixes #9269\n# Conflicts:\n#\tflow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java\n#\tflow-server/src/main/java/com/vaadin/flow/server/BootstrapUtils.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e923d4dfd99b15ce6c05c7b3dc21b959598a468", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/2e923d4dfd99b15ce6c05c7b3dc21b959598a468", "committedDate": "2020-11-18T05:41:06Z", "message": "test: update unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ddb9d6dc9da0e3ccb42c8f1698c11dd733daed3", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/1ddb9d6dc9da0e3ccb42c8f1698c11dd733daed3", "committedDate": "2020-11-18T05:41:06Z", "message": "refactor: fix various OSGi related issues\n\n* add back lost classes during cherry-picks\n* fix unit tests\n* rewrite polymer template RPC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07323e92da3c62f2cf0b1f4afe6669baa3b61482", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/07323e92da3c62f2cf0b1f4afe6669baa3b61482", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: fix javadocs after merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a23b10a31477a0256534a9eb21fccc044361890d", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/a23b10a31477a0256534a9eb21fccc044361890d", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: fix mocks in unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a3791ef62c5399a12729f376bdb937c32deb9d2", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/3a3791ef62c5399a12729f376bdb937c32deb9d2", "committedDate": "2020-11-18T05:41:06Z", "message": "test: Correct activator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "435beaa0498327e4bab0d51f91ed9f856b6ffbd8", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/435beaa0498327e4bab0d51f91ed9f856b6ffbd8", "committedDate": "2020-11-18T05:41:06Z", "message": "refactor: correct lookup initializer filtering code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "063de04e69a16a68a24d03a3ac685e8bfc78f3bf", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/063de04e69a16a68a24d03a3ac685e8bfc78f3bf", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: fix javadocs (SQ)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4e8bd36cc2eca79637cdc8b832d94af7c422b81", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/c4e8bd36cc2eca79637cdc8b832d94af7c422b81", "committedDate": "2020-11-18T05:41:06Z", "message": "refactor: Remove OSGi related ITs and osgi module from the repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce407f7681cf320e64864788668520b111a11756", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/ce407f7681cf320e64864788668520b111a11756", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: fix some review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "389c99beccc0561ec943be4b852724f64ac8f14b", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/389c99beccc0561ec943be4b852724f64ac8f14b", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: test unstable test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c15aa5e951655fc3dc75a18433cfebe897530ee2", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/c15aa5e951655fc3dc75a18433cfebe897530ee2", "committedDate": "2020-11-18T05:41:06Z", "message": "refactor: get rid of OSGiClientStaticResource (#9277)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28f0a2a818e64525919fc806a1723979411ad4ac", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/28f0a2a818e64525919fc806a1723979411ad4ac", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: use content parameter in the activate method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a720caf3191377090221fa0fb6bd38b381e185f3", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/a720caf3191377090221fa0fb6bd38b381e185f3", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: Make OSGi incompatible vaadin-connect dependencies optional"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f06dfaa38fc0b9873fc0a5f022669267ad81039f", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/f06dfaa38fc0b9873fc0a5f022669267ad81039f", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: make Spring deps optional"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be3813e42c74386e1509271d808fdcc1685709c5", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/be3813e42c74386e1509271d808fdcc1685709c5", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: make a workaround for broken Route registry API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a0caffe1646883dc4a68a2b500c95af0d9e7057", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/6a0caffe1646883dc4a68a2b500c95af0d9e7057", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: avoid not-breaking exception ojn loading class from another bundle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddefe2586b45ccb68e8bb9077040989cb0f1082d", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/ddefe2586b45ccb68e8bb9077040989cb0f1082d", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: workaround for possible bug in route registry (like #9360)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b564b63fc75ebd5cc5d23d13427579857f06a96a", "author": {"user": {"login": "stbischof", "name": "Stefan Bischof"}}, "url": "https://github.com/vaadin/flow/commit/b564b63fc75ebd5cc5d23d13427579857f06a96a", "committedDate": "2020-11-18T05:41:06Z", "message": "[OSGi] - Cleanup BudleActivator and Service registration, Update bnd and osgi deps (#9361)\n\nrefactor: OSGi improvements \r\n\r\n* update bnd-version\r\n\r\nSigned-off-by: Stefan Bischof <stbischof@bipolis.org>\r\n\r\n* update osgi dependency and version\r\n\r\nSigned-off-by: Stefan Bischof <stbischof@bipolis.org>\r\n\r\n* fix mocking osgi-classes\r\n\r\nSigned-off-by: Stefan Bischof <stbischof@bipolis.org>\r\n\r\n* OSGiResourceProvider uses @Component to declare the service\r\n\r\nSigned-off-by: Stefan Bischof <stbischof@bipolis.org>\r\n\r\n* VaadinBundleTracker uses @Component to declare the service\r\n\r\nSigned-off-by: Stefan Bischof <stbischof@bipolis.org>\r\n\r\n* Remove `empty` BundleActivator\r\n\r\nSigned-off-by: Stefan Bischof <stbischof@bipolis.org>\r\n\r\n* use constants for osgi.http.whiteboard.servlet.pattern\r\n\r\nSigned-off-by: Stefan Bischof <stbischof@bipolis.org>\r\n\r\n* fix unregister Service PolymerPublishedEventRpcHandler\r\n\r\nSigned-off-by: Stefan Bischof <stbischof@bipolis.org>\r\n\r\n* registers PolymerPublishedEventRpcHandler as a declarative service\r\n\r\nSigned-off-by: Stefan Bischof <stbischof@bipolis.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "477759b9e7a4f2ff70007415496242d198b7ea34", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/477759b9e7a4f2ff70007415496242d198b7ea34", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: add explanation why OSGi Component annotation is safe to use"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df6f0e530fb7b05df85c68ba6b9e0299dc19311c", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/df6f0e530fb7b05df85c68ba6b9e0299dc19311c", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: code review fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "784b75c120da0c9bf60f9dd1d4cfcd1431c490fc", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/784b75c120da0c9bf60f9dd1d4cfcd1431c490fc", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: return back accidentially removed method and call init for service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f77557678d9b7c907a16fda6105b44ac9c215061", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/f77557678d9b7c907a16fda6105b44ac9c215061", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: remove non-existent class pattern from test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2224129ffaf3777433b3c733f62651f02111d6d8", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/2224129ffaf3777433b3c733f62651f02111d6d8", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: fix import order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a24e0aa100e2c5ef6748a84b1b0b2971307fd26", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/8a24e0aa100e2c5ef6748a84b1b0b2971307fd26", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: extract code to a separate method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08ab60ff10100a2b08b43d2a7e1bb15d591a330b", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/08ab60ff10100a2b08b43d2a7e1bb15d591a330b", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: correct unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb5848c503e0376f5d7a5ef5ea542ec728102ec3", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/fb5848c503e0376f5d7a5ef5ea542ec728102ec3", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: fix unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81ab299cc3b232ee700af6865571de81db8d3f51", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/81ab299cc3b232ee700af6865571de81db8d3f51", "committedDate": "2020-11-18T05:41:06Z", "message": "refactor: simplify list merging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bc2338b9a226338b1167835560be1606e21f7d7", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/2bc2338b9a226338b1167835560be1606e21f7d7", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: return back lost code after review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a73d1bafde440370dd367fc61f0e3ebee4c2c79", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/5a73d1bafde440370dd367fc61f0e3ebee4c2c79", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: imports order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a1be9ceec6f478cc05cf87fcde93cf910d44f74", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/7a1be9ceec6f478cc05cf87fcde93cf910d44f74", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: revert bnd version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a6a6d660e8a0be55d8ee8052a51403c11c0a77b", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/5a6a6d660e8a0be55d8ee8052a51403c11c0a77b", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: imports order, review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66fc0c42d8abb0bb40487251ee211664850fcfe1", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/66fc0c42d8abb0bb40487251ee211664850fcfe1", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: restore lost test method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b05cb4121df00003202cc4a08f79dfcebd634c", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/d7b05cb4121df00003202cc4a08f79dfcebd634c", "committedDate": "2020-11-18T05:41:06Z", "message": "fix: import orders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e158459dd924b9d8a1dab3eb3f5d5b0793e63f5", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/0e158459dd924b9d8a1dab3eb3f5d5b0793e63f5", "committedDate": "2020-11-18T10:36:04Z", "message": "fix: revert not working deployment of test-root-context ui classifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19fe3864f9d1567c5ac7a211189986ac093e781f", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/19fe3864f9d1567c5ac7a211189986ac093e781f", "committedDate": "2020-11-18T10:59:39Z", "message": "fix: check if Url contains directory change in Dev Mode (#9392)\n\nChecks whether the Url contains a directory change and a double encoding in Dev Mode. Returns 403 Forbidden immediately and skip the request handling, if does."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3be09a172b2b63a5e1875ae5a939b708cc1692c", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/f3be09a172b2b63a5e1875ae5a939b708cc1692c", "committedDate": "2020-11-18T16:54:25Z", "message": "fix: preserve filter to not lose it between page requests (#9421)\n\nData communicator's filter removal, which has been introduced for components with internal filtering (like a ComboBox), may lead to filter loss during the items scrolling. This fix reverts the filter removal and the components should implement this feature on their side, if necessary.\r\n\r\nRelated-to: vaadin/vaadin-flow-components#388"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cab19f1048faa617d885271a32399136dd3dbafb", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/cab19f1048faa617d885271a32399136dd3dbafb", "committedDate": "2020-11-19T09:21:34Z", "message": "chore: Update issue template with discord link (#9426)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1719b4c47c4b0311b2548ae7480b849d0620c0c", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/a1719b4c47c4b0311b2548ae7480b849d0620c0c", "committedDate": "2020-11-20T06:50:02Z", "message": "chore: update chrome expectation to 87 (#9445)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96317da5a26e7bfe568a7382c8d3b8540f50bb51", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/96317da5a26e7bfe568a7382c8d3b8540f50bb51", "committedDate": "2020-11-20T10:49:51Z", "message": "fix: revert changes which broke route registration (#9432)\n\nNeed to active the tracker from an servlet context initializer because @activate doesn't work on CTOR with parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb1d15b9b4a71fd6ae354d5dd0b96ce847ccdd08", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/fb1d15b9b4a71fd6ae354d5dd0b96ce847ccdd08", "committedDate": "2020-11-20T12:11:23Z", "message": "chore: fix outdated AppShell javadoc (#9453)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f44b01af736f2df56470cd0be2d5163b08c239df", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/f44b01af736f2df56470cd0be2d5163b08c239df", "committedDate": "2020-11-20T12:37:14Z", "message": "test: add test for setting global font (#9436)\n\nFixes #9409"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e4c2b8e3db8fd99e62d3bf89123fe16917b92aa", "author": {"user": {"login": "stbischof", "name": "Stefan Bischof"}}, "url": "https://github.com/vaadin/flow/commit/4e4c2b8e3db8fd99e62d3bf89123fe16917b92aa", "committedDate": "2020-11-21T16:40:36Z", "message": "fix race-condition in IT-Tests (#9416)\n\nSigned-off-by: Stefan Bischof <stbischof@bipolis.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16912c85fe31640e2ff0a087eb598450e2e1b318", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/16912c85fe31640e2ff0a087eb598450e2e1b318", "committedDate": "2020-11-23T08:40:29Z", "message": "fix: mark tests that should not be executed in OSGi (#9456)\n\n* fix: mark tests that should not be executed in OSGi\r\n\r\n* fix: don't use push in route not found error page in OSGi\r\n\r\n* fix: avoid route with wildcard parameter which doesn't work in OSGi\r\n\r\n* fix: exclude wildcard parameter IT and devmode IT\r\n\r\n* fix: exclude \"context\" resource IT from OSGi tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46733021e4a6097b63f6877910c7dbd36431789d", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/46733021e4a6097b63f6877910c7dbd36431789d", "committedDate": "2020-11-23T12:38:00Z", "message": "fix: make annotation packages optional in OSGi (#9465)\n\nAlso fix test to first open page before checking client.\r\n\r\nfixes #9463"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6f1765331b39138d39f556d268adb60009aaf5d", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/b6f1765331b39138d39f556d268adb60009aaf5d", "committedDate": "2020-11-23T14:46:52Z", "message": "fix: made VaadinRequest available in endpoint (#9442)\n\n* fix: made vaadinrequest available in endpoint\r\n\r\n* clear VaadinRequest instance after endpoint call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af83fa6165f1e3f427b483a7d6a781c152f82aa7", "author": {"user": {"login": "jouni", "name": "Jouni Koivuviita"}}, "url": "https://github.com/vaadin/flow/commit/af83fa6165f1e3f427b483a7d6a781c152f82aa7", "committedDate": "2020-11-23T16:59:32Z", "message": "chore: remove mentions of \u201cConnect\u201d (#9151)\n\n* Rename \u201cConnect\u201d to \u201cFusion\u201d\r\n\r\n* Remove \u201cFusion\u201d naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18ee55985eaafba645535560d0ee7954406e2aa3", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/18ee55985eaafba645535560d0ee7954406e2aa3", "committedDate": "2020-11-24T06:09:24Z", "message": "feat: Serve theme static files from VAADIN/static (#9451)\n\nStatic files in META-INF/VAADIN/static will now be served\r\non request to VAADIN/static.\r\nAdded new webpack loader that changes app theme\r\ncss urls targeting ./ and ../ to be VAADIN/static/ instead.\r\nWhere ../ can not go outside of the application theme folder.\r\n\r\nFixes #9405"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdb7c1fd537bb5dda3b88b4666672ae4db8c81f2", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/cdb7c1fd537bb5dda3b88b4666672ae4db8c81f2", "committedDate": "2020-11-24T07:17:37Z", "message": "refactor: Remove OSGi code from flow-server (#9472)\n\n* refactor: Remove OSGi code from flow-server\r\n\r\nFixes #9219"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b33dec014ed3c183698f48fdb1156666f24841d0", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/b33dec014ed3c183698f48fdb1156666f24841d0", "committedDate": "2020-11-24T08:14:42Z", "message": "chore: update Flow versions description (#9469)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62e1e2693c773c1368ab0e716c74680f76b690d5", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/62e1e2693c773c1368ab0e716c74680f76b690d5", "committedDate": "2020-11-24T08:18:29Z", "message": "feat: Theme component with app theme. (#9418)\n\nAdded the feature that you can theme components\r\nwith the app theme by creating a css file in\r\n'frontend/theme/myTheme/components' with the\r\ncomponent tag name e.g. 'my-field'  should have 'my-field.css'\r\n\r\nFixes #9348"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26aacd3cdf51c7e0a18ae21318d366ce7f91be8a", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/26aacd3cdf51c7e0a18ae21318d366ce7f91be8a", "committedDate": "2020-11-25T06:35:24Z", "message": "fix: check whether class implements an interface first directly (#9486)\n\nPart of #9480"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f6645b519d556b8bfe82d7e3d168ae1b2e5f0d0", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/0f6645b519d556b8bfe82d7e3d168ae1b2e5f0d0", "committedDate": "2020-11-25T08:03:45Z", "message": "fix: remove instance field from singleton IndexHtmlRequestHandler (#9475)\n\n* fix: remove instance field from singleton IndexHtmlRequestHandler\r\n\r\n* apply code review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "463fb0009d1ce93d503b5ce96506317605fa5a33", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/463fb0009d1ce93d503b5ce96506317605fa5a33", "committedDate": "2020-11-25T08:29:42Z", "message": "Stop logging error when updating dev dependencies (#9476)\n\nAs there is a conflict with the dependencies and prevent adding\r\nthe flow-dev-dependencies package to the platform (#9345), this will hide\r\nthe unavoidable error that was logged for Vaadin apps.\r\n \r\nFixes #9251"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e2a67a8f1c32515cd2a6ede45a070c565d18dfd", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/9e2a67a8f1c32515cd2a6ede45a070c565d18dfd", "committedDate": "2020-11-25T11:54:36Z", "message": "fix: optimize handling of requests containing Range header (#9484)\n\nMore efficient parsing of the header value. Also, range count is capped at 16\r\n(additional will be ignored) and overlapping ranges at 2 (request will be denied\r\nif above)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7449d932f41d8d1e63e2845f6ae184cc34bb773", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/f7449d932f41d8d1e63e2845f6ae184cc34bb773", "committedDate": "2020-11-26T08:31:41Z", "message": "fix: Correct regexp to only match when digit first (#9496)\n\nUse Matcher::find instead of Matcher::matches as matches never matched.\r\n\r\nFixes #9494"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64c38f6cfa3ef9b265912d83647acc329190ef30", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/64c38f6cfa3ef9b265912d83647acc329190ef30", "committedDate": "2020-11-26T09:08:20Z", "message": "test: add test that external urls are not touched (#9482)\n\nAdded test that we don't touch external\r\nurls (relative or abosolute).\r\nMoved flow to be under path so we can have\r\njetty serve \"external\" resources.\r\n\r\nFixes #9430"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef55c46aa29fc6ca620991c82e008f19742e23d0", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/ef55c46aa29fc6ca620991c82e008f19742e23d0", "committedDate": "2020-11-26T09:35:11Z", "message": "fix: Add polyfill for constructable stylesheets (#9489)\n\nAdd the constructable stylesheets polyfill so\r\napp theme also works with non chrome based browsers.\r\n\r\nFixes #9488"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47e9a17b337d0099c31defec9e7786d23fa0570f", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/47e9a17b337d0099c31defec9e7786d23fa0570f", "committedDate": "2020-11-26T12:37:13Z", "message": "fix: Initialize VaadinServlet after Lookup is available (#9500)\n\nfix: don't initialize Vaadin servlet until Lookup is not available"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34448ea319e233cd7f7ff93a0d0c0f7abac3372f", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/34448ea319e233cd7f7ff93a0d0c0f7abac3372f", "committedDate": "2020-11-26T14:47:23Z", "message": "feat: Enable adding assets from node_modules (#9495)\n\n* feat: Enable adding assets from node_modules\r\n\r\nIt is now possible to import resources from\r\ninstalled node_modules by adding the asset to\r\ntheme/my-theme/theme.json\r\n\r\nFixes #9468\r\n\r\n* Add comment to doc on copyStaticAssets\r\n\r\n* Fix url expectation after merge\r\n\r\n* format lines"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 786, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}