{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNDA3MjIy", "number": 8624, "title": "Refactor lazy data view API based on feedback", "bodyText": "", "createdAt": "2020-06-26T06:30:51Z", "url": "https://github.com/vaadin/flow/pull/8624", "merged": true, "mergeCommit": {"oid": "03840b93519e563366fcf7b2ea2b92d7751d08da"}, "closed": true, "closedAt": "2020-06-27T14:46:59Z", "author": {"login": "pleku"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcupkFNgH2gAyNDQwNDA3MjIyOjQ3NTYyZjY5MzVmM2Y4YWI0YTQyOTQ2ZmE5YmNiOGU1NzdkMTM2NGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvY-QtgFqTQzODcwMzEwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "47562f6935f3f8ab4a42946fa9bcb8e577d1364c", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/47562f6935f3f8ab4a42946fa9bcb8e577d1364c", "committedDate": "2020-06-25T07:32:07Z", "message": "Refactor to LazyDataView API based on feedback\n\nInstead of defined/undefined size, uses setRowCountUnknown and\nsetRowCountEstimate etc. Removed callback for estimate."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/c0700a269287eee7ea0b3776ac51808091f0d157", "committedDate": "2020-06-26T05:58:46Z", "message": "Fixes based on DX test feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTI4OTcy", "url": "https://github.com/vaadin/flow/pull/8624#pullrequestreview-438128972", "createdAt": "2020-06-26T08:57:18Z", "commit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo1NzoxOFrOGpZONw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo1Nzo1MVrOGpZPLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1ODAzOQ==", "bodyText": "Would it better to replace it with rowCountEstimateIncrease < 0? rowCountEstimateIncrease is either -1 or >= 1. Otherwise, I wonder it there 0 value possible.", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446058039", "createdAt": "2020-06-26T08:57:18Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -443,77 +414,106 @@ public void setSizeCallback(\n     }\n \n     /**\n-     * Sets the size estimate callback to be used and switches the component to\n-     * undefined size. Any previously set callbacks or initial size are cleared.\n-     * The new estimate will be fetched after this roundtrip.\n+     * Sets the row count estimate to use and switches component to undefined\n+     * size. Any previously set count callback is cleared. The new estimate is\n+     * applied if the actual count has not been discovered and if the estimate\n+     * is greater than the number of requested items. Otherwise it is not\n+     * applied until there has been a reset.\n+     * <p>\n+     * <em>NOTE:</em> setting row count estimate that is less than two pages\n+     * (set with {@link #setPageSize(int)}) can cause extra requests initially\n+     * or after a reset.\n      * \n-     * @param sizeEstimateCallback\n-     *            the size estimate callback to use\n+     * @param rowCountEstimate\n+     *            the row count estimate to be used\n      */\n-    public void setSizeEstimateCallback(\n-            SizeEstimateCallback<T, ?> sizeEstimateCallback) {\n-        if (sizeEstimateCallback == null) {\n+    public void setRowCountEstimate(int rowCountEstimate) {\n+        if (rowCountEstimate < 1) {\n             throw new IllegalArgumentException(\n-                    \"Provided size estimate callback cannot be null - for \"\n-                            + \"switching between defined and undefined size use \"\n-                            + \"setDefinedSize(boolean) method instead.\");\n+                    \"Given row count estimate cannot be less than 1.\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.sizeEstimateCallback = sizeEstimateCallback;\n+        this.rowCountEstimate = rowCountEstimate;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset) {\n+        if (!skipSizeCheckUntilReset\n+                && requestedRange.getEnd() < rowCountEstimate) {\n             sizeReset = true;\n             requestFlush();\n         }\n     }\n \n     /**\n-     * Sets the initial size estimate to use and switches component to undefined\n-     * size. Any previously set size related callbacks are cleared. The new\n-     * estimate is only applied if it is greater than the number of requested\n-     * items. Otherwise it is not applied until there has been a reset.\n-     * <p>\n-     * <em>NOTE:</em> setting an initial size estimate that is less than two\n-     * pages (set with {@link #setPageSize(int)}) can cause extra requests\n-     * initially or after a reset.\n+     * Gets the row count estimate used.\n      * \n-     * @param initialSizeEstimate\n-     *            the initial size estimate to be used\n+     * @return the row count estimate used\n      */\n-    public void setInitialSizeEstimate(int initialSizeEstimate) {\n-        if (initialSizeEstimate < 1) {\n+    public int getRowCountEstimate() {\n+        int estimate = rowCountEstimate;\n+        if (estimate < 1) {\n+            estimate = pageSize * 4;\n+        }\n+        if (estimate <= requestedRange.getEnd()) {\n+            // don't let the count estimate set to lock component to\n+            // defined size -> increase the size so size it's not locked\n+            estimate = requestedRange.getEnd() + pageSize;\n+        }\n+        return estimate;\n+    }\n+\n+    /**\n+     * Sets the row count estimate increase to use and switches the component to\n+     * undefined size if not yet used. Any previously set count callback is\n+     * cleared. The step is used the next time that the count is adjusted.\n+     * <em>NOTE:</em> the increase should be greater than the\n+     * {@link #setPageSize(int)} or it may cause bad performance.\n+     * \n+     * @param rowCountEstimateIncrease\n+     *            the row count estimate step to use\n+     */\n+    public void setRowCountEstimateIncrease(int rowCountEstimateIncrease) {\n+        if (rowCountEstimateIncrease < 1) {\n             throw new IllegalArgumentException(\n-                    \"Given initial size estimate cannot be less than 1. For switching between defined and undefined size use setDefinedSize(boolean) method instead.\");\n+                    \"rowCountEstimateIncrease cannot be less than 1\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.initialSizeEstimate = initialSizeEstimate;\n+        this.rowCountEstimateIncrease = rowCountEstimateIncrease;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset\n-                && requestedRange.getEnd() < initialSizeEstimate) {\n-            sizeReset = true;\n-            requestFlush();\n+    }\n+\n+    /**\n+     * Gets the row count estimate increase used.\n+     * \n+     * @return the row count estimate increase\n+     */\n+    public int getRowCountEstimateIncrease() {\n+        if (rowCountEstimateIncrease < 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1ODI4NQ==", "bodyText": "Let's create a constant variable for '4'", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446058285", "createdAt": "2020-06-26T08:57:51Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -443,77 +414,106 @@ public void setSizeCallback(\n     }\n \n     /**\n-     * Sets the size estimate callback to be used and switches the component to\n-     * undefined size. Any previously set callbacks or initial size are cleared.\n-     * The new estimate will be fetched after this roundtrip.\n+     * Sets the row count estimate to use and switches component to undefined\n+     * size. Any previously set count callback is cleared. The new estimate is\n+     * applied if the actual count has not been discovered and if the estimate\n+     * is greater than the number of requested items. Otherwise it is not\n+     * applied until there has been a reset.\n+     * <p>\n+     * <em>NOTE:</em> setting row count estimate that is less than two pages\n+     * (set with {@link #setPageSize(int)}) can cause extra requests initially\n+     * or after a reset.\n      * \n-     * @param sizeEstimateCallback\n-     *            the size estimate callback to use\n+     * @param rowCountEstimate\n+     *            the row count estimate to be used\n      */\n-    public void setSizeEstimateCallback(\n-            SizeEstimateCallback<T, ?> sizeEstimateCallback) {\n-        if (sizeEstimateCallback == null) {\n+    public void setRowCountEstimate(int rowCountEstimate) {\n+        if (rowCountEstimate < 1) {\n             throw new IllegalArgumentException(\n-                    \"Provided size estimate callback cannot be null - for \"\n-                            + \"switching between defined and undefined size use \"\n-                            + \"setDefinedSize(boolean) method instead.\");\n+                    \"Given row count estimate cannot be less than 1.\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.sizeEstimateCallback = sizeEstimateCallback;\n+        this.rowCountEstimate = rowCountEstimate;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset) {\n+        if (!skipSizeCheckUntilReset\n+                && requestedRange.getEnd() < rowCountEstimate) {\n             sizeReset = true;\n             requestFlush();\n         }\n     }\n \n     /**\n-     * Sets the initial size estimate to use and switches component to undefined\n-     * size. Any previously set size related callbacks are cleared. The new\n-     * estimate is only applied if it is greater than the number of requested\n-     * items. Otherwise it is not applied until there has been a reset.\n-     * <p>\n-     * <em>NOTE:</em> setting an initial size estimate that is less than two\n-     * pages (set with {@link #setPageSize(int)}) can cause extra requests\n-     * initially or after a reset.\n+     * Gets the row count estimate used.\n      * \n-     * @param initialSizeEstimate\n-     *            the initial size estimate to be used\n+     * @return the row count estimate used\n      */\n-    public void setInitialSizeEstimate(int initialSizeEstimate) {\n-        if (initialSizeEstimate < 1) {\n+    public int getRowCountEstimate() {\n+        int estimate = rowCountEstimate;\n+        if (estimate < 1) {\n+            estimate = pageSize * 4;\n+        }\n+        if (estimate <= requestedRange.getEnd()) {\n+            // don't let the count estimate set to lock component to\n+            // defined size -> increase the size so size it's not locked\n+            estimate = requestedRange.getEnd() + pageSize;\n+        }\n+        return estimate;\n+    }\n+\n+    /**\n+     * Sets the row count estimate increase to use and switches the component to\n+     * undefined size if not yet used. Any previously set count callback is\n+     * cleared. The step is used the next time that the count is adjusted.\n+     * <em>NOTE:</em> the increase should be greater than the\n+     * {@link #setPageSize(int)} or it may cause bad performance.\n+     * \n+     * @param rowCountEstimateIncrease\n+     *            the row count estimate step to use\n+     */\n+    public void setRowCountEstimateIncrease(int rowCountEstimateIncrease) {\n+        if (rowCountEstimateIncrease < 1) {\n             throw new IllegalArgumentException(\n-                    \"Given initial size estimate cannot be less than 1. For switching between defined and undefined size use setDefinedSize(boolean) method instead.\");\n+                    \"rowCountEstimateIncrease cannot be less than 1\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.initialSizeEstimate = initialSizeEstimate;\n+        this.rowCountEstimateIncrease = rowCountEstimateIncrease;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset\n-                && requestedRange.getEnd() < initialSizeEstimate) {\n-            sizeReset = true;\n-            requestFlush();\n+    }\n+\n+    /**\n+     * Gets the row count estimate increase used.\n+     * \n+     * @return the row count estimate increase\n+     */\n+    public int getRowCountEstimateIncrease() {\n+        if (rowCountEstimateIncrease < 1) {\n+            return pageSize * 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 194}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MjQxNDg3", "url": "https://github.com/vaadin/flow/pull/8624#pullrequestreview-438241487", "createdAt": "2020-06-26T12:08:23Z", "commit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjowODoyM1rOGped7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjowODoyM1rOGped7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0Mzk4Mw==", "bodyText": "What about reset of rowCountEstimate and rowCountEstimateIncrease here?", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446143983", "createdAt": "2020-06-26T12:08:23Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -257,7 +254,7 @@ public void confirmUpdate(int updateId) {\n             DataProvider<T, F> dataProvider, F initialFilter) {\n         Objects.requireNonNull(dataProvider, \"data provider cannot be null\");\n         filter = initialFilter;\n-        clearSizeCallbacksAndState();\n+        countCallback = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MjQ5NzU5", "url": "https://github.com/vaadin/flow/pull/8624#pullrequestreview-438249759", "createdAt": "2020-06-26T12:22:47Z", "commit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjoyMjo0OFrOGpe3Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjoyMjo0OFrOGpe3Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE1MDQxMA==", "bodyText": "Just wondering, based on what you choose 4 for default estimation? For me it looks reasonable, because usually users have either not so much data to explore, or they apply filters to find something quicker and they scroll not so deeply, but is there any testers feedback about that?", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446150410", "createdAt": "2020-06-26T12:22:48Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -443,77 +414,106 @@ public void setSizeCallback(\n     }\n \n     /**\n-     * Sets the size estimate callback to be used and switches the component to\n-     * undefined size. Any previously set callbacks or initial size are cleared.\n-     * The new estimate will be fetched after this roundtrip.\n+     * Sets the row count estimate to use and switches component to undefined\n+     * size. Any previously set count callback is cleared. The new estimate is\n+     * applied if the actual count has not been discovered and if the estimate\n+     * is greater than the number of requested items. Otherwise it is not\n+     * applied until there has been a reset.\n+     * <p>\n+     * <em>NOTE:</em> setting row count estimate that is less than two pages\n+     * (set with {@link #setPageSize(int)}) can cause extra requests initially\n+     * or after a reset.\n      * \n-     * @param sizeEstimateCallback\n-     *            the size estimate callback to use\n+     * @param rowCountEstimate\n+     *            the row count estimate to be used\n      */\n-    public void setSizeEstimateCallback(\n-            SizeEstimateCallback<T, ?> sizeEstimateCallback) {\n-        if (sizeEstimateCallback == null) {\n+    public void setRowCountEstimate(int rowCountEstimate) {\n+        if (rowCountEstimate < 1) {\n             throw new IllegalArgumentException(\n-                    \"Provided size estimate callback cannot be null - for \"\n-                            + \"switching between defined and undefined size use \"\n-                            + \"setDefinedSize(boolean) method instead.\");\n+                    \"Given row count estimate cannot be less than 1.\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.sizeEstimateCallback = sizeEstimateCallback;\n+        this.rowCountEstimate = rowCountEstimate;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset) {\n+        if (!skipSizeCheckUntilReset\n+                && requestedRange.getEnd() < rowCountEstimate) {\n             sizeReset = true;\n             requestFlush();\n         }\n     }\n \n     /**\n-     * Sets the initial size estimate to use and switches component to undefined\n-     * size. Any previously set size related callbacks are cleared. The new\n-     * estimate is only applied if it is greater than the number of requested\n-     * items. Otherwise it is not applied until there has been a reset.\n-     * <p>\n-     * <em>NOTE:</em> setting an initial size estimate that is less than two\n-     * pages (set with {@link #setPageSize(int)}) can cause extra requests\n-     * initially or after a reset.\n+     * Gets the row count estimate used.\n      * \n-     * @param initialSizeEstimate\n-     *            the initial size estimate to be used\n+     * @return the row count estimate used\n      */\n-    public void setInitialSizeEstimate(int initialSizeEstimate) {\n-        if (initialSizeEstimate < 1) {\n+    public int getRowCountEstimate() {\n+        int estimate = rowCountEstimate;\n+        if (estimate < 1) {\n+            estimate = pageSize * 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 150}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MjU4MjQx", "url": "https://github.com/vaadin/flow/pull/8624#pullrequestreview-438258241", "createdAt": "2020-06-26T12:36:41Z", "commit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjozNjo0MlrOGpfQhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjozNjo0MlrOGpfQhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE1NjkzMg==", "bodyText": "what if rowCountEstimateIncrease < pageSize? in that case assumedSize would be still less than requestedRange.getEnd() + pageSize, is it fine?", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446156932", "createdAt": "2020-06-26T12:36:42Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -616,102 +610,29 @@ public void setBackEndSorting(List<QuerySortOrder> sortOrder) {\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected int getDataProviderSize() {\n         assert definedSize : \"This method should never be called when using undefined size\";\n-        if (sizeCallback != null) {\n-            return sizeCallback.count(new Query(getFilter()));\n+        if (countCallback != null) {\n+            return countCallback.count(new Query(getFilter()));\n         } else {\n             return getDataProvider().size(new Query(getFilter()));\n         }\n     }\n \n     private void updateUndefinedSize() {\n         assert !definedSize : \"This method should never be called when using defined size\";\n-        // things have reset\n+        int previousAssumedSize = assumedSize;\n         if (resendEntireRange || sizeReset) {\n-            // 1. given size estimate\n-            int size = initialSizeEstimate;\n-            if (initialSizeEstimate > 0\n-                    && initialSizeEstimate <= requestedRange.getEnd()) {\n-                // don't let the initial size estimate set to lock component to\n-                // defined size -> increase the size so size it's not locked\n-                size = requestedRange.getEnd() + pageSize;\n-            }\n-            // 2. given estimate callback\n-            if (sizeEstimateCallback != null) {\n-                size = getNewSizeEstimateFromCallback(true);\n-            }\n-            // 3. default initial size\n-            if (size == -1) {\n-                size = getDefaultInitialSize();\n-            }\n-            getLogger(DataCommunicator.class).info(\n-                    \"Requested range: {} old size: {} new size: {}\",\n-                    requestedRange, assumedSize, size);\n-            assumedSize = size;\n+            // things have reset\n+            assumedSize = getRowCountEstimate();\n         } else {\n             // increase size estimate if the last page is being fetched\n             if (requestedRange.getEnd() + pageSize > assumedSize) {\n-                int previousAssumedSize = assumedSize;\n-                if (sizeEstimateCallback != null) {\n-                    assumedSize = getNewSizeEstimateFromCallback(false);\n-                } else {\n-                    // by default adjust size by multiple of page size\n-                    assumedSize += getEstimatedSizeIncrease();\n-                }\n-                getLogger(DataCommunicator.class).info(\n-                        \"Requested range: {} old size: {} new size: {}\",\n-                        requestedRange, previousAssumedSize, assumedSize);\n+                // by default adjust size by multiple of page size\n+                assumedSize += getRowCountEstimateIncrease();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 307}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8adf69fd40a9d1d4eb472ff6e456e6cdaed68bd2", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/8adf69fd40a9d1d4eb472ff6e456e6cdaed68bd2", "committedDate": "2020-06-26T19:40:03Z", "message": "Review fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzAzMTAw", "url": "https://github.com/vaadin/flow/pull/8624#pullrequestreview-438703100", "createdAt": "2020-06-27T14:46:15Z", "commit": {"oid": "8adf69fd40a9d1d4eb472ff6e456e6cdaed68bd2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 220, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}