{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2Mzg4OTc0", "number": 9727, "title": "Refactor Lookup initialization for Servlet 3.0 containers", "bodyText": "Provides SPI for Lookup SPI\nfixes #9717", "createdAt": "2020-12-29T08:41:19Z", "url": "https://github.com/vaadin/flow/pull/9727", "merged": true, "mergeCommit": {"oid": "fe97bc649436ea2d75e82fbb4a47029eea958624"}, "closed": true, "closedAt": "2021-01-05T12:21:27Z", "author": {"login": "denis-anisimov"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdq5eGLgFqTU1OTUwMTEyNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtDYWEAFqTU2MTUwOTg0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NTAxMTI3", "url": "https://github.com/vaadin/flow/pull/9727#pullrequestreview-559501127", "createdAt": "2020-12-29T11:59:31Z", "commit": {"oid": "172a0059662622ddf1351b8df82f1e133d64a2e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTo1OTozMVrOIMNs4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTo1OTozMVrOIMNs4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3ODMwNQ==", "bodyText": "Remove this use of \"DeprecatedPolymerPublishedEventHandler\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9727#discussion_r549678305", "createdAt": "2020-12-29T11:59:31Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/LookupServletContainerInitializer.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.HandlesTypes;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n+import com.vaadin.flow.di.InstantiatorFactory;\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.LookupInitializer;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.server.VaadinServletContext;\n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n+\n+/**\n+ * Standard servlet initializer for collecting all SPI implementations.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+@HandlesTypes({ ResourceProvider.class, InstantiatorFactory.class,\n+        DeprecatedPolymerPublishedEventHandler.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "172a0059662622ddf1351b8df82f1e133d64a2e5"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NTAxMTMw", "url": "https://github.com/vaadin/flow/pull/9727#pullrequestreview-559501130", "createdAt": "2020-12-29T11:59:31Z", "commit": {"oid": "172a0059662622ddf1351b8df82f1e133d64a2e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTo1OTozMlrOIMNs5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTo1OTozMlrOIMNs5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3ODMwOQ==", "bodyText": "\"servletContext\" is a method parameter, and should not be used for synchronization.", "url": "https://github.com/vaadin/flow/pull/9727#discussion_r549678309", "createdAt": "2020-12-29T11:59:32Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/LookupServletContainerInitializer.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.HandlesTypes;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerPublishedEventHandler;\n+import com.vaadin.flow.di.InstantiatorFactory;\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.LookupInitializer;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.server.VaadinServletContext;\n+import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n+\n+/**\n+ * Standard servlet initializer for collecting all SPI implementations.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+@HandlesTypes({ ResourceProvider.class, InstantiatorFactory.class,\n+        DeprecatedPolymerPublishedEventHandler.class,\n+        EndpointGeneratorTaskFactory.class,\n+        ApplicationConfigurationFactory.class, LookupInitializer.class })\n+public class LookupServletContainerInitializer\n+        implements ClassLoaderAwareServletContainerInitializer {\n+\n+    @Override\n+    public void process(Set<Class<?>> classSet, ServletContext servletContext)\n+            throws ServletException {\n+        VaadinServletContext vaadinContext = new VaadinServletContext(\n+                servletContext);\n+        Map<Class<?>, Collection<Class<?>>> services = new HashMap<>();\n+\n+        collectSubclasses(LookupInitializer.class, classSet, services);\n+\n+        LookupInitializer initializer = getLookupInitializer(services);\n+\n+        services.remove(LookupInitializer.class);\n+\n+        collectServiceImplementations(classSet, services);\n+\n+        initializer.initialize(vaadinContext, services, lookup -> {\n+            vaadinContext.setAttribute(Lookup.class, lookup);\n+\n+            DeferredServletContextInitializers deferredInitializers;\n+            synchronized (servletContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "172a0059662622ddf1351b8df82f1e133d64a2e5"}, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1b1c283afea14cb232434c21329c83d17975d4c", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/e1b1c283afea14cb232434c21329c83d17975d4c", "committedDate": "2020-12-29T11:57:49Z", "message": "refactor: make \"instantiate\" method protected"}, "afterCommit": {"oid": "7d3a02d90099d3a9370fd066a3f61eeb07103dc0", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/7d3a02d90099d3a9370fd066a3f61eeb07103dc0", "committedDate": "2020-12-29T12:00:42Z", "message": "refactor: make \"instantiate\" method protected"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed7563536c04e4957b31446f6d86bb1cfb7832d2", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/ed7563536c04e4957b31446f6d86bb1cfb7832d2", "committedDate": "2020-12-29T12:05:19Z", "message": "fix: avoid calling intentionally overridable method in CTOR"}, "afterCommit": {"oid": "dab2acb167bea5715c2b71f70bce97077d024c5a", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/dab2acb167bea5715c2b71f70bce97077d024c5a", "committedDate": "2020-12-29T12:06:22Z", "message": "fix: avoid calling intentionally overridable method in CTOR"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dab2acb167bea5715c2b71f70bce97077d024c5a", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/dab2acb167bea5715c2b71f70bce97077d024c5a", "committedDate": "2020-12-29T12:06:22Z", "message": "fix: avoid calling intentionally overridable method in CTOR"}, "afterCommit": {"oid": "5f427ef59d9eeab788e5d5c9f2435ce90330defd", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/5f427ef59d9eeab788e5d5c9f2435ce90330defd", "committedDate": "2020-12-29T12:17:12Z", "message": "fix: make ResourceProviderImpl CTOR public"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f427ef59d9eeab788e5d5c9f2435ce90330defd", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/5f427ef59d9eeab788e5d5c9f2435ce90330defd", "committedDate": "2020-12-29T12:17:12Z", "message": "fix: make ResourceProviderImpl CTOR public"}, "afterCommit": {"oid": "11f924f073b0c3d4ebc3a3cb79117afb29582e81", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/11f924f073b0c3d4ebc3a3cb79117afb29582e81", "committedDate": "2020-12-29T12:18:44Z", "message": "fix: make ResourceProviderImpl CTOR public"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NTQ4NzAz", "url": "https://github.com/vaadin/flow/pull/9727#pullrequestreview-559548703", "createdAt": "2020-12-29T14:10:16Z", "commit": {"oid": "f59db83576f1d192cc2ddfe79499cea1b8bdf00b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDoxMDoxNlrOIMQJQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDoxMDoxNlrOIMQJQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcxODMzNg==", "bodyText": "Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.", "url": "https://github.com/vaadin/flow/pull/9727#discussion_r549718336", "createdAt": "2020-12-29T14:10:16Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/di/LookupInitializer.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.di;\n+\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletException;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import com.vaadin.flow.function.VaadinApplicationInitializationBootstrap;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.server.VaadinContext;\n+import com.vaadin.flow.server.startup.ApplicationConfigurationFactory;\n+import com.vaadin.flow.server.startup.DefaultApplicationConfigurationFactory;\n+import com.vaadin.flow.server.startup.LookupServletContainerInitializer;\n+\n+/**\n+ * SPI for customizing lookup in applications inside Servlet 3.0 containers.\n+ * <p>\n+ * There are two ways of customizing Lookup in various servlet containers:\n+ * <ul>\n+ * <li>Somehow completely disable {@link LookupServletContainerInitializer} and\n+ * implement own way to set up {@link Lookup} and make it available via\n+ * {@link VaadinContext#getAttribute(Class)}.\n+ * <li>Use {@link LookupInitializer} SPI via providing an implementation for the\n+ * framework which doesn't prevent {@link LookupServletContainerInitializer}\n+ * execution.\n+ * </ul>\n+ * \n+ * The first case is only possible when a servlet container doesn't run\n+ * {@link ServletContainerInitializer}s out of the box (e.g. OSGi or Spring boot\n+ * executed as a Jar) at all. Otherwise you may not disable an existing\n+ * {@link ServletContainerInitializer} and it will be executed anyway.\n+ * <p>\n+ * The second case allows to customize {@link Lookup} creation and\n+ * initialization in case when it's not possible to prevent\n+ * {@link LookupServletContainerInitializer} execution (any container which\n+ * completely supports Servlet 3.0 specification). In this case it's possible to\n+ * implement {@link LookupInitializer} for the framework.\n+ * <p>\n+ * This is SPI for {@link Lookup} SPI. The difference is:\n+ * <ul>\n+ * <li>{@link Lookup} allows to override services per Web application (by the\n+ * application developer). For some service interfaces there can be several\n+ * implementations available in {@link Lookup}.\n+ * <li>{@link LookupInitializer} allows to override how the {@link Lookup} works\n+ * per framework. The default implementation available if no framework is used.\n+ * Only one service implementation (excluding the default one) may be available\n+ * in the web application classpath and it's provided by the developers for the\n+ * framework support (the main usecase here is Spring add-on).\n+ * </ul>\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+public class LookupInitializer {\n+\n+    protected static final String SPI = \" SPI: \";\n+\n+    protected static final String ONE_IMPL_REQUIRED = \". Only one implementation should be registered. \"\n+            + \"Use lookupAll to get all instances of the given type.\";\n+\n+    protected static final String SEVERAL_IMPLS = \"Found several implementations in the classpath for \";\n+\n+    /**\n+     * Default implementation of {@link Lookup}.\n+     * \n+     * @author Vaadin Ltd\n+     * @since\n+     *\n+     */\n+    protected static class LookupImpl implements Lookup {\n+\n+        protected final Map<Class<?>, Collection<Object>> serviceMap;\n+\n+        /**\n+         * Creates a new instance of {@link Lookup} with services found in the\n+         * application classpath.\n+         * \n+         * @param initialServices\n+         *            map of initial services with their implementations\n+         * @param factory\n+         *            a factory to create a service object instance\n+         */\n+        protected LookupImpl(\n+                Map<Class<?>, Collection<Class<?>>> initialServices,\n+                BiFunction<Class<?>, Class<?>, Object> factory) {\n+            serviceMap = new HashMap<>();\n+            initialServices.forEach((serviceClass,\n+                    impls) -> serviceMap.put(serviceClass, impls.stream()\n+                            .map(impl -> factory.apply(serviceClass, impl))\n+                            .filter(Objects::nonNull)\n+                            .collect(Collectors.toList())));\n+        }\n+\n+        @Override\n+        public <T> T lookup(Class<T> serviceClass) {\n+            Collection<Object> registered = serviceMap.get(serviceClass);\n+            if (registered == null || registered.isEmpty()) {\n+                ServiceLoader<T> loader = ServiceLoader.load(serviceClass);\n+                List<T> services = new ArrayList<>();\n+                for (Iterator<T> iterator = loader.iterator(); iterator\n+                        .hasNext();) {\n+                    services.add(iterator.next());\n+                }\n+                if (services.size() > 1) {\n+                    throw new IllegalStateException(SEVERAL_IMPLS + serviceClass\n+                            + SPI + services + ONE_IMPL_REQUIRED);\n+                } else if (services.size() == 1) {\n+                    return services.get(0);\n+                }\n+                return null;\n+            } else if (registered.size() > 1) {\n+                throw new IllegalStateException(SEVERAL_IMPLS + serviceClass\n+                        + SPI + registered + ONE_IMPL_REQUIRED);\n+            } else {\n+                return serviceClass.cast(registered.iterator().next());\n+            }\n+        }\n+\n+        @Override\n+        public <T> Collection<T> lookupAll(Class<T> serviceClass) {\n+            List<T> result = new ArrayList<>();\n+            Collection<Object> registered = serviceMap.get(serviceClass);\n+\n+            Set<?> registeredClasses = registered == null\n+                    ? Collections.emptySet()\n+                    : registered.stream().map(Object::getClass)\n+                            .collect(Collectors.toSet());\n+            if (registered != null) {\n+                registered.forEach(\n+                        service -> result.add(serviceClass.cast(service)));\n+            }\n+            ServiceLoader<T> loader = ServiceLoader.load(serviceClass);\n+            for (Iterator<T> iterator = loader.iterator(); iterator\n+                    .hasNext();) {\n+                T next = iterator.next();\n+                if (!registeredClasses.contains(next.getClass())) {\n+                    result.add(next);\n+                }\n+            }\n+            return result;\n+        }\n+\n+    }\n+\n+    /**\n+     * Default implementation of {@link ResourceProvider}.\n+     * \n+     * @author Vaadin Ltd\n+     * @since\n+     *\n+     */\n+    protected static class ResourceProviderImpl implements ResourceProvider {\n+\n+        private Map<String, CachedStreamData> cache = new ConcurrentHashMap<>();\n+\n+        /**\n+         * Creates a new instance.\n+         */\n+        public ResourceProviderImpl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59db83576f1d192cc2ddfe79499cea1b8bdf00b"}, "originalPosition": 194}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61249348d72579a6d2828d2cc2c2ed3cc0b8c5d7", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/61249348d72579a6d2828d2cc2c2ed3cc0b8c5d7", "committedDate": "2020-12-30T10:07:22Z", "message": "refactor: rename lookup initializer class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae38b07cccd79b979f4ba46c289c883e06dd056a", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/ae38b07cccd79b979f4ba46c289c883e06dd056a", "committedDate": "2020-12-30T10:07:23Z", "message": "test: add unit tests for refactored code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bbe958426d688e65f7fa0a76e9ad1d924d70cf1", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/4bbe958426d688e65f7fa0a76e9ad1d924d70cf1", "committedDate": "2020-12-30T10:07:23Z", "message": "refactor: add VaadinContext as a parameter to SPI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15932d798b58edbc309b03287be41fe82ca7989d", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/15932d798b58edbc309b03287be41fe82ca7989d", "committedDate": "2020-12-30T10:07:23Z", "message": "fix: fix javadocs and serializable tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f78b5278743fd5dc6e07b043d7a776be7ea55631", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/f78b5278743fd5dc6e07b043d7a776be7ea55631", "committedDate": "2020-12-30T10:07:24Z", "message": "fix: fix javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44b256984bbf53801d4e849021a6e93b0bc9c7b6", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/44b256984bbf53801d4e849021a6e93b0bc9c7b6", "committedDate": "2020-12-30T10:07:24Z", "message": "refactor: extend protected SPI method with context param"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b5b4d49a63d186ba19e61954d7531f63be07f78", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/2b5b4d49a63d186ba19e61954d7531f63be07f78", "committedDate": "2020-12-30T10:07:24Z", "message": "refactor: make \"instantiate\" method protected"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7775481a5d6991e1504feec0734df65096a70187", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/7775481a5d6991e1504feec0734df65096a70187", "committedDate": "2020-12-30T10:07:25Z", "message": "fix: avoid calling intentionally overridable method in CTOR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9a7d751e8c46ee1fea95fa279e74fba5dbc2b7a", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/c9a7d751e8c46ee1fea95fa279e74fba5dbc2b7a", "committedDate": "2020-12-30T10:07:25Z", "message": "fix: make ResourceProviderImpl CTOR public"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26241bfe3a5adbe5a14a867db98ee70fb1deb3e3", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/26241bfe3a5adbe5a14a867db98ee70fb1deb3e3", "committedDate": "2020-12-30T10:07:25Z", "message": "fix: cleanup, fix javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwODcwNDI2", "url": "https://github.com/vaadin/flow/pull/9727#pullrequestreview-560870426", "createdAt": "2021-01-04T09:07:58Z", "commit": {"oid": "f59db83576f1d192cc2ddfe79499cea1b8bdf00b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTowNzo1OVrOINqA3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo1NzowM1rOINrjDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE5MDc0OA==", "bodyText": "This shouldn't start with Somehow and should be the second way as it's not the recommended way (as we can't say how to disable a part from the ServletContainerInitializer)", "url": "https://github.com/vaadin/flow/pull/9727#discussion_r551190748", "createdAt": "2021-01-04T09:07:59Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/di/LookupInitializer.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.di;\n+\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletException;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import com.vaadin.flow.function.VaadinApplicationInitializationBootstrap;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.server.VaadinContext;\n+import com.vaadin.flow.server.startup.ApplicationConfigurationFactory;\n+import com.vaadin.flow.server.startup.DefaultApplicationConfigurationFactory;\n+import com.vaadin.flow.server.startup.LookupServletContainerInitializer;\n+\n+/**\n+ * SPI for customizing lookup in applications inside Servlet 3.0 containers.\n+ * <p>\n+ * There are two ways of customizing Lookup in various servlet containers:\n+ * <ul>\n+ * <li>Somehow completely disable {@link LookupServletContainerInitializer} and\n+ * implement own way to set up {@link Lookup} and make it available via\n+ * {@link VaadinContext#getAttribute(Class)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59db83576f1d192cc2ddfe79499cea1b8bdf00b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxNTg4NQ==", "bodyText": "The name could say why it is expected to throw. Multiple instances I presume?", "url": "https://github.com/vaadin/flow/pull/9727#discussion_r551215885", "createdAt": "2021-01-04T09:57:03Z", "author": {"login": "caalador"}, "path": "flow-server/src/test/java/com/vaadin/flow/di/LookupIntializerTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.di;\n+\n+import javax.servlet.ServletException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.flow.di.LookupInitializer.ResourceProviderImpl;\n+import com.vaadin.flow.function.VaadinApplicationInitializationBootstrap;\n+import com.vaadin.flow.server.startup.ApplicationConfigurationFactory;\n+import com.vaadin.flow.server.startup.DefaultApplicationConfigurationFactory;\n+import com.vaadin.flow.server.startup.testdata.AnotherTestInstantiatorFactory;\n+import com.vaadin.flow.server.startup.testdata.OneMoreTestInstantiatorFactory;\n+import com.vaadin.flow.server.startup.testdata.TestInstantiatorFactory;\n+import com.vaadin.flow.server.startup.testdata.TestResourceProvider;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonObject;\n+\n+public class LookupIntializerTest {\n+\n+    private LookupInitializer initializer = new LookupInitializer();\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void createLookup_instantiatorsAreProvidedAsAService_lookupThrows()\n+            throws ServletException {\n+        // Java standard SPI is used to register several instantiators via\n+        // META-INF/services\n+        Lookup lookup = initializer.createLookup(null, new HashMap<>());\n+\n+        lookup.lookup(InstantiatorFactory.class);\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void createLookup_instantiatorsAreProvidedAsScannedClasses_lookupThrows()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59db83576f1d192cc2ddfe79499cea1b8bdf00b"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4962b6699a6a4c37d9fcc18a45a380aef3edd577", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/4962b6699a6a4c37d9fcc18a45a380aef3edd577", "committedDate": "2021-01-04T17:12:08Z", "message": "fix: fix javadocs and rename unit test method (review comments)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f59db83576f1d192cc2ddfe79499cea1b8bdf00b", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/f59db83576f1d192cc2ddfe79499cea1b8bdf00b", "committedDate": "2020-12-29T13:13:52Z", "message": "fix: cleanup, fix javadocs"}, "afterCommit": {"oid": "4962b6699a6a4c37d9fcc18a45a380aef3edd577", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/4962b6699a6a4c37d9fcc18a45a380aef3edd577", "committedDate": "2021-01-04T17:12:08Z", "message": "fix: fix javadocs and rename unit test method (review comments)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNTA5ODQw", "url": "https://github.com/vaadin/flow/pull/9727#pullrequestreview-561509840", "createdAt": "2021-01-05T04:40:08Z", "commit": {"oid": "4962b6699a6a4c37d9fcc18a45a380aef3edd577"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 829, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}