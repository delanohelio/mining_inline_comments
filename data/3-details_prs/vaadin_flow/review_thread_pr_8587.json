{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NDcwNTMy", "number": 8587, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo1MToyM1rOEHdq3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNzozODoyOVrOEIpYJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjYxNTk3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/JsonUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo1MToyM1rOGm1j1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo1MToyM1rOGm1j1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3NjU5OA==", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "url": "https://github.com/vaadin/flow/pull/8587#discussion_r443376598", "createdAt": "2020-06-22T07:51:23Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/JsonUtils.java", "diffHunk": "@@ -275,4 +281,60 @@ public static JsonArray createArray(JsonValue... values) {\n \n         return object;\n     }\n+\n+    /**\n+     * Converts the given bean to JSON.\n+     *\n+     * @param bean\n+     *                 the bean to convert, not {@code null}\n+     * @return a JSON representation of the bean\n+     */\n+    public static JsonObject beanToJson(Object bean) {\n+        if (bean == null) {\n+            throw new RuntimeException(\"Cannot convert null to a JSON object\");\n+        }\n+        try {\n+            return Json.parse(objectMapper.writeValueAsString(bean));\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(\"Error converting bean to JSON\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77f718d2a040ed7eb22dfed621f63ad3b2b64107"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mjg1ODI2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/JsonUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTowMTozMVrOGm39LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTowMTozMVrOGm39LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQxNTg1Mw==", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "url": "https://github.com/vaadin/flow/pull/8587#discussion_r443415853", "createdAt": "2020-06-22T09:01:31Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/JsonUtils.java", "diffHunk": "@@ -275,4 +283,58 @@ public static JsonArray createArray(JsonValue... values) {\n \n         return object;\n     }\n+\n+    /**\n+     * Converts the given bean to JSON.\n+     *\n+     * @param bean\n+     *                 the bean to convert, not {@code null}\n+     * @return a JSON representation of the bean\n+     */\n+    public static JsonObject beanToJson(Object bean) {\n+        if (bean == null) {\n+            throw new RuntimeException(CANNOT_CONVERT_NULL_TO_A_JSON_OBJECT);\n+        }\n+        try {\n+            return Json.parse(objectMapper.writeValueAsString(bean));\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(\"Error converting bean to JSON\", e);\n+        }\n+    }\n+\n+    /**\n+     * Converts the given list to JSON.\n+     *\n+     * @param list\n+     *                 the list to convert, not {@code null}\n+     * @return a JSON representation of the bean\n+     */\n+    public static JsonArray listToJson(List<?> list) {\n+        if (list == null) {\n+            throw new RuntimeException(CANNOT_CONVERT_NULL_TO_A_JSON_OBJECT);\n+        }\n+        try {\n+            return Json.instance().parse(objectMapper.writeValueAsString(list));\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(\"Error converting list to JSON\", e);\n+        }\n+    }\n+\n+    /**\n+     * Converts the given map to JSON.\n+     *\n+     * @param map\n+     *                the map to convert, not {@code null}\n+     * @return a JSON representation of the bean\n+     */\n+    public static JsonObject mapToJson(Map<String, ?> map) {\n+        if (map == null) {\n+            throw new RuntimeException(CANNOT_CONVERT_NULL_TO_A_JSON_OBJECT);\n+        }\n+        try {\n+            return Json.instance().parse(objectMapper.writeValueAsString(map));\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(\"Error converting map to JSON\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebc53d130926418158504e3a56c69a92322fe8b"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mjg1ODQ4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/JsonUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTowMTozNVrOGm39Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTowMTozNVrOGm39Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQxNTg5MA==", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "url": "https://github.com/vaadin/flow/pull/8587#discussion_r443415890", "createdAt": "2020-06-22T09:01:35Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/JsonUtils.java", "diffHunk": "@@ -275,4 +283,58 @@ public static JsonArray createArray(JsonValue... values) {\n \n         return object;\n     }\n+\n+    /**\n+     * Converts the given bean to JSON.\n+     *\n+     * @param bean\n+     *                 the bean to convert, not {@code null}\n+     * @return a JSON representation of the bean\n+     */\n+    public static JsonObject beanToJson(Object bean) {\n+        if (bean == null) {\n+            throw new RuntimeException(CANNOT_CONVERT_NULL_TO_A_JSON_OBJECT);\n+        }\n+        try {\n+            return Json.parse(objectMapper.writeValueAsString(bean));\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(\"Error converting bean to JSON\", e);\n+        }\n+    }\n+\n+    /**\n+     * Converts the given list to JSON.\n+     *\n+     * @param list\n+     *                 the list to convert, not {@code null}\n+     * @return a JSON representation of the bean\n+     */\n+    public static JsonArray listToJson(List<?> list) {\n+        if (list == null) {\n+            throw new RuntimeException(CANNOT_CONVERT_NULL_TO_A_JSON_OBJECT);\n+        }\n+        try {\n+            return Json.instance().parse(objectMapper.writeValueAsString(list));\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(\"Error converting list to JSON\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebc53d130926418158504e3a56c69a92322fe8b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTAxOTkwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/dom/Element.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNzozODoyOVrOGou6jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODoyMDoxNlrOGowWxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM2NDg3Nw==", "bodyText": "Perhaps the existing method setPropertyJson which throws the same hint could use this new string constant as well.", "url": "https://github.com/vaadin/flow/pull/8587#discussion_r445364877", "createdAt": "2020-06-25T07:38:29Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/dom/Element.java", "diffHunk": "@@ -665,6 +669,79 @@ public Element setPropertyJson(String name, JsonValue value) {\n         return this;\n     }\n \n+    /**\n+     * Sets the given property to the given bean, converted to a JSON object.\n+     * <p>\n+     * Note that properties changed on the server are updated on the client but\n+     * changes made on the client side are not reflected back to the server\n+     * unless configured using\n+     * {@link #addPropertyChangeListener(String, String, PropertyChangeListener)}\n+     * or {@link DomListenerRegistration#synchronizeProperty(String)}.\n+     *\n+     * @param name\n+     *                  the property name, not <code>null</code>\n+     * @param value\n+     *                  the property value, not <code>null</code>\n+     * @return this element\n+     */\n+    // Distinct name so setProperty(\"foo\", null) is not ambiguous\n+    public Element setPropertyBean(String name, Object value) {\n+        if (value == null) {\n+            throw new IllegalArgumentException(USE_SET_PROPERTY_WITH_JSON_NULL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c692a2db966daa3760ce209457f7dd6589c0491b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4ODQ4Nw==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8587#discussion_r445388487", "createdAt": "2020-06-25T08:20:16Z", "author": {"login": "Artur-"}, "path": "flow-server/src/main/java/com/vaadin/flow/dom/Element.java", "diffHunk": "@@ -665,6 +669,79 @@ public Element setPropertyJson(String name, JsonValue value) {\n         return this;\n     }\n \n+    /**\n+     * Sets the given property to the given bean, converted to a JSON object.\n+     * <p>\n+     * Note that properties changed on the server are updated on the client but\n+     * changes made on the client side are not reflected back to the server\n+     * unless configured using\n+     * {@link #addPropertyChangeListener(String, String, PropertyChangeListener)}\n+     * or {@link DomListenerRegistration#synchronizeProperty(String)}.\n+     *\n+     * @param name\n+     *                  the property name, not <code>null</code>\n+     * @param value\n+     *                  the property value, not <code>null</code>\n+     * @return this element\n+     */\n+    // Distinct name so setProperty(\"foo\", null) is not ambiguous\n+    public Element setPropertyBean(String name, Object value) {\n+        if (value == null) {\n+            throw new IllegalArgumentException(USE_SET_PROPERTY_WITH_JSON_NULL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM2NDg3Nw=="}, "originalCommit": {"oid": "c692a2db966daa3760ce209457f7dd6589c0491b"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3266, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}