{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNTAwOTM1", "number": 9406, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTo1NToxM1rOE5XS8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTowNTo0MVrOE59xMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTg1OTcxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTo1NToxM1rOHzxjwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODoxODo0MFrOH0pIBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1MTM5Mw==", "bodyText": "Mayhaps this msg could be updated too", "url": "https://github.com/vaadin/flow/pull/9406#discussion_r524051393", "createdAt": "2020-11-16T09:55:13Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -24,25 +24,23 @@ let logger;\n /**\n  * The application theme plugin is for generating, collecting and copying of theme files for the application theme.\n  *\n- * TODO: enable giving themes to handle #9383\n- *\n  * The plugin should be supplied with the paths for\n  *\n- *  themeJarFolder                  - theme folder inside a jar\n+ *  themeResourceFolder             - theme folder where flow copies local and jar resource frontend files\n  *  themeProjectFolders             - array of possible locations for theme folders inside the project\n  *  projectStaticAssetsOutputFolder - path to where static assets should be put\n  */\n class ApplicationThemePlugin {\n   constructor(options) {\n     this.options = options;\n \n-    if(!this.options.themeJarFolder) {\n+    if (!this.options.themeResourceFolder) {\n       throw new Error(\"Missing themeJarFolder path\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4514f8239faab36bdc79d3c208ffac832c5ef4b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2MTc5OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/vaadin/flow/pull/9406#discussion_r524961798", "createdAt": "2020-11-17T08:18:40Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -24,25 +24,23 @@ let logger;\n /**\n  * The application theme plugin is for generating, collecting and copying of theme files for the application theme.\n  *\n- * TODO: enable giving themes to handle #9383\n- *\n  * The plugin should be supplied with the paths for\n  *\n- *  themeJarFolder                  - theme folder inside a jar\n+ *  themeResourceFolder             - theme folder where flow copies local and jar resource frontend files\n  *  themeProjectFolders             - array of possible locations for theme folders inside the project\n  *  projectStaticAssetsOutputFolder - path to where static assets should be put\n  */\n class ApplicationThemePlugin {\n   constructor(options) {\n     this.options = options;\n \n-    if(!this.options.themeJarFolder) {\n+    if (!this.options.themeResourceFolder) {\n       throw new Error(\"Missing themeJarFolder path\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1MTM5Mw=="}, "originalCommit": {"oid": "c4514f8239faab36bdc79d3c208ffac832c5ef4b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTk2NzM5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxMTowMlrOHzypqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODoxOTo1NlrOH0pK2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2OTI4OA==", "bodyText": "Does it make sense to move this outside of the method to be reused ?", "url": "https://github.com/vaadin/flow/pull/9406#discussion_r524069288", "createdAt": "2020-11-16T10:11:02Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,17 +49,30 @@ class ApplicationThemePlugin {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n     compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n-      if (fs.existsSync(this.options.themeJarFolder)) {\n-        logger.debug(\"Found themeFolder in jar file \", this.options.themeJarFolder);\n-        handleThemes(this.options.themeJarFolder, this.options.projectStaticAssetsOutputFolder);\n-      }\n+      const generatedThemeFile = path.resolve(this.options.themeResourceFolder, \"theme-generated.js\");\n+      if (fs.existsSync(generatedThemeFile)) {\n+\n+        // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n+        const nameRegex = /theme\\/(.*)\\/\\1.js/g; // matches theme folder name in 'theme/my-theme/my-theme.js'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4514f8239faab36bdc79d3c208ffac832c5ef4b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2MjUyMw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/vaadin/flow/pull/9406#discussion_r524962523", "createdAt": "2020-11-17T08:19:56Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,17 +49,30 @@ class ApplicationThemePlugin {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n     compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n-      if (fs.existsSync(this.options.themeJarFolder)) {\n-        logger.debug(\"Found themeFolder in jar file \", this.options.themeJarFolder);\n-        handleThemes(this.options.themeJarFolder, this.options.projectStaticAssetsOutputFolder);\n-      }\n+      const generatedThemeFile = path.resolve(this.options.themeResourceFolder, \"theme-generated.js\");\n+      if (fs.existsSync(generatedThemeFile)) {\n+\n+        // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n+        const nameRegex = /theme\\/(.*)\\/\\1.js/g; // matches theme folder name in 'theme/my-theme/my-theme.js'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2OTI4OA=="}, "originalCommit": {"oid": "c4514f8239faab36bdc79d3c208ffac832c5ef4b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjAwNDQ3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxNjozNVrOHzzCSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo0MjoyMFrOH0sZig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3NTU5NQ==", "bodyText": "Should this refer to @Theme, I mean that user might be confused what this is about and might unnecessarily worry about it. Maybe also could include keyword Vaadin like \"Skipping Vaadin application theme handling\", unless it is present otherwise in the log line", "url": "https://github.com/vaadin/flow/pull/9406#discussion_r524075595", "createdAt": "2020-11-16T10:16:35Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,17 +49,30 @@ class ApplicationThemePlugin {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n     compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n-      if (fs.existsSync(this.options.themeJarFolder)) {\n-        logger.debug(\"Found themeFolder in jar file \", this.options.themeJarFolder);\n-        handleThemes(this.options.themeJarFolder, this.options.projectStaticAssetsOutputFolder);\n-      }\n+      const generatedThemeFile = path.resolve(this.options.themeResourceFolder, \"theme-generated.js\");\n+      if (fs.existsSync(generatedThemeFile)) {\n+\n+        // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n+        const nameRegex = /theme\\/(.*)\\/\\1.js/g; // matches theme folder name in 'theme/my-theme/my-theme.js'\n+        const themeName = nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n+        if (!themeName) {\n+          throw new Error(\"Couldn't parse theme name from '\" + generatedThemeFile + \"'.\");\n+        }\n \n-      this.options.themeProjectFolders.forEach((themeProjectFolder) => {\n-        if (fs.existsSync(themeProjectFolder)) {\n-          logger.debug(\"Found themeFolder from \", themeProjectFolder);\n-          handleThemes(themeProjectFolder, this.options.projectStaticAssetsOutputFolder);\n+        if (fs.existsSync(this.options.themeResourceFolder)) {\n+          logger.debug(\"Found themeFolder in jar file \", this.options.themeResourceFolder);\n+          handleThemes(themeName, this.options.themeResourceFolder, this.options.projectStaticAssetsOutputFolder);\n         }\n-      });\n+\n+        this.options.themeProjectFolders.forEach((themeProjectFolder) => {\n+          if (fs.existsSync(themeProjectFolder)) {\n+            logger.debug(\"Found themeFolder from \", themeProjectFolder);\n+            handleThemes(themeName, themeProjectFolder, this.options.projectStaticAssetsOutputFolder);\n+          }\n+        });\n+      } else {\n+        logger.log(\"No '\", generatedThemeFile, \"' found. Skipping application theme handling.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4514f8239faab36bdc79d3c208ffac832c5ef4b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxNTQzNA==", "bodyText": "Changed log level and added extra trace with more information.", "url": "https://github.com/vaadin/flow/pull/9406#discussion_r525015434", "createdAt": "2020-11-17T09:42:20Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,17 +49,30 @@ class ApplicationThemePlugin {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n     compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n-      if (fs.existsSync(this.options.themeJarFolder)) {\n-        logger.debug(\"Found themeFolder in jar file \", this.options.themeJarFolder);\n-        handleThemes(this.options.themeJarFolder, this.options.projectStaticAssetsOutputFolder);\n-      }\n+      const generatedThemeFile = path.resolve(this.options.themeResourceFolder, \"theme-generated.js\");\n+      if (fs.existsSync(generatedThemeFile)) {\n+\n+        // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n+        const nameRegex = /theme\\/(.*)\\/\\1.js/g; // matches theme folder name in 'theme/my-theme/my-theme.js'\n+        const themeName = nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n+        if (!themeName) {\n+          throw new Error(\"Couldn't parse theme name from '\" + generatedThemeFile + \"'.\");\n+        }\n \n-      this.options.themeProjectFolders.forEach((themeProjectFolder) => {\n-        if (fs.existsSync(themeProjectFolder)) {\n-          logger.debug(\"Found themeFolder from \", themeProjectFolder);\n-          handleThemes(themeProjectFolder, this.options.projectStaticAssetsOutputFolder);\n+        if (fs.existsSync(this.options.themeResourceFolder)) {\n+          logger.debug(\"Found themeFolder in jar file \", this.options.themeResourceFolder);\n+          handleThemes(themeName, this.options.themeResourceFolder, this.options.projectStaticAssetsOutputFolder);\n         }\n-      });\n+\n+        this.options.themeProjectFolders.forEach((themeProjectFolder) => {\n+          if (fs.existsSync(themeProjectFolder)) {\n+            logger.debug(\"Found themeFolder from \", themeProjectFolder);\n+            handleThemes(themeName, themeProjectFolder, this.options.projectStaticAssetsOutputFolder);\n+          }\n+        });\n+      } else {\n+        logger.log(\"No '\", generatedThemeFile, \"' found. Skipping application theme handling.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3NTU5NQ=="}, "originalCommit": {"oid": "c4514f8239faab36bdc79d3c208ffac832c5ef4b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzEyMzQzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoyMDozOVrOHz-aFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozODo0M1rOH0sQBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2MTkwOQ==", "bodyText": "So now when theme-name is discovered from both inside a .jar and inside the /theme/ folder in the project both will be loaded. While I cannot figure out at the moment why it would be a bad thing yet, the spec says that when you have something inside a .jar, it should be used from there. If you have something inside  the /theme/ folder in the project, it should be used there. But not both. If the in-project theme defines a parent theme, that should be loaded before the in-project theme.\nSo we should probably decide (and document) how it goes when you have this situation that the theme is present both in-project and inside a .jar.", "url": "https://github.com/vaadin/flow/pull/9406#discussion_r524261909", "createdAt": "2020-11-16T13:20:39Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,17 +49,30 @@ class ApplicationThemePlugin {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n     compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n-      if (fs.existsSync(this.options.themeJarFolder)) {\n-        logger.debug(\"Found themeFolder in jar file \", this.options.themeJarFolder);\n-        handleThemes(this.options.themeJarFolder, this.options.projectStaticAssetsOutputFolder);\n-      }\n+      const generatedThemeFile = path.resolve(this.options.themeResourceFolder, \"theme-generated.js\");\n+      if (fs.existsSync(generatedThemeFile)) {\n+\n+        // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n+        const nameRegex = /theme\\/(.*)\\/\\1.js/g; // matches theme folder name in 'theme/my-theme/my-theme.js'\n+        const themeName = nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n+        if (!themeName) {\n+          throw new Error(\"Couldn't parse theme name from '\" + generatedThemeFile + \"'.\");\n+        }\n \n-      this.options.themeProjectFolders.forEach((themeProjectFolder) => {\n-        if (fs.existsSync(themeProjectFolder)) {\n-          logger.debug(\"Found themeFolder from \", themeProjectFolder);\n-          handleThemes(themeProjectFolder, this.options.projectStaticAssetsOutputFolder);\n+        if (fs.existsSync(this.options.themeResourceFolder)) {\n+          logger.debug(\"Found themeFolder in jar file \", this.options.themeResourceFolder);\n+          handleThemes(themeName, this.options.themeResourceFolder, this.options.projectStaticAssetsOutputFolder);\n         }\n-      });\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a3f0705909681229f63d36e16c6ce672930a47"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2ODk2MA==", "bodyText": "Probably throwing and instructing the in-project theme to use the parent theme inside theme.json is the thing to do.\nIn context of this ticket, maybe it would be fine to just first check the in-project location and if it is not there, then the .jar. Or even now the .jar could be commented out until we re-enable it with parent theme support ...", "url": "https://github.com/vaadin/flow/pull/9406#discussion_r524268960", "createdAt": "2020-11-16T13:32:00Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,17 +49,30 @@ class ApplicationThemePlugin {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n     compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n-      if (fs.existsSync(this.options.themeJarFolder)) {\n-        logger.debug(\"Found themeFolder in jar file \", this.options.themeJarFolder);\n-        handleThemes(this.options.themeJarFolder, this.options.projectStaticAssetsOutputFolder);\n-      }\n+      const generatedThemeFile = path.resolve(this.options.themeResourceFolder, \"theme-generated.js\");\n+      if (fs.existsSync(generatedThemeFile)) {\n+\n+        // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n+        const nameRegex = /theme\\/(.*)\\/\\1.js/g; // matches theme folder name in 'theme/my-theme/my-theme.js'\n+        const themeName = nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n+        if (!themeName) {\n+          throw new Error(\"Couldn't parse theme name from '\" + generatedThemeFile + \"'.\");\n+        }\n \n-      this.options.themeProjectFolders.forEach((themeProjectFolder) => {\n-        if (fs.existsSync(themeProjectFolder)) {\n-          logger.debug(\"Found themeFolder from \", themeProjectFolder);\n-          handleThemes(themeProjectFolder, this.options.projectStaticAssetsOutputFolder);\n+        if (fs.existsSync(this.options.themeResourceFolder)) {\n+          logger.debug(\"Found themeFolder in jar file \", this.options.themeResourceFolder);\n+          handleThemes(themeName, this.options.themeResourceFolder, this.options.projectStaticAssetsOutputFolder);\n         }\n-      });\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2MTkwOQ=="}, "originalCommit": {"oid": "a5a3f0705909681229f63d36e16c6ce672930a47"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxMjk5Nw==", "bodyText": "Only handling frontend theme and trowing if found also from \"jar\"", "url": "https://github.com/vaadin/flow/pull/9406#discussion_r525012997", "createdAt": "2020-11-17T09:38:43Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,17 +49,30 @@ class ApplicationThemePlugin {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n     compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n-      if (fs.existsSync(this.options.themeJarFolder)) {\n-        logger.debug(\"Found themeFolder in jar file \", this.options.themeJarFolder);\n-        handleThemes(this.options.themeJarFolder, this.options.projectStaticAssetsOutputFolder);\n-      }\n+      const generatedThemeFile = path.resolve(this.options.themeResourceFolder, \"theme-generated.js\");\n+      if (fs.existsSync(generatedThemeFile)) {\n+\n+        // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n+        const nameRegex = /theme\\/(.*)\\/\\1.js/g; // matches theme folder name in 'theme/my-theme/my-theme.js'\n+        const themeName = nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n+        if (!themeName) {\n+          throw new Error(\"Couldn't parse theme name from '\" + generatedThemeFile + \"'.\");\n+        }\n \n-      this.options.themeProjectFolders.forEach((themeProjectFolder) => {\n-        if (fs.existsSync(themeProjectFolder)) {\n-          logger.debug(\"Found themeFolder from \", themeProjectFolder);\n-          handleThemes(themeProjectFolder, this.options.projectStaticAssetsOutputFolder);\n+        if (fs.existsSync(this.options.themeResourceFolder)) {\n+          logger.debug(\"Found themeFolder in jar file \", this.options.themeResourceFolder);\n+          handleThemes(themeName, this.options.themeResourceFolder, this.options.projectStaticAssetsOutputFolder);\n         }\n-      });\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2MTkwOQ=="}, "originalCommit": {"oid": "a5a3f0705909681229f63d36e16c6ce672930a47"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjE2MzA3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTowNTo0MVrOH0vtdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMToxNTowMVrOH0wDGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA2OTY4Nw==", "bodyText": "\"If extending the jar theme the 'parent' theme feature should be used\")\n\nI'm not sure if this is enough for anyone who doesn't know about the it already. Maybe\n\"Extending another theme is possible by adding { \"parent\": \"my-parent-theme\" }  entry to the theme.json file inside your theme's folder.\" would be explicit", "url": "https://github.com/vaadin/flow/pull/9406#discussion_r525069687", "createdAt": "2020-11-17T11:05:41Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -53,25 +56,39 @@ class ApplicationThemePlugin {\n       if (fs.existsSync(generatedThemeFile)) {\n \n         // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n-        const nameRegex = /theme\\/(.*)\\/\\1.js/g; // matches theme folder name in 'theme/my-theme/my-theme.js'\n         const themeName = nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n         if (!themeName) {\n           throw new Error(\"Couldn't parse theme name from '\" + generatedThemeFile + \"'.\");\n         }\n \n-        if (fs.existsSync(this.options.themeResourceFolder)) {\n-          logger.debug(\"Found themeFolder in jar file \", this.options.themeResourceFolder);\n-          handleThemes(themeName, this.options.themeResourceFolder, this.options.projectStaticAssetsOutputFolder);\n+        let themeFound = false;\n+        for (let i = 0; i<this.options.themeProjectFolders.length; i++) {\n+          const themeProjectFolder = this.options.themeProjectFolders[i];\n+          if (fs.existsSync(themeProjectFolder)) {\n+            logger.info(\"Searching theme folder \", themeProjectFolder, \" for theme \", themeName);\n+            const handled = handleThemes(themeName, themeProjectFolder, this.options.projectStaticAssetsOutputFolder);\n+            if (handled) {\n+              if(themeFound) {\n+                throw new Error(\"Found theme filed in '\" + themeProjectFolder + \"' and '\"\n+                  + themeFound + \"'. Theme should only be available in one folder\");\n+              }\n+              logger.info(\"Found theme files from '\", themeProjectFolder, \"'\");\n+              themeFound = themeProjectFolder;\n+            }\n+          }\n         }\n \n-        this.options.themeProjectFolders.forEach((themeProjectFolder) => {\n-          if (fs.existsSync(themeProjectFolder)) {\n-            logger.debug(\"Found themeFolder from \", themeProjectFolder);\n-            handleThemes(themeName, themeProjectFolder, this.options.projectStaticAssetsOutputFolder);\n+        if (fs.existsSync(this.options.themeResourceFolder)) {\n+          if (themeFound && fs.existsSync(path.resolve(this.options.themeResourceFolder, themeName))) {\n+            throw new Error(\"Theme '\" + themeName + \"'should not exist inside a jar and in the project at the same time\\n\" +\n+              \"If extending the jar theme the 'parent' theme feature should be used\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3830fd5de55fdd889f589e543438e4e554f7b460"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA3NTIyNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/vaadin/flow/pull/9406#discussion_r525075227", "createdAt": "2020-11-17T11:15:01Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -53,25 +56,39 @@ class ApplicationThemePlugin {\n       if (fs.existsSync(generatedThemeFile)) {\n \n         // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n-        const nameRegex = /theme\\/(.*)\\/\\1.js/g; // matches theme folder name in 'theme/my-theme/my-theme.js'\n         const themeName = nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n         if (!themeName) {\n           throw new Error(\"Couldn't parse theme name from '\" + generatedThemeFile + \"'.\");\n         }\n \n-        if (fs.existsSync(this.options.themeResourceFolder)) {\n-          logger.debug(\"Found themeFolder in jar file \", this.options.themeResourceFolder);\n-          handleThemes(themeName, this.options.themeResourceFolder, this.options.projectStaticAssetsOutputFolder);\n+        let themeFound = false;\n+        for (let i = 0; i<this.options.themeProjectFolders.length; i++) {\n+          const themeProjectFolder = this.options.themeProjectFolders[i];\n+          if (fs.existsSync(themeProjectFolder)) {\n+            logger.info(\"Searching theme folder \", themeProjectFolder, \" for theme \", themeName);\n+            const handled = handleThemes(themeName, themeProjectFolder, this.options.projectStaticAssetsOutputFolder);\n+            if (handled) {\n+              if(themeFound) {\n+                throw new Error(\"Found theme filed in '\" + themeProjectFolder + \"' and '\"\n+                  + themeFound + \"'. Theme should only be available in one folder\");\n+              }\n+              logger.info(\"Found theme files from '\", themeProjectFolder, \"'\");\n+              themeFound = themeProjectFolder;\n+            }\n+          }\n         }\n \n-        this.options.themeProjectFolders.forEach((themeProjectFolder) => {\n-          if (fs.existsSync(themeProjectFolder)) {\n-            logger.debug(\"Found themeFolder from \", themeProjectFolder);\n-            handleThemes(themeName, themeProjectFolder, this.options.projectStaticAssetsOutputFolder);\n+        if (fs.existsSync(this.options.themeResourceFolder)) {\n+          if (themeFound && fs.existsSync(path.resolve(this.options.themeResourceFolder, themeName))) {\n+            throw new Error(\"Theme '\" + themeName + \"'should not exist inside a jar and in the project at the same time\\n\" +\n+              \"If extending the jar theme the 'parent' theme feature should be used\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA2OTY4Nw=="}, "originalCommit": {"oid": "3830fd5de55fdd889f589e543438e4e554f7b460"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3038, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}