{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNDA3MjIy", "number": 8624, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo1NzoxOFrOEJDseA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjozNjo0MlrOEJHekw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTMzMTc2OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo1NzoxOFrOGpZONw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyMDo1N1rOGpsHEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1ODAzOQ==", "bodyText": "Would it better to replace it with rowCountEstimateIncrease < 0? rowCountEstimateIncrease is either -1 or >= 1. Otherwise, I wonder it there 0 value possible.", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446058039", "createdAt": "2020-06-26T08:57:18Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -443,77 +414,106 @@ public void setSizeCallback(\n     }\n \n     /**\n-     * Sets the size estimate callback to be used and switches the component to\n-     * undefined size. Any previously set callbacks or initial size are cleared.\n-     * The new estimate will be fetched after this roundtrip.\n+     * Sets the row count estimate to use and switches component to undefined\n+     * size. Any previously set count callback is cleared. The new estimate is\n+     * applied if the actual count has not been discovered and if the estimate\n+     * is greater than the number of requested items. Otherwise it is not\n+     * applied until there has been a reset.\n+     * <p>\n+     * <em>NOTE:</em> setting row count estimate that is less than two pages\n+     * (set with {@link #setPageSize(int)}) can cause extra requests initially\n+     * or after a reset.\n      * \n-     * @param sizeEstimateCallback\n-     *            the size estimate callback to use\n+     * @param rowCountEstimate\n+     *            the row count estimate to be used\n      */\n-    public void setSizeEstimateCallback(\n-            SizeEstimateCallback<T, ?> sizeEstimateCallback) {\n-        if (sizeEstimateCallback == null) {\n+    public void setRowCountEstimate(int rowCountEstimate) {\n+        if (rowCountEstimate < 1) {\n             throw new IllegalArgumentException(\n-                    \"Provided size estimate callback cannot be null - for \"\n-                            + \"switching between defined and undefined size use \"\n-                            + \"setDefinedSize(boolean) method instead.\");\n+                    \"Given row count estimate cannot be less than 1.\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.sizeEstimateCallback = sizeEstimateCallback;\n+        this.rowCountEstimate = rowCountEstimate;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset) {\n+        if (!skipSizeCheckUntilReset\n+                && requestedRange.getEnd() < rowCountEstimate) {\n             sizeReset = true;\n             requestFlush();\n         }\n     }\n \n     /**\n-     * Sets the initial size estimate to use and switches component to undefined\n-     * size. Any previously set size related callbacks are cleared. The new\n-     * estimate is only applied if it is greater than the number of requested\n-     * items. Otherwise it is not applied until there has been a reset.\n-     * <p>\n-     * <em>NOTE:</em> setting an initial size estimate that is less than two\n-     * pages (set with {@link #setPageSize(int)}) can cause extra requests\n-     * initially or after a reset.\n+     * Gets the row count estimate used.\n      * \n-     * @param initialSizeEstimate\n-     *            the initial size estimate to be used\n+     * @return the row count estimate used\n      */\n-    public void setInitialSizeEstimate(int initialSizeEstimate) {\n-        if (initialSizeEstimate < 1) {\n+    public int getRowCountEstimate() {\n+        int estimate = rowCountEstimate;\n+        if (estimate < 1) {\n+            estimate = pageSize * 4;\n+        }\n+        if (estimate <= requestedRange.getEnd()) {\n+            // don't let the count estimate set to lock component to\n+            // defined size -> increase the size so size it's not locked\n+            estimate = requestedRange.getEnd() + pageSize;\n+        }\n+        return estimate;\n+    }\n+\n+    /**\n+     * Sets the row count estimate increase to use and switches the component to\n+     * undefined size if not yet used. Any previously set count callback is\n+     * cleared. The step is used the next time that the count is adjusted.\n+     * <em>NOTE:</em> the increase should be greater than the\n+     * {@link #setPageSize(int)} or it may cause bad performance.\n+     * \n+     * @param rowCountEstimateIncrease\n+     *            the row count estimate step to use\n+     */\n+    public void setRowCountEstimateIncrease(int rowCountEstimateIncrease) {\n+        if (rowCountEstimateIncrease < 1) {\n             throw new IllegalArgumentException(\n-                    \"Given initial size estimate cannot be less than 1. For switching between defined and undefined size use setDefinedSize(boolean) method instead.\");\n+                    \"rowCountEstimateIncrease cannot be less than 1\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.initialSizeEstimate = initialSizeEstimate;\n+        this.rowCountEstimateIncrease = rowCountEstimateIncrease;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset\n-                && requestedRange.getEnd() < initialSizeEstimate) {\n-            sizeReset = true;\n-            requestFlush();\n+    }\n+\n+    /**\n+     * Gets the row count estimate increase used.\n+     * \n+     * @return the row count estimate increase\n+     */\n+    public int getRowCountEstimateIncrease() {\n+        if (rowCountEstimateIncrease < 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NzUwNA==", "bodyText": "Well, otherwise it does not matter but if we accidentally internally set it to 0, this would hide the bug. So making some changes.", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446367504", "createdAt": "2020-06-26T19:20:57Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -443,77 +414,106 @@ public void setSizeCallback(\n     }\n \n     /**\n-     * Sets the size estimate callback to be used and switches the component to\n-     * undefined size. Any previously set callbacks or initial size are cleared.\n-     * The new estimate will be fetched after this roundtrip.\n+     * Sets the row count estimate to use and switches component to undefined\n+     * size. Any previously set count callback is cleared. The new estimate is\n+     * applied if the actual count has not been discovered and if the estimate\n+     * is greater than the number of requested items. Otherwise it is not\n+     * applied until there has been a reset.\n+     * <p>\n+     * <em>NOTE:</em> setting row count estimate that is less than two pages\n+     * (set with {@link #setPageSize(int)}) can cause extra requests initially\n+     * or after a reset.\n      * \n-     * @param sizeEstimateCallback\n-     *            the size estimate callback to use\n+     * @param rowCountEstimate\n+     *            the row count estimate to be used\n      */\n-    public void setSizeEstimateCallback(\n-            SizeEstimateCallback<T, ?> sizeEstimateCallback) {\n-        if (sizeEstimateCallback == null) {\n+    public void setRowCountEstimate(int rowCountEstimate) {\n+        if (rowCountEstimate < 1) {\n             throw new IllegalArgumentException(\n-                    \"Provided size estimate callback cannot be null - for \"\n-                            + \"switching between defined and undefined size use \"\n-                            + \"setDefinedSize(boolean) method instead.\");\n+                    \"Given row count estimate cannot be less than 1.\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.sizeEstimateCallback = sizeEstimateCallback;\n+        this.rowCountEstimate = rowCountEstimate;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset) {\n+        if (!skipSizeCheckUntilReset\n+                && requestedRange.getEnd() < rowCountEstimate) {\n             sizeReset = true;\n             requestFlush();\n         }\n     }\n \n     /**\n-     * Sets the initial size estimate to use and switches component to undefined\n-     * size. Any previously set size related callbacks are cleared. The new\n-     * estimate is only applied if it is greater than the number of requested\n-     * items. Otherwise it is not applied until there has been a reset.\n-     * <p>\n-     * <em>NOTE:</em> setting an initial size estimate that is less than two\n-     * pages (set with {@link #setPageSize(int)}) can cause extra requests\n-     * initially or after a reset.\n+     * Gets the row count estimate used.\n      * \n-     * @param initialSizeEstimate\n-     *            the initial size estimate to be used\n+     * @return the row count estimate used\n      */\n-    public void setInitialSizeEstimate(int initialSizeEstimate) {\n-        if (initialSizeEstimate < 1) {\n+    public int getRowCountEstimate() {\n+        int estimate = rowCountEstimate;\n+        if (estimate < 1) {\n+            estimate = pageSize * 4;\n+        }\n+        if (estimate <= requestedRange.getEnd()) {\n+            // don't let the count estimate set to lock component to\n+            // defined size -> increase the size so size it's not locked\n+            estimate = requestedRange.getEnd() + pageSize;\n+        }\n+        return estimate;\n+    }\n+\n+    /**\n+     * Sets the row count estimate increase to use and switches the component to\n+     * undefined size if not yet used. Any previously set count callback is\n+     * cleared. The step is used the next time that the count is adjusted.\n+     * <em>NOTE:</em> the increase should be greater than the\n+     * {@link #setPageSize(int)} or it may cause bad performance.\n+     * \n+     * @param rowCountEstimateIncrease\n+     *            the row count estimate step to use\n+     */\n+    public void setRowCountEstimateIncrease(int rowCountEstimateIncrease) {\n+        if (rowCountEstimateIncrease < 1) {\n             throw new IllegalArgumentException(\n-                    \"Given initial size estimate cannot be less than 1. For switching between defined and undefined size use setDefinedSize(boolean) method instead.\");\n+                    \"rowCountEstimateIncrease cannot be less than 1\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.initialSizeEstimate = initialSizeEstimate;\n+        this.rowCountEstimateIncrease = rowCountEstimateIncrease;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset\n-                && requestedRange.getEnd() < initialSizeEstimate) {\n-            sizeReset = true;\n-            requestFlush();\n+    }\n+\n+    /**\n+     * Gets the row count estimate increase used.\n+     * \n+     * @return the row count estimate increase\n+     */\n+    public int getRowCountEstimateIncrease() {\n+        if (rowCountEstimateIncrease < 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1ODAzOQ=="}, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTMzMzE5OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo1Nzo1MVrOGpZPLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyMTowMFrOGpsHKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1ODI4NQ==", "bodyText": "Let's create a constant variable for '4'", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446058285", "createdAt": "2020-06-26T08:57:51Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -443,77 +414,106 @@ public void setSizeCallback(\n     }\n \n     /**\n-     * Sets the size estimate callback to be used and switches the component to\n-     * undefined size. Any previously set callbacks or initial size are cleared.\n-     * The new estimate will be fetched after this roundtrip.\n+     * Sets the row count estimate to use and switches component to undefined\n+     * size. Any previously set count callback is cleared. The new estimate is\n+     * applied if the actual count has not been discovered and if the estimate\n+     * is greater than the number of requested items. Otherwise it is not\n+     * applied until there has been a reset.\n+     * <p>\n+     * <em>NOTE:</em> setting row count estimate that is less than two pages\n+     * (set with {@link #setPageSize(int)}) can cause extra requests initially\n+     * or after a reset.\n      * \n-     * @param sizeEstimateCallback\n-     *            the size estimate callback to use\n+     * @param rowCountEstimate\n+     *            the row count estimate to be used\n      */\n-    public void setSizeEstimateCallback(\n-            SizeEstimateCallback<T, ?> sizeEstimateCallback) {\n-        if (sizeEstimateCallback == null) {\n+    public void setRowCountEstimate(int rowCountEstimate) {\n+        if (rowCountEstimate < 1) {\n             throw new IllegalArgumentException(\n-                    \"Provided size estimate callback cannot be null - for \"\n-                            + \"switching between defined and undefined size use \"\n-                            + \"setDefinedSize(boolean) method instead.\");\n+                    \"Given row count estimate cannot be less than 1.\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.sizeEstimateCallback = sizeEstimateCallback;\n+        this.rowCountEstimate = rowCountEstimate;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset) {\n+        if (!skipSizeCheckUntilReset\n+                && requestedRange.getEnd() < rowCountEstimate) {\n             sizeReset = true;\n             requestFlush();\n         }\n     }\n \n     /**\n-     * Sets the initial size estimate to use and switches component to undefined\n-     * size. Any previously set size related callbacks are cleared. The new\n-     * estimate is only applied if it is greater than the number of requested\n-     * items. Otherwise it is not applied until there has been a reset.\n-     * <p>\n-     * <em>NOTE:</em> setting an initial size estimate that is less than two\n-     * pages (set with {@link #setPageSize(int)}) can cause extra requests\n-     * initially or after a reset.\n+     * Gets the row count estimate used.\n      * \n-     * @param initialSizeEstimate\n-     *            the initial size estimate to be used\n+     * @return the row count estimate used\n      */\n-    public void setInitialSizeEstimate(int initialSizeEstimate) {\n-        if (initialSizeEstimate < 1) {\n+    public int getRowCountEstimate() {\n+        int estimate = rowCountEstimate;\n+        if (estimate < 1) {\n+            estimate = pageSize * 4;\n+        }\n+        if (estimate <= requestedRange.getEnd()) {\n+            // don't let the count estimate set to lock component to\n+            // defined size -> increase the size so size it's not locked\n+            estimate = requestedRange.getEnd() + pageSize;\n+        }\n+        return estimate;\n+    }\n+\n+    /**\n+     * Sets the row count estimate increase to use and switches the component to\n+     * undefined size if not yet used. Any previously set count callback is\n+     * cleared. The step is used the next time that the count is adjusted.\n+     * <em>NOTE:</em> the increase should be greater than the\n+     * {@link #setPageSize(int)} or it may cause bad performance.\n+     * \n+     * @param rowCountEstimateIncrease\n+     *            the row count estimate step to use\n+     */\n+    public void setRowCountEstimateIncrease(int rowCountEstimateIncrease) {\n+        if (rowCountEstimateIncrease < 1) {\n             throw new IllegalArgumentException(\n-                    \"Given initial size estimate cannot be less than 1. For switching between defined and undefined size use setDefinedSize(boolean) method instead.\");\n+                    \"rowCountEstimateIncrease cannot be less than 1\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.initialSizeEstimate = initialSizeEstimate;\n+        this.rowCountEstimateIncrease = rowCountEstimateIncrease;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset\n-                && requestedRange.getEnd() < initialSizeEstimate) {\n-            sizeReset = true;\n-            requestFlush();\n+    }\n+\n+    /**\n+     * Gets the row count estimate increase used.\n+     * \n+     * @return the row count estimate increase\n+     */\n+    public int getRowCountEstimateIncrease() {\n+        if (rowCountEstimateIncrease < 1) {\n+            return pageSize * 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NzUzMQ==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446367531", "createdAt": "2020-06-26T19:21:00Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -443,77 +414,106 @@ public void setSizeCallback(\n     }\n \n     /**\n-     * Sets the size estimate callback to be used and switches the component to\n-     * undefined size. Any previously set callbacks or initial size are cleared.\n-     * The new estimate will be fetched after this roundtrip.\n+     * Sets the row count estimate to use and switches component to undefined\n+     * size. Any previously set count callback is cleared. The new estimate is\n+     * applied if the actual count has not been discovered and if the estimate\n+     * is greater than the number of requested items. Otherwise it is not\n+     * applied until there has been a reset.\n+     * <p>\n+     * <em>NOTE:</em> setting row count estimate that is less than two pages\n+     * (set with {@link #setPageSize(int)}) can cause extra requests initially\n+     * or after a reset.\n      * \n-     * @param sizeEstimateCallback\n-     *            the size estimate callback to use\n+     * @param rowCountEstimate\n+     *            the row count estimate to be used\n      */\n-    public void setSizeEstimateCallback(\n-            SizeEstimateCallback<T, ?> sizeEstimateCallback) {\n-        if (sizeEstimateCallback == null) {\n+    public void setRowCountEstimate(int rowCountEstimate) {\n+        if (rowCountEstimate < 1) {\n             throw new IllegalArgumentException(\n-                    \"Provided size estimate callback cannot be null - for \"\n-                            + \"switching between defined and undefined size use \"\n-                            + \"setDefinedSize(boolean) method instead.\");\n+                    \"Given row count estimate cannot be less than 1.\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.sizeEstimateCallback = sizeEstimateCallback;\n+        this.rowCountEstimate = rowCountEstimate;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset) {\n+        if (!skipSizeCheckUntilReset\n+                && requestedRange.getEnd() < rowCountEstimate) {\n             sizeReset = true;\n             requestFlush();\n         }\n     }\n \n     /**\n-     * Sets the initial size estimate to use and switches component to undefined\n-     * size. Any previously set size related callbacks are cleared. The new\n-     * estimate is only applied if it is greater than the number of requested\n-     * items. Otherwise it is not applied until there has been a reset.\n-     * <p>\n-     * <em>NOTE:</em> setting an initial size estimate that is less than two\n-     * pages (set with {@link #setPageSize(int)}) can cause extra requests\n-     * initially or after a reset.\n+     * Gets the row count estimate used.\n      * \n-     * @param initialSizeEstimate\n-     *            the initial size estimate to be used\n+     * @return the row count estimate used\n      */\n-    public void setInitialSizeEstimate(int initialSizeEstimate) {\n-        if (initialSizeEstimate < 1) {\n+    public int getRowCountEstimate() {\n+        int estimate = rowCountEstimate;\n+        if (estimate < 1) {\n+            estimate = pageSize * 4;\n+        }\n+        if (estimate <= requestedRange.getEnd()) {\n+            // don't let the count estimate set to lock component to\n+            // defined size -> increase the size so size it's not locked\n+            estimate = requestedRange.getEnd() + pageSize;\n+        }\n+        return estimate;\n+    }\n+\n+    /**\n+     * Sets the row count estimate increase to use and switches the component to\n+     * undefined size if not yet used. Any previously set count callback is\n+     * cleared. The step is used the next time that the count is adjusted.\n+     * <em>NOTE:</em> the increase should be greater than the\n+     * {@link #setPageSize(int)} or it may cause bad performance.\n+     * \n+     * @param rowCountEstimateIncrease\n+     *            the row count estimate step to use\n+     */\n+    public void setRowCountEstimateIncrease(int rowCountEstimateIncrease) {\n+        if (rowCountEstimateIncrease < 1) {\n             throw new IllegalArgumentException(\n-                    \"Given initial size estimate cannot be less than 1. For switching between defined and undefined size use setDefinedSize(boolean) method instead.\");\n+                    \"rowCountEstimateIncrease cannot be less than 1\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.initialSizeEstimate = initialSizeEstimate;\n+        this.rowCountEstimateIncrease = rowCountEstimateIncrease;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset\n-                && requestedRange.getEnd() < initialSizeEstimate) {\n-            sizeReset = true;\n-            requestFlush();\n+    }\n+\n+    /**\n+     * Gets the row count estimate increase used.\n+     * \n+     * @return the row count estimate increase\n+     */\n+    public int getRowCountEstimateIncrease() {\n+        if (rowCountEstimateIncrease < 1) {\n+            return pageSize * 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1ODI4NQ=="}, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTg2OTM3OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjowODoyM1rOGped7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTo0MzoyN1rOGpsrAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0Mzk4Mw==", "bodyText": "What about reset of rowCountEstimate and rowCountEstimateIncrease here?", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446143983", "createdAt": "2020-06-26T12:08:23Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -257,7 +254,7 @@ public void confirmUpdate(int updateId) {\n             DataProvider<T, F> dataProvider, F initialFilter) {\n         Objects.requireNonNull(dataProvider, \"data provider cannot be null\");\n         filter = initialFilter;\n-        clearSizeCallbacksAndState();\n+        countCallback = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE2ODkwOQ==", "bodyText": "Thought about it, but I think that if the developer wants switch between the modes, it is weird if they have to reset those again even when set ealier. Now there is less magic side effects happening on the background and e.g. the getters still return the values that have been set earlier. I will add a test to make sure those are not used anyway with count callback", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446168909", "createdAt": "2020-06-26T13:00:35Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -257,7 +254,7 @@ public void confirmUpdate(int updateId) {\n             DataProvider<T, F> dataProvider, F initialFilter) {\n         Objects.requireNonNull(dataProvider, \"data provider cannot be null\");\n         filter = initialFilter;\n-        clearSizeCallbacksAndState();\n+        countCallback = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0Mzk4Mw=="}, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MzU0NQ==", "bodyText": "Alright! Now I have been thinking about the cases when the developer wants to change the data provider. It means there is a 'reusable' component which may connect to a different data sources. Is that a real usage? My limited component's usage experience does not give me a reasonable example.", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446193545", "createdAt": "2020-06-26T13:45:32Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -257,7 +254,7 @@ public void confirmUpdate(int updateId) {\n             DataProvider<T, F> dataProvider, F initialFilter) {\n         Objects.requireNonNull(dataProvider, \"data provider cannot be null\");\n         filter = initialFilter;\n-        clearSizeCallbacksAndState();\n+        countCallback = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0Mzk4Mw=="}, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3NjcwNA==", "bodyText": "At least with in-memory data it might occur, but not so sure with backends. Maybe in some not-common scenario where there would be the same data in multiple tables, but that has to be rare.\nBut I think that now that it is possible to switch between \"exact size\" and \"automatically extending grid\", some applications might provide the user the option to choose, even if the \"exact size\" is slower.", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446376704", "createdAt": "2020-06-26T19:43:27Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -257,7 +254,7 @@ public void confirmUpdate(int updateId) {\n             DataProvider<T, F> dataProvider, F initialFilter) {\n         Objects.requireNonNull(dataProvider, \"data provider cannot be null\");\n         filter = initialFilter;\n-        clearSizeCallbacksAndState();\n+        countCallback = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0Mzk4Mw=="}, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTkwOTU0OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjoyMjo0OFrOGpe3Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzowOToxN1rOGpgQFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE1MDQxMA==", "bodyText": "Just wondering, based on what you choose 4 for default estimation? For me it looks reasonable, because usually users have either not so much data to explore, or they apply filters to find something quicker and they scroll not so deeply, but is there any testers feedback about that?", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446150410", "createdAt": "2020-06-26T12:22:48Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -443,77 +414,106 @@ public void setSizeCallback(\n     }\n \n     /**\n-     * Sets the size estimate callback to be used and switches the component to\n-     * undefined size. Any previously set callbacks or initial size are cleared.\n-     * The new estimate will be fetched after this roundtrip.\n+     * Sets the row count estimate to use and switches component to undefined\n+     * size. Any previously set count callback is cleared. The new estimate is\n+     * applied if the actual count has not been discovered and if the estimate\n+     * is greater than the number of requested items. Otherwise it is not\n+     * applied until there has been a reset.\n+     * <p>\n+     * <em>NOTE:</em> setting row count estimate that is less than two pages\n+     * (set with {@link #setPageSize(int)}) can cause extra requests initially\n+     * or after a reset.\n      * \n-     * @param sizeEstimateCallback\n-     *            the size estimate callback to use\n+     * @param rowCountEstimate\n+     *            the row count estimate to be used\n      */\n-    public void setSizeEstimateCallback(\n-            SizeEstimateCallback<T, ?> sizeEstimateCallback) {\n-        if (sizeEstimateCallback == null) {\n+    public void setRowCountEstimate(int rowCountEstimate) {\n+        if (rowCountEstimate < 1) {\n             throw new IllegalArgumentException(\n-                    \"Provided size estimate callback cannot be null - for \"\n-                            + \"switching between defined and undefined size use \"\n-                            + \"setDefinedSize(boolean) method instead.\");\n+                    \"Given row count estimate cannot be less than 1.\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.sizeEstimateCallback = sizeEstimateCallback;\n+        this.rowCountEstimate = rowCountEstimate;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset) {\n+        if (!skipSizeCheckUntilReset\n+                && requestedRange.getEnd() < rowCountEstimate) {\n             sizeReset = true;\n             requestFlush();\n         }\n     }\n \n     /**\n-     * Sets the initial size estimate to use and switches component to undefined\n-     * size. Any previously set size related callbacks are cleared. The new\n-     * estimate is only applied if it is greater than the number of requested\n-     * items. Otherwise it is not applied until there has been a reset.\n-     * <p>\n-     * <em>NOTE:</em> setting an initial size estimate that is less than two\n-     * pages (set with {@link #setPageSize(int)}) can cause extra requests\n-     * initially or after a reset.\n+     * Gets the row count estimate used.\n      * \n-     * @param initialSizeEstimate\n-     *            the initial size estimate to be used\n+     * @return the row count estimate used\n      */\n-    public void setInitialSizeEstimate(int initialSizeEstimate) {\n-        if (initialSizeEstimate < 1) {\n+    public int getRowCountEstimate() {\n+        int estimate = rowCountEstimate;\n+        if (estimate < 1) {\n+            estimate = pageSize * 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3MzIwNQ==", "bodyText": "It was based on my own testing and after discussion with @jouni.\nIt can be changed later on and we have over two months of time to change this.", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446173205", "createdAt": "2020-06-26T13:09:17Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -443,77 +414,106 @@ public void setSizeCallback(\n     }\n \n     /**\n-     * Sets the size estimate callback to be used and switches the component to\n-     * undefined size. Any previously set callbacks or initial size are cleared.\n-     * The new estimate will be fetched after this roundtrip.\n+     * Sets the row count estimate to use and switches component to undefined\n+     * size. Any previously set count callback is cleared. The new estimate is\n+     * applied if the actual count has not been discovered and if the estimate\n+     * is greater than the number of requested items. Otherwise it is not\n+     * applied until there has been a reset.\n+     * <p>\n+     * <em>NOTE:</em> setting row count estimate that is less than two pages\n+     * (set with {@link #setPageSize(int)}) can cause extra requests initially\n+     * or after a reset.\n      * \n-     * @param sizeEstimateCallback\n-     *            the size estimate callback to use\n+     * @param rowCountEstimate\n+     *            the row count estimate to be used\n      */\n-    public void setSizeEstimateCallback(\n-            SizeEstimateCallback<T, ?> sizeEstimateCallback) {\n-        if (sizeEstimateCallback == null) {\n+    public void setRowCountEstimate(int rowCountEstimate) {\n+        if (rowCountEstimate < 1) {\n             throw new IllegalArgumentException(\n-                    \"Provided size estimate callback cannot be null - for \"\n-                            + \"switching between defined and undefined size use \"\n-                            + \"setDefinedSize(boolean) method instead.\");\n+                    \"Given row count estimate cannot be less than 1.\");\n         }\n-        clearSizeCallbacksAndState();\n-        this.sizeEstimateCallback = sizeEstimateCallback;\n+        this.rowCountEstimate = rowCountEstimate;\n+        this.countCallback = null;\n         definedSize = false;\n-        if (!skipSizeCheckUntilReset) {\n+        if (!skipSizeCheckUntilReset\n+                && requestedRange.getEnd() < rowCountEstimate) {\n             sizeReset = true;\n             requestFlush();\n         }\n     }\n \n     /**\n-     * Sets the initial size estimate to use and switches component to undefined\n-     * size. Any previously set size related callbacks are cleared. The new\n-     * estimate is only applied if it is greater than the number of requested\n-     * items. Otherwise it is not applied until there has been a reset.\n-     * <p>\n-     * <em>NOTE:</em> setting an initial size estimate that is less than two\n-     * pages (set with {@link #setPageSize(int)}) can cause extra requests\n-     * initially or after a reset.\n+     * Gets the row count estimate used.\n      * \n-     * @param initialSizeEstimate\n-     *            the initial size estimate to be used\n+     * @return the row count estimate used\n      */\n-    public void setInitialSizeEstimate(int initialSizeEstimate) {\n-        if (initialSizeEstimate < 1) {\n+    public int getRowCountEstimate() {\n+        int estimate = rowCountEstimate;\n+        if (estimate < 1) {\n+            estimate = pageSize * 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE1MDQxMA=="}, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTk1MTU1OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjozNjo0MlrOGpfQhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyMTo0OFrOGpsIYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE1NjkzMg==", "bodyText": "what if rowCountEstimateIncrease < pageSize? in that case assumedSize would be still less than requestedRange.getEnd() + pageSize, is it fine?", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446156932", "createdAt": "2020-06-26T12:36:42Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -616,102 +610,29 @@ public void setBackEndSorting(List<QuerySortOrder> sortOrder) {\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected int getDataProviderSize() {\n         assert definedSize : \"This method should never be called when using undefined size\";\n-        if (sizeCallback != null) {\n-            return sizeCallback.count(new Query(getFilter()));\n+        if (countCallback != null) {\n+            return countCallback.count(new Query(getFilter()));\n         } else {\n             return getDataProvider().size(new Query(getFilter()));\n         }\n     }\n \n     private void updateUndefinedSize() {\n         assert !definedSize : \"This method should never be called when using defined size\";\n-        // things have reset\n+        int previousAssumedSize = assumedSize;\n         if (resendEntireRange || sizeReset) {\n-            // 1. given size estimate\n-            int size = initialSizeEstimate;\n-            if (initialSizeEstimate > 0\n-                    && initialSizeEstimate <= requestedRange.getEnd()) {\n-                // don't let the initial size estimate set to lock component to\n-                // defined size -> increase the size so size it's not locked\n-                size = requestedRange.getEnd() + pageSize;\n-            }\n-            // 2. given estimate callback\n-            if (sizeEstimateCallback != null) {\n-                size = getNewSizeEstimateFromCallback(true);\n-            }\n-            // 3. default initial size\n-            if (size == -1) {\n-                size = getDefaultInitialSize();\n-            }\n-            getLogger(DataCommunicator.class).info(\n-                    \"Requested range: {} old size: {} new size: {}\",\n-                    requestedRange, assumedSize, size);\n-            assumedSize = size;\n+            // things have reset\n+            assumedSize = getRowCountEstimate();\n         } else {\n             // increase size estimate if the last page is being fetched\n             if (requestedRange.getEnd() + pageSize > assumedSize) {\n-                int previousAssumedSize = assumedSize;\n-                if (sizeEstimateCallback != null) {\n-                    assumedSize = getNewSizeEstimateFromCallback(false);\n-                } else {\n-                    // by default adjust size by multiple of page size\n-                    assumedSize += getEstimatedSizeIncrease();\n-                }\n-                getLogger(DataCommunicator.class).info(\n-                        \"Requested range: {} old size: {} new size: {}\",\n-                        requestedRange, previousAssumedSize, assumedSize);\n+                // by default adjust size by multiple of page size\n+                assumedSize += getRowCountEstimateIncrease();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 307}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2Nzg0MQ==", "bodyText": "I realized that I've gone to \"wrong direction\". Fixed and added tests.", "url": "https://github.com/vaadin/flow/pull/8624#discussion_r446367841", "createdAt": "2020-06-26T19:21:48Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -616,102 +610,29 @@ public void setBackEndSorting(List<QuerySortOrder> sortOrder) {\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected int getDataProviderSize() {\n         assert definedSize : \"This method should never be called when using undefined size\";\n-        if (sizeCallback != null) {\n-            return sizeCallback.count(new Query(getFilter()));\n+        if (countCallback != null) {\n+            return countCallback.count(new Query(getFilter()));\n         } else {\n             return getDataProvider().size(new Query(getFilter()));\n         }\n     }\n \n     private void updateUndefinedSize() {\n         assert !definedSize : \"This method should never be called when using defined size\";\n-        // things have reset\n+        int previousAssumedSize = assumedSize;\n         if (resendEntireRange || sizeReset) {\n-            // 1. given size estimate\n-            int size = initialSizeEstimate;\n-            if (initialSizeEstimate > 0\n-                    && initialSizeEstimate <= requestedRange.getEnd()) {\n-                // don't let the initial size estimate set to lock component to\n-                // defined size -> increase the size so size it's not locked\n-                size = requestedRange.getEnd() + pageSize;\n-            }\n-            // 2. given estimate callback\n-            if (sizeEstimateCallback != null) {\n-                size = getNewSizeEstimateFromCallback(true);\n-            }\n-            // 3. default initial size\n-            if (size == -1) {\n-                size = getDefaultInitialSize();\n-            }\n-            getLogger(DataCommunicator.class).info(\n-                    \"Requested range: {} old size: {} new size: {}\",\n-                    requestedRange, assumedSize, size);\n-            assumedSize = size;\n+            // things have reset\n+            assumedSize = getRowCountEstimate();\n         } else {\n             // increase size estimate if the last page is being fetched\n             if (requestedRange.getEnd() + pageSize > assumedSize) {\n-                int previousAssumedSize = assumedSize;\n-                if (sizeEstimateCallback != null) {\n-                    assumedSize = getNewSizeEstimateFromCallback(false);\n-                } else {\n-                    // by default adjust size by multiple of page size\n-                    assumedSize += getEstimatedSizeIncrease();\n-                }\n-                getLogger(DataCommunicator.class).info(\n-                        \"Requested range: {} old size: {} new size: {}\",\n-                        requestedRange, previousAssumedSize, assumedSize);\n+                // by default adjust size by multiple of page size\n+                assumedSize += getRowCountEstimateIncrease();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE1NjkzMg=="}, "originalCommit": {"oid": "c0700a269287eee7ea0b3776ac51808091f0d157"}, "originalPosition": 307}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3301, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}