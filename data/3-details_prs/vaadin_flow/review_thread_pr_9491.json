{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MjczNDY2", "number": 9491, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1Mjo1OFrOE9PPhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1MzowMFrOE9PPkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjQ4MzI3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1Mjo1OFrOH50Ybg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1Mjo1OFrOH50Ybg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4OTEwMg==", "bodyText": "Replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\".", "url": "https://github.com/vaadin/flow/pull/9491#discussion_r530389102", "createdAt": "2020-11-25T13:52:58Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,13 +208,14 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f87415604e333c5793ef053ae0172a17f941b649"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjQ4MzM0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1Mjo1OVrOH50Ydg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1Mjo1OVrOH50Ydg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4OTExMA==", "bodyText": "Invoke method(s) only conditionally.", "url": "https://github.com/vaadin/flow/pull/9491#discussion_r530389110", "createdAt": "2020-11-25T13:52:59Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -211,11 +224,20 @@ private void writeRangeContents(String range, HttpServletResponse response,\n             if (end < start\n                     || (resourceLength >= 0 && start >= resourceLength)) {\n                 // illegal range -> 416\n+                getLogger().info(\"received an illegal range '{}' for resource '{}'\",\n+                        rangeMatcher.group(), resourceURL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f87415604e333c5793ef053ae0172a17f941b649"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjQ4MzM3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1MzowMFrOH50Yfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1MzowMFrOH50Yfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4OTExOA==", "bodyText": "Invoke method(s) only conditionally.", "url": "https://github.com/vaadin/flow/pull/9491#discussion_r530389118", "createdAt": "2020-11-25T13:53:00Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,13 +208,14 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {\n             String startGroup = rangeMatcher.group(1);\n             String endGroup = rangeMatcher.group(2);\n             if (startGroup.isEmpty() && endGroup.isEmpty()) {\n                 response.setContentLengthLong(0L);\n                 response.setStatus(416); // Range Not Satisfiable\n+                getLogger().info(\"received a malformed range: '{}'\", rangeMatcher.group());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f87415604e333c5793ef053ae0172a17f941b649"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2827, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}