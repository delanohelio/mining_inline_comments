{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NjMyOTg0", "number": 9484, "title": "fix: optimize handling of requests containing Range header", "bodyText": "More efficient parsing of the Range: header value. Also, range count is capped at 16\n(additional will be ignored) and overlapping ranges at 2 (request will be denied\nif above).", "createdAt": "2020-11-24T17:10:10Z", "url": "https://github.com/vaadin/flow/pull/9484", "merged": true, "mergeCommit": {"oid": "9e2a67a8f1c32515cd2a6ede45a070c565d18dfd"}, "closed": true, "closedAt": "2020-11-25T11:54:37Z", "author": {"login": "joheriks"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfs7l2AH2gAyNTI2NjMyOTg0OjYyODIwYmExNDRlNGIzZWQ0OWQ0ZjZhZjU5NWE1YWI3OTRjNmY5MmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdf9BBogFqTUzODQyMDYyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "62820ba144e4b3ed49d4f6af595a5ab794c6f92c", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/62820ba144e4b3ed49d4f6af595a5ab794c6f92c", "committedDate": "2020-11-24T17:09:48Z", "message": "fix: optimize handling of requests containing Range header\n\nMore efficient parsing of the header value. Also, range count is capped at 16\n(additional will be ignored) and overlapping ranges at 2 (request will be denied\nif above)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MTcyNzM5", "url": "https://github.com/vaadin/flow/pull/9484#pullrequestreview-538172739", "createdAt": "2020-11-25T05:46:10Z", "commit": {"oid": "62820ba144e4b3ed49d4f6af595a5ab794c6f92c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNTo0NjoxMFrOH5kCSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNTo1MzowNlrOH5kKQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMTI5MQ==", "bodyText": "[0-9] is \\d.\nThe expression will become shorter.", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530121291", "createdAt": "2020-11-25T05:46:10Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -51,8 +51,20 @@\n public class ResponseWriter implements Serializable {\n     private static final int DEFAULT_BUFFER_SIZE = 32 * 1024;\n \n-    private static final Pattern RANGE_HEADER_PATTERN = Pattern.compile(\"^bytes=(([0-9]*-[0-9]*,?\\\\s*)+)$\");\n-    private static final Pattern BYTE_RANGE_PATTERN = Pattern.compile(\"([0-9]*)-([0-9]*)\");\n+    private static final Pattern RANGE_HEADER_PATTERN = Pattern.compile(\n+            \"^bytes=(([0-9]*-[0-9]*\\\\s*,\\\\s*)*[0-9]*-[0-9]*\\\\s*)$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62820ba144e4b3ed49d4f6af595a5ab794c6f92c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMTkwMw==", "bodyText": "unnecessary for inside while : please refactor", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530121903", "createdAt": "2020-11-25T05:48:17Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -208,8 +221,14 @@ private void writeRangeContents(String range, HttpServletResponse response,\n             long start = startGroup.isEmpty() ? 0L : Long.parseLong(startGroup);\n             long end = endGroup.isEmpty() ? Long.MAX_VALUE\n                     : Long.parseLong(endGroup);\n+            for (Pair<Long, Long> accepted : ranges) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62820ba144e4b3ed49d4f6af595a5ab794c6f92c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMjY4Mw==", "bodyText": "What happens if ranges.size() >= MAX_RANGE_COUNT?\nThere is no mistake set. The processing goes in happy path.\nThis is not the same as check for overlappingRangeCount which fails the request processing.", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530122683", "createdAt": "2020-11-25T05:50:51Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,8 +208,9 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n+        int overlappingRangeCount = 0;\n         List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62820ba144e4b3ed49d4f6af595a5ab794c6f92c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMzMzMA==", "bodyText": "Ah, is it covered by the case that end < start?\nI would may be refactor this a bit and log an error message depending on what happened (instead of one big if).\nThat will also help to avoid comments: log messages will be self documented.", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530123330", "createdAt": "2020-11-25T05:53:06Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,8 +208,9 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n+        int overlappingRangeCount = 0;\n         List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMjY4Mw=="}, "originalCommit": {"oid": "62820ba144e4b3ed49d4f6af595a5ab794c6f92c"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfd5c0263a9495b232be89678bd44f12e0ce5f55", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/bfd5c0263a9495b232be89678bd44f12e0ce5f55", "committedDate": "2020-11-25T09:38:04Z", "message": "fix: short regex, limit instead of reject when more than 2 overlapping ranges, log when hitting limits"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzYxMjUw", "url": "https://github.com/vaadin/flow/pull/9484#pullrequestreview-538361250", "createdAt": "2020-11-25T10:35:59Z", "commit": {"oid": "bfd5c0263a9495b232be89678bd44f12e0ce5f55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNTo1OVrOH5tJRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNTo1OVrOH5tJRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3MDUzNQ==", "bodyText": "Replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\".", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530270535", "createdAt": "2020-11-25T10:35:59Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,13 +208,14 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd5c0263a9495b232be89678bd44f12e0ce5f55"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzYxMjU5", "url": "https://github.com/vaadin/flow/pull/9484#pullrequestreview-538361259", "createdAt": "2020-11-25T10:36:00Z", "commit": {"oid": "bfd5c0263a9495b232be89678bd44f12e0ce5f55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNjowMFrOH5tJTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNjowMFrOH5tJTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3MDU0Mg==", "bodyText": "Invoke method(s) only conditionally.", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530270542", "createdAt": "2020-11-25T10:36:00Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -211,11 +224,20 @@ private void writeRangeContents(String range, HttpServletResponse response,\n             if (end < start\n                     || (resourceLength >= 0 && start >= resourceLength)) {\n                 // illegal range -> 416\n+                getLogger().info(\"received an illegal range '{}' for resource '{}'\",\n+                        rangeMatcher.group(), resourceURL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd5c0263a9495b232be89678bd44f12e0ce5f55"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzYxMjY4", "url": "https://github.com/vaadin/flow/pull/9484#pullrequestreview-538361268", "createdAt": "2020-11-25T10:36:01Z", "commit": {"oid": "bfd5c0263a9495b232be89678bd44f12e0ce5f55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNjowMVrOH5tJVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNjowMVrOH5tJVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3MDU1MQ==", "bodyText": "Invoke method(s) only conditionally.", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530270551", "createdAt": "2020-11-25T10:36:01Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,13 +208,14 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {\n             String startGroup = rangeMatcher.group(1);\n             String endGroup = rangeMatcher.group(2);\n             if (startGroup.isEmpty() && endGroup.isEmpty()) {\n                 response.setContentLengthLong(0L);\n                 response.setStatus(416); // Range Not Satisfiable\n+                getLogger().info(\"received a malformed range: '{}'\", rangeMatcher.group());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd5c0263a9495b232be89678bd44f12e0ce5f55"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NDIwNjIx", "url": "https://github.com/vaadin/flow/pull/9484#pullrequestreview-538420621", "createdAt": "2020-11-25T11:54:13Z", "commit": {"oid": "bfd5c0263a9495b232be89678bd44f12e0ce5f55"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4545, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}