{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NTAyMjg1", "number": 8481, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo0NDo1NlrOECFLpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo0NDo1NlrOECFLpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjE3NTExOnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/BinderState.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo0NDo1NlrOGeUUxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo0NDo1NlrOGeUUxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0MzQ2Mg==", "bodyText": "Should BinderState have a function? I thought it's only holding states", "url": "https://github.com/vaadin/flow/pull/8481#discussion_r434443462", "createdAt": "2020-06-03T09:44:56Z", "author": {"login": "haijian-vaadin"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/BinderState.ts", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import {AbstractModel} from \"./Models\";\n+import {Validator, ValueError} from \"./Validation\";\n+\n+export interface BinderState<T, M extends AbstractModel<T>> {\n+  readonly model: M;\n+  readonly name: string;\n+  value: T;\n+  readonly defaultValue: T;\n+  readonly validators: ReadonlyArray<Validator<T>>;\n+  readonly dirty: boolean;\n+  readonly visited: boolean;\n+  readonly invalid: boolean;\n+  readonly required: boolean;\n+  readonly errors: ReadonlyArray<ValueError<any>>;\n+  readonly ownErrors: ReadonlyArray<ValueError<T>>;\n+\n+  validate(): Promise<ReadonlyArray<ValueError<any>>>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f78d3969a3650fcd66961eb6408eac74934193"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3440, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}