{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNDY1Njc3", "number": 8405, "title": "Some improvements in DataView classes", "bodyText": "This change is\u2002", "createdAt": "2020-05-24T20:25:58Z", "url": "https://github.com/vaadin/flow/pull/8405", "merged": true, "mergeCommit": {"oid": "ea668cb85d5d22f241173d4f7f59206250b01744"}, "closed": true, "closedAt": "2020-05-27T10:03:53Z", "author": {"login": "mehdi-vaadin"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcka_kHgH2gAyNDIyNDY1Njc3OmMzZjViNzNkMDQ1NjkyMDJmZGQ1MDUzYTU2ZGE2YTMwZjdlYTlmN2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclVlu3AH2gAyNDIyNDY1Njc3Ojg4MTQwNmNjZTEyMjAwOGNiOWNmMjE4MTczNzg1NmZhNTdiZTExOTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c3f5b73d04569202fdd5053a56da6a30f7ea9f7d", "author": {"user": {"login": "mehdi-vaadin", "name": "Mehdi Javan"}}, "url": "https://github.com/vaadin/flow/commit/c3f5b73d04569202fdd5053a56da6a30f7ea9f7d", "committedDate": "2020-05-24T12:54:19Z", "message": "Remove getAllItemsAsList from AbstractListDataView"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30f37e7276c3c4a9388f661295fae23727858155", "author": {"user": {"login": "mehdi-vaadin", "name": "Mehdi Javan"}}, "url": "https://github.com/vaadin/flow/commit/30f37e7276c3c4a9388f661295fae23727858155", "committedDate": "2020-05-24T13:30:30Z", "message": "Make AbstractDataView.dataController private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1", "author": {"user": {"login": "mehdi-vaadin", "name": "Mehdi Javan"}}, "url": "https://github.com/vaadin/flow/commit/cd1cfc6c3d3116dda3fb73b51e72a604a05467f1", "committedDate": "2020-05-24T20:26:57Z", "message": "Merge branch 'feature/dataprovider' into changes-in-data-classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MzkyODU0", "url": "https://github.com/vaadin/flow/pull/8405#pullrequestreview-417392854", "createdAt": "2020-05-24T21:18:19Z", "commit": {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoxOVrOGZxXTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoxOVrOGZxXTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NjM2Nw==", "bodyText": "Cast one of the operands of this addition operation to a \"long\".", "url": "https://github.com/vaadin/flow/pull/8405#discussion_r429676367", "createdAt": "2020-05-24T21:18:19Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -15,85 +15,94 @@\n  */\n package com.vaadin.flow.data.provider;\n \n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n import com.vaadin.flow.function.SerializableComparator;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializablePredicate;\n \n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n /**\n- * Abstract list data view implementation which provides common methods\n- * for fetching, filtering and sorting in-memory data to all {@link ListDataView} subclasses.\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n  *\n  * @param <T>\n- *        data type\n+ *            data type\n  */\n public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         implements ListDataView<T, AbstractListDataView<T>> {\n \n     /**\n-     * Creates a new instance of {@link AbstractListDataView} subclass\n-     * which rely on in-memory data set, i.e. data set stored in a collection.\n+     * Creates a new instance of {@link AbstractListDataView} subclass which\n+     * rely on in-memory data set, i.e. data set stored in a collection.\n      *\n      * @param dataController\n-     *          data controller reference\n+     *            data controller reference\n      */\n     public AbstractListDataView(DataController<T> dataController) {\n         super(dataController);\n     }\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        return getNextItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        if(index < 0)\n+            return false;\n+        return getAllItems().skip(index + 1).findAny().isPresent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MzkyODU3", "url": "https://github.com/vaadin/flow/pull/8405#pullrequestreview-417392857", "createdAt": "2020-05-24T21:18:20Z", "commit": {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoyMFrOGZxXUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoyMFrOGZxXUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NjM2OA==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/vaadin/flow/pull/8405#discussion_r429676368", "createdAt": "2020-05-24T21:18:20Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -15,85 +15,94 @@\n  */\n package com.vaadin.flow.data.provider;\n \n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n import com.vaadin.flow.function.SerializableComparator;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializablePredicate;\n \n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n /**\n- * Abstract list data view implementation which provides common methods\n- * for fetching, filtering and sorting in-memory data to all {@link ListDataView} subclasses.\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n  *\n  * @param <T>\n- *        data type\n+ *            data type\n  */\n public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         implements ListDataView<T, AbstractListDataView<T>> {\n \n     /**\n-     * Creates a new instance of {@link AbstractListDataView} subclass\n-     * which rely on in-memory data set, i.e. data set stored in a collection.\n+     * Creates a new instance of {@link AbstractListDataView} subclass which\n+     * rely on in-memory data set, i.e. data set stored in a collection.\n      *\n      * @param dataController\n-     *          data controller reference\n+     *            data controller reference\n      */\n     public AbstractListDataView(DataController<T> dataController) {\n         super(dataController);\n     }\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        return getNextItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        if(index < 0)\n+            return false;\n+        return getAllItems().skip(index + 1).findAny().isPresent();\n     }\n \n     @Override\n     public T getNextItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> nextItemIndex = getNextItemIndex(notNull(item), items);\n-        return nextItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index < 0)\n+            return null;\n+        return getAllItems().skip(index + 1).findFirst().orElse(null);\n     }\n \n     @Override\n     public boolean hasPreviousItem(T item) {\n-        return getPreviousItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        return index > 0;\n     }\n \n     @Override\n     public T getPreviousItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> previousItemIndex = getPreviousItemIndex(notNull(item), items);\n-        return previousItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index <= 0)\n+            return null;\n+        return getAllItems().skip(index - 1).findFirst().orElse(null);\n     }\n \n     @Override\n     public AbstractListDataView<T> withFilter(SerializablePredicate<T> filter) {\n-        return withFilterOrOrder(dataProvider -> dataProvider.setFilter(filter));\n+        return withFilterOrOrder(\n+                dataProvider -> dataProvider.setFilter(filter));\n     }\n \n     @Override\n-    public AbstractListDataView<T> withSortComparator(SerializableComparator<T> sortComparator) {\n-        return withFilterOrOrder(dataProvider -> dataProvider.setSortComparator(sortComparator));\n+    public AbstractListDataView<T> withSortComparator(\n+            SerializableComparator<T> sortComparator) {\n+        return withFilterOrOrder(\n+                dataProvider -> dataProvider.setSortComparator(sortComparator));\n     }\n \n     @Override\n     public Stream<T> getAllItems() {\n-        return dataController.getAllItems();\n+        return getDataController().getAllItems();\n     }\n \n     @Override\n     public int getDataSize() {\n-        return dataController.getDataSize();\n+        return getDataController().getDataSize();\n     }\n \n     @Override\n     public boolean isItemPresent(T item) {\n-        // TODO: delegate this to the data communicator/component, since the equality could be\n-        //  determined by the provided identity checker (the default is equals).\n+        // TODO: delegate this to the data communicator/component, since the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MzkyODU5", "url": "https://github.com/vaadin/flow/pull/8405#pullrequestreview-417392859", "createdAt": "2020-05-24T21:18:20Z", "commit": {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoyMVrOGZxXUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoyMVrOGZxXUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NjM3MA==", "bodyText": "Cast one of the operands of this subtraction operation to a \"long\".", "url": "https://github.com/vaadin/flow/pull/8405#discussion_r429676370", "createdAt": "2020-05-24T21:18:21Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -15,85 +15,94 @@\n  */\n package com.vaadin.flow.data.provider;\n \n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n import com.vaadin.flow.function.SerializableComparator;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializablePredicate;\n \n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n /**\n- * Abstract list data view implementation which provides common methods\n- * for fetching, filtering and sorting in-memory data to all {@link ListDataView} subclasses.\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n  *\n  * @param <T>\n- *        data type\n+ *            data type\n  */\n public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         implements ListDataView<T, AbstractListDataView<T>> {\n \n     /**\n-     * Creates a new instance of {@link AbstractListDataView} subclass\n-     * which rely on in-memory data set, i.e. data set stored in a collection.\n+     * Creates a new instance of {@link AbstractListDataView} subclass which\n+     * rely on in-memory data set, i.e. data set stored in a collection.\n      *\n      * @param dataController\n-     *          data controller reference\n+     *            data controller reference\n      */\n     public AbstractListDataView(DataController<T> dataController) {\n         super(dataController);\n     }\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        return getNextItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        if(index < 0)\n+            return false;\n+        return getAllItems().skip(index + 1).findAny().isPresent();\n     }\n \n     @Override\n     public T getNextItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> nextItemIndex = getNextItemIndex(notNull(item), items);\n-        return nextItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index < 0)\n+            return null;\n+        return getAllItems().skip(index + 1).findFirst().orElse(null);\n     }\n \n     @Override\n     public boolean hasPreviousItem(T item) {\n-        return getPreviousItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        return index > 0;\n     }\n \n     @Override\n     public T getPreviousItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> previousItemIndex = getPreviousItemIndex(notNull(item), items);\n-        return previousItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index <= 0)\n+            return null;\n+        return getAllItems().skip(index - 1).findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MzkyODYx", "url": "https://github.com/vaadin/flow/pull/8405#pullrequestreview-417392861", "createdAt": "2020-05-24T21:18:21Z", "commit": {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoyMVrOGZxXUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoyMVrOGZxXUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NjM3MQ==", "bodyText": "Cast one of the operands of this addition operation to a \"long\".", "url": "https://github.com/vaadin/flow/pull/8405#discussion_r429676371", "createdAt": "2020-05-24T21:18:21Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -15,85 +15,94 @@\n  */\n package com.vaadin.flow.data.provider;\n \n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n import com.vaadin.flow.function.SerializableComparator;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializablePredicate;\n \n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n /**\n- * Abstract list data view implementation which provides common methods\n- * for fetching, filtering and sorting in-memory data to all {@link ListDataView} subclasses.\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n  *\n  * @param <T>\n- *        data type\n+ *            data type\n  */\n public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         implements ListDataView<T, AbstractListDataView<T>> {\n \n     /**\n-     * Creates a new instance of {@link AbstractListDataView} subclass\n-     * which rely on in-memory data set, i.e. data set stored in a collection.\n+     * Creates a new instance of {@link AbstractListDataView} subclass which\n+     * rely on in-memory data set, i.e. data set stored in a collection.\n      *\n      * @param dataController\n-     *          data controller reference\n+     *            data controller reference\n      */\n     public AbstractListDataView(DataController<T> dataController) {\n         super(dataController);\n     }\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        return getNextItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        if(index < 0)\n+            return false;\n+        return getAllItems().skip(index + 1).findAny().isPresent();\n     }\n \n     @Override\n     public T getNextItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> nextItemIndex = getNextItemIndex(notNull(item), items);\n-        return nextItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index < 0)\n+            return null;\n+        return getAllItems().skip(index + 1).findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODQ3ODI4", "url": "https://github.com/vaadin/flow/pull/8405#pullrequestreview-417847828", "createdAt": "2020-05-25T19:06:32Z", "commit": {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2da63654df6ad8e089e6dd292ab629ddd5384e06", "author": {"user": {"login": "mehdi-vaadin", "name": "Mehdi Javan"}}, "url": "https://github.com/vaadin/flow/commit/2da63654df6ad8e089e6dd292ab629ddd5384e06", "committedDate": "2020-05-25T22:28:17Z", "message": "Fix calling getAllItems twice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "702f5c1ddfb24d2533fd53fa8690a6ca31f64e52", "author": {"user": {"login": "mehdi-vaadin", "name": "Mehdi Javan"}}, "url": "https://github.com/vaadin/flow/commit/702f5c1ddfb24d2533fd53fa8690a6ca31f64e52", "committedDate": "2020-05-25T22:28:47Z", "message": "Merge remote-tracking branch 'origin/changes-in-data-classes' into changes-in-data-classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODkxMTY0", "url": "https://github.com/vaadin/flow/pull/8405#pullrequestreview-417891164", "createdAt": "2020-05-25T22:29:26Z", "commit": {"oid": "702f5c1ddfb24d2533fd53fa8690a6ca31f64e52"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fe236380372d1cab3243fb31776ab51a45a6dc7", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/9fe236380372d1cab3243fb31776ab51a45a6dc7", "committedDate": "2020-05-27T07:44:38Z", "message": "Merge branch 'feature/dataprovider' into changes-in-data-classes\n\n# Conflicts:\n#\tflow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java\n#\tflow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25e7c6c33a2ac5045a8664dfc46f140a2a67626a", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/25e7c6c33a2ac5045a8664dfc46f140a2a67626a", "committedDate": "2020-05-27T07:58:59Z", "message": "submodule targets"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d671ea50d940f69b7ebcf355959453bd1c3f437d", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/d671ea50d940f69b7ebcf355959453bd1c3f437d", "committedDate": "2020-05-27T07:57:44Z", "message": "submodule targets"}, "afterCommit": {"oid": "25e7c6c33a2ac5045a8664dfc46f140a2a67626a", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/25e7c6c33a2ac5045a8664dfc46f140a2a67626a", "committedDate": "2020-05-27T07:58:59Z", "message": "submodule targets"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTYwNTIx", "url": "https://github.com/vaadin/flow/pull/8405#pullrequestreview-418960521", "createdAt": "2020-05-27T08:18:32Z", "commit": {"oid": "25e7c6c33a2ac5045a8664dfc46f140a2a67626a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e0443cc5ec3916e8b032e312234b52dc4ccb6cb", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/6e0443cc5ec3916e8b032e312234b52dc4ccb6cb", "committedDate": "2020-05-27T08:44:23Z", "message": "Delete unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTgyMTg2", "url": "https://github.com/vaadin/flow/pull/8405#pullrequestreview-418982186", "createdAt": "2020-05-27T08:45:47Z", "commit": {"oid": "6e0443cc5ec3916e8b032e312234b52dc4ccb6cb"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTgyNDY5", "url": "https://github.com/vaadin/flow/pull/8405#pullrequestreview-418982469", "createdAt": "2020-05-27T08:46:07Z", "commit": {"oid": "6e0443cc5ec3916e8b032e312234b52dc4ccb6cb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "881406cce122008cb9cf2181737856fa57be1197", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/881406cce122008cb9cf2181737856fa57be1197", "committedDate": "2020-05-27T09:10:30Z", "message": "ignore submodule"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 337, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}