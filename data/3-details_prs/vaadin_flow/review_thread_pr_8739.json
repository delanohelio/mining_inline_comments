{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMjQ1OTU5", "number": 8739, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjo1MTo1OFrOEQKSoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDozNTozNFrOERTODg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzgxMjgwOnYy", "diffSide": "LEFT", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjo1MTo1OFrOG0KtIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNToxMDoxNFrOG0oU9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM1NDUzMQ==", "bodyText": "I think I don't understand the reason of the issue.\nDoes JVM exit ?\nThe current (before the patch) state of code assumes that the port file is 1:1 JVM.\nIf JVM has exited then I don't understand how this code allows to get the same file name in new JVM.\nIf JVM has not terminated then why there is a need to modify the code ?\nIn the second case if JVM has terminated watchdog should terminate the webpack dev server as well.\nAnd it looks like the fix is done in a wrong place ?....", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r457354531", "createdAt": "2020-07-20T12:51:58Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -464,7 +468,7 @@ public String getFailedOutput() {\n      * Remove the running port from the vaadinContext and temporary file.\n      */\n     public void removeRunningDevServerPort() {\n-        FileUtils.deleteQuietly(LazyDevServerPortFileInit.DEV_SERVER_PORT_FILE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab807c4b75d054f60cd9eab95fcb3dc62126d93"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1NDk3MQ==", "bodyText": "The JVM doesn't terminate when Jetty restarts from monitored class modification and scanInterval. However, app context is reloaded and all static initializers are rerun, which results in the handle to the port file being lost. This in turns means that DevModeHandler can't connect to the existing Webpack dev server, and spawns another one unnecessarily. The interleaved output from multiple concurrently running dev servers, which includes ANSI sequences, causes terminal problems.\nPort file isn't necessarily 1:1 with JVM since it is possible (but maybe not common) to run multiple applications in dev mode simultaneously under the same JVM. Each app will have its own Webpack dev server. AFAIK has of thread group + full file path to frontend build directory ought to be unique for each deployed app and for each new start of the app in another JVM.", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r457654971", "createdAt": "2020-07-20T19:54:16Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -464,7 +468,7 @@ public String getFailedOutput() {\n      * Remove the running port from the vaadinContext and temporary file.\n      */\n     public void removeRunningDevServerPort() {\n-        FileUtils.deleteQuietly(LazyDevServerPortFileInit.DEV_SERVER_PORT_FILE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM1NDUzMQ=="}, "originalCommit": {"oid": "2ab807c4b75d054f60cd9eab95fcb3dc62126d93"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzOTA5NQ==", "bodyText": "Hmmm.....\nLazyDevServerPortFileInit.DEV_SERVER_PORT_FILE  can't be lost since JVM is not terminated.\nIt doesn't matter whether initializers are rerun or not. Class is loaded once and should be there since JVM is alive.\nThe only thing which I missed is: the app is loaded via another classloader after Jetty restart even though JVM is not\nterminiated.\nThat's why static initializers are rerun: they are not rerun in fact. Classes are loaded by another classloader so that previous initializers initialized differerent classes (in a different scope).\nNow I see my mistake.", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r457839095", "createdAt": "2020-07-21T05:07:48Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -464,7 +468,7 @@ public String getFailedOutput() {\n      * Remove the running port from the vaadinContext and temporary file.\n      */\n     public void removeRunningDevServerPort() {\n-        FileUtils.deleteQuietly(LazyDevServerPortFileInit.DEV_SERVER_PORT_FILE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM1NDUzMQ=="}, "originalCommit": {"oid": "2ab807c4b75d054f60cd9eab95fcb3dc62126d93"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzOTUzMg==", "bodyText": "Hmmm.....\nLazyDevServerPortFileInit.DEV_SERVER_PORT_FILE can't be lost since JVM is not terminated.\nIt doesn't matter whether initializers are rerun or not. Class is loaded once and should be there since JVM is alive.\nThe only thing which I missed is: the app is loaded via another classloader after Jetty restart even though JVM is not\nterminiated.\nThat's why static initializers are rerun: they are not rerun in fact. Classes are loaded by another classloader so that previous initializers initialized differerent classes (in a different scope).\nNow I see my mistake.", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r457839532", "createdAt": "2020-07-21T05:09:18Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -464,7 +468,7 @@ public String getFailedOutput() {\n      * Remove the running port from the vaadinContext and temporary file.\n      */\n     public void removeRunningDevServerPort() {\n-        FileUtils.deleteQuietly(LazyDevServerPortFileInit.DEV_SERVER_PORT_FILE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM1NDUzMQ=="}, "originalCommit": {"oid": "2ab807c4b75d054f60cd9eab95fcb3dc62126d93"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzOTg2MA==", "bodyText": "Alright, now I understand the reason by I don't understand the solution.....\nBut that should be a comment in another place.", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r457839860", "createdAt": "2020-07-21T05:10:14Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -464,7 +468,7 @@ public String getFailedOutput() {\n      * Remove the running port from the vaadinContext and temporary file.\n      */\n     public void removeRunningDevServerPort() {\n-        FileUtils.deleteQuietly(LazyDevServerPortFileInit.DEV_SERVER_PORT_FILE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM1NDUzMQ=="}, "originalCommit": {"oid": "2ab807c4b75d054f60cd9eab95fcb3dc62126d93"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzAwNjQ2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNToxMDo1OVrOG0oVww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjozOTo0NFrOG1951g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0MDA2Nw==", "bodyText": "What I don't understand here: why the thread group will be the same after restart ?\nWhich way it's forced ?", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r457840067", "createdAt": "2020-07-21T05:10:59Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -742,18 +745,21 @@ void join() {\n         devServerStartFuture.join();\n     }\n \n-    private static final class LazyDevServerPortFileInit {\n-\n-        private static final File DEV_SERVER_PORT_FILE = createDevServerPortFile();\n-\n-        private static File createDevServerPortFile() {\n-            try {\n-                return File.createTempFile(\"flow-dev-server\", \"port\");\n-            } catch (IOException exception) {\n-                throw new UncheckedIOException(exception);\n-            }\n-        }\n \n+    private static File getDevServerPortFile(File npmFolder) {\n+        // The thread group is the same in each servlet-container restart\n+        String threadGroup = String\n+                .valueOf(Thread.currentThread().getThreadGroup().hashCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab807c4b75d054f60cd9eab95fcb3dc62126d93"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5OTA5OQ==", "bodyText": "That the thread group hash code stays the when Jetty reloads I have only empirically verified, other suggestions welcome. The string used needs to satisfy the following:\n\nChange when the JVM is restarted\nRemain the same when Jetty reloads and the JVM is not restarted", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r457899099", "createdAt": "2020-07-21T07:40:56Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -742,18 +745,21 @@ void join() {\n         devServerStartFuture.join();\n     }\n \n-    private static final class LazyDevServerPortFileInit {\n-\n-        private static final File DEV_SERVER_PORT_FILE = createDevServerPortFile();\n-\n-        private static File createDevServerPortFile() {\n-            try {\n-                return File.createTempFile(\"flow-dev-server\", \"port\");\n-            } catch (IOException exception) {\n-                throw new UncheckedIOException(exception);\n-            }\n-        }\n \n+    private static File getDevServerPortFile(File npmFolder) {\n+        // The thread group is the same in each servlet-container restart\n+        String threadGroup = String\n+                .valueOf(Thread.currentThread().getThreadGroup().hashCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0MDA2Nw=="}, "originalCommit": {"oid": "2ab807c4b75d054f60cd9eab95fcb3dc62126d93"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MjcyNQ==", "bodyText": "Thread group hash may stay the same when JVM restarts.\nSo it fixes the issue (even though there is no proof) but it doesn't fit to your requirements.\nWhen I run simple Main java class all threads have the same hash on every restart.", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r457992725", "createdAt": "2020-07-21T10:21:55Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -742,18 +745,21 @@ void join() {\n         devServerStartFuture.join();\n     }\n \n-    private static final class LazyDevServerPortFileInit {\n-\n-        private static final File DEV_SERVER_PORT_FILE = createDevServerPortFile();\n-\n-        private static File createDevServerPortFile() {\n-            try {\n-                return File.createTempFile(\"flow-dev-server\", \"port\");\n-            } catch (IOException exception) {\n-                throw new UncheckedIOException(exception);\n-            }\n-        }\n \n+    private static File getDevServerPortFile(File npmFolder) {\n+        // The thread group is the same in each servlet-container restart\n+        String threadGroup = String\n+                .valueOf(Thread.currentThread().getThreadGroup().hashCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0MDA2Nw=="}, "originalCommit": {"oid": "2ab807c4b75d054f60cd9eab95fcb3dc62126d93"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5NDE5MQ==", "bodyText": "Original code contained a JVM id : 2bc0128#diff-023ed25c83cd7d7abab003a4d2ff7607\nBut ManagementFactory.getRuntimeMXBean().getName() takes 5 seconds and totally block any execution (executing it in a separate thread doesn't help). So it's extremely bad idea to use this code.", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r457994191", "createdAt": "2020-07-21T10:24:35Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -742,18 +745,21 @@ void join() {\n         devServerStartFuture.join();\n     }\n \n-    private static final class LazyDevServerPortFileInit {\n-\n-        private static final File DEV_SERVER_PORT_FILE = createDevServerPortFile();\n-\n-        private static File createDevServerPortFile() {\n-            try {\n-                return File.createTempFile(\"flow-dev-server\", \"port\");\n-            } catch (IOException exception) {\n-                throw new UncheckedIOException(exception);\n-            }\n-        }\n \n+    private static File getDevServerPortFile(File npmFolder) {\n+        // The thread group is the same in each servlet-container restart\n+        String threadGroup = String\n+                .valueOf(Thread.currentThread().getThreadGroup().hashCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0MDA2Nw=="}, "originalCommit": {"oid": "2ab807c4b75d054f60cd9eab95fcb3dc62126d93"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MTk0Mg==", "bodyText": "Now creates a new UUID and stores in a special system property (vaadin.frontend.webpack.portfile.uuid), which should a satisfy the above two criteria.", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r459241942", "createdAt": "2020-07-23T06:39:44Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -742,18 +745,21 @@ void join() {\n         devServerStartFuture.join();\n     }\n \n-    private static final class LazyDevServerPortFileInit {\n-\n-        private static final File DEV_SERVER_PORT_FILE = createDevServerPortFile();\n-\n-        private static File createDevServerPortFile() {\n-            try {\n-                return File.createTempFile(\"flow-dev-server\", \"port\");\n-            } catch (IOException exception) {\n-                throw new UncheckedIOException(exception);\n-            }\n-        }\n \n+    private static File getDevServerPortFile(File npmFolder) {\n+        // The thread group is the same in each servlet-container restart\n+        String threadGroup = String\n+                .valueOf(Thread.currentThread().getThreadGroup().hashCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0MDA2Nw=="}, "originalCommit": {"oid": "2ab807c4b75d054f60cd9eab95fcb3dc62126d93"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzE0OTkyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoxNzoyM1rOG0poYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzozNjo0M1rOG0rzRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MTIxNg==", "bodyText": "What do you think about using File.createTempFile instead? (https://docs.oracle.com/javase/8/docs/api/java/io/File.html#createTempFile-java.lang.String-java.lang.String-)", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r457861216", "createdAt": "2020-07-21T06:17:23Z", "author": {"login": "knoobie"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -742,18 +745,21 @@ void join() {\n         devServerStartFuture.join();\n     }\n \n-    private static final class LazyDevServerPortFileInit {\n-\n-        private static final File DEV_SERVER_PORT_FILE = createDevServerPortFile();\n-\n-        private static File createDevServerPortFile() {\n-            try {\n-                return File.createTempFile(\"flow-dev-server\", \"port\");\n-            } catch (IOException exception) {\n-                throw new UncheckedIOException(exception);\n-            }\n-        }\n \n+    private static File getDevServerPortFile(File npmFolder) {\n+        // The thread group is the same in each servlet-container restart\n+        String threadGroup = String\n+                .valueOf(Thread.currentThread().getThreadGroup().hashCode());\n+        String frontendBuildPath = npmFolder.getAbsolutePath();\n+\n+        // #8723: keep webpack alive when Jetty restarts.\n+        // Thread group ID prevents the port file from being picked up after JVM\n+        // restart. Frontend path ensures uniqueness when multiple devmode apps\n+        // are deployed.\n+        String uniqueUid = UUID\n+                .nameUUIDFromBytes((threadGroup + frontendBuildPath)\n+                        .getBytes(StandardCharsets.UTF_8))\n+                .toString();\n+        return new File(System.getProperty(\"java.io.tmpdir\"), uniqueUid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab807c4b75d054f60cd9eab95fcb3dc62126d93"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MzU3NQ==", "bodyText": "File::createTempFile creates a new empty temporary file with a unique name. After Jetty reload there's no way to get the same file name again, to read the port number from.  I believe File::createTempFile works like this by design so that temporary files are guaranteed to never clash. In this case we actually need a predictable temporary file name that remains the same throughout Jetty reload.", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r457893575", "createdAt": "2020-07-21T07:30:46Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -742,18 +745,21 @@ void join() {\n         devServerStartFuture.join();\n     }\n \n-    private static final class LazyDevServerPortFileInit {\n-\n-        private static final File DEV_SERVER_PORT_FILE = createDevServerPortFile();\n-\n-        private static File createDevServerPortFile() {\n-            try {\n-                return File.createTempFile(\"flow-dev-server\", \"port\");\n-            } catch (IOException exception) {\n-                throw new UncheckedIOException(exception);\n-            }\n-        }\n \n+    private static File getDevServerPortFile(File npmFolder) {\n+        // The thread group is the same in each servlet-container restart\n+        String threadGroup = String\n+                .valueOf(Thread.currentThread().getThreadGroup().hashCode());\n+        String frontendBuildPath = npmFolder.getAbsolutePath();\n+\n+        // #8723: keep webpack alive when Jetty restarts.\n+        // Thread group ID prevents the port file from being picked up after JVM\n+        // restart. Frontend path ensures uniqueness when multiple devmode apps\n+        // are deployed.\n+        String uniqueUid = UUID\n+                .nameUUIDFromBytes((threadGroup + frontendBuildPath)\n+                        .getBytes(StandardCharsets.UTF_8))\n+                .toString();\n+        return new File(System.getProperty(\"java.io.tmpdir\"), uniqueUid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MTIxNg=="}, "originalCommit": {"oid": "2ab807c4b75d054f60cd9eab95fcb3dc62126d93"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5Njc3Mg==", "bodyText": "You are right! I was thinking about the following:\n\nusing File::createTempFile with a unique prefix vaadin-webpack-lock and a suffix portnumber\nthis would allow on server start to search in the temp directory for files starting with vaadin-webpack-lock and identifying the portnumberit used last time\n\nDrawback: This would create a huge problem with running multiple vaadin instances locally at the same time. :(", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r457896772", "createdAt": "2020-07-21T07:36:43Z", "author": {"login": "knoobie"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -742,18 +745,21 @@ void join() {\n         devServerStartFuture.join();\n     }\n \n-    private static final class LazyDevServerPortFileInit {\n-\n-        private static final File DEV_SERVER_PORT_FILE = createDevServerPortFile();\n-\n-        private static File createDevServerPortFile() {\n-            try {\n-                return File.createTempFile(\"flow-dev-server\", \"port\");\n-            } catch (IOException exception) {\n-                throw new UncheckedIOException(exception);\n-            }\n-        }\n \n+    private static File getDevServerPortFile(File npmFolder) {\n+        // The thread group is the same in each servlet-container restart\n+        String threadGroup = String\n+                .valueOf(Thread.currentThread().getThreadGroup().hashCode());\n+        String frontendBuildPath = npmFolder.getAbsolutePath();\n+\n+        // #8723: keep webpack alive when Jetty restarts.\n+        // Thread group ID prevents the port file from being picked up after JVM\n+        // restart. Frontend path ensures uniqueness when multiple devmode apps\n+        // are deployed.\n+        String uniqueUid = UUID\n+                .nameUUIDFromBytes((threadGroup + frontendBuildPath)\n+                        .getBytes(StandardCharsets.UTF_8))\n+                .toString();\n+        return new File(System.getProperty(\"java.io.tmpdir\"), uniqueUid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MTIxNg=="}, "originalCommit": {"oid": "2ab807c4b75d054f60cd9eab95fcb3dc62126d93"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc1MDA0OnYy", "diffSide": "RIGHT", "path": "flow-tests/test-jetty-reload/src/main/java/com/vaadin/flow/uitest/ui/WebpackDevServerPortView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoyNzowOFrOG172Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjozNjo1NFrOG192DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwODE5OQ==", "bodyText": "Minor : please avoid one letter variable .\nFix only if there are other things to fix as well...", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r459208199", "createdAt": "2020-07-23T04:27:08Z", "author": {"login": "denis-anisimov"}, "path": "flow-tests/test-jetty-reload/src/main/java/com/vaadin/flow/uitest/ui/WebpackDevServerPortView.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.UUID;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.component.html.Span;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.server.DevModeHandler;\n+import com.vaadin.flow.uitest.servlet.ViewTestLayout;\n+\n+@Route(value = \"com.vaadin.flow.uitest.ui.WebpackDevServerPortView\", layout = ViewTestLayout.class)\n+public class WebpackDevServerPortView extends Div {\n+\n+    public static final String UUID_ID = \"uuid\";\n+    public static final String WEBPACK_PORT_ID = \"webpackPortId\";\n+    public static final String TRIGGER_RELOAD_ID = \"triggerReload\";\n+\n+    private static final UUID uuid = UUID.randomUUID();\n+\n+    public WebpackDevServerPortView() {\n+        // Add a unique number to identify reload\n+        Span unique = new Span(String.valueOf(uuid));\n+        unique.setId(UUID_ID);\n+        add(unique);\n+\n+        DevModeHandler handler = DevModeHandler.getDevModeHandler();\n+        Span portSpan = new Span(String.valueOf(handler.getPort()));\n+        portSpan.setId(WEBPACK_PORT_ID);\n+        add(portSpan);\n+\n+        final NativeButton triggerButton = new NativeButton(\"Trigger reload\",\n+                e -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df31a69e2ae93646f972ffda7460cf803b23ce36"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MDk3Mw==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r459240973", "createdAt": "2020-07-23T06:36:54Z", "author": {"login": "joheriks"}, "path": "flow-tests/test-jetty-reload/src/main/java/com/vaadin/flow/uitest/ui/WebpackDevServerPortView.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.UUID;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.component.html.Span;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.server.DevModeHandler;\n+import com.vaadin.flow.uitest.servlet.ViewTestLayout;\n+\n+@Route(value = \"com.vaadin.flow.uitest.ui.WebpackDevServerPortView\", layout = ViewTestLayout.class)\n+public class WebpackDevServerPortView extends Div {\n+\n+    public static final String UUID_ID = \"uuid\";\n+    public static final String WEBPACK_PORT_ID = \"webpackPortId\";\n+    public static final String TRIGGER_RELOAD_ID = \"triggerReload\";\n+\n+    private static final UUID uuid = UUID.randomUUID();\n+\n+    public WebpackDevServerPortView() {\n+        // Add a unique number to identify reload\n+        Span unique = new Span(String.valueOf(uuid));\n+        unique.setId(UUID_ID);\n+        add(unique);\n+\n+        DevModeHandler handler = DevModeHandler.getDevModeHandler();\n+        Span portSpan = new Span(String.valueOf(handler.getPort()));\n+        portSpan.setId(WEBPACK_PORT_ID);\n+        add(portSpan);\n+\n+        final NativeButton triggerButton = new NativeButton(\"Trigger reload\",\n+                e -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwODE5OQ=="}, "originalCommit": {"oid": "df31a69e2ae93646f972ffda7460cf803b23ce36"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc1MDU4OnYy", "diffSide": "RIGHT", "path": "flow-tests/test-jetty-reload/src/test/java/com/vaadin/flow/uitest/ui/WebpackDevServerPortIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoyNzozN1rOG172XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjozNjo1N1rOG192Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwODI4NA==", "bodyText": "Any reason to have it ?", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r459208284", "createdAt": "2020-07-23T04:27:37Z", "author": {"login": "denis-anisimov"}, "path": "flow-tests/test-jetty-reload/src/test/java/com/vaadin/flow/uitest/ui/WebpackDevServerPortIT.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.TimeoutException;\n+\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+@NotThreadSafe", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df31a69e2ae93646f972ffda7460cf803b23ce36"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MDk5OA==", "bodyText": "At the moment strictly no, since there is only one test. However, I wanted to save future headaches. This test must be isolated from other as it forces Jetty restart and the annotation is easily forgotten if/when another test method is added to the class.", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r459240998", "createdAt": "2020-07-23T06:36:57Z", "author": {"login": "joheriks"}, "path": "flow-tests/test-jetty-reload/src/test/java/com/vaadin/flow/uitest/ui/WebpackDevServerPortIT.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.TimeoutException;\n+\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+@NotThreadSafe", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwODI4NA=="}, "originalCommit": {"oid": "df31a69e2ae93646f972ffda7460cf803b23ce36"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc2MTQyOnYy", "diffSide": "RIGHT", "path": "flow-tests/test-jetty-reload/src/test/java/com/vaadin/flow/uitest/ui/WebpackDevServerPortIT.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDozNTozNFrOG178bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoyODoxN1rOG2A5zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwOTgzOQ==", "bodyText": "10 is a magic constant.\nI would perhaps use waitUntil with some hardcoded big timeout.\nwaitUntil is effectively doing the same: run the condition until it becomes true over and over again.\nSo you may just put getDriver().navigate().refresh(); and return !initialUUID.equals( findElement(By.id(WebpackDevServerPortView.UUID_ID)) .getText() as the expected condition impl.\nAlso add a second parameter as a timeout.\nThat will allow to avoid: magic 10 constant, cycle, reconnected flag, catch an exception.", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r459209839", "createdAt": "2020-07-23T04:35:34Z", "author": {"login": "denis-anisimov"}, "path": "flow-tests/test-jetty-reload/src/test/java/com/vaadin/flow/uitest/ui/WebpackDevServerPortIT.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.TimeoutException;\n+\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+@NotThreadSafe\n+public class WebpackDevServerPortIT extends ChromeBrowserTest {\n+\n+    @Test\n+    public void webpackDevServerPortShouldBeReusedOnReload() {\n+        open();\n+\n+        String initialUUID = findElement(\n+                By.id(WebpackDevServerPortView.UUID_ID)).getText();\n+        Assert.assertEquals(36, initialUUID.length());\n+\n+        String initialPort = findElement(\n+                By.id(WebpackDevServerPortView.WEBPACK_PORT_ID)).getText();\n+        Assert.assertTrue(NumberUtils.isDigits(initialPort));\n+\n+        // trigger jetty reload\n+        findElement(By.id(WebpackDevServerPortView.TRIGGER_RELOAD_ID)).click();\n+\n+        // keep refreshing until page comes back (the UUID has changed)\n+        boolean reconnected = false;\n+        for (int i = 0; i < 10; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df31a69e2ae93646f972ffda7460cf803b23ce36"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MTAxNA==", "bodyText": "waitUntil checks the condition repeatedly but it doesn't refresh the page. So a single waitUntil would need to rely on client side JS repeatedly trying to refresh the page when the connection to the first Jetty is lost (heartbeat missed or session timeout). This is not reliable.\n(Maybe it would work to call driver.navigate().refresh() inside the waitUntil but having a side effect there would be uglier in my opinion).", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r459241014", "createdAt": "2020-07-23T06:36:59Z", "author": {"login": "joheriks"}, "path": "flow-tests/test-jetty-reload/src/test/java/com/vaadin/flow/uitest/ui/WebpackDevServerPortIT.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.TimeoutException;\n+\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+@NotThreadSafe\n+public class WebpackDevServerPortIT extends ChromeBrowserTest {\n+\n+    @Test\n+    public void webpackDevServerPortShouldBeReusedOnReload() {\n+        open();\n+\n+        String initialUUID = findElement(\n+                By.id(WebpackDevServerPortView.UUID_ID)).getText();\n+        Assert.assertEquals(36, initialUUID.length());\n+\n+        String initialPort = findElement(\n+                By.id(WebpackDevServerPortView.WEBPACK_PORT_ID)).getText();\n+        Assert.assertTrue(NumberUtils.isDigits(initialPort));\n+\n+        // trigger jetty reload\n+        findElement(By.id(WebpackDevServerPortView.TRIGGER_RELOAD_ID)).click();\n+\n+        // keep refreshing until page comes back (the UUID has changed)\n+        boolean reconnected = false;\n+        for (int i = 0; i < 10; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwOTgzOQ=="}, "originalCommit": {"oid": "df31a69e2ae93646f972ffda7460cf803b23ce36"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI3MjE0NQ==", "bodyText": "Well, using driver.navigate().refresh() inside waitUntil  looks OK for me but I understand your concern about side effect.\nWhat I still don't like : magic 10 number.\nCould you make it work as a timeout : define a hardcoded timeout and replace for loop with while which checks that the current time of execution is less than the initial time + timeout value.\nAlso would be really good to avoid TimeoutException  : since your are almost duplicating the waitUntil functionality I would just avoid waitUntil at all.\nBut this is optional.", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r459272145", "createdAt": "2020-07-23T07:51:25Z", "author": {"login": "denis-anisimov"}, "path": "flow-tests/test-jetty-reload/src/test/java/com/vaadin/flow/uitest/ui/WebpackDevServerPortIT.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.TimeoutException;\n+\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+@NotThreadSafe\n+public class WebpackDevServerPortIT extends ChromeBrowserTest {\n+\n+    @Test\n+    public void webpackDevServerPortShouldBeReusedOnReload() {\n+        open();\n+\n+        String initialUUID = findElement(\n+                By.id(WebpackDevServerPortView.UUID_ID)).getText();\n+        Assert.assertEquals(36, initialUUID.length());\n+\n+        String initialPort = findElement(\n+                By.id(WebpackDevServerPortView.WEBPACK_PORT_ID)).getText();\n+        Assert.assertTrue(NumberUtils.isDigits(initialPort));\n+\n+        // trigger jetty reload\n+        findElement(By.id(WebpackDevServerPortView.TRIGGER_RELOAD_ID)).click();\n+\n+        // keep refreshing until page comes back (the UUID has changed)\n+        boolean reconnected = false;\n+        for (int i = 0; i < 10; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwOTgzOQ=="}, "originalCommit": {"oid": "df31a69e2ae93646f972ffda7460cf803b23ce36"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI3MzUxNg==", "bodyText": "", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r459273516", "createdAt": "2020-07-23T07:54:12Z", "author": {"login": "denis-anisimov"}, "path": "flow-tests/test-jetty-reload/src/test/java/com/vaadin/flow/uitest/ui/WebpackDevServerPortIT.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.TimeoutException;\n+\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+@NotThreadSafe\n+public class WebpackDevServerPortIT extends ChromeBrowserTest {\n+\n+    @Test\n+    public void webpackDevServerPortShouldBeReusedOnReload() {\n+        open();\n+\n+        String initialUUID = findElement(\n+                By.id(WebpackDevServerPortView.UUID_ID)).getText();\n+        Assert.assertEquals(36, initialUUID.length());\n+\n+        String initialPort = findElement(\n+                By.id(WebpackDevServerPortView.WEBPACK_PORT_ID)).getText();\n+        Assert.assertTrue(NumberUtils.isDigits(initialPort));\n+\n+        // trigger jetty reload\n+        findElement(By.id(WebpackDevServerPortView.TRIGGER_RELOAD_ID)).click();\n+\n+        // keep refreshing until page comes back (the UUID has changed)\n+        boolean reconnected = false;\n+        for (int i = 0; i < 10; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwOTgzOQ=="}, "originalCommit": {"oid": "df31a69e2ae93646f972ffda7460cf803b23ce36"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5MTA4NQ==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8739#discussion_r459291085", "createdAt": "2020-07-23T08:28:17Z", "author": {"login": "joheriks"}, "path": "flow-tests/test-jetty-reload/src/test/java/com/vaadin/flow/uitest/ui/WebpackDevServerPortIT.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.TimeoutException;\n+\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+@NotThreadSafe\n+public class WebpackDevServerPortIT extends ChromeBrowserTest {\n+\n+    @Test\n+    public void webpackDevServerPortShouldBeReusedOnReload() {\n+        open();\n+\n+        String initialUUID = findElement(\n+                By.id(WebpackDevServerPortView.UUID_ID)).getText();\n+        Assert.assertEquals(36, initialUUID.length());\n+\n+        String initialPort = findElement(\n+                By.id(WebpackDevServerPortView.WEBPACK_PORT_ID)).getText();\n+        Assert.assertTrue(NumberUtils.isDigits(initialPort));\n+\n+        // trigger jetty reload\n+        findElement(By.id(WebpackDevServerPortView.TRIGGER_RELOAD_ID)).click();\n+\n+        // keep refreshing until page comes back (the UUID has changed)\n+        boolean reconnected = false;\n+        for (int i = 0; i < 10; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwOTgzOQ=="}, "originalCommit": {"oid": "df31a69e2ae93646f972ffda7460cf803b23ce36"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3372, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}