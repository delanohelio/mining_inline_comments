{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNDU2NDY3", "number": 9708, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjo0MDowNFrOFHxwKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDozMToyNlrOFIupPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjk5NDk5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjo0MDowNFrOIJW78A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo1MToxNlrOIKZMCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4Mzg4OA==", "bodyText": "Make this a function an add JSDocs for it.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r546683888", "createdAt": "2020-12-21T12:40:04Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,12 +50,16 @@ class ApplicationThemePlugin {\n   apply(compiler) {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n-    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n+    const handleThemesHook = () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9398a069a54ad52e7c5369258d1cf76422d0c98"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyOTYyMA==", "bodyText": "Perhaps even move this out to its own file so it's easier to reuse.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547129620", "createdAt": "2020-12-22T08:11:48Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,12 +50,16 @@ class ApplicationThemePlugin {\n   apply(compiler) {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n-    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n+    const handleThemesHook = () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4Mzg4OA=="}, "originalCommit": {"oid": "d9398a069a54ad52e7c5369258d1cf76422d0c98"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2OTM1Mw==", "bodyText": "Moved to it's own file", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547769353", "createdAt": "2020-12-23T07:51:16Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,12 +50,16 @@ class ApplicationThemePlugin {\n   apply(compiler) {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n-    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n+    const handleThemesHook = () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4Mzg4OA=="}, "originalCommit": {"oid": "d9398a069a54ad52e7c5369258d1cf76422d0c98"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjk5NTE3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjo0MDowN1rOIJW8EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo1MTo0MVrOIKZNbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4MzkyMQ==", "bodyText": "Why move this?", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r546683921", "createdAt": "2020-12-21T12:40:07Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,12 +50,16 @@ class ApplicationThemePlugin {\n   apply(compiler) {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n-    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n+    const handleThemesHook = () => {\n       const generatedThemeFile = path.resolve(this.options.themeResourceFolder, \"theme-generated.js\");\n       if (fs.existsSync(generatedThemeFile)) {\n+        // matches theme folder name in 'themes/my-theme/my-theme.generated.js'\n+        const nameRegex = /themes\\/(.*)\\/\\1.generated.js/g;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9398a069a54ad52e7c5369258d1cf76422d0c98"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwMjUxMA==", "bodyText": "Because nameRegex.exec return null on a second run, so I need to reset it. https://stackoverflow.com/questions/4724701/regexp-exec-returns-null-sporadically", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r546702510", "createdAt": "2020-12-21T13:22:41Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,12 +50,16 @@ class ApplicationThemePlugin {\n   apply(compiler) {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n-    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n+    const handleThemesHook = () => {\n       const generatedThemeFile = path.resolve(this.options.themeResourceFolder, \"theme-generated.js\");\n       if (fs.existsSync(generatedThemeFile)) {\n+        // matches theme folder name in 'themes/my-theme/my-theme.generated.js'\n+        const nameRegex = /themes\\/(.*)\\/\\1.generated.js/g;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4MzkyMQ=="}, "originalCommit": {"oid": "d9398a069a54ad52e7c5369258d1cf76422d0c98"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NzE4MA==", "bodyText": "That's because of the global status just remove the g from the end.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547067180", "createdAt": "2020-12-22T04:53:52Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,12 +50,16 @@ class ApplicationThemePlugin {\n   apply(compiler) {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n-    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n+    const handleThemesHook = () => {\n       const generatedThemeFile = path.resolve(this.options.themeResourceFolder, \"theme-generated.js\");\n       if (fs.existsSync(generatedThemeFile)) {\n+        // matches theme folder name in 'themes/my-theme/my-theme.generated.js'\n+        const nameRegex = /themes\\/(.*)\\/\\1.generated.js/g;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4MzkyMQ=="}, "originalCommit": {"oid": "d9398a069a54ad52e7c5369258d1cf76422d0c98"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2OTcwOQ==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547769709", "createdAt": "2020-12-23T07:51:41Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,12 +50,16 @@ class ApplicationThemePlugin {\n   apply(compiler) {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n-    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n+    const handleThemesHook = () => {\n       const generatedThemeFile = path.resolve(this.options.themeResourceFolder, \"theme-generated.js\");\n       if (fs.existsSync(generatedThemeFile)) {\n+        // matches theme folder name in 'themes/my-theme/my-theme.generated.js'\n+        const nameRegex = /themes\\/(.*)\\/\\1.generated.js/g;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4MzkyMQ=="}, "originalCommit": {"oid": "d9398a069a54ad52e7c5369258d1cf76422d0c98"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzAyNjQ5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjo1MDo1NlrOIJXOAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo1MjoxN1rOIKZPSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4ODUxMw==", "bodyText": "This should be its own plugin as now this one plugin has 3 plugins inside it which is not even reflected in any comments.\nAnything extra plugins would need from this plugin should be exported here and they should call that not be inside this plugin.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r546688513", "createdAt": "2020-12-21T12:50:56Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -90,6 +93,36 @@ class ApplicationThemePlugin {\n         logger.debug(\"Skipping Vaadin application theme handling.\");\n         logger.trace(\"Most likely no @Theme annotation for application or only themeClass used.\");\n       }\n+    };\n+\n+    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", handleThemesHook);\n+\n+    // Adds the active application theme folder for webpack watching\n+    compiler.plugin(\"after-compile\", function (compilation, callback) {\n+      if (themeName) {\n+        compilation.contextDependencies.add('frontend/themes/' + themeName);\n+      }\n+      callback();\n+    });\n+\n+    // Adds a hook for theme files change event\n+    compiler.plugin(\"watch-run\", (compilation, callback) => {\n+      const changedFilesMap = compiler.watchFileSystem.watcher.mtimes;\n+      if (changedFilesMap !== {}) {\n+        let themeGeneratedFileChanged = false;\n+        const changedFiles = Object.keys(changedFilesMap)\n+            .map(file => `${file}`)\n+            .forEach(file => {\n+              if (file.indexOf(themeGeneratedFileName) > -1) {\n+                themeGeneratedFileChanged = true;\n+              }\n+            });\n+        logger.debug(\"Detected changes in the following files \" + changedFiles);\n+        if (!themeGeneratedFileChanged) {\n+          handleThemesHook();\n+        }\n+      }\n+      callback();\n     });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9398a069a54ad52e7c5369258d1cf76422d0c98"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3MDE4Nw==", "bodyText": "Done, moved to its own plugin", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547770187", "createdAt": "2020-12-23T07:52:17Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -90,6 +93,36 @@ class ApplicationThemePlugin {\n         logger.debug(\"Skipping Vaadin application theme handling.\");\n         logger.trace(\"Most likely no @Theme annotation for application or only themeClass used.\");\n       }\n+    };\n+\n+    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", handleThemesHook);\n+\n+    // Adds the active application theme folder for webpack watching\n+    compiler.plugin(\"after-compile\", function (compilation, callback) {\n+      if (themeName) {\n+        compilation.contextDependencies.add('frontend/themes/' + themeName);\n+      }\n+      callback();\n+    });\n+\n+    // Adds a hook for theme files change event\n+    compiler.plugin(\"watch-run\", (compilation, callback) => {\n+      const changedFilesMap = compiler.watchFileSystem.watcher.mtimes;\n+      if (changedFilesMap !== {}) {\n+        let themeGeneratedFileChanged = false;\n+        const changedFiles = Object.keys(changedFilesMap)\n+            .map(file => `${file}`)\n+            .forEach(file => {\n+              if (file.indexOf(themeGeneratedFileName) > -1) {\n+                themeGeneratedFileChanged = true;\n+              }\n+            });\n+        logger.debug(\"Detected changes in the following files \" + changedFiles);\n+        if (!themeGeneratedFileChanged) {\n+          handleThemesHook();\n+        }\n+      }\n+      callback();\n     });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4ODUxMw=="}, "originalCommit": {"oid": "d9398a069a54ad52e7c5369258d1cf76422d0c98"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzAyNzkzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjo1MToyNlrOIJXO0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo1NDoyNlrOIKZWUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4ODcyMA==", "bodyText": "js should have indentation of 2 not 4", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r546688720", "createdAt": "2020-12-21T12:51:26Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -81,7 +84,7 @@ class ApplicationThemePlugin {\n         if (fs.existsSync(this.options.themeResourceFolder)) {\n           if (themeFound && fs.existsSync(path.resolve(this.options.themeResourceFolder, themeName))) {\n             throw new Error(\"Theme '\" + themeName + \"'should not exist inside a jar and in the project at the same time\\n\" +\n-              \"Extending another theme is possible by adding { \\\"parent\\\": \\\"my-parent-theme\\\" } entry to the theme.json file inside your theme folder.\");\n+                \"Extending another theme is possible by adding { \\\"parent\\\": \\\"my-parent-theme\\\" } entry to the theme.json file inside your theme folder.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9398a069a54ad52e7c5369258d1cf76422d0c98"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3MTk4Nw==", "bodyText": "Seems there are still some wrong indentation after moving to separate file. Will double check and fix", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547771987", "createdAt": "2020-12-23T07:54:26Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -81,7 +84,7 @@ class ApplicationThemePlugin {\n         if (fs.existsSync(this.options.themeResourceFolder)) {\n           if (themeFound && fs.existsSync(path.resolve(this.options.themeResourceFolder, themeName))) {\n             throw new Error(\"Theme '\" + themeName + \"'should not exist inside a jar and in the project at the same time\\n\" +\n-              \"Extending another theme is possible by adding { \\\"parent\\\": \\\"my-parent-theme\\\" } entry to the theme.json file inside your theme folder.\");\n+                \"Extending another theme is possible by adding { \\\"parent\\\": \\\"my-parent-theme\\\" } entry to the theme.json file inside your theme folder.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4ODcyMA=="}, "originalCommit": {"oid": "d9398a069a54ad52e7c5369258d1cf76422d0c98"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzAyODI1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjo1MTozMVrOIJXO-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjo1MTozMVrOIJXO-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4ODc2MA==", "bodyText": "js should have indentation of 2 not 4", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r546688760", "createdAt": "2020-12-21T12:51:31Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -70,7 +73,7 @@ class ApplicationThemePlugin {\n             if (handled) {\n               if(themeFound) {\n                 throw new Error(\"Found theme files in '\" + themeProjectFolder + \"' and '\"\n-                  + themeFound + \"'. Theme should only be available in one folder\");\n+                    + themeFound + \"'. Theme should only be available in one folder\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9398a069a54ad52e7c5369258d1cf76422d0c98"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzA5NDI2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMzoxNDoxOVrOIJX1NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo1NDo0NVrOIKZXbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY5ODU0OQ==", "bodyText": "This plugin should only be set in devMode", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r546698549", "createdAt": "2020-12-21T13:14:19Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -90,6 +93,36 @@ class ApplicationThemePlugin {\n         logger.debug(\"Skipping Vaadin application theme handling.\");\n         logger.trace(\"Most likely no @Theme annotation for application or only themeClass used.\");\n       }\n+    };\n+\n+    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", handleThemesHook);\n+\n+    // Adds the active application theme folder for webpack watching\n+    compiler.plugin(\"after-compile\", function (compilation, callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd1eb50227de52b11bb9e194e02960242d51435"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyOTM1NQ==", "bodyText": "For this there also exists npmjs.com/package/extra-watch-webpack-plugin", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547129355", "createdAt": "2020-12-22T08:11:07Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -90,6 +93,36 @@ class ApplicationThemePlugin {\n         logger.debug(\"Skipping Vaadin application theme handling.\");\n         logger.trace(\"Most likely no @Theme annotation for application or only themeClass used.\");\n       }\n+    };\n+\n+    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", handleThemesHook);\n+\n+    // Adds the active application theme folder for webpack watching\n+    compiler.plugin(\"after-compile\", function (compilation, callback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY5ODU0OQ=="}, "originalCommit": {"oid": "cbd1eb50227de52b11bb9e194e02960242d51435"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3MjI2OQ==", "bodyText": "extra-watch-webpack-plugin is now used", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547772269", "createdAt": "2020-12-23T07:54:45Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -90,6 +93,36 @@ class ApplicationThemePlugin {\n         logger.debug(\"Skipping Vaadin application theme handling.\");\n         logger.trace(\"Most likely no @Theme annotation for application or only themeClass used.\");\n       }\n+    };\n+\n+    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", handleThemesHook);\n+\n+    // Adds the active application theme folder for webpack watching\n+    compiler.plugin(\"after-compile\", function (compilation, callback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY5ODU0OQ=="}, "originalCommit": {"oid": "cbd1eb50227de52b11bb9e194e02960242d51435"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzA5NTI4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMzoxNDozOVrOIJX1xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo1NTowNVrOIKZYzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY5ODY5Mw==", "bodyText": "Also this plugin should only run in dev mode.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r546698693", "createdAt": "2020-12-21T13:14:39Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -90,6 +93,36 @@ class ApplicationThemePlugin {\n         logger.debug(\"Skipping Vaadin application theme handling.\");\n         logger.trace(\"Most likely no @Theme annotation for application or only themeClass used.\");\n       }\n+    };\n+\n+    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", handleThemesHook);\n+\n+    // Adds the active application theme folder for webpack watching\n+    compiler.plugin(\"after-compile\", function (compilation, callback) {\n+      if (themeName) {\n+        compilation.contextDependencies.add('frontend/themes/' + themeName);\n+      }\n+      callback();\n+    });\n+\n+    // Adds a hook for theme files change event\n+    compiler.plugin(\"watch-run\", (compilation, callback) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd1eb50227de52b11bb9e194e02960242d51435"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3MjYyMA==", "bodyText": "done", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547772620", "createdAt": "2020-12-23T07:55:05Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -90,6 +93,36 @@ class ApplicationThemePlugin {\n         logger.debug(\"Skipping Vaadin application theme handling.\");\n         logger.trace(\"Most likely no @Theme annotation for application or only themeClass used.\");\n       }\n+    };\n+\n+    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", handleThemesHook);\n+\n+    // Adds the active application theme folder for webpack watching\n+    compiler.plugin(\"after-compile\", function (compilation, callback) {\n+      if (themeName) {\n+        compilation.contextDependencies.add('frontend/themes/' + themeName);\n+      }\n+      callback();\n+    });\n+\n+    // Adds a hook for theme files change event\n+    compiler.plugin(\"watch-run\", (compilation, callback) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY5ODY5Mw=="}, "originalCommit": {"oid": "cbd1eb50227de52b11bb9e194e02960242d51435"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzEwNzkxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMzoxODoyMFrOIJX9Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMzozMzo0N1rOIJYZ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwMDU0Ng==", "bodyText": "Strange that it doesn't parse empty string.\nA cleaner solution is JSON.parse(fs.readFileSync(themePropertyFile)||'{}')", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r546700546", "createdAt": "2020-12-21T13:18:20Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -127,5 +160,9 @@ function getThemeProperties(themeFolder) {\n   if (!fs.existsSync(themePropertyFile)) {\n     return {};\n   }\n-  return JSON.parse(fs.readFileSync(themePropertyFile));\n+  const themePropertyFileAsString = fs.readFileSync(themePropertyFile);\n+  if (themePropertyFileAsString.length === 0) {\n+    return {};\n+  }\n+  return JSON.parse(themePropertyFileAsString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd1eb50227de52b11bb9e194e02960242d51435"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwNzkzNQ==", "bodyText": "Yep, this looks more clean, but the \"truthy\" value check of fs.readFileSync(themePropertyFile) does not work for some reason. It still gives:\nreturn JSON.parse(fs.readFileSync(themePropertyFile)||'{}');\n              ^\nSyntaxError: Unexpected end of JSON input", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r546707935", "createdAt": "2020-12-21T13:33:47Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -127,5 +160,9 @@ function getThemeProperties(themeFolder) {\n   if (!fs.existsSync(themePropertyFile)) {\n     return {};\n   }\n-  return JSON.parse(fs.readFileSync(themePropertyFile));\n+  const themePropertyFileAsString = fs.readFileSync(themePropertyFile);\n+  if (themePropertyFileAsString.length === 0) {\n+    return {};\n+  }\n+  return JSON.parse(themePropertyFileAsString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwMDU0Ng=="}, "originalCommit": {"oid": "cbd1eb50227de52b11bb9e194e02960242d51435"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDM1MzgxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDowMToyNlrOIJ1ZMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODoxMDo1NFrOIKaNcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4Mjg5Nw==", "bodyText": "This might be wrong as the folder might also be under src/... though editing anything there would restart the server due to changes in classpath.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547182897", "createdAt": "2020-12-22T10:01:26Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,53 +53,90 @@ class ApplicationThemePlugin {\n   apply(compiler) {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n-    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n-      const generatedThemeFile = path.resolve(this.options.themeResourceFolder, \"theme-generated.js\");\n-      if (fs.existsSync(generatedThemeFile)) {\n+    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => generateTheme(this.options));\n \n-        // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n-        const themeName = nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n-        if (!themeName) {\n-          throw new Error(\"Couldn't parse theme name from '\" + generatedThemeFile + \"'.\");\n-        }\n+    // Adds the active application theme folder for webpack watching\n+    compiler.plugin(\"after-compile\", function (compilation, callback) {\n+      if (themeName) {\n+        compilation.contextDependencies.add('frontend/themes/' + themeName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ee7d2edf8ad058a5e876835e40974bec1bdd990"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3OTE4Mw==", "bodyText": "Do you mean these folders src/main/resources/static and src/main/resources/META-INF/resources/themes whose can contains theme resources either? Well, if the live reload agent (or jetty, or webpack) has already them to be watched, then no need to add them. I will double check with starter project, if restart happens upon adding a new files there", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547779183", "createdAt": "2020-12-23T08:02:47Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,53 +53,90 @@ class ApplicationThemePlugin {\n   apply(compiler) {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n-    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n-      const generatedThemeFile = path.resolve(this.options.themeResourceFolder, \"theme-generated.js\");\n-      if (fs.existsSync(generatedThemeFile)) {\n+    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => generateTheme(this.options));\n \n-        // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n-        const themeName = nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n-        if (!themeName) {\n-          throw new Error(\"Couldn't parse theme name from '\" + generatedThemeFile + \"'.\");\n-        }\n+    // Adds the active application theme folder for webpack watching\n+    compiler.plugin(\"after-compile\", function (compilation, callback) {\n+      if (themeName) {\n+        compilation.contextDependencies.add('frontend/themes/' + themeName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4Mjg5Nw=="}, "originalCommit": {"oid": "6ee7d2edf8ad058a5e876835e40974bec1bdd990"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc4NjA5OA==", "bodyText": "Those yes, but I don't know if we need to support those with this.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547786098", "createdAt": "2020-12-23T08:10:54Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -51,53 +53,90 @@ class ApplicationThemePlugin {\n   apply(compiler) {\n     logger = compiler.getInfrastructureLogger(\"ApplicationThemePlugin\");\n \n-    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => {\n-      const generatedThemeFile = path.resolve(this.options.themeResourceFolder, \"theme-generated.js\");\n-      if (fs.existsSync(generatedThemeFile)) {\n+    compiler.hooks.afterEnvironment.tap(\"ApplicationThemePlugin\", () => generateTheme(this.options));\n \n-        // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n-        const themeName = nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n-        if (!themeName) {\n-          throw new Error(\"Couldn't parse theme name from '\" + generatedThemeFile + \"'.\");\n-        }\n+    // Adds the active application theme folder for webpack watching\n+    compiler.plugin(\"after-compile\", function (compilation, callback) {\n+      if (themeName) {\n+        compilation.contextDependencies.add('frontend/themes/' + themeName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4Mjg5Nw=="}, "originalCommit": {"oid": "6ee7d2edf8ad058a5e876835e40974bec1bdd990"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzYxNTAwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/theme-handle.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNTo1MDozMFrOIKTiNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNTo1MDozMFrOIKTiNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY3NjcyNQ==", "bodyText": "This whole set should be in the extractThemeName so it checks for exists and throws for exception in all cases.\nShould take in the themeResourceFolder\nSo it would return empty or themeName in case it can't parse the name then throw exception.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547676725", "createdAt": "2020-12-23T05:50:30Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/theme-handle.js", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+/**\n+ * This file contains functions for look up and handle the theme resources\n+ * for application theme plugin.\n+ */\n+const fs = require('fs');\n+const path = require('path');\n+const generateThemeFile = require('./theme-generator');\n+const { copyStaticAssets } = require('./theme-copy');\n+\n+// matches theme folder name in 'themes/my-theme/my-theme.generated.js'\n+const nameRegex = /themes\\/(.*)\\/\\1.generated.js/;\n+\n+/**\n+ * Looks up for a theme resources in a current project and in jar dependencies,\n+ * copies the found resources and generates/updates meta data for webpack\n+ * compilation.\n+ */\n+function generateTheme(options, logger) {\n+  const generatedThemeFile = getResolvedGeneratedThemeFile(options);\n+  if (fs.existsSync(generatedThemeFile)) {\n+    const themeName = extractThemeName(generatedThemeFile);\n+\n+    if (!themeName) {\n+      throw new Error(\"Couldn't parse theme name from '\" + generatedThemeFile + \"'.\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b5a1c5d8e004050b54e51c597895d3edfefbc3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzY0MTI0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/theme-handle.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNTo1NjoxMlrOIKTzaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNTo1NjoxMlrOIKTzaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4MTEyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function getResolvedGeneratedThemeFile(options) {\n          \n          \n            \n              return path.resolve(options.themeResourceFolder, \"theme-generated.js\");\n          \n          \n            \n            }\n          \n          \n            \n            function getResolvedGeneratedThemeFile(themeResourceFolder) {\n          \n          \n            \n              return path.resolve(themeResourceFolder, \"theme-generated.js\");\n          \n          \n            \n            }\n          \n      \n    \n    \n  \n\nShould just take what it requires instead of all options.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547681129", "createdAt": "2020-12-23T05:56:12Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/theme-handle.js", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+/**\n+ * This file contains functions for look up and handle the theme resources\n+ * for application theme plugin.\n+ */\n+const fs = require('fs');\n+const path = require('path');\n+const generateThemeFile = require('./theme-generator');\n+const { copyStaticAssets } = require('./theme-copy');\n+\n+// matches theme folder name in 'themes/my-theme/my-theme.generated.js'\n+const nameRegex = /themes\\/(.*)\\/\\1.generated.js/;\n+\n+/**\n+ * Looks up for a theme resources in a current project and in jar dependencies,\n+ * copies the found resources and generates/updates meta data for webpack\n+ * compilation.\n+ */\n+function generateTheme(options, logger) {\n+  const generatedThemeFile = getResolvedGeneratedThemeFile(options);\n+  if (fs.existsSync(generatedThemeFile)) {\n+    const themeName = extractThemeName(generatedThemeFile);\n+\n+    if (!themeName) {\n+      throw new Error(\"Couldn't parse theme name from '\" + generatedThemeFile + \"'.\");\n+    }\n+\n+    let themeFound = false;\n+    for (let i = 0; i < options.themeProjectFolders.length; i++) {\n+      const themeProjectFolder = options.themeProjectFolders[i];\n+      if (fs.existsSync(themeProjectFolder)) {\n+        logger.info(\"Searching themes folder \", themeProjectFolder, \" for theme \", themeName);\n+        const handled = handleThemes(themeName, themeProjectFolder, options.projectStaticAssetsOutputFolder, logger);\n+        if (handled) {\n+          if (themeFound) {\n+            throw new Error(\"Found theme files in '\" + themeProjectFolder + \"' and '\"\n+                + themeFound + \"'. Theme should only be available in one folder\");\n+          }\n+          logger.info(\"Found theme files from '\", themeProjectFolder, \"'\");\n+          themeFound = themeProjectFolder;\n+        }\n+      }\n+    }\n+\n+    if (fs.existsSync(options.themeResourceFolder)) {\n+      if (themeFound && fs.existsSync(path.resolve(options.themeResourceFolder, themeName))) {\n+        throw new Error(\"Theme '\" + themeName + \"'should not exist inside a jar and in the project at the same time\\n\" +\n+            \"Extending another theme is possible by adding { \\\"parent\\\": \\\"my-parent-theme\\\" } entry to the theme.json file inside your theme folder.\");\n+      }\n+      logger.debug(\"Searching theme jar resource folder \", options.themeResourceFolder, \" for theme \", themeName);\n+      handleThemes(themeName, options.themeResourceFolder, options.projectStaticAssetsOutputFolder, logger);\n+    }\n+  } else {\n+    logger.debug(\"Skipping Vaadin application theme handling.\");\n+    logger.trace(\"Most likely no @Theme annotation for application or only themeClass used.\");\n+  }\n+}\n+\n+/**\n+ * Copies static resources for theme and generates/writes the\n+ * [theme-name].generated.js for webpack to handle.\n+ *\n+ * @param {string} themeName name of theme to handle\n+ * @param {string} themesFolder folder containing application theme folders\n+ * @param {string} projectStaticAssetsOutputFolder folder to output files to\n+ * @param {object} logger plugin logger instance\n+ *\n+ * @returns true if theme was found else false.\n+ */\n+function handleThemes(themeName, themesFolder, projectStaticAssetsOutputFolder, logger) {\n+  const themeFolder = path.resolve(themesFolder, themeName);\n+  if (fs.existsSync(themeFolder)) {\n+    logger.debug(\"Found theme \", themeName, \" in folder \", themeFolder);\n+\n+    const themeProperties = getThemeProperties(themeFolder);\n+\n+    copyStaticAssets(themeName, themeProperties, projectStaticAssetsOutputFolder, logger);\n+\n+    const themeFile = generateThemeFile(themeFolder, themeName, themeProperties);\n+\n+    fs.writeFileSync(path.resolve(themeFolder, getThemeGeneratedFileName(themeName)), themeFile);\n+    return true;\n+  }\n+  return false;\n+}\n+\n+function getThemeProperties(themeFolder) {\n+  const themePropertyFile = path.resolve(themeFolder, 'theme.json');\n+  if (!fs.existsSync(themePropertyFile)) {\n+    return {};\n+  }\n+  const themePropertyFileAsString = fs.readFileSync(themePropertyFile);\n+  if (themePropertyFileAsString.length === 0) {\n+    return {};\n+  }\n+  return JSON.parse(themePropertyFileAsString);\n+}\n+\n+/**\n+ * Generates path to theme generated file with theme meta data\n+ * @param options object containing theme resource folder\n+ * @returns path to theme generated file\n+ */\n+function getResolvedGeneratedThemeFile(options) {\n+  return path.resolve(options.themeResourceFolder, \"theme-generated.js\");\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b5a1c5d8e004050b54e51c597895d3edfefbc3"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzY2MjA1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjowMDo0OFrOIKUBMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjowMDo0OFrOIKUBMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY4NDY1Ng==", "bodyText": "These can and probably should be called on request so that getThemeName calls extractThemeName and getThemeCallback just creates the lambda when requested perhaps even using the callers logger instead of the appThemeLogger.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547684656", "createdAt": "2020-12-23T06:00:48Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -48,127 +42,28 @@ class ApplicationThemePlugin {\n     if (!this.options.themeProjectFolders) {\n       throw new Error(\"Missing themeProjectFolders path array\");\n     }\n+\n+    const generatedThemeFile = getResolvedGeneratedThemeFile(this.options);\n+    themeName = extractThemeName(generatedThemeFile);\n+    generateThemeCallback = (logger) => generateTheme(this.options, logger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b5a1c5d8e004050b54e51c597895d3edfefbc3"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mzc0ODY1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/theme-live-reload-plugin/theme-live-reload-plugin.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjoyMDozM1rOIKU6pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjoyMDozM1rOIKU6pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY5OTM2NQ==", "bodyText": "Missing new line.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547699365", "createdAt": "2020-12-23T06:20:33Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/theme-live-reload-plugin/theme-live-reload-plugin.js", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+let logger;\n+\n+/**\n+ * This plugin handles adding/deleting theme resources events and triggers\n+ * theme meta data re-generation and application theme update on the fly.\n+ */\n+class ThemeLiveReloadPlugin {\n+\n+    /**\n+     * Create a new instance of ThemeLiveReloadPlugin\n+     * @param themeNameGetter getter function for current theme name\n+     * @param generateThemeCallbackGetter getter function for generate theme\n+     * callback\n+     */\n+    constructor(themeNameGetter, generateThemeCallbackGetter) {\n+      if (!themeNameGetter) {\n+        throw new Error(\"Missing theme name\");\n+      }\n+      this.themeNameGetter = themeNameGetter;\n+      this.generateThemeCallbackGetter = generateThemeCallbackGetter;\n+    }\n+\n+    apply(compiler) {\n+      // Adds a hook for theme files change event\n+      compiler.plugin(\"watch-run\", (compilation, callback) => {\n+        logger = compiler.getInfrastructureLogger(\"ThemeLiveReloadPlugin\");\n+        const changedFilesMap = compiler.watchFileSystem.watcher.mtimes;\n+        if (changedFilesMap !== {}) {\n+          let themeGeneratedFileChanged = false;\n+          const changedFilesPaths = Object.keys(changedFilesMap);\n+          logger.debug(\"Detected changes in the following files \" + changedFilesPaths);\n+          changedFilesPaths.map(file => `${file}`).forEach(file => {\n+              if (file.indexOf(this.themeNameGetter() + '.generated.js') > -1) {\n+                themeGeneratedFileChanged = true;\n+              }\n+            });\n+          if (!themeGeneratedFileChanged) {\n+            this.generateThemeCallbackGetter()(logger);\n+          }\n+        }\n+        callback();\n+      });\n+    }\n+}\n+\n+module.exports = ThemeLiveReloadPlugin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b5a1c5d8e004050b54e51c597895d3edfefbc3"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mzc1MzM1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/theme-live-reload-plugin/theme-live-reload-plugin.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjoyMTozNFrOIKU95A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjoyMTozNFrOIKU95A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwMDE5Ng==", "bodyText": "insignificant: As the logger is not used outside of the watchRun hook then it doesn't need to be stored outside.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547700196", "createdAt": "2020-12-23T06:21:34Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/theme-live-reload-plugin/theme-live-reload-plugin.js", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+let logger;\n+\n+/**\n+ * This plugin handles adding/deleting theme resources events and triggers\n+ * theme meta data re-generation and application theme update on the fly.\n+ */\n+class ThemeLiveReloadPlugin {\n+\n+    /**\n+     * Create a new instance of ThemeLiveReloadPlugin\n+     * @param themeNameGetter getter function for current theme name\n+     * @param generateThemeCallbackGetter getter function for generate theme\n+     * callback\n+     */\n+    constructor(themeNameGetter, generateThemeCallbackGetter) {\n+      if (!themeNameGetter) {\n+        throw new Error(\"Missing theme name\");\n+      }\n+      this.themeNameGetter = themeNameGetter;\n+      this.generateThemeCallbackGetter = generateThemeCallbackGetter;\n+    }\n+\n+    apply(compiler) {\n+      // Adds a hook for theme files change event\n+      compiler.plugin(\"watch-run\", (compilation, callback) => {\n+        logger = compiler.getInfrastructureLogger(\"ThemeLiveReloadPlugin\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b5a1c5d8e004050b54e51c597895d3edfefbc3"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mzc2ODM3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/theme-live-reload-plugin/theme-live-reload-plugin.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjoyNTowOFrOIKVHVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjoyNTowOFrOIKVHVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwMjYxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  compiler.plugin(\"watch-run\", (compilation, callback) => {\n          \n          \n            \n                  compiler.hooks.watchRun.tapAsync(\"ThemeLiveReloadPlugin\", (compilation, callback) => {", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547702614", "createdAt": "2020-12-23T06:25:08Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/theme-live-reload-plugin/theme-live-reload-plugin.js", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+let logger;\n+\n+/**\n+ * This plugin handles adding/deleting theme resources events and triggers\n+ * theme meta data re-generation and application theme update on the fly.\n+ */\n+class ThemeLiveReloadPlugin {\n+\n+    /**\n+     * Create a new instance of ThemeLiveReloadPlugin\n+     * @param themeNameGetter getter function for current theme name\n+     * @param generateThemeCallbackGetter getter function for generate theme\n+     * callback\n+     */\n+    constructor(themeNameGetter, generateThemeCallbackGetter) {\n+      if (!themeNameGetter) {\n+        throw new Error(\"Missing theme name\");\n+      }\n+      this.themeNameGetter = themeNameGetter;\n+      this.generateThemeCallbackGetter = generateThemeCallbackGetter;\n+    }\n+\n+    apply(compiler) {\n+      // Adds a hook for theme files change event\n+      compiler.plugin(\"watch-run\", (compilation, callback) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b5a1c5d8e004050b54e51c597895d3edfefbc3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDI4Mzc5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/webpack.generated.js", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODoxMjo1OFrOIKaUQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODo0NTo0MlrOIKcByA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc4Nzg0Mg==", "bodyText": "One issue is that if we don't have a themeName then these shouldn't be added at all either.\nSo themeName could be taken to a variable and then use that to not add reload or watch plugins.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547787842", "createdAt": "2020-12-23T08:12:58Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/webpack.generated.js", "diffHunk": "@@ -238,6 +240,13 @@ module.exports = {\n       projectStaticAssetsOutputFolder: projectStaticAssetsOutputFolder,\n     }),\n \n+    devMode && new ExtraWatchWebpackPlugin({\n+      files: [],\n+      dirs: [ 'frontend/themes/' + getThemeName() ]\n+    }),\n+\n+    devMode && new ThemeLiveReloadPlugin(getThemeName, getGenerateThemeCallback),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b5a1c5d8e004050b54e51c597895d3edfefbc3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgxMzM3Nw==", "bodyText": "Yep, assuming that the getThemeName should extract the theme name on request, I can create a themeName variable somewhere before these plugins array and just use it for extra watch and live reload plugins.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547813377", "createdAt": "2020-12-23T08:42:50Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/webpack.generated.js", "diffHunk": "@@ -238,6 +240,13 @@ module.exports = {\n       projectStaticAssetsOutputFolder: projectStaticAssetsOutputFolder,\n     }),\n \n+    devMode && new ExtraWatchWebpackPlugin({\n+      files: [],\n+      dirs: [ 'frontend/themes/' + getThemeName() ]\n+    }),\n+\n+    devMode && new ThemeLiveReloadPlugin(getThemeName, getGenerateThemeCallback),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc4Nzg0Mg=="}, "originalCommit": {"oid": "d2b5a1c5d8e004050b54e51c597895d3edfefbc3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgxNTg4MA==", "bodyText": "When we run webpack if the file will be created it will be available so it's fine to check and trust the result.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547815880", "createdAt": "2020-12-23T08:45:42Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/webpack.generated.js", "diffHunk": "@@ -238,6 +240,13 @@ module.exports = {\n       projectStaticAssetsOutputFolder: projectStaticAssetsOutputFolder,\n     }),\n \n+    devMode && new ExtraWatchWebpackPlugin({\n+      files: [],\n+      dirs: [ 'frontend/themes/' + getThemeName() ]\n+    }),\n+\n+    devMode && new ThemeLiveReloadPlugin(getThemeName, getGenerateThemeCallback),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc4Nzg0Mg=="}, "originalCommit": {"oid": "d2b5a1c5d8e004050b54e51c597895d3edfefbc3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDQ0MTk1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODo0NDowOFrOIKb8Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyNDozMVrOIKn8rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgxNDUwMg==", "bodyText": "The build fails here as you do not check that the file exists in the first place.\n[17:46:28]\t[Step 5/11] Error: ENOENT: no such file or directory, open '/tmp/junit8056780026882223291/target/flow-frontend/themes/theme-generated.js'\n[17:46:28]\t[Step 5/11]     at Object.openSync (fs.js:448:3)\n[17:46:28]\t[Step 5/11]     at Object.readFileSync (fs.js:348:35)\n[17:46:28]\t[Step 5/11]     at extractThemeName (/tmp/junit8056780026882223291/node_modules/@vaadin/application-theme-plugin/theme-handle.js:130:28)\n[17:46:28]\t[Step 5/11]     at new ApplicationThemePlugin (/tmp/junit8056780026882223291/node_modules/@vaadin/application-theme-plugin/application-theme-plugin.js:47:17)\n[17:46:28]\t[Step 5/11]     at Object.<anonymous> (/tmp/junit8056780026882223291/webpack.generated.js:234:5)", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547814502", "createdAt": "2020-12-23T08:44:08Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -46,86 +42,28 @@ class ApplicationThemePlugin {\n     if (!this.options.themeProjectFolders) {\n       throw new Error(\"Missing themeProjectFolders path array\");\n     }\n+\n+    const generatedThemeFile = getResolvedGeneratedThemeFile(this.options);\n+    themeName = extractThemeName(generatedThemeFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b5a1c5d8e004050b54e51c597895d3edfefbc3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgyMTM3Nw==", "bodyText": "Oh, thanks! I apparently didn't clean my target folder and it passes for me. So, you were \ud83d\udcaf  right when requesting to make getThemeName to be on demand :)", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547821377", "createdAt": "2020-12-23T08:52:17Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -46,86 +42,28 @@ class ApplicationThemePlugin {\n     if (!this.options.themeProjectFolders) {\n       throw new Error(\"Missing themeProjectFolders path array\");\n     }\n+\n+    const generatedThemeFile = getResolvedGeneratedThemeFile(this.options);\n+    themeName = extractThemeName(generatedThemeFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgxNDUwMg=="}, "originalCommit": {"oid": "d2b5a1c5d8e004050b54e51c597895d3edfefbc3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk2NTE1MA==", "bodyText": "Sorry, I've just got the meaning of this. Dev server (web pack) normally starts when the node tasks (including theme-generated.js creating) complete. Thus, the theme-generated.js should exist when the web pack starts (=> when the webpack.config.js is being processed), but not yet copied to target/flow-frontend/themes, right? Could I extract the theme name directly from ${project.root.dir}/node_modules/@vaadin/flow-frontend/themes?", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r547965150", "createdAt": "2020-12-23T13:44:12Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -46,86 +42,28 @@ class ApplicationThemePlugin {\n     if (!this.options.themeProjectFolders) {\n       throw new Error(\"Missing themeProjectFolders path array\");\n     }\n+\n+    const generatedThemeFile = getResolvedGeneratedThemeFile(this.options);\n+    themeName = extractThemeName(generatedThemeFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgxNDUwMg=="}, "originalCommit": {"oid": "d2b5a1c5d8e004050b54e51c597895d3edfefbc3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMTE4MA==", "bodyText": "theme-generated.js already exists before webpack starts. Found the mistake in my code.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r548011180", "createdAt": "2020-12-23T15:24:31Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/application-theme-plugin.js", "diffHunk": "@@ -46,86 +42,28 @@ class ApplicationThemePlugin {\n     if (!this.options.themeProjectFolders) {\n       throw new Error(\"Missing themeProjectFolders path array\");\n     }\n+\n+    const generatedThemeFile = getResolvedGeneratedThemeFile(this.options);\n+    themeName = extractThemeName(generatedThemeFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgxNDUwMg=="}, "originalCommit": {"oid": "d2b5a1c5d8e004050b54e51c597895d3edfefbc3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjkwMjgxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/application-theme-plugin/theme-handle.js", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDoxNTo0OVrOIKzgUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMDowNDo1OFrOILt93g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIwMDUyOQ==", "bodyText": "So what happens if the user removes the @Theme annotation and deletes the /themes/ folder ?\nI'm not sure if this code is run in that case, but as I think that case will be probably for anyone adopting a existing project (any starter) they might want to delete the existing /themes/ folder completely and go \"vanilla style\" instead without any theme.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r548200529", "createdAt": "2020-12-23T20:15:49Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/theme-handle.js", "diffHunk": "@@ -112,31 +106,26 @@ function getThemeProperties(themeFolder) {\n }\n \n /**\n- * Generates path to theme generated file with theme meta data\n- * @param options object containing theme resource folder\n- * @returns path to theme generated file\n- */\n-function getResolvedGeneratedThemeFile(options) {\n-  return path.resolve(options.themeResourceFolder, \"theme-generated.js\");\n-}\n-\n-/**\n- * Extracts current theme name from theme generated file\n- * @param generatedThemeFile file to extract from\n+ * Extracts current theme name from 'theme-generated.js' file located on a\n+ * given folder.\n+ * @param themeResourceFolder 'theme-generated.js' file folder\n  * @returns {string} current theme name\n  */\n-function extractThemeName(generatedThemeFile) {\n-  // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n-  return nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n-}\n-\n-/**\n- * Generates theme resources meta data file name\n- * @param themeName current theme name\n- * @returns {string} theme resources meta data file name\n- */\n-function getThemeGeneratedFileName(themeName) {\n-  return themeName + '.generated.js';\n+function extractThemeName(themeResourceFolder) {\n+  if (!themeResourceFolder) {\n+    throw new Error('Theme resource folder cannot be empty');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6e3af320f051c60164f1cbabc7eef361caab68"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIwMjQ2NQ==", "bodyText": "And should the variable name be themesFolder or such ? Or actually I'm a bit confused that \"what is theme resource folder\" as the name is not IMO obvious", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r548202465", "createdAt": "2020-12-23T20:18:51Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/theme-handle.js", "diffHunk": "@@ -112,31 +106,26 @@ function getThemeProperties(themeFolder) {\n }\n \n /**\n- * Generates path to theme generated file with theme meta data\n- * @param options object containing theme resource folder\n- * @returns path to theme generated file\n- */\n-function getResolvedGeneratedThemeFile(options) {\n-  return path.resolve(options.themeResourceFolder, \"theme-generated.js\");\n-}\n-\n-/**\n- * Extracts current theme name from theme generated file\n- * @param generatedThemeFile file to extract from\n+ * Extracts current theme name from 'theme-generated.js' file located on a\n+ * given folder.\n+ * @param themeResourceFolder 'theme-generated.js' file folder\n  * @returns {string} current theme name\n  */\n-function extractThemeName(generatedThemeFile) {\n-  // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n-  return nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n-}\n-\n-/**\n- * Generates theme resources meta data file name\n- * @param themeName current theme name\n- * @returns {string} theme resources meta data file name\n- */\n-function getThemeGeneratedFileName(themeName) {\n-  return themeName + '.generated.js';\n+function extractThemeName(themeResourceFolder) {\n+  if (!themeResourceFolder) {\n+    throw new Error('Theme resource folder cannot be empty');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIwMDUyOQ=="}, "originalCommit": {"oid": "ca6e3af320f051c60164f1cbabc7eef361caab68"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIwNDkwOA==", "bodyText": "Or meh, maybe it is fine that we require them to restart the server at that point, but I think people will not know what does the error \"Theme resource folder cannot be empty\" mean and what to do after that ?", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r548204908", "createdAt": "2020-12-23T20:22:37Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/theme-handle.js", "diffHunk": "@@ -112,31 +106,26 @@ function getThemeProperties(themeFolder) {\n }\n \n /**\n- * Generates path to theme generated file with theme meta data\n- * @param options object containing theme resource folder\n- * @returns path to theme generated file\n- */\n-function getResolvedGeneratedThemeFile(options) {\n-  return path.resolve(options.themeResourceFolder, \"theme-generated.js\");\n-}\n-\n-/**\n- * Extracts current theme name from theme generated file\n- * @param generatedThemeFile file to extract from\n+ * Extracts current theme name from 'theme-generated.js' file located on a\n+ * given folder.\n+ * @param themeResourceFolder 'theme-generated.js' file folder\n  * @returns {string} current theme name\n  */\n-function extractThemeName(generatedThemeFile) {\n-  // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n-  return nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n-}\n-\n-/**\n- * Generates theme resources meta data file name\n- * @param themeName current theme name\n- * @returns {string} theme resources meta data file name\n- */\n-function getThemeGeneratedFileName(themeName) {\n-  return themeName + '.generated.js';\n+function extractThemeName(themeResourceFolder) {\n+  if (!themeResourceFolder) {\n+    throw new Error('Theme resource folder cannot be empty');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIwMDUyOQ=="}, "originalCommit": {"oid": "ca6e3af320f051c60164f1cbabc7eef361caab68"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1NzA0NA==", "bodyText": "So what happens if the user removes the @theme annotation and deletes the /themes/ folder ?\n\nNo, this code won't be executed in this case.\nWebpack won't trigger recompilation after delete of /themes/, no app reload, but the app keeps running with theme styles until you delete the @Theme annotation and triggers live reload (or restart the app).\nThen, the app theme will be cleaned up.\nIf you delete /themes/ and then changes something else than @Theme and trigger live reload, then you get Discovered @Theme annotation with theme name 'app-theme', but could not find the theme directory... error message.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r549157044", "createdAt": "2020-12-27T19:50:25Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/theme-handle.js", "diffHunk": "@@ -112,31 +106,26 @@ function getThemeProperties(themeFolder) {\n }\n \n /**\n- * Generates path to theme generated file with theme meta data\n- * @param options object containing theme resource folder\n- * @returns path to theme generated file\n- */\n-function getResolvedGeneratedThemeFile(options) {\n-  return path.resolve(options.themeResourceFolder, \"theme-generated.js\");\n-}\n-\n-/**\n- * Extracts current theme name from theme generated file\n- * @param generatedThemeFile file to extract from\n+ * Extracts current theme name from 'theme-generated.js' file located on a\n+ * given folder.\n+ * @param themeResourceFolder 'theme-generated.js' file folder\n  * @returns {string} current theme name\n  */\n-function extractThemeName(generatedThemeFile) {\n-  // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n-  return nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n-}\n-\n-/**\n- * Generates theme resources meta data file name\n- * @param themeName current theme name\n- * @returns {string} theme resources meta data file name\n- */\n-function getThemeGeneratedFileName(themeName) {\n-  return themeName + '.generated.js';\n+function extractThemeName(themeResourceFolder) {\n+  if (!themeResourceFolder) {\n+    throw new Error('Theme resource folder cannot be empty');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIwMDUyOQ=="}, "originalCommit": {"oid": "ca6e3af320f051c60164f1cbabc7eef361caab68"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1ODM2Ng==", "bodyText": "Or meh, maybe it is fine that we require them to restart the server at that point, but I think people will not know what does the error \"Theme resource folder cannot be empty\" mean and what to do after that ?\n\nthemeResourceFolder refers to the folder where the theme-generated.js is generated. Basically, it's value is autogenerated in webpack.generated.js and if it's empty, then it's a bug in the flow. But since the extractThemeName can be potentially be reused, then it's good to change the message to reflect the problem - could not extract theme name, because the path to folder with the autogenerated file theme-generated.js is not set, please set this path as a application-theme-plugin constructor parameter, or such.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r549158366", "createdAt": "2020-12-27T20:04:58Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/application-theme-plugin/theme-handle.js", "diffHunk": "@@ -112,31 +106,26 @@ function getThemeProperties(themeFolder) {\n }\n \n /**\n- * Generates path to theme generated file with theme meta data\n- * @param options object containing theme resource folder\n- * @returns path to theme generated file\n- */\n-function getResolvedGeneratedThemeFile(options) {\n-  return path.resolve(options.themeResourceFolder, \"theme-generated.js\");\n-}\n-\n-/**\n- * Extracts current theme name from theme generated file\n- * @param generatedThemeFile file to extract from\n+ * Extracts current theme name from 'theme-generated.js' file located on a\n+ * given folder.\n+ * @param themeResourceFolder 'theme-generated.js' file folder\n  * @returns {string} current theme name\n  */\n-function extractThemeName(generatedThemeFile) {\n-  // read theme name from the theme-generated.js as there we always mark the used theme for webpack to handle.\n-  return nameRegex.exec(fs.readFileSync(generatedThemeFile, {encoding: 'utf8'}))[1];\n-}\n-\n-/**\n- * Generates theme resources meta data file name\n- * @param themeName current theme name\n- * @returns {string} theme resources meta data file name\n- */\n-function getThemeGeneratedFileName(themeName) {\n-  return themeName + '.generated.js';\n+function extractThemeName(themeResourceFolder) {\n+  if (!themeResourceFolder) {\n+    throw new Error('Theme resource folder cannot be empty');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIwMDUyOQ=="}, "originalCommit": {"oid": "ca6e3af320f051c60164f1cbabc7eef361caab68"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjkzNTgzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/plugins/theme-live-reload-plugin/theme-live-reload-plugin.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDoyNDowM1rOIKz1mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNzoyNDoxNVrOILzHVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIwNTk3Ng==", "bodyText": "Non-blocking: When could this error occur and is this error message supposed to be helpful ? If a user sees it, they have no idea what it means", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r548205976", "createdAt": "2020-12-23T20:24:03Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/resources/plugins/theme-live-reload-plugin/theme-live-reload-plugin.js", "diffHunk": "@@ -24,39 +22,42 @@ class ThemeLiveReloadPlugin {\n \n     /**\n      * Create a new instance of ThemeLiveReloadPlugin\n-     * @param themeNameGetter getter function for current theme name\n-     * @param generateThemeCallbackGetter getter function for generate theme\n-     * callback\n+     * @param themeName current theme name\n+     * @param generateThemeCallback callback which collects theme resources\n+     * and generates theme meta data\n      */\n-    constructor(themeNameGetter, generateThemeCallbackGetter) {\n-      if (!themeNameGetter) {\n+    constructor(themeName, generateThemeCallback) {\n+      if (!themeName) {\n         throw new Error(\"Missing theme name\");\n       }\n-      this.themeNameGetter = themeNameGetter;\n-      this.generateThemeCallbackGetter = generateThemeCallbackGetter;\n+      this.themeName = themeName;\n+      if (!generateThemeCallback || typeof generateThemeCallback !== 'function') {\n+        throw new Error(\"Missing theme generate callback or incorrect type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6e3af320f051c60164f1cbabc7eef361caab68"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI0MjcxMQ==", "bodyText": "Replaced by more meaningful message.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r549242711", "createdAt": "2020-12-28T07:24:15Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/plugins/theme-live-reload-plugin/theme-live-reload-plugin.js", "diffHunk": "@@ -24,39 +22,42 @@ class ThemeLiveReloadPlugin {\n \n     /**\n      * Create a new instance of ThemeLiveReloadPlugin\n-     * @param themeNameGetter getter function for current theme name\n-     * @param generateThemeCallbackGetter getter function for generate theme\n-     * callback\n+     * @param themeName current theme name\n+     * @param generateThemeCallback callback which collects theme resources\n+     * and generates theme meta data\n      */\n-    constructor(themeNameGetter, generateThemeCallbackGetter) {\n-      if (!themeNameGetter) {\n+    constructor(themeName, generateThemeCallback) {\n+      if (!themeName) {\n         throw new Error(\"Missing theme name\");\n       }\n-      this.themeNameGetter = themeNameGetter;\n-      this.generateThemeCallbackGetter = generateThemeCallbackGetter;\n+      this.themeName = themeName;\n+      if (!generateThemeCallback || typeof generateThemeCallback !== 'function') {\n+        throw new Error(\"Missing theme generate callback or incorrect type\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIwNTk3Ng=="}, "originalCommit": {"oid": "ca6e3af320f051c60164f1cbabc7eef361caab68"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Njk3MTUwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/resources/webpack.generated.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDozMToyNlrOIK0Mmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNzoyMzoyOFrOILzGlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxMTg2Nw==", "bodyText": "Non-blocking: Seeing it here, I wonder if the generateTheme is a good name. How does it \"generate the theme\" ? The jsdocs say\n * Looks up for a theme resources in a current project and in jar dependencies,\n * copies the found resources and generates/updates meta data for webpack\n * compilation.\n\nso probably more suitable names would be themeResourcesLookup or themeResourcesProcessor or something like that, and same for the callback in the other file.", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r548211867", "createdAt": "2020-12-23T20:31:26Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/resources/webpack.generated.js", "diffHunk": "@@ -13,7 +13,7 @@ const ExtraWatchWebpackPlugin = require('extra-watch-webpack-plugin');\n // Flow plugins\n const StatsPlugin = require('@vaadin/stats-plugin');\n const ThemeLiveReloadPlugin = require('@vaadin/theme-live-reload-plugin');\n-const { ApplicationThemePlugin, getThemeName, getGenerateThemeCallback } = require('@vaadin/application-theme-plugin');\n+const { ApplicationThemePlugin, generateTheme, extractThemeName } = require('@vaadin/application-theme-plugin');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6e3af320f051c60164f1cbabc7eef361caab68"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI0MjUxOQ==", "bodyText": "Changed to processThemeResources", "url": "https://github.com/vaadin/flow/pull/9708#discussion_r549242519", "createdAt": "2020-12-28T07:23:28Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/resources/webpack.generated.js", "diffHunk": "@@ -13,7 +13,7 @@ const ExtraWatchWebpackPlugin = require('extra-watch-webpack-plugin');\n // Flow plugins\n const StatsPlugin = require('@vaadin/stats-plugin');\n const ThemeLiveReloadPlugin = require('@vaadin/theme-live-reload-plugin');\n-const { ApplicationThemePlugin, getThemeName, getGenerateThemeCallback } = require('@vaadin/application-theme-plugin');\n+const { ApplicationThemePlugin, generateTheme, extractThemeName } = require('@vaadin/application-theme-plugin');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxMTg2Nw=="}, "originalCommit": {"oid": "ca6e3af320f051c60164f1cbabc7eef361caab68"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3787, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}