{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MTAzMzgz", "number": 9008, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoyMjo1NlrOEjnhyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo0MzozN1rOEkea1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzgzMjQxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/IdCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoyMjo1NlrOHSEa2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoyMjo1NlrOHSEa2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwODgyNA==", "bodyText": "Method could be compacted to one-liner using computeIfAbsent.", "url": "https://github.com/vaadin/flow/pull/9008#discussion_r488708824", "createdAt": "2020-09-15T14:22:56Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/IdCollector.java", "diffHunk": "@@ -194,4 +196,23 @@ private void setAttributeData(Attribute attribute,\n     private boolean isBooleanAttribute(Attribute attribute) {\n         return attribute.getKey().equals(attribute.toString());\n     }\n+\n+    private Map<String, String> getAttributeData(String id) {\n+        Map<String, String> map = attributesById.get(id);\n+        if (map == null) {\n+            map = new HashMap<>();\n+            attributesById.put(id, map);\n+        }\n+        return map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404cad33cddefe87cdc0eca742c25ec7f5557bb"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzkyNzA4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/AbstractInjectableElementInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDo0MjoxMVrOHSFWKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDo0MjoxMVrOHSFWKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcyNDAwOQ==", "bodyText": "Could be final", "url": "https://github.com/vaadin/flow/pull/9008#discussion_r488724009", "createdAt": "2020-09-15T14:42:11Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/AbstractInjectableElementInitializer.java", "diffHunk": "@@ -34,6 +34,15 @@\n public abstract class AbstractInjectableElementInitializer\n         implements Consumer<Map<String, String>> {\n \n+    /**\n+     * Represents text key which should be set to an {@link Element} via\n+     * {@link Element#setText(String)}.\n+     * <p>\n+     * The real attribute may not contain {@code \"=\"} sign in the name so it's\n+     * safe to use this special key for text value in a map.\n+     */\n+    public static String TEXT_DATA = \"=text\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404cad33cddefe87cdc0eca742c25ec7f5557bb"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODEzODY1OnYy", "diffSide": "RIGHT", "path": "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/template/ChildOrderIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToyNTozN1rOHSHZ-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo0Mjo1M1rOHSmhXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1Nzc1Mw==", "bodyText": "The assertion on the order indeed seems more sensible after the change, so the order was wrong before and there is a bug fixed also?\nI find the assertions messy after this change, as some of the calls to assertNodeOrder will be with the concated texts and some with separate parameters. Would be easier to understand and modify if the \\n were removed from the inserted text pieces in the test views and the assertion changed to simply:\n    private void assertNodeOrder(WebElement container, String... nodes) {\n        String texts = container.getText().replace(\"\\n\", \"\");\n        String expected = String.join(\"\", nodes);\n        Assert.assertEquals(expected, texts);\n    }\nThat would abstract away from the extra complication of whitespace between the added nodes. Unless for some reason that is actually part of the test?", "url": "https://github.com/vaadin/flow/pull/9008#discussion_r488757753", "createdAt": "2020-09-15T15:25:37Z", "author": {"login": "joheriks"}, "path": "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/template/ChildOrderIT.java", "diffHunk": "@@ -163,29 +163,28 @@ public void prependTextsFromServer_textsAreAddedBeforeExistingOnes() {\n         assertNodeOrder(container, \"Client text\");\n \n         clickAndWaitForContainerToChange(container, \"prependChildToContainer2\");\n-        assertNodeOrder(container, \"Client text\", \"Server text 1\");\n+        assertNodeOrder(container, \"Server text 1Client text\");\n \n         clickAndWaitForContainerToChange(container, \"prependChildToContainer2\");\n-        assertNodeOrder(container, \"Client text\", \"Server text 2\",\n-                \"Server text 1\");\n+        assertNodeOrder(container, \"Server text 2\", \"Server text 1Client text\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1404cad33cddefe87cdc0eca742c25ec7f5557bb"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4NjA0OQ==", "bodyText": "No any bugs here previously or now.\nThe behavior has changed: \"Client text\" is now set to the containerWithText on the server side which means the element now has a text element (on the server side text is an element). As a result the server side containerWithText always has initial one element now.\nAnd every test which touches this element has to consider index shift back or forward.\nSo this is just direct consequence of setting the text for the element in template.\n(there is a genuine bug in another test failure)\nI don't like this test since it does too many things and it's too easy to break other things correcting another.\nThis test is not a part of this PR. It just fails with the changes in this PR and that's why I'm modifying it.\nI don't want to change anything else here accept the minimal changes to keep it passing.\nYou suggestion makes some sense, but it may introduce false positive result if strings (test data) in the nodes are modified.\nCurrently \"\\n\" is used as a clear separator for text in nodes, concatenating all string in one big string removes any separation and the comparison becomes fragile.\nI understand you concern about ugly string \"Server text 1Client text\"which I don't like either but this is a consequence of how DOM is done on the client side and absence the proper method of getting text recursively in Selenium.\nI see call assertNodeOrder(container, \"Server text 3\", \"Server text 2\",\"Server text 1Client text\", \"Client text\") with the current impl is more reliable and in fact quite expected within the current limitations (even though it's quite not-obvious why it works in this way, so you need to go deeply).\nEven though I completely agree that from \"internal API\" point of view assertNodeOrder(container, \"Server text 3\", \"Server text 2\",\"Server text 1\",\"Client text\", \"Client text\") is just much better: but simple impl of this is unclear for me.\nSo I would prefer to keep this as is : this issue  can be considered separately.", "url": "https://github.com/vaadin/flow/pull/9008#discussion_r489186049", "createdAt": "2020-09-16T06:10:53Z", "author": {"login": "denis-anisimov"}, "path": "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/template/ChildOrderIT.java", "diffHunk": "@@ -163,29 +163,28 @@ public void prependTextsFromServer_textsAreAddedBeforeExistingOnes() {\n         assertNodeOrder(container, \"Client text\");\n \n         clickAndWaitForContainerToChange(container, \"prependChildToContainer2\");\n-        assertNodeOrder(container, \"Client text\", \"Server text 1\");\n+        assertNodeOrder(container, \"Server text 1Client text\");\n \n         clickAndWaitForContainerToChange(container, \"prependChildToContainer2\");\n-        assertNodeOrder(container, \"Client text\", \"Server text 2\",\n-                \"Server text 1\");\n+        assertNodeOrder(container, \"Server text 2\", \"Server text 1Client text\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1Nzc1Mw=="}, "originalCommit": {"oid": "1404cad33cddefe87cdc0eca742c25ec7f5557bb"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2NzU0OQ==", "bodyText": "Ok, thanks for the clarifications.", "url": "https://github.com/vaadin/flow/pull/9008#discussion_r489267549", "createdAt": "2020-09-16T08:42:53Z", "author": {"login": "joheriks"}, "path": "flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/template/ChildOrderIT.java", "diffHunk": "@@ -163,29 +163,28 @@ public void prependTextsFromServer_textsAreAddedBeforeExistingOnes() {\n         assertNodeOrder(container, \"Client text\");\n \n         clickAndWaitForContainerToChange(container, \"prependChildToContainer2\");\n-        assertNodeOrder(container, \"Client text\", \"Server text 1\");\n+        assertNodeOrder(container, \"Server text 1Client text\");\n \n         clickAndWaitForContainerToChange(container, \"prependChildToContainer2\");\n-        assertNodeOrder(container, \"Client text\", \"Server text 2\",\n-                \"Server text 1\");\n+        assertNodeOrder(container, \"Server text 2\", \"Server text 1Client text\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1Nzc1Mw=="}, "originalCommit": {"oid": "1404cad33cddefe87cdc0eca742c25ec7f5557bb"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjgyNTgxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/IdCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo0MzozN1rOHTcKuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo0MzozN1rOHTcKuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NjQ4OA==", "bodyText": "Call \"tagName.isPresent()\" before accessing the value.", "url": "https://github.com/vaadin/flow/pull/9008#discussion_r490146488", "createdAt": "2020-09-17T10:43:37Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/IdCollector.java", "diffHunk": "@@ -136,8 +137,10 @@ private boolean collectElementData(String id, Field field) {\n             Optional<String> tagName = element\n                     .map(org.jsoup.nodes.Element::tagName);\n             if (element.isPresent()) {\n+                Element domElement = element.get();\n                 tagById.put(id, tagName.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eeb9aa4d125d2f53fa1583b76eee23fa7b830db"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3050, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}