{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNjMzMDk3", "number": 8673, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0NzowMVrOEK4X1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0OTozOVrOEK4blA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODQ0ODIzOnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Validators.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0NzowMVrOGsLQ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzozOTo1MlrOGsNVdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NTA3Nw==", "bodyText": "Why isn't this method name prefixed with underscore like the similar helpers above?", "url": "https://github.com/vaadin/flow/pull/8673#discussion_r448975077", "createdAt": "2020-07-02T12:47:01Z", "author": {"login": "Haprog"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Validators.ts", "diffHunk": "@@ -145,25 +230,41 @@ export class Digits extends AbstractValidator<string> {\n }\n \n export class Past extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a past date', ...attrs });\n+  }\n   validate = (value: any) => validator.isBefore(value);\n }\n export class PastOrPresent extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a date in the past or in the present', ...attrs });\n+  }\n   validate = () => { throw new Error('Form Validator for PastOrPresent not implemented yet') };\n }\n export class Future extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a future date', ...attrs });\n+  }\n   validate = (value: any) => validator.isAfter(value);\n }\n export class FutureOrPresent extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a date in the present or in the future', ...attrs });\n+  }\n   validate = () => { throw new Error('Form Validator for FutureOrPresent not implemented yet') };\n }\n \n+function regexp(attrs: PatternAttributes | string | RegExp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d2388aa9ac8e5de0b057883f48d5ec29c694ba"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwOTAxMg==", "bodyText": "Good catch!", "url": "https://github.com/vaadin/flow/pull/8673#discussion_r449009012", "createdAt": "2020-07-02T13:39:52Z", "author": {"login": "vlukashov"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Validators.ts", "diffHunk": "@@ -145,25 +230,41 @@ export class Digits extends AbstractValidator<string> {\n }\n \n export class Past extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a past date', ...attrs });\n+  }\n   validate = (value: any) => validator.isBefore(value);\n }\n export class PastOrPresent extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a date in the past or in the present', ...attrs });\n+  }\n   validate = () => { throw new Error('Form Validator for PastOrPresent not implemented yet') };\n }\n export class Future extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a future date', ...attrs });\n+  }\n   validate = (value: any) => validator.isAfter(value);\n }\n export class FutureOrPresent extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a date in the present or in the future', ...attrs });\n+  }\n   validate = () => { throw new Error('Form Validator for FutureOrPresent not implemented yet') };\n }\n \n+function regexp(attrs: PatternAttributes | string | RegExp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NTA3Nw=="}, "originalCommit": {"oid": "63d2388aa9ac8e5de0b057883f48d5ec29c694ba"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODQ1NzgwOnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Validators.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0OTozOVrOGsLWow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzozOTo1NFrOGsNVjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NjU0Nw==", "bodyText": "This isn't exactly the same message as in https://beanvalidation.org/2.0/spec/#builtinconstraints where it is must match the following regular expression: {regexp} I think it would be clearer to use this longer version.", "url": "https://github.com/vaadin/flow/pull/8673#discussion_r448976547", "createdAt": "2020-07-02T12:49:39Z", "author": {"login": "Haprog"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Validators.ts", "diffHunk": "@@ -145,25 +230,41 @@ export class Digits extends AbstractValidator<string> {\n }\n \n export class Past extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a past date', ...attrs });\n+  }\n   validate = (value: any) => validator.isBefore(value);\n }\n export class PastOrPresent extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a date in the past or in the present', ...attrs });\n+  }\n   validate = () => { throw new Error('Form Validator for PastOrPresent not implemented yet') };\n }\n export class Future extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a future date', ...attrs });\n+  }\n   validate = (value: any) => validator.isAfter(value);\n }\n export class FutureOrPresent extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a date in the present or in the future', ...attrs });\n+  }\n   validate = () => { throw new Error('Form Validator for FutureOrPresent not implemented yet') };\n }\n \n+function regexp(attrs: PatternAttributes | string | RegExp) {\n+  return typeof attrs === 'string' ? new RegExp(attrs)\n+    : attrs instanceof RegExp ? attrs\n+      : typeof attrs.regexp === 'string' ? new RegExp(attrs.regexp) : attrs.regexp;\n+}\n+\n export class Pattern extends AbstractValidator<string> {\n   regexp: RegExp;\n   constructor(attrs: PatternAttributes | string | RegExp) {\n-    super(typeof attrs === 'string' || attrs instanceof RegExp ? {} : attrs);\n-    this.regexp = typeof attrs === 'string' ? new RegExp(attrs)\n-      : attrs instanceof RegExp ? attrs\n-        : typeof attrs.regexp === 'string' ? new RegExp(attrs.regexp) : attrs.regexp;\n+    super({ message: `must match \"${regexp(attrs)}\"`, ..._asValidatorAttributes(attrs) });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d2388aa9ac8e5de0b057883f48d5ec29c694ba"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwOTAzNg==", "bodyText": "Nice catch! I copied the messages from the Hibernate implementation, and this one seems to differ from the spec :)\nhttps://github.com/hibernate/hibernate-validator/blob/master/engine/src/main/resources/org/hibernate/validator/ValidationMessages.properties#L19", "url": "https://github.com/vaadin/flow/pull/8673#discussion_r449009036", "createdAt": "2020-07-02T13:39:54Z", "author": {"login": "vlukashov"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Validators.ts", "diffHunk": "@@ -145,25 +230,41 @@ export class Digits extends AbstractValidator<string> {\n }\n \n export class Past extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a past date', ...attrs });\n+  }\n   validate = (value: any) => validator.isBefore(value);\n }\n export class PastOrPresent extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a date in the past or in the present', ...attrs });\n+  }\n   validate = () => { throw new Error('Form Validator for PastOrPresent not implemented yet') };\n }\n export class Future extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a future date', ...attrs });\n+  }\n   validate = (value: any) => validator.isAfter(value);\n }\n export class FutureOrPresent extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a date in the present or in the future', ...attrs });\n+  }\n   validate = () => { throw new Error('Form Validator for FutureOrPresent not implemented yet') };\n }\n \n+function regexp(attrs: PatternAttributes | string | RegExp) {\n+  return typeof attrs === 'string' ? new RegExp(attrs)\n+    : attrs instanceof RegExp ? attrs\n+      : typeof attrs.regexp === 'string' ? new RegExp(attrs.regexp) : attrs.regexp;\n+}\n+\n export class Pattern extends AbstractValidator<string> {\n   regexp: RegExp;\n   constructor(attrs: PatternAttributes | string | RegExp) {\n-    super(typeof attrs === 'string' || attrs instanceof RegExp ? {} : attrs);\n-    this.regexp = typeof attrs === 'string' ? new RegExp(attrs)\n-      : attrs instanceof RegExp ? attrs\n-        : typeof attrs.regexp === 'string' ? new RegExp(attrs.regexp) : attrs.regexp;\n+    super({ message: `must match \"${regexp(attrs)}\"`, ..._asValidatorAttributes(attrs) });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NjU0Nw=="}, "originalCommit": {"oid": "63d2388aa9ac8e5de0b057883f48d5ec29c694ba"}, "originalPosition": 222}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3335, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}