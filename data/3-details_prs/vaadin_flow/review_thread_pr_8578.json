{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1ODE1ODM2", "number": 8578, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTo0MDozNFrOEGaCgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODo1MTo1MFrOEGqOlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTUzNTM5OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTo0MDozNFrOGlLwew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTo0MDozNFrOGlLwew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY0MzEzMQ==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r441643131", "createdAt": "2020-06-17T15:40:34Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -291,12 +292,31 @@ public void confirmUpdate(int updateId) {\n      * @return size of available data\n      */\n     public int getDataSize() {\n-        if (resendEntireRange || assumeEmptyClient) {\n+        if (isDefinedSize()\n+                && (resendEntireRange || assumeEmptyClient || sizeReset)) {\n+            // TODO it could be possible to cache the value returned here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzU0MDY4OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractLazyDataView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNDo1NTowOVrOGlfkjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjoyMTo0N1rOGlhHMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2Nzc1OQ==", "bodyText": "Could just use the verifyDataProviderType(dataCommunicator.getDataProvider()); method for verifying the dataProvider.", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r441967759", "createdAt": "2020-06-18T04:55:09Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractLazyDataView.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentEventListener;\n+\n+/**\n+ * Abstract lazy data view implementation which handles the interaction with a\n+ * data communicator.\n+ * \n+ * @param <T>\n+ *            the type of data\n+ */\n+public abstract class AbstractLazyDataView<T> extends AbstractDataView<T>\n+        implements LazyDataView<T> {\n+\n+    private final DataCommunicator<T> dataCommunicator;\n+\n+    /**\n+     * Creates a new instance and verifies the passed data provider is\n+     * compatible with this data view implementation.\n+     *\n+     * @param dataCommunicator\n+     *            the data communicator of the component\n+     * @param component\n+     *            the component\n+     */\n+    public AbstractLazyDataView(DataCommunicator<T> dataCommunicator,\n+            Component component) {\n+        super(dataCommunicator::getDataProvider, component);\n+        this.dataCommunicator = dataCommunicator;\n+    }\n+\n+    /**\n+     * Returns the data communicator for the component and checks that the data\n+     * provider is of the correct type.\n+     * \n+     * @return the data communicator\n+     */\n+    protected DataCommunicator<T> getDataCommunicator() {\n+        // verify that the data provider hasn't been changed to an incompatible\n+        // type\n+        if (dataCommunicator.getDataProvider().isInMemory()) {\n+            throw new IllegalStateException(String.format(\n+                    \"LazyDataView cannot be used for component %s with an \"\n+                            + \"in-memory data provider (type was %s).\"\n+                            + \"Use a lazy data provider instead or\"\n+                            + \" for accessing data view for in-memory data use\"\n+                            + \" getListDataView().\",\n+                    component.getClass().getSimpleName(), dataCommunicator\n+                            .getDataProvider().getClass().getSimpleName()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5MzAwOA==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r441993008", "createdAt": "2020-06-18T06:21:47Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractLazyDataView.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentEventListener;\n+\n+/**\n+ * Abstract lazy data view implementation which handles the interaction with a\n+ * data communicator.\n+ * \n+ * @param <T>\n+ *            the type of data\n+ */\n+public abstract class AbstractLazyDataView<T> extends AbstractDataView<T>\n+        implements LazyDataView<T> {\n+\n+    private final DataCommunicator<T> dataCommunicator;\n+\n+    /**\n+     * Creates a new instance and verifies the passed data provider is\n+     * compatible with this data view implementation.\n+     *\n+     * @param dataCommunicator\n+     *            the data communicator of the component\n+     * @param component\n+     *            the component\n+     */\n+    public AbstractLazyDataView(DataCommunicator<T> dataCommunicator,\n+            Component component) {\n+        super(dataCommunicator::getDataProvider, component);\n+        this.dataCommunicator = dataCommunicator;\n+    }\n+\n+    /**\n+     * Returns the data communicator for the component and checks that the data\n+     * provider is of the correct type.\n+     * \n+     * @return the data communicator\n+     */\n+    protected DataCommunicator<T> getDataCommunicator() {\n+        // verify that the data provider hasn't been changed to an incompatible\n+        // type\n+        if (dataCommunicator.getDataProvider().isInMemory()) {\n+            throw new IllegalStateException(String.format(\n+                    \"LazyDataView cannot be used for component %s with an \"\n+                            + \"in-memory data provider (type was %s).\"\n+                            + \"Use a lazy data provider instead or\"\n+                            + \" for accessing data view for in-memory data use\"\n+                            + \" getListDataView().\",\n+                    component.getClass().getSimpleName(), dataCommunicator\n+                            .getDataProvider().getClass().getSimpleName()));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2Nzc1OQ=="}, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzU0Njc4OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNDo1OToxM1rOGlfoig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjoyMjozNVrOGlhIXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2ODc3OA==", "bodyText": "We could have a int lastSize or something that we would put this size as and update that when assumedSize is updated.", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r441968778", "createdAt": "2020-06-18T04:59:13Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -291,12 +292,31 @@ public void confirmUpdate(int updateId) {\n      * @return size of available data\n      */\n     public int getDataSize() {\n-        if (resendEntireRange || assumeEmptyClient) {\n+        if (isDefinedSize()\n+                && (resendEntireRange || assumeEmptyClient || sizeReset)) {\n+            // TODO it could be possible to cache the value returned here\n+            // and use it next time instead of making another query, unless\n+            // the conditions like filter (or another reset) have changed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2OTY1NA==", "bodyText": "On the other hand setting assumedSize here shouldn't make a difference so we could just update it here.", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r441969654", "createdAt": "2020-06-18T05:02:37Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -291,12 +292,31 @@ public void confirmUpdate(int updateId) {\n      * @return size of available data\n      */\n     public int getDataSize() {\n-        if (resendEntireRange || assumeEmptyClient) {\n+        if (isDefinedSize()\n+                && (resendEntireRange || assumeEmptyClient || sizeReset)) {\n+            // TODO it could be possible to cache the value returned here\n+            // and use it next time instead of making another query, unless\n+            // the conditions like filter (or another reset) have changed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2ODc3OA=="}, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5MzMxMA==", "bodyText": "Yes, but I don't think it should be part of this PR to optimize it as this can be done even as a bugfix if it is problematic to someone or we run out of other things to do.", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r441993310", "createdAt": "2020-06-18T06:22:35Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -291,12 +292,31 @@ public void confirmUpdate(int updateId) {\n      * @return size of available data\n      */\n     public int getDataSize() {\n-        if (resendEntireRange || assumeEmptyClient) {\n+        if (isDefinedSize()\n+                && (resendEntireRange || assumeEmptyClient || sizeReset)) {\n+            // TODO it could be possible to cache the value returned here\n+            // and use it next time instead of making another query, unless\n+            // the conditions like filter (or another reset) have changed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2ODc3OA=="}, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzU1ODE1OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTowNjoyNVrOGlfvog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjo0MToyN1rOGlhlQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MDU5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <em>NOTE:</em> it makes no sense to use an initial size estimate that is\n          \n          \n            \n                 * less than two times the set page size (set with {@link #setPageSize(int)}\n          \n          \n            \n                 * since this would trigger unnecessary requests immediately. On these\n          \n          \n            \n                 * cases, given estimate is discarded.\n          \n          \n            \n                 * <em>NOTE:</em> Any initial size estimate less than two page sizes will be discarded\n          \n          \n            \n                 * As it makes no sense to use an initial size estimate that is\n          \n          \n            \n                 * less than two times the set page size (set with {@link #setPageSize(int)}\n          \n          \n            \n                 * since this would trigger unnecessary requests immediately.\n          \n      \n    \n    \n  \n\nStart with what will happen then explain why.", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r441970594", "createdAt": "2020-06-18T05:06:25Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -423,6 +473,11 @@ public void setSizeEstimateCallback(\n      * estimate is only applied if it is greater than the currently\n      * estimated/known size. Otherwise it is not applied until there has been a\n      * reset.\n+     * <p>\n+     * <em>NOTE:</em> it makes no sense to use an initial size estimate that is\n+     * less than two times the set page size (set with {@link #setPageSize(int)}\n+     * since this would trigger unnecessary requests immediately. On these\n+     * cases, given estimate is discarded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMDcwNA==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r442000704", "createdAt": "2020-06-18T06:41:27Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -423,6 +473,11 @@ public void setSizeEstimateCallback(\n      * estimate is only applied if it is greater than the currently\n      * estimated/known size. Otherwise it is not applied until there has been a\n      * reset.\n+     * <p>\n+     * <em>NOTE:</em> it makes no sense to use an initial size estimate that is\n+     * less than two times the set page size (set with {@link #setPageSize(int)}\n+     * since this would trigger unnecessary requests immediately. On these\n+     * cases, given estimate is discarded.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MDU5NA=="}, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzU4ODA3OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNToyNDo1N1rOGlgB_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjo0MToyNFrOGlhlKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3NTI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get the full data available to the component. Data will use set filters\n          \n          \n            \n                 * and sorting. <em>NOTE: calling this method might cause a backend query\n          \n          \n            \n                 * that fetches all items from the backend when using a lazy data\n          \n          \n            \n                 * source!</em>\n          \n          \n            \n                 * Get the full data available to the component. Data will use set filters\n          \n          \n            \n                 * and sorting.\n          \n          \n            \n                 * <p>\n          \n          \n            \n                 * <em>NOTE:</em> calling this method might cause a backend query\n          \n          \n            \n                 * that fetches all items from the backend when using a lazy data\n          \n          \n            \n                 * source!", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r441975292", "createdAt": "2020-06-18T05:24:57Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -19,42 +19,54 @@\n import java.io.Serializable;\n import java.util.stream.Stream;\n \n+import com.vaadin.flow.component.Component;\n import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.shared.Registration;\n \n /**\n- * Base view interface for getting information on current\n- * data set of a Component.\n+ * Base view interface for getting information on current data set of a\n+ * Component.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @since\n  */\n public interface DataView<T> extends Serializable {\n \n     /**\n-     * Get the full data available to the component.\n-     * Data will use set filters and sorting.\n+     * Get the full data available to the component. Data will use set filters\n+     * and sorting. <em>NOTE: calling this method might cause a backend query\n+     * that fetches all items from the backend when using a lazy data\n+     * source!</em>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMDY4Mg==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r442000682", "createdAt": "2020-06-18T06:41:24Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -19,42 +19,54 @@\n import java.io.Serializable;\n import java.util.stream.Stream;\n \n+import com.vaadin.flow.component.Component;\n import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.shared.Registration;\n \n /**\n- * Base view interface for getting information on current\n- * data set of a Component.\n+ * Base view interface for getting information on current data set of a\n+ * Component.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @since\n  */\n public interface DataView<T> extends Serializable {\n \n     /**\n-     * Get the full data available to the component.\n-     * Data will use set filters and sorting.\n+     * Get the full data available to the component. Data will use set filters\n+     * and sorting. <em>NOTE: calling this method might cause a backend query\n+     * that fetches all items from the backend when using a lazy data\n+     * source!</em>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3NTI5Mg=="}, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzYwNTM0OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTozNDozNFrOGlgMWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODowMjoxN1rOGlkEKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3Nzk0Nw==", "bodyText": "Have this in the default method so it doesn't pollute the interface and implementing components.", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r441977947", "createdAt": "2020-06-18T05:34:34Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "diffHunk": "@@ -29,6 +29,20 @@\n  */\n public interface HasLazyDataView<T, V extends LazyDataView<T>>\n         extends Serializable {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    CallbackDataProvider.CountCallback INVALID_COUNT_CALLBACK = query -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0MTM4Nw==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r442041387", "createdAt": "2020-06-18T08:02:17Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "diffHunk": "@@ -29,6 +29,20 @@\n  */\n public interface HasLazyDataView<T, V extends LazyDataView<T>>\n         extends Serializable {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    CallbackDataProvider.CountCallback INVALID_COUNT_CALLBACK = query -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3Nzk0Nw=="}, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzYzOTc2OnYy", "diffSide": "RIGHT", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractLazyDataViewTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTo1MzowM1rOGlghkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzozNTo0MlrOGljJhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4MzM3OA==", "bodyText": "We should perhaps move the initial verification to the Component::getXYZ methods and any method that depends on the type instead of the constructor.", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r441983378", "createdAt": "2020-06-18T05:53:03Z", "author": {"login": "caalador"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractLazyDataViewTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Tag;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import elemental.json.JsonValue;\n+\n+public class AbstractLazyDataViewTest {\n+\n+    private static final String ITEM1 = \"foo\";\n+\n+    @Tag(\"test-component\")\n+    private static class TestComponent extends Component {\n+    }\n+\n+    private ListDataProvider<String> badProvider;\n+    private DataProvider<String, Void> dataProvider;\n+    private DataCommunicator<String> dataCommunicator;\n+    private AbstractLazyDataView<String> dataView;\n+    private Component component;\n+    private DataCommunicatorTest.MockUI ui;\n+    @Mock\n+    private ArrayUpdater arrayUpdater;\n+\n+    @Before\n+    public void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        component = new TestComponent();\n+        ui = new DataCommunicatorTest.MockUI();\n+        ui.add(component);\n+\n+        ArrayUpdater.Update update = new ArrayUpdater.Update() {\n+\n+            @Override\n+            public void clear(int start, int length) {\n+\n+            }\n+\n+            @Override\n+            public void set(int start, List<JsonValue> items) {\n+\n+            }\n+\n+            @Override\n+            public void commit(int updateId) {\n+\n+            }\n+        };\n+\n+        Mockito.when(arrayUpdater.startUpdate(Mockito.anyInt()))\n+                .thenReturn(update);\n+\n+        badProvider = DataProvider.ofItems(\"foo\", \"bar\");\n+        dataProvider = DataProvider.fromCallbacks(query -> {\n+            // this is a stupid limitation and could maybe be removed\n+            query.getOffset();\n+            query.getLimit();\n+            return Stream.of(ITEM1, \"bar\", \"baz\");\n+        }, query -> 3);\n+        dataCommunicator = new DataCommunicator<>((item, jsonObject) -> {\n+        }, arrayUpdater, null, component.getElement().getNode());\n+        // need to set a lazy data provider to communicator or type check fails\n+        dataCommunicator.setDataProvider(dataProvider, null);\n+        dataCommunicator.setPageSize(50);\n+        dataView = new AbstractLazyDataView<String>(dataCommunicator,\n+                component) {\n+        };\n+    }\n+\n+    @Test\n+    public void defaults_withCorrectDataProvider_noErrors() {\n+        dataCommunicator.setDataProvider(dataProvider, null);\n+        Assert.assertTrue(dataView.isDefinedSize());\n+        Assert.assertEquals(BackEndDataProvider.class,\n+                dataView.getSupportedDataProviderType());\n+        Assert.assertEquals(3, dataView.getSize());\n+        // no items are activated\n+        Assert.assertFalse(dataView.contains(\"foo\"));\n+\n+        dataView.withUndefinedSize();\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+        dataView.withDefinedSize(query -> 5);\n+        Assert.assertTrue(dataView.isDefinedSize());\n+\n+        dataView.withUndefinedSize(query -> 123);\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+        dataView.withDefinedSize();\n+        Assert.assertTrue(dataView.isDefinedSize());\n+\n+        dataView.withUndefinedSize(500);\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+    }\n+\n+    // This is weird-ish behavior but kept for now\n+    @Test(expected = IllegalStateException.class)\n+    public void dataViewCreated_beforeSettingDataProvider_throws() {\n+        // data communicator has by default an empty list data provider ->\n+        // utilizing lazy data view fails\n+        new AbstractLazyDataView<String>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyNjM3NA==", "bodyText": "I created a ticket about this", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r442026374", "createdAt": "2020-06-18T07:35:42Z", "author": {"login": "pleku"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractLazyDataViewTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Tag;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import elemental.json.JsonValue;\n+\n+public class AbstractLazyDataViewTest {\n+\n+    private static final String ITEM1 = \"foo\";\n+\n+    @Tag(\"test-component\")\n+    private static class TestComponent extends Component {\n+    }\n+\n+    private ListDataProvider<String> badProvider;\n+    private DataProvider<String, Void> dataProvider;\n+    private DataCommunicator<String> dataCommunicator;\n+    private AbstractLazyDataView<String> dataView;\n+    private Component component;\n+    private DataCommunicatorTest.MockUI ui;\n+    @Mock\n+    private ArrayUpdater arrayUpdater;\n+\n+    @Before\n+    public void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        component = new TestComponent();\n+        ui = new DataCommunicatorTest.MockUI();\n+        ui.add(component);\n+\n+        ArrayUpdater.Update update = new ArrayUpdater.Update() {\n+\n+            @Override\n+            public void clear(int start, int length) {\n+\n+            }\n+\n+            @Override\n+            public void set(int start, List<JsonValue> items) {\n+\n+            }\n+\n+            @Override\n+            public void commit(int updateId) {\n+\n+            }\n+        };\n+\n+        Mockito.when(arrayUpdater.startUpdate(Mockito.anyInt()))\n+                .thenReturn(update);\n+\n+        badProvider = DataProvider.ofItems(\"foo\", \"bar\");\n+        dataProvider = DataProvider.fromCallbacks(query -> {\n+            // this is a stupid limitation and could maybe be removed\n+            query.getOffset();\n+            query.getLimit();\n+            return Stream.of(ITEM1, \"bar\", \"baz\");\n+        }, query -> 3);\n+        dataCommunicator = new DataCommunicator<>((item, jsonObject) -> {\n+        }, arrayUpdater, null, component.getElement().getNode());\n+        // need to set a lazy data provider to communicator or type check fails\n+        dataCommunicator.setDataProvider(dataProvider, null);\n+        dataCommunicator.setPageSize(50);\n+        dataView = new AbstractLazyDataView<String>(dataCommunicator,\n+                component) {\n+        };\n+    }\n+\n+    @Test\n+    public void defaults_withCorrectDataProvider_noErrors() {\n+        dataCommunicator.setDataProvider(dataProvider, null);\n+        Assert.assertTrue(dataView.isDefinedSize());\n+        Assert.assertEquals(BackEndDataProvider.class,\n+                dataView.getSupportedDataProviderType());\n+        Assert.assertEquals(3, dataView.getSize());\n+        // no items are activated\n+        Assert.assertFalse(dataView.contains(\"foo\"));\n+\n+        dataView.withUndefinedSize();\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+        dataView.withDefinedSize(query -> 5);\n+        Assert.assertTrue(dataView.isDefinedSize());\n+\n+        dataView.withUndefinedSize(query -> 123);\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+        dataView.withDefinedSize();\n+        Assert.assertTrue(dataView.isDefinedSize());\n+\n+        dataView.withUndefinedSize(500);\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+    }\n+\n+    // This is weird-ish behavior but kept for now\n+    @Test(expected = IllegalStateException.class)\n+    public void dataViewCreated_beforeSettingDataProvider_throws() {\n+        // data communicator has by default an empty list data provider ->\n+        // utilizing lazy data view fails\n+        new AbstractLazyDataView<String>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4MzM3OA=="}, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzY0ODMxOnYy", "diffSide": "RIGHT", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractLazyDataViewTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTo1NzoyMlrOGlgmzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo0NTowOVrOGln3bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4NDcxOQ==", "bodyText": "I guess we have a problem here that if you get the contains execution before the requestedRange then you will get the wrong information. To have it more in line with size that is informed when it changes should the contains get a DataUpdatedEvent for the getting of the data in beforeClientResponse from the communicator?", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r441984719", "createdAt": "2020-06-18T05:57:22Z", "author": {"login": "caalador"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractLazyDataViewTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Tag;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import elemental.json.JsonValue;\n+\n+public class AbstractLazyDataViewTest {\n+\n+    private static final String ITEM1 = \"foo\";\n+\n+    @Tag(\"test-component\")\n+    private static class TestComponent extends Component {\n+    }\n+\n+    private ListDataProvider<String> badProvider;\n+    private DataProvider<String, Void> dataProvider;\n+    private DataCommunicator<String> dataCommunicator;\n+    private AbstractLazyDataView<String> dataView;\n+    private Component component;\n+    private DataCommunicatorTest.MockUI ui;\n+    @Mock\n+    private ArrayUpdater arrayUpdater;\n+\n+    @Before\n+    public void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        component = new TestComponent();\n+        ui = new DataCommunicatorTest.MockUI();\n+        ui.add(component);\n+\n+        ArrayUpdater.Update update = new ArrayUpdater.Update() {\n+\n+            @Override\n+            public void clear(int start, int length) {\n+\n+            }\n+\n+            @Override\n+            public void set(int start, List<JsonValue> items) {\n+\n+            }\n+\n+            @Override\n+            public void commit(int updateId) {\n+\n+            }\n+        };\n+\n+        Mockito.when(arrayUpdater.startUpdate(Mockito.anyInt()))\n+                .thenReturn(update);\n+\n+        badProvider = DataProvider.ofItems(\"foo\", \"bar\");\n+        dataProvider = DataProvider.fromCallbacks(query -> {\n+            // this is a stupid limitation and could maybe be removed\n+            query.getOffset();\n+            query.getLimit();\n+            return Stream.of(ITEM1, \"bar\", \"baz\");\n+        }, query -> 3);\n+        dataCommunicator = new DataCommunicator<>((item, jsonObject) -> {\n+        }, arrayUpdater, null, component.getElement().getNode());\n+        // need to set a lazy data provider to communicator or type check fails\n+        dataCommunicator.setDataProvider(dataProvider, null);\n+        dataCommunicator.setPageSize(50);\n+        dataView = new AbstractLazyDataView<String>(dataCommunicator,\n+                component) {\n+        };\n+    }\n+\n+    @Test\n+    public void defaults_withCorrectDataProvider_noErrors() {\n+        dataCommunicator.setDataProvider(dataProvider, null);\n+        Assert.assertTrue(dataView.isDefinedSize());\n+        Assert.assertEquals(BackEndDataProvider.class,\n+                dataView.getSupportedDataProviderType());\n+        Assert.assertEquals(3, dataView.getSize());\n+        // no items are activated\n+        Assert.assertFalse(dataView.contains(\"foo\"));\n+\n+        dataView.withUndefinedSize();\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+        dataView.withDefinedSize(query -> 5);\n+        Assert.assertTrue(dataView.isDefinedSize());\n+\n+        dataView.withUndefinedSize(query -> 123);\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+        dataView.withDefinedSize();\n+        Assert.assertTrue(dataView.isDefinedSize());\n+\n+        dataView.withUndefinedSize(500);\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+    }\n+\n+    // This is weird-ish behavior but kept for now\n+    @Test(expected = IllegalStateException.class)\n+    public void dataViewCreated_beforeSettingDataProvider_throws() {\n+        // data communicator has by default an empty list data provider ->\n+        // utilizing lazy data view fails\n+        new AbstractLazyDataView<String>(\n+                new DataCommunicator<>((item, jsonObject) -> {\n+                }, null, null, component.getElement().getNode()), component) {\n+        };\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void existingDataView_dataProviderIsChangedToInMemory_throws() {\n+        dataCommunicator.setDataProvider(badProvider, null);\n+        // any method call should be enough to trigger the check for type\n+        dataView.withUndefinedSize();\n+    }\n+\n+    @Test\n+    public void contains_itemsNotFetched_canCheckForItemWithBeforeClientResponse() {\n+        dataCommunicator.setRequestedRange(0, 50);\n+\n+        Assert.assertFalse(\"Item should not be loaded yet\",\n+                dataView.contains(\"foo\"));\n+\n+        AtomicBoolean capturedContains = new AtomicBoolean(false);\n+        ui.beforeClientResponse(component, executionContext -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAzMDUwMg==", "bodyText": "I'm not sure if I understand what you mean - but are you suggesting an event that is fired when a certain item \"goes active\" ? Or an event that is fired when ever the active data set changes ? The latter sounds like it could be of use.\nBoth Grid and TreeGrid will set the initial range immediately to 0, pageSize so I don't see those as problematic.\nComboBox on the other hand does not know anything about size before the drop down is opened, so it will need some special handling / more specific javadocs.", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r442030502", "createdAt": "2020-06-18T07:43:09Z", "author": {"login": "pleku"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractLazyDataViewTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Tag;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import elemental.json.JsonValue;\n+\n+public class AbstractLazyDataViewTest {\n+\n+    private static final String ITEM1 = \"foo\";\n+\n+    @Tag(\"test-component\")\n+    private static class TestComponent extends Component {\n+    }\n+\n+    private ListDataProvider<String> badProvider;\n+    private DataProvider<String, Void> dataProvider;\n+    private DataCommunicator<String> dataCommunicator;\n+    private AbstractLazyDataView<String> dataView;\n+    private Component component;\n+    private DataCommunicatorTest.MockUI ui;\n+    @Mock\n+    private ArrayUpdater arrayUpdater;\n+\n+    @Before\n+    public void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        component = new TestComponent();\n+        ui = new DataCommunicatorTest.MockUI();\n+        ui.add(component);\n+\n+        ArrayUpdater.Update update = new ArrayUpdater.Update() {\n+\n+            @Override\n+            public void clear(int start, int length) {\n+\n+            }\n+\n+            @Override\n+            public void set(int start, List<JsonValue> items) {\n+\n+            }\n+\n+            @Override\n+            public void commit(int updateId) {\n+\n+            }\n+        };\n+\n+        Mockito.when(arrayUpdater.startUpdate(Mockito.anyInt()))\n+                .thenReturn(update);\n+\n+        badProvider = DataProvider.ofItems(\"foo\", \"bar\");\n+        dataProvider = DataProvider.fromCallbacks(query -> {\n+            // this is a stupid limitation and could maybe be removed\n+            query.getOffset();\n+            query.getLimit();\n+            return Stream.of(ITEM1, \"bar\", \"baz\");\n+        }, query -> 3);\n+        dataCommunicator = new DataCommunicator<>((item, jsonObject) -> {\n+        }, arrayUpdater, null, component.getElement().getNode());\n+        // need to set a lazy data provider to communicator or type check fails\n+        dataCommunicator.setDataProvider(dataProvider, null);\n+        dataCommunicator.setPageSize(50);\n+        dataView = new AbstractLazyDataView<String>(dataCommunicator,\n+                component) {\n+        };\n+    }\n+\n+    @Test\n+    public void defaults_withCorrectDataProvider_noErrors() {\n+        dataCommunicator.setDataProvider(dataProvider, null);\n+        Assert.assertTrue(dataView.isDefinedSize());\n+        Assert.assertEquals(BackEndDataProvider.class,\n+                dataView.getSupportedDataProviderType());\n+        Assert.assertEquals(3, dataView.getSize());\n+        // no items are activated\n+        Assert.assertFalse(dataView.contains(\"foo\"));\n+\n+        dataView.withUndefinedSize();\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+        dataView.withDefinedSize(query -> 5);\n+        Assert.assertTrue(dataView.isDefinedSize());\n+\n+        dataView.withUndefinedSize(query -> 123);\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+        dataView.withDefinedSize();\n+        Assert.assertTrue(dataView.isDefinedSize());\n+\n+        dataView.withUndefinedSize(500);\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+    }\n+\n+    // This is weird-ish behavior but kept for now\n+    @Test(expected = IllegalStateException.class)\n+    public void dataViewCreated_beforeSettingDataProvider_throws() {\n+        // data communicator has by default an empty list data provider ->\n+        // utilizing lazy data view fails\n+        new AbstractLazyDataView<String>(\n+                new DataCommunicator<>((item, jsonObject) -> {\n+                }, null, null, component.getElement().getNode()), component) {\n+        };\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void existingDataView_dataProviderIsChangedToInMemory_throws() {\n+        dataCommunicator.setDataProvider(badProvider, null);\n+        // any method call should be enough to trigger the check for type\n+        dataView.withUndefinedSize();\n+    }\n+\n+    @Test\n+    public void contains_itemsNotFetched_canCheckForItemWithBeforeClientResponse() {\n+        dataCommunicator.setRequestedRange(0, 50);\n+\n+        Assert.assertFalse(\"Item should not be loaded yet\",\n+                dataView.contains(\"foo\"));\n+\n+        AtomicBoolean capturedContains = new AtomicBoolean(false);\n+        ui.beforeClientResponse(component, executionContext -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4NDcxOQ=="}, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0NTI1MQ==", "bodyText": "I mean that won't you get the wrong result if you move this beforeClientResponse to be before the setRequestedRange as then this will be executed before the request update.", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r442045251", "createdAt": "2020-06-18T08:09:12Z", "author": {"login": "caalador"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractLazyDataViewTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Tag;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import elemental.json.JsonValue;\n+\n+public class AbstractLazyDataViewTest {\n+\n+    private static final String ITEM1 = \"foo\";\n+\n+    @Tag(\"test-component\")\n+    private static class TestComponent extends Component {\n+    }\n+\n+    private ListDataProvider<String> badProvider;\n+    private DataProvider<String, Void> dataProvider;\n+    private DataCommunicator<String> dataCommunicator;\n+    private AbstractLazyDataView<String> dataView;\n+    private Component component;\n+    private DataCommunicatorTest.MockUI ui;\n+    @Mock\n+    private ArrayUpdater arrayUpdater;\n+\n+    @Before\n+    public void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        component = new TestComponent();\n+        ui = new DataCommunicatorTest.MockUI();\n+        ui.add(component);\n+\n+        ArrayUpdater.Update update = new ArrayUpdater.Update() {\n+\n+            @Override\n+            public void clear(int start, int length) {\n+\n+            }\n+\n+            @Override\n+            public void set(int start, List<JsonValue> items) {\n+\n+            }\n+\n+            @Override\n+            public void commit(int updateId) {\n+\n+            }\n+        };\n+\n+        Mockito.when(arrayUpdater.startUpdate(Mockito.anyInt()))\n+                .thenReturn(update);\n+\n+        badProvider = DataProvider.ofItems(\"foo\", \"bar\");\n+        dataProvider = DataProvider.fromCallbacks(query -> {\n+            // this is a stupid limitation and could maybe be removed\n+            query.getOffset();\n+            query.getLimit();\n+            return Stream.of(ITEM1, \"bar\", \"baz\");\n+        }, query -> 3);\n+        dataCommunicator = new DataCommunicator<>((item, jsonObject) -> {\n+        }, arrayUpdater, null, component.getElement().getNode());\n+        // need to set a lazy data provider to communicator or type check fails\n+        dataCommunicator.setDataProvider(dataProvider, null);\n+        dataCommunicator.setPageSize(50);\n+        dataView = new AbstractLazyDataView<String>(dataCommunicator,\n+                component) {\n+        };\n+    }\n+\n+    @Test\n+    public void defaults_withCorrectDataProvider_noErrors() {\n+        dataCommunicator.setDataProvider(dataProvider, null);\n+        Assert.assertTrue(dataView.isDefinedSize());\n+        Assert.assertEquals(BackEndDataProvider.class,\n+                dataView.getSupportedDataProviderType());\n+        Assert.assertEquals(3, dataView.getSize());\n+        // no items are activated\n+        Assert.assertFalse(dataView.contains(\"foo\"));\n+\n+        dataView.withUndefinedSize();\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+        dataView.withDefinedSize(query -> 5);\n+        Assert.assertTrue(dataView.isDefinedSize());\n+\n+        dataView.withUndefinedSize(query -> 123);\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+        dataView.withDefinedSize();\n+        Assert.assertTrue(dataView.isDefinedSize());\n+\n+        dataView.withUndefinedSize(500);\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+    }\n+\n+    // This is weird-ish behavior but kept for now\n+    @Test(expected = IllegalStateException.class)\n+    public void dataViewCreated_beforeSettingDataProvider_throws() {\n+        // data communicator has by default an empty list data provider ->\n+        // utilizing lazy data view fails\n+        new AbstractLazyDataView<String>(\n+                new DataCommunicator<>((item, jsonObject) -> {\n+                }, null, null, component.getElement().getNode()), component) {\n+        };\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void existingDataView_dataProviderIsChangedToInMemory_throws() {\n+        dataCommunicator.setDataProvider(badProvider, null);\n+        // any method call should be enough to trigger the check for type\n+        dataView.withUndefinedSize();\n+    }\n+\n+    @Test\n+    public void contains_itemsNotFetched_canCheckForItemWithBeforeClientResponse() {\n+        dataCommunicator.setRequestedRange(0, 50);\n+\n+        Assert.assertFalse(\"Item should not be loaded yet\",\n+                dataView.contains(\"foo\"));\n+\n+        AtomicBoolean capturedContains = new AtomicBoolean(false);\n+        ui.beforeClientResponse(component, executionContext -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4NDcxOQ=="}, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwMzY2MA==", "bodyText": "I don't think it works like that - the initial flush() has already been queued and will be the first thing that happens regardless of what setRequestedRange is called with and when.\nThe data communicator schedules the flush() in the constructor and thus it will be in the queue for beforeClientResponse immediately after the data communicator is created.\nSo as long as the user creates the component before making the scheduled call for contains, things will be fine", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r442103660", "createdAt": "2020-06-18T09:45:09Z", "author": {"login": "pleku"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractLazyDataViewTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Tag;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import elemental.json.JsonValue;\n+\n+public class AbstractLazyDataViewTest {\n+\n+    private static final String ITEM1 = \"foo\";\n+\n+    @Tag(\"test-component\")\n+    private static class TestComponent extends Component {\n+    }\n+\n+    private ListDataProvider<String> badProvider;\n+    private DataProvider<String, Void> dataProvider;\n+    private DataCommunicator<String> dataCommunicator;\n+    private AbstractLazyDataView<String> dataView;\n+    private Component component;\n+    private DataCommunicatorTest.MockUI ui;\n+    @Mock\n+    private ArrayUpdater arrayUpdater;\n+\n+    @Before\n+    public void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        component = new TestComponent();\n+        ui = new DataCommunicatorTest.MockUI();\n+        ui.add(component);\n+\n+        ArrayUpdater.Update update = new ArrayUpdater.Update() {\n+\n+            @Override\n+            public void clear(int start, int length) {\n+\n+            }\n+\n+            @Override\n+            public void set(int start, List<JsonValue> items) {\n+\n+            }\n+\n+            @Override\n+            public void commit(int updateId) {\n+\n+            }\n+        };\n+\n+        Mockito.when(arrayUpdater.startUpdate(Mockito.anyInt()))\n+                .thenReturn(update);\n+\n+        badProvider = DataProvider.ofItems(\"foo\", \"bar\");\n+        dataProvider = DataProvider.fromCallbacks(query -> {\n+            // this is a stupid limitation and could maybe be removed\n+            query.getOffset();\n+            query.getLimit();\n+            return Stream.of(ITEM1, \"bar\", \"baz\");\n+        }, query -> 3);\n+        dataCommunicator = new DataCommunicator<>((item, jsonObject) -> {\n+        }, arrayUpdater, null, component.getElement().getNode());\n+        // need to set a lazy data provider to communicator or type check fails\n+        dataCommunicator.setDataProvider(dataProvider, null);\n+        dataCommunicator.setPageSize(50);\n+        dataView = new AbstractLazyDataView<String>(dataCommunicator,\n+                component) {\n+        };\n+    }\n+\n+    @Test\n+    public void defaults_withCorrectDataProvider_noErrors() {\n+        dataCommunicator.setDataProvider(dataProvider, null);\n+        Assert.assertTrue(dataView.isDefinedSize());\n+        Assert.assertEquals(BackEndDataProvider.class,\n+                dataView.getSupportedDataProviderType());\n+        Assert.assertEquals(3, dataView.getSize());\n+        // no items are activated\n+        Assert.assertFalse(dataView.contains(\"foo\"));\n+\n+        dataView.withUndefinedSize();\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+        dataView.withDefinedSize(query -> 5);\n+        Assert.assertTrue(dataView.isDefinedSize());\n+\n+        dataView.withUndefinedSize(query -> 123);\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+        dataView.withDefinedSize();\n+        Assert.assertTrue(dataView.isDefinedSize());\n+\n+        dataView.withUndefinedSize(500);\n+        Assert.assertFalse(dataView.isDefinedSize());\n+\n+    }\n+\n+    // This is weird-ish behavior but kept for now\n+    @Test(expected = IllegalStateException.class)\n+    public void dataViewCreated_beforeSettingDataProvider_throws() {\n+        // data communicator has by default an empty list data provider ->\n+        // utilizing lazy data view fails\n+        new AbstractLazyDataView<String>(\n+                new DataCommunicator<>((item, jsonObject) -> {\n+                }, null, null, component.getElement().getNode()), component) {\n+        };\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void existingDataView_dataProviderIsChangedToInMemory_throws() {\n+        dataCommunicator.setDataProvider(badProvider, null);\n+        // any method call should be enough to trigger the check for type\n+        dataView.withUndefinedSize();\n+    }\n+\n+    @Test\n+    public void contains_itemsNotFetched_canCheckForItemWithBeforeClientResponse() {\n+        dataCommunicator.setRequestedRange(0, 50);\n+\n+        Assert.assertFalse(\"Item should not be loaded yet\",\n+                dataView.contains(\"foo\"));\n+\n+        AtomicBoolean capturedContains = new AtomicBoolean(false);\n+        ui.beforeClientResponse(component, executionContext -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4NDcxOQ=="}, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzY2OTIyOnYy", "diffSide": "RIGHT", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/HasLazyDataViewTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjowNzo0MlrOGlgzsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzo0NDozNFrOGljc0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4ODAxOA==", "bodyText": "The annotation expected is enough as you aren't checking the message or cause", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r441988018", "createdAt": "2020-06-18T06:07:42Z", "author": {"login": "caalador"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/HasLazyDataViewTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Tag;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+public class HasLazyDataViewTest {\n+\n+    @Tag(\"test-component\")\n+    private static class TestComponent extends Component\n+            implements HasLazyDataView<String, AbstractLazyDataView<String>> {\n+\n+        private DataCommunicator<String> dataCommunicator;\n+\n+        public TestComponent() {\n+            dataCommunicator = new DataCommunicator<>((item, jsonObject) -> {\n+            }, null, null, getElement().getNode());\n+        }\n+\n+        @Override\n+        public AbstractLazyDataView<String> setDataSource(BackEndDataProvider<String, Void> dataProvider) {\n+            dataCommunicator.setDataProvider(dataProvider,null);\n+            return getLazyDataView();\n+        }\n+\n+        @Override\n+        public AbstractLazyDataView<String> getLazyDataView() {\n+            return new AbstractLazyDataView<String>(dataCommunicator, this) {\n+            };\n+        }\n+    }\n+\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void setDataSourceCountCallback_switchesToDefinedSize_throwsOnSizeQuery() {\n+        TestComponent testComponent = new TestComponent();\n+        Assert.assertTrue(testComponent.getLazyDataView().isDefinedSize());\n+\n+        // uses a NOOP count callback that will throw when called\n+        testComponent.setDataSource(query -> Stream.of(\"foo\",\"bar\",\"baz\"));\n+\n+        Assert.assertFalse(testComponent.getLazyDataView().isDefinedSize());\n+\n+        testComponent.getLazyDataView().withDefinedSize();\n+\n+        expectedException.expect(IllegalStateException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAzMTMxNA==", "bodyText": "Oops, it was left accidentally though. I wanted to check that the exception is not thrown before that moment\n(and actually because of that the test was invalid and failing too early :))", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r442031314", "createdAt": "2020-06-18T07:44:34Z", "author": {"login": "pleku"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/HasLazyDataViewTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Tag;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+public class HasLazyDataViewTest {\n+\n+    @Tag(\"test-component\")\n+    private static class TestComponent extends Component\n+            implements HasLazyDataView<String, AbstractLazyDataView<String>> {\n+\n+        private DataCommunicator<String> dataCommunicator;\n+\n+        public TestComponent() {\n+            dataCommunicator = new DataCommunicator<>((item, jsonObject) -> {\n+            }, null, null, getElement().getNode());\n+        }\n+\n+        @Override\n+        public AbstractLazyDataView<String> setDataSource(BackEndDataProvider<String, Void> dataProvider) {\n+            dataCommunicator.setDataProvider(dataProvider,null);\n+            return getLazyDataView();\n+        }\n+\n+        @Override\n+        public AbstractLazyDataView<String> getLazyDataView() {\n+            return new AbstractLazyDataView<String>(dataCommunicator, this) {\n+            };\n+        }\n+    }\n+\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void setDataSourceCountCallback_switchesToDefinedSize_throwsOnSizeQuery() {\n+        TestComponent testComponent = new TestComponent();\n+        Assert.assertTrue(testComponent.getLazyDataView().isDefinedSize());\n+\n+        // uses a NOOP count callback that will throw when called\n+        testComponent.setDataSource(query -> Stream.of(\"foo\",\"bar\",\"baz\"));\n+\n+        Assert.assertFalse(testComponent.getLazyDataView().isDefinedSize());\n+\n+        testComponent.getLazyDataView().withDefinedSize();\n+\n+        expectedException.expect(IllegalStateException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4ODAxOA=="}, "originalCommit": {"oid": "d70157c7c025db22bac5150f7e23d5f4f849e64b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDE4Nzc1OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODo1MTo1MFrOGll5-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODo1MTo1MFrOGll5-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA3MTU0Nw==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/vaadin/flow/pull/8578#discussion_r442071547", "createdAt": "2020-06-18T08:51:50Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java", "diffHunk": "@@ -70,22 +70,25 @@ public Registration addSizeChangeListener(\n     protected abstract Class<?> getSupportedDataProviderType();\n \n     /**\n-     * Verifies an obtained {@link DataProvider} type is appropriate\n-     * for current Data View type.\n+     * Verifies an obtained {@link DataProvider} type is appropriate for current\n+     * Data View type.\n      *\n      * @param dataProviderType\n-     *         data provider type to be verified\n+     *            data provider type to be verified\n      * @throws IllegalStateException\n-     *         if data provider type is incompatible with data view type\n+     *             if data provider type is incompatible with data view type\n      */\n     protected final void verifyDataProviderType(Class<?> dataProviderType) {\n+        // TODO https://github.com/vaadin/flow/issues/8583", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5c89f7cd0191fa04a879358d48675b365d314d"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3513, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}