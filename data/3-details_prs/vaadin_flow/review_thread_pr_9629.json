{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1ODc1NDgw", "number": 9629, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMzozNjo1N1rOFD_RDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMzo0MDo1MVrOFD_XnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzI2NjA0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMzozNjo1N1rOID5D4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDoxNTo1OVrOIFJT-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk1MTUyMw==", "bodyText": "I wonder is it guaranteed that this way of detecting request from SW will keep working in all supported browsers? Have we tested this on Chrome, Firefox and Safari? Any idea if this referer header for SW initiated requests is part of some spec?\nI also started wondering does the user need to download the index page twice now on first load (first normally with the token and then SW would load and precache it without the token)? If so it would be good if we can somehow avoid the double load but that could be a new issue.\nOtherwise the code seems good to me. If it works like intended on all supported browsers now, I'm ok with merging this.", "url": "https://github.com/vaadin/flow/pull/9629#discussion_r540951523", "createdAt": "2020-12-11T13:36:57Z", "author": {"login": "Haprog"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java", "diffHunk": "@@ -162,10 +162,15 @@ private void addDevmodeGizmo(Document indexDocument, VaadinSession session,\n     }\n \n     private void addInitialFlow(JsonObject initialJson, Document indexDocument,\n-                                VaadinSession session) {\n-        String csrfToken = session.getCsrfToken();\n-        if (csrfToken != null) {\n-            initialJson.put(CSRF_TOKEN, csrfToken);\n+                                VaadinSession session, VaadinRequest request) {\n+        // Do not add the CSRF token if the request comes from the service\n+        // worker, to not have the token cached locally (#9537)\n+        String referer = request.getHeader(\"referer\");\n+        if (referer == null || !referer.endsWith(\"/sw.js\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0c9a5c8a19cd68ecf8592cdf849ad2902904b6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk5MjQ0OA==", "bodyText": "Tested it on Chrome, Firefox and Safari, and the use case in the ticket work (i.e., enqueueing requests and logging out while offline does not cause the deferred request to complete when going back online). I am doubtful whether referer is a standard or just a lucky coincidence, will do some more investigation regarding that.", "url": "https://github.com/vaadin/flow/pull/9629#discussion_r540992448", "createdAt": "2020-12-11T14:37:21Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java", "diffHunk": "@@ -162,10 +162,15 @@ private void addDevmodeGizmo(Document indexDocument, VaadinSession session,\n     }\n \n     private void addInitialFlow(JsonObject initialJson, Document indexDocument,\n-                                VaadinSession session) {\n-        String csrfToken = session.getCsrfToken();\n-        if (csrfToken != null) {\n-            initialJson.put(CSRF_TOKEN, csrfToken);\n+                                VaadinSession session, VaadinRequest request) {\n+        // Do not add the CSRF token if the request comes from the service\n+        // worker, to not have the token cached locally (#9537)\n+        String referer = request.getHeader(\"referer\");\n+        if (referer == null || !referer.endsWith(\"/sw.js\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk1MTUyMw=="}, "originalCommit": {"oid": "0a0c9a5c8a19cd68ecf8592cdf849ad2902904b6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2Mjk0OQ==", "bodyText": "I tested that this seems to work ok currently also in Brave, Vivaldi and Firefox with default settings at least.\nBut if I set network.http.sendRefererHeader to 0 in Firefox (about:config), then the detection breaks and CSRF token is stored in workbox cache. Maybe it's still ok for now, but if we get a bug ticket about this later, we might want to consider implementing this in some other way.", "url": "https://github.com/vaadin/flow/pull/9629#discussion_r542162949", "createdAt": "2020-12-14T07:25:34Z", "author": {"login": "Haprog"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java", "diffHunk": "@@ -162,10 +162,15 @@ private void addDevmodeGizmo(Document indexDocument, VaadinSession session,\n     }\n \n     private void addInitialFlow(JsonObject initialJson, Document indexDocument,\n-                                VaadinSession session) {\n-        String csrfToken = session.getCsrfToken();\n-        if (csrfToken != null) {\n-            initialJson.put(CSRF_TOKEN, csrfToken);\n+                                VaadinSession session, VaadinRequest request) {\n+        // Do not add the CSRF token if the request comes from the service\n+        // worker, to not have the token cached locally (#9537)\n+        String referer = request.getHeader(\"referer\");\n+        if (referer == null || !referer.endsWith(\"/sw.js\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk1MTUyMw=="}, "originalCommit": {"oid": "0a0c9a5c8a19cd68ecf8592cdf849ad2902904b6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2NjM2Mg==", "bodyText": "Decided to leave this solution for now. Other possibilities if this causes problems are: always sending the token in index.html but filtering it in precaching, as above but with a custom header in the request, or using cookie-based token transfer.", "url": "https://github.com/vaadin/flow/pull/9629#discussion_r542266362", "createdAt": "2020-12-14T10:15:59Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java", "diffHunk": "@@ -162,10 +162,15 @@ private void addDevmodeGizmo(Document indexDocument, VaadinSession session,\n     }\n \n     private void addInitialFlow(JsonObject initialJson, Document indexDocument,\n-                                VaadinSession session) {\n-        String csrfToken = session.getCsrfToken();\n-        if (csrfToken != null) {\n-            initialJson.put(CSRF_TOKEN, csrfToken);\n+                                VaadinSession session, VaadinRequest request) {\n+        // Do not add the CSRF token if the request comes from the service\n+        // worker, to not have the token cached locally (#9537)\n+        String referer = request.getHeader(\"referer\");\n+        if (referer == null || !referer.endsWith(\"/sw.js\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk1MTUyMw=="}, "originalCommit": {"oid": "0a0c9a5c8a19cd68ecf8592cdf849ad2902904b6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzI4Mjg1OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/Authentication.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMzo0MDo1MVrOID5NZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDoyMDoyNVrOID6ztA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk1Mzk1Nw==", "bodyText": "BTW not blocking, but looks like try { await .... } catch { } would fit here, making for less code not requiring inline callbacks.", "url": "https://github.com/vaadin/flow/pull/9629#discussion_r540953957", "createdAt": "2020-12-11T13:40:51Z", "author": {"login": "platosha"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/Authentication.ts", "diffHunk": "@@ -81,12 +81,17 @@ export async function login(username: string, password: string, options?: LoginO\n export async function logout(options?: LogoutOptions) {\n   // this assumes the default Spring Security logout configuration (handler URL)\n   const logoutUrl = options && options.logoutUrl ? options.logoutUrl : '/logout';\n-  const response = await fetch(logoutUrl);\n \n-  // TODO: find a more efficient way to get a new CSRF token\n-  // parsing the full response body just to get a token may be wasteful\n-  const token = getCsrfTokenFromResponseBody(await response.text());\n-  (window as any).Vaadin.TypeScript.csrfToken = token;\n+  await fetch(logoutUrl).then(async response => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0c9a5c8a19cd68ecf8592cdf849ad2902904b6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MDE0OA==", "bodyText": "Done.", "url": "https://github.com/vaadin/flow/pull/9629#discussion_r540980148", "createdAt": "2020-12-11T14:20:25Z", "author": {"login": "joheriks"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/Authentication.ts", "diffHunk": "@@ -81,12 +81,17 @@ export async function login(username: string, password: string, options?: LoginO\n export async function logout(options?: LogoutOptions) {\n   // this assumes the default Spring Security logout configuration (handler URL)\n   const logoutUrl = options && options.logoutUrl ? options.logoutUrl : '/logout';\n-  const response = await fetch(logoutUrl);\n \n-  // TODO: find a more efficient way to get a new CSRF token\n-  // parsing the full response body just to get a token may be wasteful\n-  const token = getCsrfTokenFromResponseBody(await response.text());\n-  (window as any).Vaadin.TypeScript.csrfToken = token;\n+  await fetch(logoutUrl).then(async response => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk1Mzk1Nw=="}, "originalCommit": {"oid": "0a0c9a5c8a19cd68ecf8592cdf849ad2902904b6"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2920, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}