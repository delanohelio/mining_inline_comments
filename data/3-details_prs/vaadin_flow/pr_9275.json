{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzODYyODAw", "number": 9275, "title": "fix: Sync HierarchicalDataCommunicator's expand state with client side", "bodyText": "HierarchicalDataCommunicator's expanded state were not being synchronized with client side and TreeGrid's expanded nodes were being collapsed after re-attaching.\nFixes: #9175", "createdAt": "2020-11-02T07:39:27Z", "url": "https://github.com/vaadin/flow/pull/9275", "merged": true, "mergeCommit": {"oid": "bb51a2b5d3e04e28994f1fc619e7cf0848596625"}, "closed": true, "closedAt": "2020-11-03T07:37:29Z", "author": {"login": "taefi"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYffl_gH2gAyNTEzODYyODAwOjJlZjMzMzczNTYwNTI5YzhmNjk0ZGVlZDA3NGUwODc4ZjljMDYxMGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdY0CoGgFqTUyMjIzNjAxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2ef33373560529c8f694deed074e0878f9c0610f", "author": {"user": {"login": "taefi", "name": "Soroosh Taefi"}}, "url": "https://github.com/vaadin/flow/commit/2ef33373560529c8f694deed074e0878f9c0610f", "committedDate": "2020-11-02T07:32:59Z", "message": "Sync expanded state with client side."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDUwMzE3", "url": "https://github.com/vaadin/flow/pull/9275#pullrequestreview-521450317", "createdAt": "2020-11-02T09:17:57Z", "commit": {"oid": "2ef33373560529c8f694deed074e0878f9c0610f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxNzo1N1rOHr7-Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTozOTozNlrOHr8wxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMzM1NA==", "bodyText": "For the current implementation they are the result of DataProvider::getId(), aren't they? IdentifierProvider is not used currently in HierarchyMapper, so maybe better to refer to getId method?", "url": "https://github.com/vaadin/flow/pull/9275#discussion_r515833354", "createdAt": "2020-11-02T09:17:57Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/hierarchy/HierarchyMapper.java", "diffHunk": "@@ -627,6 +627,18 @@ public void destroyAllData() {\n      * @return {@code true} if there is any expanded items.\n      */\n     public boolean hasExpandedItems() {\n-        return !expandedItemIds.isEmpty();\n+        return !expandedItems.isEmpty();\n+    }\n+\n+    /**\n+     * Returns the mappings between object-ids and their corresponding items for\n+     * the expanded items. Object ids are the result of applying data provider's\n+     * {@code IdentifierProvider} to the items.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef33373560529c8f694deed074e0878f9c0610f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzOTM2NA==", "bodyText": "Is this sout a leftover after debugging? Let's remove it", "url": "https://github.com/vaadin/flow/pull/9275#discussion_r515839364", "createdAt": "2020-11-02T09:27:51Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/hierarchy/HierarchyMapperWithDataTest.java", "diffHunk": "@@ -224,6 +232,137 @@ public void fetchWithFilter() {\n         verifyFetchIsCorrect(expectedResult, range);\n     }\n \n+    @Test\n+    public void expandingItems_getExpandedItems_shouldReturnCorrectExpandedItems() {\n+\n+        TreeNode root = new TreeNode(\"root\", null);\n+        TreeNode first1 = new TreeNode(\"first-1\", root);\n+        TreeNode second1 = new TreeNode(\"second-1\", root);\n+        TreeNode first11 = new TreeNode(\"first-1-1\", first1);\n+        TreeNode second11 = new TreeNode(\"second-1-1\", second1);\n+\n+        HierarchicalDataProvider<TreeNode, Void> dataProvider =\n+                new AbstractBackEndHierarchicalDataProvider<TreeNode, Void>() {\n+\n+                    @Override\n+                    public int getChildCount(HierarchicalQuery<TreeNode, Void>\n+                                                     query) {\n+                        if (query.getParent() == null) {\n+                            return 2;\n+                        }\n+                        if (query.getParent().getName().equals(\"first-1\") ||\n+                            query.getParent().getName().equals(\"second-1\")) {\n+                            return 1;\n+                        }\n+                        return 0;\n+                    }\n+\n+                    @Override\n+                    public boolean hasChildren(TreeNode item) {\n+                        return item.getParent() == null ||\n+                                item.getName().equals(\"first-1\") ||\n+                                item.getName().equals(\"second-1\");\n+                    }\n+\n+                    @Override\n+                    protected Stream<TreeNode> fetchChildrenFromBackEnd(\n+                            HierarchicalQuery<TreeNode, Void> query) {\n+                        if (query.getParent() == null) {\n+                            return Arrays.stream(new TreeNode[]{\n+                                    first1, second1\n+                            });\n+                        }\n+                        if (query.getParent().getName().equals(\"first-1\")) {\n+                            return Arrays.stream(new TreeNode[]{first11});\n+                        }\n+                        if (query.getParent().getName().equals(\"second-1\")) {\n+                            return Arrays.stream(new TreeNode[]{second11});\n+                        }\n+                        return Stream.<TreeNode>builder().build();\n+                    }\n+                };\n+\n+        HierarchyMapper<TreeNode, Void> hierarchyMapper = new HierarchyMapper<>(\n+                dataProvider\n+        );\n+\n+        Map<Object, TreeNode> expandedItems = hierarchyMapper.getExpandedItems();\n+        Assert.assertEquals(0L, expandedItems.keySet().size());\n+\n+        hierarchyMapper.expand(root);\n+        hierarchyMapper.expand(second1);\n+\n+        System.out.println(hierarchyMapper.getExpandedItems());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef33373560529c8f694deed074e0878f9c0610f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0MTE0NA==", "bodyText": "Good to add a Assert.assertNotNull(expandedItems); right away", "url": "https://github.com/vaadin/flow/pull/9275#discussion_r515841144", "createdAt": "2020-11-02T09:30:41Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/hierarchy/HierarchyMapperWithDataTest.java", "diffHunk": "@@ -224,6 +232,137 @@ public void fetchWithFilter() {\n         verifyFetchIsCorrect(expectedResult, range);\n     }\n \n+    @Test\n+    public void expandingItems_getExpandedItems_shouldReturnCorrectExpandedItems() {\n+\n+        TreeNode root = new TreeNode(\"root\", null);\n+        TreeNode first1 = new TreeNode(\"first-1\", root);\n+        TreeNode second1 = new TreeNode(\"second-1\", root);\n+        TreeNode first11 = new TreeNode(\"first-1-1\", first1);\n+        TreeNode second11 = new TreeNode(\"second-1-1\", second1);\n+\n+        HierarchicalDataProvider<TreeNode, Void> dataProvider =\n+                new AbstractBackEndHierarchicalDataProvider<TreeNode, Void>() {\n+\n+                    @Override\n+                    public int getChildCount(HierarchicalQuery<TreeNode, Void>\n+                                                     query) {\n+                        if (query.getParent() == null) {\n+                            return 2;\n+                        }\n+                        if (query.getParent().getName().equals(\"first-1\") ||\n+                            query.getParent().getName().equals(\"second-1\")) {\n+                            return 1;\n+                        }\n+                        return 0;\n+                    }\n+\n+                    @Override\n+                    public boolean hasChildren(TreeNode item) {\n+                        return item.getParent() == null ||\n+                                item.getName().equals(\"first-1\") ||\n+                                item.getName().equals(\"second-1\");\n+                    }\n+\n+                    @Override\n+                    protected Stream<TreeNode> fetchChildrenFromBackEnd(\n+                            HierarchicalQuery<TreeNode, Void> query) {\n+                        if (query.getParent() == null) {\n+                            return Arrays.stream(new TreeNode[]{\n+                                    first1, second1\n+                            });\n+                        }\n+                        if (query.getParent().getName().equals(\"first-1\")) {\n+                            return Arrays.stream(new TreeNode[]{first11});\n+                        }\n+                        if (query.getParent().getName().equals(\"second-1\")) {\n+                            return Arrays.stream(new TreeNode[]{second11});\n+                        }\n+                        return Stream.<TreeNode>builder().build();\n+                    }\n+                };\n+\n+        HierarchyMapper<TreeNode, Void> hierarchyMapper = new HierarchyMapper<>(\n+                dataProvider\n+        );\n+\n+        Map<Object, TreeNode> expandedItems = hierarchyMapper.getExpandedItems();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef33373560529c8f694deed074e0878f9c0610f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0MjYzOQ==", "bodyText": "Should the test name be like getExpandedItems_expandSomeItems_returnsCorrectExpandedItems", "url": "https://github.com/vaadin/flow/pull/9275#discussion_r515842639", "createdAt": "2020-11-02T09:33:10Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/hierarchy/HierarchyMapperWithDataTest.java", "diffHunk": "@@ -224,6 +232,137 @@ public void fetchWithFilter() {\n         verifyFetchIsCorrect(expectedResult, range);\n     }\n \n+    @Test\n+    public void expandingItems_getExpandedItems_shouldReturnCorrectExpandedItems() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef33373560529c8f694deed074e0878f9c0610f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0NDE0Mg==", "bodyText": "Since this data provider is used more than once, is it better to extract it to an inner class and reuse?", "url": "https://github.com/vaadin/flow/pull/9275#discussion_r515844142", "createdAt": "2020-11-02T09:35:50Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/hierarchy/HierarchyMapperWithDataTest.java", "diffHunk": "@@ -224,6 +232,137 @@ public void fetchWithFilter() {\n         verifyFetchIsCorrect(expectedResult, range);\n     }\n \n+    @Test\n+    public void expandingItems_getExpandedItems_shouldReturnCorrectExpandedItems() {\n+\n+        TreeNode root = new TreeNode(\"root\", null);\n+        TreeNode first1 = new TreeNode(\"first-1\", root);\n+        TreeNode second1 = new TreeNode(\"second-1\", root);\n+        TreeNode first11 = new TreeNode(\"first-1-1\", first1);\n+        TreeNode second11 = new TreeNode(\"second-1-1\", second1);\n+\n+        HierarchicalDataProvider<TreeNode, Void> dataProvider =\n+                new AbstractBackEndHierarchicalDataProvider<TreeNode, Void>() {\n+\n+                    @Override\n+                    public int getChildCount(HierarchicalQuery<TreeNode, Void>\n+                                                     query) {\n+                        if (query.getParent() == null) {\n+                            return 2;\n+                        }\n+                        if (query.getParent().getName().equals(\"first-1\") ||\n+                            query.getParent().getName().equals(\"second-1\")) {\n+                            return 1;\n+                        }\n+                        return 0;\n+                    }\n+\n+                    @Override\n+                    public boolean hasChildren(TreeNode item) {\n+                        return item.getParent() == null ||\n+                                item.getName().equals(\"first-1\") ||\n+                                item.getName().equals(\"second-1\");\n+                    }\n+\n+                    @Override\n+                    protected Stream<TreeNode> fetchChildrenFromBackEnd(\n+                            HierarchicalQuery<TreeNode, Void> query) {\n+                        if (query.getParent() == null) {\n+                            return Arrays.stream(new TreeNode[]{\n+                                    first1, second1\n+                            });\n+                        }\n+                        if (query.getParent().getName().equals(\"first-1\")) {\n+                            return Arrays.stream(new TreeNode[]{first11});\n+                        }\n+                        if (query.getParent().getName().equals(\"second-1\")) {\n+                            return Arrays.stream(new TreeNode[]{second11});\n+                        }\n+                        return Stream.<TreeNode>builder().build();\n+                    }\n+                };\n+\n+        HierarchyMapper<TreeNode, Void> hierarchyMapper = new HierarchyMapper<>(\n+                dataProvider\n+        );\n+\n+        Map<Object, TreeNode> expandedItems = hierarchyMapper.getExpandedItems();\n+        Assert.assertEquals(0L, expandedItems.keySet().size());\n+\n+        hierarchyMapper.expand(root);\n+        hierarchyMapper.expand(second1);\n+\n+        System.out.println(hierarchyMapper.getExpandedItems());\n+\n+        expandedItems = hierarchyMapper.getExpandedItems();\n+        Assert.assertNotNull(expandedItems);\n+        Assert.assertEquals(2L, expandedItems.keySet().size());\n+        Assert.assertArrayEquals(new Object[]{\"root\", \"second-1\"},\n+                expandedItems.values().stream()\n+                        .map(TreeNode::getName)\n+                        .sorted().toArray());\n+    }\n+\n+    @Test\n+    public void getExpandedItems_tryToAddItemsToCollection_shouldThrowException() {\n+\n+        exceptionRule.expect(UnsupportedOperationException.class);\n+\n+        TreeNode root = new TreeNode(\"root\", null);\n+        TreeNode first1 = new TreeNode(\"first-1\", root);\n+        TreeNode second1 = new TreeNode(\"second-2\", root);\n+        TreeNode first11 = new TreeNode(\"first-1-1\", first1);\n+        TreeNode second11 = new TreeNode(\"second-1-1\", second1);\n+\n+        HierarchicalDataProvider<TreeNode, Void> dataProvider =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef33373560529c8f694deed074e0878f9c0610f"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0NjM0MQ==", "bodyText": "Does it make sense to add one more unit test to verify that the update contains the proper bunch of JsonObject for expanded items after reset()?", "url": "https://github.com/vaadin/flow/pull/9275#discussion_r515846341", "createdAt": "2020-11-02T09:39:36Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/hierarchy/HierarchicalDataCommunicator.java", "diffHunk": "@@ -158,6 +158,19 @@ public void reset() {\n             HierarchicalUpdate update = arrayUpdater\n                     .startUpdate(getHierarchyMapper().getRootSize());\n             update.enqueue(\"$connector.ensureHierarchy\");\n+\n+            Collection<T> expandedItems = getHierarchyMapper().getExpandedItems().values();\n+            update.enqueue(\"$connector.expandItems\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef33373560529c8f694deed074e0878f9c0610f"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNTAwMzUw", "url": "https://github.com/vaadin/flow/pull/9275#pullrequestreview-521500350", "createdAt": "2020-11-02T10:22:25Z", "commit": {"oid": "2ef33373560529c8f694deed074e0878f9c0610f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDoyMjoyNVrOHr-XJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDoyMjoyNVrOHr-XJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MjU0OQ==", "bodyText": "I believe that it's better to return the collection of items, not a whole mapping. From a client code perspective, it's not that necessary to have a mapping (someone can recalculate the object ids if needed), but to know which items are expanded. So I would suggest to limit this method to return Collection<T>", "url": "https://github.com/vaadin/flow/pull/9275#discussion_r515872549", "createdAt": "2020-11-02T10:22:25Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/hierarchy/HierarchyMapper.java", "diffHunk": "@@ -627,6 +627,18 @@ public void destroyAllData() {\n      * @return {@code true} if there is any expanded items.\n      */\n     public boolean hasExpandedItems() {\n-        return !expandedItemIds.isEmpty();\n+        return !expandedItems.isEmpty();\n+    }\n+\n+    /**\n+     * Returns the mappings between object-ids and their corresponding items for\n+     * the expanded items. Object ids are the result of applying data provider's\n+     * {@code IdentifierProvider} to the items.\n+     *\n+     * @return an unmodifiable {@code Map} between object-ids and their\n+     * items corresponding items for the expanded items.\n+     */\n+    public Map<Object, T> getExpandedItems() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef33373560529c8f694deed074e0878f9c0610f"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0097eb16de377045538b33202f23130082a2ad18", "author": {"user": {"login": "taefi", "name": "Soroosh Taefi"}}, "url": "https://github.com/vaadin/flow/commit/0097eb16de377045538b33202f23130082a2ad18", "committedDate": "2020-11-02T20:12:38Z", "message": "Added a test and applied review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMjM2MDE2", "url": "https://github.com/vaadin/flow/pull/9275#pullrequestreview-522236016", "createdAt": "2020-11-03T07:29:21Z", "commit": {"oid": "0097eb16de377045538b33202f23130082a2ad18"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4751, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}