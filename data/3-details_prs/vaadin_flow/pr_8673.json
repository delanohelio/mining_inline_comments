{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNjMzMDk3", "number": 8673, "title": "fix: use default JSR-380 error messages in client-side validators", "bodyText": "the default error messages in the built-in client-side validators are  interpolated in the same way as on the server-side\ncustom error messages (e.g. @Size(message = \"my message {min} {max}\") are not interpolated\n\nFixes #8385", "createdAt": "2020-07-01T11:22:35Z", "url": "https://github.com/vaadin/flow/pull/8673", "merged": true, "mergeCommit": {"oid": "5e2f3442ec8084098162edd5b9f5b6cde478b419"}, "closed": true, "closedAt": "2020-07-02T19:35:34Z", "author": {"login": "vlukashov"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwoIungH2gAyNDQyNjMzMDk3OjYzZDIzODhhYTlhYzhlNWRlMGIwNTc4ODNmNDhkNWVjMjljNjk0YmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcw_lIAgFqTQ0MTcyNDI0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "63d2388aa9ac8e5de0b057883f48d5ec29c694ba", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/63d2388aa9ac8e5de0b057883f48d5ec29c694ba", "committedDate": "2020-07-01T11:00:11Z", "message": "fix: use default JSR-380 error messages\n\n - the default error messages in the built-in client-side validators are  interpolated in the same way as on the server-side\n - custom error messages (e.g. `@Size(message = \"my message {min} {max}\")` are not interpolated\n\nFixes #8385"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjQzMjgw", "url": "https://github.com/vaadin/flow/pull/8673#pullrequestreview-441643280", "createdAt": "2020-07-02T12:47:01Z", "commit": {"oid": "63d2388aa9ac8e5de0b057883f48d5ec29c694ba"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0NzowMVrOGsLQ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo0OTozOVrOGsLWow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NTA3Nw==", "bodyText": "Why isn't this method name prefixed with underscore like the similar helpers above?", "url": "https://github.com/vaadin/flow/pull/8673#discussion_r448975077", "createdAt": "2020-07-02T12:47:01Z", "author": {"login": "Haprog"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Validators.ts", "diffHunk": "@@ -145,25 +230,41 @@ export class Digits extends AbstractValidator<string> {\n }\n \n export class Past extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a past date', ...attrs });\n+  }\n   validate = (value: any) => validator.isBefore(value);\n }\n export class PastOrPresent extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a date in the past or in the present', ...attrs });\n+  }\n   validate = () => { throw new Error('Form Validator for PastOrPresent not implemented yet') };\n }\n export class Future extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a future date', ...attrs });\n+  }\n   validate = (value: any) => validator.isAfter(value);\n }\n export class FutureOrPresent extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a date in the present or in the future', ...attrs });\n+  }\n   validate = () => { throw new Error('Form Validator for FutureOrPresent not implemented yet') };\n }\n \n+function regexp(attrs: PatternAttributes | string | RegExp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d2388aa9ac8e5de0b057883f48d5ec29c694ba"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NjU0Nw==", "bodyText": "This isn't exactly the same message as in https://beanvalidation.org/2.0/spec/#builtinconstraints where it is must match the following regular expression: {regexp} I think it would be clearer to use this longer version.", "url": "https://github.com/vaadin/flow/pull/8673#discussion_r448976547", "createdAt": "2020-07-02T12:49:39Z", "author": {"login": "Haprog"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Validators.ts", "diffHunk": "@@ -145,25 +230,41 @@ export class Digits extends AbstractValidator<string> {\n }\n \n export class Past extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a past date', ...attrs });\n+  }\n   validate = (value: any) => validator.isBefore(value);\n }\n export class PastOrPresent extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a date in the past or in the present', ...attrs });\n+  }\n   validate = () => { throw new Error('Form Validator for PastOrPresent not implemented yet') };\n }\n export class Future extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a future date', ...attrs });\n+  }\n   validate = (value: any) => validator.isAfter(value);\n }\n export class FutureOrPresent extends AbstractValidator<any> {\n+  constructor(attrs?: ValidatorAttributes) {\n+    super({ message: 'must be a date in the present or in the future', ...attrs });\n+  }\n   validate = () => { throw new Error('Form Validator for FutureOrPresent not implemented yet') };\n }\n \n+function regexp(attrs: PatternAttributes | string | RegExp) {\n+  return typeof attrs === 'string' ? new RegExp(attrs)\n+    : attrs instanceof RegExp ? attrs\n+      : typeof attrs.regexp === 'string' ? new RegExp(attrs.regexp) : attrs.regexp;\n+}\n+\n export class Pattern extends AbstractValidator<string> {\n   regexp: RegExp;\n   constructor(attrs: PatternAttributes | string | RegExp) {\n-    super(typeof attrs === 'string' || attrs instanceof RegExp ? {} : attrs);\n-    this.regexp = typeof attrs === 'string' ? new RegExp(attrs)\n-      : attrs instanceof RegExp ? attrs\n-        : typeof attrs.regexp === 'string' ? new RegExp(attrs.regexp) : attrs.regexp;\n+    super({ message: `must match \"${regexp(attrs)}\"`, ..._asValidatorAttributes(attrs) });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d2388aa9ac8e5de0b057883f48d5ec29c694ba"}, "originalPosition": 222}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f706c02fceebb17ce0d04d31cdeed7bc42e859b", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/1f706c02fceebb17ce0d04d31cdeed7bc42e859b", "committedDate": "2020-07-02T13:39:30Z", "message": "address review comments\n\n - rename a local helper function from `regexp()` into `_regexp()` to follow the same naming pattern as for all other similar helpers\n - use the standard error message for `@Pattern`, as specified in https://beanvalidation.org/2.0-jsr380/spec/#standard-resolver-messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzI0MjQ0", "url": "https://github.com/vaadin/flow/pull/8673#pullrequestreview-441724244", "createdAt": "2020-07-02T14:19:01Z", "commit": {"oid": "1f706c02fceebb17ce0d04d31cdeed7bc42e859b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 258, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}