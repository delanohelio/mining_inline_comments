{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MzAzOTEz", "number": 8303, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDozNzoxOFrOD80jTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzoyNDozMFrOD83sYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTAyMTU3OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDozNzoxOFrOGV_ndg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDozNzoxOFrOGV_ndg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcxNTU3NA==", "bodyText": "Remove usage of generic wildcard type.", "url": "https://github.com/vaadin/flow/pull/8303#discussion_r425715574", "createdAt": "2020-05-15T10:37:18Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataController.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import com.vaadin.flow.shared.Registration;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Base class for abstract layer between {@link DataView} and {@link DataCommunicator}.\n+ * Allows {@link DataView} high-level API to be separated from component's specifics.\n+ *\n+ * @param <T>\n+ *        data type\n+ */\n+public interface DataController<T> extends Serializable {\n+\n+    /**\n+     * Returns {@link DataProvider} instance tied with component/data communicator.\n+     *\n+     * @return data provider instance\n+     */\n+    DataProvider<T, ?> getDataProvider();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df7379f7d1cae115f6b3962ccc1dcefd22c4a953"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTUzNjIyOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzoyNDoyOFrOGWEt3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzoyNDoyOFrOGWEt3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5OTEzNQ==", "bodyText": "Remove usage of generic wildcard type.", "url": "https://github.com/vaadin/flow/pull/8303#discussion_r425799135", "createdAt": "2020-05-15T13:24:28Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import com.vaadin.flow.shared.Registration;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Abstract data view implementation which takes care of processing\n+ * component data size change events.\n+ *\n+ * @param <T>\n+ *        data type\n+ */\n+public abstract class AbstractDataView<T> implements DataView<T> {\n+\n+    protected DataController<T> dataController;\n+\n+    /**\n+     * Creates a new instance of {@link AbstractDataView} subclass\n+     * and verifies the passed data controller is compatible with this\n+     * data view implementation.\n+     * <p>\n+     * Data controller reference is stored then internally and used for\n+     * data set manipulations.\n+     *\n+     * @param dataController\n+     *          data controller reference\n+     */\n+    public AbstractDataView(DataController<T> dataController) {\n+        Objects.requireNonNull(dataController, \"DataController cannot be null\");\n+        this.dataController = dataController;\n+        DataProvider<T, ?> dataProvider = dataController.getDataProvider();\n+        Objects.requireNonNull(dataProvider, \"DataProvider cannot be null\");\n+        verifyDataProviderType(dataProvider.getClass());\n+    }\n+\n+    @Override\n+    public Registration addSizeChangeListener(SizeChangeListener listener) {\n+        Objects.requireNonNull(listener, \"SizeChangeListener cannot be null\");\n+        return dataController.addSizeChangeListener(listener);\n+    }\n+\n+    /**\n+     * Returns supported {@link DataProvider} type for this {@link DataView}.\n+     *\n+     * @return supported data provider type\n+     */\n+    protected abstract Class<?> getSupportedDataProviderType();\n+\n+    /**\n+     * Verifies an obtained {@link DataProvider} type is appropriate\n+     * for current Data View type.\n+     *\n+     * @param dataProviderType\n+     *              data provider type to be verified\n+     *\n+     * @throws IllegalStateException\n+     *              if data provider type is incompatible with data view type\n+     */\n+    protected final void verifyDataProviderType(Class<?> dataProviderType) {\n+        Class<?> supportedDataProviderType = getSupportedDataProviderType();\n+        if (!supportedDataProviderType.isAssignableFrom(dataProviderType)) {\n+            final String message = String\n+                    .format(\"%s only supports '%s' or it's subclasses, but was given a '%s'\",\n+                            this.getClass().getSimpleName(), supportedDataProviderType.getSimpleName(),\n+                            dataProviderType.getSuperclass().getSimpleName());\n+            throw new IllegalStateException(message);\n+        }\n+    }\n+\n+    /**\n+     * Obtains an appropriate {@link DataProvider} instance from {@link DataController}.\n+     * Throws a runtime exception otherwise, if the {@link DataProvider} instance is incompatible\n+     * with current implementation of {@link DataView}.\n+     *\n+     * @return data provider instance\n+     *\n+     * @throws IllegalStateException if data provider type is incompatible\n+     */\n+    protected abstract DataProvider<T, ?> getDataProvider();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac3f237f703081b3ab0c83260d85060c70a2892"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTUzNjM1OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzoyNDozMFrOGWEt9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzoyNDozMFrOGWEt9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5OTE1OA==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/vaadin/flow/pull/8303#discussion_r425799158", "createdAt": "2020-05-15T13:24:30Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializableConsumer;\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Abstract list data view implementation which provides common methods\n+ * for fetching, filtering and sorting in-memory data to all {@link ListDataView} subclasses.\n+ *\n+ * @param <T>\n+ *        data type\n+ */\n+public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n+        implements ListDataView<T, AbstractListDataView<T>> {\n+\n+    /**\n+     * Creates a new instance of {@link AbstractListDataView} subclass\n+     * which rely on in-memory data set, i.e. data set stored in a collection.\n+     *\n+     * @param dataController\n+     *          data controller reference\n+     */\n+    public AbstractListDataView(DataController<T> dataController) {\n+        super(dataController);\n+    }\n+\n+    @Override\n+    public boolean hasNextItem(T item) {\n+        return getNextItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+    }\n+\n+    @Override\n+    public T getNextItem(T item) {\n+        List<T> items = getAllItemsAsList();\n+        Optional<Integer> nextItemIndex = getNextItemIndex(notNull(item), items);\n+        return nextItemIndex.map(items::get).orElse(null);\n+    }\n+\n+    @Override\n+    public boolean hasPreviousItem(T item) {\n+        return getPreviousItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+    }\n+\n+    @Override\n+    public T getPreviousItem(T item) {\n+        List<T> items = getAllItemsAsList();\n+        Optional<Integer> previousItemIndex = getPreviousItemIndex(notNull(item), items);\n+        return previousItemIndex.map(items::get).orElse(null);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> withFilter(SerializablePredicate<T> filter) {\n+        return withFilterOrOrder(dataProvider -> dataProvider.setFilter(filter));\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> withSortComparator(SerializableComparator<T> sortComparator) {\n+        return withFilterOrOrder(dataProvider -> dataProvider.setSortComparator(sortComparator));\n+    }\n+\n+    @Override\n+    public Stream<T> getAllItems() {\n+        return dataController.getAllItems();\n+    }\n+\n+    @Override\n+    public int getDataSize() {\n+        return dataController.getDataSize();\n+    }\n+\n+    @Override\n+    public boolean isItemPresent(T item) {\n+        // TODO: delegate this to the data communicator/component, since the equality could be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac3f237f703081b3ab0c83260d85060c70a2892"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3532, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}