{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1Mzg4MTE1", "number": 9315, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1Mzo0NFrOE2qYBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzoxMTo0NVrOE3sslA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzUyODM5OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1Mzo0NFrOHvkekg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMTowMTo0OFrOHvpZOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0Mjc3MA==", "bodyText": "From glance I don't get what does filteringOnly mean and seems off.\nAfter reading the code, I would think that withSorting or includeSorting or similar would be better in this case, as \"filtering only\" is like double negation when it only applies to sorting.", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519642770", "createdAt": "2020-11-09T08:53:44Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -380,4 +411,34 @@ private void addItemCollectionOnTarget(Collection<T> items, T target,\n         itemList.addAll(indexToInsertItems, items);\n         dataProvider.refreshAll();\n     }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private Query getQuery(boolean filteringOnly) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcyMzMyMw==", "bodyText": "Yes, withSorting  is much more clear.", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519723323", "createdAt": "2020-11-09T11:01:48Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -380,4 +411,34 @@ private void addItemCollectionOnTarget(Collection<T> items, T target,\n         itemList.addAll(indexToInsertItems, items);\n         dataProvider.refreshAll();\n     }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private Query getQuery(boolean filteringOnly) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0Mjc3MA=="}, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzU3Njk3OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ComponentInMemoryFilter.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTowNjoxOFrOHvk8MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzo1MjoxNlrOHvv13Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MDM1Mg==", "bodyText": "Why is this class needed ? For storing the filter with certain key to component data ?\nIs it necessary that it is public ?", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519650352", "createdAt": "2020-11-09T09:06:18Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ComponentInMemoryFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Stores the component's specific in-memory filter.\n+ * \n+ * @param <T>\n+ *            component's items type\n+ */\n+public class ComponentInMemoryFilter<T> implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4MDIzNw==", "bodyText": "Yes, this is for storing the filter object in the component. I was considering to use a string key like this\nComponentUtil.setData(component, ListDataView.IN_MEMORY_FILTER_KEY,  filter);\nbut adding a public string to ListDataView seems even worse maybe, because it is still public and it modifies the public interface. This key should be visible in both AbstractListDataView and in the Component (Component needs to restore this object internally in some places), so I am not able to find out the better approach than to make it just public.", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519780237", "createdAt": "2020-11-09T12:46:12Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ComponentInMemoryFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Stores the component's specific in-memory filter.\n+ * \n+ * @param <T>\n+ *            component's items type\n+ */\n+public class ComponentInMemoryFilter<T> implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MDM1Mg=="}, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4NDIzOQ==", "bodyText": "If it were hidden to a protected method for the abstract data view, then it would be possible to access it in a component that creates the data view. If it was package protected, then the data communicator could access it. So package-protected static method in the AbstractListDataView ? I would not expose two new public classes just as mostly internal markers for storing data.", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519784239", "createdAt": "2020-11-09T12:53:14Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ComponentInMemoryFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Stores the component's specific in-memory filter.\n+ * \n+ * @param <T>\n+ *            component's items type\n+ */\n+public class ComponentInMemoryFilter<T> implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MDM1Mg=="}, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxNTI1Nw==", "bodyText": "Yeah, good idea! So I will add protected static final String ...KEY = \"...key\"; to AbstractListDataView and then override it in component-specific data views, for instance, in ComboBoxListDataView, with a public modifier, and then just use in in ComboBox - ComboBoxListDataView.KEY and in data communicator - AbstractListDataView.KEY.\nSound good!", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519815257", "createdAt": "2020-11-09T13:30:30Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ComponentInMemoryFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Stores the component's specific in-memory filter.\n+ * \n+ * @param <T>\n+ *            component's items type\n+ */\n+public class ComponentInMemoryFilter<T> implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MDM1Mg=="}, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxNzUxNg==", "bodyText": "Yeah, good idea! So I will add protected static final String ...KEY = \"...key\"; to AbstractListDataView and then override it in component-specific data views, for instance, in ComboBoxListDataView, with a public modifier, and then just use in in ComboBox - ComboBoxListDataView.KEY and in data communicator - AbstractListDataView.KEY.\nSound good!\n\nSorry, I'm not sure I understand this. Why do you need to expose or override keys ? If you just create package protected static getter & setter method in  AbstractListDataView that takes in component and optionally the filter OR sorting. Why would a component specific key be needed ????", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519817516", "createdAt": "2020-11-09T13:34:18Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ComponentInMemoryFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Stores the component's specific in-memory filter.\n+ * \n+ * @param <T>\n+ *            component's items type\n+ */\n+public class ComponentInMemoryFilter<T> implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MDM1Mg=="}, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgyODk1Nw==", "bodyText": "Right, the component and data communicator will just use those static setter and getter. And the string key will be hidden in the AbstractListDataView. Sorry for confusing.", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519828957", "createdAt": "2020-11-09T13:52:16Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ComponentInMemoryFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Stores the component's specific in-memory filter.\n+ * \n+ * @param <T>\n+ *            component's items type\n+ */\n+public class ComponentInMemoryFilter<T> implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MDM1Mg=="}, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzU3OTQ2OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ComponentSorting.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTowNjo1NFrOHvk9pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjo0NzoyMlrOHvs6Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MDcyNQ==", "bodyText": "Why is this class needed ? For storing the comparator in component data ?\nIs it necessary that it is public ?", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519650725", "createdAt": "2020-11-09T09:06:54Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ComponentSorting.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+import com.vaadin.flow.function.SerializableComparator;\n+\n+/**\n+ * Stores the component's specific sorting.\n+ * \n+ * @param <T>\n+ *            component's items type\n+ */\n+public class ComponentSorting<T> implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4MDg5OA==", "bodyText": "The same comment as for filter.", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519780898", "createdAt": "2020-11-09T12:47:22Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ComponentSorting.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+import com.vaadin.flow.function.SerializableComparator;\n+\n+/**\n+ * Stores the component's specific sorting.\n+ * \n+ * @param <T>\n+ *            component's items type\n+ */\n+public class ComponentSorting<T> implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MDcyNQ=="}, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzY4MjQ4OnYy", "diffSide": "RIGHT", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozMjowOFrOHvl7kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjo0ODoxOVrOHvs8OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NjU3OQ==", "bodyText": "Should there be a test that checks case that setting a list data provider filter is applied correctly (doesn't discard data view filter) and that it is combined with the data view one ? Probably for sorting too ?", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519666579", "createdAt": "2020-11-09T09:32:08Z", "author": {"login": "pleku"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -948,6 +952,174 @@ public void createListDataProviderFromArrayOfItems_removingOneItem_itemCountShou\n         Assert.assertEquals(itemCount - 1, listDataView.getItemCount());\n     }\n \n+    @Test\n+    public void setFilter_twoComponentsHasSameDataProvider_onlyTargetComponentImpacted() {\n+        TestComponent component1 = new TestComponent();\n+        TestComponent component2 = new TestComponent();\n+\n+        ListDataViewImpl listDataView1 = new ListDataViewImpl(\n+                () -> dataProvider, component1);\n+\n+        ListDataViewImpl listDataView2 = new ListDataViewImpl(\n+                () -> dataProvider, component2);\n+\n+        Assert.assertEquals(\"Unexpected initial items count for component #1\",\n+                3, listDataView1.getItemCount());\n+\n+        Assert.assertEquals(\"Unexpected initial items count for component #2\",\n+                3, listDataView2.getItemCount());\n+\n+        listDataView1.setFilter(\n+                item -> \"middle\".equals(item) || \"last\".equals(item));\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #1 items count after filter apply\", 2,\n+                listDataView1.getItemCount());\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #2 items count after filter apply to component #1\",\n+                3, listDataView2.getItemCount());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter apply\",\n+                new String[] { \"middle\", \"last\" },\n+                listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter apply\",\n+                new String[] { \"first\", \"middle\", \"last\" },\n+                listDataView2.getItems().toArray());\n+\n+        listDataView1.addFilter(\"middle\"::equals);\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #1 items count after filter apply\", 1,\n+                listDataView1.getItemCount());\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #2 items count after filter apply to component #1\",\n+                3, listDataView2.getItemCount());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter apply\",\n+                new String[] { \"middle\" }, listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter apply\",\n+                new String[] { \"first\", \"middle\", \"last\" },\n+                listDataView2.getItems().toArray());\n+\n+        listDataView1.removeFilters();\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #1 items count after filter remove\", 3,\n+                listDataView1.getItemCount());\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #2 items count after filter remove in component #1\",\n+                3, listDataView2.getItemCount());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter remove\",\n+                new String[] { \"first\", \"middle\", \"last\" },\n+                listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter remove\",\n+                new String[] { \"first\", \"middle\", \"last\" },\n+                listDataView2.getItems().toArray());\n+    }\n+\n+    @Test\n+    public void setSortComparator_twoComponentsHasSameDataProvider_onlyTargetComponentImpacted() {\n+        TestComponent component1 = new TestComponent();\n+        TestComponent component2 = new TestComponent();\n+\n+        ListDataProvider<Item> dataProvider = DataProvider.ofItems(\n+                new Item(1L, \"baz\"), new Item(2L, \"foo\"), new Item(1L, \"bar\"));\n+\n+        ItemListDataView listDataView1 = new ItemListDataView(\n+                () -> dataProvider, component1);\n+\n+        ItemListDataView listDataView2 = new ItemListDataView(\n+                () -> dataProvider, component2);\n+\n+        listDataView1.setSortComparator(\n+                (item1, item2) -> Long.compare(item1.getId(), item2.getId()));\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new Long[] { 1L, 1L, 2L },\n+                listDataView1.getItems().map(Item::getId).toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new Long[] { 1L, 2L, 1L },\n+                listDataView2.getItems().map(Item::getId).toArray());\n+\n+        listDataView1.addSortComparator((item1, item2) -> item1.getValue()\n+                .compareToIgnoreCase(item2.getValue()));\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new String[] { \"bar\", \"baz\", \"foo\" },\n+                listDataView1.getItems().map(Item::getValue).toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new String[] { \"baz\", \"foo\", \"bar\" },\n+                listDataView2.getItems().map(Item::getValue).toArray());\n+\n+        listDataView1.removeSorting();\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new Item[] { new Item(1L, \"baz\"), new Item(2L, \"foo\"),\n+                        new Item(1L, \"bar\") },\n+                listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new Item[] { new Item(1L, \"baz\"), new Item(2L, \"foo\"),\n+                        new Item(1L, \"bar\") },\n+                listDataView2.getItems().toArray());\n+    }\n+\n+    @Test\n+    public void setSortOrder_twoComponentsHasSameDataProvider_onlyTargetComponentImpacted() {\n+        TestComponent component1 = new TestComponent();\n+        TestComponent component2 = new TestComponent();\n+\n+        ListDataProvider<Item> dataProvider = DataProvider.ofItems(\n+                new Item(1L, \"baz\"), new Item(2L, \"foo\"), new Item(1L, \"bar\"));\n+\n+        ItemListDataView listDataView1 = new ItemListDataView(\n+                () -> dataProvider, component1);\n+\n+        ItemListDataView listDataView2 = new ItemListDataView(\n+                () -> dataProvider, component2);\n+\n+        listDataView1.setSortOrder(Item::getId, SortDirection.ASCENDING);\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new Long[] { 1L, 1L, 2L },\n+                listDataView1.getItems().map(Item::getId).toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new Long[] { 1L, 2L, 1L },\n+                listDataView2.getItems().map(Item::getId).toArray());\n+\n+        listDataView1.addSortOrder(Item::getValue, SortDirection.ASCENDING);\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new String[] { \"bar\", \"baz\", \"foo\" },\n+                listDataView1.getItems().map(Item::getValue).toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new String[] { \"baz\", \"foo\", \"bar\" },\n+                listDataView2.getItems().map(Item::getValue).toArray());\n+\n+        listDataView1.removeSorting();\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new Item[] { new Item(1L, \"baz\"), new Item(2L, \"foo\"),\n+                        new Item(1L, \"bar\") },\n+                listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new Item[] { new Item(1L, \"baz\"), new Item(2L, \"foo\"),\n+                        new Item(1L, \"bar\") },\n+                listDataView2.getItems().toArray());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4MTQzMg==", "bodyText": "Yeah, good point! I will add such a test!", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519781432", "createdAt": "2020-11-09T12:48:19Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -948,6 +952,174 @@ public void createListDataProviderFromArrayOfItems_removingOneItem_itemCountShou\n         Assert.assertEquals(itemCount - 1, listDataView.getItemCount());\n     }\n \n+    @Test\n+    public void setFilter_twoComponentsHasSameDataProvider_onlyTargetComponentImpacted() {\n+        TestComponent component1 = new TestComponent();\n+        TestComponent component2 = new TestComponent();\n+\n+        ListDataViewImpl listDataView1 = new ListDataViewImpl(\n+                () -> dataProvider, component1);\n+\n+        ListDataViewImpl listDataView2 = new ListDataViewImpl(\n+                () -> dataProvider, component2);\n+\n+        Assert.assertEquals(\"Unexpected initial items count for component #1\",\n+                3, listDataView1.getItemCount());\n+\n+        Assert.assertEquals(\"Unexpected initial items count for component #2\",\n+                3, listDataView2.getItemCount());\n+\n+        listDataView1.setFilter(\n+                item -> \"middle\".equals(item) || \"last\".equals(item));\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #1 items count after filter apply\", 2,\n+                listDataView1.getItemCount());\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #2 items count after filter apply to component #1\",\n+                3, listDataView2.getItemCount());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter apply\",\n+                new String[] { \"middle\", \"last\" },\n+                listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter apply\",\n+                new String[] { \"first\", \"middle\", \"last\" },\n+                listDataView2.getItems().toArray());\n+\n+        listDataView1.addFilter(\"middle\"::equals);\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #1 items count after filter apply\", 1,\n+                listDataView1.getItemCount());\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #2 items count after filter apply to component #1\",\n+                3, listDataView2.getItemCount());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter apply\",\n+                new String[] { \"middle\" }, listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter apply\",\n+                new String[] { \"first\", \"middle\", \"last\" },\n+                listDataView2.getItems().toArray());\n+\n+        listDataView1.removeFilters();\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #1 items count after filter remove\", 3,\n+                listDataView1.getItemCount());\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #2 items count after filter remove in component #1\",\n+                3, listDataView2.getItemCount());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter remove\",\n+                new String[] { \"first\", \"middle\", \"last\" },\n+                listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter remove\",\n+                new String[] { \"first\", \"middle\", \"last\" },\n+                listDataView2.getItems().toArray());\n+    }\n+\n+    @Test\n+    public void setSortComparator_twoComponentsHasSameDataProvider_onlyTargetComponentImpacted() {\n+        TestComponent component1 = new TestComponent();\n+        TestComponent component2 = new TestComponent();\n+\n+        ListDataProvider<Item> dataProvider = DataProvider.ofItems(\n+                new Item(1L, \"baz\"), new Item(2L, \"foo\"), new Item(1L, \"bar\"));\n+\n+        ItemListDataView listDataView1 = new ItemListDataView(\n+                () -> dataProvider, component1);\n+\n+        ItemListDataView listDataView2 = new ItemListDataView(\n+                () -> dataProvider, component2);\n+\n+        listDataView1.setSortComparator(\n+                (item1, item2) -> Long.compare(item1.getId(), item2.getId()));\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new Long[] { 1L, 1L, 2L },\n+                listDataView1.getItems().map(Item::getId).toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new Long[] { 1L, 2L, 1L },\n+                listDataView2.getItems().map(Item::getId).toArray());\n+\n+        listDataView1.addSortComparator((item1, item2) -> item1.getValue()\n+                .compareToIgnoreCase(item2.getValue()));\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new String[] { \"bar\", \"baz\", \"foo\" },\n+                listDataView1.getItems().map(Item::getValue).toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new String[] { \"baz\", \"foo\", \"bar\" },\n+                listDataView2.getItems().map(Item::getValue).toArray());\n+\n+        listDataView1.removeSorting();\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new Item[] { new Item(1L, \"baz\"), new Item(2L, \"foo\"),\n+                        new Item(1L, \"bar\") },\n+                listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new Item[] { new Item(1L, \"baz\"), new Item(2L, \"foo\"),\n+                        new Item(1L, \"bar\") },\n+                listDataView2.getItems().toArray());\n+    }\n+\n+    @Test\n+    public void setSortOrder_twoComponentsHasSameDataProvider_onlyTargetComponentImpacted() {\n+        TestComponent component1 = new TestComponent();\n+        TestComponent component2 = new TestComponent();\n+\n+        ListDataProvider<Item> dataProvider = DataProvider.ofItems(\n+                new Item(1L, \"baz\"), new Item(2L, \"foo\"), new Item(1L, \"bar\"));\n+\n+        ItemListDataView listDataView1 = new ItemListDataView(\n+                () -> dataProvider, component1);\n+\n+        ItemListDataView listDataView2 = new ItemListDataView(\n+                () -> dataProvider, component2);\n+\n+        listDataView1.setSortOrder(Item::getId, SortDirection.ASCENDING);\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new Long[] { 1L, 1L, 2L },\n+                listDataView1.getItems().map(Item::getId).toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new Long[] { 1L, 2L, 1L },\n+                listDataView2.getItems().map(Item::getId).toArray());\n+\n+        listDataView1.addSortOrder(Item::getValue, SortDirection.ASCENDING);\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new String[] { \"bar\", \"baz\", \"foo\" },\n+                listDataView1.getItems().map(Item::getValue).toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new String[] { \"baz\", \"foo\", \"bar\" },\n+                listDataView2.getItems().map(Item::getValue).toArray());\n+\n+        listDataView1.removeSorting();\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new Item[] { new Item(1L, \"baz\"), new Item(2L, \"foo\"),\n+                        new Item(1L, \"bar\") },\n+                listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new Item[] { new Item(1L, \"baz\"), new Item(2L, \"foo\"),\n+                        new Item(1L, \"bar\") },\n+                listDataView2.getItems().toArray());\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NjU3OQ=="}, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzY4ODUwOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozMzo1M1rOHvl_fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowNzoxOFrOHvwddg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NzU4Mw==", "bodyText": "So how is this working when none of the components react to this event ? Why not fire the DataChangeEvent instead ?", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519667583", "createdAt": "2020-11-09T09:33:53Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -380,4 +411,34 @@ private void addItemCollectionOnTarget(Collection<T> items, T target,\n         itemList.addAll(indexToInsertItems, items);\n         dataProvider.refreshAll();\n     }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private Query getQuery(boolean filteringOnly) {\n+        final Optional<ComponentInMemoryFilter<T>> filter = getComponentInMemoryFilter();\n+\n+        final Optional<ComponentSorting<T>> sorting = filteringOnly\n+                ? Optional.empty()\n+                : getComponentSorting();\n+\n+        return new Query(0, Integer.MAX_VALUE, null,\n+                sorting.map(ComponentSorting::getSortComparator).orElse(null),\n+                filter.map(ComponentInMemoryFilter::getFilter).orElse(null));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Optional<ComponentSorting<T>> getComponentSorting() {\n+        return Optional.ofNullable(\n+                ComponentUtil.getData(component, ComponentSorting.class));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Optional<ComponentInMemoryFilter<T>> getComponentInMemoryFilter() {\n+        return Optional.ofNullable(ComponentUtil.getData(component,\n+                ComponentInMemoryFilter.class));\n+    }\n+\n+    private void fireDataChangeEvent() {\n+        ComponentUtil.fireEvent(component,\n+                new ComponentDataChangeEvent<>(component));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc5OTExMg==", "bodyText": "So how is this working when none of the components react to this event ?\n\nI assumed that the components have to add a listener by themselves and to restore the filter/sorting by themselves. I avoided using a callback for notifying the components because it would be a breaking change for list data view abstract class.\n\nWhy not fire the DataChangeEvent instead ?\n\nThere are tow obstacles to do that:\n\nDataChangeEvent  does not have a 'component' field, nor any other information to distinguish the target component. Adding such a filed means the breaking change in this class.\nIf we fire this event via data provider listener handler, then it would require the certain component mention in the public method -> breaking change. We're also not able to fire it via ComponentUtil.fireEvent because this event class does not extend ComponentEvent.", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519799112", "createdAt": "2020-11-09T13:10:31Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -380,4 +411,34 @@ private void addItemCollectionOnTarget(Collection<T> items, T target,\n         itemList.addAll(indexToInsertItems, items);\n         dataProvider.refreshAll();\n     }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private Query getQuery(boolean filteringOnly) {\n+        final Optional<ComponentInMemoryFilter<T>> filter = getComponentInMemoryFilter();\n+\n+        final Optional<ComponentSorting<T>> sorting = filteringOnly\n+                ? Optional.empty()\n+                : getComponentSorting();\n+\n+        return new Query(0, Integer.MAX_VALUE, null,\n+                sorting.map(ComponentSorting::getSortComparator).orElse(null),\n+                filter.map(ComponentInMemoryFilter::getFilter).orElse(null));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Optional<ComponentSorting<T>> getComponentSorting() {\n+        return Optional.ofNullable(\n+                ComponentUtil.getData(component, ComponentSorting.class));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Optional<ComponentInMemoryFilter<T>> getComponentInMemoryFilter() {\n+        return Optional.ofNullable(ComponentUtil.getData(component,\n+                ComponentInMemoryFilter.class));\n+    }\n+\n+    private void fireDataChangeEvent() {\n+        ComponentUtil.fireEvent(component,\n+                new ComponentDataChangeEvent<>(component));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NzU4Mw=="}, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxNDUxNA==", "bodyText": "Adding such a filed means the breaking change in this class.\n\nI see, this doesn't matter, but I don't see how it is necessarily a breaking change with another constructor and exposing a new getter which might return null. There is new API added here anyway which makes it impossible to backport anyway. I don't know if it is really worth it to introduce dubious new API just for avoiding breaking something that we introduced in version 4.0 and can now change for 5.0.\nBut as to an alternative, I don't know either how the data provider could even distinguish the correct component to fire the data change event on. But it feels somehow bad API design to me as a component developer that if I have to know and remember to do something extra when using AbstractListDataView instead of being required to do it implicitly in the constructor. Basically I could easily miss adding the listener to this event ^ and then my component would not work when filters & sorting changes.\nSo either\n\nmake the data provider fire the event for all components with the optional meta data of Component getDataChangeComponent() (better name would be nice) and then our components & data communicator (?) can ignore the events where the component is something different than itself.\nforce components using abstractlistdataview to always pass a callback for reacting to filter/sorting change\nsomething else, ?", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519814514", "createdAt": "2020-11-09T13:29:18Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -380,4 +411,34 @@ private void addItemCollectionOnTarget(Collection<T> items, T target,\n         itemList.addAll(indexToInsertItems, items);\n         dataProvider.refreshAll();\n     }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private Query getQuery(boolean filteringOnly) {\n+        final Optional<ComponentInMemoryFilter<T>> filter = getComponentInMemoryFilter();\n+\n+        final Optional<ComponentSorting<T>> sorting = filteringOnly\n+                ? Optional.empty()\n+                : getComponentSorting();\n+\n+        return new Query(0, Integer.MAX_VALUE, null,\n+                sorting.map(ComponentSorting::getSortComparator).orElse(null),\n+                filter.map(ComponentInMemoryFilter::getFilter).orElse(null));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Optional<ComponentSorting<T>> getComponentSorting() {\n+        return Optional.ofNullable(\n+                ComponentUtil.getData(component, ComponentSorting.class));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Optional<ComponentInMemoryFilter<T>> getComponentInMemoryFilter() {\n+        return Optional.ofNullable(ComponentUtil.getData(component,\n+                ComponentInMemoryFilter.class));\n+    }\n+\n+    private void fireDataChangeEvent() {\n+        ComponentUtil.fireEvent(component,\n+                new ComponentDataChangeEvent<>(component));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NzU4Mw=="}, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzNTk3Mg==", "bodyText": "But it feels somehow bad API design to me as a component developer that if I have to know and remember to do something extra when using AbstractListDataView instead of being required to do it implicitly in the constructor.\n\nAgree! I would go with option 2 then, because it guarantee that the custom component won't forget to handle these filtering/sorting events.", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519835972", "createdAt": "2020-11-09T14:02:38Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -380,4 +411,34 @@ private void addItemCollectionOnTarget(Collection<T> items, T target,\n         itemList.addAll(indexToInsertItems, items);\n         dataProvider.refreshAll();\n     }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private Query getQuery(boolean filteringOnly) {\n+        final Optional<ComponentInMemoryFilter<T>> filter = getComponentInMemoryFilter();\n+\n+        final Optional<ComponentSorting<T>> sorting = filteringOnly\n+                ? Optional.empty()\n+                : getComponentSorting();\n+\n+        return new Query(0, Integer.MAX_VALUE, null,\n+                sorting.map(ComponentSorting::getSortComparator).orElse(null),\n+                filter.map(ComponentInMemoryFilter::getFilter).orElse(null));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Optional<ComponentSorting<T>> getComponentSorting() {\n+        return Optional.ofNullable(\n+                ComponentUtil.getData(component, ComponentSorting.class));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Optional<ComponentInMemoryFilter<T>> getComponentInMemoryFilter() {\n+        return Optional.ofNullable(ComponentUtil.getData(component,\n+                ComponentInMemoryFilter.class));\n+    }\n+\n+    private void fireDataChangeEvent() {\n+        ComponentUtil.fireEvent(component,\n+                new ComponentDataChangeEvent<>(component));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NzU4Mw=="}, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzOTA5NA==", "bodyText": "it guarantee that the custom component won't forget to handle these filtering/sorting events.\n\nI don't think it guarantees it per se, as existing components often can forget to add those listener into their data providers.. but is maybe a better pattern. I wonder now why we didn't just expose an API in the HasItems or HasDataProvider  that would have been called by the data provider and even optionally the users to just tell the component to refresh the data for itself... I don't know what sense it made to require acquiring the data provider to refresh things. Probably just wrong design principles with too much emphasis on the data providers.", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519839094", "createdAt": "2020-11-09T14:07:18Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -380,4 +411,34 @@ private void addItemCollectionOnTarget(Collection<T> items, T target,\n         itemList.addAll(indexToInsertItems, items);\n         dataProvider.refreshAll();\n     }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private Query getQuery(boolean filteringOnly) {\n+        final Optional<ComponentInMemoryFilter<T>> filter = getComponentInMemoryFilter();\n+\n+        final Optional<ComponentSorting<T>> sorting = filteringOnly\n+                ? Optional.empty()\n+                : getComponentSorting();\n+\n+        return new Query(0, Integer.MAX_VALUE, null,\n+                sorting.map(ComponentSorting::getSortComparator).orElse(null),\n+                filter.map(ComponentInMemoryFilter::getFilter).orElse(null));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Optional<ComponentSorting<T>> getComponentSorting() {\n+        return Optional.ofNullable(\n+                ComponentUtil.getData(component, ComponentSorting.class));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Optional<ComponentInMemoryFilter<T>> getComponentInMemoryFilter() {\n+        return Optional.ofNullable(ComponentUtil.getData(component,\n+                ComponentInMemoryFilter.class));\n+    }\n+\n+    private void fireDataChangeEvent() {\n+        ComponentUtil.fireEvent(component,\n+                new ComponentDataChangeEvent<>(component));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NzU4Mw=="}, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODMzMzczOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjo1NTowMFrOHxL-TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzozMzowMVrOHxto5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMzODQ0NQ==", "bodyText": "Nit: this method name should be something different but not blocking", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521338445", "createdAt": "2020-11-11T12:55:00Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -380,4 +488,22 @@ private void addItemCollectionOnTarget(Collection<T> items, T target,\n         itemList.addAll(indexToInsertItems, items);\n         dataProvider.refreshAll();\n     }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private Query getQuery(boolean withSorting) {\n+        final Optional<SerializablePredicate<T>> filter = getComponentFilter(\n+                component);\n+\n+        final Optional<SerializableComparator<T>> sorting = withSorting\n+                ? getComponentSortComparator(component)\n+                : Optional.empty();\n+\n+        return new Query(0, Integer.MAX_VALUE, null,\n+                sorting.orElse(null), filter.orElse(null));\n+    }\n+\n+    private void fireDataChangeEvent(SerializablePredicate<T> filter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5MDAyMg==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521890022", "createdAt": "2020-11-12T07:33:01Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -380,4 +488,22 @@ private void addItemCollectionOnTarget(Collection<T> items, T target,\n         itemList.addAll(indexToInsertItems, items);\n         dataProvider.refreshAll();\n     }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private Query getQuery(boolean withSorting) {\n+        final Optional<SerializablePredicate<T>> filter = getComponentFilter(\n+                component);\n+\n+        final Optional<SerializableComparator<T>> sorting = withSorting\n+                ? getComponentSortComparator(component)\n+                : Optional.empty();\n+\n+        return new Query(0, Integer.MAX_VALUE, null,\n+                sorting.orElse(null), filter.orElse(null));\n+    }\n+\n+    private void fireDataChangeEvent(SerializablePredicate<T> filter,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMzODQ0NQ=="}, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODM5MDM5OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzoxMDozOFrOHxMgBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzozMzoxM1rOHxtpPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NzA3OQ==", "bodyText": "A filter bound to the component.\n\nThis is a bit odd way of continuing the javadocs at this point... maybe\n\nThis filter is bound to the component.\n\nwould make it more natural.", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521347079", "createdAt": "2020-11-11T13:10:38Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -266,11 +266,10 @@\n      * that has been set or added previously. {@code null} will clear all\n      * filters.\n      * <p>\n-     * A filter bound to data set, not to the component. That means this filter\n-     * won't be retained when a new data or {@link DataProvider} is set to the\n-     * component. Any other component using the same {@link DataProvider} object\n-     * would be affected by setting a filter through data view of another\n-     * component.\n+     * A filter bound to the component. Any other component using the same", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5MDExMA==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521890110", "createdAt": "2020-11-12T07:33:13Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -266,11 +266,10 @@\n      * that has been set or added previously. {@code null} will clear all\n      * filters.\n      * <p>\n-     * A filter bound to data set, not to the component. That means this filter\n-     * won't be retained when a new data or {@link DataProvider} is set to the\n-     * component. Any other component using the same {@link DataProvider} object\n-     * would be affected by setting a filter through data view of another\n-     * component.\n+     * A filter bound to the component. Any other component using the same", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NzA3OQ=="}, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODM5MTIzOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzoxMDo1M1rOHxMggA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzozMzoxOFrOHxtpXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NzIwMA==", "bodyText": "The same as above", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521347200", "createdAt": "2020-11-11T13:10:53Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -286,11 +285,10 @@\n      * Adds a filter to be applied to all queries. The filter will be used in\n      * addition to any filter that has been set or added previously.\n      * <p>\n-     * A filter bound to data set, not to the component. That means this filter\n-     * and previously added filters won't be retained when a new data or\n-     * {@link DataProvider} is set to the component. Any other component using\n-     * the same {@link DataProvider} object would be affected by adding a filter\n-     * through data view of another component.\n+     * A filter bound to the component. Any other component using the same", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5MDE0Mw==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521890143", "createdAt": "2020-11-12T07:33:18Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -286,11 +285,10 @@\n      * Adds a filter to be applied to all queries. The filter will be used in\n      * addition to any filter that has been set or added previously.\n      * <p>\n-     * A filter bound to data set, not to the component. That means this filter\n-     * and previously added filters won't be retained when a new data or\n-     * {@link DataProvider} is set to the component. Any other component using\n-     * the same {@link DataProvider} object would be affected by adding a filter\n-     * through data view of another component.\n+     * A filter bound to the component. Any other component using the same", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NzIwMA=="}, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODM5MzE3OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzoxMToyMlrOHxMhqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzozMzoyNFrOHxtpgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NzQ5Ng==", "bodyText": "The same as above, seem off. Maybe\n\nThis comparator is bound to the component. Thus any other...\n\nwould be better", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521347496", "createdAt": "2020-11-11T13:11:22Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -315,11 +313,11 @@\n      * Sets the comparator to use as the default sorting. This overrides the\n      * sorting set by any other method that manipulates the default sorting.\n      * <p>\n-     * A comparator bound to data set, not to the component. That means the\n-     * default sorting won't be retained when a new data or {@link DataProvider}\n-     * is set to the component. Any other component using the same\n-     * {@link DataProvider} object would be affected by setting a sort\n-     * comparator through data view of another component.\n+     * A comparator bound to the component. Any other component using the same", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5MDE3Nw==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521890177", "createdAt": "2020-11-12T07:33:24Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -315,11 +313,11 @@\n      * Sets the comparator to use as the default sorting. This overrides the\n      * sorting set by any other method that manipulates the default sorting.\n      * <p>\n-     * A comparator bound to data set, not to the component. That means the\n-     * default sorting won't be retained when a new data or {@link DataProvider}\n-     * is set to the component. Any other component using the same\n-     * {@link DataProvider} object would be affected by setting a sort\n-     * comparator through data view of another component.\n+     * A comparator bound to the component. Any other component using the same", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NzQ5Ng=="}, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODM5NDQ0OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzoxMTo0NVrOHxMicQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzozMzoyOVrOHxtpnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NzY5Nw==", "bodyText": "Same as above", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521347697", "createdAt": "2020-11-11T13:11:45Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -337,11 +335,11 @@\n      * comparator will be used to determine the ordering of items that are\n      * considered equal by the previously defined default sorting.\n      * <p>\n-     * A comparator added to data set, not to the component. That means the\n-     * default sorting won't be retained when a new data or {@link DataProvider}\n-     * is set to the component. Any other component using the same\n-     * {@link DataProvider} object would be affected by adding a sort comparator\n-     * through data view of another component.\n+     * A comparator bound to the component. Any other component using the same", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5MDIwNQ==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521890205", "createdAt": "2020-11-12T07:33:29Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -337,11 +335,11 @@\n      * comparator will be used to determine the ordering of items that are\n      * considered equal by the previously defined default sorting.\n      * <p>\n-     * A comparator added to data set, not to the component. That means the\n-     * default sorting won't be retained when a new data or {@link DataProvider}\n-     * is set to the component. Any other component using the same\n-     * {@link DataProvider} object would be affected by adding a sort comparator\n-     * through data view of another component.\n+     * A comparator bound to the component. Any other component using the same", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NzY5Nw=="}, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2989, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}