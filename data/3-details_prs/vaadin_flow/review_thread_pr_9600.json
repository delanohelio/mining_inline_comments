{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MzUzMzkz", "number": 9600, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDozNTo1NVrOFCP7Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDozNjo1N1rOFCP99Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTAyNDM1OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/Connect.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDozNTo1NVrOIBSqvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDozNTo1NVrOIBSqvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIyNTM0Mw==", "bodyText": "We should be able to assume that $wnd.Vaadin.connectionState is defined here, the if guards were there previously only to make a test (ConnectTests: should set header for preventing CSRF using Flow csrfToken) pass. This is now corrected in the test instead.", "url": "https://github.com/vaadin/flow/pull/9600#discussion_r538225343", "createdAt": "2020-12-08T10:35:55Z", "author": {"login": "joheriks"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/Connect.ts", "diffHunk": "@@ -420,23 +420,17 @@ export class ConnectClient {\n     // chain item for our convenience. Always having an ending of the chain\n     // this way makes the folding down below more concise.\n     const fetchNext: MiddlewareNext =\n-      async(context: MiddlewareContext): Promise<Response> => {\n-        if ($wnd.Vaadin.connectionState) {\n-          $wnd.Vaadin.connectionState.loadingStarted();\n-        }\n-       return fetch(context.request)\n-            .then(response => {\n-              if ($wnd.Vaadin.connectionState) {\n-                $wnd.Vaadin.connectionState.loadingSucceeded();\n-              }\n-              return response;\n-            })\n-            .catch(error => {\n-              if ($wnd.Vaadin.connectionState) {\n-                $wnd.Vaadin.connectionState.state = ConnectionState.CONNECTION_LOST;\n-              }\n-              return Promise.reject(error);\n-            });\n+      async (context: MiddlewareContext): Promise<Response> => {\n+        $wnd.Vaadin.connectionState.loadingStarted();\n+        return fetch(context.request)\n+          .then(response => {\n+            $wnd.Vaadin.connectionState.loadingSucceeded();\n+            return response;\n+          })\n+          .catch(error => {\n+            $wnd.Vaadin.connectionState.state = ConnectionState.CONNECTION_LOST;\n+            return Promise.reject(error);\n+          });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e018914c84e2a2794dab23f393960625247dfc37"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTAzMDkzOnYy", "diffSide": "RIGHT", "path": "flow-client/src/test/frontend/ConnectTests.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDozNjo1N1rOIBSubg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDozNjo1N1rOIBSubg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIyNjI4Ng==", "bodyText": "This is the test correction mentioned in the previous comment.", "url": "https://github.com/vaadin/flow/pull/9600#discussion_r538226286", "createdAt": "2020-12-08T10:36:57Z", "author": {"login": "joheriks"}, "path": "flow-client/src/test/frontend/ConnectTests.ts", "diffHunk": "@@ -224,7 +225,10 @@ describe('ConnectClient', () => {\n       // @ts-ignore\n       const OriginalVaadin = window.Vaadin;\n       // @ts-ignore\n-      window.Vaadin = {TypeScript: {csrfToken: 'foo'}};\n+      window.Vaadin = {\n+        TypeScript: {csrfToken: 'foo'},\n+        connectionState: (window as any).Vaadin.connectionState\n+      };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e018914c84e2a2794dab23f393960625247dfc37"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2900, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}