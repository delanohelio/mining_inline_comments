{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1Mzg4MTE1", "number": 9315, "title": "fix!: Store in-memory filtering and sorting in component", "bodyText": "In-memory filtering and sorting are now stored directly in component, which gives an opportunity to change it through the data view API for a certain component separately from other components bound to the same data provider.\nRelated-to: #8655", "createdAt": "2020-11-04T13:32:49Z", "url": "https://github.com/vaadin/flow/pull/9315", "merged": true, "mergeCommit": {"oid": "5b2d4d8259a2efb3de70ea9d38fda18c4979cac6"}, "closed": true, "closedAt": "2020-11-12T08:01:32Z", "author": {"login": "mshabarov"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZN0XHAH2gAyNTE1Mzg4MTE1OmFkZTFhY2EzMjZlYmJmMGM4ZGVjZTU1ZDFhYWU0OTYzZTQ4NDAwOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbt3mfgFqTUyODgyODAxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ade1aca326ebbf0c8dece55d1aae4963e4840096", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/ade1aca326ebbf0c8dece55d1aae4963e4840096", "committedDate": "2020-11-04T13:31:18Z", "message": "fix: Store in-memory filtering and sorting in component\n\nIn-memory filtering and sorting are now stored directly in component, which gives an opportunity to change it through the data view API for a certain component separately from other components bound to the same data provider.\n\nFixes: https://github.com/vaadin/flow/issues/8655"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8bd42f843dad7fe20f90b83fd1cf1d51d5b1de2", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/a8bd42f843dad7fe20f90b83fd1cf1d51d5b1de2", "committedDate": "2020-11-04T19:33:32Z", "message": "Remove filtering and sorting in DC, add unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ec6ef42790fce5a250f3bc59256cce58589a90c", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/2ec6ef42790fce5a250f3bc59256cce58589a90c", "committedDate": "2020-11-05T07:39:33Z", "message": "Fix data communicator tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/cc14a01dc8da06d4a662ba71676297a2826aaeb4", "committedDate": "2020-11-05T08:31:18Z", "message": "Remove erroneous component presence assertion and revert changes in tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDM3Njgy", "url": "https://github.com/vaadin/flow/pull/9315#pullrequestreview-526037682", "createdAt": "2020-11-09T08:53:43Z", "commit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1Mzo0NFrOHvkekg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozMzo1M1rOHvl_fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0Mjc3MA==", "bodyText": "From glance I don't get what does filteringOnly mean and seems off.\nAfter reading the code, I would think that withSorting or includeSorting or similar would be better in this case, as \"filtering only\" is like double negation when it only applies to sorting.", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519642770", "createdAt": "2020-11-09T08:53:44Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -380,4 +411,34 @@ private void addItemCollectionOnTarget(Collection<T> items, T target,\n         itemList.addAll(indexToInsertItems, items);\n         dataProvider.refreshAll();\n     }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private Query getQuery(boolean filteringOnly) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MDM1Mg==", "bodyText": "Why is this class needed ? For storing the filter with certain key to component data ?\nIs it necessary that it is public ?", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519650352", "createdAt": "2020-11-09T09:06:18Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ComponentInMemoryFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Stores the component's specific in-memory filter.\n+ * \n+ * @param <T>\n+ *            component's items type\n+ */\n+public class ComponentInMemoryFilter<T> implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MDcyNQ==", "bodyText": "Why is this class needed ? For storing the comparator in component data ?\nIs it necessary that it is public ?", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519650725", "createdAt": "2020-11-09T09:06:54Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ComponentSorting.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+import com.vaadin.flow.function.SerializableComparator;\n+\n+/**\n+ * Stores the component's specific sorting.\n+ * \n+ * @param <T>\n+ *            component's items type\n+ */\n+public class ComponentSorting<T> implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NjU3OQ==", "bodyText": "Should there be a test that checks case that setting a list data provider filter is applied correctly (doesn't discard data view filter) and that it is combined with the data view one ? Probably for sorting too ?", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519666579", "createdAt": "2020-11-09T09:32:08Z", "author": {"login": "pleku"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -948,6 +952,174 @@ public void createListDataProviderFromArrayOfItems_removingOneItem_itemCountShou\n         Assert.assertEquals(itemCount - 1, listDataView.getItemCount());\n     }\n \n+    @Test\n+    public void setFilter_twoComponentsHasSameDataProvider_onlyTargetComponentImpacted() {\n+        TestComponent component1 = new TestComponent();\n+        TestComponent component2 = new TestComponent();\n+\n+        ListDataViewImpl listDataView1 = new ListDataViewImpl(\n+                () -> dataProvider, component1);\n+\n+        ListDataViewImpl listDataView2 = new ListDataViewImpl(\n+                () -> dataProvider, component2);\n+\n+        Assert.assertEquals(\"Unexpected initial items count for component #1\",\n+                3, listDataView1.getItemCount());\n+\n+        Assert.assertEquals(\"Unexpected initial items count for component #2\",\n+                3, listDataView2.getItemCount());\n+\n+        listDataView1.setFilter(\n+                item -> \"middle\".equals(item) || \"last\".equals(item));\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #1 items count after filter apply\", 2,\n+                listDataView1.getItemCount());\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #2 items count after filter apply to component #1\",\n+                3, listDataView2.getItemCount());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter apply\",\n+                new String[] { \"middle\", \"last\" },\n+                listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter apply\",\n+                new String[] { \"first\", \"middle\", \"last\" },\n+                listDataView2.getItems().toArray());\n+\n+        listDataView1.addFilter(\"middle\"::equals);\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #1 items count after filter apply\", 1,\n+                listDataView1.getItemCount());\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #2 items count after filter apply to component #1\",\n+                3, listDataView2.getItemCount());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter apply\",\n+                new String[] { \"middle\" }, listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter apply\",\n+                new String[] { \"first\", \"middle\", \"last\" },\n+                listDataView2.getItems().toArray());\n+\n+        listDataView1.removeFilters();\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #1 items count after filter remove\", 3,\n+                listDataView1.getItemCount());\n+\n+        Assert.assertEquals(\n+                \"Unexpected component #2 items count after filter remove in component #1\",\n+                3, listDataView2.getItemCount());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter remove\",\n+                new String[] { \"first\", \"middle\", \"last\" },\n+                listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items after filter remove\",\n+                new String[] { \"first\", \"middle\", \"last\" },\n+                listDataView2.getItems().toArray());\n+    }\n+\n+    @Test\n+    public void setSortComparator_twoComponentsHasSameDataProvider_onlyTargetComponentImpacted() {\n+        TestComponent component1 = new TestComponent();\n+        TestComponent component2 = new TestComponent();\n+\n+        ListDataProvider<Item> dataProvider = DataProvider.ofItems(\n+                new Item(1L, \"baz\"), new Item(2L, \"foo\"), new Item(1L, \"bar\"));\n+\n+        ItemListDataView listDataView1 = new ItemListDataView(\n+                () -> dataProvider, component1);\n+\n+        ItemListDataView listDataView2 = new ItemListDataView(\n+                () -> dataProvider, component2);\n+\n+        listDataView1.setSortComparator(\n+                (item1, item2) -> Long.compare(item1.getId(), item2.getId()));\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new Long[] { 1L, 1L, 2L },\n+                listDataView1.getItems().map(Item::getId).toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new Long[] { 1L, 2L, 1L },\n+                listDataView2.getItems().map(Item::getId).toArray());\n+\n+        listDataView1.addSortComparator((item1, item2) -> item1.getValue()\n+                .compareToIgnoreCase(item2.getValue()));\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new String[] { \"bar\", \"baz\", \"foo\" },\n+                listDataView1.getItems().map(Item::getValue).toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new String[] { \"baz\", \"foo\", \"bar\" },\n+                listDataView2.getItems().map(Item::getValue).toArray());\n+\n+        listDataView1.removeSorting();\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new Item[] { new Item(1L, \"baz\"), new Item(2L, \"foo\"),\n+                        new Item(1L, \"bar\") },\n+                listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new Item[] { new Item(1L, \"baz\"), new Item(2L, \"foo\"),\n+                        new Item(1L, \"bar\") },\n+                listDataView2.getItems().toArray());\n+    }\n+\n+    @Test\n+    public void setSortOrder_twoComponentsHasSameDataProvider_onlyTargetComponentImpacted() {\n+        TestComponent component1 = new TestComponent();\n+        TestComponent component2 = new TestComponent();\n+\n+        ListDataProvider<Item> dataProvider = DataProvider.ofItems(\n+                new Item(1L, \"baz\"), new Item(2L, \"foo\"), new Item(1L, \"bar\"));\n+\n+        ItemListDataView listDataView1 = new ItemListDataView(\n+                () -> dataProvider, component1);\n+\n+        ItemListDataView listDataView2 = new ItemListDataView(\n+                () -> dataProvider, component2);\n+\n+        listDataView1.setSortOrder(Item::getId, SortDirection.ASCENDING);\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new Long[] { 1L, 1L, 2L },\n+                listDataView1.getItems().map(Item::getId).toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new Long[] { 1L, 2L, 1L },\n+                listDataView2.getItems().map(Item::getId).toArray());\n+\n+        listDataView1.addSortOrder(Item::getValue, SortDirection.ASCENDING);\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new String[] { \"bar\", \"baz\", \"foo\" },\n+                listDataView1.getItems().map(Item::getValue).toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new String[] { \"baz\", \"foo\", \"bar\" },\n+                listDataView2.getItems().map(Item::getValue).toArray());\n+\n+        listDataView1.removeSorting();\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #1\",\n+                new Item[] { new Item(1L, \"baz\"), new Item(2L, \"foo\"),\n+                        new Item(1L, \"bar\") },\n+                listDataView1.getItems().toArray());\n+\n+        Assert.assertArrayEquals(\"Unexpected items sorting for component #2\",\n+                new Item[] { new Item(1L, \"baz\"), new Item(2L, \"foo\"),\n+                        new Item(1L, \"bar\") },\n+                listDataView2.getItems().toArray());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NzU4Mw==", "bodyText": "So how is this working when none of the components react to this event ? Why not fire the DataChangeEvent instead ?", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r519667583", "createdAt": "2020-11-09T09:33:53Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -380,4 +411,34 @@ private void addItemCollectionOnTarget(Collection<T> items, T target,\n         itemList.addAll(indexToInsertItems, items);\n         dataProvider.refreshAll();\n     }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private Query getQuery(boolean filteringOnly) {\n+        final Optional<ComponentInMemoryFilter<T>> filter = getComponentInMemoryFilter();\n+\n+        final Optional<ComponentSorting<T>> sorting = filteringOnly\n+                ? Optional.empty()\n+                : getComponentSorting();\n+\n+        return new Query(0, Integer.MAX_VALUE, null,\n+                sorting.map(ComponentSorting::getSortComparator).orElse(null),\n+                filter.map(ComponentInMemoryFilter::getFilter).orElse(null));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Optional<ComponentSorting<T>> getComponentSorting() {\n+        return Optional.ofNullable(\n+                ComponentUtil.getData(component, ComponentSorting.class));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Optional<ComponentInMemoryFilter<T>> getComponentInMemoryFilter() {\n+        return Optional.ofNullable(ComponentUtil.getData(component,\n+                ComponentInMemoryFilter.class));\n+    }\n+\n+    private void fireDataChangeEvent() {\n+        ComponentUtil.fireEvent(component,\n+                new ComponentDataChangeEvent<>(component));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc14a01dc8da06d4a662ba71676297a2826aaeb4"}, "originalPosition": 176}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ac6f5cfb6122d37dc6e3e11209ec4d36807b81b", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/3ac6f5cfb6122d37dc6e3e11209ec4d36807b81b", "committedDate": "2020-11-09T20:17:29Z", "message": "Remove redundant classes, add data change callback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/600581253bf56ec9740076c139f3372b2fd1fe5b", "committedDate": "2020-11-10T13:37:03Z", "message": "Update list data view javadoc regards filtering and sorting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MTQ2MzUx", "url": "https://github.com/vaadin/flow/pull/9315#pullrequestreview-528146351", "createdAt": "2020-11-11T12:55:00Z", "commit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjo1NTowMFrOHxL-TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzoxMTo0NVrOHxMicQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMzODQ0NQ==", "bodyText": "Nit: this method name should be something different but not blocking", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521338445", "createdAt": "2020-11-11T12:55:00Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -380,4 +488,22 @@ private void addItemCollectionOnTarget(Collection<T> items, T target,\n         itemList.addAll(indexToInsertItems, items);\n         dataProvider.refreshAll();\n     }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private Query getQuery(boolean withSorting) {\n+        final Optional<SerializablePredicate<T>> filter = getComponentFilter(\n+                component);\n+\n+        final Optional<SerializableComparator<T>> sorting = withSorting\n+                ? getComponentSortComparator(component)\n+                : Optional.empty();\n+\n+        return new Query(0, Integer.MAX_VALUE, null,\n+                sorting.orElse(null), filter.orElse(null));\n+    }\n+\n+    private void fireDataChangeEvent(SerializablePredicate<T> filter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NzA3OQ==", "bodyText": "A filter bound to the component.\n\nThis is a bit odd way of continuing the javadocs at this point... maybe\n\nThis filter is bound to the component.\n\nwould make it more natural.", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521347079", "createdAt": "2020-11-11T13:10:38Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -266,11 +266,10 @@\n      * that has been set or added previously. {@code null} will clear all\n      * filters.\n      * <p>\n-     * A filter bound to data set, not to the component. That means this filter\n-     * won't be retained when a new data or {@link DataProvider} is set to the\n-     * component. Any other component using the same {@link DataProvider} object\n-     * would be affected by setting a filter through data view of another\n-     * component.\n+     * A filter bound to the component. Any other component using the same", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NzIwMA==", "bodyText": "The same as above", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521347200", "createdAt": "2020-11-11T13:10:53Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -286,11 +285,10 @@\n      * Adds a filter to be applied to all queries. The filter will be used in\n      * addition to any filter that has been set or added previously.\n      * <p>\n-     * A filter bound to data set, not to the component. That means this filter\n-     * and previously added filters won't be retained when a new data or\n-     * {@link DataProvider} is set to the component. Any other component using\n-     * the same {@link DataProvider} object would be affected by adding a filter\n-     * through data view of another component.\n+     * A filter bound to the component. Any other component using the same", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NzQ5Ng==", "bodyText": "The same as above, seem off. Maybe\n\nThis comparator is bound to the component. Thus any other...\n\nwould be better", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521347496", "createdAt": "2020-11-11T13:11:22Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -315,11 +313,11 @@\n      * Sets the comparator to use as the default sorting. This overrides the\n      * sorting set by any other method that manipulates the default sorting.\n      * <p>\n-     * A comparator bound to data set, not to the component. That means the\n-     * default sorting won't be retained when a new data or {@link DataProvider}\n-     * is set to the component. Any other component using the same\n-     * {@link DataProvider} object would be affected by setting a sort\n-     * comparator through data view of another component.\n+     * A comparator bound to the component. Any other component using the same", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NzY5Nw==", "bodyText": "Same as above", "url": "https://github.com/vaadin/flow/pull/9315#discussion_r521347697", "createdAt": "2020-11-11T13:11:45Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -337,11 +335,11 @@\n      * comparator will be used to determine the ordering of items that are\n      * considered equal by the previously defined default sorting.\n      * <p>\n-     * A comparator added to data set, not to the component. That means the\n-     * default sorting won't be retained when a new data or {@link DataProvider}\n-     * is set to the component. Any other component using the same\n-     * {@link DataProvider} object would be affected by adding a sort comparator\n-     * through data view of another component.\n+     * A comparator bound to the component. Any other component using the same", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "600581253bf56ec9740076c139f3372b2fd1fe5b"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fac591ef499bfd7e2c71db0206e764873a71c7b", "author": {"user": {"login": "mshabarov", "name": "Mikhail Shabarov"}}, "url": "https://github.com/vaadin/flow/commit/3fac591ef499bfd7e2c71db0206e764873a71c7b", "committedDate": "2020-11-11T13:46:07Z", "message": "Address the comments regards javadoc and method name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4ODI4MDE4", "url": "https://github.com/vaadin/flow/pull/9315#pullrequestreview-528828018", "createdAt": "2020-11-12T07:59:39Z", "commit": {"oid": "3fac591ef499bfd7e2c71db0206e764873a71c7b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4791, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}