{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MDMyNzM5", "number": 9377, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoxMjo0NlrOE3y-SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzo1Mjo0OVrOE5fz-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTQyMjgxOnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/ConnectionState.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoxMjo0NlrOHxWd7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzo0MToyN1rOHxt3ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxMDM4MA==", "bodyText": "BTW: Using Set instead of array for storage works better for this use case, in particular, addStateChangeListener and removeStateChangeListener methods would map directly to stateChangeListeners.add and stateChangeListeners.remove.\nIterating a Set could be done with for...of\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set", "url": "https://github.com/vaadin/flow/pull/9377#discussion_r521510380", "createdAt": "2020-11-11T17:12:46Z", "author": {"login": "platosha"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/ConnectionState.ts", "diffHunk": "@@ -0,0 +1,72 @@\n+export enum ConnectionState {\n+  /**\n+   * Application is connected to server: last transaction over the wire (XHR /\n+   * heartbeat / endpoint call) was successful.\n+   */\n+  CONNECTED ='connected',\n+\n+  /**\n+   * Application is connected and Flow is loading application state from the\n+   * server, or Fusion is waiting for an endpoint call to return.\n+   */\n+  LOADING = 'loading',\n+\n+  /**\n+   * Application has been temporarily disconnected from the server because the\n+   * last transaction over the write (XHR / heartbeat / endpoint call) resulted\n+   * in a network error. Flow is attempting to reconnect.\n+   */\n+  RECONNECTING = 'reconnecting',\n+\n+  /**\n+   * Application has been permanently disconnected due to browser going offline,\n+   * or the server not being reached after a number of reconnect attempts\n+   * (see ReconnectDialogConfiguration.java: RECONNECT_ATTEMPTS_KEY).\n+   */\n+  CONNECTION_LOST = 'connection-lost'\n+}\n+\n+type ConnectionStateChangeListener = (previous: ConnectionState, current: ConnectionState) => void;\n+\n+export class ConnectionStateStore {\n+\n+  private state: ConnectionState;\n+\n+  private stateChangeListeners: ConnectionStateChangeListener[] = [];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62c2196d3060ed05840c922f376c141fbbd97020"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5Mzc5MA==", "bodyText": "Done.", "url": "https://github.com/vaadin/flow/pull/9377#discussion_r521893790", "createdAt": "2020-11-12T07:41:27Z", "author": {"login": "joheriks"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/ConnectionState.ts", "diffHunk": "@@ -0,0 +1,72 @@\n+export enum ConnectionState {\n+  /**\n+   * Application is connected to server: last transaction over the wire (XHR /\n+   * heartbeat / endpoint call) was successful.\n+   */\n+  CONNECTED ='connected',\n+\n+  /**\n+   * Application is connected and Flow is loading application state from the\n+   * server, or Fusion is waiting for an endpoint call to return.\n+   */\n+  LOADING = 'loading',\n+\n+  /**\n+   * Application has been temporarily disconnected from the server because the\n+   * last transaction over the write (XHR / heartbeat / endpoint call) resulted\n+   * in a network error. Flow is attempting to reconnect.\n+   */\n+  RECONNECTING = 'reconnecting',\n+\n+  /**\n+   * Application has been permanently disconnected due to browser going offline,\n+   * or the server not being reached after a number of reconnect attempts\n+   * (see ReconnectDialogConfiguration.java: RECONNECT_ATTEMPTS_KEY).\n+   */\n+  CONNECTION_LOST = 'connection-lost'\n+}\n+\n+type ConnectionStateChangeListener = (previous: ConnectionState, current: ConnectionState) => void;\n+\n+export class ConnectionStateStore {\n+\n+  private state: ConnectionState;\n+\n+  private stateChangeListeners: ConnectionStateChangeListener[] = [];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxMDM4MA=="}, "originalCommit": {"oid": "62c2196d3060ed05840c922f376c141fbbd97020"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTQyMzAzOnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/ConnectionState.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoxMjo0OFrOHxWeEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzo0MToyMlrOHxt3eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxMDQxOQ==", "bodyText": "Should we do get state() set state() instead of getState()/setState() maybe?", "url": "https://github.com/vaadin/flow/pull/9377#discussion_r521510419", "createdAt": "2020-11-11T17:12:48Z", "author": {"login": "platosha"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/ConnectionState.ts", "diffHunk": "@@ -0,0 +1,72 @@\n+export enum ConnectionState {\n+  /**\n+   * Application is connected to server: last transaction over the wire (XHR /\n+   * heartbeat / endpoint call) was successful.\n+   */\n+  CONNECTED ='connected',\n+\n+  /**\n+   * Application is connected and Flow is loading application state from the\n+   * server, or Fusion is waiting for an endpoint call to return.\n+   */\n+  LOADING = 'loading',\n+\n+  /**\n+   * Application has been temporarily disconnected from the server because the\n+   * last transaction over the write (XHR / heartbeat / endpoint call) resulted\n+   * in a network error. Flow is attempting to reconnect.\n+   */\n+  RECONNECTING = 'reconnecting',\n+\n+  /**\n+   * Application has been permanently disconnected due to browser going offline,\n+   * or the server not being reached after a number of reconnect attempts\n+   * (see ReconnectDialogConfiguration.java: RECONNECT_ATTEMPTS_KEY).\n+   */\n+  CONNECTION_LOST = 'connection-lost'\n+}\n+\n+type ConnectionStateChangeListener = (previous: ConnectionState, current: ConnectionState) => void;\n+\n+export class ConnectionStateStore {\n+\n+  private state: ConnectionState;\n+\n+  private stateChangeListeners: ConnectionStateChangeListener[] = [];\n+\n+  constructor(initialState: ConnectionState) {\n+      this.state = initialState;\n+  }\n+\n+  getState(): ConnectionState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62c2196d3060ed05840c922f376c141fbbd97020"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5Mzc1Mw==", "bodyText": "Agreed, done.", "url": "https://github.com/vaadin/flow/pull/9377#discussion_r521893753", "createdAt": "2020-11-12T07:41:22Z", "author": {"login": "joheriks"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/ConnectionState.ts", "diffHunk": "@@ -0,0 +1,72 @@\n+export enum ConnectionState {\n+  /**\n+   * Application is connected to server: last transaction over the wire (XHR /\n+   * heartbeat / endpoint call) was successful.\n+   */\n+  CONNECTED ='connected',\n+\n+  /**\n+   * Application is connected and Flow is loading application state from the\n+   * server, or Fusion is waiting for an endpoint call to return.\n+   */\n+  LOADING = 'loading',\n+\n+  /**\n+   * Application has been temporarily disconnected from the server because the\n+   * last transaction over the write (XHR / heartbeat / endpoint call) resulted\n+   * in a network error. Flow is attempting to reconnect.\n+   */\n+  RECONNECTING = 'reconnecting',\n+\n+  /**\n+   * Application has been permanently disconnected due to browser going offline,\n+   * or the server not being reached after a number of reconnect attempts\n+   * (see ReconnectDialogConfiguration.java: RECONNECT_ATTEMPTS_KEY).\n+   */\n+  CONNECTION_LOST = 'connection-lost'\n+}\n+\n+type ConnectionStateChangeListener = (previous: ConnectionState, current: ConnectionState) => void;\n+\n+export class ConnectionStateStore {\n+\n+  private state: ConnectionState;\n+\n+  private stateChangeListeners: ConnectionStateChangeListener[] = [];\n+\n+  constructor(initialState: ConnectionState) {\n+      this.state = initialState;\n+  }\n+\n+  getState(): ConnectionState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxMDQxOQ=="}, "originalCommit": {"oid": "62c2196d3060ed05840c922f376c141fbbd97020"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTQ3NTc5OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/ConnectionState.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoyNjoyNlrOHxW_6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzo0MToxN1rOHxt3TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxOTA4MA==", "bodyText": "Maybe get online(): boolean should be preferred", "url": "https://github.com/vaadin/flow/pull/9377#discussion_r521519080", "createdAt": "2020-11-11T17:26:26Z", "author": {"login": "platosha"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/ConnectionState.ts", "diffHunk": "@@ -0,0 +1,72 @@\n+export enum ConnectionState {\n+  /**\n+   * Application is connected to server: last transaction over the wire (XHR /\n+   * heartbeat / endpoint call) was successful.\n+   */\n+  CONNECTED ='connected',\n+\n+  /**\n+   * Application is connected and Flow is loading application state from the\n+   * server, or Fusion is waiting for an endpoint call to return.\n+   */\n+  LOADING = 'loading',\n+\n+  /**\n+   * Application has been temporarily disconnected from the server because the\n+   * last transaction over the write (XHR / heartbeat / endpoint call) resulted\n+   * in a network error. Flow is attempting to reconnect.\n+   */\n+  RECONNECTING = 'reconnecting',\n+\n+  /**\n+   * Application has been permanently disconnected due to browser going offline,\n+   * or the server not being reached after a number of reconnect attempts\n+   * (see ReconnectDialogConfiguration.java: RECONNECT_ATTEMPTS_KEY).\n+   */\n+  CONNECTION_LOST = 'connection-lost'\n+}\n+\n+type ConnectionStateChangeListener = (previous: ConnectionState, current: ConnectionState) => void;\n+\n+export class ConnectionStateStore {\n+\n+  private state: ConnectionState;\n+\n+  private stateChangeListeners: ConnectionStateChangeListener[] = [];\n+\n+  constructor(initialState: ConnectionState) {\n+      this.state = initialState;\n+  }\n+\n+  getState(): ConnectionState {\n+    return this.state;\n+  }\n+\n+  addStateChangeListener(listener: ConnectionStateChangeListener): void {\n+    if (this.stateChangeListeners.indexOf(listener) === -1) {\n+      this.stateChangeListeners.push(listener);\n+    }\n+  }\n+\n+  removeStateChangeListener(listener: ConnectionStateChangeListener): void {\n+    const index = this.stateChangeListeners.indexOf(listener);\n+    this.stateChangeListeners.splice(index);\n+  }\n+\n+  setState(newState: ConnectionState) {\n+    if (newState !== this.state) {\n+      const prevState = this.state;\n+      this.state = newState;\n+      this.stateChangeListeners.forEach(listener => listener(prevState, this.state));\n+    }\n+  }\n+\n+  isOnline(): boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62c2196d3060ed05840c922f376c141fbbd97020"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5MzcwOA==", "bodyText": "Done.", "url": "https://github.com/vaadin/flow/pull/9377#discussion_r521893708", "createdAt": "2020-11-12T07:41:17Z", "author": {"login": "joheriks"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/ConnectionState.ts", "diffHunk": "@@ -0,0 +1,72 @@\n+export enum ConnectionState {\n+  /**\n+   * Application is connected to server: last transaction over the wire (XHR /\n+   * heartbeat / endpoint call) was successful.\n+   */\n+  CONNECTED ='connected',\n+\n+  /**\n+   * Application is connected and Flow is loading application state from the\n+   * server, or Fusion is waiting for an endpoint call to return.\n+   */\n+  LOADING = 'loading',\n+\n+  /**\n+   * Application has been temporarily disconnected from the server because the\n+   * last transaction over the write (XHR / heartbeat / endpoint call) resulted\n+   * in a network error. Flow is attempting to reconnect.\n+   */\n+  RECONNECTING = 'reconnecting',\n+\n+  /**\n+   * Application has been permanently disconnected due to browser going offline,\n+   * or the server not being reached after a number of reconnect attempts\n+   * (see ReconnectDialogConfiguration.java: RECONNECT_ATTEMPTS_KEY).\n+   */\n+  CONNECTION_LOST = 'connection-lost'\n+}\n+\n+type ConnectionStateChangeListener = (previous: ConnectionState, current: ConnectionState) => void;\n+\n+export class ConnectionStateStore {\n+\n+  private state: ConnectionState;\n+\n+  private stateChangeListeners: ConnectionStateChangeListener[] = [];\n+\n+  constructor(initialState: ConnectionState) {\n+      this.state = initialState;\n+  }\n+\n+  getState(): ConnectionState {\n+    return this.state;\n+  }\n+\n+  addStateChangeListener(listener: ConnectionStateChangeListener): void {\n+    if (this.stateChangeListeners.indexOf(listener) === -1) {\n+      this.stateChangeListeners.push(listener);\n+    }\n+  }\n+\n+  removeStateChangeListener(listener: ConnectionStateChangeListener): void {\n+    const index = this.stateChangeListeners.indexOf(listener);\n+    this.stateChangeListeners.splice(index);\n+  }\n+\n+  setState(newState: ConnectionState) {\n+    if (newState !== this.state) {\n+      const prevState = this.state;\n+      this.state = newState;\n+      this.stateChangeListeners.forEach(listener => listener(prevState, this.state));\n+    }\n+  }\n+\n+  isOnline(): boolean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxOTA4MA=="}, "originalCommit": {"oid": "62c2196d3060ed05840c922f376c141fbbd97020"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTQ3NjQwOnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/Flow.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzoyNjozNlrOHxXASQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzo0MToxMlrOHxt3LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxOTE3Nw==", "bodyText": "Placing these handlers in Flow.ts makes them inactive before the first server-side view is requested, right? Was that intentional?", "url": "https://github.com/vaadin/flow/pull/9377#discussion_r521519177", "createdAt": "2020-11-11T17:26:36Z", "author": {"login": "platosha"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/Flow.ts", "diffHunk": "@@ -404,19 +394,34 @@ export class Flow {\n     // be reused in Connect.ts\n     let timeout2nd: any;\n     let timeout3rd: any;\n-    $wnd.Vaadin.Flow.loading = (action: boolean) => {\n+    const connectionState = new ConnectionStateStore(\n+      navigator.onLine ? ConnectionState.CONNECTED : ConnectionState.CONNECTION_LOST);\n+    connectionState.addStateChangeListener( (_: ConnectionState, current: ConnectionState) => {\n       clearTimeout(timeout2nd);\n       clearTimeout(timeout3rd);\n       loading.classList.remove('second');\n       loading.classList.remove('third');\n-      if (action) {\n+      if (current === ConnectionState.LOADING) {\n         loading.removeAttribute('style');\n         timeout2nd = setTimeout(() => loading.classList.add('second'), 1500);\n         timeout3rd = setTimeout(() => loading.classList.add('third'), 5000);\n+\n+        // Make Testbench know that server request is in progress\n+        this.isActive = true;\n       } else {\n         loading.setAttribute('style', 'none');\n+        // Make Testbench know that server request is no longer active\n+        this.isActive = false;\n       }\n-    };\n+    });\n+\n+    $wnd.addEventListener('online', () => {\n+      connectionState.setState(ConnectionState.CONNECTED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62c2196d3060ed05840c922f376c141fbbd97020"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5MzY3Nw==", "bodyText": "This code is invoked from the constructor of Flow, and this object is always created (in index.ts) even when starting from a client-side view AFAIK.", "url": "https://github.com/vaadin/flow/pull/9377#discussion_r521893677", "createdAt": "2020-11-12T07:41:12Z", "author": {"login": "joheriks"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/Flow.ts", "diffHunk": "@@ -404,19 +394,34 @@ export class Flow {\n     // be reused in Connect.ts\n     let timeout2nd: any;\n     let timeout3rd: any;\n-    $wnd.Vaadin.Flow.loading = (action: boolean) => {\n+    const connectionState = new ConnectionStateStore(\n+      navigator.onLine ? ConnectionState.CONNECTED : ConnectionState.CONNECTION_LOST);\n+    connectionState.addStateChangeListener( (_: ConnectionState, current: ConnectionState) => {\n       clearTimeout(timeout2nd);\n       clearTimeout(timeout3rd);\n       loading.classList.remove('second');\n       loading.classList.remove('third');\n-      if (action) {\n+      if (current === ConnectionState.LOADING) {\n         loading.removeAttribute('style');\n         timeout2nd = setTimeout(() => loading.classList.add('second'), 1500);\n         timeout3rd = setTimeout(() => loading.classList.add('third'), 5000);\n+\n+        // Make Testbench know that server request is in progress\n+        this.isActive = true;\n       } else {\n         loading.setAttribute('style', 'none');\n+        // Make Testbench know that server request is no longer active\n+        this.isActive = false;\n       }\n-    };\n+    });\n+\n+    $wnd.addEventListener('online', () => {\n+      connectionState.setState(ConnectionState.CONNECTED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxOTE3Nw=="}, "originalCommit": {"oid": "62c2196d3060ed05840c922f376c141fbbd97020"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzI1NDk5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/UI.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzo1Mjo0OVrOHz_pWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzo1OTozMVrOHz_7BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4MjIwMQ==", "bodyText": "Do we really need this? Isn't the LoadingIndicator imported in Flow.ts?", "url": "https://github.com/vaadin/flow/pull/9377#discussion_r524282201", "createdAt": "2020-11-16T13:52:49Z", "author": {"login": "haijian-vaadin"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/UI.java", "diffHunk": "@@ -92,6 +93,7 @@\n  *\n  * @since 1.0\n  */\n+@JsModule(\"@vaadin/flow-frontend/LoadingIndicator.js\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fead6afa736a7c5cd78f1c3f80a70c614906ecf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4NjcyNA==", "bodyText": "Flow.ts is not loaded in legacy bootstrapping mode. Agree it's not very nice to have a JsModule annotation here, open to suggestions for other ways of solving the backwards compatibility issue.", "url": "https://github.com/vaadin/flow/pull/9377#discussion_r524286724", "createdAt": "2020-11-16T13:59:31Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/UI.java", "diffHunk": "@@ -92,6 +93,7 @@\n  *\n  * @since 1.0\n  */\n+@JsModule(\"@vaadin/flow-frontend/LoadingIndicator.js\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4MjIwMQ=="}, "originalCommit": {"oid": "5fead6afa736a7c5cd78f1c3f80a70c614906ecf"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3016, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}