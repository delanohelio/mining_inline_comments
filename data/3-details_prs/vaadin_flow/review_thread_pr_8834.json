{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NDg0Mzcx", "number": 8834, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODoxNjo1OVrOEXGp8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDozNjo1NFrOEXkeXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjYxNzQ2OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODoxNjo1OVrOG-tPqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDozODowMVrOG_bp5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwNjE4NQ==", "bodyText": "Commenting here even though this is about lines 726-732, but I noticed this from the added test:\nIt seems that the pages are fetched even if the backend runs out of items. If this is intentional, I would expect to see it as a comment in the code below. Is it intentional ? I can understand if it would have some performance implications for us for checking if the page \"was full or not\", but on the other hand, bombing the backend with queries for pages that don't exist can have a price too ?\nBy minimum I would expect a comment in the code that mentions that whether this is intentional or not (for now).\nAnother thing is that is it documented somehow for the users ?\nThis behavior was a bit unexpected for me since it is perfectly fine that this method returns less items than what was requested and it there verifies the count anyway stopping any further requests, but it seems that this part in this method does not do it itself.", "url": "https://github.com/vaadin/flow/pull/8834#discussion_r468406185", "createdAt": "2020-08-11T08:16:59Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -716,7 +716,7 @@ protected Object getFilter() {\n              * Divisor minus one is placed on numerator part to ensure upwards\n              * rounding.\n              */\n-            final int pages = (limit + pageSize - 1) / pageSize;\n+            final int pages = (limit - 1) / pageSize + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6d6cba637c61cc88f401082f0922ab2dd2bf318"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxNzk0OA==", "bodyText": "Thanks for catching this. I believe it's just a mistake and there is no reason to send an extra requests to backend if it runs out of items. Non-sense backend requests have much more performance issues than converting Stream to collection and check the result size. So, yes, this should be fixed, possibly within this PR.", "url": "https://github.com/vaadin/flow/pull/8834#discussion_r469017948", "createdAt": "2020-08-12T05:45:13Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -716,7 +716,7 @@ protected Object getFilter() {\n              * Divisor minus one is placed on numerator part to ensure upwards\n              * rounding.\n              */\n-            final int pages = (limit + pageSize - 1) / pageSize;\n+            final int pages = (limit - 1) / pageSize + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwNjE4NQ=="}, "originalCommit": {"oid": "d6d6cba637c61cc88f401082f0922ab2dd2bf318"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NjA5Ng==", "bodyText": "As discussed in the daily - a TODO for the code and the test with issue reference will suffice for now.", "url": "https://github.com/vaadin/flow/pull/8834#discussion_r469086096", "createdAt": "2020-08-12T08:17:20Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -716,7 +716,7 @@ protected Object getFilter() {\n              * Divisor minus one is placed on numerator part to ensure upwards\n              * rounding.\n              */\n-            final int pages = (limit + pageSize - 1) / pageSize;\n+            final int pages = (limit - 1) / pageSize + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwNjE4NQ=="}, "originalCommit": {"oid": "d6d6cba637c61cc88f401082f0922ab2dd2bf318"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjU2NQ==", "bodyText": "done", "url": "https://github.com/vaadin/flow/pull/8834#discussion_r469166565", "createdAt": "2020-08-12T10:38:01Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -716,7 +716,7 @@ protected Object getFilter() {\n              * Divisor minus one is placed on numerator part to ensure upwards\n              * rounding.\n              */\n-            final int pages = (limit + pageSize - 1) / pageSize;\n+            final int pages = (limit - 1) / pageSize + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwNjE4NQ=="}, "originalCommit": {"oid": "d6d6cba637c61cc88f401082f0922ab2dd2bf318"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTUwMzAxOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDozNjo1NFrOG_bn6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDozNjo1NFrOG_bn6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjA1OA==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/vaadin/flow/pull/8834#discussion_r469166058", "createdAt": "2020-08-12T10:36:54Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -727,6 +727,13 @@ protected Object getFilter() {\n                     final int newOffset = offset + page * pageSize;\n                     query = new QueryTrace(newOffset, pageSize, backEndSorting,\n                             inMemorySorting, filter);\n+                    /*\n+                    * TODO: DataProvider is still queried for next pages", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d57741ae0a0a5eb6b0fa4ddcc48d4b9821aa23d"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3176, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}