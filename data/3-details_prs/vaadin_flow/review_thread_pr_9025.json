{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NTk1NTE0", "number": 9025, "reviewThreads": {"totalCount": 63, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzoyOFrOEk1SIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNTo0ODoxNVrOElgijQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MTg2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/AbstractBasicModelType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzoyOFrOHT_nDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzoyOFrOHT_nDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzE4MQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727181", "createdAt": "2020-09-18T06:23:28Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/AbstractBasicModelType.java", "diffHunk": "@@ -37,8 +37,12 @@\n  *            the (basic) Java type used by this model type\n  * @author Vaadin Ltd\n  * @since 1.0\n- *\n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             This will be removed in an upcoming version.\n  */\n+@Deprecated\n public abstract class AbstractBasicModelType<T> implements ModelType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MTkzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/TemplateModelListProxy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzoyOVrOHT_nFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzoyOVrOHT_nFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzE5MQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727191", "createdAt": "2020-09-18T06:23:29Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/TemplateModelListProxy.java", "diffHunk": "@@ -30,8 +30,14 @@\n  * @since 1.0\n  * @param <T>\n  *            the type of items in the list\n+ * \n+ * @deprecated This functionality is internal and bound to template model which\n+ *             is not supported for lit template. This will be removed in an\n+ *             upcoming version.\n  */\n-public class TemplateModelListProxy<T> extends AbstractList<T> implements Serializable {\n+@Deprecated\n+public class TemplateModelListProxy<T> extends AbstractList<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MTk1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/JsoupUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzoyOVrOHT_nGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzoyOVrOHT_nGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzE5NA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727194", "createdAt": "2020-09-18T06:23:29Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/JsoupUtils.java", "diffHunk": "@@ -26,8 +26,10 @@\n  * Utilities for JSOUP DOM manipulations.\n  *\n  * @author Vaadin Ltd\n- *\n+ * @deprecated This class is internal and used only for Polymer templates, it\n+ *             will be removed in an upcoming version.\n  */\n+@Deprecated\n final class JsoupUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MTk5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ModelEncoder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozMFrOHT_nHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozMFrOHT_nHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzE5OA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727198", "createdAt": "2020-09-18T06:23:30Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ModelEncoder.java", "diffHunk": "@@ -33,7 +33,14 @@\n  *            the decoded type\n  * @param <E>\n  *            the encoded type\n+ * \n+ * @deprecated This functionality is bound to template model which is not\n+ *             supported for lit template. You can use {@code @Id} mapping and\n+ *             the component API or the element API with property\n+ *             synchronization instead. This will be removed in an upcoming\n+ *             version.\n  */\n+@Deprecated\n public interface ModelEncoder<D, E extends Serializable> extends Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MjEyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozMlrOHT_nMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozMlrOHT_nMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzIxNg==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727216", "createdAt": "2020-09-18T06:23:32Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateInitializer.java", "diffHunk": "@@ -42,17 +44,21 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated Use {@link LitTemplateInitializer} for {@link LitTemplate}\n+ *             components, polymer templates are deprecated. This will be\n+ *             removed in an upcoming version.\n  *\n  */\n+@Deprecated\n public class TemplateInitializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MjE4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/PropertyMapBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozM1rOHT_nOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozM1rOHT_nOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzIyNg==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727226", "createdAt": "2020-09-18T06:23:33Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/PropertyMapBuilder.java", "diffHunk": "@@ -36,7 +36,12 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0.\n+ * \n+ * @deprecated This functionality is internal and bound to template model which\n+ *             is not supported for lit template. This will be removed in an\n+ *             upcoming version.\n  */\n+@Deprecated\n class PropertyMapBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MjI4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/PropertyFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozNFrOHT_nRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozNFrOHT_nRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzIzNg==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727236", "createdAt": "2020-09-18T06:23:34Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/PropertyFilter.java", "diffHunk": "@@ -22,7 +22,12 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated This functionality is internal and bound to template model which\n+ *             is not supported for lit template. This will be removed in an\n+ *             upcoming version.\n  */\n+@Deprecated\n public class PropertyFilter implements Predicate<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MjMzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ModelType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozNVrOHT_nSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozNVrOHT_nSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzI0Mg==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727242", "createdAt": "2020-09-18T06:23:35Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ModelType.java", "diffHunk": "@@ -33,7 +33,13 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             This will be removed in an upcoming version.\n  */\n+@Deprecated\n public interface ModelType extends Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MjQzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/TemplateModelUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozNlrOHT_nVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozNlrOHT_nVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzI1Mw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727253", "createdAt": "2020-09-18T06:23:36Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/TemplateModelUtil.java", "diffHunk": "@@ -31,7 +31,12 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated This functionality is internal and bound to template model which\n+ *             is not supported for lit template. This will be removed in an\n+ *             upcoming version.\n  */\n+@Deprecated\n public final class TemplateModelUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MjQ2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/AbstractTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozN1rOHT_nWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozN1rOHT_nWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzI1Nw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727257", "createdAt": "2020-09-18T06:23:37Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/AbstractTemplate.java", "diffHunk": "@@ -47,7 +48,10 @@\n  *\n  * @param <M>\n  *            a model class that will be used for template data propagation\n+ * @deprecated Polymer template support is deprecated - use {@link LitTemplate}\n+ *             instead. This will be removed in an upcoming version.\n  */\n+@Deprecated\n public abstract class AbstractTemplate<M extends TemplateModel>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MjQ4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/PolymerTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozOFrOHT_nXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozOFrOHT_nXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzI2Mg==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727262", "createdAt": "2020-09-18T06:23:38Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/PolymerTemplate.java", "diffHunk": "@@ -47,7 +49,11 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated Polymer template support is deprecated - use {@link LitTemplate}\n+ *             instead, polymer templates are deprecated. This will be removed\n+ *             in an upcoming version.\n  */\n+@Deprecated\n public abstract class PolymerTemplate<M extends TemplateModel>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MjUzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozOVrOHT_nZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzozOVrOHT_nZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzI2OA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727268", "createdAt": "2020-09-18T06:23:39Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "diffHunk": "@@ -56,7 +58,12 @@\n  * @since 2.0\n  *\n  * @see BundleParser\n+ * \n+ * @deprecated Use {@code LitTemplateParserImpl} class for {@link LitTemplate}\n+ *             components, polymer templates are deprecated. This will be\n+ *             removed in an upcoming version.\n  */\n+@Deprecated\n public class NpmTemplateParser implements TemplateParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MjU1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/TemplateModelProxyHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0MFrOHT_naQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0MFrOHT_naQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzI3Mw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727273", "createdAt": "2020-09-18T06:23:40Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/TemplateModelProxyHandler.java", "diffHunk": "@@ -45,7 +45,12 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated This functionality is internal and bound to template model which\n+ *             is not supported for lit template. This will be removed in an\n+ *             upcoming version.\n  */\n+@Deprecated\n public class TemplateModelProxyHandler implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MjU5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/AllowClientUpdates.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0MVrOHT_nbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0MVrOHT_nbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzI3Nw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727277", "createdAt": "2020-09-18T06:23:41Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/AllowClientUpdates.java", "diffHunk": "@@ -41,6 +46,7 @@\n @Target(ElementType.METHOD)\n @Repeatable(AllowClientUpdates.Container.class)\n @Documented\n+@Deprecated\n public @interface AllowClientUpdates {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MjY0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ModelDescriptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0MlrOHT_ndQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0MlrOHT_ndQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzI4NQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727285", "createdAt": "2020-09-18T06:23:42Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ModelDescriptor.java", "diffHunk": "@@ -24,7 +24,13 @@\n  * @since 1.0\n  * @param <T>\n  *            the template model type used by this descriptor\n+ * \n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             This will be removed in an upcoming version.\n  */\n+@Deprecated\n public class ModelDescriptor<T extends TemplateModel> extends BeanModelType<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MjY4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/ModelItem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0M1rOHT_nfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0M1rOHT_nfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzI5Mw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727293", "createdAt": "2020-09-18T06:23:43Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/ModelItem.java", "diffHunk": "@@ -34,10 +34,17 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated There is no any replacement in Lit template since template model\n+ *             is not supported for lit template, but you may still use\n+ *             {@code @EventData(\"some_data\")} to receive data from the client\n+ *             side or {@code @Id} mapping and the component API or the element\n+ *             API with property synchronization instead. This will be removed\n+ *             in an upcoming version.\n  */\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ ElementType.PARAMETER })\n @Documented\n+@Deprecated\n public @interface ModelItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MjcyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0NFrOHT_nhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0NFrOHT_nhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzMwMA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727300", "createdAt": "2020-09-18T06:23:44Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "diffHunk": "@@ -46,7 +46,11 @@\n  * @since 2.0\n  *\n  * @see NpmTemplateParser\n+ * @deprecated Use {@link BundleLitParser} to parse Lit template since polymer\n+ *             template is deprecated. This will be removed in an upcoming\n+ *             version.\n  */\n+@Deprecated\n public final class BundleParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3Mjc2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/BasicComplexModelType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0NVrOHT_niQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0NVrOHT_niQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzMwNQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727305", "createdAt": "2020-09-18T06:23:45Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/BasicComplexModelType.java", "diffHunk": "@@ -36,10 +36,15 @@\n  *\n  * @param <T>\n  *            the (basic) Java type used by this model type\n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             This will be removed in an upcoming version.\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n  */\n+@Deprecated\n public class BasicComplexModelType<T> extends AbstractBasicModelType<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MjgyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/PathLookup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0NlrOHT_nkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0NlrOHT_nkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzMxMg==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727312", "createdAt": "2020-09-18T06:23:46Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/PathLookup.java", "diffHunk": "@@ -27,7 +27,11 @@\n  * @since 1.0\n  * @param <T>\n  *            the item type\n+ * @deprecated This functionality is internal and bound to template model which\n+ *             is not supported for lit template. This will be removed in an\n+ *             upcoming version.\n  */\n+@Deprecated\n public class PathLookup<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3Mjg0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ComplexModelType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0N1rOHT_nlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo0N1rOHT_nlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzMxNw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727317", "createdAt": "2020-09-18T06:23:47Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ComplexModelType.java", "diffHunk": "@@ -25,7 +25,12 @@\n  *\n  * @param <T>\n  *            the proxy type used by this type\n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             This will be removed in an upcoming version.\n  */\n+@Deprecated\n public interface ComplexModelType<T> extends ModelType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3Mjk5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/BundleLitParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1MFrOHT_npg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1MFrOHT_npg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzMzNA==", "bodyText": "Remove this use of \"DEAULT_FLOW_RESOURCES_FOLDER\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727334", "createdAt": "2020-09-18T06:23:50Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/BundleLitParser.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEAULT_FLOW_RESOURCES_FOLDER;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.FLOW_NPM_PACKAGE_NAME;\n+import static elemental.json.JsonType.ARRAY;\n+import static elemental.json.JsonType.OBJECT;\n+import static elemental.json.JsonType.STRING;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.internal.StringUtil;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+\n+/**\n+ * Parse statistics data provided by webpack.\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @see LitTemplateParser\n+ */\n+public final class BundleLitParser {\n+\n+    private static final Logger LOGGER = LoggerFactory\n+            .getLogger(BundleLitParser.class);\n+\n+    private static final String SOURCE = \"source\";\n+    private static final String NAME = \"name\";\n+    private static final String CHUNKS = \"chunks\";\n+    private static final String MODULES = \"modules\";\n+\n+    /**\n+     * Lit template pattern matches the template getter\n+     *\n+     * <pre>\n+     *     render() {\n+     *       return html`\n+     *         &lt;style&gt;\n+     *           .response { margin-top: 10px`; }\n+     *         &lt;/style&gt;\n+     *         &lt;paper-checkbox checked=&quot;${liked}&quot;&gt;I like web components.&lt;/paper-checkbox&gt;\n+     *\n+     *         &lt;div id=&quot;test&quot; ?hidden=&quot;${liked}&quot; class=&quot;response&quot;&gt;Web components like you, too.&lt;/div&gt;\n+     *       `;\n+     *     }\n+     * </pre>\n+     *\n+     * <p>\n+     * <code>render\\(\\)[\\s]*\\{</code> finds the template getter method\n+     * <p>\n+     * <code>[\\s]*return[\\s]*html`</code> finds the return statement\n+     * <p>\n+     * </p>\n+     * <code>(([^`]|\\\\\\\\.)*)</code> captures all text until we encounter the end\n+     * character with <code>;}</code> e.g. <code>';}</code>\n+     */\n+    private static final Pattern LIT_TEMPLATE_PATTERN = Pattern.compile(\n+            \"render\\\\(\\\\)[\\\\s]*\\\\{[\\\\s]*return[\\\\s]*html`(([^`]|\\\\\\\\.)*)`;[\\\\s]*\\\\}\");\n+\n+    private static final Pattern HASH_PATTERN = Pattern\n+            .compile(\"\\\"hash\\\"\\\\s*:\\\\s*\\\"([^\\\"]+)\\\"\\\\s*,\");\n+\n+    private static final String TEMPLATE_TAG_NAME = \"template\";\n+\n+    private BundleLitParser() {\n+    }\n+\n+    /**\n+     * Gets the hash from the string content of a webpack stats file. It uses\n+     * regex to avoid parsing the entire string into a json object.\n+     *\n+     * @param fileContents\n+     *            the content of the stats file\n+     * @return the hash\n+     */\n+    public static String getHashFromStatistics(String fileContents) {\n+        Matcher matcher = HASH_PATTERN.matcher(fileContents);\n+        return matcher.find() ? matcher.group(1) : \"\" + fileContents.length();\n+    }\n+\n+    /**\n+     * Parses the content of the stats file to return a json object.\n+     *\n+     * @param fileContents\n+     *            the content of the stats file\n+     * @return a JsonObject with the stats\n+     */\n+    public static JsonObject parseJsonStatistics(String fileContents) {\n+        return Json.parse(fileContents);\n+    }\n+\n+    /**\n+     * Get a module source from the statistics Json file generated by webpack.\n+     *\n+     * @param fileName\n+     *            name of the file to get from the json\n+     * @param statistics\n+     *            statistics json as a JsonObject\n+     * @return JsonObject for the file statistic\n+     */\n+    public static String getSourceFromStatistics(String fileName,\n+            JsonObject statistics) {\n+        return getSourceFromObject(statistics, fileName);\n+    }\n+\n+    /**\n+     * Get the Lit template element for the given polymer template source.\n+     *\n+     * @param fileName\n+     *            name of the handled file\n+     * @param source\n+     *            source js to get template element from\n+     * @return template element or {code null} if not found\n+     */\n+    public static Element parseLitTemplateElement(String fileName,\n+            String source) {\n+        Document templateDocument = null;\n+        String content = StringUtil.removeComments(source);\n+        Matcher templateMatcher = LIT_TEMPLATE_PATTERN.matcher(content);\n+\n+        // GroupCount should be 2 as the first group contains `|'|\" depending\n+        // on what was in template return html' and the second is the\n+        // template contents.\n+        if (templateMatcher.find() && templateMatcher.groupCount() == 2) {\n+            String group = templateMatcher.group(1);\n+            LOGGER.trace(\"Found regular Lit template content was {}\", group);\n+\n+            templateDocument = Jsoup.parse(group);\n+            LOGGER.trace(\"The parsed template document was {}\",\n+                    templateDocument);\n+            Element template = templateDocument\n+                    .createElement(TEMPLATE_TAG_NAME);\n+            Element body = templateDocument.body();\n+            templateDocument.body().children().stream()\n+                    .filter(node -> !node.equals(body))\n+                    .forEach(template::appendChild);\n+\n+            return template;\n+        }\n+        LOGGER.warn(\"No lit template data found in {} sources.\", fileName);\n+        return null;\n+    }\n+\n+    // find the first module whose name matches the file name\n+    private static String getSourceFromObject(JsonObject module,\n+            String fileName) {\n+        String source = null;\n+        if (validKey(module, MODULES, ARRAY)) {\n+            source = getSourceFromArray(module.getArray(MODULES), fileName);\n+        }\n+        if (source == null && validKey(module, CHUNKS, ARRAY)) {\n+            source = getSourceFromArray(module.getArray(CHUNKS), fileName);\n+        }\n+        if (source == null && validKey(module, NAME, STRING)\n+                && validKey(module, SOURCE, STRING)) {\n+            String name = module.getString(NAME);\n+\n+            // append `.js` extension if not yet as webpack does\n+            fileName = fileName.replaceFirst(\"(\\\\.js|)$\", \".js\");\n+\n+            String alternativeFileName = fileName\n+                    // Replace frontend part since webpack entry-point is\n+                    // already in the frontend folder\n+                    .replaceFirst(\"^(\\\\./)frontend/\", \"$1\")\n+                    // Replace the flow frontend protocol\n+                    .replaceFirst(\"^frontend://\", \".\");\n+\n+            // For polymer templates inside add-ons we will not find the sources\n+            // using ./ as the actual path contains\n+            // \"node_modules/@vaadin/flow-frontend/\" instead of \"./\"\n+            // \"target/flow-frontend/\" instead of \"./\"\n+            if (name.contains(FLOW_NPM_PACKAGE_NAME)\n+                    || name.contains(DEAULT_FLOW_RESOURCES_FOLDER)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MzA0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/BasicModelType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1MVrOHT_nrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1MVrOHT_nrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzM0MQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727341", "createdAt": "2020-09-18T06:23:51Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/BasicModelType.java", "diffHunk": "@@ -25,7 +25,13 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             This will be removed in an upcoming version.\n  */\n+@Deprecated\n public class BasicModelType extends AbstractBasicModelType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MzA3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/Id.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1MlrOHT_nsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1MlrOHT_nsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzM0NQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727345", "createdAt": "2020-09-18T06:23:52Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/Id.java", "diffHunk": "@@ -75,10 +75,13 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated Use com.vaadin.flow.component.template.Id instead. This will be\n+ *             removed in an upcoming version.\n  */\n @Retention(RetentionPolicy.RUNTIME)\n @Target(ElementType.FIELD)\n @Documented\n+@Deprecated\n public @interface Id {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MzEwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ListModelType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1M1rOHT_nuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1M1rOHT_nuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzM1Mg==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727352", "createdAt": "2020-09-18T06:23:53Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ListModelType.java", "diffHunk": "@@ -39,7 +38,13 @@\n  * @since 1.0\n  * @param <T>\n  *            the proxy type used by the bean type of this type\n+ * \n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             This will be removed in an upcoming version.\n  */\n+@Deprecated\n public class ListModelType<T> implements ComplexModelType<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MzE1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ClientUpdateMode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1NFrOHT_nvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1NFrOHT_nvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzM1OQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727359", "createdAt": "2020-09-18T06:23:54Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ClientUpdateMode.java", "diffHunk": "@@ -22,7 +22,13 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated This functionality is bound to template model which is not\n+ *             supported for lit template. You can use {@code @Id} mapping and\n+ *             the component API or the element API with property\n+ *             synchronization instead. This will be removed in an upcoming\n+ *             version.\n  */\n+@Deprecated\n public enum ClientUpdateMode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MzE4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/BeanModelType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1NVrOHT_nxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1NVrOHT_nxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzM2Nw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727367", "createdAt": "2020-09-18T06:23:55Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/BeanModelType.java", "diffHunk": "@@ -50,7 +50,12 @@\n  * @since 1.0\n  * @param <T>\n  *            the proxy type used by this bean type\n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             This will be removed in an upcoming version.\n  */\n+@Deprecated\n public class BeanModelType<T> implements ComplexModelType<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MzIxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/InvalidTemplateModelException.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1NlrOHT_nzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1NlrOHT_nzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzM3Mg==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727372", "createdAt": "2020-09-18T06:23:56Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/InvalidTemplateModelException.java", "diffHunk": "@@ -20,11 +20,18 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated This functionality is bound to template model which is not\n+ *             supported for lit template. You can use {@code @Id} mapping and\n+ *             the component API or the element API with property\n+ *             synchronization instead. This will be removed in an upcoming\n+ *             version.\n  */\n+@Deprecated\n public class InvalidTemplateModelException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MzI2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/IdMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1N1rOHT_n0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1N1rOHT_n0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzM3OA==", "bodyText": "The class name com.vaadin.flow.component.polymertemplate.IdMapper shadows the simple name of the superclass com.vaadin.flow.component.template.internal.IdMapper", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727378", "createdAt": "2020-09-18T06:23:57Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/IdMapper.java", "diffHunk": "@@ -47,164 +36,7 @@\n      *            a template instance\n      */\n     public IdMapper(Component template) {\n-        this.template = template;\n-    }\n-\n-    /**\n-     * Maps an element or component to the given field.\n-     * <p>\n-     * If an element with the given id exists in the template element tree, that\n-     * element is used.\n-     * <p>\n-     * If no element exists (the typical case), a virtual element is created and\n-     * later on, when the template has been rendered in the client, is connected\n-     * to the rendered element with the given id.\n-     *\n-     * @param field\n-     *            the field to assign the element/component to\n-     * @param id\n-     *            the id of the element to map\n-     * @param tag\n-     *            the tag of the injected element or <code>null</code> if not\n-     *            known\n-     * @param beforeInject\n-     *            a callback invoked before assigning the element/component to\n-     *            the field\n-     */\n-    public void mapComponentOrElement(Field field, String id, String tag,\n-            Consumer<Element> beforeInject) {\n-        injectClientSideElement(tag, id, field, beforeInject);\n-    }\n-\n-    private Class<? extends Component> getContainerClass() {\n-        return template.getClass();\n-    }\n-\n-    private void injectClientSideElement(String tagName, String id, Field field,\n-            Consumer<Element> beforeInject) {\n-        Class<?> fieldType = field.getType();\n-\n-        Tag tag = fieldType.getAnnotation(Tag.class);\n-        if (tag != null && tagName != null\n-                && !tagName.equalsIgnoreCase(tag.value())) {\n-            String msg = String.format(\n-                    \"Class '%s' has field '%s' whose type '%s' is annotated with \"\n-                            + \"tag '%s' but the element defined in the HTML \"\n-                            + \"template with id '%s' has tag name '%s'\",\n-                    getContainerClass().getName(), field.getName(),\n-                    fieldType.getName(), tag.value(), id, tagName);\n-            throw new IllegalStateException(msg);\n-        }\n-        if (tag != null) {\n-            // tag can be null if injecting Element\n-            // tagName is the tag parsed from the template and it is null for\n-            // Lit templates,\n-            // which are not parsed\n-            tagName = tag.value();\n-        }\n-        attachExistingElementById(tagName, id, field, beforeInject);\n-    }\n-\n-    /**\n-     * Gets the shadow root for the template.\n-     * <p>\n-     * Creates a shadow root if the template does not have one.\n-     *\n-     * @return the shadow root for the template\n-     */\n-    public ShadowRoot getOrCreateShadowRoot() {\n-        return getElement().getShadowRoot()\n-                .orElseGet(() -> getElement().attachShadow());\n-    }\n-\n-    private Element getElement() {\n-        return template.getElement();\n-    }\n-\n-    /**\n-     * Attaches a child element with the given {@code tagName} and {@code id} to\n-     * an existing dom element on the client side with matching data.\n-     *\n-     * @param tagName\n-     *            tag name of element, not\u00a0{@code null}\n-     * @param id\n-     *            id of element to attach to\n-     * @param field\n-     *            field to attach {@code Element} or {@code Component} to\n-     * @param beforeInject\n-     *            a callback invoked before assigning the element/component to\n-     *            the field\n-     */\n-    private void attachExistingElementById(String tagName, String id,\n-            Field field, Consumer<Element> beforeInject) {\n-        if (tagName == null) {\n-            throw new IllegalArgumentException(\n-                    \"Tag name parameter cannot be null\");\n-        }\n-\n-        Element element = registeredElementIdToInjected.get(id);\n-        if (element == null) {\n-            element = new Element(tagName);\n-            VirtualChildrenList list = getElement().getNode()\n-                    .getFeature(VirtualChildrenList.class);\n-            list.append(element.getNode(), NodeProperties.INJECT_BY_ID, id);\n-            registeredElementIdToInjected.put(id, element);\n-        }\n-        injectTemplateElement(element, field, beforeInject);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private void injectTemplateElement(Element element, Field field,\n-            Consumer<Element> beforeInject) {\n-        Class<?> fieldType = field.getType();\n-        if (Component.class.isAssignableFrom(fieldType)) {\n-            beforeInject.accept(element);\n-            Component component;\n-\n-            Optional<Component> wrappedComponent = element.getComponent();\n-            if (wrappedComponent.isPresent()) {\n-                component = wrappedComponent.get();\n-            } else {\n-                Class<? extends Component> componentType = (Class<? extends Component>) fieldType;\n-                component = Component.from(element, componentType);\n-            }\n-\n-            ReflectTools.setJavaFieldValue(template, field, component);\n-        } else if (Element.class.isAssignableFrom(fieldType)) {\n-            beforeInject.accept(element);\n-            ReflectTools.setJavaFieldValue(template, field, element);\n-        } else {\n-            String msg = String.format(\n-                    \"The field '%s' in '%s' has an @'%s' \"\n-                            + \"annotation but the field type '%s' \"\n-                            + \"does not extend neither '%s' nor '%s'\",\n-                    field.getName(), getContainerClass().getName(),\n-                    Id.class.getSimpleName(), fieldType.getName(),\n-                    Component.class.getSimpleName(),\n-                    Element.class.getSimpleName());\n-\n-            throw new IllegalArgumentException(msg);\n-        }\n-    }\n-\n-    /**\n-     * Resets the mapper to its original state, clearing any registered\n-     * mappings.\n-     */\n-    public void reset() {\n-        registeredElementIdToInjected.clear();\n-    }\n-\n-    /**\n-     * Checks if the given id has been mapped.\n-     *\n-     * @param id\n-     *            the id to check\n-     * @return <code>true</code> if the element has been mapped,\n-     *         <code>false</code> otherwise\n-     */\n-    public boolean isMapped(String id) {\n-        return registeredElementIdToInjected.containsKey(id);\n+        super(template);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MzMyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/IdMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1OFrOHT_n2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1OFrOHT_n2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzM4Nw==", "bodyText": "Rename this class. \n Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727387", "createdAt": "2020-09-18T06:23:58Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/IdMapper.java", "diffHunk": "@@ -15,30 +15,19 @@\n  */\n package com.vaadin.flow.component.polymertemplate;\n \n-import java.io.Serializable;\n-import java.lang.reflect.Field;\n-import java.util.HashMap;\n-import java.util.Optional;\n-import java.util.function.Consumer;\n-\n import com.vaadin.flow.component.Component;\n-import com.vaadin.flow.component.Tag;\n-import com.vaadin.flow.dom.Element;\n-import com.vaadin.flow.dom.ShadowRoot;\n-import com.vaadin.flow.internal.ReflectTools;\n-import com.vaadin.flow.internal.nodefeature.NodeProperties;\n-import com.vaadin.flow.internal.nodefeature.VirtualChildrenList;\n+import com.vaadin.flow.component.template.Id;\n \n /**\n  * Creates or maps Element instances to fields mapped using {@link Id @Id}.\n  *\n  * @since 2.0\n+ * @deprecated Use {@link com.vaadin.flow.component.template.internal.IdMapper}\n+ *             instead. This will be removed in an upcoming version.\n  */\n-public class IdMapper implements Serializable {\n-\n-    private final HashMap<String, Element> registeredElementIdToInjected = new HashMap<>();\n-\n-    private Component template;\n+@Deprecated\n+public class IdMapper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MzM4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ConvertedModelType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1OVrOHT_n4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyMzo1OVrOHT_n4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzM5NA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727394", "createdAt": "2020-09-18T06:23:59Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ConvertedModelType.java", "diffHunk": "@@ -34,7 +34,13 @@\n  *            application type of the converter used by this class\n  * @param <M>\n  *            model type of the converter used by this class\n+ * \n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             This will be removed in an upcoming version.\n  */\n+@Deprecated\n public class ConvertedModelType<A, M extends Serializable>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MzQ0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateDataAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowMFrOHT_n6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowMFrOHT_n6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzQwMQ==", "bodyText": "Replace this lambda with a method reference.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727401", "createdAt": "2020-09-18T06:24:00Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateDataAnalyzer.java", "diffHunk": "@@ -141,23 +146,9 @@ public ParserData(Map<Field, String> fields, Map<String, String> tags,\n          *            the consumer to call for each mapped field\n          */\n         public void forEachInjectedField(InjectableFieldCunsumer consumer) {\n-            idByField.forEach(\n-                    (field, id) -> consumer.apply(field, id, tagById.get(id)));\n-        }\n-\n-        /**\n-         * Gets template element data (attribute values).\n-         * \n-         * @param id\n-         *            the id of the element\n-         * @return template data\n-         */\n-        public Map<String, String> getAttributes(String id) {\n-            Map<String, String> attrs = attributesById.get(id);\n-            if (attrs == null) {\n-                return Collections.emptyMap();\n-            }\n-            return attrs;\n+            InjectableFieldConsumer delegate = (field, id, tag) -> consumer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MzUyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateDataAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowMVrOHT_n9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowMVrOHT_n9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzQxMw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727413", "createdAt": "2020-09-18T06:24:01Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateDataAnalyzer.java", "diffHunk": "@@ -48,8 +51,12 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated Use {@code LitTemplateDataAnalyzer} for {@link LitTemplate}\n+ *             components, polymer templates are deprecated. This will be\n+ *             removed in an upcoming version.\n  *\n  */\n+@Deprecated\n public class TemplateDataAnalyzer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MzU4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateDataAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowNFrOHT_n_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowNFrOHT_n_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzQyMQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727421", "createdAt": "2020-09-18T06:24:04Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateDataAnalyzer.java", "diffHunk": "@@ -91,18 +98,17 @@\n          * @param tag\n          *            the element tag\n          */\n+        @Override\n         void apply(Field field, String id, String tag);\n     }\n \n     /**\n      * Immutable parser data which may be stored in cache.\n+     * \n+     * Use {@link ParserData} instead.\n      */\n-    public static class ParserData {\n-\n-        private final Map<String, String> tagById;\n-        private final Map<Field, String> idByField;\n-\n-        private final Map<String, Map<String, String>> attributesById;\n+    @Deprecated\n+    public static class PolymerParserData extends ParserData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MzYyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/InjectablePolymerElementInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowNVrOHT_oAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowNVrOHT_oAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzQyNw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727427", "createdAt": "2020-09-18T06:24:05Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/InjectablePolymerElementInitializer.java", "diffHunk": "@@ -27,8 +28,11 @@\n  * \n  * @author Vaadin Ltd\n  * @since\n- *\n+ * @deprecated {@link InjectableLitElementInitializer} should be used for Lit\n+ *             templates since polymer support is deprecated. This will be\n+ *             removed in an upcoming version.\n  */\n+@Deprecated\n public class InjectablePolymerElementInitializer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3MzcxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/IdCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowN1rOHT_oEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowN1rOHT_oEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzQ0Mw==", "bodyText": "Remove this use of \"Id\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727443", "createdAt": "2020-09-18T06:24:07Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/IdCollector.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.template.internal;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.jsoup.nodes.Attribute;\n+import org.jsoup.nodes.Attributes;\n+import org.jsoup.nodes.Element;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.polymertemplate.Id;\n+import com.vaadin.flow.internal.AnnotationReader;\n+\n+/**\n+ * Collects information of {@link Id @Id} mapped fields in a template class.\n+ *\n+ * @since\n+ */\n+public class IdCollector {\n+    private final Map<String, String> tagById = new HashMap<>();\n+    private final Map<Field, String> idByField = new HashMap<>();\n+    private final Map<String, Map<String, String>> attributesById = new HashMap<>();\n+    private Element templateRoot;\n+    private Class<?> templateClass;\n+    private String templateFile;\n+\n+    /**\n+     * Creates a collector the the given template.\n+     *\n+     * @param templateClass\n+     *            the template class, containing the {@code @Id} fields\n+     * @param templateFile\n+     *            The name of the file containing the template or\n+     *            <code>null</code> if not available {@code null}\n+     * @param templateRoot\n+     *            The root element of the template or <code>null</code> if not\n+     *            available\n+     */\n+    public IdCollector(Class<?> templateClass, String templateFile,\n+            Element templateRoot) {\n+        this.templateClass = templateClass;\n+        this.templateFile = templateFile;\n+        this.templateRoot = templateRoot;\n+    }\n+\n+    /**\n+     * Scans the given template class and finds fields mapped using\n+     * {@link com.vaadin.flow.component.template.Id @Id}.\n+     *\n+     * @param notInjectableElementIds\n+     *            ids which cannot be injected\n+     */\n+    public void collectInjectedIds(Set<String> notInjectableElementIds) {\n+        collectInjectedIds(templateClass, notInjectableElementIds);\n+    }\n+\n+    private void collectInjectedIds(Class<?> cls,\n+            Set<String> notInjectableElementIds) {\n+        if (!Component.class.equals(cls.getSuperclass())) {\n+            // Parent fields\n+            collectInjectedIds(cls.getSuperclass(), notInjectableElementIds);\n+        }\n+\n+        Stream.of(cls.getDeclaredFields()).filter(field -> !field.isSynthetic())\n+                .forEach(field -> collectedInjectedId(field,\n+                        notInjectableElementIds));\n+    }\n+\n+    private void collectedInjectedId(Field field,\n+            Set<String> notInjectableElementIds) {\n+        String id = getId(field).orElse(null);\n+        if (id == null) {\n+            return;\n+        }\n+        boolean emptyValue = id.isEmpty();\n+        if (emptyValue) {\n+            id = field.getName();\n+        }\n+        if (notInjectableElementIds.contains(id)) {\n+            throw new IllegalStateException(String.format(\n+                    \"Class '%s' contains field '%s' annotated with @Id%s. \"\n+                            + \"Corresponding element was found in a sub template, \"\n+                            + \"for which injection is not supported.\",\n+                    templateClass.getName(), field.getName(),\n+                    emptyValue\n+                            ? \" without value (so the name of the field should match the id of an element in the template)\"\n+                            : \"(\\\"\" + id + \"\\\")\"));\n+        }\n+\n+        if (!collectElementData(id, field)) {\n+            throw new IllegalStateException(String.format(\n+                    \"There is no element with \"\n+                            + \"id='%s' in the template file '%s'. Cannot map it using @%s\",\n+                    id, templateFile,\n+                    com.vaadin.flow.component.template.Id.class\n+                            .getSimpleName()));\n+        }\n+    }\n+\n+    private Optional<String> getId(Field field) {\n+        Optional<Id> idAnnotation = AnnotationReader.getAnnotationFor(field,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3Mzc2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/IdCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowOFrOHT_oHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowOFrOHT_oHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzQ1Mg==", "bodyText": "Remove this use of \"Id\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727452", "createdAt": "2020-09-18T06:24:08Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/IdCollector.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.template.internal;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.jsoup.nodes.Attribute;\n+import org.jsoup.nodes.Attributes;\n+import org.jsoup.nodes.Element;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.polymertemplate.Id;\n+import com.vaadin.flow.internal.AnnotationReader;\n+\n+/**\n+ * Collects information of {@link Id @Id} mapped fields in a template class.\n+ *\n+ * @since\n+ */\n+public class IdCollector {\n+    private final Map<String, String> tagById = new HashMap<>();\n+    private final Map<Field, String> idByField = new HashMap<>();\n+    private final Map<String, Map<String, String>> attributesById = new HashMap<>();\n+    private Element templateRoot;\n+    private Class<?> templateClass;\n+    private String templateFile;\n+\n+    /**\n+     * Creates a collector the the given template.\n+     *\n+     * @param templateClass\n+     *            the template class, containing the {@code @Id} fields\n+     * @param templateFile\n+     *            The name of the file containing the template or\n+     *            <code>null</code> if not available {@code null}\n+     * @param templateRoot\n+     *            The root element of the template or <code>null</code> if not\n+     *            available\n+     */\n+    public IdCollector(Class<?> templateClass, String templateFile,\n+            Element templateRoot) {\n+        this.templateClass = templateClass;\n+        this.templateFile = templateFile;\n+        this.templateRoot = templateRoot;\n+    }\n+\n+    /**\n+     * Scans the given template class and finds fields mapped using\n+     * {@link com.vaadin.flow.component.template.Id @Id}.\n+     *\n+     * @param notInjectableElementIds\n+     *            ids which cannot be injected\n+     */\n+    public void collectInjectedIds(Set<String> notInjectableElementIds) {\n+        collectInjectedIds(templateClass, notInjectableElementIds);\n+    }\n+\n+    private void collectInjectedIds(Class<?> cls,\n+            Set<String> notInjectableElementIds) {\n+        if (!Component.class.equals(cls.getSuperclass())) {\n+            // Parent fields\n+            collectInjectedIds(cls.getSuperclass(), notInjectableElementIds);\n+        }\n+\n+        Stream.of(cls.getDeclaredFields()).filter(field -> !field.isSynthetic())\n+                .forEach(field -> collectedInjectedId(field,\n+                        notInjectableElementIds));\n+    }\n+\n+    private void collectedInjectedId(Field field,\n+            Set<String> notInjectableElementIds) {\n+        String id = getId(field).orElse(null);\n+        if (id == null) {\n+            return;\n+        }\n+        boolean emptyValue = id.isEmpty();\n+        if (emptyValue) {\n+            id = field.getName();\n+        }\n+        if (notInjectableElementIds.contains(id)) {\n+            throw new IllegalStateException(String.format(\n+                    \"Class '%s' contains field '%s' annotated with @Id%s. \"\n+                            + \"Corresponding element was found in a sub template, \"\n+                            + \"for which injection is not supported.\",\n+                    templateClass.getName(), field.getName(),\n+                    emptyValue\n+                            ? \" without value (so the name of the field should match the id of an element in the template)\"\n+                            : \"(\\\"\" + id + \"\\\")\"));\n+        }\n+\n+        if (!collectElementData(id, field)) {\n+            throw new IllegalStateException(String.format(\n+                    \"There is no element with \"\n+                            + \"id='%s' in the template file '%s'. Cannot map it using @%s\",\n+                    id, templateFile,\n+                    com.vaadin.flow.component.template.Id.class\n+                            .getSimpleName()));\n+        }\n+    }\n+\n+    private Optional<String> getId(Field field) {\n+        Optional<Id> idAnnotation = AnnotationReader.getAnnotationFor(field,\n+                Id.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3Mzg1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/IdCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowOVrOHT_oKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowOVrOHT_oKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzQ2NA==", "bodyText": "Remove this use of \"Id\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727464", "createdAt": "2020-09-18T06:24:09Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/IdCollector.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.template.internal;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.jsoup.nodes.Attribute;\n+import org.jsoup.nodes.Attributes;\n+import org.jsoup.nodes.Element;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.polymertemplate.Id;\n+import com.vaadin.flow.internal.AnnotationReader;\n+\n+/**\n+ * Collects information of {@link Id @Id} mapped fields in a template class.\n+ *\n+ * @since\n+ */\n+public class IdCollector {\n+    private final Map<String, String> tagById = new HashMap<>();\n+    private final Map<Field, String> idByField = new HashMap<>();\n+    private final Map<String, Map<String, String>> attributesById = new HashMap<>();\n+    private Element templateRoot;\n+    private Class<?> templateClass;\n+    private String templateFile;\n+\n+    /**\n+     * Creates a collector the the given template.\n+     *\n+     * @param templateClass\n+     *            the template class, containing the {@code @Id} fields\n+     * @param templateFile\n+     *            The name of the file containing the template or\n+     *            <code>null</code> if not available {@code null}\n+     * @param templateRoot\n+     *            The root element of the template or <code>null</code> if not\n+     *            available\n+     */\n+    public IdCollector(Class<?> templateClass, String templateFile,\n+            Element templateRoot) {\n+        this.templateClass = templateClass;\n+        this.templateFile = templateFile;\n+        this.templateRoot = templateRoot;\n+    }\n+\n+    /**\n+     * Scans the given template class and finds fields mapped using\n+     * {@link com.vaadin.flow.component.template.Id @Id}.\n+     *\n+     * @param notInjectableElementIds\n+     *            ids which cannot be injected\n+     */\n+    public void collectInjectedIds(Set<String> notInjectableElementIds) {\n+        collectInjectedIds(templateClass, notInjectableElementIds);\n+    }\n+\n+    private void collectInjectedIds(Class<?> cls,\n+            Set<String> notInjectableElementIds) {\n+        if (!Component.class.equals(cls.getSuperclass())) {\n+            // Parent fields\n+            collectInjectedIds(cls.getSuperclass(), notInjectableElementIds);\n+        }\n+\n+        Stream.of(cls.getDeclaredFields()).filter(field -> !field.isSynthetic())\n+                .forEach(field -> collectedInjectedId(field,\n+                        notInjectableElementIds));\n+    }\n+\n+    private void collectedInjectedId(Field field,\n+            Set<String> notInjectableElementIds) {\n+        String id = getId(field).orElse(null);\n+        if (id == null) {\n+            return;\n+        }\n+        boolean emptyValue = id.isEmpty();\n+        if (emptyValue) {\n+            id = field.getName();\n+        }\n+        if (notInjectableElementIds.contains(id)) {\n+            throw new IllegalStateException(String.format(\n+                    \"Class '%s' contains field '%s' annotated with @Id%s. \"\n+                            + \"Corresponding element was found in a sub template, \"\n+                            + \"for which injection is not supported.\",\n+                    templateClass.getName(), field.getName(),\n+                    emptyValue\n+                            ? \" without value (so the name of the field should match the id of an element in the template)\"\n+                            : \"(\\\"\" + id + \"\\\")\"));\n+        }\n+\n+        if (!collectElementData(id, field)) {\n+            throw new IllegalStateException(String.format(\n+                    \"There is no element with \"\n+                            + \"id='%s' in the template file '%s'. Cannot map it using @%s\",\n+                    id, templateFile,\n+                    com.vaadin.flow.component.template.Id.class\n+                            .getSimpleName()));\n+        }\n+    }\n+\n+    private Optional<String> getId(Field field) {\n+        Optional<Id> idAnnotation = AnnotationReader.getAnnotationFor(field,\n+                Id.class);\n+        if (idAnnotation.isPresent()) {\n+            return idAnnotation.map(Id::value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3Mzk0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/TemplateModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowOVrOHT_oNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDowOVrOHT_oNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzQ3Ng==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727476", "createdAt": "2020-09-18T06:24:09Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/TemplateModel.java", "diffHunk": "@@ -38,7 +38,13 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated Template model is not supported for lit template, but you can use\n+ *             {@code @Id} mapping and the component API or the element API with\n+ *             property synchronization instead. This will be removed in an\n+ *             upcoming version.\n  */\n+@Deprecated\n public interface TemplateModel extends Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3NDAyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDoxMFrOHT_oPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDoxMFrOHT_oPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzQ4NA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727484", "createdAt": "2020-09-18T06:24:10Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlers.java", "diffHunk": "@@ -34,8 +34,12 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated Polymer template support is deprecated - use LitTemplate instead.\n+ *             This will be removed in an upcoming version.\n  *\n  */\n+@Deprecated\n public class PolymerServerEventHandlers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3NDA1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDoxMVrOHT_oPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDoxMVrOHT_oPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzQ4Nw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727487", "createdAt": "2020-09-18T06:24:11Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateParser.java", "diffHunk": "@@ -42,8 +47,9 @@\n      *\n      * @author Vaadin Ltd\n      * @since 1.0\n-     *\n+     * @deprecated Use {@link LitTemplateParser.TemplateData} instead\n      */\n+    @Deprecated\n     class TemplateData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3NDA4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDoxMlrOHT_oRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDoxMlrOHT_oRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzQ5Mg==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727492", "createdAt": "2020-09-18T06:24:12Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateParser.java", "diffHunk": "@@ -29,8 +31,11 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n- *\n+ * @deprecated Use {@link LitTemplateParser} for {@link LitTemplate} components,\n+ *             polymer templates are deprecated This will be removed in an\n+ *             upcoming version.\n  */\n+@Deprecated\n @FunctionalInterface\n public interface TemplateParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDU3NDEzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDoxM1rOHT_oSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjoyNDoxM1rOHT_oSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyNzQ5OQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490727499", "createdAt": "2020-09-18T06:24:13Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -58,7 +58,10 @@\n  * @author Vaadin Ltd\n  * @since 1.0\n  *\n+ * @deprecated Polymer template support is deprecated - use LitTemplate instead.\n+ *             This will be removed in an upcoming version.\n  */\n+@Deprecated\n public class PublishedServerEventHandlerRpcHandler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDYxMDUzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/BundleLitParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjozODo0N1rOHT_9ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjozODo0N1rOHT_9ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMjk1OA==", "bodyText": "Referring to polymer template", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490732958", "createdAt": "2020-09-18T06:38:47Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/BundleLitParser.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEAULT_FLOW_RESOURCES_FOLDER;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.FLOW_NPM_PACKAGE_NAME;\n+import static elemental.json.JsonType.ARRAY;\n+import static elemental.json.JsonType.OBJECT;\n+import static elemental.json.JsonType.STRING;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.internal.StringUtil;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+\n+/**\n+ * Parse statistics data provided by webpack.\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @see LitTemplateParser\n+ */\n+public final class BundleLitParser {\n+\n+    private static final Logger LOGGER = LoggerFactory\n+            .getLogger(BundleLitParser.class);\n+\n+    private static final String SOURCE = \"source\";\n+    private static final String NAME = \"name\";\n+    private static final String CHUNKS = \"chunks\";\n+    private static final String MODULES = \"modules\";\n+\n+    /**\n+     * Lit template pattern matches the template getter\n+     *\n+     * <pre>\n+     *     render() {\n+     *       return html`\n+     *         &lt;style&gt;\n+     *           .response { margin-top: 10px`; }\n+     *         &lt;/style&gt;\n+     *         &lt;paper-checkbox checked=&quot;${liked}&quot;&gt;I like web components.&lt;/paper-checkbox&gt;\n+     *\n+     *         &lt;div id=&quot;test&quot; ?hidden=&quot;${liked}&quot; class=&quot;response&quot;&gt;Web components like you, too.&lt;/div&gt;\n+     *       `;\n+     *     }\n+     * </pre>\n+     *\n+     * <p>\n+     * <code>render\\(\\)[\\s]*\\{</code> finds the template getter method\n+     * <p>\n+     * <code>[\\s]*return[\\s]*html`</code> finds the return statement\n+     * <p>\n+     * </p>\n+     * <code>(([^`]|\\\\\\\\.)*)</code> captures all text until we encounter the end\n+     * character with <code>;}</code> e.g. <code>';}</code>\n+     */\n+    private static final Pattern LIT_TEMPLATE_PATTERN = Pattern.compile(\n+            \"render\\\\(\\\\)[\\\\s]*\\\\{[\\\\s]*return[\\\\s]*html`(([^`]|\\\\\\\\.)*)`;[\\\\s]*\\\\}\");\n+\n+    private static final Pattern HASH_PATTERN = Pattern\n+            .compile(\"\\\"hash\\\"\\\\s*:\\\\s*\\\"([^\\\"]+)\\\"\\\\s*,\");\n+\n+    private static final String TEMPLATE_TAG_NAME = \"template\";\n+\n+    private BundleLitParser() {\n+    }\n+\n+    /**\n+     * Gets the hash from the string content of a webpack stats file. It uses\n+     * regex to avoid parsing the entire string into a json object.\n+     *\n+     * @param fileContents\n+     *            the content of the stats file\n+     * @return the hash\n+     */\n+    public static String getHashFromStatistics(String fileContents) {\n+        Matcher matcher = HASH_PATTERN.matcher(fileContents);\n+        return matcher.find() ? matcher.group(1) : \"\" + fileContents.length();\n+    }\n+\n+    /**\n+     * Parses the content of the stats file to return a json object.\n+     *\n+     * @param fileContents\n+     *            the content of the stats file\n+     * @return a JsonObject with the stats\n+     */\n+    public static JsonObject parseJsonStatistics(String fileContents) {\n+        return Json.parse(fileContents);\n+    }\n+\n+    /**\n+     * Get a module source from the statistics Json file generated by webpack.\n+     *\n+     * @param fileName\n+     *            name of the file to get from the json\n+     * @param statistics\n+     *            statistics json as a JsonObject\n+     * @return JsonObject for the file statistic\n+     */\n+    public static String getSourceFromStatistics(String fileName,\n+            JsonObject statistics) {\n+        return getSourceFromObject(statistics, fileName);\n+    }\n+\n+    /**\n+     * Get the Lit template element for the given polymer template source.\n+     *\n+     * @param fileName\n+     *            name of the handled file\n+     * @param source\n+     *            source js to get template element from\n+     * @return template element or {code null} if not found\n+     */\n+    public static Element parseLitTemplateElement(String fileName,\n+            String source) {\n+        Document templateDocument = null;\n+        String content = StringUtil.removeComments(source);\n+        Matcher templateMatcher = LIT_TEMPLATE_PATTERN.matcher(content);\n+\n+        // GroupCount should be 2 as the first group contains `|'|\" depending\n+        // on what was in template return html' and the second is the\n+        // template contents.\n+        if (templateMatcher.find() && templateMatcher.groupCount() == 2) {\n+            String group = templateMatcher.group(1);\n+            LOGGER.trace(\"Found regular Lit template content was {}\", group);\n+\n+            templateDocument = Jsoup.parse(group);\n+            LOGGER.trace(\"The parsed template document was {}\",\n+                    templateDocument);\n+            Element template = templateDocument\n+                    .createElement(TEMPLATE_TAG_NAME);\n+            Element body = templateDocument.body();\n+            templateDocument.body().children().stream()\n+                    .filter(node -> !node.equals(body))\n+                    .forEach(template::appendChild);\n+\n+            return template;\n+        }\n+        LOGGER.warn(\"No lit template data found in {} sources.\", fileName);\n+        return null;\n+    }\n+\n+    // find the first module whose name matches the file name\n+    private static String getSourceFromObject(JsonObject module,\n+            String fileName) {\n+        String source = null;\n+        if (validKey(module, MODULES, ARRAY)) {\n+            source = getSourceFromArray(module.getArray(MODULES), fileName);\n+        }\n+        if (source == null && validKey(module, CHUNKS, ARRAY)) {\n+            source = getSourceFromArray(module.getArray(CHUNKS), fileName);\n+        }\n+        if (source == null && validKey(module, NAME, STRING)\n+                && validKey(module, SOURCE, STRING)) {\n+            String name = module.getString(NAME);\n+\n+            // append `.js` extension if not yet as webpack does\n+            fileName = fileName.replaceFirst(\"(\\\\.js|)$\", \".js\");\n+\n+            String alternativeFileName = fileName\n+                    // Replace frontend part since webpack entry-point is\n+                    // already in the frontend folder\n+                    .replaceFirst(\"^(\\\\./)frontend/\", \"$1\")\n+                    // Replace the flow frontend protocol\n+                    .replaceFirst(\"^frontend://\", \".\");\n+\n+            // For polymer templates inside add-ons we will not find the sources", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDYxMjc3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/IdCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjozOTo0MlrOHT_-8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjozOTo0MlrOHT_-8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMzI5Nw==", "bodyText": "Rename this class. \n Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490733297", "createdAt": "2020-09-18T06:39:42Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/IdCollector.java", "diffHunk": "@@ -35,14 +26,13 @@\n  * Collects information of {@link Id @Id} mapped fields in a template class.\n  *\n  * @since 2.0\n+ * @deprecated Use\n+ *             {@link com.vaadin.flow.component.template.internal.IdCollector}\n+ *             instead. This will be removed in an upcoming version.\n  */\n-public class IdCollector {\n-    private final Map<String, String> tagById = new HashMap<>();\n-    private final Map<Field, String> idByField = new HashMap<>();\n-    private final Map<String, Map<String, String>> attributesById = new HashMap<>();\n-    private Element templateRoot;\n-    private Class<?> templateClass;\n-    private String templateFile;\n+@Deprecated\n+public class IdCollector", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDYxMzAzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/IdCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjozOTo0NlrOHT__EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjozOTo0NlrOHT__EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMzMyOQ==", "bodyText": "Call \"tagName.isPresent()\" before accessing the value.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490733329", "createdAt": "2020-09-18T06:39:46Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/IdCollector.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.template.internal;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.jsoup.nodes.Attribute;\n+import org.jsoup.nodes.Attributes;\n+import org.jsoup.nodes.Element;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.polymertemplate.Id;\n+import com.vaadin.flow.internal.AnnotationReader;\n+\n+/**\n+ * Collects information of {@link Id @Id} mapped fields in a template class.\n+ *\n+ * @since\n+ */\n+public class IdCollector {\n+    private final Map<String, String> tagById = new HashMap<>();\n+    private final Map<Field, String> idByField = new HashMap<>();\n+    private final Map<String, Map<String, String>> attributesById = new HashMap<>();\n+    private Element templateRoot;\n+    private Class<?> templateClass;\n+    private String templateFile;\n+\n+    /**\n+     * Creates a collector the the given template.\n+     *\n+     * @param templateClass\n+     *            the template class, containing the {@code @Id} fields\n+     * @param templateFile\n+     *            The name of the file containing the template or\n+     *            <code>null</code> if not available {@code null}\n+     * @param templateRoot\n+     *            The root element of the template or <code>null</code> if not\n+     *            available\n+     */\n+    public IdCollector(Class<?> templateClass, String templateFile,\n+            Element templateRoot) {\n+        this.templateClass = templateClass;\n+        this.templateFile = templateFile;\n+        this.templateRoot = templateRoot;\n+    }\n+\n+    /**\n+     * Scans the given template class and finds fields mapped using\n+     * {@link com.vaadin.flow.component.template.Id @Id}.\n+     *\n+     * @param notInjectableElementIds\n+     *            ids which cannot be injected\n+     */\n+    public void collectInjectedIds(Set<String> notInjectableElementIds) {\n+        collectInjectedIds(templateClass, notInjectableElementIds);\n+    }\n+\n+    private void collectInjectedIds(Class<?> cls,\n+            Set<String> notInjectableElementIds) {\n+        if (!Component.class.equals(cls.getSuperclass())) {\n+            // Parent fields\n+            collectInjectedIds(cls.getSuperclass(), notInjectableElementIds);\n+        }\n+\n+        Stream.of(cls.getDeclaredFields()).filter(field -> !field.isSynthetic())\n+                .forEach(field -> collectedInjectedId(field,\n+                        notInjectableElementIds));\n+    }\n+\n+    private void collectedInjectedId(Field field,\n+            Set<String> notInjectableElementIds) {\n+        String id = getId(field).orElse(null);\n+        if (id == null) {\n+            return;\n+        }\n+        boolean emptyValue = id.isEmpty();\n+        if (emptyValue) {\n+            id = field.getName();\n+        }\n+        if (notInjectableElementIds.contains(id)) {\n+            throw new IllegalStateException(String.format(\n+                    \"Class '%s' contains field '%s' annotated with @Id%s. \"\n+                            + \"Corresponding element was found in a sub template, \"\n+                            + \"for which injection is not supported.\",\n+                    templateClass.getName(), field.getName(),\n+                    emptyValue\n+                            ? \" without value (so the name of the field should match the id of an element in the template)\"\n+                            : \"(\\\"\" + id + \"\\\")\"));\n+        }\n+\n+        if (!collectElementData(id, field)) {\n+            throw new IllegalStateException(String.format(\n+                    \"There is no element with \"\n+                            + \"id='%s' in the template file '%s'. Cannot map it using @%s\",\n+                    id, templateFile,\n+                    com.vaadin.flow.component.template.Id.class\n+                            .getSimpleName()));\n+        }\n+    }\n+\n+    private Optional<String> getId(Field field) {\n+        Optional<Id> idAnnotation = AnnotationReader.getAnnotationFor(field,\n+                Id.class);\n+        if (idAnnotation.isPresent()) {\n+            return idAnnotation.map(Id::value);\n+        }\n+        return AnnotationReader\n+                .getAnnotationFor(field,\n+                        com.vaadin.flow.component.template.Id.class)\n+                .map(com.vaadin.flow.component.template.Id::value);\n+    }\n+\n+    /**\n+     * Stores mapping between the given id and field.\n+     *\n+     * @param id\n+     *            the id value\n+     * @param field\n+     *            the Java field\n+     * @return <code>false</code> if the mapping did not pass validation,\n+     *         <code>true</code> otherwise\n+     */\n+    private boolean collectElementData(String id, Field field) {\n+        idByField.put(field, id);\n+        if (templateRoot != null) {\n+            // The template is available for parsing so check up front if the id\n+            // exists\n+            Optional<Element> element = Optional\n+                    .ofNullable(templateRoot.getElementById(id));\n+            Optional<String> tagName = element\n+                    .map(org.jsoup.nodes.Element::tagName);\n+            if (element.isPresent()) {\n+                Element domElement = element.get();\n+                tagById.put(id, tagName.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDYyODcwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjo0NToyNVrOHUAIOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDozMjo1OVrOHUHcjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNTY3NA==", "bodyText": "Polymer 2 detected - this should be removed as we have not supported polymer 2 since 3.0.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490735674", "createdAt": "2020-09-18T06:45:25Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "diffHunk": "@@ -229,44 +200,6 @@ public static Element parseTemplateElement(String fileName, String source) {\n         return template;\n     }\n \n-    /**\n-     * Get the Lit template element for the given polymer template source.\n-     *\n-     * @param fileName\n-     *            name of the handled file\n-     * @param source\n-     *            source js to get template element from\n-     * @return template element or {code null} if not found\n-     */\n-    public static Element parseLitTemplateElement(String fileName,\n-            String source) {\n-        Document templateDocument = null;\n-        String content = StringUtil.removeComments(source);\n-        Matcher templateMatcher = LIT_TEMPLATE_PATTERN.matcher(content);\n-\n-        // GroupCount should be 2 as the first group contains `|'|\" depending\n-        // on what was in template return html' and the second is the\n-        // template contents.\n-        if (templateMatcher.find() && templateMatcher.groupCount() == 2) {\n-            String group = templateMatcher.group(1);\n-            LOGGER.trace(\"Found regular Lit template content was {}\", group);\n-\n-            templateDocument = Jsoup.parse(group);\n-            LOGGER.trace(\"The parsed template document was {}\",\n-                    templateDocument);\n-            Element template = templateDocument\n-                    .createElement(TEMPLATE_TAG_NAME);\n-            Element body = templateDocument.body();\n-            templateDocument.body().children().stream()\n-                    .filter(node -> !node.equals(body))\n-                    .forEach(template::appendChild);\n-\n-            return template;\n-        }\n-        LOGGER.warn(\"No lit template data found in {} sources.\", fileName);\n-        return null;\n-    }\n-\n     private static Element tryParsePolymer2(Document templateDocument,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1NTU2Ng==", "bodyText": "I believe it's not Polymer 2 but some polymer2 style which can be used for Polymer 3.\nI don't remember exactly but anyway, this is not a part of this PR.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490855566", "createdAt": "2020-09-18T10:32:59Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "diffHunk": "@@ -229,44 +200,6 @@ public static Element parseTemplateElement(String fileName, String source) {\n         return template;\n     }\n \n-    /**\n-     * Get the Lit template element for the given polymer template source.\n-     *\n-     * @param fileName\n-     *            name of the handled file\n-     * @param source\n-     *            source js to get template element from\n-     * @return template element or {code null} if not found\n-     */\n-    public static Element parseLitTemplateElement(String fileName,\n-            String source) {\n-        Document templateDocument = null;\n-        String content = StringUtil.removeComments(source);\n-        Matcher templateMatcher = LIT_TEMPLATE_PATTERN.matcher(content);\n-\n-        // GroupCount should be 2 as the first group contains `|'|\" depending\n-        // on what was in template return html' and the second is the\n-        // template contents.\n-        if (templateMatcher.find() && templateMatcher.groupCount() == 2) {\n-            String group = templateMatcher.group(1);\n-            LOGGER.trace(\"Found regular Lit template content was {}\", group);\n-\n-            templateDocument = Jsoup.parse(group);\n-            LOGGER.trace(\"The parsed template document was {}\",\n-                    templateDocument);\n-            Element template = templateDocument\n-                    .createElement(TEMPLATE_TAG_NAME);\n-            Element body = templateDocument.body();\n-            templateDocument.body().children().stream()\n-                    .filter(node -> !node.equals(body))\n-                    .forEach(template::appendChild);\n-\n-            return template;\n-        }\n-        LOGGER.warn(\"No lit template data found in {} sources.\", fileName);\n-        return null;\n-    }\n-\n     private static Element tryParsePolymer2(Document templateDocument,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNTY3NA=="}, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDkzMTc4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/EventHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoyMDozMFrOHUC-Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoyMDozMFrOHUC-Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4MjIyNg==", "bodyText": "I think the first recommendation would be to \"Add a corresponding DOM listener from server side API instead.\" Then as second, if there is no event ready, either firing a custom event from client side template or ^ could be recommended. The custom event makes for more reusable code IMO.", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490782226", "createdAt": "2020-09-18T08:20:30Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/EventHandler.java", "diffHunk": "@@ -32,7 +32,13 @@\n  * @author Vaadin Ltd\n  * @since 1.0\n  *\n+ * @deprecated Event handlers are not supported by Lit templates, the event\n+ *             should be handled directly on the client side and the server side\n+ *             may be called from this handler via", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDk0MTg3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/PolymerTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoyMzoyNVrOHUDEWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTo0MDoxN1rOHUFv_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4MzgzMw==", "bodyText": ", polymer templates are deprecated.\n\nUnnecessary repeat", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490783833", "createdAt": "2020-09-18T08:23:25Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/PolymerTemplate.java", "diffHunk": "@@ -47,7 +49,11 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated Polymer template support is deprecated - use {@link LitTemplate}\n+ *             instead, polymer templates are deprecated. This will be removed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyNzc3NQ==", "bodyText": "This message should instead be:\nPolymer template support is deprecated - we recommend you to use {@link LitTemplate} instead. Read more details from <a href=\"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the Vaadin blog.</a>\"", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490827775", "createdAt": "2020-09-18T09:40:17Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/PolymerTemplate.java", "diffHunk": "@@ -47,7 +49,11 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated Polymer template support is deprecated - use {@link LitTemplate}\n+ *             instead, polymer templates are deprecated. This will be removed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4MzgzMw=="}, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTAwOTY4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/template/Id.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo0MjoxOVrOHUDuRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo0MjoxOVrOHUDuRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5NDU2NQ==", "bodyText": "Maybe should change this to \"..of a component or an element to..\" since +90% cases should be with component", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490794565", "createdAt": "2020-09-18T08:42:19Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/template/Id.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.template;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.littemplate.LitTemplate;\n+import com.vaadin.flow.dom.Element;\n+\n+/**\n+ * Defines the id of an element to map to inside a lit template.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTAxMzQzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/template/Id.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo0MzozM1rOHUDwxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo0MzozM1rOHUDwxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5NTIwNw==", "bodyText": "This should be updated to say that \"attribute values are reflected\" instead", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490795207", "createdAt": "2020-09-18T08:43:33Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/template/Id.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.template;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.littemplate.LitTemplate;\n+import com.vaadin.flow.dom.Element;\n+\n+/**\n+ * Defines the id of an element to map to inside a lit template.\n+ * <p>\n+ * Use this annotation with an identifier of the element which you want to refer\n+ * to as a value for a field inside your {@link LitTemplate} class.\n+ * <p>\n+ * Here is a Java sample:\n+ *\n+ * <pre>\n+ * <code>\n+ * &#64;Tag(\"details\")\n+ * public class Details extends {@link LitTemplate}{\n+ *\n+ *      &#64;Id(\"name\")\n+ *      private Div nestedDiv;\n+ *\n+ *      &#64;Id(\"email\")\n+ *      private Element nestedElement;\n+ * }\n+ * </code>\n+ * </pre>\n+ *\n+ * This code may be used with the following template:\n+ *\n+ * <pre>\n+ * <code>\n+ *    render(){\n+ *     return html`\n+ *     &lt;div id='name'&gt;\n+ *      &lt;label&gt;Text&lt;/label&gt;\n+ *     &lt;/div&gt;\n+ *     &lt;input type=\"text\" id='email'&gt;&lt;/div\"&gt;\n+ *     `;\n+ *   ....\n+ * </code>\n+ * </pre>\n+ * <p>\n+ * It's important to understand that the element's hierarchical structure for\n+ * the element injected via <code>@Id</code> is not populated and not available\n+ * on the server side (it's not known). It means that <code>nestedDiv</code>\n+ * field value which is a <code>Div</code> component doesn't have any child on\n+ * the server side. Also attribute values declared on the client side are not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTAyNTI3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/InjectableFieldConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo0Njo1MVrOHUD4Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo0Njo1MVrOHUD4Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5NzE0Mg==", "bodyText": "newline", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490797142", "createdAt": "2020-09-18T08:46:51Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/InjectableFieldConsumer.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package com.vaadin.flow.component.template.internal;\n+\n+import java.lang.reflect.Field;\n+\n+/**\n+ * Three argument consumer.\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+@FunctionalInterface\n+public interface InjectableFieldConsumer {\n+\n+    /**\n+     * Performs this operation on the given arguments.\n+     * <p>\n+     * The arguments are: the field declared in a template class, the identifier\n+     * of the element inside the HTML template file, the element tag.\n+     *\n+     * @param field\n+     *            the field declared in a template class\n+     * @param id\n+     *            the element id\n+     * @param tag\n+     *            the element tag\n+     */\n+    void apply(Field field, String id, String tag);\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTAyODU5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/ParserData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo0Nzo1MFrOHUD6hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo0Nzo1MFrOHUD6hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5NzcwMw==", "bodyText": "newline", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490797703", "createdAt": "2020-09-18T08:47:50Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/ParserData.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.template.internal;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+/**\n+ * \n+ * Immutable parser data which may be stored in cache.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+public class ParserData {\n+\n+    private final Map<String, String> tagById;\n+    private final Map<Field, String> idByField;\n+\n+    private final Map<String, Map<String, String>> attributesById;\n+\n+    /**\n+     * Constructs an immutable data object with the given information.\n+     *\n+     * @param fields\n+     *            a map of fields to their ids\n+     * @param tags\n+     *            a map of ids to their tags\n+     * @param attributes\n+     *            a map of attributes values to the element id\n+     */\n+    public ParserData(Map<Field, String> fields, Map<String, String> tags,\n+            Map<String, Map<String, String>> attributes) {\n+        tagById = Collections.unmodifiableMap(tags);\n+        idByField = Collections.unmodifiableMap(fields);\n+        attributesById = Collections.unmodifiableMap(attributes);\n+    }\n+\n+    /**\n+     * Applies the given consumer to each mapped field.\n+     *\n+     * @param consumer\n+     *            the consumer to call for each mapped field\n+     */\n+    public void forEachInjectedField(InjectableFieldConsumer consumer) {\n+        idByField.forEach(\n+                (field, id) -> consumer.apply(field, id, tagById.get(id)));\n+    }\n+\n+    /**\n+     * Gets template element data (attribute values).\n+     * \n+     * @param id\n+     *            the id of the element\n+     * @return template data\n+     */\n+    public Map<String, String> getAttributes(String id) {\n+        Map<String, String> attrs = attributesById.get(id);\n+        if (attrs == null) {\n+            return Collections.emptyMap();\n+        }\n+        return attrs;\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTA1MDY5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ClientUpdateMode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1Mzo1NFrOHUEIMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1Mzo1NFrOHUEIMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMTIwMg==", "bodyText": "Maybe the message could be instead\nTemplate model and polymer template support is deprecated - we recommend you to use {@link LitTemplate} instead. Read more details from <a href=\"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the Vaadin blog.</a> For lit templates, you can use ...\"", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490801202", "createdAt": "2020-09-18T08:53:54Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ClientUpdateMode.java", "diffHunk": "@@ -22,7 +22,13 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated This functionality is bound to template model which is not\n+ *             supported for lit template. You can use {@code @Id} mapping and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTA1Mzk4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/Encode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NDo0NlrOHUEKPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NDo0NlrOHUEKPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMTcyNw==", "bodyText": "Maybe the message could be instead\nTemplate model and polymer template support is deprecated - we recommend you to use {@link LitTemplate} instead. Read more details from <a href=\"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the Vaadin blog.</a> For lit templates, you can use ...\"", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490801727", "createdAt": "2020-09-18T08:54:46Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/Encode.java", "diffHunk": "@@ -33,6 +33,12 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated This functionality is bound to template model which is not\n+ *             supported for lit template. You can use {@code @Id} mapping and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTA1NjUxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/Exclude.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NToyMlrOHUELyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NToyMlrOHUELyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMjEyMQ==", "bodyText": "Maybe the message could be instead\nTemplate model and polymer template support is deprecated - we recommend you to use {@link LitTemplate} instead. Read more details from <a href=\"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the Vaadin blog.</a> For lit templates, you can use ...\"", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490802121", "createdAt": "2020-09-18T08:55:22Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/Exclude.java", "diffHunk": "@@ -39,6 +39,12 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated This functionality is bound to template model which is not\n+ *             supported for lit template. You can use {@code @Id} mapping and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTA1ODU1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/Include.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NTo1NlrOHUENEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NTo1NlrOHUENEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMjQ0OQ==", "bodyText": "Maybe the message could be instead\nTemplate model and polymer template support is deprecated - we recommend you to use {@link LitTemplate} instead. Read more details from <a href=\"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the Vaadin blog.</a> For lit templates, you can use ...\"", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490802449", "createdAt": "2020-09-18T08:55:56Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/Include.java", "diffHunk": "@@ -37,8 +37,13 @@\n  *\n  * @see Exclude\n  *\n- * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated This functionality is bound to template model which is not\n+ *             supported for lit template. You can use {@code @Id} mapping and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTA1OTQxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/InvalidTemplateModelException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NjoxMFrOHUENqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NjoxMFrOHUENqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMjYwMQ==", "bodyText": "Maybe the message could be instead\nTemplate model and polymer template support is deprecated - we recommend you to use {@link LitTemplate} instead. Read more details from <a href=\"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the Vaadin blog.</a> For lit templates, you can use ...\"", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490802601", "createdAt": "2020-09-18T08:56:10Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/InvalidTemplateModelException.java", "diffHunk": "@@ -20,11 +20,18 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated This functionality is bound to template model which is not\n+ *             supported for lit template. You can use {@code @Id} mapping and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTA2MTA2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/InvalidTemplateModelException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NjozNlrOHUEOpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NjozNlrOHUEOpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMjg1Mw==", "bodyText": "Nit: unrelated accidental change", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490802853", "createdAt": "2020-09-18T08:56:36Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/InvalidTemplateModelException.java", "diffHunk": "@@ -20,11 +20,18 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated This functionality is bound to template model which is not\n+ *             supported for lit template. You can use {@code @Id} mapping and\n+ *             the component API or the element API with property\n+ *             synchronization instead. This will be removed in an upcoming\n+ *             version.\n  */\n+@Deprecated\n public class InvalidTemplateModelException extends RuntimeException {\n     /**\n-     * Creates a new exception with the given message and cause.\n-     *\n+     * Creates a new exception with the given message and cause. w", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTA2MjA2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ListModelType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1Njo1MFrOHUEPRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1Njo1MFrOHUEPRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMzAxMw==", "bodyText": "Maybe the message could be instead\nTemplate model and polymer template support is deprecated - we recommend you to use {@link LitTemplate} instead. Read more details from <a href=\"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the Vaadin blog.</a> For lit templates, you can use ...\"", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490803013", "createdAt": "2020-09-18T08:56:50Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/ListModelType.java", "diffHunk": "@@ -39,7 +38,13 @@\n  * @since 1.0\n  * @param <T>\n  *            the proxy type used by the bean type of this type\n+ * \n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTA3MTI2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/TemplateModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1OToyMFrOHUEU9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1OToyMFrOHUEU9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwNDQ2OQ==", "bodyText": "Maybe the message could be instead\nTemplate model and polymer template support is deprecated - we recommend you to use {@link LitTemplate} instead. Read more details from <a href=\"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the Vaadin blog.</a> For lit templates, you can use ...\"", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490804469", "createdAt": "2020-09-18T08:59:20Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/templatemodel/TemplateModel.java", "diffHunk": "@@ -38,7 +38,13 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated Template model is not supported for lit template, but you can use\n+ *             {@code @Id} mapping and the component API or the element API with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c655d449025d34e76f7bae9189cef4c42047c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTY3ODQ2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/IdCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo1MToyOFrOHUJ9IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo1MToyOFrOHUJ9IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5NjY3Mg==", "bodyText": "The class name com.vaadin.flow.component.polymertemplate.IdCollector shadows the simple name of the superclass com.vaadin.flow.component.template.internal.IdCollector", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r490896672", "createdAt": "2020-09-18T11:51:28Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/IdCollector.java", "diffHunk": "@@ -58,156 +50,7 @@\n      */\n     public IdCollector(Class<?> templateClass, String templateFile,\n             Element templateRoot) {\n-        this.templateClass = templateClass;\n-        this.templateFile = templateFile;\n-        this.templateRoot = templateRoot;\n-    }\n-\n-    /**\n-     * Scans the given template class and finds fields mapped using\n-     * {@link Id @Id}.\n-     *\n-     * @param notInjectableElementIds\n-     *            ids which cannot be injected\n-     */\n-    public void collectInjectedIds(Set<String> notInjectableElementIds) {\n-        collectInjectedIds(templateClass, notInjectableElementIds);\n-    }\n-\n-    private void collectInjectedIds(Class<?> cls,\n-            Set<String> notInjectableElementIds) {\n-        if (!Component.class.equals(cls.getSuperclass())) {\n-            // Parent fields\n-            collectInjectedIds(cls.getSuperclass(), notInjectableElementIds);\n-        }\n-\n-        Stream.of(cls.getDeclaredFields()).filter(field -> !field.isSynthetic())\n-                .forEach(field -> collectedInjectedId(field,\n-                        notInjectableElementIds));\n-    }\n-\n-    private void collectedInjectedId(Field field,\n-            Set<String> notInjectableElementIds) {\n-        Optional<Id> idAnnotation = AnnotationReader.getAnnotationFor(field,\n-                Id.class);\n-        if (!idAnnotation.isPresent()) {\n-            return;\n-        }\n-        String id = idAnnotation.get().value();\n-        boolean emptyValue = id.isEmpty();\n-        if (emptyValue) {\n-            id = field.getName();\n-        }\n-        if (notInjectableElementIds.contains(id)) {\n-            throw new IllegalStateException(String.format(\n-                    \"Class '%s' contains field '%s' annotated with @Id%s. \"\n-                            + \"Corresponding element was found in a sub template, \"\n-                            + \"for which injection is not supported.\",\n-                    templateClass.getName(), field.getName(),\n-                    emptyValue\n-                            ? \" without value (so the name of the field should match the id of an element in the template)\"\n-                            : \"(\\\"\" + id + \"\\\")\"));\n-        }\n-\n-        if (!collectElementData(id, field)) {\n-            throw new IllegalStateException(String.format(\n-                    \"There is no element with \"\n-                            + \"id='%s' in the template file '%s'. Cannot map it using @%s\",\n-                    id, templateFile, Id.class.getSimpleName()));\n-        }\n+        super(templateClass, templateFile, templateRoot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b5eb5ff38a689d16e04780b0f8c232ac8bc3f33"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzY0NTc1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/ModelItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNTozOTozMFrOHVBN3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNTozOTozMFrOHVBN3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgwMjA3Nw==", "bodyText": "Nit: typo with extra T (non-blocking)", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r491802077", "createdAt": "2020-09-21T05:39:30Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/ModelItem.java", "diffHunk": "@@ -38,8 +40,11 @@\n  *             is not supported for lit template, but you may still use\n  *             {@code @EventData(\"some_data\")} to receive data from the client\n  *             side or {@code @Id} mapping and the component API or the element\n- *             API with property synchronization instead. This will be removed\n- *             in an upcoming version.\n+ *             API with property synchronization instead. TPolymer template", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b5eb5ff38a689d16e04780b0f8c232ac8bc3f33"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzY1OTAxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/RepeatIndex.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNTo0ODoxNVrOHVBVUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNTo0ODoxNVrOHVBVUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgwMzk4NA==", "bodyText": "\"not support by\" -> \"not supported by\"", "url": "https://github.com/vaadin/flow/pull/9025#discussion_r491803984", "createdAt": "2020-09-21T05:48:15Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/RepeatIndex.java", "diffHunk": "@@ -36,7 +37,11 @@\n  * @since 1.0\n  * @deprecated dom-repeat is not support by Lit templates but you may still use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b5eb5ff38a689d16e04780b0f8c232ac8bc3f33"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3062, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}