{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwODA1ODY3", "number": 9050, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDozNzozNlrOEmBfdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzozMToxNVrOEmaFag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzA1NzgyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDozNzozNlrOHV0Blg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzoyMjozNlrOHWZylg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzNDUxOA==", "bodyText": "Failing should be due to route not registered yet as the exception is thrown for non unique route registration.\nAlso what does this actually test as the assert routes check that the route has been registered?\nI would remove this part as it doesn't bring anything that is expected.", "url": "https://github.com/vaadin/flow/pull/9050#discussion_r492634518", "createdAt": "2020-09-22T10:37:36Z", "author": {"login": "caalador"}, "path": "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java", "diffHunk": "@@ -62,6 +62,56 @@ public void mutableConfiguration_canSetTargetRoute() {\n                 \"\", mutable.getTemplate(BaseTarget.class));\n     }\n \n+    @Test\n+    public void mutableConfiguration_clearRoutes() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        assertSetRoutes(mutable);\n+\n+        try {\n+            mutable.setRoute(\"\", BaseTarget.class);\n+            Assert.fail(\"Route is already registered\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdb9ea0f0ae9599ca350082b9d9c980c5061b84"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzODA5OQ==", "bodyText": "We can remove this of course. I'd like though to keep it because that exception was somehow causing the bug itself, and the purpose of having it in the test is to make sure that the exception is raised for a duplicate route while after clear it doesn't. I can put this details in the code.", "url": "https://github.com/vaadin/flow/pull/9050#discussion_r493238099", "createdAt": "2020-09-23T06:53:10Z", "author": {"login": "bogdanudrescu"}, "path": "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java", "diffHunk": "@@ -62,6 +62,56 @@ public void mutableConfiguration_canSetTargetRoute() {\n                 \"\", mutable.getTemplate(BaseTarget.class));\n     }\n \n+    @Test\n+    public void mutableConfiguration_clearRoutes() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        assertSetRoutes(mutable);\n+\n+        try {\n+            mutable.setRoute(\"\", BaseTarget.class);\n+            Assert.fail(\"Route is already registered\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzNDUxOA=="}, "originalCommit": {"oid": "bcdb9ea0f0ae9599ca350082b9d9c980c5061b84"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI0MTE4Ng==", "bodyText": "I've added the details in the code. Let me know please if you agree with this.", "url": "https://github.com/vaadin/flow/pull/9050#discussion_r493241186", "createdAt": "2020-09-23T06:59:03Z", "author": {"login": "bogdanudrescu"}, "path": "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java", "diffHunk": "@@ -62,6 +62,56 @@ public void mutableConfiguration_canSetTargetRoute() {\n                 \"\", mutable.getTemplate(BaseTarget.class));\n     }\n \n+    @Test\n+    public void mutableConfiguration_clearRoutes() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        assertSetRoutes(mutable);\n+\n+        try {\n+            mutable.setRoute(\"\", BaseTarget.class);\n+            Assert.fail(\"Route is already registered\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzNDUxOA=="}, "originalCommit": {"oid": "bcdb9ea0f0ae9599ca350082b9d9c980c5061b84"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI0NDQ3OQ==", "bodyText": "I would rather have these as their own tests e.g. duplicateRootPathRegistration_throwsException and duplicateParameterPathRegistration_throwsException. as then it's clear what is the expected outcome and having a test fail makes it clear. now it would seem that clearing routed doesn't work even if this wouldn't be the case.", "url": "https://github.com/vaadin/flow/pull/9050#discussion_r493244479", "createdAt": "2020-09-23T07:05:56Z", "author": {"login": "caalador"}, "path": "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java", "diffHunk": "@@ -62,6 +62,56 @@ public void mutableConfiguration_canSetTargetRoute() {\n                 \"\", mutable.getTemplate(BaseTarget.class));\n     }\n \n+    @Test\n+    public void mutableConfiguration_clearRoutes() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        assertSetRoutes(mutable);\n+\n+        try {\n+            mutable.setRoute(\"\", BaseTarget.class);\n+            Assert.fail(\"Route is already registered\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzNDUxOA=="}, "originalCommit": {"oid": "bcdb9ea0f0ae9599ca350082b9d9c980c5061b84"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1MzI3MA==", "bodyText": "Done. Thank you!", "url": "https://github.com/vaadin/flow/pull/9050#discussion_r493253270", "createdAt": "2020-09-23T07:22:36Z", "author": {"login": "bogdanudrescu"}, "path": "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java", "diffHunk": "@@ -62,6 +62,56 @@ public void mutableConfiguration_canSetTargetRoute() {\n                 \"\", mutable.getTemplate(BaseTarget.class));\n     }\n \n+    @Test\n+    public void mutableConfiguration_clearRoutes() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        assertSetRoutes(mutable);\n+\n+        try {\n+            mutable.setRoute(\"\", BaseTarget.class);\n+            Assert.fail(\"Route is already registered\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzNDUxOA=="}, "originalCommit": {"oid": "bcdb9ea0f0ae9599ca350082b9d9c980c5061b84"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzA3MjQ3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo0MjoyNlrOHV0KjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNjo1MzoxN1rOHWY3kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzNjgxMw==", "bodyText": "Also remove this set as it doesn't bring anything that is not tested in assertSetRoutes.", "url": "https://github.com/vaadin/flow/pull/9050#discussion_r492636813", "createdAt": "2020-09-22T10:42:26Z", "author": {"login": "caalador"}, "path": "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java", "diffHunk": "@@ -62,6 +62,56 @@ public void mutableConfiguration_canSetTargetRoute() {\n                 \"\", mutable.getTemplate(BaseTarget.class));\n     }\n \n+    @Test\n+    public void mutableConfiguration_clearRoutes() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        assertSetRoutes(mutable);\n+\n+        try {\n+            mutable.setRoute(\"\", BaseTarget.class);\n+            Assert.fail(\"Route is already registered\");\n+        } catch (InvalidRouteConfigurationException e) {\n+        }\n+\n+        try {\n+            mutable.setRoute(\":param\", ParamTarget.class);\n+            Assert.fail(\"Route is already registered\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdb9ea0f0ae9599ca350082b9d9c980c5061b84"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzODE2Mw==", "bodyText": "Same as above.", "url": "https://github.com/vaadin/flow/pull/9050#discussion_r493238163", "createdAt": "2020-09-23T06:53:17Z", "author": {"login": "bogdanudrescu"}, "path": "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java", "diffHunk": "@@ -62,6 +62,56 @@ public void mutableConfiguration_canSetTargetRoute() {\n                 \"\", mutable.getTemplate(BaseTarget.class));\n     }\n \n+    @Test\n+    public void mutableConfiguration_clearRoutes() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        assertSetRoutes(mutable);\n+\n+        try {\n+            mutable.setRoute(\"\", BaseTarget.class);\n+            Assert.fail(\"Route is already registered\");\n+        } catch (InvalidRouteConfigurationException e) {\n+        }\n+\n+        try {\n+            mutable.setRoute(\":param\", ParamTarget.class);\n+            Assert.fail(\"Route is already registered\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzNjgxMw=="}, "originalCommit": {"oid": "bcdb9ea0f0ae9599ca350082b9d9c980c5061b84"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzA4NzE0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzozMToxNVrOHWaHaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODowOToxNlrOHWb8tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1ODYwMA==", "bodyText": "Instead of the try catch you a better choice would be to add as a common parameter\n    @Rule\n    public ExpectedException exception = ExpectedException.none();\n\nand in the tests expecting exception have:\n        exceptionRule.expect(InvalidRouteConfigurationException.class);\n        exceptionRule.reportMissingExceptionWithMessage(\"Duplicate routes shouldn't be accepted.\");", "url": "https://github.com/vaadin/flow/pull/9050#discussion_r493258600", "createdAt": "2020-09-23T07:31:15Z", "author": {"login": "caalador"}, "path": "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java", "diffHunk": "@@ -62,6 +62,70 @@ public void mutableConfiguration_canSetTargetRoute() {\n                 \"\", mutable.getTemplate(BaseTarget.class));\n     }\n \n+    @Test\n+    public void mutableConfigurationClear_removesRegisteredRoutes() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        assertSetRoutes(mutable);\n+\n+        mutable.clear();\n+\n+        Assert.assertFalse(mutable.hasRouteTarget(BaseTarget.class));\n+        Assert.assertFalse(mutable.hasRouteTarget(ParamTarget.class));\n+\n+        Assert.assertNull(\n+                mutable.getNavigationRouteTarget(\"\").getRouteTarget());\n+        Assert.assertNull(\n+                mutable.getNavigationRouteTarget(\"123\").getRouteTarget());\n+\n+        assertSetRoutes(mutable);\n+    }\n+\n+    @Test\n+    public void mutableConfigurationClear_preservesErrorRoute() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        mutable.setErrorRoute(IndexOutOfBoundsException.class, BaseError.class);\n+\n+        mutable.clear();\n+\n+        Assert.assertEquals(\"ErrorRoute shouldn't be cleared.\",\n+                BaseError.class, mutable.getExceptionHandlerByClass(\n+                        IndexOutOfBoundsException.class));\n+    }\n+\n+    @Test\n+    public void duplicateRootPathRegistration_throwsException() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        mutable.setRoute(\"\", BaseTarget.class);\n+        Assert.assertTrue(mutable.hasRouteTarget(BaseTarget.class));\n+        Assert.assertEquals(BaseTarget.class, mutable\n+                .getNavigationRouteTarget(\"\").getRouteTarget().getTarget());\n+\n+        try {\n+            mutable.setRoute(\"\", BaseTarget.class);\n+            Assert.fail(\"Base route is already registered\");\n+        } catch (InvalidRouteConfigurationException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void duplicateParameterPathRegistration_throwsException() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        mutable.setRoute(\":param\", ParamTarget.class);\n+        Assert.assertTrue(mutable.hasRouteTarget(ParamTarget.class));\n+        Assert.assertEquals(ParamTarget.class, mutable\n+                .getNavigationRouteTarget(\"123\").getRouteTarget().getTarget());\n+\n+        try {\n+            mutable.setRoute(\":param\", ParamTarget.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6727442d37fb636e8cfd6a516c7442cc29f41730"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2NDQ1Mg==", "bodyText": "But if doing this, how can we test on what line it was thrown from? Isn't this an expectation over the whole method just like @Test(expected = InvalidRouteConfigurationException.class)?", "url": "https://github.com/vaadin/flow/pull/9050#discussion_r493264452", "createdAt": "2020-09-23T07:40:58Z", "author": {"login": "bogdanudrescu"}, "path": "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java", "diffHunk": "@@ -62,6 +62,70 @@ public void mutableConfiguration_canSetTargetRoute() {\n                 \"\", mutable.getTemplate(BaseTarget.class));\n     }\n \n+    @Test\n+    public void mutableConfigurationClear_removesRegisteredRoutes() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        assertSetRoutes(mutable);\n+\n+        mutable.clear();\n+\n+        Assert.assertFalse(mutable.hasRouteTarget(BaseTarget.class));\n+        Assert.assertFalse(mutable.hasRouteTarget(ParamTarget.class));\n+\n+        Assert.assertNull(\n+                mutable.getNavigationRouteTarget(\"\").getRouteTarget());\n+        Assert.assertNull(\n+                mutable.getNavigationRouteTarget(\"123\").getRouteTarget());\n+\n+        assertSetRoutes(mutable);\n+    }\n+\n+    @Test\n+    public void mutableConfigurationClear_preservesErrorRoute() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        mutable.setErrorRoute(IndexOutOfBoundsException.class, BaseError.class);\n+\n+        mutable.clear();\n+\n+        Assert.assertEquals(\"ErrorRoute shouldn't be cleared.\",\n+                BaseError.class, mutable.getExceptionHandlerByClass(\n+                        IndexOutOfBoundsException.class));\n+    }\n+\n+    @Test\n+    public void duplicateRootPathRegistration_throwsException() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        mutable.setRoute(\"\", BaseTarget.class);\n+        Assert.assertTrue(mutable.hasRouteTarget(BaseTarget.class));\n+        Assert.assertEquals(BaseTarget.class, mutable\n+                .getNavigationRouteTarget(\"\").getRouteTarget().getTarget());\n+\n+        try {\n+            mutable.setRoute(\"\", BaseTarget.class);\n+            Assert.fail(\"Base route is already registered\");\n+        } catch (InvalidRouteConfigurationException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void duplicateParameterPathRegistration_throwsException() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        mutable.setRoute(\":param\", ParamTarget.class);\n+        Assert.assertTrue(mutable.hasRouteTarget(ParamTarget.class));\n+        Assert.assertEquals(ParamTarget.class, mutable\n+                .getNavigationRouteTarget(\"123\").getRouteTarget().getTarget());\n+\n+        try {\n+            mutable.setRoute(\":param\", ParamTarget.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1ODYwMA=="}, "originalCommit": {"oid": "6727442d37fb636e8cfd6a516c7442cc29f41730"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3MjA4NQ==", "bodyText": "exceptionRule gives more possibilities than the expected, for instance the message that should be found\nexceptionRule.expectMessage(\"Navigation targets must have unique routes, found navigation targets 'ParamTarget' and 'ParamTarget' with the same route.\"); which would be good to check perhaps to see it fails for the correct version.\nAlso the cause can be checked with exceptionRule.expectCause(CoreMatchers.isA(TheCauseClassWeWouldExpect.class))\nAlso shouldn't the correct exception be AmbiguousRouteConfigurationException and not InvalidRouteConfiguratioException?", "url": "https://github.com/vaadin/flow/pull/9050#discussion_r493272085", "createdAt": "2020-09-23T07:52:15Z", "author": {"login": "caalador"}, "path": "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java", "diffHunk": "@@ -62,6 +62,70 @@ public void mutableConfiguration_canSetTargetRoute() {\n                 \"\", mutable.getTemplate(BaseTarget.class));\n     }\n \n+    @Test\n+    public void mutableConfigurationClear_removesRegisteredRoutes() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        assertSetRoutes(mutable);\n+\n+        mutable.clear();\n+\n+        Assert.assertFalse(mutable.hasRouteTarget(BaseTarget.class));\n+        Assert.assertFalse(mutable.hasRouteTarget(ParamTarget.class));\n+\n+        Assert.assertNull(\n+                mutable.getNavigationRouteTarget(\"\").getRouteTarget());\n+        Assert.assertNull(\n+                mutable.getNavigationRouteTarget(\"123\").getRouteTarget());\n+\n+        assertSetRoutes(mutable);\n+    }\n+\n+    @Test\n+    public void mutableConfigurationClear_preservesErrorRoute() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        mutable.setErrorRoute(IndexOutOfBoundsException.class, BaseError.class);\n+\n+        mutable.clear();\n+\n+        Assert.assertEquals(\"ErrorRoute shouldn't be cleared.\",\n+                BaseError.class, mutable.getExceptionHandlerByClass(\n+                        IndexOutOfBoundsException.class));\n+    }\n+\n+    @Test\n+    public void duplicateRootPathRegistration_throwsException() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        mutable.setRoute(\"\", BaseTarget.class);\n+        Assert.assertTrue(mutable.hasRouteTarget(BaseTarget.class));\n+        Assert.assertEquals(BaseTarget.class, mutable\n+                .getNavigationRouteTarget(\"\").getRouteTarget().getTarget());\n+\n+        try {\n+            mutable.setRoute(\"\", BaseTarget.class);\n+            Assert.fail(\"Base route is already registered\");\n+        } catch (InvalidRouteConfigurationException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void duplicateParameterPathRegistration_throwsException() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        mutable.setRoute(\":param\", ParamTarget.class);\n+        Assert.assertTrue(mutable.hasRouteTarget(ParamTarget.class));\n+        Assert.assertEquals(ParamTarget.class, mutable\n+                .getNavigationRouteTarget(\"123\").getRouteTarget().getTarget());\n+\n+        try {\n+            mutable.setRoute(\":param\", ParamTarget.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1ODYwMA=="}, "originalCommit": {"oid": "6727442d37fb636e8cfd6a516c7442cc29f41730"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI4ODYyOQ==", "bodyText": "Thank you. Please see if it's OK.", "url": "https://github.com/vaadin/flow/pull/9050#discussion_r493288629", "createdAt": "2020-09-23T08:09:16Z", "author": {"login": "bogdanudrescu"}, "path": "flow-server/src/test/java/com/vaadin/flow/router/internal/ConfigureRoutesTest.java", "diffHunk": "@@ -62,6 +62,70 @@ public void mutableConfiguration_canSetTargetRoute() {\n                 \"\", mutable.getTemplate(BaseTarget.class));\n     }\n \n+    @Test\n+    public void mutableConfigurationClear_removesRegisteredRoutes() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        assertSetRoutes(mutable);\n+\n+        mutable.clear();\n+\n+        Assert.assertFalse(mutable.hasRouteTarget(BaseTarget.class));\n+        Assert.assertFalse(mutable.hasRouteTarget(ParamTarget.class));\n+\n+        Assert.assertNull(\n+                mutable.getNavigationRouteTarget(\"\").getRouteTarget());\n+        Assert.assertNull(\n+                mutable.getNavigationRouteTarget(\"123\").getRouteTarget());\n+\n+        assertSetRoutes(mutable);\n+    }\n+\n+    @Test\n+    public void mutableConfigurationClear_preservesErrorRoute() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        mutable.setErrorRoute(IndexOutOfBoundsException.class, BaseError.class);\n+\n+        mutable.clear();\n+\n+        Assert.assertEquals(\"ErrorRoute shouldn't be cleared.\",\n+                BaseError.class, mutable.getExceptionHandlerByClass(\n+                        IndexOutOfBoundsException.class));\n+    }\n+\n+    @Test\n+    public void duplicateRootPathRegistration_throwsException() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        mutable.setRoute(\"\", BaseTarget.class);\n+        Assert.assertTrue(mutable.hasRouteTarget(BaseTarget.class));\n+        Assert.assertEquals(BaseTarget.class, mutable\n+                .getNavigationRouteTarget(\"\").getRouteTarget().getTarget());\n+\n+        try {\n+            mutable.setRoute(\"\", BaseTarget.class);\n+            Assert.fail(\"Base route is already registered\");\n+        } catch (InvalidRouteConfigurationException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void duplicateParameterPathRegistration_throwsException() {\n+        ConfigureRoutes mutable = new ConfigureRoutes();\n+\n+        mutable.setRoute(\":param\", ParamTarget.class);\n+        Assert.assertTrue(mutable.hasRouteTarget(ParamTarget.class));\n+        Assert.assertEquals(ParamTarget.class, mutable\n+                .getNavigationRouteTarget(\"123\").getRouteTarget().getTarget());\n+\n+        try {\n+            mutable.setRoute(\":param\", ParamTarget.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1ODYwMA=="}, "originalCommit": {"oid": "6727442d37fb636e8cfd6a516c7442cc29f41730"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3079, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}