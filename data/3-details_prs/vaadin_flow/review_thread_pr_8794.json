{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4ODkzMjA0", "number": 8794, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjozNzoxNlrOETij6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjozNzoxNlrOETij6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTI0NjQ4OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjozNzoxNlrOG5VCEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1Nzo1NVrOG5YLhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NjYxMQ==", "bodyText": "Please avoid one letter variable", "url": "https://github.com/vaadin/flow/pull/8794#discussion_r462766611", "createdAt": "2020-07-30T06:37:16Z", "author": {"login": "denis-anisimov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -267,11 +268,11 @@ protected void validateItemIndex(int itemIndex) {\n         return this;\n     }\n \n-    private int getItemIndex(T item) {\n+    private int getItemIndex(T item, Stream<T> stream) {\n         Objects.requireNonNull(item, NULL_ITEM_ERROR_MESSAGE);\n         AtomicInteger index = new AtomicInteger(-1);\n         //@formatter:off\n-        if (!getItems().peek(t -> index.incrementAndGet())\n+        if (!stream.peek(t -> index.incrementAndGet())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06963207ec02074edeb2ca96b273ea1d83a85839"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NzcxMg==", "bodyText": "Also : it's an existing code but I'm a bit uncomfortable with using peek which should not have side effects but it has here.\nThis is minor.", "url": "https://github.com/vaadin/flow/pull/8794#discussion_r462767712", "createdAt": "2020-07-30T06:39:49Z", "author": {"login": "denis-anisimov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -267,11 +268,11 @@ protected void validateItemIndex(int itemIndex) {\n         return this;\n     }\n \n-    private int getItemIndex(T item) {\n+    private int getItemIndex(T item, Stream<T> stream) {\n         Objects.requireNonNull(item, NULL_ITEM_ERROR_MESSAGE);\n         AtomicInteger index = new AtomicInteger(-1);\n         //@formatter:off\n-        if (!getItems().peek(t -> index.incrementAndGet())\n+        if (!stream.peek(t -> index.incrementAndGet())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NjYxMQ=="}, "originalCommit": {"oid": "06963207ec02074edeb2ca96b273ea1d83a85839"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwODk2OA==", "bodyText": "Please avoid one letter variable\n\nDone.\n\npeek which should not have side effects but it has here\n\nWell, this was done as a simple solution to count the items while the other terminate method is expected (findFirst()). The side effect here (counter increment) is intend. I don't know how to do that in more elegant way.", "url": "https://github.com/vaadin/flow/pull/8794#discussion_r462808968", "createdAt": "2020-07-30T07:41:08Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -267,11 +268,11 @@ protected void validateItemIndex(int itemIndex) {\n         return this;\n     }\n \n-    private int getItemIndex(T item) {\n+    private int getItemIndex(T item, Stream<T> stream) {\n         Objects.requireNonNull(item, NULL_ITEM_ERROR_MESSAGE);\n         AtomicInteger index = new AtomicInteger(-1);\n         //@formatter:off\n-        if (!getItems().peek(t -> index.incrementAndGet())\n+        if (!stream.peek(t -> index.incrementAndGet())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NjYxMQ=="}, "originalCommit": {"oid": "06963207ec02074edeb2ca96b273ea1d83a85839"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxODE4MQ==", "bodyText": "There is always a way to use forEach  and implement the code in other way.\nBut it's minor as I said.", "url": "https://github.com/vaadin/flow/pull/8794#discussion_r462818181", "createdAt": "2020-07-30T07:57:55Z", "author": {"login": "denis-anisimov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -267,11 +268,11 @@ protected void validateItemIndex(int itemIndex) {\n         return this;\n     }\n \n-    private int getItemIndex(T item) {\n+    private int getItemIndex(T item, Stream<T> stream) {\n         Objects.requireNonNull(item, NULL_ITEM_ERROR_MESSAGE);\n         AtomicInteger index = new AtomicInteger(-1);\n         //@formatter:off\n-        if (!getItems().peek(t -> index.incrementAndGet())\n+        if (!stream.peek(t -> index.incrementAndGet())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NjYxMQ=="}, "originalCommit": {"oid": "06963207ec02074edeb2ca96b273ea1d83a85839"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3153, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}