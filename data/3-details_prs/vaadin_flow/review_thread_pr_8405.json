{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNDY1Njc3", "number": 8405, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoxOVrOD_OcqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoyMVrOD_Ocqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjIzNTkyOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoxOVrOGZxXTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoxOVrOGZxXTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NjM2Nw==", "bodyText": "Cast one of the operands of this addition operation to a \"long\".", "url": "https://github.com/vaadin/flow/pull/8405#discussion_r429676367", "createdAt": "2020-05-24T21:18:19Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -15,85 +15,94 @@\n  */\n package com.vaadin.flow.data.provider;\n \n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n import com.vaadin.flow.function.SerializableComparator;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializablePredicate;\n \n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n /**\n- * Abstract list data view implementation which provides common methods\n- * for fetching, filtering and sorting in-memory data to all {@link ListDataView} subclasses.\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n  *\n  * @param <T>\n- *        data type\n+ *            data type\n  */\n public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         implements ListDataView<T, AbstractListDataView<T>> {\n \n     /**\n-     * Creates a new instance of {@link AbstractListDataView} subclass\n-     * which rely on in-memory data set, i.e. data set stored in a collection.\n+     * Creates a new instance of {@link AbstractListDataView} subclass which\n+     * rely on in-memory data set, i.e. data set stored in a collection.\n      *\n      * @param dataController\n-     *          data controller reference\n+     *            data controller reference\n      */\n     public AbstractListDataView(DataController<T> dataController) {\n         super(dataController);\n     }\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        return getNextItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        if(index < 0)\n+            return false;\n+        return getAllItems().skip(index + 1).findAny().isPresent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjIzNTkzOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoyMFrOGZxXUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoyMFrOGZxXUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NjM2OA==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/vaadin/flow/pull/8405#discussion_r429676368", "createdAt": "2020-05-24T21:18:20Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -15,85 +15,94 @@\n  */\n package com.vaadin.flow.data.provider;\n \n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n import com.vaadin.flow.function.SerializableComparator;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializablePredicate;\n \n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n /**\n- * Abstract list data view implementation which provides common methods\n- * for fetching, filtering and sorting in-memory data to all {@link ListDataView} subclasses.\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n  *\n  * @param <T>\n- *        data type\n+ *            data type\n  */\n public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         implements ListDataView<T, AbstractListDataView<T>> {\n \n     /**\n-     * Creates a new instance of {@link AbstractListDataView} subclass\n-     * which rely on in-memory data set, i.e. data set stored in a collection.\n+     * Creates a new instance of {@link AbstractListDataView} subclass which\n+     * rely on in-memory data set, i.e. data set stored in a collection.\n      *\n      * @param dataController\n-     *          data controller reference\n+     *            data controller reference\n      */\n     public AbstractListDataView(DataController<T> dataController) {\n         super(dataController);\n     }\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        return getNextItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        if(index < 0)\n+            return false;\n+        return getAllItems().skip(index + 1).findAny().isPresent();\n     }\n \n     @Override\n     public T getNextItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> nextItemIndex = getNextItemIndex(notNull(item), items);\n-        return nextItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index < 0)\n+            return null;\n+        return getAllItems().skip(index + 1).findFirst().orElse(null);\n     }\n \n     @Override\n     public boolean hasPreviousItem(T item) {\n-        return getPreviousItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        return index > 0;\n     }\n \n     @Override\n     public T getPreviousItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> previousItemIndex = getPreviousItemIndex(notNull(item), items);\n-        return previousItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index <= 0)\n+            return null;\n+        return getAllItems().skip(index - 1).findFirst().orElse(null);\n     }\n \n     @Override\n     public AbstractListDataView<T> withFilter(SerializablePredicate<T> filter) {\n-        return withFilterOrOrder(dataProvider -> dataProvider.setFilter(filter));\n+        return withFilterOrOrder(\n+                dataProvider -> dataProvider.setFilter(filter));\n     }\n \n     @Override\n-    public AbstractListDataView<T> withSortComparator(SerializableComparator<T> sortComparator) {\n-        return withFilterOrOrder(dataProvider -> dataProvider.setSortComparator(sortComparator));\n+    public AbstractListDataView<T> withSortComparator(\n+            SerializableComparator<T> sortComparator) {\n+        return withFilterOrOrder(\n+                dataProvider -> dataProvider.setSortComparator(sortComparator));\n     }\n \n     @Override\n     public Stream<T> getAllItems() {\n-        return dataController.getAllItems();\n+        return getDataController().getAllItems();\n     }\n \n     @Override\n     public int getDataSize() {\n-        return dataController.getDataSize();\n+        return getDataController().getDataSize();\n     }\n \n     @Override\n     public boolean isItemPresent(T item) {\n-        // TODO: delegate this to the data communicator/component, since the equality could be\n-        //  determined by the provided identity checker (the default is equals).\n+        // TODO: delegate this to the data communicator/component, since the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjIzNTk0OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoyMVrOGZxXUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoyMVrOGZxXUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NjM3MA==", "bodyText": "Cast one of the operands of this subtraction operation to a \"long\".", "url": "https://github.com/vaadin/flow/pull/8405#discussion_r429676370", "createdAt": "2020-05-24T21:18:21Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -15,85 +15,94 @@\n  */\n package com.vaadin.flow.data.provider;\n \n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n import com.vaadin.flow.function.SerializableComparator;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializablePredicate;\n \n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n /**\n- * Abstract list data view implementation which provides common methods\n- * for fetching, filtering and sorting in-memory data to all {@link ListDataView} subclasses.\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n  *\n  * @param <T>\n- *        data type\n+ *            data type\n  */\n public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         implements ListDataView<T, AbstractListDataView<T>> {\n \n     /**\n-     * Creates a new instance of {@link AbstractListDataView} subclass\n-     * which rely on in-memory data set, i.e. data set stored in a collection.\n+     * Creates a new instance of {@link AbstractListDataView} subclass which\n+     * rely on in-memory data set, i.e. data set stored in a collection.\n      *\n      * @param dataController\n-     *          data controller reference\n+     *            data controller reference\n      */\n     public AbstractListDataView(DataController<T> dataController) {\n         super(dataController);\n     }\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        return getNextItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        if(index < 0)\n+            return false;\n+        return getAllItems().skip(index + 1).findAny().isPresent();\n     }\n \n     @Override\n     public T getNextItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> nextItemIndex = getNextItemIndex(notNull(item), items);\n-        return nextItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index < 0)\n+            return null;\n+        return getAllItems().skip(index + 1).findFirst().orElse(null);\n     }\n \n     @Override\n     public boolean hasPreviousItem(T item) {\n-        return getPreviousItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        return index > 0;\n     }\n \n     @Override\n     public T getPreviousItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> previousItemIndex = getPreviousItemIndex(notNull(item), items);\n-        return previousItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index <= 0)\n+            return null;\n+        return getAllItems().skip(index - 1).findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjIzNTk1OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoyMVrOGZxXUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMToxODoyMVrOGZxXUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NjM3MQ==", "bodyText": "Cast one of the operands of this addition operation to a \"long\".", "url": "https://github.com/vaadin/flow/pull/8405#discussion_r429676371", "createdAt": "2020-05-24T21:18:21Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -15,85 +15,94 @@\n  */\n package com.vaadin.flow.data.provider;\n \n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n import com.vaadin.flow.function.SerializableComparator;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializablePredicate;\n \n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n /**\n- * Abstract list data view implementation which provides common methods\n- * for fetching, filtering and sorting in-memory data to all {@link ListDataView} subclasses.\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n  *\n  * @param <T>\n- *        data type\n+ *            data type\n  */\n public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         implements ListDataView<T, AbstractListDataView<T>> {\n \n     /**\n-     * Creates a new instance of {@link AbstractListDataView} subclass\n-     * which rely on in-memory data set, i.e. data set stored in a collection.\n+     * Creates a new instance of {@link AbstractListDataView} subclass which\n+     * rely on in-memory data set, i.e. data set stored in a collection.\n      *\n      * @param dataController\n-     *          data controller reference\n+     *            data controller reference\n      */\n     public AbstractListDataView(DataController<T> dataController) {\n         super(dataController);\n     }\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        return getNextItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        if(index < 0)\n+            return false;\n+        return getAllItems().skip(index + 1).findAny().isPresent();\n     }\n \n     @Override\n     public T getNextItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> nextItemIndex = getNextItemIndex(notNull(item), items);\n-        return nextItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index < 0)\n+            return null;\n+        return getAllItems().skip(index + 1).findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3388, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}