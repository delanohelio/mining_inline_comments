{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNTQxODI3", "number": 8041, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODo1NTo0MVrODxLuUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTowNDo0MVrOEFfZOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODk4ODk2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODo1NTo0MVrOGEg2_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODo1NTo0MVrOGEg2_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4NTg1NQ==", "bodyText": "Remove this method to simply inherit it.", "url": "https://github.com/vaadin/flow/pull/8041#discussion_r407385855", "createdAt": "2020-04-13T08:55:41Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplate.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2000-2018 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.HasComponents;\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.dependency.NpmPackage;\n+import com.vaadin.flow.component.polymertemplate.Id;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.internal.UsageStatistics;\n+import com.vaadin.flow.server.VaadinService;\n+\n+/**\n+ * Component which renders a LitElement template.\n+ * <p>\n+ * A LitElement template is defined in a JavaScript module which should be\n+ * placed inside the {@literal frontend} folder and loaded using\n+ * {@link JsModule @JsModule}. The tag name defined for the Lit template must be\n+ * defined using {@link Tag @Tag} on this class.\n+ * <p>\n+ * By annotating a field using {@link Id @Id} you can map a\n+ * {@link Component @Component} instance to an element in the template, marked\n+ * with an {@code id} attribute which matches the field name or the optionally\n+ * given value to the annotation.\n+ * <p>\n+ * Note that injected components will have the same limitations as with\n+ * {@link PolymerTemplate}.\n+ * <p>\n+ * For more information about the LitElement project, see\n+ * https://lit-element.polymer-project.org/\n+ *\n+ * @see JsModule\n+ * @see Tag\n+ * @see Id\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ */\n+public abstract class LitTemplate extends Component {\n+\n+    static {\n+        UsageStatistics.markAsUsed(\"flow/LitTemplate\", null);\n+    }\n+\n+    /**\n+     * Creates the component mapped to a LitElement.\n+     */\n+    protected LitTemplate() {\n+        LitTemplateInitializer templateInitializer = new LitTemplateInitializer(this, VaadinService.getCurrent());\n+        templateInitializer.mapComponents();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * <p>\n+     * Please note that components defined using {@link Id @Id} are not child\n+     * components. Only components explicitly added through methods such as\n+     * {@link HasComponents#add} or {@link Element#appendChild(Element...)} are\n+     * returned by this method.\n+     */\n+    @Override\n+    public Stream<Component> getChildren() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d09e34703c8a09e615ae901dc002254fba94814"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDM2MTU4OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/java/com/vaadin/client/LitUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxODo1NjoxNlrOGjezNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODoxNToxNlrOGjntBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1Nzk3NQ==", "bodyText": "Please wrap the function with $entry(.", "url": "https://github.com/vaadin/flow/pull/8041#discussion_r439857975", "createdAt": "2020-06-14T18:56:16Z", "author": {"login": "denis-anisimov"}, "path": "flow-client/src/main/java/com/vaadin/client/LitUtils.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.client;\n+\n+import elemental.dom.Element;\n+import elemental.dom.Node;\n+\n+/**\n+ * Utils class, intended to ease working with LitElement related code on client side.\n+ *\n+ * @author Vaadin Ltd\n+ */\n+public final class LitUtils {\n+\n+    private LitUtils() {\n+    }\n+\n+    /**\n+     * Checks if the given element is a LitElement.\n+     *\n+     * @param element\n+     *            the custom element\n+     * @return {@code true} if the element is a Lit element, <code>false</code>\n+     *         otherwise\n+     */\n+    public static native boolean isLitElement(Node element)\n+    /*-{\n+        return typeof element.update == \"function\" && element.updateComplete instanceof Promise && typeof element.shouldUpdate == \"function\" && typeof element.firstUpdated == \"function\";\n+    }-*/;\n+\n+    /**\n+     * Invokes the {@code runnable} when the given Lit element has been rendered\n+     * at least once.\n+     *\n+     * @param element\n+     *            the Lit element\n+     * @param runnable\n+     *            the command to run\n+     */\n+    public static native void whenRendered(Element element, Runnable runnable)\n+    /*-{\n+        element.updateComplete.then(\n+            function () {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3a7b25e119c67d2c0a59011c51dbe1efe03845"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMzg0NA==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8041#discussion_r440003844", "createdAt": "2020-06-15T08:15:16Z", "author": {"login": "Artur-"}, "path": "flow-client/src/main/java/com/vaadin/client/LitUtils.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.client;\n+\n+import elemental.dom.Element;\n+import elemental.dom.Node;\n+\n+/**\n+ * Utils class, intended to ease working with LitElement related code on client side.\n+ *\n+ * @author Vaadin Ltd\n+ */\n+public final class LitUtils {\n+\n+    private LitUtils() {\n+    }\n+\n+    /**\n+     * Checks if the given element is a LitElement.\n+     *\n+     * @param element\n+     *            the custom element\n+     * @return {@code true} if the element is a Lit element, <code>false</code>\n+     *         otherwise\n+     */\n+    public static native boolean isLitElement(Node element)\n+    /*-{\n+        return typeof element.update == \"function\" && element.updateComplete instanceof Promise && typeof element.shouldUpdate == \"function\" && typeof element.firstUpdated == \"function\";\n+    }-*/;\n+\n+    /**\n+     * Invokes the {@code runnable} when the given Lit element has been rendered\n+     * at least once.\n+     *\n+     * @param element\n+     *            the Lit element\n+     * @param runnable\n+     *            the command to run\n+     */\n+    public static native void whenRendered(Element element, Runnable runnable)\n+    /*-{\n+        element.updateComplete.then(\n+            function () {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1Nzk3NQ=="}, "originalCommit": {"oid": "ba3a7b25e119c67d2c0a59011c51dbe1efe03845"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDM2MzM5OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/java/com/vaadin/client/flow/binding/SimpleElementBindingStrategy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxODo1OTo1NVrOGje0NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTo1NToxM1rOGjrSAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1ODIyOA==", "bodyText": "This is quite confusing parameter which still requires further checks : whether it's a Polymer element or LitElement.\nI would extract logic which is inside if (mightNeedWaiting) {  as a Runnable  (or some function)  and pass it as an argument in the method instead mightNeedWaiting.", "url": "https://github.com/vaadin/flow/pull/8041#discussion_r439858228", "createdAt": "2020-06-14T18:59:55Z", "author": {"login": "denis-anisimov"}, "path": "flow-client/src/main/java/com/vaadin/client/flow/binding/SimpleElementBindingStrategy.java", "diffHunk": "@@ -786,15 +788,15 @@ private EventRemover bindVirtualChildren(BindingContext context) {\n                 if (!add.isEmpty()) {\n                     for (int i = 0; i < add.length(); i++) {\n                         appendVirtualChild(context, (StateNode) add.get(i),\n-                                true);\n+                                true, true);\n                     }\n                 }\n             });\n         });\n     }\n \n     private void appendVirtualChild(BindingContext context, StateNode node,\n-            boolean reactivePhase) {\n+            boolean reactivePhase, boolean mightNeedWaiting) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3a7b25e119c67d2c0a59011c51dbe1efe03845"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1Nzk1OA==", "bodyText": "I'm fine with the extra flag (perhaps renamed to deferUntilElementReady or something such). I assume that it is needed because there is no way to synchronously query the updateComplete promise of the Lit element.\n(Since the flag is always true from outside (non-recursive) calls theoretically it is an internal detail that could be handled inside the function in an inner scope, but really no need to bother with that since this is private anyway)", "url": "https://github.com/vaadin/flow/pull/8041#discussion_r440057958", "createdAt": "2020-06-15T09:47:28Z", "author": {"login": "joheriks"}, "path": "flow-client/src/main/java/com/vaadin/client/flow/binding/SimpleElementBindingStrategy.java", "diffHunk": "@@ -786,15 +788,15 @@ private EventRemover bindVirtualChildren(BindingContext context) {\n                 if (!add.isEmpty()) {\n                     for (int i = 0; i < add.length(); i++) {\n                         appendVirtualChild(context, (StateNode) add.get(i),\n-                                true);\n+                                true, true);\n                     }\n                 }\n             });\n         });\n     }\n \n     private void appendVirtualChild(BindingContext context, StateNode node,\n-            boolean reactivePhase) {\n+            boolean reactivePhase, boolean mightNeedWaiting) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1ODIyOA=="}, "originalCommit": {"oid": "ba3a7b25e119c67d2c0a59011c51dbe1efe03845"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MjQ2Ng==", "bodyText": "#8563 would make this simpler. Will rebase on top of that if it is merged", "url": "https://github.com/vaadin/flow/pull/8041#discussion_r440062466", "createdAt": "2020-06-15T09:55:13Z", "author": {"login": "Artur-"}, "path": "flow-client/src/main/java/com/vaadin/client/flow/binding/SimpleElementBindingStrategy.java", "diffHunk": "@@ -786,15 +788,15 @@ private EventRemover bindVirtualChildren(BindingContext context) {\n                 if (!add.isEmpty()) {\n                     for (int i = 0; i < add.length(); i++) {\n                         appendVirtualChild(context, (StateNode) add.get(i),\n-                                true);\n+                                true, true);\n                     }\n                 }\n             });\n         });\n     }\n \n     private void appendVirtualChild(BindingContext context, StateNode node,\n-            boolean reactivePhase) {\n+            boolean reactivePhase, boolean mightNeedWaiting) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1ODIyOA=="}, "originalCommit": {"oid": "ba3a7b25e119c67d2c0a59011c51dbe1efe03845"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDM3MDExOnYy", "diffSide": "RIGHT", "path": "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/littemplate/SimpleLitTemplateNoShadowRootView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxOToxMDo1NFrOGje3kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODoyMjoxMVrOGjn8Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1OTA5MA==", "bodyText": "Any reason don't use SimpleLitTemplateNoShadowRoot directly as a route target ?", "url": "https://github.com/vaadin/flow/pull/8041#discussion_r439859090", "createdAt": "2020-06-14T19:10:54Z", "author": {"login": "denis-anisimov"}, "path": "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/littemplate/SimpleLitTemplateNoShadowRootView.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.vaadin.flow.uitest.ui.littemplate;\n+\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.uitest.servlet.ViewTestLayout;\n+\n+@Route(value = \"com.vaadin.flow.uitest.ui.littemplate.SimpleLitTemplateNoShadowRootView\", layout = ViewTestLayout.class)\n+public class SimpleLitTemplateNoShadowRootView extends Div {\n+\n+    public SimpleLitTemplateNoShadowRootView() {\n+        add(new SimpleLitTemplateNoShadowRoot());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3a7b25e119c67d2c0a59011c51dbe1efe03845"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwNzc1MQ==", "bodyText": "I think there used to be one but not anymore. Merged view and template. The abstract IT class enforces the name to end in View", "url": "https://github.com/vaadin/flow/pull/8041#discussion_r440007751", "createdAt": "2020-06-15T08:22:11Z", "author": {"login": "Artur-"}, "path": "flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/littemplate/SimpleLitTemplateNoShadowRootView.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.vaadin.flow.uitest.ui.littemplate;\n+\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.uitest.servlet.ViewTestLayout;\n+\n+@Route(value = \"com.vaadin.flow.uitest.ui.littemplate.SimpleLitTemplateNoShadowRootView\", layout = ViewTestLayout.class)\n+public class SimpleLitTemplateNoShadowRootView extends Div {\n+\n+    public SimpleLitTemplateNoShadowRootView() {\n+        add(new SimpleLitTemplateNoShadowRoot());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1OTA5MA=="}, "originalCommit": {"oid": "ba3a7b25e119c67d2c0a59011c51dbe1efe03845"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTY4MDg4OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/java/com/vaadin/client/LitUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTo0Nzo0OVrOGjrBMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjowMjoxOVrOGjvK9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1ODE2MA==", "bodyText": "Heavy duck typing there, though not sure if able to suggest something better. Traversing the prototype chain looking for \"LitElement\"?", "url": "https://github.com/vaadin/flow/pull/8041#discussion_r440058160", "createdAt": "2020-06-15T09:47:49Z", "author": {"login": "joheriks"}, "path": "flow-client/src/main/java/com/vaadin/client/LitUtils.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.client;\n+\n+import elemental.dom.Element;\n+import elemental.dom.Node;\n+\n+/**\n+ * Utils class, intended to ease working with LitElement related code on client side.\n+ *\n+ * @author Vaadin Ltd\n+ */\n+public final class LitUtils {\n+\n+    private LitUtils() {\n+    }\n+\n+    /**\n+     * Checks if the given element is a LitElement.\n+     *\n+     * @param element\n+     *            the custom element\n+     * @return {@code true} if the element is a Lit element, <code>false</code>\n+     *         otherwise\n+     */\n+    public static native boolean isLitElement(Node element)\n+    /*-{\n+        return typeof element.update == \"function\" && element.updateComplete instanceof Promise && typeof element.shouldUpdate == \"function\" && typeof element.firstUpdated == \"function\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3a7b25e119c67d2c0a59011c51dbe1efe03845"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwMTI0OQ==", "bodyText": "instanceof LitElement would be nice but not doable as this is in GWT code...\nWould LitElement appear anywhere after renaming and obfuscation?", "url": "https://github.com/vaadin/flow/pull/8041#discussion_r440101249", "createdAt": "2020-06-15T11:11:06Z", "author": {"login": "Artur-"}, "path": "flow-client/src/main/java/com/vaadin/client/LitUtils.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.client;\n+\n+import elemental.dom.Element;\n+import elemental.dom.Node;\n+\n+/**\n+ * Utils class, intended to ease working with LitElement related code on client side.\n+ *\n+ * @author Vaadin Ltd\n+ */\n+public final class LitUtils {\n+\n+    private LitUtils() {\n+    }\n+\n+    /**\n+     * Checks if the given element is a LitElement.\n+     *\n+     * @param element\n+     *            the custom element\n+     * @return {@code true} if the element is a Lit element, <code>false</code>\n+     *         otherwise\n+     */\n+    public static native boolean isLitElement(Node element)\n+    /*-{\n+        return typeof element.update == \"function\" && element.updateComplete instanceof Promise && typeof element.shouldUpdate == \"function\" && typeof element.firstUpdated == \"function\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1ODE2MA=="}, "originalCommit": {"oid": "ba3a7b25e119c67d2c0a59011c51dbe1efe03845"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEyNjE5OA==", "bodyText": "Right, class name is minimized before webpack bundles the client. Ignore the above, can't really come up with any alternative.", "url": "https://github.com/vaadin/flow/pull/8041#discussion_r440126198", "createdAt": "2020-06-15T12:02:19Z", "author": {"login": "joheriks"}, "path": "flow-client/src/main/java/com/vaadin/client/LitUtils.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.client;\n+\n+import elemental.dom.Element;\n+import elemental.dom.Node;\n+\n+/**\n+ * Utils class, intended to ease working with LitElement related code on client side.\n+ *\n+ * @author Vaadin Ltd\n+ */\n+public final class LitUtils {\n+\n+    private LitUtils() {\n+    }\n+\n+    /**\n+     * Checks if the given element is a LitElement.\n+     *\n+     * @param element\n+     *            the custom element\n+     * @return {@code true} if the element is a Lit element, <code>false</code>\n+     *         otherwise\n+     */\n+    public static native boolean isLitElement(Node element)\n+    /*-{\n+        return typeof element.update == \"function\" && element.updateComplete instanceof Promise && typeof element.shouldUpdate == \"function\" && typeof element.firstUpdated == \"function\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1ODE2MA=="}, "originalCommit": {"oid": "ba3a7b25e119c67d2c0a59011c51dbe1efe03845"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTkyNjk2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTowNDo0MVrOGjtdTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMToxMToxNFrOGjtpwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5ODEyNQ==", "bodyText": "parser and service aren't ctor parameters.", "url": "https://github.com/vaadin/flow/pull/8041#discussion_r440098125", "createdAt": "2020-06-15T11:04:41Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+\n+import com.vaadin.flow.component.polymertemplate.IdCollector;\n+import com.vaadin.flow.component.polymertemplate.TemplateDataAnalyzer.ParserData;\n+\n+/**\n+ * Template data analyzer which produces immutable data required for template\n+ * initializer using provided template class and a parser.\n+ *\n+ * @author Vaadin Ltd\n+ *\n+ */\n+class LitTemplateDataAnalyzer implements Serializable {\n+\n+    private final Class<? extends LitTemplate> templateClass;\n+\n+    /**\n+     * Create an instance of the analyzer using the {@code templateClass} and the\n+     * template {@code parser}.\n+     *\n+     * @param templateClass a template type\n+     * @param parser        a template parser\n+     * @param service       the related service instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3a7b25e119c67d2c0a59011c51dbe1efe03845"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwMTMxNA==", "bodyText": "Fixed", "url": "https://github.com/vaadin/flow/pull/8041#discussion_r440101314", "createdAt": "2020-06-15T11:11:14Z", "author": {"login": "Artur-"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+\n+import com.vaadin.flow.component.polymertemplate.IdCollector;\n+import com.vaadin.flow.component.polymertemplate.TemplateDataAnalyzer.ParserData;\n+\n+/**\n+ * Template data analyzer which produces immutable data required for template\n+ * initializer using provided template class and a parser.\n+ *\n+ * @author Vaadin Ltd\n+ *\n+ */\n+class LitTemplateDataAnalyzer implements Serializable {\n+\n+    private final Class<? extends LitTemplate> templateClass;\n+\n+    /**\n+     * Create an instance of the analyzer using the {@code templateClass} and the\n+     * template {@code parser}.\n+     *\n+     * @param templateClass a template type\n+     * @param parser        a template parser\n+     * @param service       the related service instance", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5ODEyNQ=="}, "originalCommit": {"oid": "ba3a7b25e119c67d2c0a59011c51dbe1efe03845"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3555, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}