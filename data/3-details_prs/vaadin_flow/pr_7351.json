{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNzcwODQ3", "number": 7351, "title": "merge master", "bodyText": "This change is\u2002", "createdAt": "2020-01-14T18:12:26Z", "url": "https://github.com/vaadin/flow/pull/7351", "merged": true, "mergeCommit": {"oid": "35bcff954b2628749e643e3468f8b788562b975c"}, "closed": true, "closedAt": "2020-01-15T15:48:23Z", "author": {"login": "manolo"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3oH71AH2gAyMzYyNzcwODQ3OjIyMGJlZWIzMDBhODUzYWRlYzgzZDYzZWZkMmM4N2E5YWZiY2JlN2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6niqtAFqTM0MzMxODI0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "220beeb300a853adec83d63efd2c87a9afbcbe7b", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/220beeb300a853adec83d63efd2c87a9afbcbe7b", "committedDate": "2020-01-06T08:45:38Z", "message": "Find the name of the search path environment variable before manipulating it (#7277)\n\nOn Windows, environment variables are not case sensitive. So the variable may be named \"PATH\" or \"Path\", and in the latter case adding PATH on top of Path would discard the whole existing path."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92237d47a425e8a0546c21d58e308cefb1dd61fc", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/92237d47a425e8a0546c21d58e308cefb1dd61fc", "committedDate": "2020-01-07T14:07:07Z", "message": "Disable pnpm update-notifier (#7292)\n\n* Disable pnpm update-notifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34ce44734a79071d7963cc447b2c9147fda44d99", "author": {"user": {"login": "Legioth", "name": "Leif \u00c5strand"}}, "url": "https://github.com/vaadin/flow/commit/34ce44734a79071d7963cc447b2c9147fda44d99", "committedDate": "2020-01-08T06:08:45Z", "message": "Throw if blocking on JS result would deadlock (#7218)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a37957bda05c6038d6fe882cd501d388dc7bc36", "author": {"user": {"login": "yuriy-fix", "name": "Yuriy Yevstihnyeyev"}}, "url": "https://github.com/vaadin/flow/commit/9a37957bda05c6038d6fe882cd501d388dc7bc36", "committedDate": "2020-01-08T11:50:51Z", "message": "Set direction along with the Locale for the UI (#7294)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5609a126e5eee65fceaeac32428443430d3491b8", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/5609a126e5eee65fceaeac32428443430d3491b8", "committedDate": "2020-01-08T15:26:44Z", "message": "Elide (p)npm stdout unless command fails (#7306)\n\nTo avoid bloating the log, only standard error output of pnpm install (npm install if the user has elected to choose it) is echoed to the console. If the command fails (non-zero exit code), print the standard output contents in the log at ERROR level."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a54f6d72b006a1c35ee37bd73fbe021cbda7b75d", "author": {"user": {"login": "pleku", "name": "Pekka Hyv\u00f6nen"}}, "url": "https://github.com/vaadin/flow/commit/a54f6d72b006a1c35ee37bd73fbe021cbda7b75d", "committedDate": "2020-01-10T04:50:31Z", "message": "Deprecate isSafariOrIOS (#7322)\n\nIt does not work reliably and should be removed in 3.0 like other isIOS method in BrowserDetails."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "816a09474f2a3d105de00e4eb81960f7932dc0c3", "author": {"user": {"login": "joheriks", "name": "Johannes Eriksson"}}, "url": "https://github.com/vaadin/flow/commit/816a09474f2a3d105de00e4eb81960f7932dc0c3", "committedDate": "2020-01-10T04:58:19Z", "message": "Always consume the stdout stream from (p)npm and log at debug level (#7325)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "debca2c18ba3ad7273c413ced8248cfad199f4f1", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/debca2c18ba3ad7273c413ced8248cfad199f4f1", "committedDate": "2020-01-10T05:00:21Z", "message": "Update comment parser handling (#7320)\n\nNow apparent comments inside\r\nstrings are left untouched.\r\n\r\nFixes #7082"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9881071822f8aee751684a1fc10f685cc2a7a587", "author": {"user": {"login": "tulioag", "name": "Tulio Garcia"}}, "url": "https://github.com/vaadin/flow/commit/9881071822f8aee751684a1fc10f685cc2a7a587", "committedDate": "2020-01-10T06:58:01Z", "message": "TreeDataProvider: Apply filters to children (#7317)\n\nFixes https://github.com/vaadin/vaadin-grid-flow/issues/819"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbdacbe6ca9b039faf769bba944cdc767313a92c", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/bbdacbe6ca9b039faf769bba944cdc767313a92c", "committedDate": "2020-01-13T08:18:22Z", "message": "Cleaner ouput for pnpm i (#7332)\n\nCreate temp package.json and package-lock.json to get less\nconfusing output.\nLog that a global install of pnpm is suggested. \nSuppress any logs for npm i pnpm@4.5.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d2842e6848f85262d3bcce2fe6d4161d0def6e3", "author": {"user": {"login": "TatuLund", "name": "Tatu Lund"}}, "url": "https://github.com/vaadin/flow/commit/8d2842e6848f85262d3bcce2fe6d4161d0def6e3", "committedDate": "2020-01-13T12:37:15Z", "message": "Make asRequired conditional on binding.setAsRequiredEnabled(..) (#7232)\n\nIt is a very common use case in complex form that whether a field is required or not, it depends on input on other fields. Hypothetical use case sample could be that we have form for a Product and price of the product is needed except in case the Product's type is Sample. So in that kind of scenarios it would be needed to turn off asRequired() validation easily. The purpose of this enhancement and new binding.setAsRequiredEnabled(..) API is to help implementation of this kind of use cases more easily.\r\n\r\nThere is more generic ticket about conditional validation, and this PR is partially addressing it #10709\r\n\r\nCherry pick from vaadin/framework#11834\r\n\r\nRequested in #5030"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c02bc286b9615f0ffe7441c6e40ed792673bd13a", "author": {"user": {"login": "Legioth", "name": "Leif \u00c5strand"}}, "url": "https://github.com/vaadin/flow/commit/c02bc286b9615f0ffe7441c6e40ed792673bd13a", "committedDate": "2020-01-13T14:13:01Z", "message": "Allow storing a value in VaadinContext based on a super type (#7315)\n\nAlso removes a redundant type parameter from the API.\r\nAlso adds a test for the original removeAttribute method\r\nAlso tweaks some javadocs to be consistent with other Vaadin javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0bfec33c0faef2cd39e477895a74fb4b1f2e13a", "author": {"user": {"login": "bogdanudrescu", "name": "Bogdan Udrescu"}}, "url": "https://github.com/vaadin/flow/commit/a0bfec33c0faef2cd39e477895a74fb4b1f2e13a", "committedDate": "2020-01-14T08:00:07Z", "message": "Execute BeforeEnter listeners starting with top parent. (#7130)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4279a61a0f1fda95a95bb218bacfdea183e64df", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/f4279a61a0f1fda95a95bb218bacfdea183e64df", "committedDate": "2020-01-14T12:38:10Z", "message": "Deprecate getNewSelection method (#7346)\n\nFixes #6756"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fad0230fdced2a686a29cd3e2bf6276be923871a", "author": {"user": {"login": "javier-godoy", "name": "Javier Godoy"}}, "url": "https://github.com/vaadin/flow/commit/fad0230fdced2a686a29cd3e2bf6276be923871a", "committedDate": "2020-01-14T14:21:14Z", "message": "Add getChildren method in HasOrderedComponents interface (#7264)\n\n* Add getChildren method in HasOrderedComponents interface\r\n\r\n* Add unit test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70a95b00786ab57859d292533cf448f0b59d2445", "author": {"user": {"login": "manolo", "name": "Manuel Carrasco Mo\u00f1ino"}}, "url": "https://github.com/vaadin/flow/commit/70a95b00786ab57859d292533cf448f0b59d2445", "committedDate": "2020-01-15T09:38:17Z", "message": "Update regex in performance IT"}, "afterCommit": {"oid": "865e66aed6f6a6eb4083e87d743100668791c576", "author": {"user": {"login": "manolo", "name": "Manuel Carrasco Mo\u00f1ino"}}, "url": "https://github.com/vaadin/flow/commit/865e66aed6f6a6eb4083e87d743100668791c576", "committedDate": "2020-01-15T09:58:40Z", "message": "Merge branch 'master' into tmp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99ba50dde4d82d1d8edd00ef3adee61d6e09acc5", "author": {"user": {"login": "Braus", "name": null}}, "url": "https://github.com/vaadin/flow/commit/99ba50dde4d82d1d8edd00ef3adee61d6e09acc5", "committedDate": "2020-01-15T10:06:17Z", "message": "Fix Export-Package of bnd.bnd in fllow-dnd (#7291)\n\n* changed bnd.bnd so it can be used by components like grid in an OSGI environment."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "865e66aed6f6a6eb4083e87d743100668791c576", "author": {"user": {"login": "manolo", "name": "Manuel Carrasco Mo\u00f1ino"}}, "url": "https://github.com/vaadin/flow/commit/865e66aed6f6a6eb4083e87d743100668791c576", "committedDate": "2020-01-15T09:58:40Z", "message": "Merge branch 'master' into tmp"}, "afterCommit": {"oid": "7ff3e0e2ac66c94ef965c629b7c046169a69e4a9", "author": {"user": {"login": "manolo", "name": "Manuel Carrasco Mo\u00f1ino"}}, "url": "https://github.com/vaadin/flow/commit/7ff3e0e2ac66c94ef965c629b7c046169a69e4a9", "committedDate": "2020-01-15T11:37:58Z", "message": "Merge branch 'master' into mcm/ccdm/merge-master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d8e4226abdde9445c4e5bb7b539b64de7228b49", "author": {"user": {"login": "tulioag", "name": "Tulio Garcia"}}, "url": "https://github.com/vaadin/flow/commit/9d8e4226abdde9445c4e5bb7b539b64de7228b49", "committedDate": "2020-01-15T11:45:51Z", "message": "Use headless chrome always, except on local debug (#7357)\n\n* Use headless chrome always, except on local debug"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ff3e0e2ac66c94ef965c629b7c046169a69e4a9", "author": {"user": {"login": "manolo", "name": "Manuel Carrasco Mo\u00f1ino"}}, "url": "https://github.com/vaadin/flow/commit/7ff3e0e2ac66c94ef965c629b7c046169a69e4a9", "committedDate": "2020-01-15T11:37:58Z", "message": "Merge branch 'master' into mcm/ccdm/merge-master"}, "afterCommit": {"oid": "33d6d1bb8e4daf5882fea77b4e80ad603887232f", "author": {"user": {"login": "manolo", "name": "Manuel Carrasco Mo\u00f1ino"}}, "url": "https://github.com/vaadin/flow/commit/33d6d1bb8e4daf5882fea77b4e80ad603887232f", "committedDate": "2020-01-15T12:04:18Z", "message": "Merge branch 'master' into mcm/ccdm/merge-master"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33d6d1bb8e4daf5882fea77b4e80ad603887232f", "author": {"user": {"login": "manolo", "name": "Manuel Carrasco Mo\u00f1ino"}}, "url": "https://github.com/vaadin/flow/commit/33d6d1bb8e4daf5882fea77b4e80ad603887232f", "committedDate": "2020-01-15T12:04:18Z", "message": "Merge branch 'master' into mcm/ccdm/merge-master"}, "afterCommit": {"oid": "d95274845a2a583dcd24a15343ba8884353eea25", "author": {"user": {"login": "manolo", "name": "Manuel Carrasco Mo\u00f1ino"}}, "url": "https://github.com/vaadin/flow/commit/d95274845a2a583dcd24a15343ba8884353eea25", "committedDate": "2020-01-15T14:12:51Z", "message": "Merge branch 'master' into mcm/ccdm/merge-master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584", "author": {"user": {"login": "manolo", "name": "Manuel Carrasco Mo\u00f1ino"}}, "url": "https://github.com/vaadin/flow/commit/a3847c7883cef2aa19f74e9884041df37d632584", "committedDate": "2020-01-15T14:14:45Z", "message": "Merge branch 'master' into mcm/ccdm/merge-master"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d95274845a2a583dcd24a15343ba8884353eea25", "author": {"user": {"login": "manolo", "name": "Manuel Carrasco Mo\u00f1ino"}}, "url": "https://github.com/vaadin/flow/commit/d95274845a2a583dcd24a15343ba8884353eea25", "committedDate": "2020-01-15T14:12:51Z", "message": "Merge branch 'master' into mcm/ccdm/merge-master"}, "afterCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584", "author": {"user": {"login": "manolo", "name": "Manuel Carrasco Mo\u00f1ino"}}, "url": "https://github.com/vaadin/flow/commit/a3847c7883cef2aa19f74e9884041df37d632584", "committedDate": "2020-01-15T14:14:45Z", "message": "Merge branch 'master' into mcm/ccdm/merge-master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMDgz", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310083", "createdAt": "2020-01-15T15:36:40Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0MFrOFd8gRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0MFrOFd8gRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDMyNw==", "bodyText": "Refactor this code to not nest more than 3 if/for/while/switch/try statements. \n Move the \"/\" string literal on the left side of this string comparison.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944327", "createdAt": "2020-01-15T15:36:40Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMDk4", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310098", "createdAt": "2020-01-15T15:36:41Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0MVrOFd8gUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0MVrOFd8gUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDMzNw==", "bodyText": "Move the \"\"\" string literal on the left side of this string comparison.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944337", "createdAt": "2020-01-15T15:36:41Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {\n+                        state = State.IN_BLOCK_COMMENT;\n+                    } else {\n+                        result.append(character).append(nextCharacter);\n+                    }\n+                } else {\n+                    result.append(character);\n+                    if (character.equals(\"\\\"\")) {\n+                        state = State.IN_STRING;\n+                    }\n+                }\n+                break;\n+            case IN_STRING:\n+                result.append(character);\n+                if (character.equals(\"\\\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMTI0", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310124", "createdAt": "2020-01-15T15:36:43Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0M1rOFd8gZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0M1rOFd8gZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDM1Nw==", "bodyText": "Move the \"*\" string literal on the left side of this string comparison.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944357", "createdAt": "2020-01-15T15:36:43Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMTQ4", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310148", "createdAt": "2020-01-15T15:36:44Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0NFrOFd8gcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0NFrOFd8gcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDM3MQ==", "bodyText": "Move the \"\\\" string literal on the left side of this string comparison.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944371", "createdAt": "2020-01-15T15:36:44Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {\n+                        state = State.IN_BLOCK_COMMENT;\n+                    } else {\n+                        result.append(character).append(nextCharacter);\n+                    }\n+                } else {\n+                    result.append(character);\n+                    if (character.equals(\"\\\"\")) {\n+                        state = State.IN_STRING;\n+                    }\n+                }\n+                break;\n+            case IN_STRING:\n+                result.append(character);\n+                if (character.equals(\"\\\"\")) {\n+                    state = State.NORMAL;\n+                } else if (character.equals(\"\\\\\") && scanner.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMTYy", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310162", "createdAt": "2020-01-15T15:36:45Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0NVrOFd8ggA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0NVrOFd8ggA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDM4NA==", "bodyText": "Reorder the modifiers to comply with the Java Language Specification. \n Refactor this method to reduce its Cognitive Complexity from 30 to the 15 allowed. \n \"final\" is redundant in this context.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944384", "createdAt": "2020-01-15T15:36:45Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMTky", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310192", "createdAt": "2020-01-15T15:36:47Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0N1rOFd8gjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0N1rOFd8gjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDM5OQ==", "bodyText": "Move the \"\\n\" string literal on the left side of this string comparison.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944399", "createdAt": "2020-01-15T15:36:47Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {\n+                        state = State.IN_BLOCK_COMMENT;\n+                    } else {\n+                        result.append(character).append(nextCharacter);\n+                    }\n+                } else {\n+                    result.append(character);\n+                    if (character.equals(\"\\\"\")) {\n+                        state = State.IN_STRING;\n+                    }\n+                }\n+                break;\n+            case IN_STRING:\n+                result.append(character);\n+                if (character.equals(\"\\\"\")) {\n+                    state = State.NORMAL;\n+                } else if (character.equals(\"\\\\\") && scanner.hasNext()) {\n+                    result.append(scanner.next());\n+                }\n+                break;\n+            case IN_LINE_COMMENT:\n+                if (character.equals(\"\\n\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMjA5", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310209", "createdAt": "2020-01-15T15:36:48Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0OFrOFd8gow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0OFrOFd8gow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDQxOQ==", "bodyText": "Refactor this code to not nest more than 3 if/for/while/switch/try statements. \n Move the \"\"\" string literal on the left side of this string comparison.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944419", "createdAt": "2020-01-15T15:36:48Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {\n+                        state = State.IN_BLOCK_COMMENT;\n+                    } else {\n+                        result.append(character).append(nextCharacter);\n+                    }\n+                } else {\n+                    result.append(character);\n+                    if (character.equals(\"\\\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMjIw", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310220", "createdAt": "2020-01-15T15:36:49Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0OVrOFd8grw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo0OVrOFd8grw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDQzMQ==", "bodyText": "Reduce this switch case number of lines from 16 to at most 5, for example by extracting code into methods.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944431", "createdAt": "2020-01-15T15:36:49Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMjMx", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310231", "createdAt": "2020-01-15T15:36:50Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1MFrOFd8gtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1MFrOFd8gtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDQzNw==", "bodyText": "Move the \"*\" string literal on the left side of this string comparison.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944437", "createdAt": "2020-01-15T15:36:50Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {\n+                        state = State.IN_BLOCK_COMMENT;\n+                    } else {\n+                        result.append(character).append(nextCharacter);\n+                    }\n+                } else {\n+                    result.append(character);\n+                    if (character.equals(\"\\\"\")) {\n+                        state = State.IN_STRING;\n+                    }\n+                }\n+                break;\n+            case IN_STRING:\n+                result.append(character);\n+                if (character.equals(\"\\\"\")) {\n+                    state = State.NORMAL;\n+                } else if (character.equals(\"\\\\\") && scanner.hasNext()) {\n+                    result.append(scanner.next());\n+                }\n+                break;\n+            case IN_LINE_COMMENT:\n+                if (character.equals(\"\\n\")) {\n+                    result.append(character);\n+                    state = State.NORMAL;\n+                }\n+                break;\n+            case IN_BLOCK_COMMENT:\n+                if (character.equals(\"*\") && scanner.hasNext() && scanner", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMjQ2", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310246", "createdAt": "2020-01-15T15:36:51Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1MlrOFd8gww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1MlrOFd8gww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDQ1MQ==", "bodyText": "Reduce this switch case number of lines from 7 to at most 5, for example by extracting code into methods.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944451", "createdAt": "2020-01-15T15:36:52Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {\n+                        state = State.IN_BLOCK_COMMENT;\n+                    } else {\n+                        result.append(character).append(nextCharacter);\n+                    }\n+                } else {\n+                    result.append(character);\n+                    if (character.equals(\"\\\"\")) {\n+                        state = State.IN_STRING;\n+                    }\n+                }\n+                break;\n+            case IN_STRING:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMjYz", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310263", "createdAt": "2020-01-15T15:36:53Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1M1rOFd8g1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1M1rOFd8g1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDQ2OA==", "bodyText": "Move the \"/\" string literal on the left side of this string comparison.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944468", "createdAt": "2020-01-15T15:36:53Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMjgx", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310281", "createdAt": "2020-01-15T15:36:54Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1NFrOFd8g5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1NFrOFd8g5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDQ4NA==", "bodyText": "Move the \"/\" string literal on the left side of this string comparison.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944484", "createdAt": "2020-01-15T15:36:54Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/StringUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.Scanner;\n+\n+/**\n+ * Utility class for special string handling.\n+ */\n+public final class StringUtil {\n+\n+    /**\n+     * Comment parser state enumeration.\n+     */\n+    private enum State {\n+        NORMAL, IN_LINE_COMMENT, IN_BLOCK_COMMENT, IN_STRING\n+    }\n+\n+    /**\n+     * Removes comments (block comments and line comments) from the JS code.\n+     *\n+     * @return the code with removed comments\n+     */\n+    public final static String removeComments(String code) {\n+        State state = State.NORMAL;\n+        StringBuilder result = new StringBuilder();\n+        Scanner scanner = new Scanner(code);\n+        scanner.useDelimiter(\"\");\n+        while (scanner.hasNext()) {\n+            String character = scanner.next();\n+            switch (state) {\n+            case NORMAL:\n+                if (character.equals(\"/\") && scanner.hasNext()) {\n+                    String nextCharacter = scanner.next();\n+                    if (nextCharacter.equals(\"/\")) {\n+                        state = State.IN_LINE_COMMENT;\n+                    } else if (nextCharacter.equals(\"*\")) {\n+                        state = State.IN_BLOCK_COMMENT;\n+                    } else {\n+                        result.append(character).append(nextCharacter);\n+                    }\n+                } else {\n+                    result.append(character);\n+                    if (character.equals(\"\\\"\")) {\n+                        state = State.IN_STRING;\n+                    }\n+                }\n+                break;\n+            case IN_STRING:\n+                result.append(character);\n+                if (character.equals(\"\\\"\")) {\n+                    state = State.NORMAL;\n+                } else if (character.equals(\"\\\\\") && scanner.hasNext()) {\n+                    result.append(scanner.next());\n+                }\n+                break;\n+            case IN_LINE_COMMENT:\n+                if (character.equals(\"\\n\")) {\n+                    result.append(character);\n+                    state = State.NORMAL;\n+                }\n+                break;\n+            case IN_BLOCK_COMMENT:\n+                if (character.equals(\"*\") && scanner.hasNext() && scanner\n+                        .next().equals(\"/\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMjk3", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310297", "createdAt": "2020-01-15T15:36:55Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1NVrOFd8g9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1NVrOFd8g9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDUwMA==", "bodyText": "\"public\" is redundant in this context.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944500", "createdAt": "2020-01-15T15:36:55Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/binder/Binder.java", "diffHunk": "@@ -211,6 +211,30 @@\n          * @return the setter\n          */\n         Setter<BEAN, TARGET> getSetter();\n+\n+        /**\n+         * Enable or disable asRequired validator.\n+         * The validator is enabled by default.\n+         *\n+         * @see BindingBuilder#asRequired(String)\n+         * @see BindingBuilder#asRequired(ErrorMessageProvider)\n+         *\n+         * @param asRequiredEnabled\n+         *            {@code false} if asRequired validator should\n+         *            be disabled, {@code true} otherwise (default)\n+         */\n+        public void setAsRequiredEnabled(boolean asRequiredEnabled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMzE5", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310319", "createdAt": "2020-01-15T15:36:56Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1NlrOFd8hAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1NlrOFd8hAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDUxMw==", "bodyText": "Prefix this call to \"validate\" with \"super.\".", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944513", "createdAt": "2020-01-15T15:36:56Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/binder/Binder.java", "diffHunk": "@@ -1254,6 +1290,24 @@ public boolean isReadOnly() {\n         public Setter<BEAN, TARGET> getSetter() {\n             return setter;\n         }\n+\n+        @Override\n+        public void setAsRequiredEnabled(boolean asRequiredEnabled) {\n+            if (!asRequiredSet) {\n+                throw new IllegalStateException(\n+                 \"Unable to toggle asRequired validation since \" \n+                         + \"asRequired has not been set.\");\n+            }\n+            if (asRequiredEnabled != isAsRequiredEnabled()) {\n+                field.setRequiredIndicatorVisible(asRequiredEnabled);\n+                validate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMzM0", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310334", "createdAt": "2020-01-15T15:36:57Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1N1rOFd8hCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1N1rOFd8hCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDUyMw==", "bodyText": "\"public\" is redundant in this context.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944523", "createdAt": "2020-01-15T15:36:57Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/binder/Binder.java", "diffHunk": "@@ -211,6 +211,30 @@\n          * @return the setter\n          */\n         Setter<BEAN, TARGET> getSetter();\n+\n+        /**\n+         * Enable or disable asRequired validator.\n+         * The validator is enabled by default.\n+         *\n+         * @see BindingBuilder#asRequired(String)\n+         * @see BindingBuilder#asRequired(ErrorMessageProvider)\n+         *\n+         * @param asRequiredEnabled\n+         *            {@code false} if asRequired validator should\n+         *            be disabled, {@code true} otherwise (default)\n+         */\n+        public void setAsRequiredEnabled(boolean asRequiredEnabled);\n+\n+        /**\n+         * Returns whether asRequired validator is currently enabled or not.\n+         *\n+         * @see BindingBuilder#asRequired(String)\n+         * @see BindingBuilder#asRequired(ErrorMessageProvider)\n+         *\n+         * @return {@code false} if asRequired validator is disabled\n+         *         {@code true} otherwise (default)\n+         */\n+        public boolean isAsRequiredEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMzQ5", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310349", "createdAt": "2020-01-15T15:36:58Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1OFrOFd8hFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNjo1OFrOFd8hFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDUzNQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944535", "createdAt": "2020-01-15T15:36:58Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/BeforeEvent.java", "diffHunk": "@@ -388,14 +388,36 @@ public void rerouteTo(String route) {\n     }\n \n     /**\n-     * Get the route target for rerouting.\n+     * Get the route target type for rerouting.\n      *\n-     * @return route target\n+     * @return route target type\n+     *\n+     * @deprecated use {@link #getRerouteTargetType()} instead.\n      */\n+    @Deprecated\n     public Class<? extends Component> getRouteTargetType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMzY0", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310364", "createdAt": "2020-01-15T15:37:00Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNzowMFrOFd8hIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNzowMFrOFd8hIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDU0Nw==", "bodyText": "Invoke method(s) only conditionally.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944547", "createdAt": "2020-01-15T15:37:00Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java", "diffHunk": "@@ -973,17 +1010,31 @@ private static void installPnpm(String baseDir,\n         List<String> command = new ArrayList<>();\n         command.addAll(installCommand);\n         command.add(\"install\");\n-        command.add(\"pnpm@4.5.0\");\n+        command.add(\"pnpm@\" + DEFAULT_PNPM_VERSION);\n \n         console(YELLOW, commandToString(baseDir, command));\n \n         ProcessBuilder builder = createProcessBuilder(command);\n         builder.environment().put(\"ADBLOCK\", \"1\");\n         builder.directory(new File(baseDir));\n \n+        builder.redirectInput(ProcessBuilder.Redirect.INHERIT);\n+        builder.redirectError(ProcessBuilder.Redirect.INHERIT);\n+\n         Process process = null;\n         try {\n-            process = builder.inheritIO().start();\n+            process = builder.start();\n+            getLogger().debug(\"Output of `{}`:\", command.stream().collect(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwMzgz", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310383", "createdAt": "2020-01-15T15:37:01Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNzowMVrOFd8hKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNzowMVrOFd8hKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDU1NQ==", "bodyText": "Either log or rethrow this exception.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944555", "createdAt": "2020-01-15T15:37:01Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java", "diffHunk": "@@ -914,6 +933,24 @@ public static void ensurePnpm(String baseDir) {\n                 }\n                 packageJson.delete();\n             }\n+            try {\n+                JsonObject pkgJson = Json.createObject();\n+                pkgJson.put(\"name\", \"temp\");\n+                pkgJson.put(\"license\", \"UNLICENSED\");\n+                pkgJson.put(\"repository\", \"npm/npm\");\n+                pkgJson.put(\"description\", \"Temporary package for pnpm installation\");\n+                FileUtils.writeLines(packageJson,\n+                        Collections.singletonList(pkgJson.toJson()));\n+                JsonObject lockJson = Json.createObject();\n+                lockJson.put(\"lockfileVersion\", 1);\n+                FileUtils.writeLines(new File(baseDir, \"package-lock.json\"),\n+                        Collections.singletonList(lockJson.toJson()));\n+            } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzEwNDA5", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343310409", "createdAt": "2020-01-15T15:37:03Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNzowM1rOFd8hOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTozNzowM1rOFd8hOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0NDU3MQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/7351#discussion_r366944571", "createdAt": "2020-01-15T15:37:03Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/selection/MultiSelectionEvent.java", "diffHunk": "@@ -84,12 +84,18 @@ public MultiSelectionEvent(C listing,\n      * <p>\n      * The result is the current selection of the source listing. So it's always\n      * exactly the same as {@link #getValue()}.\n+     * <p>\n+     * The method will be removed in a later major version.\n      *\n      * @see #getValue()\n+     * @see #getAllSelectedItems()\n      *\n      * @return an unmodifiable set of items selected after the selection was\n      *         changed\n+     * @deprecated Use {@link #getValue()} or {@link #getAllSelectedItems()}\n+     *             instead which are the exact replacements for this method.\n      */\n+    @Deprecated\n     public Set<T> getNewSelection() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzE2MDkz", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343316093", "createdAt": "2020-01-15T15:44:08Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzE3NTI5", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343317529", "createdAt": "2020-01-15T15:45:52Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzE4MjQ1", "url": "https://github.com/vaadin/flow/pull/7351#pullrequestreview-343318245", "createdAt": "2020-01-15T15:46:42Z", "commit": {"oid": "a3847c7883cef2aa19f74e9884041df37d632584"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 733, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}