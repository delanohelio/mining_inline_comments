{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NTEyMDgw", "number": 9014, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNToyNlrOEjxx-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNTozMVrOEjxyGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTUxMjI3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNToyNlrOHSU0gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNToyNlrOHSU0gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NzUzNg==", "bodyText": "Refactor this method to reduce its Cognitive Complexity from 17 to the 15 allowed.", "url": "https://github.com/vaadin/flow/pull/9014#discussion_r488977536", "createdAt": "2020-09-15T21:15:26Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.UncheckedIOException;\n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.polymertemplate.BundleParser;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.Pair;\n+import com.vaadin.flow.server.DependencyFilter;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.shared.ui.Dependency;\n+import com.vaadin.flow.shared.ui.LoadMode;\n+\n+import elemental.json.JsonObject;\n+\n+/**\n+ * Lit template parser implementation.\n+ * <p>\n+ * The implementation scans all JsModule annotations for the given template\n+ * class and tries to find the one that contains template definition using the\n+ * tag name.\n+ * <p>\n+ * The class is Singleton. Use {@link LitTemplateParserImpl#getInstance()} to\n+ * get its instance.\n+ *\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @see BundleParser\n+ */\n+class LitTemplateParserImpl implements LitTemplateParser {\n+\n+    private static final LitTemplateParser INSTANCE = new LitTemplateParserImpl();\n+\n+    private final HashMap<String, String> cache = new HashMap<>();\n+    private final ReentrantLock templateSourceslock = new ReentrantLock();\n+    private JsonObject jsonStats;\n+\n+    /**\n+     * The default constructor. Protected in order to prevent direct\n+     * instantiation, but not private in order to allow mocking/overrides for\n+     * testing purposes.\n+     */\n+    protected LitTemplateParserImpl() {\n+    }\n+\n+    static LitTemplateParser getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public TemplateData getTemplateContent(Class<? extends LitTemplate> clazz,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f998e067224b1525d069a1ee78e040d937ae3e9"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTUxMjMxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNToyN1rOHSU0hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNToyN1rOHSU0hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NzU0Mg==", "bodyText": "Reduce the total number of break and continue statements in this loop to use at most one.", "url": "https://github.com/vaadin/flow/pull/9014#discussion_r488977542", "createdAt": "2020-09-15T21:15:27Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.UncheckedIOException;\n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.polymertemplate.BundleParser;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.Pair;\n+import com.vaadin.flow.server.DependencyFilter;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.shared.ui.Dependency;\n+import com.vaadin.flow.shared.ui.LoadMode;\n+\n+import elemental.json.JsonObject;\n+\n+/**\n+ * Lit template parser implementation.\n+ * <p>\n+ * The implementation scans all JsModule annotations for the given template\n+ * class and tries to find the one that contains template definition using the\n+ * tag name.\n+ * <p>\n+ * The class is Singleton. Use {@link LitTemplateParserImpl#getInstance()} to\n+ * get its instance.\n+ *\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @see BundleParser\n+ */\n+class LitTemplateParserImpl implements LitTemplateParser {\n+\n+    private static final LitTemplateParser INSTANCE = new LitTemplateParserImpl();\n+\n+    private final HashMap<String, String> cache = new HashMap<>();\n+    private final ReentrantLock templateSourceslock = new ReentrantLock();\n+    private JsonObject jsonStats;\n+\n+    /**\n+     * The default constructor. Protected in order to prevent direct\n+     * instantiation, but not private in order to allow mocking/overrides for\n+     * testing purposes.\n+     */\n+    protected LitTemplateParserImpl() {\n+    }\n+\n+    static LitTemplateParser getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public TemplateData getTemplateContent(Class<? extends LitTemplate> clazz,\n+            String tag, VaadinService service) {\n+\n+        List<Dependency> dependencies = AnnotationReader\n+                .getAnnotationsFor(clazz, JsModule.class).stream()\n+                .map(jsModule -> new Dependency(Dependency.Type.JS_MODULE,\n+                        jsModule.value(), LoadMode.EAGER)) // load mode doesn't\n+                                                           // matter here\n+                .collect(Collectors.toList());\n+\n+        for (DependencyFilter filter : service.getDependencyFilters()) {\n+            dependencies = filter.filter(new ArrayList<>(dependencies),\n+                    service);\n+        }\n+\n+        Pair<Dependency, String> chosenDep = null;\n+\n+        for (Dependency dependency : dependencies) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f998e067224b1525d069a1ee78e040d937ae3e9"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTUxMjM3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNToyOFrOHSU0jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNToyOFrOHSU0jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NzU1MQ==", "bodyText": "Make \"parser\" transient or serializable.", "url": "https://github.com/vaadin/flow/pull/9014#discussion_r488977551", "createdAt": "2020-09-15T21:15:28Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java", "diffHunk": "@@ -17,29 +17,51 @@\n \n import java.io.Serializable;\n import java.util.Collections;\n+import java.util.Optional;\n \n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.component.littemplate.LitTemplateParser.TemplateData;\n import com.vaadin.flow.component.polymertemplate.IdCollector;\n import com.vaadin.flow.component.polymertemplate.TemplateDataAnalyzer.ParserData;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.server.VaadinService;\n \n /**\n  * Template data analyzer which produces immutable data required for template\n  * initializer using provided template class and a parser.\n  *\n  * @author Vaadin Ltd\n+ * @since\n  *\n  */\n class LitTemplateDataAnalyzer implements Serializable {\n \n     private final Class<? extends LitTemplate> templateClass;\n+    private final LitTemplateParser parser;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f998e067224b1525d069a1ee78e040d937ae3e9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTUxMjQ0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNToyOVrOHSU0lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNToyOVrOHSU0lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NzU1OQ==", "bodyText": "Remove this use of \"DEAULT_FLOW_RESOURCES_FOLDER\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/9014#discussion_r488977559", "createdAt": "2020-09-15T21:15:29Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "diffHunk": "@@ -256,8 +324,8 @@ private static String getSourceFromObject(JsonObject module,\n             // using ./ as the actual path contains\n             // \"node_modules/@vaadin/flow-frontend/\" instead of \"./\"\n             // \"target/flow-frontend/\" instead of \"./\"\n-            if (name.contains(FLOW_NPM_PACKAGE_NAME) ||\n-                    name.contains(DEAULT_FLOW_RESOURCES_FOLDER)) {\n+            if (name.contains(FLOW_NPM_PACKAGE_NAME)\n+                    || name.contains(DEAULT_FLOW_RESOURCES_FOLDER)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f998e067224b1525d069a1ee78e040d937ae3e9"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTUxMjUyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNTozMFrOHSU0oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNTozMFrOHSU0oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NzU2OA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/9014#discussion_r488977568", "createdAt": "2020-09-15T21:15:30Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java", "diffHunk": "@@ -129,9 +129,20 @@\n      * Default folder for copying front-end resources present in the classpath\n      * jars.\n      */\n-    public static final String DEAULT_FLOW_RESOURCES_FOLDER = TARGET\n+    public static final String DEFAULT_FLOW_RESOURCES_FOLDER = TARGET\n             + \"flow-frontend\";\n \n+    /**\n+     * Default folder for copying front-end resources present in the classpath\n+     * jars.\n+     * @deprecated This is deprecated due to a typo.\n+     *             Use DEFAULT_FLOW_RESOURCES_FOLDER instead.\n+     * @see #DEFAULT_FLOW_RESOURCES_FOLDER\n+     */\n+    @Deprecated\n+    public static final String DEAULT_FLOW_RESOURCES_FOLDER =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f998e067224b1525d069a1ee78e040d937ae3e9"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTUxMjU4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/IdCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNTozMVrOHSU0pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNTozMVrOHSU0pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NzU3NQ==", "bodyText": "Call \"tagName.isPresent()\" before accessing the value.", "url": "https://github.com/vaadin/flow/pull/9014#discussion_r488977575", "createdAt": "2020-09-15T21:15:31Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/IdCollector.java", "diffHunk": "@@ -121,19 +126,21 @@ private void collectedInjectedId(Field field,\n      * @return <code>false</code> if the mapping did not pass validation,\n      *         <code>true</code> otherwise\n      */\n-    private boolean addTagName(String id, Field field) {\n+    private boolean collectElementData(String id, Field field) {\n         idByField.put(field, id);\n         if (templateRoot != null) {\n             // The template is available for parsing so check up front if the id\n             // exists\n-            Optional<String> tagName = Optional\n-                    .ofNullable(templateRoot.getElementById(id))\n+            Optional<Element> element = Optional\n+                    .ofNullable(templateRoot.getElementById(id));\n+            Optional<String> tagName = element\n                     .map(org.jsoup.nodes.Element::tagName);\n-            if (tagName.isPresent()) {\n+            if (element.isPresent()) {\n                 tagById.put(id, tagName.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f998e067224b1525d069a1ee78e040d937ae3e9"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3053, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}