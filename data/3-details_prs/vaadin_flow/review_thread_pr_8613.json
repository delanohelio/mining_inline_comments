{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MTAxMTE3", "number": 8613, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo1NTo0NlrOEIUTSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOTowMTowNlrOEJDxDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTU2NjgzOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo1NTo0NlrOGoNJFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo1NTo0NlrOGoNJFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxMTU0MA==", "bodyText": "Cast one of the operands of this subtraction operation to a \"long\".", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r444811540", "createdAt": "2020-06-24T10:55:46Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.function.SerializableBiFunction;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializableConsumer;\n+import com.vaadin.flow.function.SerializableFunction;\n+import com.vaadin.flow.function.SerializablePredicate;\n+import com.vaadin.flow.function.SerializableSupplier;\n+import com.vaadin.flow.function.ValueProvider;\n+\n+/**\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n+ *\n+ * @param <T>\n+ *         data type\n+ */\n+public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n+        implements ListDataView<T, AbstractListDataView<T>> {\n+\n+    private static final String COLLECTION_TYPE_ERROR_MESSAGE_PATTERN =\n+            \"DataProvider collection '%s' is not a list.\";\n+\n+    private static final String NULL_COLLECTION_ERROR_MESSAGE =\n+            \"Items collection cannot be null\";\n+\n+    private static final String NULL_ITEM_ERROR_MESSAGE =\n+            \"Item cannot be null\";\n+\n+    /**\n+     * Creates a new instance of {@link AbstractListDataView} subclass\n+     * and verifies the passed data provider is compatible with this\n+     * data view implementation.\n+     *\n+     * @param dataProviderSupplier\n+     *         supplier from which the DataProvider can be gotten\n+     * @param component\n+     *         the component that the dataView is bound to\n+     */\n+    public AbstractListDataView(\n+            SerializableSupplier<DataProvider<T, ?>> dataProviderSupplier,\n+            Component component) {\n+        super(dataProviderSupplier, component);\n+    }\n+\n+    @Override\n+    public Optional<T> getNextItem(T item) {\n+        int index = getItemIndex(item);\n+        if (index < 0) {\n+            return Optional.empty();\n+        }\n+        return getItems().skip(index + 1).findFirst();\n+    }\n+\n+    @Override\n+    public Optional<T> getPreviousItem(T item) {\n+        int index = getItemIndex(item);\n+        if (index <= 0) {\n+            return Optional.empty();\n+        }\n+        return getItems().skip(index - 1).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5227aef6dd29ef49e0d826b10ce69a50f4e4425c"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTU2Njg5OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo1NTo0N1rOGoNJHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo1NTo0N1rOGoNJHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxMTU0OQ==", "bodyText": "Cast one of the operands of this addition operation to a \"long\".", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r444811549", "createdAt": "2020-06-24T10:55:47Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.function.SerializableBiFunction;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializableConsumer;\n+import com.vaadin.flow.function.SerializableFunction;\n+import com.vaadin.flow.function.SerializablePredicate;\n+import com.vaadin.flow.function.SerializableSupplier;\n+import com.vaadin.flow.function.ValueProvider;\n+\n+/**\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n+ *\n+ * @param <T>\n+ *         data type\n+ */\n+public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n+        implements ListDataView<T, AbstractListDataView<T>> {\n+\n+    private static final String COLLECTION_TYPE_ERROR_MESSAGE_PATTERN =\n+            \"DataProvider collection '%s' is not a list.\";\n+\n+    private static final String NULL_COLLECTION_ERROR_MESSAGE =\n+            \"Items collection cannot be null\";\n+\n+    private static final String NULL_ITEM_ERROR_MESSAGE =\n+            \"Item cannot be null\";\n+\n+    /**\n+     * Creates a new instance of {@link AbstractListDataView} subclass\n+     * and verifies the passed data provider is compatible with this\n+     * data view implementation.\n+     *\n+     * @param dataProviderSupplier\n+     *         supplier from which the DataProvider can be gotten\n+     * @param component\n+     *         the component that the dataView is bound to\n+     */\n+    public AbstractListDataView(\n+            SerializableSupplier<DataProvider<T, ?>> dataProviderSupplier,\n+            Component component) {\n+        super(dataProviderSupplier, component);\n+    }\n+\n+    @Override\n+    public Optional<T> getNextItem(T item) {\n+        int index = getItemIndex(item);\n+        if (index < 0) {\n+            return Optional.empty();\n+        }\n+        return getItems().skip(index + 1).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5227aef6dd29ef49e0d826b10ce69a50f4e4425c"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTA4MzI1OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzozNjoyNFrOGpWyzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzozNjoyNFrOGpWyzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxODI1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Data will use set filters and sorting.\n          \n          \n            \n                 * Data is filtered and sorted the same way as in the component.", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446018254", "createdAt": "2020-06-26T07:36:24Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTExNDc3OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo0NzowMlrOGpXF3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo0NzowMlrOGpXF3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMzEzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get the full data size with filters if any set.\n          \n          \n            \n                 * Gets the size of the data source with filters applied if any are set.", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446023133", "createdAt": "2020-06-26T07:47:02Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.\n+     *\n+     * @return filtered and sorted data set\n+     */\n+    Stream<T> getItems();\n+\n+    /**\n+     * Get the full data size with filters if any set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTExNzU0OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo0Nzo1OVrOGpXHtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo0Nzo1OVrOGpXHtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMzYwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 */\n          \n          \n            \n                 * @see #addSizeChangeListener(ComponentEventListener<SizeChangeEvent<?>>)\n          \n          \n            \n                 */", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446023607", "createdAt": "2020-06-26T07:47:59Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.\n+     *\n+     * @return filtered and sorted data set\n+     */\n+    Stream<T> getItems();\n+\n+    /**\n+     * Get the full data size with filters if any set.\n+     *\n+     * @return filtered data size\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTEyODYxOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo1MTozOFrOGpXOxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo1MTozOFrOGpXOxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNTQxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Sets identity provider to be used for getting item identifier and\n          \n          \n            \n                 * Sets an identifier provider, which returns an identifier for the given item.\n          \n          \n            \n                 * The identified is used for comparing the equality of items. Usage example:\n          \n          \n            \n                 * {@code dataView.setIdentifiedProvider(Item::getId);}.\n          \n          \n            \n                 *", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446025412", "createdAt": "2020-06-26T07:51:38Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.\n+     *\n+     * @return filtered and sorted data set\n+     */\n+    Stream<T> getItems();\n+\n+    /**\n+     * Get the full data size with filters if any set.\n+     *\n+     * @return filtered data size\n+     */\n+    int getSize();\n+\n+    /**\n+     * Check if item is in the current data.\n+     * Item may be filtered out or for lazy data not in the currently loaded\n+     * making it un-available.\n+     * <p>\n+     * By default, {@code equals} method implementation of the item is used\n+     * for identity check. If a custom data provider is used,\n+     * then the {@link DataProvider#getId(Object)} method is used instead.\n+     * Item's custom identity can be set up with a\n+     * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n+     *\n+     * @param item\n+     *         item to search for\n+     * @return true if item is found in the available data\n+     *\n+     * @see #setIdentifierProvider(IdentifierProvider)\n+     */\n+    boolean contains(T item);\n+\n+    /**\n+     * Add a size change listener that is fired when the data set size changes.\n+     * This can happen for instance when filtering the data set.\n+     * <p>\n+     * Size change listener is bound to the component and will be retained even\n+     * if the data changes by setting of a new items or {@link DataProvider} to\n+     * component.\n+     *\n+     * @param listener\n+     *         size change listener to register\n+     * @return registration for removing the listener\n+     */\n+    Registration addSizeChangeListener(\n+            ComponentEventListener<SizeChangeEvent<?>> listener);\n+\n+    /**\n+     * Sets identity provider to be used for getting item identifier and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTEzMTIyOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo1MjoyNVrOGpXQaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo1MjoyNVrOGpXQaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNTgzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * compare the items using that identifier.\n          \n      \n    \n    \n  \n\nThere is nothing \"compared\" as to me that refers to sorting.", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446025832", "createdAt": "2020-06-26T07:52:25Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.\n+     *\n+     * @return filtered and sorted data set\n+     */\n+    Stream<T> getItems();\n+\n+    /**\n+     * Get the full data size with filters if any set.\n+     *\n+     * @return filtered data size\n+     */\n+    int getSize();\n+\n+    /**\n+     * Check if item is in the current data.\n+     * Item may be filtered out or for lazy data not in the currently loaded\n+     * making it un-available.\n+     * <p>\n+     * By default, {@code equals} method implementation of the item is used\n+     * for identity check. If a custom data provider is used,\n+     * then the {@link DataProvider#getId(Object)} method is used instead.\n+     * Item's custom identity can be set up with a\n+     * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n+     *\n+     * @param item\n+     *         item to search for\n+     * @return true if item is found in the available data\n+     *\n+     * @see #setIdentifierProvider(IdentifierProvider)\n+     */\n+    boolean contains(T item);\n+\n+    /**\n+     * Add a size change listener that is fired when the data set size changes.\n+     * This can happen for instance when filtering the data set.\n+     * <p>\n+     * Size change listener is bound to the component and will be retained even\n+     * if the data changes by setting of a new items or {@link DataProvider} to\n+     * component.\n+     *\n+     * @param listener\n+     *         size change listener to register\n+     * @return registration for removing the listener\n+     */\n+    Registration addSizeChangeListener(\n+            ComponentEventListener<SizeChangeEvent<?>> listener);\n+\n+    /**\n+     * Sets identity provider to be used for getting item identifier and\n+     * compare the items using that identifier.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTE1NDAxOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowMDoxNVrOGpXe4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowMDoxNVrOGpXe4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyOTUzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Interface that defines methods for setting data.\n          \n          \n            \n             * A mixin interface for components that accept setting a data source\n          \n          \n            \n             * of the generic types {@link DataProvider} and {@link InMemoryDataProvider}.\n          \n          \n            \n             * The methods return a {@link DataView} which has the generic API\n          \n          \n            \n             * for getting information on the data.", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446029538", "createdAt": "2020-06-26T08:00:15Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTE1NDgxOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowMDoyOVrOGpXfYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowMDoyOVrOGpXfYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyOTY2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This will return a {@link DataView}.", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446029666", "createdAt": "2020-06-26T08:00:29Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTE1OTg3OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowMjoyMFrOGpXitQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowMjoyMFrOGpXitQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMDUxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Set a generic data provider for the component to use.\n          \n          \n            \n                 * Set a generic data provider for the component to use and\n          \n          \n            \n                 * returns the base {@link DataView} that provides API to get\n          \n          \n            \n                 * information on the data.", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446030517", "createdAt": "2020-06-26T08:02:20Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTE2NTMxOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowNDoxOFrOGpXmIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowNDoxOFrOGpXmIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMTM5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * It is suggested to use a more specific target from {@link\n          \n          \n            \n                 * This method should be used only when the data provider type\n          \n          \n            \n                 * is not either {@link ListDataProvider} or {@link LBackendDataProvider}.", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446031395", "createdAt": "2020-06-26T08:04:18Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.\n+     * <p>\n+     * It is suggested to use a more specific target from {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTE2NjIzOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowNDozNVrOGpXmsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowNDozNVrOGpXmsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMTUzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * HasListDataView} or {@link HasLazyDataView}", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446031536", "createdAt": "2020-06-26T08:04:35Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.\n+     * <p>\n+     * It is suggested to use a more specific target from {@link\n+     * HasListDataView} or {@link HasLazyDataView}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTE3MTM5OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowNjozMFrOGpXqNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowNjozMFrOGpXqNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMjQzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return DataView instance\n          \n          \n            \n                 * @return DataView providing information on the data", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446032436", "createdAt": "2020-06-26T08:06:30Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.\n+     * <p>\n+     * It is suggested to use a more specific target from {@link\n+     * HasListDataView} or {@link HasLazyDataView}\n+     *\n+     * @param dataProvider\n+     *         DataProvider instance to use\n+     * @return DataView instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTE3Mjg1OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowNzowMVrOGpXrJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowNzowMVrOGpXrJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMjY3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return DataView instance\n          \n          \n            \n                 * @return DataView providing information on the data", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446032676", "createdAt": "2020-06-26T08:07:01Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.\n+     * <p>\n+     * It is suggested to use a more specific target from {@link\n+     * HasListDataView} or {@link HasLazyDataView}\n+     *\n+     * @param dataProvider\n+     *         DataProvider instance to use\n+     * @return DataView instance\n+     */\n+    V setDataSource(DataProvider<T, ?> dataProvider);\n+\n+    /**\n+     * Sets an InMemory data provider for the component to use.\n+     * <p>\n+     * Note! Using a {@link ListDataProvider} instead of a {@link\n+     * InMemoryDataProvider} is recommended to get access to {@link\n+     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     *\n+     * @param dataProvider\n+     *         InMemoryDataProvider to use\n+     * @return DataView instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTIyNTg2OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODoyNDoxOVrOGpYMRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODoyNDoxOVrOGpYMRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0MTE1OA==", "bodyText": "This will make no sense but including it now to not get merge conflicts from the next PR", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446041158", "createdAt": "2020-06-26T08:24:19Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting in memory data.\n+ * This will return a {@link LazyDataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasLazyDataView<T, V extends LazyDataView<T>> extends", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fdf79714001ebbfd1731287f766742114580de9"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTI1ODUyOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODozNDozOFrOGpYhVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODozNDozOFrOGpYhVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0NjU0OQ==", "bodyText": "This makes no sense in this PR but keeping it as would get merge conflicts otherwise in the next PR", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446046549", "createdAt": "2020-06-26T08:34:38Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * DataView for lazy loaded data.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface LazyDataView<T> extends DataView<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fdf79714001ebbfd1731287f766742114580de9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTM0MzE1OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOTowMTowMVrOGpZViA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOTowMTowMVrOGpZViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1OTkxMg==", "bodyText": "Not used", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446059912", "createdAt": "2020-06-26T09:01:01Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -261,6 +266,51 @@ public void confirmUpdate(int updateId) {\n         };\n     }\n \n+    /**\n+     * This is the latest DataProvider size informed to the client or fetched\n+     * from the DataProvider if client data has not been sent.\n+     *\n+     * @return size of available data\n+     */\n+    public int getDataSize() {\n+        if (resendEntireRange || assumeEmptyClient) {\n+            return getDataProviderSize();\n+        }\n+        return assumedSize;\n+    }\n+\n+    /**\n+     * Get the active keys and order on active data on the client.\n+     *\n+     * @return list of active client data as ordered keys\n+     */\n+    public List<String> getActiveKeyOrdering() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fdf79714001ebbfd1731287f766742114580de9"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTM0MzQ5OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOTowMTowNlrOGpZVuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOTowMTowNlrOGpZVuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1OTk2MQ==", "bodyText": "Not used", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446059961", "createdAt": "2020-06-26T09:01:06Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -261,6 +266,51 @@ public void confirmUpdate(int updateId) {\n         };\n     }\n \n+    /**\n+     * This is the latest DataProvider size informed to the client or fetched\n+     * from the DataProvider if client data has not been sent.\n+     *\n+     * @return size of available data\n+     */\n+    public int getDataSize() {\n+        if (resendEntireRange || assumeEmptyClient) {\n+            return getDataProviderSize();\n+        }\n+        return assumedSize;\n+    }\n+\n+    /**\n+     * Get the active keys and order on active data on the client.\n+     *\n+     * @return list of active client data as ordered keys\n+     */\n+    public List<String> getActiveKeyOrdering() {\n+        return Collections.unmodifiableList(activeKeyOrder);\n+    }\n+\n+    /**\n+     * Get the current client item range.\n+     *\n+     * @return range of items on client\n+     */\n+    public Range getRequestedRange() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fdf79714001ebbfd1731287f766742114580de9"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3294, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}