{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NjA4Mjgw", "number": 9295, "title": "feat: Create Flow plugins for webpack", "bodyText": "Moved stats file handling to a custom plugin.\nAdded feature for copying custom Flow plugins\nfor use with webpack.\nFixes #9283", "createdAt": "2020-11-03T09:41:17Z", "url": "https://github.com/vaadin/flow/pull/9295", "merged": true, "mergeCommit": {"oid": "526792ad8bc7b481fa24e37fff034a5963a04616"}, "closed": true, "closedAt": "2020-11-05T13:34:06Z", "author": {"login": "caalador"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY165XgH2gAyNTE0NjA4MjgwOjJjM2Y1N2NhODc2MmIzZmNlZjFhMDY4NzRjMWM3ZGUyNjZmNTA2MzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZiPF-AFqTUyNDI0OTcyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2c3f57ca8762b3fcef1a06874c1c7de266f50634", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/2c3f57ca8762b3fcef1a06874c1c7de266f50634", "committedDate": "2020-11-03T09:40:43Z", "message": "feat: Create Flow plugins for webpack\n\nMoved stats file handling to a custom plugin.\nAdded feature for copying custom Flow plugins\nfor use with webpack.\n\nFixes #9283"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8df2ac41978cd59f96662f0479a3f299face0e92", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/8df2ac41978cd59f96662f0479a3f299face0e92", "committedDate": "2020-11-03T10:24:07Z", "message": "Remove unused variable that else breaks pnpm tests if used"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6363817fe7d3c283c7529674ba6acf41907e733d", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/6363817fe7d3c283c7529674ba6acf41907e733d", "committedDate": "2020-11-03T12:28:38Z", "message": "Use correct return call."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91c9c8f7e4273007bf066edd62c1975e34a8d9df", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/91c9c8f7e4273007bf066edd62c1975e34a8d9df", "committedDate": "2020-11-04T05:09:08Z", "message": "Remove faulty path separator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTQ2NzU1", "url": "https://github.com/vaadin/flow/pull/9295#pullrequestreview-523146755", "createdAt": "2020-11-04T08:46:53Z", "commit": {"oid": "bde433b39f8ce52dc9147c5dfa2651872517b8e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0Njo1M1rOHtOLJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODo0Njo1M1rOHtOLJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MDE5OA==", "bodyText": "This block of commented-out lines of code should be removed.", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517180198", "createdAt": "2020-11-04T08:46:53Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\"Couldn't locate webpack-plugins.json\");\n+                return Collections.emptyList();\n+            }\n+\n+            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n+            for (int i = 0; i < plugins.length(); i++) {\n+                pluginsToInstall.add(plugins.getString(i));\n+            }\n+            return pluginsToInstall;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(\n+                \"Couldn't load webpack-plugins.json file\", ioe);\n+        }\n+    }\n+\n+    private void generatePluginFiles(String pluginName) throws IOException {\n+        // Get the target folder where the plugin should be installed to\n+        File pluginTargetFolder = new File(nodeModulesFolder,\n+            \"@vaadin/\" + pluginName);\n+\n+        final String pluginFolder = \"plugins/\" + pluginName;\n+        final JsonObject json = getJsonFile(pluginFolder + \"/package.json\");\n+        if (json == null) {\n+            log().error(\"Couldn't locate files for plugin '{}'\", pluginName);\n+            return;\n+        }\n+\n+        // Validate installed version and don't override if same\n+        if (pluginTargetFolder.exists() && new File(pluginTargetFolder,\n+            \"package.json\").exists()) {\n+            String packageFile = FileUtils\n+                .readFileToString(new File(pluginTargetFolder, \"package.json\"),\n+                    StandardCharsets.UTF_8);\n+            final FrontendVersion packageVersion = new FrontendVersion(\n+                Json.parse(packageFile).getString(\"version\"));\n+            FrontendVersion pluginVersion = new FrontendVersion(\n+                json.getString(\"version\"));\n+            if (packageVersion.isEqualTo(pluginVersion)) {\n+                log().debug(\n+                    \"Skipping install of {} for version {} already installed\",\n+                    pluginName, pluginVersion.getFullVersion());\n+                return;\n+            }\n+        }\n+\n+        // Create target folder if necessary\n+        FileUtils.forceMkdir(pluginTargetFolder);\n+\n+        // copy only files named in package.json { files }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bde433b39f8ce52dc9147c5dfa2651872517b8e6"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "committedDate": "2020-11-04T09:03:54Z", "message": "Make getJsonFile less error prone to typos"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bde433b39f8ce52dc9147c5dfa2651872517b8e6", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/bde433b39f8ce52dc9147c5dfa2651872517b8e6", "committedDate": "2020-11-04T06:58:44Z", "message": "Make getJsonFile less error prone to typos"}, "afterCommit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/0edbdc41ed86ed4c232b1250b2f6fa78d6a42019", "committedDate": "2020-11-04T09:03:54Z", "message": "Make getJsonFile less error prone to typos"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjY1MzI1", "url": "https://github.com/vaadin/flow/pull/9295#pullrequestreview-523265325", "createdAt": "2020-11-04T11:15:40Z", "commit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMToxNTo0MFrOHtTsqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjo0Mjo1M1rOHtWdGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3MDY5Nw==", "bodyText": "Just noting that In most cases for now means always unless we would have some ideas on when/why we would develop a plugin that would be optional to use and would be applied to the  webpack.config.js", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517270697", "createdAt": "2020-11-04T11:15:40Z", "author": {"login": "pleku"}, "path": "flow-server/README.md", "diffHunk": "@@ -0,0 +1,79 @@\n+## Flow Webpack plugins\n+\n+Flow now uses webpack plugins to make the `webpack.generated.js` cleaner and easier to extend\n+without cluttering the file and making it long and complex.\n+\n+The files get installed with the task `TaskInstallWebpackPlugins` which reads the `webpack-plugins.json`\n+in from `src/main/resources/plugins` and installs the plugins named here e.g.\n+\n+```json\n+{\n+  \"plugins\": [\n+    \"stats-plugin\"\n+  ]\n+}\n+```\n+\n+The plugin itself should also be contained in `src/main/resources/plugins` with the\n+folder name being the same as the plugin name.\n+\n+For stats-plugin this means it should be located in `src/main/resources/plugins/stats-plugin`.\n+\n+The plugin folder needs to contain the plugin javascript files plus a package.json with at least the fields\n+`version`, `main`, `files` filled where:\n+  * `version` is the semver version for the plugin. \n+  (Plugin will not be updated if the same version already exists)\n+  * `main` depicts the main js file for the plugin.\n+  * `files` contains all files the plugin needs.\n+   (only these files will be copied)\n+\n+The full information would be preferred:\n+\n+```json\n+{\n+  \"description\": \"stats-plugin\",\n+  \"keywords\": [\n+    \"plugin\"\n+  ],\n+  \"repository\": \"vaadin/flow\",\n+  \"name\": \"@vaadin/stats-plugin\",\n+  \"version\": \"1.0.0\",\n+  \"main\": \"stats-plugin.js\",\n+  \"author\": \"Vaadin Ltd\",\n+  \"license\": \"Apache-2.0\",\n+  \"bugs\": {\n+    \"url\": \"https://github.com/vaadin/flow/issues\"\n+  },\n+  \"files\": [\n+    \"stats-plugin.js\"\n+  ]\n+}\n+```\n+\n+For creating a plugin see [Writing a plugin](https://webpack.js.org/contribute/writing-a-plugin/)\n+\n+## Using a Flow webpack plugin\n+\n+The flow plugins get installed to `node_modules/@vaadin` which means that using them we should use the for `@vaadin/${plugin-name}`\n+\n+In most cases the plugin should be added to `webpack.generated.js` as they are for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3MjQ0NA==", "bodyText": "Should this be in flow-server or somewhere \"closer\" to the plugin files instead ? Like src/main/resources/plugins", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517272444", "createdAt": "2020-11-04T11:18:53Z", "author": {"login": "pleku"}, "path": "flow-server/README.md", "diffHunk": "@@ -0,0 +1,79 @@\n+## Flow Webpack plugins", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3OTA1Mg==", "bodyText": "protected? missing javadocs then", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517279052", "createdAt": "2020-11-04T11:31:04Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4MzQwMw==", "bodyText": "I don't know when this could happen, but could maybe expose the impact \"... Webpack plugins for Flow will not be installed to node_modules/@vaddin\"", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517283403", "createdAt": "2020-11-04T11:39:41Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\"Couldn't locate webpack-plugins.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MTQzNA==", "bodyText": "Is there some specific reason to why this is here instead of hardcoding the expected plugin names to the Java code ? Do we need this resource outside of flow-server Java code ? Just curious, I think the code might be a little bit simpler (less code) without this", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517291434", "createdAt": "2020-11-04T11:55:30Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/resources/plugins/webpack-plugins.json", "diffHunk": "@@ -0,0 +1,5 @@\n+{\n+  \"plugins\": [\n+    \"stats-plugin\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MjM4OQ==", "bodyText": "\"Couldn't locate package.json ...\" instead of files ?\nAnd adding the impact \"Not installing the plugin-name plugin.\"", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517292389", "createdAt": "2020-11-04T11:57:19Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\"Couldn't locate webpack-plugins.json\");\n+                return Collections.emptyList();\n+            }\n+\n+            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n+            for (int i = 0; i < plugins.length(); i++) {\n+                pluginsToInstall.add(plugins.getString(i));\n+            }\n+            return pluginsToInstall;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(\n+                \"Couldn't load webpack-plugins.json file\", ioe);\n+        }\n+    }\n+\n+    private void generatePluginFiles(String pluginName) throws IOException {\n+        // Get the target folder where the plugin should be installed to\n+        File pluginTargetFolder = new File(nodeModulesFolder,\n+            \"@vaadin/\" + pluginName);\n+\n+        final String pluginFolder = \"plugins/\" + pluginName + \"/\";\n+        final JsonObject json = getJsonFile(pluginFolder + PACKAGE_JSON);\n+        if (json == null) {\n+            log().error(\"Couldn't locate files for plugin '{}'\", pluginName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDQ4OQ==", "bodyText": "Just noting that I was a bit confused with the code for a moment since the variable names are both folder but other is String and other is a File", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517294489", "createdAt": "2020-11-04T12:01:16Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\"Couldn't locate webpack-plugins.json\");\n+                return Collections.emptyList();\n+            }\n+\n+            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n+            for (int i = 0; i < plugins.length(); i++) {\n+                pluginsToInstall.add(plugins.getString(i));\n+            }\n+            return pluginsToInstall;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(\n+                \"Couldn't load webpack-plugins.json file\", ioe);\n+        }\n+    }\n+\n+    private void generatePluginFiles(String pluginName) throws IOException {\n+        // Get the target folder where the plugin should be installed to\n+        File pluginTargetFolder = new File(nodeModulesFolder,\n+            \"@vaadin/\" + pluginName);\n+\n+        final String pluginFolder = \"plugins/\" + pluginName + \"/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwNzYyMg==", "bodyText": "nitpicking, but shouldn't this be getResourceUrl instead ?", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517307622", "createdAt": "2020-11-04T12:26:58Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\"Couldn't locate webpack-plugins.json\");\n+                return Collections.emptyList();\n+            }\n+\n+            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n+            for (int i = 0; i < plugins.length(); i++) {\n+                pluginsToInstall.add(plugins.getString(i));\n+            }\n+            return pluginsToInstall;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(\n+                \"Couldn't load webpack-plugins.json file\", ioe);\n+        }\n+    }\n+\n+    private void generatePluginFiles(String pluginName) throws IOException {\n+        // Get the target folder where the plugin should be installed to\n+        File pluginTargetFolder = new File(nodeModulesFolder,\n+            \"@vaadin/\" + pluginName);\n+\n+        final String pluginFolder = \"plugins/\" + pluginName + \"/\";\n+        final JsonObject json = getJsonFile(pluginFolder + PACKAGE_JSON);\n+        if (json == null) {\n+            log().error(\"Couldn't locate files for plugin '{}'\", pluginName);\n+            return;\n+        }\n+\n+        // Validate installed version and don't override if same\n+        if (pluginTargetFolder.exists() && new File(pluginTargetFolder,\n+            PACKAGE_JSON).exists()) {\n+            String packageFile = FileUtils\n+                .readFileToString(new File(pluginTargetFolder, PACKAGE_JSON),\n+                    StandardCharsets.UTF_8);\n+            final FrontendVersion packageVersion = new FrontendVersion(\n+                Json.parse(packageFile).getString(\"version\"));\n+            FrontendVersion pluginVersion = new FrontendVersion(\n+                json.getString(\"version\"));\n+            if (packageVersion.isEqualTo(pluginVersion)) {\n+                log().debug(\n+                    \"Skipping install of {} for version {} already installed\",\n+                    pluginName, pluginVersion.getFullVersion());\n+                return;\n+            }\n+        }\n+\n+        // Create target folder if necessary\n+        FileUtils.forceMkdir(pluginTargetFolder);\n+\n+        // copy only files named in package.json { files }\n+        final JsonArray files = json.getArray(\"files\");\n+        for (int i = 0; i < files.length(); i++) {\n+            final String file = files.getString(i);\n+            FileUtils.copyURLToFile(getUrlResource(pluginFolder + file),\n+                new File(pluginTargetFolder, file));\n+        }\n+        // copy package.json to plugin directory\n+        FileUtils.copyURLToFile(getUrlResource(pluginFolder + PACKAGE_JSON),\n+            new File(pluginTargetFolder, PACKAGE_JSON));\n+    }\n+\n+    private JsonObject getJsonFile(String jsonFilePath) throws IOException {\n+        final URL urlResource = getUrlResource(jsonFilePath);\n+        if (urlResource == null) {\n+            return null;\n+        }\n+        File pluginPackageJson = new File(urlResource.getFile());\n+        String jsonString;\n+        if (!pluginPackageJson.exists()) {\n+            try (InputStream resourceAsStream = this.getClass().getClassLoader()\n+                .getResourceAsStream(jsonFilePath)) {\n+                if (resourceAsStream != null) {\n+                    jsonString = FrontendUtils.streamToString(resourceAsStream);\n+                } else {\n+                    return null;\n+                }\n+            }\n+        } else {\n+            jsonString = FileUtils.readFileToString(pluginPackageJson, UTF_8);\n+        }\n+        return Json.parse(jsonString);\n+    }\n+\n+    private URL getUrlResource(String resource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwODM5MQ==", "bodyText": "nitpicking: packageJson  would be clearer name", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517308391", "createdAt": "2020-11-04T12:28:27Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\"Couldn't locate webpack-plugins.json\");\n+                return Collections.emptyList();\n+            }\n+\n+            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n+            for (int i = 0; i < plugins.length(); i++) {\n+                pluginsToInstall.add(plugins.getString(i));\n+            }\n+            return pluginsToInstall;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(\n+                \"Couldn't load webpack-plugins.json file\", ioe);\n+        }\n+    }\n+\n+    private void generatePluginFiles(String pluginName) throws IOException {\n+        // Get the target folder where the plugin should be installed to\n+        File pluginTargetFolder = new File(nodeModulesFolder,\n+            \"@vaadin/\" + pluginName);\n+\n+        final String pluginFolder = \"plugins/\" + pluginName + \"/\";\n+        final JsonObject json = getJsonFile(pluginFolder + PACKAGE_JSON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxMDIyMw==", "bodyText": "Wrong variable name left after refactoring this method to be reused ? Should probably just be  jsonFile", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517310223", "createdAt": "2020-11-04T12:32:00Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {\n+        try {\n+            final JsonObject jsonFile = getJsonFile(\n+                \"plugins/webpack-plugins.json\");\n+            if (jsonFile == null) {\n+                log().error(\"Couldn't locate webpack-plugins.json\");\n+                return Collections.emptyList();\n+            }\n+\n+            final JsonArray plugins = jsonFile.getArray(\"plugins\");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n+            for (int i = 0; i < plugins.length(); i++) {\n+                pluginsToInstall.add(plugins.getString(i));\n+            }\n+            return pluginsToInstall;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(\n+                \"Couldn't load webpack-plugins.json file\", ioe);\n+        }\n+    }\n+\n+    private void generatePluginFiles(String pluginName) throws IOException {\n+        // Get the target folder where the plugin should be installed to\n+        File pluginTargetFolder = new File(nodeModulesFolder,\n+            \"@vaadin/\" + pluginName);\n+\n+        final String pluginFolder = \"plugins/\" + pluginName + \"/\";\n+        final JsonObject json = getJsonFile(pluginFolder + PACKAGE_JSON);\n+        if (json == null) {\n+            log().error(\"Couldn't locate files for plugin '{}'\", pluginName);\n+            return;\n+        }\n+\n+        // Validate installed version and don't override if same\n+        if (pluginTargetFolder.exists() && new File(pluginTargetFolder,\n+            PACKAGE_JSON).exists()) {\n+            String packageFile = FileUtils\n+                .readFileToString(new File(pluginTargetFolder, PACKAGE_JSON),\n+                    StandardCharsets.UTF_8);\n+            final FrontendVersion packageVersion = new FrontendVersion(\n+                Json.parse(packageFile).getString(\"version\"));\n+            FrontendVersion pluginVersion = new FrontendVersion(\n+                json.getString(\"version\"));\n+            if (packageVersion.isEqualTo(pluginVersion)) {\n+                log().debug(\n+                    \"Skipping install of {} for version {} already installed\",\n+                    pluginName, pluginVersion.getFullVersion());\n+                return;\n+            }\n+        }\n+\n+        // Create target folder if necessary\n+        FileUtils.forceMkdir(pluginTargetFolder);\n+\n+        // copy only files named in package.json { files }\n+        final JsonArray files = json.getArray(\"files\");\n+        for (int i = 0; i < files.length(); i++) {\n+            final String file = files.getString(i);\n+            FileUtils.copyURLToFile(getUrlResource(pluginFolder + file),\n+                new File(pluginTargetFolder, file));\n+        }\n+        // copy package.json to plugin directory\n+        FileUtils.copyURLToFile(getUrlResource(pluginFolder + PACKAGE_JSON),\n+            new File(pluginTargetFolder, PACKAGE_JSON));\n+    }\n+\n+    private JsonObject getJsonFile(String jsonFilePath) throws IOException {\n+        final URL urlResource = getUrlResource(jsonFilePath);\n+        if (urlResource == null) {\n+            return null;\n+        }\n+        File pluginPackageJson = new File(urlResource.getFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxNTg2Ng==", "bodyText": "wat - it is now executed but no changes to the actual test ? \ud83d\ude05", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517315866", "createdAt": "2020-11-04T12:42:53Z", "author": {"login": "pleku"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java", "diffHunk": "@@ -217,7 +216,7 @@ public void writeLocalHash(String hash) throws IOException {\n     }\n \n     @Test\n-    public void runNpmInstall_dirContainsOnlyFlowNpmPackage_npmInstallIsNotExecuted()\n+    public void runNpmInstall_dirContainsOnlyFlowNpmPackage_npmInstallIsExecuted()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fdb603bb3115ef77d9d01ee0f70e574f01ceb96", "author": {"user": {"login": "caalador", "name": null}}, "url": "https://github.com/vaadin/flow/commit/8fdb603bb3115ef77d9d01ee0f70e574f01ceb96", "committedDate": "2020-11-04T13:04:40Z", "message": "Update names and add more information to error logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzQ1OTQ3", "url": "https://github.com/vaadin/flow/pull/9295#pullrequestreview-523345947", "createdAt": "2020-11-04T13:13:13Z", "commit": {"oid": "8fdb603bb3115ef77d9d01ee0f70e574f01ceb96"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzoxMzoxM1rOHtXeeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzoyNzoxNVrOHtX-_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMzMjYwMg==", "bodyText": "But it is needed as protected ?", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517332602", "createdAt": "2020-11-04T13:13:13Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallWebpackPlugins.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Task that installs any Flow webpack plugins into node_modules/@vaadin for\n+ * use with webpack compilation.\n+ * <p>\n+ * This should preferably be executed after npm installation to not make it skip\n+ * or have the plugins deleted by {@link TaskRunNpmInstall}.\n+ *\n+ * @since\n+ */\n+public class TaskInstallWebpackPlugins implements FallibleCommand {\n+\n+    private File nodeModulesFolder;\n+\n+    /**\n+     * Copy Flow webpack plugins into the given nodeModulesFolder.\n+     *\n+     * @param nodeModulesFolder\n+     *     node_modules folder to copy files to\n+     */\n+    public TaskInstallWebpackPlugins(File nodeModulesFolder) {\n+        this.nodeModulesFolder = nodeModulesFolder;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        getPlugins().forEach(plugin -> {\n+            try {\n+                generatePluginFiles(plugin);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(\n+                    \"Installation of Flow webpack plugin '\" + plugin\n+                        + \"' failed\", ioe);\n+            }\n+        });\n+    }\n+\n+    protected List<String> getPlugins() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3OTA1Mg=="}, "originalCommit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0MDkyNQ==", "bodyText": "Ok. I don't think it is significant enough to warrant the change", "url": "https://github.com/vaadin/flow/pull/9295#discussion_r517340925", "createdAt": "2020-11-04T13:27:15Z", "author": {"login": "pleku"}, "path": "flow-server/src/main/resources/plugins/webpack-plugins.json", "diffHunk": "@@ -0,0 +1,5 @@\n+{\n+  \"plugins\": [\n+    \"stats-plugin\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MTQzNA=="}, "originalCommit": {"oid": "0edbdc41ed86ed4c232b1250b2f6fa78d6a42019"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MjQ5NzI2", "url": "https://github.com/vaadin/flow/pull/9295#pullrequestreview-524249726", "createdAt": "2020-11-05T13:18:36Z", "commit": {"oid": "8fdb603bb3115ef77d9d01ee0f70e574f01ceb96"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4768, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}