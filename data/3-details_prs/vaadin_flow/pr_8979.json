{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNTExMTk4", "number": 8979, "title": "Implement lit template parser for limited template formats which extends LitTemplate element", "bodyText": "Fixes #8966", "createdAt": "2020-09-09T05:12:56Z", "url": "https://github.com/vaadin/flow/pull/8979", "merged": true, "mergeCommit": {"oid": "721758d52e7bdc02e846a89764ffdf2b90e75388"}, "closed": true, "closedAt": "2020-09-11T10:17:39Z", "author": {"login": "denis-anisimov"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHGcr0AFqTQ4NDcwNDYzNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHyn9IAFqTQ4NjY4MTMyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzA0NjM3", "url": "https://github.com/vaadin/flow/pull/8979#pullrequestreview-484704637", "createdAt": "2020-09-09T06:45:28Z", "commit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo0NToyOFrOHO48HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo0NToyOFrOHO48HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3NTAwNQ==", "bodyText": "Refactor this method to reduce its Cognitive Complexity from 17 to the 15 allowed.", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r485375005", "createdAt": "2020-09-09T06:45:28Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.UncheckedIOException;\n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.polymertemplate.BundleParser;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.Pair;\n+import com.vaadin.flow.server.DependencyFilter;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.shared.ui.Dependency;\n+import com.vaadin.flow.shared.ui.LoadMode;\n+\n+import elemental.json.JsonObject;\n+\n+/**\n+ * Lit template parser implementation.\n+ * <p>\n+ * The implementation scans all JsModule annotations for the given template\n+ * class and tries to find the one that contains template definition using the\n+ * tag name.\n+ * <p>\n+ * The class is Singleton. Use {@link LitTemplateParserImpl#getInstance()} to\n+ * get its instance.\n+ *\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @see BundleParser\n+ */\n+class LitTemplateParserImpl implements LitTemplateParser {\n+\n+    private static final LitTemplateParser INSTANCE = new LitTemplateParserImpl();\n+\n+    private final HashMap<String, String> cache = new HashMap<>();\n+    private final ReentrantLock lock = new ReentrantLock();\n+    private JsonObject jsonStats;\n+\n+    /**\n+     * The default constructor. Protected in order to prevent direct\n+     * instantiation, but not private in order to allow mocking/overrides for\n+     * testing purposes.\n+     */\n+    protected LitTemplateParserImpl() {\n+    }\n+\n+    static LitTemplateParser getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public TemplateData getTemplateContent(Class<? extends LitTemplate> clazz,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzA0NjQ3", "url": "https://github.com/vaadin/flow/pull/8979#pullrequestreview-484704647", "createdAt": "2020-09-09T06:45:28Z", "commit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo0NToyOFrOHO48JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo0NToyOFrOHO48JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3NTAxMg==", "bodyText": "Reduce the total number of break and continue statements in this loop to use at most one.", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r485375012", "createdAt": "2020-09-09T06:45:28Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.UncheckedIOException;\n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.polymertemplate.BundleParser;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.Pair;\n+import com.vaadin.flow.server.DependencyFilter;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.shared.ui.Dependency;\n+import com.vaadin.flow.shared.ui.LoadMode;\n+\n+import elemental.json.JsonObject;\n+\n+/**\n+ * Lit template parser implementation.\n+ * <p>\n+ * The implementation scans all JsModule annotations for the given template\n+ * class and tries to find the one that contains template definition using the\n+ * tag name.\n+ * <p>\n+ * The class is Singleton. Use {@link LitTemplateParserImpl#getInstance()} to\n+ * get its instance.\n+ *\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @see BundleParser\n+ */\n+class LitTemplateParserImpl implements LitTemplateParser {\n+\n+    private static final LitTemplateParser INSTANCE = new LitTemplateParserImpl();\n+\n+    private final HashMap<String, String> cache = new HashMap<>();\n+    private final ReentrantLock lock = new ReentrantLock();\n+    private JsonObject jsonStats;\n+\n+    /**\n+     * The default constructor. Protected in order to prevent direct\n+     * instantiation, but not private in order to allow mocking/overrides for\n+     * testing purposes.\n+     */\n+    protected LitTemplateParserImpl() {\n+    }\n+\n+    static LitTemplateParser getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public TemplateData getTemplateContent(Class<? extends LitTemplate> clazz,\n+            String tag, VaadinService service) {\n+\n+        List<Dependency> dependencies = AnnotationReader\n+                .getAnnotationsFor(clazz, JsModule.class).stream()\n+                .map(jsModule -> new Dependency(Dependency.Type.JS_MODULE,\n+                        jsModule.value(), LoadMode.EAGER)) // load mode doesn't\n+                                                           // matter here\n+                .collect(Collectors.toList());\n+\n+        for (DependencyFilter filter : service.getDependencyFilters()) {\n+            dependencies = filter.filter(new ArrayList<>(dependencies),\n+                    service);\n+        }\n+\n+        Pair<Dependency, String> chosenDep = null;\n+\n+        for (Dependency dependency : dependencies) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzA0NjUz", "url": "https://github.com/vaadin/flow/pull/8979#pullrequestreview-484704653", "createdAt": "2020-09-09T06:45:29Z", "commit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo0NToyOVrOHO48KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo0NToyOVrOHO48KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3NTAxNw==", "bodyText": "Make \"parser\" transient or serializable.", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r485375017", "createdAt": "2020-09-09T06:45:29Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java", "diffHunk": "@@ -17,30 +17,51 @@\n \n import java.io.Serializable;\n import java.util.Collections;\n+import java.util.Optional;\n \n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.component.littemplate.LitTemplateParser.TemplateData;\n import com.vaadin.flow.component.polymertemplate.IdCollector;\n import com.vaadin.flow.component.polymertemplate.TemplateDataAnalyzer.ParserData;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.server.VaadinService;\n \n /**\n  * Template data analyzer which produces immutable data required for template\n  * initializer using provided template class and a parser.\n  *\n  * @author Vaadin Ltd\n+ * @since\n  *\n  */\n class LitTemplateDataAnalyzer implements Serializable {\n \n     private final Class<? extends LitTemplate> templateClass;\n+    private final LitTemplateParser parser;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NzUwNDQ3", "url": "https://github.com/vaadin/flow/pull/8979#pullrequestreview-485750447", "createdAt": "2020-09-10T09:28:22Z", "commit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwOToyODoyMlrOHPrHsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMDo1MTo0OFrOHPuA6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5NzE2OQ==", "bodyText": "This could be warn level message.", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486197169", "createdAt": "2020-09-10T09:28:22Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java", "diffHunk": "@@ -49,11 +70,36 @@\n      * @return the template data\n      */\n     ParserData parseTemplate() {\n-        IdCollector idExtractor = new IdCollector(templateClass, null, null);\n+        TemplateData templateData = parser.getTemplateContent(templateClass,\n+                tag, service);\n+        if (templateData == null) {\n+            getLogger().info(\"Couldn't parse template for {} class. \"\n+                    + \"Only specific Lit template format is supported. Please check that your template definition\"\n+                    + \" directly contains 'render' method which returns html`_template_content_`.\",\n+                    templateClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIxMTYxNg==", "bodyText": "Could IdCollector be updated to state that also the second parameter is allowed to be null? Maybe this case also needs to be handled there, though seems to only be used in logging.", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486211616", "createdAt": "2020-09-10T09:51:53Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java", "diffHunk": "@@ -49,11 +70,36 @@\n      * @return the template data\n      */\n     ParserData parseTemplate() {\n-        IdCollector idExtractor = new IdCollector(templateClass, null, null);\n+        TemplateData templateData = parser.getTemplateContent(templateClass,\n+                tag, service);\n+        if (templateData == null) {\n+            getLogger().info(\"Couldn't parse template for {} class. \"\n+                    + \"Only specific Lit template format is supported. Please check that your template definition\"\n+                    + \" directly contains 'render' method which returns html`_template_content_`.\",\n+                    templateClass);\n+        }\n+\n+        Element templateRoot = templateData == null ? null\n+                : templateData.getTemplateElement();\n+        String modulePath = templateData == null ? null\n+                : templateData.getModulePath();\n+        IdCollector idExtractor = new IdCollector(templateClass, modulePath,\n+                templateRoot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIxMjM3MQ==", "bodyText": "make static", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486212371", "createdAt": "2020-09-10T09:53:11Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java", "diffHunk": "@@ -49,11 +70,36 @@\n      * @return the template data\n      */\n     ParserData parseTemplate() {\n-        IdCollector idExtractor = new IdCollector(templateClass, null, null);\n+        TemplateData templateData = parser.getTemplateContent(templateClass,\n+                tag, service);\n+        if (templateData == null) {\n+            getLogger().info(\"Couldn't parse template for {} class. \"\n+                    + \"Only specific Lit template format is supported. Please check that your template definition\"\n+                    + \" directly contains 'render' method which returns html`_template_content_`.\",\n+                    templateClass);\n+        }\n+\n+        Element templateRoot = templateData == null ? null\n+                : templateData.getTemplateElement();\n+        String modulePath = templateData == null ? null\n+                : templateData.getModulePath();\n+        IdCollector idExtractor = new IdCollector(templateClass, modulePath,\n+                templateRoot);\n         idExtractor.collectInjectedIds(Collections.emptySet());\n         return new ParserData(idExtractor.getIdByField(),\n                 idExtractor.getTagById(), Collections.emptyMap(),\n                 Collections.emptySet(), Collections.emptyList());\n     }\n \n+    private String getTag(Class<? extends LitTemplate> clazz) {\n+        Optional<String> tagNameAnnotation = AnnotationReader\n+                .getAnnotationFor(clazz, Tag.class).map(Tag::value);\n+        assert tagNameAnnotation.isPresent();\n+        return tagNameAnnotation.get();\n+    }\n+\n+    private Logger getLogger() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0NDA0MA==", "bodyText": "Could looping through the dependencies somehow be factored out as this method is quite complex.", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486244040", "createdAt": "2020-09-10T10:50:39Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.UncheckedIOException;\n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.polymertemplate.BundleParser;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.Pair;\n+import com.vaadin.flow.server.DependencyFilter;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.shared.ui.Dependency;\n+import com.vaadin.flow.shared.ui.LoadMode;\n+\n+import elemental.json.JsonObject;\n+\n+/**\n+ * Lit template parser implementation.\n+ * <p>\n+ * The implementation scans all JsModule annotations for the given template\n+ * class and tries to find the one that contains template definition using the\n+ * tag name.\n+ * <p>\n+ * The class is Singleton. Use {@link LitTemplateParserImpl#getInstance()} to\n+ * get its instance.\n+ *\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @see BundleParser\n+ */\n+class LitTemplateParserImpl implements LitTemplateParser {\n+\n+    private static final LitTemplateParser INSTANCE = new LitTemplateParserImpl();\n+\n+    private final HashMap<String, String> cache = new HashMap<>();\n+    private final ReentrantLock lock = new ReentrantLock();\n+    private JsonObject jsonStats;\n+\n+    /**\n+     * The default constructor. Protected in order to prevent direct\n+     * instantiation, but not private in order to allow mocking/overrides for\n+     * testing purposes.\n+     */\n+    protected LitTemplateParserImpl() {\n+    }\n+\n+    static LitTemplateParser getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public TemplateData getTemplateContent(Class<? extends LitTemplate> clazz,\n+            String tag, VaadinService service) {\n+\n+        List<Dependency> dependencies = AnnotationReader\n+                .getAnnotationsFor(clazz, JsModule.class).stream()\n+                .map(jsModule -> new Dependency(Dependency.Type.JS_MODULE,\n+                        jsModule.value(), LoadMode.EAGER)) // load mode doesn't\n+                                                           // matter here\n+                .collect(Collectors.toList());\n+\n+        for (DependencyFilter filter : service.getDependencyFilters()) {\n+            dependencies = filter.filter(new ArrayList<>(dependencies),\n+                    service);\n+        }\n+\n+        Pair<Dependency, String> chosenDep = null;\n+\n+        for (Dependency dependency : dependencies) {\n+            if (dependency.getType() != Dependency.Type.JS_MODULE) {\n+                continue;\n+            }\n+\n+            String url = dependency.getUrl();\n+            String source = getSourcesFromTemplate(tag, url);\n+            if (source == null) {\n+                try {\n+                    source = getSourcesFromStats(service, url);\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n+                }\n+            }\n+            if (source == null) {\n+                continue;\n+            }\n+            if (chosenDep == null) {\n+                chosenDep = new Pair<>(dependency, source);\n+            }\n+            if (dependencyHasTagName(dependency, tag)) {\n+                chosenDep = new Pair<>(dependency, source);\n+                break;\n+            }\n+        }\n+\n+        Element templateElement = null;\n+        if (chosenDep != null) {\n+            templateElement = BundleParser.parseLitTemplateElement(\n+                    chosenDep.getFirst().getUrl(), chosenDep.getSecond());\n+        }\n+        if (templateElement != null) {\n+            // Template needs to be wrapped in an element with id, to look\n+            // like a P2 template\n+            Element parent = new Element(tag);\n+            parent.attr(\"id\", tag);\n+            templateElement.appendTo(parent);\n+\n+            return new TemplateData(chosenDep.getFirst().getUrl(),\n+                    templateElement);\n+        }\n+\n+        getLogger().info(\"Couldn't find the \"\n+                + \"definition of the element with tag '{}' \"\n+                + \"in any lit template file declared using '@{}' annotations. \"\n+                + \"Check the availability of the template files in your WAR \"\n+                + \"file or provide alternative implementation of the \"\n+                + \"method LitTemplateParser.getTemplateContent() which should return an element \"\n+                + \"representing the content of the template file\", tag,\n+                JsModule.class.getSimpleName());\n+\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0NDU4NA==", "bodyText": "Some more descriptive name on this field would be good.", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486244584", "createdAt": "2020-09-10T10:51:48Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.UncheckedIOException;\n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.polymertemplate.BundleParser;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.Pair;\n+import com.vaadin.flow.server.DependencyFilter;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.shared.ui.Dependency;\n+import com.vaadin.flow.shared.ui.LoadMode;\n+\n+import elemental.json.JsonObject;\n+\n+/**\n+ * Lit template parser implementation.\n+ * <p>\n+ * The implementation scans all JsModule annotations for the given template\n+ * class and tries to find the one that contains template definition using the\n+ * tag name.\n+ * <p>\n+ * The class is Singleton. Use {@link LitTemplateParserImpl#getInstance()} to\n+ * get its instance.\n+ *\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @see BundleParser\n+ */\n+class LitTemplateParserImpl implements LitTemplateParser {\n+\n+    private static final LitTemplateParser INSTANCE = new LitTemplateParserImpl();\n+\n+    private final HashMap<String, String> cache = new HashMap<>();\n+    private final ReentrantLock lock = new ReentrantLock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1OTk3MzMx", "url": "https://github.com/vaadin/flow/pull/8979#pullrequestreview-485997331", "createdAt": "2020-09-10T14:30:14Z", "commit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDozMDoxNFrOHP27XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDozMDoxNFrOHP27XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5MDYyMA==", "bodyText": "Ok, only a failed assertion message in test code but the expected id is label here.", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486390620", "createdAt": "2020-09-10T14:30:14Z", "author": {"login": "joheriks"}, "path": "flow-server/src/test/java/com/vaadin/flow/component/littemplate/LitTemplateParserImplTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package com.vaadin.flow.component.littemplate;\n+\n+import static com.vaadin.flow.server.Constants.VAADIN_SERVLET_RESOURCES;\n+\n+import java.util.Collections;\n+\n+import org.hamcrest.CoreMatchers;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.stubbing.Answer;\n+\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.littemplate.LitTemplateParser.TemplateData;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.server.VaadinContext;\n+import com.vaadin.flow.server.VaadinService;\n+\n+public class LitTemplateParserImplTest {\n+\n+    @Mock\n+    VaadinContext context;\n+    @Mock\n+    VaadinService service;\n+    @Mock\n+    DeploymentConfiguration configuration;\n+\n+    @Before\n+    public void init() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        Mockito.when(service.getDependencyFilters())\n+                .thenReturn(Collections.emptyList());\n+        Mockito.when(service.getDeploymentConfiguration())\n+                .thenReturn(configuration);\n+        Mockito.when(service.getClassLoader())\n+                .thenAnswer(invocation -> this.getClass().getClassLoader());\n+        Mockito.when(service.getContext()).thenReturn(context);\n+        Mockito.when(configuration.getStringProperty(Mockito.anyString(),\n+                Mockito.anyString()))\n+                .thenAnswer((Answer<String>) invocation -> {\n+                    Object[] args = invocation.getArguments();\n+                    return (String) args[1];\n+                });\n+    }\n+\n+    @Test\n+    public void getTemplateContent_rootElementParsed() {\n+        Mockito.when(configuration.isProductionMode()).thenReturn(true);\n+        LitTemplateParser instance = LitTemplateParserImpl.getInstance();\n+        TemplateData templateContent = instance\n+                .getTemplateContent(MyLitElement.class, \"my-element\", service);\n+\n+        Assert.assertEquals(\"Parent element ID not the expected one.\",\n+                \"my-element\",\n+                templateContent.getTemplateElement().parent().id());\n+\n+        Assert.assertEquals(\"Expected template element to have 2 children\", 2,\n+                templateContent.getTemplateElement().childNodeSize());\n+\n+        Assert.assertEquals(\n+                \"Template element should have contained a div element with the id 'test'\",\n+                \"div\", templateContent.getTemplateElement()\n+                        .getElementById(\"test\").tag().toString());\n+    }\n+\n+    @Test\n+    public void getTemplateContent_localFileTemplateExists_useLocalFileContent() {\n+        LitTemplateParser instance = LitTemplateParserImpl.getInstance();\n+        TemplateData templateContent = instance.getTemplateContent(\n+                MyLitElementView.class, \"my-lit-element-view\", service);\n+\n+        Assert.assertEquals(\"Parent element ID not the expected one.\",\n+                \"my-lit-element-view\",\n+                templateContent.getTemplateElement().parent().id());\n+\n+        Assert.assertEquals(\"Expected template element to have 3 children\", 3,\n+                templateContent.getTemplateElement().childNodeSize());\n+\n+        Assert.assertEquals(\n+                \"Template element should have contained a div element with the id 'test'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c262e244e07b3f4c68473f2cb371cfcf1fa7f1f9", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/c262e244e07b3f4c68473f2cb371cfcf1fa7f1f9", "committedDate": "2020-09-10T14:57:48Z", "message": "Add lit template parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42334a43bb464d65c2e6d85901d315d0af9fcbe2", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/42334a43bb464d65c2e6d85901d315d0af9fcbe2", "committedDate": "2020-09-10T14:57:48Z", "message": "Lit template parser unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19bc6d77a2d22c24a6645ee26f8074d21f268291", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/19bc6d77a2d22c24a6645ee26f8074d21f268291", "committedDate": "2020-09-10T14:57:48Z", "message": "Add javadocs and test files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d49c6e6db859b44ed19e1921729299d7b48e2585", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/d49c6e6db859b44ed19e1921729299d7b48e2585", "committedDate": "2020-09-10T14:57:49Z", "message": "Exclude classes from serializable tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8337f3ce4f0fe6b40bda14cb5d7042c05b3907ae", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/8337f3ce4f0fe6b40bda14cb5d7042c05b3907ae", "committedDate": "2020-09-10T14:57:49Z", "message": "Corrections after review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdbee1ef50438258a1682bd4d8c6ccbfd0eb6ef5", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/bdbee1ef50438258a1682bd4d8c6ccbfd0eb6ef5", "committedDate": "2020-09-10T14:57:50Z", "message": "Fix assertion message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac04d88dd92a0cbdab07a4fd913a5afc12d82fb7", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/ac04d88dd92a0cbdab07a4fd913a5afc12d82fb7", "committedDate": "2020-09-10T14:58:50Z", "message": "Revert changes in 1000th time"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad2938709b8791de6040c7b09a1f48404f1c5379", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/ad2938709b8791de6040c7b09a1f48404f1c5379", "committedDate": "2020-09-10T11:28:42Z", "message": "Corrections after review"}, "afterCommit": {"oid": "ac04d88dd92a0cbdab07a4fd913a5afc12d82fb7", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/ac04d88dd92a0cbdab07a4fd913a5afc12d82fb7", "committedDate": "2020-09-10T14:58:50Z", "message": "Revert changes in 1000th time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2456d476c5e2df9405fc053896170e69224225ae", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/2456d476c5e2df9405fc053896170e69224225ae", "committedDate": "2020-09-10T15:00:40Z", "message": "Resolve merge conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MDk5NzYz", "url": "https://github.com/vaadin/flow/pull/8979#pullrequestreview-486099763", "createdAt": "2020-09-10T16:14:43Z", "commit": {"oid": "ad2938709b8791de6040c7b09a1f48404f1c5379"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoxNDo0M1rOHP7qVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjozOToxOVrOHP8n-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ2ODE4Mw==", "bodyText": "Ok", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486468183", "createdAt": "2020-09-10T16:14:43Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java", "diffHunk": "@@ -49,11 +70,36 @@\n      * @return the template data\n      */\n     ParserData parseTemplate() {\n-        IdCollector idExtractor = new IdCollector(templateClass, null, null);\n+        TemplateData templateData = parser.getTemplateContent(templateClass,\n+                tag, service);\n+        if (templateData == null) {\n+            getLogger().info(\"Couldn't parse template for {} class. \"\n+                    + \"Only specific Lit template format is supported. Please check that your template definition\"\n+                    + \" directly contains 'render' method which returns html`_template_content_`.\",\n+                    templateClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5NzE2OQ=="}, "originalCommit": {"oid": "859f16e29c2b8e8355256db11cfbee1663518e5f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw==", "bodyText": "For discussion: LIT_TEMPLATE_PATTERN is sent as parameter to Matcher::find which matches greedily. It means that if there is an additional block of the form xxx`...`;}  following the end of the html`...`;} block, it will also be consumed by the regex. This could happen for instance if a styles function  was placed after render:\nexport class LitTest extends LitElement {\n  render() { return html`<button/>`; }\n  static get styles() { return css`:host { background-color: pink }`; }\n}\nPutting this throught the parser results in the following templateDocument:\n<html>\n <head></head>\n <body>\n  <button></button>`; } static get styles() { return css`:host { background-color: pink }\n </body>\n</html>\nMaybe we can rely on templates from designer to never have such an issue. But it would feel safer to match the content between the delimiters as [^`]|\\\\` , though I'm not sure how to make that work with the backreference \\\\1 (is it at all possible to use html\"...\" or html'...'? I get syntax errors when I try them, both in JS and TS).", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486483963", "createdAt": "2020-09-10T16:39:19Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "diffHunk": "@@ -83,9 +83,38 @@\n      * <code>([\\s\\S]*)\\1;[\\s]*\\}</code> captures all text until we encounter the\n      * end character with <code>;}</code> e.g. <code>';}</code>\n      */\n-    private static final Pattern TEMPLATE_PATTERN = Pattern.compile(\n+    private static final Pattern POLYMER_TEMPLATE_PATTERN = Pattern.compile(\n             \"get[\\\\s]*template\\\\(\\\\)[\\\\s]*\\\\{[\\\\s]*return[\\\\s]*html([\\\\`\\\\'\\\\\\\"])([\\\\s\\\\S]*)\\\\1;[\\\\s]*\\\\}\");\n \n+    /**\n+     * Lit template pattern matches the template getter\n+     *\n+     * <pre>\n+     *     render() {\n+     *       return html`\n+     *         &lt;style&gt;\n+     *           .response { margin-top: 10px`; }\n+     *         &lt;/style&gt;\n+     *         &lt;paper-checkbox checked=&quot;{{liked}}&quot;&gt;I like web components.&lt;/paper-checkbox&gt;\n+     *\n+     *         &lt;div id=&quot;test&quot; hidden$=&quot;[[!liked]]&quot; class=&quot;response&quot;&gt;Web components like you, too.&lt;/div&gt;\n+     *       `;\n+     *     }\n+     * </pre>\n+     *\n+     * <p>\n+     * <code>render\\(\\)[\\s]*\\{</code> finds the template getter method\n+     * <p>\n+     * <code>[\\s]*return[\\s]*html([\\`|\\'|\\\"])</code> finds the return statement\n+     * and captures the used string character\n+     * <p>\n+     * </p>\n+     * <code>([\\s\\S]*)\\1;[\\s]*\\}</code> captures all text until we encounter the\n+     * end character with <code>;}</code> e.g. <code>';}</code>\n+     */\n+    private static final Pattern LIT_TEMPLATE_PATTERN = Pattern.compile(\n+            \"render\\\\(\\\\)[\\\\s]*\\\\{[\\\\s]*return[\\\\s]*html([\\\\`\\\\'\\\\\\\"])([\\\\s\\\\S]*)\\\\1;[\\\\s]*\\\\}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2456d476c5e2df9405fc053896170e69224225ae"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "904285e32c8f159a87a7a4d3f2ae169054e892e3", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/904285e32c8f159a87a7a4d3f2ae169054e892e3", "committedDate": "2020-09-11T05:48:47Z", "message": "Be aware of greedy matcher"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NTU4NzE3", "url": "https://github.com/vaadin/flow/pull/8979#pullrequestreview-486558717", "createdAt": "2020-09-11T08:00:09Z", "commit": {"oid": "904285e32c8f159a87a7a4d3f2ae169054e892e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODowMDoxMFrOHQShZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODowMDoxMFrOHQShZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MjcyNQ==", "bodyText": "I believe there's a missing } after the return html`...`  and just before the static get styles(column 515).", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486842725", "createdAt": "2020-09-11T08:00:10Z", "author": {"login": "joheriks"}, "path": "flow-server/src/test/resources/META-INF/VAADIN/config/stats.json", "diffHunk": "@@ -30,6 +42,15 @@\n               {\n                 \"name\": \"./frontend/LikeableElement.js\",\n                 \"source\": \"// Import an element\\nimport '@polymer/paper-checkbox/paper-checkbox.js';\\n\\n// Import the PolymerElement base class and html helper\\nimport {PolymerElement, html} from '@polymer/polymer';\\n\\n// Define an element class\\nclass LikeableElement extends PolymerElement {\\n\\n  // Define public API properties\\n  static get properties() { return { liked: Boolean }}\\n\\n  // Define the element's template\\n  static get template() {\\n    return html`\\n      <style>\\n        :host{ \\n          margin: 5px; \\n        }\\n      \\n        .response { margin-top: 10px; } \\n      </style>\\n   <div>Tag name doesn't match the JS module name</div>   <paper-checkbox checked='{{liked}}'>I like web components!</paper-checkbox>\\n\\n      <div id='test' hidden$='[[!liked]]' class='response'>Web components like you, too.</div>\\n    `;\\n  }\\n}\\n\\n// Register the element with the browser\\ncustomElements.define('likeable-element', LikeableElement);\"\n+              },\n+              {\n+                \"name\": \"./frontend/MyLitElement.js\",\n+                \"source\": \"// Import an element\\nimport { LitElement, html } from 'lit-element';\\n\\n// Define an element class\\n export class MyLitElement extends LitElement {\\n\\n  // Define the element's template\\n  render() {\\n    return html`\\n      <style>\\n        :host{ \\n          margin: 5px; \\n        }\\n      \\n        .response { margin-top: 10px; } \\n      </style>\\n   <div>Tag name doesn't match the JS module name<div>inner</div></div>   <div id='test'  class='response'>Web components like you, too.</div>\\n    `;\\n  }\\n}\\n\\n// Register the element with the browser\\ncustomElements.define('my-element', MyLitElement);\"\n+              }\n+              ,\n+              {\n+                \"name\": \"./frontend/MyGreedyLitElement.js\",\n+                \"source\": \"// Import an element\\nimport { LitElement, html } from 'lit-element';\\n\\n// Define an element class\\n export class MyGreedyLitElement extends LitElement {\\n\\n  // Define the element's template\\n  render() {\\n    return html`\\n      <style>\\n        :host{ \\n          margin: 5px; \\n        }\\n      \\n        .response { margin-top: 10px; } \\n      </style>\\n   <div>Tag name doesn't match the JS module name<div>inner</div></div>   <div id='test'  class='response'>greedy</div>\\n    `;\\n static get styles() { return css`:host { background-color: pink } <span>incorrect content</span>`; } }\\n}\\n\\n// Register the element with the browser\\ncustomElements.define('my-greedy-element', MyGreedyLitElement);\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "904285e32c8f159a87a7a4d3f2ae169054e892e3"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a74148647c4e8bec0ece900d1d79c968487fe8e", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/0a74148647c4e8bec0ece900d1d79c968487fe8e", "committedDate": "2020-09-11T08:02:18Z", "message": "Allow escaped backticks in the template content"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NjMxMDA1", "url": "https://github.com/vaadin/flow/pull/8979#pullrequestreview-486631005", "createdAt": "2020-09-11T09:00:50Z", "commit": {"oid": "0a74148647c4e8bec0ece900d1d79c968487fe8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTowMDo1MFrOHQUxTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTowMDo1MFrOHQUxTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3OTU2NA==", "bodyText": "There is a missing } at column 518.", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486879564", "createdAt": "2020-09-11T09:00:50Z", "author": {"login": "joheriks"}, "path": "flow-server/src/test/resources/META-INF/VAADIN/config/stats.json", "diffHunk": "@@ -30,6 +42,15 @@\n               {\n                 \"name\": \"./frontend/LikeableElement.js\",\n                 \"source\": \"// Import an element\\nimport '@polymer/paper-checkbox/paper-checkbox.js';\\n\\n// Import the PolymerElement base class and html helper\\nimport {PolymerElement, html} from '@polymer/polymer';\\n\\n// Define an element class\\nclass LikeableElement extends PolymerElement {\\n\\n  // Define public API properties\\n  static get properties() { return { liked: Boolean }}\\n\\n  // Define the element's template\\n  static get template() {\\n    return html`\\n      <style>\\n        :host{ \\n          margin: 5px; \\n        }\\n      \\n        .response { margin-top: 10px; } \\n      </style>\\n   <div>Tag name doesn't match the JS module name</div>   <paper-checkbox checked='{{liked}}'>I like web components!</paper-checkbox>\\n\\n      <div id='test' hidden$='[[!liked]]' class='response'>Web components like you, too.</div>\\n    `;\\n  }\\n}\\n\\n// Register the element with the browser\\ncustomElements.define('likeable-element', LikeableElement);\"\n+              },\n+              {\n+                \"name\": \"./frontend/MyLitElement.js\",\n+                \"source\": \"// Import an element\\nimport { LitElement, html } from 'lit-element';\\n\\n// Define an element class\\n export class MyLitElement extends LitElement {\\n\\n  // Define the element's template\\n  render() {\\n    return html`\\n      <style>\\n        :host{ \\n          margin: 5px; \\n        }\\n      \\n        .response { margin-top: 10px; } \\n      </style>\\n   <div>Tag name doesn't match the JS module name<div>inner</div></div>   <div id='test'  class='response'>Web components like you, too.</div>\\n    `;\\n  }\\n}\\n\\n// Register the element with the browser\\ncustomElements.define('my-element', MyLitElement);\"\n+              }\n+              ,\n+              {\n+                \"name\": \"./frontend/MyGreedyLitElement.js\",\n+                \"source\": \"// Import an element\\nimport { LitElement, html } from 'lit-element';\\n\\n// Define an element class\\n export class MyGreedyLitElement extends LitElement {\\n\\n  // Define the element's template\\n  render() {\\n    return html`\\n      <style>\\n        :host{ \\n          margin: 5px; \\n        }\\n      \\n        .response { margin-top: 10px; } \\n      </style>\\n   <div>\\\\`Tag name doesn't match the JS module name<div>inner</div></div>   <div id='test'  class='response'>greedy</div>\\n    `;\\n static get styles() { return css`:host { background-color: pink } <span>incorrect content</span>`; } }\\n}\\n\\n// Register the element with the browser\\ncustomElements.define('my-greedy-element', MyGreedyLitElement);\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a74148647c4e8bec0ece900d1d79c968487fe8e"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49d2e662acd9fe83b9279ae9efe6ebaaa4e3f2bf", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/49d2e662acd9fe83b9279ae9efe6ebaaa4e3f2bf", "committedDate": "2020-09-11T09:05:32Z", "message": "Fix missing } and remove extra one"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NjQ2MTYx", "url": "https://github.com/vaadin/flow/pull/8979#pullrequestreview-486646161", "createdAt": "2020-09-11T09:21:53Z", "commit": {"oid": "0a74148647c4e8bec0ece900d1d79c968487fe8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOToyMTo1M1rOHQWDRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOToyMTo1M1rOHQWDRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkwMDU0OQ==", "bodyText": "I find this more messy than having the same logic in a regex, to be honest.", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486900549", "createdAt": "2020-09-11T09:21:53Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "diffHunk": "@@ -273,6 +269,37 @@ public static Element parseLitTemplateElement(String fileName,\n         return null;\n     }\n \n+    private static String getNonGreadyTemplateContent(String greedyContent,\n+            String delimiter) {\n+        String templateContent = greedyContent;\n+        // in case greedy match let's truncate the second group (remove\n+        // everything after delimiter)\n+        int index = -1;\n+        while (true) {\n+            index = greedyContent.indexOf(delimiter, index + 1);\n+            if (index < 0) {\n+                break;\n+            }\n+            templateContent = greedyContent.substring(0, index);\n+            if (!endsWithEscaped(templateContent)) {\n+                break;\n+            }\n+        }\n+        return templateContent;\n+    }\n+\n+    private static boolean endsWithEscaped(String value) {\n+        int slashCount = 0;\n+        for (int i = value.length() - 1; i >= 0; i--) {\n+            if (value.charAt(i) == '\\\\') {\n+                slashCount++;\n+            } else {\n+                break;\n+            }\n+        }\n+        return slashCount % 2 == 1;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a74148647c4e8bec0ece900d1d79c968487fe8e"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57d6078f9b7ab078a303069e7ef38416bb8231bd", "author": {"user": null}, "url": "https://github.com/vaadin/flow/commit/57d6078f9b7ab078a303069e7ef38416bb8231bd", "committedDate": "2020-09-11T09:25:38Z", "message": "Use suggested way for pattern"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NjczNDQy", "url": "https://github.com/vaadin/flow/pull/8979#pullrequestreview-486673442", "createdAt": "2020-09-11T10:01:27Z", "commit": {"oid": "57d6078f9b7ab078a303069e7ef38416bb8231bd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NjgxMzI3", "url": "https://github.com/vaadin/flow/pull/8979#pullrequestreview-486681327", "createdAt": "2020-09-11T10:13:36Z", "commit": {"oid": "57d6078f9b7ab078a303069e7ef38416bb8231bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoxMzozNlrOHQZBhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoxMzozNlrOHQZBhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk0OTI1NQ==", "bodyText": "Remove this use of \"DEAULT_FLOW_RESOURCES_FOLDER\"; it is deprecated.", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486949255", "createdAt": "2020-09-11T10:13:36Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "diffHunk": "@@ -256,8 +324,8 @@ private static String getSourceFromObject(JsonObject module,\n             // using ./ as the actual path contains\n             // \"node_modules/@vaadin/flow-frontend/\" instead of \"./\"\n             // \"target/flow-frontend/\" instead of \"./\"\n-            if (name.contains(FLOW_NPM_PACKAGE_NAME) ||\n-                    name.contains(DEFAULT_FLOW_RESOURCES_FOLDER)) {\n+            if (name.contains(FLOW_NPM_PACKAGE_NAME)\n+                    || name.contains(DEAULT_FLOW_RESOURCES_FOLDER)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d6078f9b7ab078a303069e7ef38416bb8231bd"}, "originalPosition": 155}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 153, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}