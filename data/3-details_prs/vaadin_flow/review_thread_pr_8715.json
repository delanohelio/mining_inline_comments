{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NjY3MTk3", "number": 8715, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjozNzoxMVrOEOH4kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzozMzoyNFrOEOI7Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjQ0Njg5OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjozNzoxMVrOGxGLJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzoxNjoxOFrOGxHP5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEzNDU2NQ==", "bodyText": "This and related change in QueryTrace is obsolete as the methods are basically aliases \ud83e\udd14\nBut I'm fine having it this way as well.", "url": "https://github.com/vaadin/flow/pull/8715#discussion_r454134565", "createdAt": "2020-07-14T06:37:11Z", "author": {"login": "mstahv"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -682,20 +707,21 @@ protected Object getFilter() {\n             assert !stream.isParallel();\n         }\n \n-        SizeVerifier verifier = new SizeVerifier<>(limit);\n+        // the number of results can be in range from 0 to pages * pageSize\n+        SizeVerifier verifier = new SizeVerifier<>(pages * pageSize);\n         stream = stream.peek(verifier);\n \n         /*\n          * These restrictions are used to help users to see that they have done\n          * a mistake instead of just letting things work in an unintended way.\n          */\n-        if (!query.isLimitCalled()) {\n+        if (!query.isLimitCalled() && !query.isPageSizeCalled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "218d20d8fdb2dcde1a87c3f80c6c4a84b12ac326"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1MjE2Ng==", "bodyText": "I agree, this is a weird change, because page getters call limit&offset getters anyway. I removed page getters verification. The user is able to call only getPage to workaround those checks, but I don't want to attach a heavy verification logic here, checking all combination of getters.", "url": "https://github.com/vaadin/flow/pull/8715#discussion_r454152166", "createdAt": "2020-07-14T07:16:18Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -682,20 +707,21 @@ protected Object getFilter() {\n             assert !stream.isParallel();\n         }\n \n-        SizeVerifier verifier = new SizeVerifier<>(limit);\n+        // the number of results can be in range from 0 to pages * pageSize\n+        SizeVerifier verifier = new SizeVerifier<>(pages * pageSize);\n         stream = stream.peek(verifier);\n \n         /*\n          * These restrictions are used to help users to see that they have done\n          * a mistake instead of just letting things work in an unintended way.\n          */\n-        if (!query.isLimitCalled()) {\n+        if (!query.isLimitCalled() && !query.isPageSizeCalled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEzNDU2NQ=="}, "originalCommit": {"oid": "218d20d8fdb2dcde1a87c3f80c6c4a84b12ac326"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjYxNzc0OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzozMzoyNFrOGxHyNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODoxNDo0MFrOGxJJhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MDk1MA==", "bodyText": "This can be achieved with only integer division, by adding the divisor minus one before dividing to ensure upwards rounding:\nfinal int pages = (limit + pageSize-1) / pageSize;\n\nDrawback is it reads less obviously, so would need comment, but I would prefer to do it this way to avoid int \u2194\ufe0e double\u2194\ufe0eint cross-conversion. Alternatively division may not be needed if the below loop is modified to something like:\nfor (int newOffset = offset; newOffset < offset + limit; newOffset += pageSize) {\n ...\n}", "url": "https://github.com/vaadin/flow/pull/8715#discussion_r454160950", "createdAt": "2020-07-14T07:33:24Z", "author": {"login": "joheriks"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -660,19 +660,44 @@ protected Object getFilter() {\n \n     /**\n      * Fetches a list of items from the DataProvider.\n+     * <p>\n+     * <em>NOTE:</em> the {@code limit} parameter shows how many items the\n+     * client wants to fetch, but the actual number of results may be greater,\n+     * and vary from {@code 0 to pages * pageSize}.\n      *\n      * @param offset\n      *            the starting index of the range\n      * @param limit\n-     *            the max number of results\n+     *            the desired number of results\n      * @return the list of items in given range\n      *\n      */\n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     protected Stream<T> fetchFromProvider(int offset, int limit) {\n-        QueryTrace query = new QueryTrace(offset, limit, backEndSorting,\n+        Stream<T> stream = Stream.empty();\n+        QueryTrace query = new QueryTrace(offset, pageSize, backEndSorting,\n                 inMemorySorting, filter);\n-        Stream<T> stream = getDataProvider().fetch(query);\n+        /*\n+         * Items limit value may not be necessarily multiply of page size,\n+         * and thus the pages count is rounded to closest smallest integer.\n+         */\n+        final int pages = (int) Math.ceil((double) limit / pageSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "218d20d8fdb2dcde1a87c3f80c6c4a84b12ac326"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE4MzMwMA==", "bodyText": "Thank you, @joheriks ! That's a great point. I use integer division instead of loop because pages var is used by size verifier either.", "url": "https://github.com/vaadin/flow/pull/8715#discussion_r454183300", "createdAt": "2020-07-14T08:14:40Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -660,19 +660,44 @@ protected Object getFilter() {\n \n     /**\n      * Fetches a list of items from the DataProvider.\n+     * <p>\n+     * <em>NOTE:</em> the {@code limit} parameter shows how many items the\n+     * client wants to fetch, but the actual number of results may be greater,\n+     * and vary from {@code 0 to pages * pageSize}.\n      *\n      * @param offset\n      *            the starting index of the range\n      * @param limit\n-     *            the max number of results\n+     *            the desired number of results\n      * @return the list of items in given range\n      *\n      */\n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     protected Stream<T> fetchFromProvider(int offset, int limit) {\n-        QueryTrace query = new QueryTrace(offset, limit, backEndSorting,\n+        Stream<T> stream = Stream.empty();\n+        QueryTrace query = new QueryTrace(offset, pageSize, backEndSorting,\n                 inMemorySorting, filter);\n-        Stream<T> stream = getDataProvider().fetch(query);\n+        /*\n+         * Items limit value may not be necessarily multiply of page size,\n+         * and thus the pages count is rounded to closest smallest integer.\n+         */\n+        final int pages = (int) Math.ceil((double) limit / pageSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MDk1MA=="}, "originalCommit": {"oid": "218d20d8fdb2dcde1a87c3f80c6c4a84b12ac326"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3364, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}