{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMjY0MTM0", "number": 9061, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo1ODozOFrOEm8dtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTowMTozMlrOEnXvxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjcxOTg4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo1ODozOFrOHXQrog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo1ODozOFrOHXQrog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE1MjYxMA==", "bodyText": "Remove this use of \"Thread.sleep()\".", "url": "https://github.com/vaadin/flow/pull/9061#discussion_r494152610", "createdAt": "2020-09-24T08:58:38Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java", "diffHunk": "@@ -477,6 +481,80 @@ public void serveDevModeRequest_prepareTasksThrows_serveDevModeReturnsFalseAndDo\n         Assert.assertFalse(handler.serveDevModeRequest(request, response));\n     }\n \n+    @Test\n+    public void start_twoTimes_onlyOneHandlerInstanceIsCreated() {\n+        MockDeploymentConfiguration configuration = Mockito\n+                .spy(MockDeploymentConfiguration.class);\n+        DevModeHandler handler = DevModeHandler.start(0, configuration,\n+                npmFolder, CompletableFuture.completedFuture(null));\n+        handler.join();\n+\n+        // This is how new server handler instantiation checked:\n+        Mockito.verify(configuration).reuseDevServer();\n+\n+        // \"start\" one more time: there should not be another instance of dev\n+        // mode handler created\n+        DevModeHandler anotherHandler = DevModeHandler.start(0, configuration,\n+                npmFolder, CompletableFuture.completedFuture(null));\n+        anotherHandler.join();\n+\n+        // The handler instances are the same but there should be no attempt to\n+        // create another instance (which won't be stored anywhere), see below\n+        Assert.assertSame(handler, anotherHandler);\n+\n+        // No more \"reuseDevServer\" calls are done: see above, it has been\n+        // already called one time\n+        Mockito.verify(configuration).reuseDevServer();\n+    }\n+\n+    @Test\n+    public void start_twoInstances_secondInstanceUsesAnotherPort()\n+            throws Exception {\n+\n+        // start the first instance\n+        DevModeHandler handler = DevModeHandler.start(0, configuration,\n+                npmFolder, CompletableFuture.completedFuture(null));\n+\n+        // remove the \"singleton\" instance to be able to start another one\n+        removeDevModeHandlerInstance();\n+\n+        // since the timeout is quite big the server port still should be\n+        // available and the second instance should try to reuse it\n+\n+        DevModeHandler.start(0, configuration, npmFolder,\n+                CompletableFuture.completedFuture(null));\n+\n+        // make checks only if webpack has not yet completed\n+\n+        DevModeHandler anotherHandler = DevModeHandler.start(0, configuration,\n+                npmFolder, CompletableFuture.completedFuture(null));\n+\n+        while (handler.getPort() == 0) {\n+            Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa34ba3398b40860656881a85723d9b6642ba8cb"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjcxOTk1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo1ODozOVrOHXQrrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo1ODozOVrOHXQrrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE1MjYyMw==", "bodyText": "Remove this unused private \"checkPort\" method.", "url": "https://github.com/vaadin/flow/pull/9061#discussion_r494152623", "createdAt": "2020-09-24T08:58:39Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -523,22 +522,45 @@ private void saveRunningDevServerPort() {\n         }\n     }\n \n-    private void doStartDevModeServer(DeploymentConfiguration config,\n-            File npmFolder) throws ExecutionFailedException {\n+    private boolean checkPort() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa34ba3398b40860656881a85723d9b6642ba8cb"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Njk2OTk2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzo1OToyNFrOHX5H0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzo1OToyNFrOHX5H0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgxNTE4Ng==", "bodyText": "Minor: Perhaps rename to doStartWebpack for consistency.", "url": "https://github.com/vaadin/flow/pull/9061#discussion_r494815186", "createdAt": "2020-09-25T07:59:24Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -550,7 +572,21 @@ private void doStartDevModeServer(DeploymentConfiguration config,\n \n         // Look for a free port\n         port = getFreePort();\n+        // save the port immediately before start a webpack server, see #8981\n+        saveRunningDevServerPort();\n+        boolean success = false;\n+\n+        try {\n+            success = doStartWebPack(config, webPackFiles, start);\n+        } finally {\n+            if (!success) {\n+                removeRunningDevServerPort();\n+            }\n+        }\n+    }\n \n+    private boolean doStartWebPack(DeploymentConfiguration config,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa34ba3398b40860656881a85723d9b6642ba8cb"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzE4OTgxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTowMTozMlrOHX7OvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOToyNzo0NVrOHX8Hzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0OTcyNA==", "bodyText": "Minor: Because of the added null check (I assume to avoid calling createInstance in not null case as there is no lazy compareAndSet available), could the inner code be simplified to atomicHandler.set(...)", "url": "https://github.com/vaadin/flow/pull/9061#discussion_r494849724", "createdAt": "2020-09-25T09:01:32Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -188,8 +191,10 @@ public static DevModeHandler start(int runningPort,\n                 || !configuration.enableDevServer()) {\n             return null;\n         }\n-        atomicHandler.compareAndSet(null,\n-                createInstance(runningPort, configuration, npmFolder, waitFor));\n+        if (atomicHandler.get() == null) {\n+            atomicHandler.compareAndSet(null, createInstance(runningPort,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa34ba3398b40860656881a85723d9b6642ba8cb"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg1NjQxOA==", "bodyText": "No, it can't be.\nThat's the point of thread safety.\nThe whole idea of using AtomicReference is to update the value safely and avoid extra action.\nIf two threads comes here then both threads may pass atomicHandler.get() == null  check.\nThen one thread may set it first and another thread will also create a new instance and set it but it should be rejected sine there is already one.\nThe added check will work in many cases to avoid even createInstance   call . But in the worst case it will be called anyway twice (or even more).\nThe changes which I made inside DevModeHandler  logic allows to avoid side effects in this case.\nBut atomicHandler.get() == null  check already will work in most cases so there will be no even need to create another instance.\nSo in short : the added check is not necessary (and should not be necessary) . But it allows to avoid extra actions in many cases even though it's not a booletproof solution.", "url": "https://github.com/vaadin/flow/pull/9061#discussion_r494856418", "createdAt": "2020-09-25T09:13:54Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -188,8 +191,10 @@ public static DevModeHandler start(int runningPort,\n                 || !configuration.enableDevServer()) {\n             return null;\n         }\n-        atomicHandler.compareAndSet(null,\n-                createInstance(runningPort, configuration, npmFolder, waitFor));\n+        if (atomicHandler.get() == null) {\n+            atomicHandler.compareAndSet(null, createInstance(runningPort,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0OTcyNA=="}, "originalCommit": {"oid": "aa34ba3398b40860656881a85723d9b6642ba8cb"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2MjI2Ng==", "bodyText": "Ok. I was under the impression that the AtomicReference is there to have thread safe access between calls to DevModeHandler::start and DevModeHandler::stop. Is there at all a possibility to have two simultaneous threads entering DevModeHandler::start? As there's only one thread for dev server.\nAnyway, this is fine and yes probably safer.", "url": "https://github.com/vaadin/flow/pull/9061#discussion_r494862266", "createdAt": "2020-09-25T09:24:15Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -188,8 +191,10 @@ public static DevModeHandler start(int runningPort,\n                 || !configuration.enableDevServer()) {\n             return null;\n         }\n-        atomicHandler.compareAndSet(null,\n-                createInstance(runningPort, configuration, npmFolder, waitFor));\n+        if (atomicHandler.get() == null) {\n+            atomicHandler.compareAndSet(null, createInstance(runningPort,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0OTcyNA=="}, "originalCommit": {"oid": "aa34ba3398b40860656881a85723d9b6642ba8cb"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2NDMzNA==", "bodyText": "Theoretically this method can be invoked from two different threads.\nPractically: I don't know. This is not my code. So I don't know all the details behind decision to make it thread safe.\nBut this way it's thread safe without side effects.", "url": "https://github.com/vaadin/flow/pull/9061#discussion_r494864334", "createdAt": "2020-09-25T09:27:45Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -188,8 +191,10 @@ public static DevModeHandler start(int runningPort,\n                 || !configuration.enableDevServer()) {\n             return null;\n         }\n-        atomicHandler.compareAndSet(null,\n-                createInstance(runningPort, configuration, npmFolder, waitFor));\n+        if (atomicHandler.get() == null) {\n+            atomicHandler.compareAndSet(null, createInstance(runningPort,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0OTcyNA=="}, "originalCommit": {"oid": "aa34ba3398b40860656881a85723d9b6642ba8cb"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3091, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}