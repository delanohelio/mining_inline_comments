{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxOTgyMzk0", "number": 8971, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoxMzoyMFrOEhjt6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNToyOToyN1rOEh9MCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjIzNjU4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendTools.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoxMzoyMFrOHO71aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTo1MToyMFrOHPN9GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMjQ0MA==", "bodyText": "Two issues here:\n\nskip version check is done after version check. Version check may throw an exception and skip will not skip.\nFrontendTools has been created to avoid static things like  FrontendUtils.skippingVersionCheck.\n\nskip version check flag should be passed to the FrontendTools  CTOR.\nFrontendUtils  as a helper class should contain only helper generic methods.\nEverything else should be a state of FrontendTools otherwise it goes to the same direction as  FrontendTools", "url": "https://github.com/vaadin/flow/pull/8971#discussion_r485422440", "createdAt": "2020-09-09T08:13:20Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendTools.java", "diffHunk": "@@ -676,32 +676,39 @@ private String getNonNull(String... valueArray) {\n         return returnCommand;\n     }\n \n-    private List<String> getSuitablePnpm(String dir) {\n+    List<String> getSuitablePnpm(String dir) {\n         final List<String> pnpmCommand = getPnpmExecutable(dir, false);\n-        if (!pnpmCommand.isEmpty()) {\n-            // check whether globally or locally installed pnpm is new enough\n-            try {\n-                List<String> versionCmd = new ArrayList<>(pnpmCommand);\n-                versionCmd.add(\"--version\"); // NOSONAR\n-                FrontendVersion pnpmVersion = FrontendUtils.getVersion(\"pnpm\",\n-                        versionCmd);\n-                if (FrontendUtils.isVersionAtLeast(pnpmVersion,\n-                        SUPPORTED_PNPM_VERSION)\n-                        && pnpmVersion.isOlderThan(BREAKING_PNPM_VERSION)) {\n+        if (pnpmCommand.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        // check whether globally or locally installed pnpm is new enough\n+        try {\n+            List<String> versionCmd = new ArrayList<>(pnpmCommand);\n+            versionCmd.add(\"--version\"); // NOSONAR\n+            FrontendVersion pnpmVersion = FrontendUtils.getVersion(\"pnpm\",\n+                    versionCmd);\n+            if (FrontendUtils.isVersionAtLeast(pnpmVersion,\n+                    SUPPORTED_PNPM_VERSION)\n+                    && pnpmVersion.isOlderThan(BREAKING_PNPM_VERSION)) {\n+                return pnpmCommand;\n+            } else {\n+                final String pnpmCommandString = String.join(\" \", pnpmCommand);\n+                getLogger().warn(\n+                        \"installed pnpm ('{}', version {}) is not in the compatible versions range (>={}, <{})\",\n+                        pnpmCommandString, pnpmVersion.getFullVersion(),\n+                        SUPPORTED_PNPM_VERSION.getFullVersion(),\n+                        BREAKING_PNPM_VERSION.getFullVersion());\n+                if (FrontendUtils.skippingVersionCheck()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f6d11ec18e20403205d41fc88aaf2301fae9a01"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxOTMyMQ==", "bodyText": "Good point! Now uses the found pnpm even if the version check failed (i.e., threw UnknownVersionException). Also removed the static method FrontendUtils::skippingVersionCheck, added ctor parameter, and moved the logic to FrontendTools.", "url": "https://github.com/vaadin/flow/pull/8971#discussion_r485719321", "createdAt": "2020-09-09T15:51:20Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendTools.java", "diffHunk": "@@ -676,32 +676,39 @@ private String getNonNull(String... valueArray) {\n         return returnCommand;\n     }\n \n-    private List<String> getSuitablePnpm(String dir) {\n+    List<String> getSuitablePnpm(String dir) {\n         final List<String> pnpmCommand = getPnpmExecutable(dir, false);\n-        if (!pnpmCommand.isEmpty()) {\n-            // check whether globally or locally installed pnpm is new enough\n-            try {\n-                List<String> versionCmd = new ArrayList<>(pnpmCommand);\n-                versionCmd.add(\"--version\"); // NOSONAR\n-                FrontendVersion pnpmVersion = FrontendUtils.getVersion(\"pnpm\",\n-                        versionCmd);\n-                if (FrontendUtils.isVersionAtLeast(pnpmVersion,\n-                        SUPPORTED_PNPM_VERSION)\n-                        && pnpmVersion.isOlderThan(BREAKING_PNPM_VERSION)) {\n+        if (pnpmCommand.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        // check whether globally or locally installed pnpm is new enough\n+        try {\n+            List<String> versionCmd = new ArrayList<>(pnpmCommand);\n+            versionCmd.add(\"--version\"); // NOSONAR\n+            FrontendVersion pnpmVersion = FrontendUtils.getVersion(\"pnpm\",\n+                    versionCmd);\n+            if (FrontendUtils.isVersionAtLeast(pnpmVersion,\n+                    SUPPORTED_PNPM_VERSION)\n+                    && pnpmVersion.isOlderThan(BREAKING_PNPM_VERSION)) {\n+                return pnpmCommand;\n+            } else {\n+                final String pnpmCommandString = String.join(\" \", pnpmCommand);\n+                getLogger().warn(\n+                        \"installed pnpm ('{}', version {}) is not in the compatible versions range (>={}, <{})\",\n+                        pnpmCommandString, pnpmVersion.getFullVersion(),\n+                        SUPPORTED_PNPM_VERSION.getFullVersion(),\n+                        BREAKING_PNPM_VERSION.getFullVersion());\n+                if (FrontendUtils.skippingVersionCheck()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMjQ0MA=="}, "originalCommit": {"oid": "0f6d11ec18e20403205d41fc88aaf2301fae9a01"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjI0NzQ2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/FrontendToolsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoxNjoxOVrOHO78Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTo1MTozMlrOHPN9ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyNDE4Ng==", "bodyText": "Making flag a parameter in the CTOR will allow to test FrontendTools  properly: without any system properties.\nEvery code which sets system property is not thread safe at least: the same property may be modified outside of this test at any time.", "url": "https://github.com/vaadin/flow/pull/8971#discussion_r485424186", "createdAt": "2020-09-09T08:16:19Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/FrontendToolsTest.java", "diffHunk": "@@ -489,6 +489,49 @@ public void should_useHomeNpmFirst() throws Exception {\n         assertNpmCommand(() -> vaadinHomeDir);\n     }\n \n+    @Test\n+    public void getSuitablePnpm_compatibleVersionInstalled_accepted() throws Exception {\n+        Assume.assumeFalse(\n+                tools.getNodeExecutable().isEmpty());\n+        createFakePnpm(\"4.5.0\");\n+        List<String> pnpmCommand = tools.getSuitablePnpm(baseDir);\n+        Assert.assertNotEquals(\"expected pnpm version 4.5.0 accepted\", 0,\n+                pnpmCommand.size());\n+    }\n+    @Test\n+    public void getSuitablePnpm_tooNewVersionInstalled_rejected() throws Exception {\n+        Assume.assumeFalse(\n+                tools.getNodeExecutable().isEmpty());\n+        createFakePnpm(\"5.5.0\");\n+        List<String> pnpmCommand = tools.getSuitablePnpm(baseDir);\n+        Assert.assertEquals(\"expected pnpm version 5.5.0 rejected\", 0,\n+                pnpmCommand.size());\n+    }\n+\n+    @Test\n+    public void getSuitablePnpm_tooNewVersionInstalledAndSkipVersionCheck_accepted()\n+            throws Exception {\n+        Assume.assumeFalse(\n+                tools.getNodeExecutable().isEmpty());\n+        String originalPropertyValue = System", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f6d11ec18e20403205d41fc88aaf2301fae9a01"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxOTQ1OQ==", "bodyText": "Done.", "url": "https://github.com/vaadin/flow/pull/8971#discussion_r485719459", "createdAt": "2020-09-09T15:51:32Z", "author": {"login": "joheriks"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/FrontendToolsTest.java", "diffHunk": "@@ -489,6 +489,49 @@ public void should_useHomeNpmFirst() throws Exception {\n         assertNpmCommand(() -> vaadinHomeDir);\n     }\n \n+    @Test\n+    public void getSuitablePnpm_compatibleVersionInstalled_accepted() throws Exception {\n+        Assume.assumeFalse(\n+                tools.getNodeExecutable().isEmpty());\n+        createFakePnpm(\"4.5.0\");\n+        List<String> pnpmCommand = tools.getSuitablePnpm(baseDir);\n+        Assert.assertNotEquals(\"expected pnpm version 4.5.0 accepted\", 0,\n+                pnpmCommand.size());\n+    }\n+    @Test\n+    public void getSuitablePnpm_tooNewVersionInstalled_rejected() throws Exception {\n+        Assume.assumeFalse(\n+                tools.getNodeExecutable().isEmpty());\n+        createFakePnpm(\"5.5.0\");\n+        List<String> pnpmCommand = tools.getSuitablePnpm(baseDir);\n+        Assert.assertEquals(\"expected pnpm version 5.5.0 rejected\", 0,\n+                pnpmCommand.size());\n+    }\n+\n+    @Test\n+    public void getSuitablePnpm_tooNewVersionInstalledAndSkipVersionCheck_accepted()\n+            throws Exception {\n+        Assume.assumeFalse(\n+                tools.getNodeExecutable().isEmpty());\n+        String originalPropertyValue = System", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyNDE4Ng=="}, "originalCommit": {"oid": "0f6d11ec18e20403205d41fc88aaf2301fae9a01"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDQwMzMzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendTools.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNToyNjowOVrOHPjj8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjo0MDowNVrOHPlKQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA3MzMzMA==", "bodyText": "I would avoid version check via getVersion  at all if it should be ignored anyway: it takes additional time\nand it may throw an exception whose catching is always more expensive than just check a condition.\nNot blocking though.\nThe only benefit from the current code is logging about failed version check but this is something we failed internally: the node of course has some version and we just not able to detect it. So it's an internal issue which will be ignored anyway. So I don't see why spend significant time on checking something which won't be used anyway.", "url": "https://github.com/vaadin/flow/pull/8971#discussion_r486073330", "createdAt": "2020-09-10T05:26:09Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendTools.java", "diffHunk": "@@ -297,10 +308,12 @@ public void validateNodeAndNpmVersion() {\n             List<String> nodeVersionCommand = new ArrayList<>();\n             nodeVersionCommand.add(getNodeExecutable());\n             nodeVersionCommand.add(\"--version\"); // NOSONAR\n-            FrontendVersion nodeVersion = FrontendUtils.getVersion(\"node\",\n+            FrontendVersion foundNodeVersion = FrontendUtils.getVersion(\"node\",\n                     nodeVersionCommand);\n-            FrontendUtils.validateToolVersion(\"node\", nodeVersion,\n-                    SUPPORTED_NODE_VERSION, SHOULD_WORK_NODE_VERSION);\n+            if (!ignoreVersionChecks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ec8b216bca3b8a224c2520a2a62fd838fc84701"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5OTUyMA==", "bodyText": "After more consideration, I agree. My initial line of thinking was that the log about incompatible pnpm would be good anyway. And it's \"ignore\" version checks rather than \"skip\" version checks. However, if one is setting this flag one probably knows what one is doing.", "url": "https://github.com/vaadin/flow/pull/8971#discussion_r486099520", "createdAt": "2020-09-10T06:40:05Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendTools.java", "diffHunk": "@@ -297,10 +308,12 @@ public void validateNodeAndNpmVersion() {\n             List<String> nodeVersionCommand = new ArrayList<>();\n             nodeVersionCommand.add(getNodeExecutable());\n             nodeVersionCommand.add(\"--version\"); // NOSONAR\n-            FrontendVersion nodeVersion = FrontendUtils.getVersion(\"node\",\n+            FrontendVersion foundNodeVersion = FrontendUtils.getVersion(\"node\",\n                     nodeVersionCommand);\n-            FrontendUtils.validateToolVersion(\"node\", nodeVersion,\n-                    SUPPORTED_NODE_VERSION, SHOULD_WORK_NODE_VERSION);\n+            if (!ignoreVersionChecks) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA3MzMzMA=="}, "originalCommit": {"oid": "5ec8b216bca3b8a224c2520a2a62fd838fc84701"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDQwOTY5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendTools.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNToyOToyN1rOHPjnhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjo0MDoxMVrOHPlKdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA3NDI0NQ==", "bodyText": "Same here: check is done after attempt to get a version and check whether it's good enough.\nWhy just don't return immediately without any checks in case  ignoreVersionChecks?", "url": "https://github.com/vaadin/flow/pull/8971#discussion_r486074245", "createdAt": "2020-09-10T05:29:27Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendTools.java", "diffHunk": "@@ -676,34 +691,42 @@ private String getNonNull(String... valueArray) {\n         return returnCommand;\n     }\n \n-    private List<String> getSuitablePnpm(String dir) {\n+    List<String> getSuitablePnpm(String dir) {\n         final List<String> pnpmCommand = getPnpmExecutable(dir, false);\n-        if (!pnpmCommand.isEmpty()) {\n-            // check whether globally or locally installed pnpm is new enough\n-            try {\n-                List<String> versionCmd = new ArrayList<>(pnpmCommand);\n-                versionCmd.add(\"--version\"); // NOSONAR\n-                FrontendVersion pnpmVersion = FrontendUtils.getVersion(\"pnpm\",\n-                        versionCmd);\n-                if (FrontendUtils.isVersionAtLeast(pnpmVersion,\n-                        SUPPORTED_PNPM_VERSION)\n-                        && pnpmVersion.isOlderThan(BREAKING_PNPM_VERSION)) {\n-                    return pnpmCommand;\n-                } else {\n-                    getLogger().warn(String.format(\n-                            \"installed pnpm ('%s', version %s) is not in the compatible versions range (>=%s, <%s), installing supported version locally\",\n-                            String.join(\" \", pnpmCommand),\n-                            pnpmVersion.getFullVersion(),\n-                            SUPPORTED_PNPM_VERSION.getFullVersion(),\n-                            BREAKING_PNPM_VERSION.getFullVersion()));\n-                }\n-            } catch (UnknownVersionException e) {\n+        if (pnpmCommand.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        final String pnpmCommandString = String.join(\" \", pnpmCommand);\n+        // check whether globally or locally installed pnpm is new enough\n+        try {\n+            List<String> versionCmd = new ArrayList<>(pnpmCommand);\n+            versionCmd.add(\"--version\"); // NOSONAR\n+            FrontendVersion pnpmVersion = FrontendUtils.getVersion(\"pnpm\",\n+                    versionCmd);\n+            if (FrontendUtils.isVersionAtLeast(pnpmVersion,\n+                    SUPPORTED_PNPM_VERSION)\n+                    && pnpmVersion.isOlderThan(BREAKING_PNPM_VERSION)) {\n+                return pnpmCommand;\n+            } else {\n                 getLogger().warn(\n-                        \"Error checking pnpm version, installing pnpm locally\",\n-                        e);\n+                        \"installed pnpm ('{}', version {}) is not in the compatible versions range (>={}, <{})\",\n+                        pnpmCommandString, pnpmVersion.getFullVersion(),\n+                        SUPPORTED_PNPM_VERSION.getFullVersion(),\n+                        BREAKING_PNPM_VERSION.getFullVersion());\n             }\n+        } catch (UnknownVersionException e) {\n+            getLogger().warn(\"error checking pnpm version\", e);\n+        }\n+        if (ignoreVersionChecks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ec8b216bca3b8a224c2520a2a62fd838fc84701"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5OTU3Mw==", "bodyText": "Done.", "url": "https://github.com/vaadin/flow/pull/8971#discussion_r486099573", "createdAt": "2020-09-10T06:40:11Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendTools.java", "diffHunk": "@@ -676,34 +691,42 @@ private String getNonNull(String... valueArray) {\n         return returnCommand;\n     }\n \n-    private List<String> getSuitablePnpm(String dir) {\n+    List<String> getSuitablePnpm(String dir) {\n         final List<String> pnpmCommand = getPnpmExecutable(dir, false);\n-        if (!pnpmCommand.isEmpty()) {\n-            // check whether globally or locally installed pnpm is new enough\n-            try {\n-                List<String> versionCmd = new ArrayList<>(pnpmCommand);\n-                versionCmd.add(\"--version\"); // NOSONAR\n-                FrontendVersion pnpmVersion = FrontendUtils.getVersion(\"pnpm\",\n-                        versionCmd);\n-                if (FrontendUtils.isVersionAtLeast(pnpmVersion,\n-                        SUPPORTED_PNPM_VERSION)\n-                        && pnpmVersion.isOlderThan(BREAKING_PNPM_VERSION)) {\n-                    return pnpmCommand;\n-                } else {\n-                    getLogger().warn(String.format(\n-                            \"installed pnpm ('%s', version %s) is not in the compatible versions range (>=%s, <%s), installing supported version locally\",\n-                            String.join(\" \", pnpmCommand),\n-                            pnpmVersion.getFullVersion(),\n-                            SUPPORTED_PNPM_VERSION.getFullVersion(),\n-                            BREAKING_PNPM_VERSION.getFullVersion()));\n-                }\n-            } catch (UnknownVersionException e) {\n+        if (pnpmCommand.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        final String pnpmCommandString = String.join(\" \", pnpmCommand);\n+        // check whether globally or locally installed pnpm is new enough\n+        try {\n+            List<String> versionCmd = new ArrayList<>(pnpmCommand);\n+            versionCmd.add(\"--version\"); // NOSONAR\n+            FrontendVersion pnpmVersion = FrontendUtils.getVersion(\"pnpm\",\n+                    versionCmd);\n+            if (FrontendUtils.isVersionAtLeast(pnpmVersion,\n+                    SUPPORTED_PNPM_VERSION)\n+                    && pnpmVersion.isOlderThan(BREAKING_PNPM_VERSION)) {\n+                return pnpmCommand;\n+            } else {\n                 getLogger().warn(\n-                        \"Error checking pnpm version, installing pnpm locally\",\n-                        e);\n+                        \"installed pnpm ('{}', version {}) is not in the compatible versions range (>={}, <{})\",\n+                        pnpmCommandString, pnpmVersion.getFullVersion(),\n+                        SUPPORTED_PNPM_VERSION.getFullVersion(),\n+                        BREAKING_PNPM_VERSION.getFullVersion());\n             }\n+        } catch (UnknownVersionException e) {\n+            getLogger().warn(\"error checking pnpm version\", e);\n+        }\n+        if (ignoreVersionChecks) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA3NDI0NQ=="}, "originalCommit": {"oid": "5ec8b216bca3b8a224c2520a2a62fd838fc84701"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3235, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}