{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTE4MDU5", "number": 7608, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoxNDozNFrODhH7bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoxMDozM1rODwTOLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDU5NTAwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/BeforeEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoxNDozNVrOFrtjkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoxNDozNVrOFrtjkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM3OTQ3NQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r381379475", "createdAt": "2020-02-19T16:14:35Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/BeforeEvent.java", "diffHunk": "@@ -381,12 +470,32 @@ public void rerouteTo(String route) {\n      * Get the URL parameters of the forward target.\n      *\n      * @return URL parameters of forward target\n+     * @deprecated use {@link #getForwardTargetUrlParameters()} instead.\n      */\n+    @Deprecated\n     public List<String> getForwardTargetParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa815a10835531ea699c6f1dfc646ea8f87ab9d5"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDU5NTA5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/BeforeEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoxNDozNlrOFrtjoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoxNDozNlrOFrtjoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM3OTQ4OQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r381379489", "createdAt": "2020-02-19T16:14:36Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/BeforeEvent.java", "diffHunk": "@@ -412,12 +521,32 @@ public void rerouteTo(String route) {\n      * Get the URL parameters of the reroute target.\n      *\n      * @return URL parameters of reroute target\n+     * @deprecated use {@link #getRerouteTargetUrlParameters()} instead.\n      */\n+    @Deprecated\n     public List<String> getRerouteTargetParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa815a10835531ea699c6f1dfc646ea8f87ab9d5"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTI0ODEwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/NavigationStateBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNToyMzo1NVrOFsXswg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNToyMzo1NVrOFsXswg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA2OTk1NA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r382069954", "createdAt": "2020-02-20T15:23:55Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/NavigationStateBuilder.java", "diffHunk": "@@ -51,7 +52,9 @@ public NavigationStateBuilder(Router router) {\n      * @param urlParameters\n      *            the url parameter of the navigation target\n      * @return this builder, for chaining\n+     * @deprecated use {@link #withTarget(Class, UrlParameters)} instead.\n      */\n+    @Deprecated\n     public NavigationStateBuilder withTarget(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ae552e90c618f79a987984f5a4a8ff4a55db3d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTE3MjkzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteBaseData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDo0MDo0MVrOFxoNRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDo0MDo0MVrOFxoNRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MzMwMw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r387583303", "createdAt": "2020-03-04T10:40:41Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteBaseData.java", "diffHunk": "@@ -85,17 +119,41 @@ public RouteBaseData(List<Class<? extends RouterLayout>> parentLayouts,\n      * Get the full route url of {@link Route}.\n      *\n      * @return route url\n+     * @deprecated use {@link #getUrlTemplate()} instead.\n      */\n+    @Deprecated\n     public String getUrl() {\n-        return url;\n+        return urlTemplate;\n     }\n \n     /**\n-     * Get {@link Route} url parameters if any.\n+     * Get the full route url of {@link Route}.\n+     *\n+     * @return route url template.\n+     */\n+    public String getUrlTemplate() {\n+        return urlTemplate;\n+    }\n+\n+    /**\n+     * This method will throw {@link UnsupportedOperationException}.\n      *\n      * @return url parameters (by type and in order)\n+     * @throws UnsupportedOperationException\n+     * @deprecated use {@link #getDefinedParameters()} instead.\n      */\n+    @Deprecated\n     public List<Class<?>> getParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0986dda47f1f6f50bbb75c5ebbd06762939a08c"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTE3MzAyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteBaseData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDo0MDo0MlrOFxoNUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDo0MDo0MlrOFxoNUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MzMxMw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r387583313", "createdAt": "2020-03-04T10:40:42Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteBaseData.java", "diffHunk": "@@ -85,17 +119,41 @@ public RouteBaseData(List<Class<? extends RouterLayout>> parentLayouts,\n      * Get the full route url of {@link Route}.\n      *\n      * @return route url\n+     * @deprecated use {@link #getUrlTemplate()} instead.\n      */\n+    @Deprecated\n     public String getUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0986dda47f1f6f50bbb75c5ebbd06762939a08c"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTY2MTAwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/RouteFormat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzo0ODoxN1rOGBG9Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzo0ODoxN1rOGBG9Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxNTY4Ng==", "bodyText": "Replace this if-then-else statement by a single return statement.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r403815686", "createdAt": "2020-04-06T03:48:17Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/RouteFormat.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.router.internal;\n+\n+import java.io.Serializable;\n+import java.util.Set;\n+\n+import com.vaadin.flow.router.RouteParameterFormatOption;\n+import com.vaadin.flow.router.RouteParameterRegex;\n+\n+/**\n+ * Utility class which contains various methods for defining url parameter\n+ * template.\n+ */\n+class RouteFormat implements Serializable {\n+\n+    static final String INTEGER_REGEX = RouteParameterRegex.INTEGER;\n+    static final String LONG_REGEX = RouteParameterRegex.LONG;\n+    static final String BOOLEAN_REGEX = RouteParameterRegex.BOOLEAN;\n+    static final String STRING_REGEX = \"\";\n+\n+    /**\n+     * Returns whether the specified urlTemplate contains url parameters.\n+     *\n+     * @param urlTemplate\n+     *            a url template.\n+     * @return true if the specified urlTemplate contains url parameters,\n+     *         otherwise false.\n+     */\n+    static boolean hasParameters(String urlTemplate) {\n+        return urlTemplate.contains(\":\");\n+    }\n+\n+    /**\n+     * Returns whether the specified urlTemplate contains url parameters.\n+     *\n+     * @param urlTemplate\n+     *            a url template.\n+     * @return true if the specified urlTemplate contains url parameters,\n+     *         otherwise false.\n+     */\n+    static boolean hasRequiredParameter(String urlTemplate) {\n+        int index = -1;\n+        do {\n+            index = urlTemplate.indexOf(\":\", index + 1);\n+\n+            if (index >= 0) {\n+                final int regexIndex = urlTemplate.indexOf(\"(\", index);\n+                final int slashIndex = urlTemplate.indexOf(\"/\", index);\n+\n+                int parameterNameEnding = Math.min(regexIndex, slashIndex);\n+\n+                // Missing regex.\n+                if (parameterNameEnding < 0) {\n+                    parameterNameEnding = slashIndex;\n+                }\n+                // End of the string.\n+                if (parameterNameEnding < 0) {\n+                    parameterNameEnding = urlTemplate.length();\n+                }\n+\n+                int optional = urlTemplate.indexOf(\"?\", index);\n+                if (0 < optional && optional < parameterNameEnding) {\n+                    // This parameter is an optional, move on.\n+                    continue;\n+                }\n+\n+                int wildcard = urlTemplate.indexOf(\"*\", index);\n+                if (0 < wildcard && wildcard < parameterNameEnding) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8463135208ea15091d7dea2b705a4883154487"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTY2NjYyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzo1MjowN1rOGBHAFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzo1MjowN1rOGBHAFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxNjQ3MQ==", "bodyText": "Either log or rethrow this exception.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r403816471", "createdAt": "2020-04-06T03:52:07Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "diffHunk": "@@ -110,57 +133,115 @@ public ConfiguredRoutes(ConfigureRoutes original) {\n      * See if configuration contains a registered route for given path.\n      *\n      * @param path\n-     *         path to check\n+     *            path to check\n      * @return true if configuration contains route\n      */\n     public boolean hasRoute(String path) {\n-        return getRoutesMap().containsKey(path);\n+        return hasUrlTemplate(path);\n+    }\n+\n+    /**\n+     * See if configuration contains a registered route for given url template.\n+     *\n+     * @param urlTemplate\n+     *            url template to check\n+     * @return true if configuration contains route\n+     */\n+    public boolean hasUrlTemplate(String urlTemplate) {\n+        return getRoutesMap().containsKey(urlTemplate);\n     }\n \n     /**\n      * Check if configuration holds a route for given path with possible path\n      * segments.\n      *\n-     * @param pathString\n-     *         path string to check\n+     * @param path\n+     *            path string to check\n      * @param segments\n-     *         path segments for route\n+     *            path segments for route\n      * @return true if a route is found, else false\n      */\n-    public boolean hasRoute(String pathString, List<String> segments) {\n-        if (hasRoute(pathString)) {\n-            return getRouteTarget(pathString).getTarget(segments) != null;\n-        }\n-        return false;\n+    public boolean hasRoute(String path, List<String> segments) {\n+        return getNavigationRouteTarget(PathUtil.getPath(path, segments))\n+                .hasTarget();\n     }\n \n     /**\n      * Check it the given route target has been registered to the configuration.\n      *\n-     * @param targetRoute\n-     *         target to check registration status for\n+     * @param target\n+     *            target to check registration status for\n      * @return true if target is found in configuration\n      */\n-    public boolean hasRouteTarget(Class<? extends Component> targetRoute) {\n-        return getTargetRoutes().containsKey(targetRoute);\n+    public boolean hasRouteTarget(Class<? extends Component> target) {\n+        return getTargetRoutes().containsKey(target);\n+    }\n+\n+    /**\n+     * Search for a route target using given navigation <code>url</code>\n+     * argument.\n+     *\n+     * @param url\n+     *            the navigation url used to search a route target.\n+     * @return a {@link NavigationRouteTarget} instance containing the\n+     *         {@link RouteTarget} and {@link RouteParameters} extracted from the\n+     *         <code>url</code> argument according with the route configuration.\n+     */\n+    public NavigationRouteTarget getNavigationRouteTarget(String url) {\n+        return getRouteModel().getNavigationRouteTarget(url);\n+    }\n+\n+    /**\n+     * Gets the {@link RouteTarget} instance matching the given target component\n+     * and route parameters.\n+     *\n+     * @param target\n+     *            a component class which is a navigation target.\n+     * @param parameters\n+     *            parameter values that may be used with given target.\n+     * @return the {@link RouteTarget} instance matching the given target\n+     *         component and route parameters.\n+     */\n+    public RouteTarget getRouteTarget(Class<? extends Component> target,\n+                                      RouteParameters parameters) {\n+        return iterateUrlTemplates(target, urlTemplate -> {\n+            try {\n+                return getRouteModel().getRouteTarget(urlTemplate, parameters);\n+            } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b69531b906759be1a04a2fcb8c41625df3d909b"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTY2NjY2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzo1MjowOFrOGBHAHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzo1MjowOFrOGBHAHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxNjQ3Ng==", "bodyText": "Either log or rethrow this exception.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r403816476", "createdAt": "2020-04-06T03:52:08Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "diffHunk": "@@ -173,30 +254,133 @@ public boolean hasRouteTarget(Class<? extends Component> targetRoute) {\n     }\n \n     /**\n-     * Get all registered target routes for this configuration.\n+     * Get all registered target routes for this configuration mapping the main\n+     * url template.\n      *\n      * @return component-to-path map of all target routes\n      */\n     public Map<Class<? extends Component>, String> getTargetRoutes() {\n-        return targetRoutes;\n+        return targetToPath;\n+    }\n+\n+    /**\n+     * Get all registered target routes for this configuration.\n+     *\n+     * @return component-to-path map of all target routes\n+     */\n+    Map<Class<? extends Component>, RouteModel> getTargetRouteModels() {\n+        return targetRouteModels;\n+    }\n+\n+    /**\n+     * Make a copy of the target and route models mapping.\n+     * \n+     * @return a copy of the target and route models mapping.\n+     */\n+    protected final Map<Class<? extends Component>, RouteModel> copyTargetRouteModels(\n+            boolean mutable) {\n+        Map<Class<? extends Component>, RouteModel> copyMap = new HashMap<>();\n+        this.getTargetRouteModels().entrySet().forEach(entry -> copyMap\n+                .put(entry.getKey(), RouteModel.copy(entry.getValue(), mutable)));\n+        return copyMap;\n     }\n \n     /**\n-     * Get the route path String for the given navigation target class.\n+     * Get the route url template String for the given navigation target class.\n      *\n      * @param navigationTarget\n-     *         navigationTarget to get registered route for\n+     *            navigationTarget to get registered route for\n      * @return base route string if target class found\n      */\n     public String getTargetRoute(Class<? extends Component> navigationTarget) {\n+        return getUrlTemplate(navigationTarget);\n+    }\n+\n+    /**\n+     * Get the route url template String for the given navigation target class.\n+     *\n+     * @param navigationTarget\n+     *            navigationTarget to get registered route for\n+     * @return base route string if target class found\n+     */\n+    public String getUrlTemplate(Class<? extends Component> navigationTarget) {\n         return getTargetRoutes().get(navigationTarget);\n     }\n \n+    /**\n+     * Get the route url template String for the given navigation target class\n+     * and using the specified parameters format.\n+     *\n+     * @param navigationTarget\n+     *            navigationTarget to get registered route for\n+     * @param format\n+     *            settings used to format the result parameters. If all of\n+     *            {@link RouteParameterFormatOption#NAME},\n+     *            {@link RouteParameterFormatOption#MODIFIER} and\n+     *            {@link RouteParameterFormatOption#REGEX} are provided, the\n+     *            unformatted url template will be provided.\n+     * @return base route string if target class found\n+     */\n+    public String getUrlTemplate(Class<? extends Component> navigationTarget,\n+            Set<RouteParameterFormatOption> format) {\n+        final String urlTemplate = getUrlTemplate(navigationTarget);\n+        if (urlTemplate == null) {\n+            return null;\n+        }\n+\n+        return getRouteModel().formatUrlTemplate(urlTemplate, format);\n+    }\n+\n+    /**\n+     * Get the url path String for the given navigation target class.\n+     *\n+     * @param navigationTarget\n+     *            navigationTarget to get registered route for\n+     * @return route string if target class found\n+     */\n+    public String getTargetUrl(Class<? extends Component> navigationTarget) {\n+        return iterateUrlTemplates(navigationTarget, urlTemplate -> {\n+            if (RouteFormat.hasRequiredParameter(urlTemplate)) {\n+                return null;\n+\n+            } else if (RouteFormat.hasParameters(urlTemplate)) {\n+                // In case all parameters are optional or wildcard, this will\n+                // return successfully.\n+                return getRouteModel().getUrl(urlTemplate,\n+                        RouteParameters.empty());\n+            }\n+\n+            return urlTemplate;\n+        });\n+    }\n+\n+    /**\n+     * Get the url path String for the given navigation target class and\n+     * parameters.\n+     *\n+     * @param navigationTarget\n+     *            navigationTarget to get registered route for\n+     * @param parameters\n+     *            route parameters\n+     * @return url String populated with parameters for the given\n+     *         navigationTarget\n+     */\n+    public String getTargetUrl(Class<? extends Component> navigationTarget,\n+            RouteParameters parameters) {\n+        return iterateUrlTemplates(navigationTarget, urlTemplate -> {\n+            try {\n+                return getRouteModel().getUrl(urlTemplate, parameters);\n+            } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b69531b906759be1a04a2fcb8c41625df3d909b"}, "originalPosition": 399}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTY2NjY3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzo1MjowOVrOGBHAHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzo1MjowOVrOGBHAHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxNjQ3OA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r403816478", "createdAt": "2020-04-06T03:52:09Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "diffHunk": "@@ -210,33 +394,74 @@ public String getTargetRoute(Class<? extends Component> navigationTarget) {\n      * @return all registered exception handlers\n      */\n     public Map<Class<? extends Exception>, Class<? extends Component>> getExceptionHandlers() {\n-        return exceptionTargets;\n+        return exceptionToTarget;\n     }\n \n     /**\n      * Return the parent layout chain for given navigation target on the target\n      * path.\n      *\n      * @param path\n-     *         path to get parent layout chain for\n+     *            path to get parent layout chain for.\n      * @param navigationTarget\n-     *         navigation target on path to get parent layout chain for\n-     * @return list of parent layout chain\n+     *            navigation target on path to get parent layout chain for.\n+     * @return list of parent layout chain.\n+     * @deprecated use {@link #getNavigationRouteTarget(String)} instead.\n      */\n+    @Deprecated\n     public List<Class<? extends RouterLayout>> getParentLayouts(String path,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b69531b906759be1a04a2fcb8c41625df3d909b"}, "originalPosition": 437}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTMyNTE5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDoyOTo1OFrOGB9OfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDoyOTo1OFrOGB9OfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcwNDg5Mw==", "bodyText": "Remove useless curly braces around statement", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r404704893", "createdAt": "2020-04-07T10:29:58Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java", "diffHunk": "@@ -238,136 +249,117 @@ public ConfiguredRoutes getConfiguration() {\n     }\n \n     private List<Class<? extends RouterLayout>> getParentLayouts(\n-            ConfiguredRoutes configuration, Class<? extends Component> target,\n-            String url) {\n-        RouteTarget routeTarget = configuration.getRouteTarget(url);\n+            ConfiguredRoutes configuration, String template) {\n+        RouteTarget routeTarget = configuration.getRouteTarget(template);\n         if (routeTarget != null) {\n-            return routeTarget.getParentLayouts(target);\n+            return routeTarget.getParentLayouts();\n         }\n         return Collections.emptyList();\n     }\n \n+    /**\n+     * @deprecated use {@link #getNavigationRouteTarget(String)} instead.\n+     */\n     @Override\n-    public List<Class<? extends RouterLayout>> getRouteLayouts(String path,\n+    @Deprecated\n+    public List<Class<? extends RouterLayout>> getRouteLayouts(String url,\n             Class<? extends Component> navigationTarget) {\n-        if (getConfiguration().hasRoute(path)) {\n-            return getConfiguration().getParentLayouts(path, navigationTarget);\n-        }\n-        return Collections.emptyList();\n+        return getConfiguration().getParentLayouts(url, navigationTarget);\n     }\n \n-    private List<Class<?>> getRouteParameters(\n-            Class<? extends Component> target) {\n-        List<Class<?>> parameters = new ArrayList<>();\n-        if (HasUrlParameter.class.isAssignableFrom(target)) {\n-            Class<?> genericInterfaceType = ReflectTools\n-                    .getGenericInterfaceType(target, HasUrlParameter.class);\n-            parameters.add(genericInterfaceType);\n-        }\n+    @Override\n+    public Optional<String> getTargetUrl(\n+            Class<? extends Component> navigationTarget) {\n+        Objects.requireNonNull(navigationTarget, TARGET_MUST_NOT_BE_NULL);\n+\n+        HasUrlParameterFormat.checkMandatoryParameter(navigationTarget, null);\n \n-        return parameters;\n+        return Optional.ofNullable(\n+                getConfiguration().getTargetUrl(navigationTarget));\n     }\n \n     @Override\n     public Optional<String> getTargetUrl(\n-            Class<? extends Component> navigationTarget) {\n-        Objects.requireNonNull(navigationTarget, \"Target must not be null.\");\n-        return Optional.ofNullable(collectRequiredParameters(navigationTarget));\n+            Class<? extends Component> navigationTarget,\n+            RouteParameters parameters) {\n+        Objects.requireNonNull(navigationTarget, TARGET_MUST_NOT_BE_NULL);\n+\n+        HasUrlParameterFormat.checkMandatoryParameter(navigationTarget,\n+                parameters);\n+\n+        return Optional.ofNullable(getConfiguration()\n+                .getTargetUrl(navigationTarget, parameters));\n     }\n \n-    /**\n-     * Append any required parameters as /{param_class} to the route.\n-     *\n-     * @param navigationTarget\n-     *            navigation target to generate url for\n-     * @return route with required parameters\n-     */\n-    private String collectRequiredParameters(\n+    @Override\n+    public Optional<String> getTemplate(\n             Class<? extends Component> navigationTarget) {\n-        if (!getConfiguration().hasRouteTarget(navigationTarget)) {\n-            return null;\n-        }\n-        StringBuilder route = new StringBuilder(\n-                getConfiguration().getTargetRoute(navigationTarget));\n+        Objects.requireNonNull(navigationTarget, TARGET_MUST_NOT_BE_NULL);\n \n-        List<Class<?>> routeParameters = getRouteParameters(navigationTarget);\n-\n-        if (!routeParameters.isEmpty()) {\n-            routeParameters.forEach(param -> route.append(\"/{\")\n-                    .append(param.getSimpleName()).append(\"}\"));\n-        }\n-        return route.toString();\n+        return Optional.ofNullable(\n+                getConfiguration().getTemplate(navigationTarget));\n     }\n \n     @Override\n-    public void setRoute(String path,\n+    public void setRoute(String template,\n             Class<? extends Component> navigationTarget,\n             List<Class<? extends RouterLayout>> parentChain) {\n-        configure(configuration -> {\n-            RouteTarget routeTarget = addRouteToConfiguration(path,\n-                    navigationTarget, configuration);\n-            routeTarget.setParentLayouts(navigationTarget, parentChain);\n-        });\n+        configureSafe(template, navigationTarget,\n+                (configuration, fullTemplate) -> configuration\n+                        .setRoute(fullTemplate, navigationTarget, parentChain));\n     }\n \n     @Override\n-    public void removeRoute(Class<? extends Component> routeTarget) {\n-        if (!getConfiguration().hasRouteTarget(routeTarget)) {\n+    public void removeRoute(Class<? extends Component> navigationTarget) {\n+        if (!getConfiguration().hasRouteTarget(navigationTarget)) {\n             return;\n         }\n-        configure(configuration -> configuration.removeRoute(routeTarget));\n+        configureSafe(configuration -> configuration.removeRoute(navigationTarget));\n     }\n \n     @Override\n     public void removeRoute(String path) {\n-        if (!getConfiguration().hasRoute(path)) {\n+        if (!getConfiguration().hasTemplate(path)) {\n             return;\n         }\n-        configure(configuration -> configuration.removeRoute(path));\n+        configureSafe(configuration -> configuration.removeRoute(path));\n     }\n \n     @Override\n     public void removeRoute(String path,\n             Class<? extends Component> navigationTarget) {\n-        if (!getConfiguration().hasRoute(path)) {\n+        if (!getConfiguration().hasTemplate(path)) {\n             return;\n         }\n-        configure(configuration -> configuration.removeRoute(path,\n-                navigationTarget));\n+        configureSafe(path, navigationTarget,\n+                (configuration, fullTemplate) -> configuration\n+                        .removeRoute(fullTemplate, navigationTarget));\n     }\n \n     @Override\n     public void clean() {\n         configure(ConfigureRoutes::clear);\n     }\n \n-    /**\n-     * This adds a new route path to the configuration.\n-     * <p>\n-     * Note! this should only be called from a configure() for thread safety.\n-     *\n-     * @param path\n-     *            path for the navigation target\n-     * @param navigationTarget\n-     *            navigation target for given path\n-     * @param configuration\n-     *            mutable configuration object\n-     * @return the route target to which the target was added\n-     */\n-    private RouteTarget addRouteToConfiguration(String path,\n+    private void configureSafe(String path,\n             Class<? extends Component> navigationTarget,\n-            ConfigureRoutes configuration) {\n-        if (!hasLock()) {\n-            throw new IllegalStateException(\n-                    \"addRouteToConfiguration requires the registry lock and a mutable configuration.\");\n-        }\n+            TemplateConfiguration templateConfiguration) {\n+        requireLock();\n+        configure(configuration -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49cf494d6e20f3e2f474516f36a29ac2591d09a8"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTMyNTI1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDoyOTo1OFrOGB9Ohw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDoyOTo1OFrOGB9Ohw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcwNDkwMw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r404704903", "createdAt": "2020-04-07T10:29:58Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteConfiguration.java", "diffHunk": "@@ -115,17 +111,30 @@ public static RouteConfiguration forRegistry(RouteRegistry registry) {\n      * @param path\n      *         path to check for route registration\n      * @return true if there exists a route for the given path\n+     * @deprecated Use {@link #isPathAvailable(String)}\n      */\n+    @Deprecated\n     public boolean isPathRegistered(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49cf494d6e20f3e2f474516f36a29ac2591d09a8"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTMyNTQwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/RouteFormat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDozMDowMlrOGB9Oog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDozMDowMlrOGB9Oog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcwNDkzMA==", "bodyText": "Refactor this method to reduce its Cognitive Complexity from 18 to the 15 allowed.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r404704930", "createdAt": "2020-04-07T10:30:02Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/RouteFormat.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.router.internal;\n+\n+import java.io.Serializable;\n+import java.util.Set;\n+\n+import com.vaadin.flow.router.RouteParameterFormatOption;\n+import com.vaadin.flow.router.RouteParameterRegex;\n+\n+/**\n+ * Utility class which contains various methods for defining url parameter\n+ * template.\n+ * <p>\n+ * For internal use only. May be renamed or removed in a future release.\n+ */\n+class RouteFormat implements Serializable {\n+\n+    static final String INTEGER_REGEX = RouteParameterRegex.INTEGER;\n+    static final String LONG_REGEX = RouteParameterRegex.LONG;\n+    static final String BOOLEAN_REGEX = RouteParameterRegex.BOOLEAN;\n+    static final String STRING_REGEX = \"\";\n+\n+    /**\n+     * Returns whether the specified template contains route parameters.\n+     *\n+     * @param template\n+     *            a template.\n+     * @return true if the specified template contains route parameters,\n+     *         otherwise false.\n+     */\n+    static boolean hasParameters(String template) {\n+        return template.contains(\":\");\n+    }\n+\n+    /**\n+     * Returns whether the specified template contains route parameters.\n+     *\n+     * @param template\n+     *            a template.\n+     * @return true if the specified template contains route parameters,\n+     *         otherwise false.\n+     */\n+    static boolean hasRequiredParameter(String template) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49cf494d6e20f3e2f474516f36a29ac2591d09a8"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjA5MzQ5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozOToxNVrOGCrPBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozOToxNVrOGCrPBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODY5NQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r405458695", "createdAt": "2020-04-08T11:39:15Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java", "diffHunk": "@@ -238,89 +249,81 @@ public ConfiguredRoutes getConfiguration() {\n     }\n \n     private List<Class<? extends RouterLayout>> getParentLayouts(\n-            ConfiguredRoutes configuration, Class<? extends Component> target,\n-            String url) {\n-        RouteTarget routeTarget = configuration.getRouteTarget(url);\n+            ConfiguredRoutes configuration, String template) {\n+        RouteTarget routeTarget = configuration.getRouteTarget(template);\n         if (routeTarget != null) {\n-            return routeTarget.getParentLayouts(target);\n+            return routeTarget.getParentLayouts();\n         }\n         return Collections.emptyList();\n     }\n \n+    /**\n+     * @deprecated instead use {@link #getNavigationRouteTarget(String)} and\n+     *             retrieve the list of route layouts from the\n+     *             {@link RouteTarget} contained in the\n+     *             {@link NavigationRouteTarget}.\n+     * @see RouteTarget#getParentLayouts()\n+     */\n     @Override\n+    @Deprecated\n     public List<Class<? extends RouterLayout>> getRouteLayouts(String path,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dcba8a7eec8ae8736a655c0172682fcd46b4dc3"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjA5MzUzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/SessionRouteRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozOToxNlrOGCrPDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozOToxNlrOGCrPDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODcwMw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r405458703", "createdAt": "2020-04-08T11:39:16Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/SessionRouteRegistry.java", "diffHunk": "@@ -143,47 +146,101 @@ public Registration addRoutesChangeListener(\n     }\n \n     @Override\n-    public Optional<Class<? extends Component>> getNavigationTarget(\n-            String pathString) {\n-        Objects.requireNonNull(pathString, \"pathString must not be null.\");\n-        Optional<Class<? extends Component>> navigationTarget = getNavigationTarget(\n-                pathString, Collections.emptyList());\n+    public NavigationRouteTarget getNavigationRouteTarget(String url) {\n+        final NavigationRouteTarget navigationRouteTarget = getConfiguration()\n+                .getNavigationRouteTarget(url);\n+        if (navigationRouteTarget.hasTarget()) {\n+            return navigationRouteTarget;\n+        }\n+        return getParentRegistry().getNavigationRouteTarget(url);\n+    }\n \n-        if (navigationTarget.isPresent()) {\n-            return navigationTarget;\n+    @Override\n+    public RouteTarget getRouteTarget(Class<? extends Component> target,\n+                                      RouteParameters parameters) {\n+        final RouteTarget routeTarget = getConfiguration()\n+                .getRouteTarget(target, parameters);\n+        if (routeTarget != null) {\n+            return routeTarget;\n         }\n+        return getParentRegistry().getRouteTarget(target, parameters);\n+    }\n \n-        return getParentRegistry().getNavigationTarget(pathString);\n+    @Override\n+    public Optional<Class<? extends Component>> getNavigationTarget(\n+            String url) {\n+        Objects.requireNonNull(url, \"pathString must not be null.\");\n+        final Optional<Class<? extends Component>> target = getConfiguration()\n+                .getTarget(url);\n+        if (target.isPresent()) {\n+            return target;\n+        }\n+\n+        return getParentRegistry().getNavigationTarget(url);\n     }\n \n     @Override\n     public Optional<Class<? extends Component>> getNavigationTarget(\n-            String pathString, List<String> segments) {\n-        Objects.requireNonNull(pathString, \"pathString must not be null.\");\n-        if (getConfiguration().hasRoute(pathString, segments)) {\n-            return getConfiguration().getRoute(pathString, segments);\n+            String url, List<String> segments) {\n+        Objects.requireNonNull(url, \"pathString must not be null.\");\n+        final Optional<Class<? extends Component>> target = getConfiguration()\n+                .getTarget(PathUtil.getPath(url, segments));\n+        if (target.isPresent()) {\n+            return target;\n         }\n \n-        return getParentRegistry().getNavigationTarget(pathString, segments);\n+        return getParentRegistry().getNavigationTarget(url, segments);\n     }\n \n     @Override\n     public Optional<String> getTargetUrl(\n             Class<? extends Component> navigationTarget) {\n-\n         Optional<String> targetUrl = super.getTargetUrl(navigationTarget);\n         if (targetUrl.isPresent()) {\n             return targetUrl;\n         }\n-\n         return getParentRegistry().getTargetUrl(navigationTarget);\n     }\n \n     @Override\n+    public Optional<String> getTargetUrl(\n+            Class<? extends Component> navigationTarget,\n+            RouteParameters parameters) {\n+        Optional<String> targetUrl = super.getTargetUrl(navigationTarget,\n+                parameters);\n+        if (targetUrl.isPresent()) {\n+            return targetUrl;\n+        }\n+\n+        return getParentRegistry().getTargetUrl(navigationTarget, parameters);\n+    }\n+\n+    @Override\n+    public Optional<String> getTemplate(\n+            Class<? extends Component> navigationTarget) {\n+        final Optional<String> targetRoute = super.getTemplate(\n+                navigationTarget);\n+        if (targetRoute.isPresent()) {\n+            return targetRoute;\n+        }\n+        return getParentRegistry().getTemplate(navigationTarget);\n+    }\n+\n+    /**\n+     * @deprecated instead use {@link #getNavigationRouteTarget(String)} and\n+     *             retrieve the list of route layouts from the\n+     *             {@link RouteTarget} contained in the\n+     *             {@link NavigationRouteTarget}.\n+     * @see RouteTarget#getParentLayouts()\n+     */\n+    @Override\n+    @Deprecated\n     public List<Class<? extends RouterLayout>> getRouteLayouts(String path,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dcba8a7eec8ae8736a655c0172682fcd46b4dc3"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjA5MzU5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/RouteRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozOToxN1rOGCrPFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozOToxN1rOGCrPFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODcxMQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r405458711", "createdAt": "2020-04-08T11:39:17Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/RouteRegistry.java", "diffHunk": "@@ -168,7 +215,13 @@ void setRoute(String path, Class<? extends Component> navigationTarget,\n      * @param navigationTarget\n      *            navigation target to get layout chain for\n      * @return layout chain of target\n+     * @deprecated instead use {@link #getNavigationRouteTarget(String)} and\n+     *             retrieve the list of route layouts from the\n+     *             {@link RouteTarget} contained in the\n+     *             {@link NavigationRouteTarget}.\n+     * @see RouteTarget#getParentLayouts()\n      */\n+    @Deprecated\n     List<Class<? extends RouterLayout>> getRouteLayouts(String path,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dcba8a7eec8ae8736a655c0172682fcd46b4dc3"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTczMTY3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/NavigationState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoxMDozM1rOGDOHfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoxMDozM1rOGDOHfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzMDIwNw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/7608#discussion_r406030207", "createdAt": "2020-04-09T08:10:33Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/NavigationState.java", "diffHunk": "@@ -84,29 +116,54 @@ public void setResolvedPath(String resolvedPath) {\n      */\n     public String getResolvedPath() {\n         if (resolvedPath == null) {\n-            resolvedPath = RouteConfiguration.forRegistry(router.getRegistry())\n-                    .getUrlBase(navigationTarget).orElse(null);\n+            resolvedPath = router.getRegistry()\n+                    .getTargetUrl(getNavigationTarget(), getRouteParameters())\n+                    .orElse(null);\n         }\n         return resolvedPath;\n     }\n \n+    /**\n+     * Sets the route parameters.\n+     *\n+     * @param routeParameters\n+     *            route parameters.\n+     */\n+    void setRouteParameters(RouteParameters routeParameters) {\n+        assert routeParameters != null;\n+\n+        this.routeParameters = routeParameters;\n+    }\n+\n+    /**\n+     * Gets the route parameters map.\n+     * \n+     * @return route parameters.\n+     */\n+    public RouteParameters getRouteParameters() {\n+        return routeParameters;\n+    }\n+\n     /**\n      * Gets the list of strings that correspond to the raw string url\n      * parameters.\n      *\n      * @return the url parameters of this navigation state\n      */\n     public Optional<List<String>> getUrlParameters() {\n-        return Optional.ofNullable(urlParameters);\n+        return Optional.of(HasUrlParameterFormat\n+                .getParameterValues(getRouteParameters()));\n     }\n \n     /**\n-     * Set the list of strings that correspond to the raw string url parameters.\n+     * Set the list of strings that correspond to the raw string route parameters.\n      *\n-     * @param urlParameters\n+     * @param parameters\n      *            the url parameters to set\n+     * @deprecated use {@link #setRouteParameters(RouteParameters)} instead.\n      */\n-    public void setUrlParameters(List<String> urlParameters) {\n-        this.urlParameters = urlParameters;\n+    @Deprecated\n+    public void setUrlParameters(List<String> parameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "479f6feaa846b07d1eb305c542f52d7f627fd9f0"}, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3673, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}