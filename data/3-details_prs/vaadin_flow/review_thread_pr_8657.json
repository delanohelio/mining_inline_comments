{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxOTE3MDE4", "number": 8657, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTo1OTozOFrOEKBniQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxMDowN1rOEKDF1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTQ3NzIxOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTo1OTozOFrOGq1JKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1Mzo1NVrOGq2-Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2NDA3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        + \" or getDataView() according to the used data type.\",\n          \n          \n            \n                                        + \" or 'getDataView()' according to the used data type.\",", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447564073", "createdAt": "2020-06-30T09:59:38Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java", "diffHunk": "@@ -81,10 +81,13 @@ public Registration addSizeChangeListener(\n      *             if data provider type is incompatible with data view type\n      */\n     protected final void verifyDataProviderType(Class<?> dataProviderType) {\n+        // TODO https://github.com/vaadin/flow/issues/8583\n         Class<?> supportedDataProviderType = getSupportedDataProviderType();\n         if (!supportedDataProviderType.isAssignableFrom(dataProviderType)) {\n             final String message = String.format(\n-                    \"%s only supports '%s' or it's subclasses, but was given a '%s'\",\n+                    \"%s only supports '%s' or it's subclasses, but was given a '%s'.\"\n+                            + \"%nUse either 'getLazyDataView()', 'getListDataView()'\"\n+                            + \" or getDataView() according to the used data type.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dac9f8d2c6599c11fe96d6c041a037f6444205"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDA3MA==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447594070", "createdAt": "2020-06-30T10:53:55Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java", "diffHunk": "@@ -81,10 +81,13 @@ public Registration addSizeChangeListener(\n      *             if data provider type is incompatible with data view type\n      */\n     protected final void verifyDataProviderType(Class<?> dataProviderType) {\n+        // TODO https://github.com/vaadin/flow/issues/8583\n         Class<?> supportedDataProviderType = getSupportedDataProviderType();\n         if (!supportedDataProviderType.isAssignableFrom(dataProviderType)) {\n             final String message = String.format(\n-                    \"%s only supports '%s' or it's subclasses, but was given a '%s'\",\n+                    \"%s only supports '%s' or it's subclasses, but was given a '%s'.\"\n+                            + \"%nUse either 'getLazyDataView()', 'getListDataView()'\"\n+                            + \" or getDataView() according to the used data type.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2NDA3Mw=="}, "originalCommit": {"oid": "b6dac9f8d2c6599c11fe96d6c041a037f6444205"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTUwNjc0OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDowNzo1NFrOGq1b2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1MjozMlrOGq27gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2ODg1OA==", "bodyText": "Could we remove it now, or is it better to create a ticket to improve this in the future?", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447568858", "createdAt": "2020-06-30T10:07:54Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -393,16 +636,18 @@ protected Object getFilter() {\n                 inMemorySorting, filter);\n         Stream<T> stream = getDataProvider().fetch(query);\n         if (stream.isParallel()) {\n-            LoggerFactory.getLogger(DataCommunicator.class)\n-                    .debug(\"Data provider {} has returned \"\n+            getLogger(DataCommunicator.class).debug(\n+                    \"Data provider {} has returned \"\n                             + \"parallel stream on 'fetch' call\",\n-                            getDataProvider().getClass());\n+                    getDataProvider().getClass());\n             stream = stream.collect(Collectors.toList()).stream();\n             assert !stream.isParallel();\n         }\n+\n         SizeVerifier verifier = new SizeVerifier<>(limit);\n         stream = stream.peek(verifier);\n \n+        // FIXME simplify by removing these restrictions ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dac9f8d2c6599c11fe96d6c041a037f6444205"}, "originalPosition": 362}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5MzM0Nw==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447593347", "createdAt": "2020-06-30T10:52:32Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -393,16 +636,18 @@ protected Object getFilter() {\n                 inMemorySorting, filter);\n         Stream<T> stream = getDataProvider().fetch(query);\n         if (stream.isParallel()) {\n-            LoggerFactory.getLogger(DataCommunicator.class)\n-                    .debug(\"Data provider {} has returned \"\n+            getLogger(DataCommunicator.class).debug(\n+                    \"Data provider {} has returned \"\n                             + \"parallel stream on 'fetch' call\",\n-                            getDataProvider().getClass());\n+                    getDataProvider().getClass());\n             stream = stream.collect(Collectors.toList()).stream();\n             assert !stream.isParallel();\n         }\n+\n         SizeVerifier verifier = new SizeVerifier<>(limit);\n         stream = stream.peek(verifier);\n \n+        // FIXME simplify by removing these restrictions ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2ODg1OA=="}, "originalCommit": {"oid": "b6dac9f8d2c6599c11fe96d6c041a037f6444205"}, "originalPosition": 362}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTUxNzk2OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDoxMToxMFrOGq1jEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1NjoyNVrOGq3DSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDcwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        + \"component to fetch the size of the data or a data\"\n          \n          \n            \n                                        + \" component to fetch the size of the data or a data\"", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447570705", "createdAt": "2020-06-30T10:11:10Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "diffHunk": "@@ -16,63 +16,112 @@\n package com.vaadin.flow.data.provider;\n \n import java.io.Serializable;\n+import java.util.Collection;\n \n /**\n- * Interface that defines methods for setting in memory data.\n- * This will return a {@link LazyDataView}.\n+ * Interface that defines methods for fetching data lazily from a backend. The\n+ * API will return a {@link LazyDataView}.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n-public interface HasLazyDataView<T, V extends LazyDataView<T>> extends\n-        Serializable {\n+public interface HasLazyDataView<T, V extends LazyDataView<T>>\n+        extends Serializable {\n+\n     /**\n-     * Supply data through a callback provider.\n+     * Supply data lazily with a callback from a backend. The component will\n+     * automatically fetch more items and adjust its size until the data source\n+     * runs out of items. Usage example:\n+     * <p>\n+     * {@code component.setDataSource(query -> orderService.getOrders(query.getOffset(), query.getLimit());}\n+     * <p>\n+     * The returned data view object can be used for further configuration, or\n+     * later on fetched with {@link #getLazyDataView()}. For using in-memory\n+     * data, like {@link java.util.Collection}, use\n+     * {@link HasListDataView#setDataSource(Collection)} instead.\n      *\n      * @param fetchCallback\n-     *         function that returns a stream of items from the back end for\n-     *         a query\n-     * @return LazyDataView instance\n+     *            function that returns a stream of items from the backend based\n+     *            on the offset and limit provided by the query object\n+     * @return LazyDataView instance for further configuration\n      */\n-    V setDataProvider(\n-            CallbackDataProvider.FetchCallback<T, Void> fetchCallback);\n+    default V setDataSource(\n+            CallbackDataProvider.FetchCallback<T, Void> fetchCallback) {\n+        setDataSource(DataProvider.fromCallbacks(fetchCallback, query -> {\n+            throw new IllegalStateException(\n+                    \"Trying to use defined size with a lazy loading component\"\n+                            + \" without either providing a count callback for the\"\n+                            + \"component to fetch the size of the data or a data\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dac9f8d2c6599c11fe96d6c041a037f6444205"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTMzNw==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447595337", "createdAt": "2020-06-30T10:56:25Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "diffHunk": "@@ -16,63 +16,112 @@\n package com.vaadin.flow.data.provider;\n \n import java.io.Serializable;\n+import java.util.Collection;\n \n /**\n- * Interface that defines methods for setting in memory data.\n- * This will return a {@link LazyDataView}.\n+ * Interface that defines methods for fetching data lazily from a backend. The\n+ * API will return a {@link LazyDataView}.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n-public interface HasLazyDataView<T, V extends LazyDataView<T>> extends\n-        Serializable {\n+public interface HasLazyDataView<T, V extends LazyDataView<T>>\n+        extends Serializable {\n+\n     /**\n-     * Supply data through a callback provider.\n+     * Supply data lazily with a callback from a backend. The component will\n+     * automatically fetch more items and adjust its size until the data source\n+     * runs out of items. Usage example:\n+     * <p>\n+     * {@code component.setDataSource(query -> orderService.getOrders(query.getOffset(), query.getLimit());}\n+     * <p>\n+     * The returned data view object can be used for further configuration, or\n+     * later on fetched with {@link #getLazyDataView()}. For using in-memory\n+     * data, like {@link java.util.Collection}, use\n+     * {@link HasListDataView#setDataSource(Collection)} instead.\n      *\n      * @param fetchCallback\n-     *         function that returns a stream of items from the back end for\n-     *         a query\n-     * @return LazyDataView instance\n+     *            function that returns a stream of items from the backend based\n+     *            on the offset and limit provided by the query object\n+     * @return LazyDataView instance for further configuration\n      */\n-    V setDataProvider(\n-            CallbackDataProvider.FetchCallback<T, Void> fetchCallback);\n+    default V setDataSource(\n+            CallbackDataProvider.FetchCallback<T, Void> fetchCallback) {\n+        setDataSource(DataProvider.fromCallbacks(fetchCallback, query -> {\n+            throw new IllegalStateException(\n+                    \"Trying to use defined size with a lazy loading component\"\n+                            + \" without either providing a count callback for the\"\n+                            + \"component to fetch the size of the data or a data\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDcwNQ=="}, "originalCommit": {"oid": "b6dac9f8d2c6599c11fe96d6c041a037f6444205"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTUxODY0OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDoxMToyMlrOGq1jhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1NjoyN1rOGq3DWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDgyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        + \"provider that implements the size query. Provide the \"\n          \n          \n            \n                                        + \" provider that implements the size query. Provide the \"", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447570821", "createdAt": "2020-06-30T10:11:22Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "diffHunk": "@@ -16,63 +16,112 @@\n package com.vaadin.flow.data.provider;\n \n import java.io.Serializable;\n+import java.util.Collection;\n \n /**\n- * Interface that defines methods for setting in memory data.\n- * This will return a {@link LazyDataView}.\n+ * Interface that defines methods for fetching data lazily from a backend. The\n+ * API will return a {@link LazyDataView}.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n-public interface HasLazyDataView<T, V extends LazyDataView<T>> extends\n-        Serializable {\n+public interface HasLazyDataView<T, V extends LazyDataView<T>>\n+        extends Serializable {\n+\n     /**\n-     * Supply data through a callback provider.\n+     * Supply data lazily with a callback from a backend. The component will\n+     * automatically fetch more items and adjust its size until the data source\n+     * runs out of items. Usage example:\n+     * <p>\n+     * {@code component.setDataSource(query -> orderService.getOrders(query.getOffset(), query.getLimit());}\n+     * <p>\n+     * The returned data view object can be used for further configuration, or\n+     * later on fetched with {@link #getLazyDataView()}. For using in-memory\n+     * data, like {@link java.util.Collection}, use\n+     * {@link HasListDataView#setDataSource(Collection)} instead.\n      *\n      * @param fetchCallback\n-     *         function that returns a stream of items from the back end for\n-     *         a query\n-     * @return LazyDataView instance\n+     *            function that returns a stream of items from the backend based\n+     *            on the offset and limit provided by the query object\n+     * @return LazyDataView instance for further configuration\n      */\n-    V setDataProvider(\n-            CallbackDataProvider.FetchCallback<T, Void> fetchCallback);\n+    default V setDataSource(\n+            CallbackDataProvider.FetchCallback<T, Void> fetchCallback) {\n+        setDataSource(DataProvider.fromCallbacks(fetchCallback, query -> {\n+            throw new IllegalStateException(\n+                    \"Trying to use defined size with a lazy loading component\"\n+                            + \" without either providing a count callback for the\"\n+                            + \"component to fetch the size of the data or a data\"\n+                            + \"provider that implements the size query. Provide the \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dac9f8d2c6599c11fe96d6c041a037f6444205"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTM1Mg==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447595352", "createdAt": "2020-06-30T10:56:27Z", "author": {"login": "pleku"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "diffHunk": "@@ -16,63 +16,112 @@\n package com.vaadin.flow.data.provider;\n \n import java.io.Serializable;\n+import java.util.Collection;\n \n /**\n- * Interface that defines methods for setting in memory data.\n- * This will return a {@link LazyDataView}.\n+ * Interface that defines methods for fetching data lazily from a backend. The\n+ * API will return a {@link LazyDataView}.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n-public interface HasLazyDataView<T, V extends LazyDataView<T>> extends\n-        Serializable {\n+public interface HasLazyDataView<T, V extends LazyDataView<T>>\n+        extends Serializable {\n+\n     /**\n-     * Supply data through a callback provider.\n+     * Supply data lazily with a callback from a backend. The component will\n+     * automatically fetch more items and adjust its size until the data source\n+     * runs out of items. Usage example:\n+     * <p>\n+     * {@code component.setDataSource(query -> orderService.getOrders(query.getOffset(), query.getLimit());}\n+     * <p>\n+     * The returned data view object can be used for further configuration, or\n+     * later on fetched with {@link #getLazyDataView()}. For using in-memory\n+     * data, like {@link java.util.Collection}, use\n+     * {@link HasListDataView#setDataSource(Collection)} instead.\n      *\n      * @param fetchCallback\n-     *         function that returns a stream of items from the back end for\n-     *         a query\n-     * @return LazyDataView instance\n+     *            function that returns a stream of items from the backend based\n+     *            on the offset and limit provided by the query object\n+     * @return LazyDataView instance for further configuration\n      */\n-    V setDataProvider(\n-            CallbackDataProvider.FetchCallback<T, Void> fetchCallback);\n+    default V setDataSource(\n+            CallbackDataProvider.FetchCallback<T, Void> fetchCallback) {\n+        setDataSource(DataProvider.fromCallbacks(fetchCallback, query -> {\n+            throw new IllegalStateException(\n+                    \"Trying to use defined size with a lazy loading component\"\n+                            + \" without either providing a count callback for the\"\n+                            + \"component to fetch the size of the data or a data\"\n+                            + \"provider that implements the size query. Provide the \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDgyMQ=="}, "originalCommit": {"oid": "b6dac9f8d2c6599c11fe96d6c041a037f6444205"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTcxODE5OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxMDowM1rOGq3dGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxMDowM1rOGq3dGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwMTk0NA==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447601944", "createdAt": "2020-06-30T11:10:03Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -273,26 +290,230 @@ public void confirmUpdate(int updateId) {\n      * @return size of available data\n      */\n     public int getDataSize() {\n-        if (resendEntireRange || assumeEmptyClient) {\n+        if (isDefinedSize()\n+                && (resendEntireRange || assumeEmptyClient || sizeReset)) {\n+            // TODO it could be possible to cache the value returned here\n+            // and use it next time instead of making another query, unless\n+            // the conditions like filter (or another reset) have changed\n             return getDataProviderSize();\n         }\n+        // do not report a stale size or size estimate\n+        if (!isDefinedSize() && sizeReset) {\n+            return 0;\n+        }\n         return assumedSize;\n     }\n \n+    /**\n+     * Returns whether the given item is part of the active items.\n+     * \n+     * @param item\n+     *            the item to check, not {@code null}\n+     * @return {@code true} if item is active, {@code false} if not\n+     */\n+    public boolean isItemActive(T item) {\n+        return getKeyMapper().has(item);\n+    }\n+\n+    /**\n+     * Returns the active item at the given index or throws a\n+     * {@link IndexOutOfBoundsException} in case the item is not active at the\n+     * moment.\n+     * \n+     * @param index\n+     *            the index of the item to get\n+     * @return the item\n+     */\n+    public T getActiveItemOnIndex(int index) {\n+        int activeDataEnd = activeStart + activeKeyOrder.size() - 1;\n+        if (index < activeStart || index > activeDataEnd) {\n+            throw new IndexOutOfBoundsException(String.format(\n+                    \"Given index %d is outside of the active range of the component '%d - %d'\",\n+                    index, activeStart, activeDataEnd));\n+        }\n+        return getKeyMapper().get(activeKeyOrder.get(index - activeStart));\n+    }\n+\n     /**\n      * Generate a data query with component sorting and filtering.\n      *\n      * @param offset\n-     *         first index to fetch\n+     *            first index to fetch\n      * @param limit\n-     *         fetched item count\n+     *            fetched item count\n      * @return {@link Query} for component state\n      */\n     public Query buildQuery(int offset, int limit) {\n         return new Query(offset, limit, getBackEndSorting(),\n                 getInMemorySorting(), getFilter());\n     }\n \n+    /**\n+     * Sets the page size that is used to fetch items. The queries to data\n+     * provider are a multiple of the page size.\n+     * \n+     * @param pageSize\n+     *            the page size to set\n+     */\n+    // TODO https://github.com/vaadin/flow/issues/8557", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a4222e8724b74e07783d16ecdfc623eb2f81118"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTcxODMxOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxMDowNFrOGq3dJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxMDowNFrOGq3dJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwMTk1Nw==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447601957", "createdAt": "2020-06-30T11:10:04Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -273,26 +290,230 @@ public void confirmUpdate(int updateId) {\n      * @return size of available data\n      */\n     public int getDataSize() {\n-        if (resendEntireRange || assumeEmptyClient) {\n+        if (isDefinedSize()\n+                && (resendEntireRange || assumeEmptyClient || sizeReset)) {\n+            // TODO it could be possible to cache the value returned here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a4222e8724b74e07783d16ecdfc623eb2f81118"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTcxODQ1OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxMDowNVrOGq3dNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxMDowNVrOGq3dNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwMTk3Mg==", "bodyText": "Remove this useless assignment to local variable \"previousAssumedSize\". \n Remove this unused \"previousAssumedSize\" local variable.", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447601972", "createdAt": "2020-06-30T11:10:05Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -358,14 +579,36 @@ public void setBackEndSorting(List<QuerySortOrder> sortOrder) {\n     }\n \n     /**\n-     * Getter method for finding the size of DataProvider. Can be overridden by\n-     * a subclass that uses a specific type of DataProvider and/or query.\n+     * Getter method for determining the row count of the data. Can be\n+     * overridden by a subclass that uses a specific type of DataProvider and/or\n+     * query.\n      *\n      * @return the size of data provider with current filter\n      */\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected int getDataProviderSize() {\n-        return getDataProvider().size(new Query(getFilter()));\n+        assert definedSize : \"This method should never be called when using undefined size\";\n+        if (countCallback != null) {\n+            return countCallback.count(new Query(getFilter()));\n+        } else {\n+            return getDataProvider().size(new Query(getFilter()));\n+        }\n+    }\n+\n+    private void updateUndefinedSize() {\n+        assert !definedSize : \"This method should never be called when using defined size\";\n+        int previousAssumedSize = assumedSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a4222e8724b74e07783d16ecdfc623eb2f81118"}, "originalPosition": 329}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTcxODYwOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxMDowN1rOGq3dRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxMDowN1rOGq3dRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwMTk5MA==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/vaadin/flow/pull/8657#discussion_r447601990", "createdAt": "2020-06-30T11:10:07Z", "author": {"login": "vaadin-bot"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java", "diffHunk": "@@ -81,10 +81,13 @@ public Registration addSizeChangeListener(\n      *             if data provider type is incompatible with data view type\n      */\n     protected final void verifyDataProviderType(Class<?> dataProviderType) {\n+        // TODO https://github.com/vaadin/flow/issues/8583", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a4222e8724b74e07783d16ecdfc623eb2f81118"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3318, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}