{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NTQ3OTc3", "number": 8941, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTozNzoxMFrOEhNAXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTozNzoxMFrOEhNAXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjUxNTQ5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateWebpack.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTozNzoxMFrOHOY2pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTozNzoxMFrOHOY2pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0OTMxOQ==", "bodyText": "Immediately return this expression instead of assigning it to the temporary variable \"relativePath\".", "url": "https://github.com/vaadin/flow/pull/8941#discussion_r484849319", "createdAt": "2020-09-08T11:37:10Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdateWebpack.java", "diffHunk": "@@ -139,82 +150,83 @@ private void createWebpackConfig() throws IOException {\n     private List<String> modifyWebpackConfig(File generatedFile)\n             throws IOException {\n         List<String> lines = FileUtils.readLines(generatedFile, \"UTF-8\");\n+        List<Pair<String, String>> replacements = getReplacements();\n+        String declaration = \"%s = %s;\";\n \n-        String frontendLine = \"const frontendFolder = require('path').resolve(__dirname, '\"\n-                + getEscapedRelativeWebpackPath(frontendDirectory) + \"');\";\n-\n-        String outputLine = \"const mavenOutputFolderForFlowBundledFiles = require('path').resolve(__dirname, '\"\n-                + getEscapedRelativeWebpackPath(webpackOutputPath) + \"');\";\n-        String mainLine = \"const fileNameOfTheFlowGeneratedMainEntryPoint = require('path').resolve(__dirname, '\"\n-                + getEscapedRelativeWebpackPath(flowImportsFilePath) + \"');\";\n-        String isClientSideBootstrapModeLine = \"const useClientSideIndexFileForBootstrapping = \"\n-                + !useV14Bootstrapping + \";\";\n-        String devModeGizmoJSLine = \"const devmodeGizmoJS = require('path').resolve(__dirname, '\"\n-                + getEscapedRelativeWebpackPath(\n-                        flowResourcesFolder.resolve(\"VaadinDevmodeGizmo.js\"))\n-                + \"');\";\n         for (int i = 0; i < lines.size(); i++) {\n-            if (lines.get(i).startsWith(\n-                    \"const fileNameOfTheFlowGeneratedMainEntryPoint\")) {\n-                lines.set(i, mainLine);\n-            }\n-            if (lines.get(i)\n-                    .startsWith(\"const mavenOutputFolderForFlowBundledFiles\")) {\n-                lines.set(i, outputLine);\n-            }\n-            if (lines.get(i).startsWith(\"const frontendFolder\")) {\n-                lines.set(i, frontendLine);\n-            }\n-            if (lines.get(i).startsWith(\"const useClientSideIndexFileForBootstrapping\")) {\n-                lines.set(i, isClientSideBootstrapModeLine);\n-            }\n-            if (lines.get(i).startsWith(\"const clientSideIndexHTML\")) {\n-                lines.set(i, getIndexHtmlPath());\n-            }\n-\n-            if (lines.get(i).startsWith(\"const clientSideIndexEntryPoint\")) {\n-                lines.set(i, getClientEntryPoint());\n-            }\n-\n-            if (lines.get(i).startsWith(\"const devmodeGizmoJS\")) {\n-                lines.set(i, devModeGizmoJSLine);\n+            for (int j = 0; j < replacements.size(); j++) {\n+                Pair<String, String> pair = replacements.get(j);\n+                if (lines.get(i).startsWith(pair.getFirst())) {\n+                    lines.set(i, String.format(declaration, pair.getFirst(),\n+                            pair.getSecond()));\n+                }\n             }\n         }\n         return lines;\n     }\n \n+    private List<Pair<String, String>> getReplacements() {\n+        return Arrays.asList(\n+                new Pair<>(\"const frontendFolder\",\n+                        \"require('path').resolve\" + \"(__dirname, '\"\n+                                + getEscapedRelativeWebpackPath(\n+                                        frontendDirectory)\n+                                + \"')\"),\n+                new Pair<>(\"const mavenOutputFolderForFlowBundledFiles\",\n+                        \"require('path').resolve(__dirname, '\"\n+                                + getEscapedRelativeWebpackPath(\n+                                        webpackOutputPath)\n+                                + \"')\"),\n+                new Pair<>(\"const fileNameOfTheFlowGeneratedMainEntryPoint\",\n+                        \"require('path').resolve(__dirname, '\"\n+                                + getEscapedRelativeWebpackPath(\n+                                        flowImportsFilePath)\n+                                + \"')\"),\n+                new Pair<>(\"const useClientSideIndexFileForBootstrapping\",\n+                        Boolean.toString(!useV14Bootstrapping)),\n+                new Pair<>(\"const clientSideIndexHTML\", getIndexHtmlPath()),\n+                new Pair<>(\"const clientSideIndexEntryPoint\",\n+                        getClientEntryPoint()),\n+                new Pair<>(\"const devmodeGizmoJS\",\n+                        \"require('path').resolve(__dirname, '\"\n+                                + getEscapedRelativeWebpackPath(\n+                                        flowResourcesFolder.resolve(\n+                                                \"VaadinDevmodeGizmo.js\"))\n+                                + \"')\"),\n+                new Pair<>(\"const offlineResources\",\n+                        getOfflineResourcesJsArray()));\n+    }\n+\n     private String getIndexHtmlPath() {\n         boolean exists = new File(frontendDirectory.toFile(), INDEX_HTML)\n                 .exists();\n-        String declaration = \"const clientSideIndexHTML = %s;\";\n         if (!exists) {\n             Path path = Paths.get(\n                     getEscapedRelativeWebpackPath(webpackConfigPath), TARGET,\n                     INDEX_HTML);\n             String relativePath = String.format(\n                     \"require('path').resolve(__dirname, '%s')\",\n                     getEscapedRelativeWebpackPath(path));\n-            return String.format(declaration, relativePath);\n+            return relativePath;\n         } else {\n-            return String.format(declaration, \"'./\" + INDEX_HTML +\"'\");\n+            return \"'./\" + INDEX_HTML +\"'\";\n         }\n     }\n \n     private String getClientEntryPoint() {\n         boolean exists = new File(frontendDirectory.toFile(), INDEX_TS)\n                 .exists()\n                 || new File(frontendDirectory.toFile(), INDEX_JS).exists();\n-        String declaration = \"const clientSideIndexEntryPoint = %s;\";\n         if (!exists) {\n             Path path = Paths.get(\n                     getEscapedRelativeWebpackPath(webpackConfigPath), TARGET,\n                     INDEX_TS);\n             String relativePath = String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1751c67bcf43cda5b66db91770e787e24fc85da"}, "originalPosition": 166}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3226, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}