{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMzU3MjUy", "number": 8742, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTo0NzoyOVrOEQIZqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTo0NzoyOVrOEQIZqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzUwMzE1OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Binder.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTo0NzoyOVrOG0H-CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTo1NzowOVrOG0IXvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwOTcwNQ==", "bodyText": "Do we now have a test for reset() method? I guess all existing tests are now verifying read() method?", "url": "https://github.com/vaadin/flow/pull/8742#discussion_r457309705", "createdAt": "2020-07-20T11:47:29Z", "author": {"login": "mshabarov"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Binder.ts", "diffHunk": "@@ -78,29 +78,33 @@ export class Binder<T, M extends AbstractModel<T>> extends BinderNode<T, M> {\n   }\n \n   /**\n-   * Reset the form value to default value and clear validation errors\n+   * Read the given value into the form and clear validation errors\n    *\n-   * @param defaultValue When present, sets the argument as the new default\n+   * @param value Sets the argument as the new default\n    * value before resetting, otherwise the previous default is used.\n    */\n-  reset(defaultValue: T = this[defaultValueSymbol]) {\n-    this.defaultValue = defaultValue;\n+  read(value: T) {\n+    this.defaultValue = value;\n     if (\n       // Skip when no value is set yet (e. g., invoked from constructor)\n       this.value\n       // Clear validation state, then proceed if update is needed\n       && this.clearValidation()\n       // When value is dirty, another update is coming from invoking the value\n       // setter below, so we skip this one to prevent duplicate updates\n-      && this.value === defaultValue) {\n+      && this.value === value) {\n       this.update(this.value);\n     }\n \n     this.value = this.defaultValue;\n   }\n \n+  reset(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84b3ea3be0e3812ef5b4af25d96cf7001c6cdb4d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMxNTUzMQ==", "bodyText": "Yes, there are tests for reset() method, for example, in BinderTests.ts, we have\ntest(\"should reset to default value\", () => {\n      binder.for(binder.model.notes).value = \"foo\";\n      binder.for(binder.model.customer.fullName).value = \"foo\";\n      requestUpdateStub.reset();\n\n      binder.reset();\n\n      assert.equal(binder.value.notes, \"\");\n      assert.equal(binder.value.customer.fullName, \"\");\n      sinon.assert.calledOnce(requestUpdateStub);\n    });\n\nThis PR basically just splits the original reset methods to 2 parts, the one with an argument is now renamed to read, the one without arguments stays the same. They have all been tested, so no need to add more, the tests which were using binder.reset(value) have been renamed to binder.read(value) accordingly.", "url": "https://github.com/vaadin/flow/pull/8742#discussion_r457315531", "createdAt": "2020-07-20T11:55:59Z", "author": {"login": "haijian-vaadin"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Binder.ts", "diffHunk": "@@ -78,29 +78,33 @@ export class Binder<T, M extends AbstractModel<T>> extends BinderNode<T, M> {\n   }\n \n   /**\n-   * Reset the form value to default value and clear validation errors\n+   * Read the given value into the form and clear validation errors\n    *\n-   * @param defaultValue When present, sets the argument as the new default\n+   * @param value Sets the argument as the new default\n    * value before resetting, otherwise the previous default is used.\n    */\n-  reset(defaultValue: T = this[defaultValueSymbol]) {\n-    this.defaultValue = defaultValue;\n+  read(value: T) {\n+    this.defaultValue = value;\n     if (\n       // Skip when no value is set yet (e. g., invoked from constructor)\n       this.value\n       // Clear validation state, then proceed if update is needed\n       && this.clearValidation()\n       // When value is dirty, another update is coming from invoking the value\n       // setter below, so we skip this one to prevent duplicate updates\n-      && this.value === defaultValue) {\n+      && this.value === value) {\n       this.update(this.value);\n     }\n \n     this.value = this.defaultValue;\n   }\n \n+  reset(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwOTcwNQ=="}, "originalCommit": {"oid": "84b3ea3be0e3812ef5b4af25d96cf7001c6cdb4d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMxNjI4NQ==", "bodyText": "Understood, thanks!", "url": "https://github.com/vaadin/flow/pull/8742#discussion_r457316285", "createdAt": "2020-07-20T11:57:09Z", "author": {"login": "mshabarov"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Binder.ts", "diffHunk": "@@ -78,29 +78,33 @@ export class Binder<T, M extends AbstractModel<T>> extends BinderNode<T, M> {\n   }\n \n   /**\n-   * Reset the form value to default value and clear validation errors\n+   * Read the given value into the form and clear validation errors\n    *\n-   * @param defaultValue When present, sets the argument as the new default\n+   * @param value Sets the argument as the new default\n    * value before resetting, otherwise the previous default is used.\n    */\n-  reset(defaultValue: T = this[defaultValueSymbol]) {\n-    this.defaultValue = defaultValue;\n+  read(value: T) {\n+    this.defaultValue = value;\n     if (\n       // Skip when no value is set yet (e. g., invoked from constructor)\n       this.value\n       // Clear validation state, then proceed if update is needed\n       && this.clearValidation()\n       // When value is dirty, another update is coming from invoking the value\n       // setter below, so we skip this one to prevent duplicate updates\n-      && this.value === defaultValue) {\n+      && this.value === value) {\n       this.update(this.value);\n     }\n \n     this.value = this.defaultValue;\n   }\n \n+  reset(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwOTcwNQ=="}, "originalCommit": {"oid": "84b3ea3be0e3812ef5b4af25d96cf7001c6cdb4d"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3373, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}