{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NDAxOTY0", "number": 8826, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzoyOToxMFrOEWHCbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyMjozNVrOEWICiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjE5NDM4OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/java/com/vaadin/client/flow/binding/SimpleElementBindingStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzoyOToxMFrOG9PgOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTowODo1NVrOG9SfcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg3MDMyOQ==", "bodyText": "Please put a brief explanations that this wrapper is put intentionally within doSetResource method? Why don't we use java cast here, but use a JS cast?", "url": "https://github.com/vaadin/flow/pull/8826#discussion_r466870329", "createdAt": "2020-08-07T07:29:10Z", "author": {"login": "mshabarov"}, "path": "flow-client/src/main/java/com/vaadin/client/flow/binding/SimpleElementBindingStrategy.java", "diffHunk": "@@ -1366,6 +1375,28 @@ private EventRemover bindClientCallableMethods(BindingContext context) {\n                 (Element) context.htmlNode, context.node);\n     }\n \n+    private static void updateAttributeValue(\n+            ApplicationConfiguration configuration, Element element,\n+            String attribute, Object value) {\n+        if (value == null || value instanceof String) {\n+            WidgetUtil.updateAttribute(element, attribute, (String) value);\n+        } else {\n+            JsonObject object = WidgetUtil.crazyJsCast(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa44391af76e0f3695e8de7cd250216242018d75"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkxOTI4MQ==", "bodyText": "Which doSetResource  ?\nI don't understand this comment , sorry.\nJava cast doesn't work here since it's a client side code which works this way. This will be compiled into JS.", "url": "https://github.com/vaadin/flow/pull/8826#discussion_r466919281", "createdAt": "2020-08-07T09:08:55Z", "author": {"login": "denis-anisimov"}, "path": "flow-client/src/main/java/com/vaadin/client/flow/binding/SimpleElementBindingStrategy.java", "diffHunk": "@@ -1366,6 +1375,28 @@ private EventRemover bindClientCallableMethods(BindingContext context) {\n                 (Element) context.htmlNode, context.node);\n     }\n \n+    private static void updateAttributeValue(\n+            ApplicationConfiguration configuration, Element element,\n+            String attribute, Object value) {\n+        if (value == null || value instanceof String) {\n+            WidgetUtil.updateAttribute(element, attribute, (String) value);\n+        } else {\n+            JsonObject object = WidgetUtil.crazyJsCast(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg3MDMyOQ=="}, "originalCommit": {"oid": "aa44391af76e0f3695e8de7cd250216242018d75"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjI0MTA2OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/java/com/vaadin/client/WidgetUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzo0NDo0NVrOG9P8fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzo0NDo0NVrOG9P8fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg3NzU2NQ==", "bodyText": "Update a javadoc accordingly: ... otherwise {@code value.toString()} is set as its value. is obsolete now.", "url": "https://github.com/vaadin/flow/pull/8826#discussion_r466877565", "createdAt": "2020-08-07T07:44:45Z", "author": {"login": "mshabarov"}, "path": "flow-client/src/main/java/com/vaadin/client/WidgetUtil.java", "diffHunk": "@@ -136,11 +136,11 @@ public static String toPrettyJson(JsonValue json) {\n      *            the value to update\n      */\n     public static void updateAttribute(Element element, String attribute,\n-            Object value) {\n+            String value) {\n         if (value == null) {\n             DomApi.wrap(element).removeAttribute(attribute);\n         } else {\n-            DomApi.wrap(element).setAttribute(attribute, value.toString());\n+            DomApi.wrap(element).setAttribute(attribute, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa44391af76e0f3695e8de7cd250216242018d75"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjI5MTQ5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODowMDozMFrOG9QbAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxMToxMVrOG9SkMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4NTM3Nw==", "bodyText": "Even though the assert is placed here, I wonder why we so confident about URI_ATTRIBUTE  presence, it is hard to read and understand if someone doesn't know it should have been put here within doSetResource. Please put an explanation comment here.", "url": "https://github.com/vaadin/flow/pull/8826#discussion_r466885377", "createdAt": "2020-08-07T08:00:30Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java", "diffHunk": "@@ -103,7 +105,15 @@ public Serializable remove(String attribute) {\n      */\n     @Override\n     public String get(String attribute) {\n-        return (String) super.get(attribute);\n+        Serializable value = super.get(attribute);\n+        if (value == null || value instanceof String) {\n+            return (String) value;\n+        } else {\n+            assert value instanceof JsonObject;\n+            JsonObject object = (JsonObject) value;\n+            assert object.hasKey(NodeProperties.URI_ATTRIBUTE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa44391af76e0f3695e8de7cd250216242018d75"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMDQ5OA==", "bodyText": "The code will grow at least twice if we add such comments everywhere where such thins are already done.", "url": "https://github.com/vaadin/flow/pull/8826#discussion_r466920498", "createdAt": "2020-08-07T09:11:11Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java", "diffHunk": "@@ -103,7 +105,15 @@ public Serializable remove(String attribute) {\n      */\n     @Override\n     public String get(String attribute) {\n-        return (String) super.get(attribute);\n+        Serializable value = super.get(attribute);\n+        if (value == null || value instanceof String) {\n+            return (String) value;\n+        } else {\n+            assert value instanceof JsonObject;\n+            JsonObject object = (JsonObject) value;\n+            assert object.hasKey(NodeProperties.URI_ATTRIBUTE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4NTM3Nw=="}, "originalCommit": {"oid": "aa44391af76e0f3695e8de7cd250216242018d75"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjMwNDI5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODowNDo0OVrOG9Qi-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxMTo0NFrOG9SlUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4NzQxOQ==", "bodyText": "I believe this method should be private", "url": "https://github.com/vaadin/flow/pull/8826#discussion_r466887419", "createdAt": "2020-08-07T08:04:49Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java", "diffHunk": "@@ -225,6 +239,11 @@ public void execute() {\n                 }));\n     }\n \n+    public void doSet(String attribute, Serializable value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa44391af76e0f3695e8de7cd250216242018d75"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMDc4NQ==", "bodyText": "Right, copy/paste.\nThanks.", "url": "https://github.com/vaadin/flow/pull/8826#discussion_r466920785", "createdAt": "2020-08-07T09:11:44Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java", "diffHunk": "@@ -225,6 +239,11 @@ public void execute() {\n                 }));\n     }\n \n+    public void doSet(String attribute, Serializable value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4NzQxOQ=="}, "originalCommit": {"oid": "aa44391af76e0f3695e8de7cd250216242018d75"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjM1ODQ4OnYy", "diffSide": "RIGHT", "path": "flow-tests/test-embedding/embedding-test-assets/src/test/java/com/vaadin/flow/webcomponent/WebComponentIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyMjozNVrOG9RECQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxMzoyNlrOG9Soag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5NTg4MQ==", "bodyText": "Silly question: author's bug description refers to <RootUrl>/VAADIN/dynamic/resource/... URI, but here we expect <RootUrl>/vaadin/VAADIN/dynamic/resource/.... Why?", "url": "https://github.com/vaadin/flow/pull/8826#discussion_r466895881", "createdAt": "2020-08-07T08:22:35Z", "author": {"login": "mshabarov"}, "path": "flow-tests/test-embedding/embedding-test-assets/src/test/java/com/vaadin/flow/webcomponent/WebComponentIT.java", "diffHunk": "@@ -57,8 +58,25 @@ public void indexPageGetsWebComponent_attributeIsReflectedToServer() {\n                 select);\n \n         Assert.assertFalse(\"Message should not be visible\",\n-                noMessage.$(\"span\").first()\n-                        .isDisplayed());\n+                noMessage.$(\"span\").first().isDisplayed());\n+    }\n+\n+    @Test\n+    public void downloadLinkHasCorrectBaseURL() {\n+        open();\n+\n+        waitForElementVisible(By.id(\"show-message\"));\n+        TestBenchElement showMessage = byId(\"show-message\");\n+        TestBenchElement link = showMessage.$(\"a\").id(\"link\");\n+        String href = link.getAttribute(\"href\");\n+        // self check\n+        Assert.assertTrue(href.startsWith(getRootURL()));\n+        // remove host and port\n+        href = href.substring(getRootURL().length());\n+        // now the URI should starts with \"/vaadin\" since this is the URI of\n+        // embedded app\n+        Assert.assertThat(href,\n+                CoreMatchers.startsWith(\"/vaadin/VAADIN/dynamic/resource/\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa44391af76e0f3695e8de7cd250216242018d75"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMTU3OA==", "bodyText": "vaadin is a part of RootUrl.\nIn the original description vaadin is /v/main .", "url": "https://github.com/vaadin/flow/pull/8826#discussion_r466921578", "createdAt": "2020-08-07T09:13:26Z", "author": {"login": "denis-anisimov"}, "path": "flow-tests/test-embedding/embedding-test-assets/src/test/java/com/vaadin/flow/webcomponent/WebComponentIT.java", "diffHunk": "@@ -57,8 +58,25 @@ public void indexPageGetsWebComponent_attributeIsReflectedToServer() {\n                 select);\n \n         Assert.assertFalse(\"Message should not be visible\",\n-                noMessage.$(\"span\").first()\n-                        .isDisplayed());\n+                noMessage.$(\"span\").first().isDisplayed());\n+    }\n+\n+    @Test\n+    public void downloadLinkHasCorrectBaseURL() {\n+        open();\n+\n+        waitForElementVisible(By.id(\"show-message\"));\n+        TestBenchElement showMessage = byId(\"show-message\");\n+        TestBenchElement link = showMessage.$(\"a\").id(\"link\");\n+        String href = link.getAttribute(\"href\");\n+        // self check\n+        Assert.assertTrue(href.startsWith(getRootURL()));\n+        // remove host and port\n+        href = href.substring(getRootURL().length());\n+        // now the URI should starts with \"/vaadin\" since this is the URI of\n+        // embedded app\n+        Assert.assertThat(href,\n+                CoreMatchers.startsWith(\"/vaadin/VAADIN/dynamic/resource/\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5NTg4MQ=="}, "originalCommit": {"oid": "aa44391af76e0f3695e8de7cd250216242018d75"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3172, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}