{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5OTM0Mjkx", "number": 8379, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODozMlrOD9sw9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo1MVrOD9sxhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMTU2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/BeforeEvent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODozM1rOGXWQPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODozM1rOGXWQPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTAzOA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135038", "createdAt": "2020-05-19T08:48:33Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/BeforeEvent.java", "diffHunk": "@@ -437,12 +596,41 @@ public void rerouteTo(String route) {\n      * Get the URL parameters of the reroute target.\n      *\n      * @return URL parameters of reroute target\n+     * @throws NullPointerException\n+     *             if no reroute target is set. Check\n+     *             {@link #hasRerouteTarget()} before accessing this method.\n+     * @deprecated use {@link #getRerouteTargetRouteParameters()} instead.\n      */\n+    @Deprecated\n     public List<String> getRerouteTargetParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 383}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMTcxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/BeforeEvent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODozNFrOGXWQUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODozNFrOGXWQUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTA1Nw==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135057", "createdAt": "2020-05-19T08:48:34Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/BeforeEvent.java", "diffHunk": "@@ -379,39 +495,79 @@ public void rerouteTo(String route) {\n         }\n     }\n \n-    private <T> NavigationState getNavigationState(String route,\n-                                                   List<T> routeParams) {\n+    private <T> NavigationState getNavigationState(String url,\n+            List<T> routeParams) {\n         List<String> segments = routeParams.stream().map(Object::toString)\n                 .collect(Collectors.toList());\n-        Class<? extends Component> target = getTargetOrThrow(route, segments);\n+        Class<? extends Component> target = getTargetOrThrow(url, segments);\n \n         if (!routeParams.isEmpty()) {\n             checkUrlParameterType(routeParams.get(0), target);\n         }\n \n+        return getNavigationState(target,\n+                HasUrlParameterFormat.getParameters(segments),\n+                HasUrlParameterFormat.getUrl(url, routeParams));\n+    }\n+\n+    private NavigationState getNavigationState(\n+            Class<? extends Component> target, RouteParameters parameters,\n+            String resolvedUrl) {\n         return new NavigationStateBuilder(ui.getRouter())\n-                .withTarget(target, segments).build();\n+                .withTarget(target, parameters).withPath(resolvedUrl).build();\n     }\n \n     /**\n      * Get the forward target type for forwarding.\n      *\n      * @return forward target type\n+     * @throws NullPointerException\n+     *             if no forward target is set. Check\n+     *             {@link #hasForwardTarget()} before accessing this method.\n      */\n     public Class<? extends Component> getForwardTargetType() {\n         return forwardTargetState.getNavigationTarget();\n     }\n \n     /**\n-     * Get the URL parameters of the forward target.\n+     * Gets the URL parameters of the forward target.\n      *\n      * @return URL parameters of forward target\n+     * @throws NullPointerException\n+     *             if no forward target is set. Check\n+     *             {@link #hasForwardTarget()} before accessing this method.\n+     * @deprecated use {@link #getForwardTargetRouteParameters()} instead.\n      */\n+    @Deprecated\n     public List<String> getForwardTargetParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 331}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMTgzOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/NavigationStateBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODozNVrOGXWQZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODozNVrOGXWQZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTA3Ng==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135076", "createdAt": "2020-05-19T08:48:35Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/NavigationStateBuilder.java", "diffHunk": "@@ -42,21 +43,58 @@ public NavigationStateBuilder(Router router) {\n         this.router = router;\n     }\n \n+    /**\n+     * Assigns the given navigation target with the given route parameters to the\n+     * navigation state being built.\n+     *\n+     * @param navigationTarget\n+     *            the navigation target\n+     * @param parameters\n+     *            the route parameters of the navigation target\n+     * @return this builder, for chaining\n+     * @deprecated use {@link #withTarget(Class, RouteParameters)} instead.\n+     */\n+    @Deprecated\n+    public NavigationStateBuilder withTarget(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMTg4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteBaseData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODozNlrOGXWQbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODozNlrOGXWQbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTA4NQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135085", "createdAt": "2020-05-19T08:48:36Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteBaseData.java", "diffHunk": "@@ -85,17 +120,42 @@ public RouteBaseData(List<Class<? extends RouterLayout>> parentLayouts,\n      * Get the full route url of {@link Route}.\n      *\n      * @return route url\n+     * @deprecated use {@link #getTemplate()} instead.\n      */\n+    @Deprecated\n     public String getUrl() {\n-        return url;\n+        return template;\n+    }\n+\n+    /**\n+     * Get the full route template of {@link Route}.\n+     *\n+     * @return route template.\n+     */\n+    public String getTemplate() {\n+        return template;\n     }\n \n     /**\n-     * Get {@link Route} url parameters if any.\n+     * Get {@link Route} route parameters types if any.\n      *\n-     * @return url parameters (by type and in order)\n+     * @return route parameters types.\n+     * @deprecated use {@link #getRouteParameters()} instead.\n      */\n+    @Deprecated\n     public List<Class<?>> getParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMjAxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteBaseData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODozN1rOGXWQgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODozN1rOGXWQgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTEwNA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135104", "createdAt": "2020-05-19T08:48:37Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteBaseData.java", "diffHunk": "@@ -85,17 +120,42 @@ public RouteBaseData(List<Class<? extends RouterLayout>> parentLayouts,\n      * Get the full route url of {@link Route}.\n      *\n      * @return route url\n+     * @deprecated use {@link #getTemplate()} instead.\n      */\n+    @Deprecated\n     public String getUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMjA5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODozOVrOGXWQiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODozOVrOGXWQiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTExNQ==", "bodyText": "Either log or rethrow this exception.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135115", "createdAt": "2020-05-19T08:48:39Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "diffHunk": "@@ -110,57 +134,116 @@ public ConfiguredRoutes(ConfigureRoutes original) {\n      * See if configuration contains a registered route for given path.\n      *\n      * @param path\n-     *         path to check\n+     *            path to check\n      * @return true if configuration contains route\n      */\n     public boolean hasRoute(String path) {\n-        return getRoutesMap().containsKey(path);\n+        return hasTemplate(path);\n+    }\n+\n+    /**\n+     * See if configuration contains a registered route for given template.\n+     *\n+     * @param template\n+     *            template to check\n+     * @return true if configuration contains route\n+     */\n+    public boolean hasTemplate(String template) {\n+        return getRoutesMap().containsKey(template);\n     }\n \n     /**\n      * Check if configuration holds a route for given path with possible path\n      * segments.\n      *\n-     * @param pathString\n-     *         path string to check\n+     * @param path\n+     *            path string to check\n      * @param segments\n-     *         path segments for route\n+     *            path segments for route\n      * @return true if a route is found, else false\n      */\n-    public boolean hasRoute(String pathString, List<String> segments) {\n-        if (hasRoute(pathString)) {\n-            return getRouteTarget(pathString).getTarget(segments) != null;\n-        }\n-        return false;\n+    public boolean hasRoute(String path, List<String> segments) {\n+        return getNavigationRouteTarget(PathUtil.getPath(path, segments))\n+                .hasTarget();\n     }\n \n     /**\n      * Check it the given route target has been registered to the configuration.\n      *\n-     * @param targetRoute\n-     *         target to check registration status for\n+     * @param target\n+     *            target to check registration status for\n      * @return true if target is found in configuration\n      */\n-    public boolean hasRouteTarget(Class<? extends Component> targetRoute) {\n-        return getTargetRoutes().containsKey(targetRoute);\n+    public boolean hasRouteTarget(Class<? extends Component> target) {\n+        return getTargetRoutes().containsKey(target);\n+    }\n+\n+    /**\n+     * Search for a route target using given navigation <code>url</code>\n+     * argument.\n+     *\n+     * @param url\n+     *            the navigation url used to search a route target.\n+     * @return a {@link NavigationRouteTarget} instance containing the\n+     *         {@link RouteTarget} and {@link RouteParameters} extracted from\n+     *         the <code>url</code> argument according with the route\n+     *         configuration.\n+     */\n+    public NavigationRouteTarget getNavigationRouteTarget(String url) {\n+        return getRouteModel().getNavigationRouteTarget(url);\n+    }\n+\n+    /**\n+     * Gets the {@link RouteTarget} instance matching the given target component\n+     * and route parameters.\n+     *\n+     * @param target\n+     *            a component class which is a navigation target.\n+     * @param parameters\n+     *            parameter values that may be used with given target.\n+     * @return the {@link RouteTarget} instance matching the given target\n+     *         component and route parameters.\n+     */\n+    public RouteTarget getRouteTarget(Class<? extends Component> target,\n+            RouteParameters parameters) {\n+        return iterateTemplates(target, template -> {\n+            try {\n+                return getRouteModel().getRouteTarget(template, parameters);\n+            } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMjExOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0MFrOGXWQkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0MFrOGXWQkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTEyMw==", "bodyText": "Either log or rethrow this exception.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135123", "createdAt": "2020-05-19T08:48:40Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "diffHunk": "@@ -173,30 +256,134 @@ public boolean hasRouteTarget(Class<? extends Component> targetRoute) {\n     }\n \n     /**\n-     * Get all registered target routes for this configuration.\n+     * Get all registered target routes for this configuration mapping the main\n+     * template.\n      *\n      * @return component-to-path map of all target routes\n      */\n     public Map<Class<? extends Component>, String> getTargetRoutes() {\n-        return targetRoutes;\n+        return targetRouteMap;\n+    }\n+\n+    /**\n+     * Get all registered target routes for this configuration.\n+     *\n+     * @return component-to-path map of all target routes\n+     */\n+    Map<Class<? extends Component>, RouteModel> getTargetRouteModelMap() {\n+        return targetRouteModelMap;\n+    }\n+\n+    /**\n+     * Make a copy of the target and route models mapping.\n+     * \n+     * @return a copy of the target and route models mapping.\n+     */\n+    protected final Map<Class<? extends Component>, RouteModel> copyTargetRouteModels(\n+            boolean mutable) {\n+        Map<Class<? extends Component>, RouteModel> copyMap = new HashMap<>();\n+        this.getTargetRouteModelMap().entrySet()\n+                .forEach(entry -> copyMap.put(entry.getKey(),\n+                        RouteModel.copy(entry.getValue(), mutable)));\n+        return copyMap;\n     }\n \n     /**\n-     * Get the route path String for the given navigation target class.\n+     * Get the route template String for the given navigation target class.\n      *\n      * @param navigationTarget\n-     *         navigationTarget to get registered route for\n+     *            navigationTarget to get registered route for\n      * @return base route string if target class found\n      */\n     public String getTargetRoute(Class<? extends Component> navigationTarget) {\n+        return getTemplate(navigationTarget);\n+    }\n+\n+    /**\n+     * Get the route template String for the given navigation target class.\n+     *\n+     * @param navigationTarget\n+     *            navigationTarget to get registered route for\n+     * @return base route string if target class found\n+     */\n+    public String getTemplate(Class<? extends Component> navigationTarget) {\n         return getTargetRoutes().get(navigationTarget);\n     }\n \n+    /**\n+     * Get the route template String for the given navigation target class and\n+     * using the specified parameters format.\n+     *\n+     * @param navigationTarget\n+     *            navigationTarget to get registered route for\n+     * @param format\n+     *            settings used to format the result parameters. If all of\n+     *            {@link RouteParameterFormatOption#NAME},\n+     *            {@link RouteParameterFormatOption#MODIFIER} and\n+     *            {@link RouteParameterFormatOption#REGEX} are provided, the\n+     *            unformatted template will be provided.\n+     * @return base route string if target class found\n+     */\n+    public String getTemplate(Class<? extends Component> navigationTarget,\n+            Set<RouteParameterFormatOption> format) {\n+        final String template = getTemplate(navigationTarget);\n+        if (template == null) {\n+            return null;\n+        }\n+\n+        return getRouteModel().formatTemplate(template, format);\n+    }\n+\n+    /**\n+     * Get the url path String for the given navigation target class.\n+     *\n+     * @param navigationTarget\n+     *            navigationTarget to get registered route for\n+     * @return route string if target class found\n+     */\n+    public String getTargetUrl(Class<? extends Component> navigationTarget) {\n+        return iterateTemplates(navigationTarget, template -> {\n+            if (RouteFormat.hasRequiredParameter(template)) {\n+                return null;\n+\n+            } else if (RouteFormat.hasParameters(template)) {\n+                // In case all parameters are optional or wildcard, this will\n+                // return successfully.\n+                return getRouteModel().getUrl(template,\n+                        RouteParameters.empty());\n+            }\n+\n+            return template;\n+        });\n+    }\n+\n+    /**\n+     * Get the url path String for the given navigation target class and\n+     * parameters.\n+     *\n+     * @param navigationTarget\n+     *            navigationTarget to get registered route for\n+     * @param parameters\n+     *            route parameters\n+     * @return url String populated with parameters for the given\n+     *         navigationTarget\n+     */\n+    public String getTargetUrl(Class<? extends Component> navigationTarget,\n+            RouteParameters parameters) {\n+        return iterateTemplates(navigationTarget, template -> {\n+            try {\n+                return getRouteModel().getUrl(template, parameters);\n+            } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 408}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMjE4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0MVrOGXWQoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0MVrOGXWQoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTEzNg==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135136", "createdAt": "2020-05-19T08:48:41Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "diffHunk": "@@ -210,33 +397,73 @@ public String getTargetRoute(Class<? extends Component> navigationTarget) {\n      * @return all registered exception handlers\n      */\n     public Map<Class<? extends Exception>, Class<? extends Component>> getExceptionHandlers() {\n-        return exceptionTargets;\n+        return exceptionTargetMap;\n     }\n \n     /**\n      * Return the parent layout chain for given navigation target on the target\n      * path.\n      *\n      * @param path\n-     *         path to get parent layout chain for\n+     *            path to get parent layout chain for.\n      * @param navigationTarget\n-     *         navigation target on path to get parent layout chain for\n-     * @return list of parent layout chain\n+     *            navigation target on path to get parent layout chain for.\n+     * @return list of parent layout chain.\n+     * @deprecated use {@link #getNavigationRouteTarget(String)} instead.\n      */\n+    @Deprecated\n     public List<Class<? extends RouterLayout>> getParentLayouts(String path,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 446}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMjI1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0MVrOGXWQrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0MVrOGXWQrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTE0OQ==", "bodyText": "Reduce the number of conditional operators (4) used in the expression (maximum allowed 3).", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135149", "createdAt": "2020-05-19T08:48:41Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java", "diffHunk": "@@ -200,9 +244,32 @@ private boolean shouldRunNpmInstall() {\n                     .listFiles(\n                             (dir, name) -> !ignoredNodeFolders.contains(name));\n             assert installedPackages != null;\n-            return installedPackages.length == 0\n-                    || (installedPackages.length == 1 && FLOW_NPM_PACKAGE_NAME\n-                            .startsWith(installedPackages[0].getName()));\n+            return installedPackages.length == 0 || (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMjM2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/NavigationState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0M1rOGXWQvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0M1rOGXWQvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTE2Ng==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135166", "createdAt": "2020-05-19T08:48:43Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/NavigationState.java", "diffHunk": "@@ -84,29 +116,54 @@ public void setResolvedPath(String resolvedPath) {\n      */\n     public String getResolvedPath() {\n         if (resolvedPath == null) {\n-            resolvedPath = RouteConfiguration.forRegistry(router.getRegistry())\n-                    .getUrlBase(navigationTarget).orElse(null);\n+            resolvedPath = router.getRegistry()\n+                    .getTargetUrl(getNavigationTarget(), getRouteParameters())\n+                    .orElse(null);\n         }\n         return resolvedPath;\n     }\n \n+    /**\n+     * Sets the route parameters.\n+     *\n+     * @param routeParameters\n+     *            route parameters, not null.\n+     */\n+    void setRouteParameters(RouteParameters routeParameters) {\n+        assert routeParameters != null;\n+\n+        this.routeParameters = routeParameters;\n+    }\n+\n+    /**\n+     * Gets the route parameters map.\n+     * \n+     * @return route parameters.\n+     */\n+    public RouteParameters getRouteParameters() {\n+        return routeParameters;\n+    }\n+\n     /**\n      * Gets the list of strings that correspond to the raw string url\n      * parameters.\n      *\n      * @return the url parameters of this navigation state\n      */\n     public Optional<List<String>> getUrlParameters() {\n-        return Optional.ofNullable(urlParameters);\n+        return Optional.of(HasUrlParameterFormat\n+                .getParameterValues(getRouteParameters()));\n     }\n \n     /**\n-     * Set the list of strings that correspond to the raw string url parameters.\n+     * Set the list of strings that correspond to the raw string route parameters.\n      *\n-     * @param urlParameters\n+     * @param parameters\n      *            the url parameters to set\n+     * @deprecated use {@link #setRouteParameters(RouteParameters)} instead.\n      */\n-    public void setUrlParameters(List<String> urlParameters) {\n-        this.urlParameters = urlParameters;\n+    @Deprecated\n+    public void setUrlParameters(List<String> parameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMjQ4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/RouteFormat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0NFrOGXWQ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0NFrOGXWQ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTE4OA==", "bodyText": "Replace this if-then-else statement by a single return statement.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135188", "createdAt": "2020-05-19T08:48:44Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/RouteFormat.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.router.internal;\n+\n+import java.io.Serializable;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.vaadin.flow.router.RouteParameterFormatOption;\n+import com.vaadin.flow.router.RouteParameterRegex;\n+\n+/**\n+ * Utility class which contains various methods for defining url parameter\n+ * template.\n+ * <p>\n+ * For internal use only. May be renamed or removed in a future release.\n+ */\n+class RouteFormat implements Serializable {\n+\n+    /**\n+     * Returns whether the specified template contains route parameters.\n+     *\n+     * @param template\n+     *            a template.\n+     * @return true if the specified template contains route parameters,\n+     *         otherwise false.\n+     */\n+    static boolean hasParameters(String template) {\n+        return template.contains(\":\");\n+    }\n+\n+    /**\n+     * Returns whether the specified template contains route parameters.\n+     *\n+     * @param template\n+     *            a template.\n+     * @return true if the specified template contains route parameters,\n+     *         otherwise false.\n+     */\n+    static boolean hasRequiredParameter(String template) {\n+        int index = -1;\n+        do {\n+            index = template.indexOf(':', index + 1);\n+\n+            if (index >= 0) {\n+                final int regexIndex = template.indexOf('(', index);\n+                final int slashIndex = template.indexOf('/', index);\n+\n+                int parameterNameEnding = Math.min(regexIndex, slashIndex);\n+\n+                // Missing regex.\n+                if (parameterNameEnding < 0) {\n+                    parameterNameEnding = slashIndex;\n+                }\n+                // End of the string.\n+                if (parameterNameEnding < 0) {\n+                    parameterNameEnding = template.length();\n+                }\n+\n+                int optional = template.indexOf('?', index);\n+                if (0 < optional && optional < parameterNameEnding) {\n+                    // This parameter is an optional, move on.\n+                    continue;\n+                }\n+\n+                int wildcard = template.indexOf('*', index);\n+                if (0 < wildcard && wildcard < parameterNameEnding) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMjU1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/RouteFormat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0NVrOGXWQ3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0NVrOGXWQ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTE5OQ==", "bodyText": "Refactor this method to reduce its Cognitive Complexity from 18 to the 15 allowed.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135199", "createdAt": "2020-05-19T08:48:45Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/RouteFormat.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.router.internal;\n+\n+import java.io.Serializable;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.vaadin.flow.router.RouteParameterFormatOption;\n+import com.vaadin.flow.router.RouteParameterRegex;\n+\n+/**\n+ * Utility class which contains various methods for defining url parameter\n+ * template.\n+ * <p>\n+ * For internal use only. May be renamed or removed in a future release.\n+ */\n+class RouteFormat implements Serializable {\n+\n+    /**\n+     * Returns whether the specified template contains route parameters.\n+     *\n+     * @param template\n+     *            a template.\n+     * @return true if the specified template contains route parameters,\n+     *         otherwise false.\n+     */\n+    static boolean hasParameters(String template) {\n+        return template.contains(\":\");\n+    }\n+\n+    /**\n+     * Returns whether the specified template contains route parameters.\n+     *\n+     * @param template\n+     *            a template.\n+     * @return true if the specified template contains route parameters,\n+     *         otherwise false.\n+     */\n+    static boolean hasRequiredParameter(String template) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMjYwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/SessionRouteRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0NlrOGXWQ6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0NlrOGXWQ6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTIwOA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135208", "createdAt": "2020-05-19T08:48:46Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/SessionRouteRegistry.java", "diffHunk": "@@ -143,47 +146,101 @@ public Registration addRoutesChangeListener(\n     }\n \n     @Override\n-    public Optional<Class<? extends Component>> getNavigationTarget(\n-            String pathString) {\n-        Objects.requireNonNull(pathString, \"pathString must not be null.\");\n-        Optional<Class<? extends Component>> navigationTarget = getNavigationTarget(\n-                pathString, Collections.emptyList());\n+    public NavigationRouteTarget getNavigationRouteTarget(String url) {\n+        final NavigationRouteTarget navigationRouteTarget = getConfiguration()\n+                .getNavigationRouteTarget(url);\n+        if (navigationRouteTarget.hasTarget()) {\n+            return navigationRouteTarget;\n+        }\n+        return getParentRegistry().getNavigationRouteTarget(url);\n+    }\n \n-        if (navigationTarget.isPresent()) {\n-            return navigationTarget;\n+    @Override\n+    public RouteTarget getRouteTarget(Class<? extends Component> target,\n+            RouteParameters parameters) {\n+        final RouteTarget routeTarget = getConfiguration()\n+                .getRouteTarget(target, parameters);\n+        if (routeTarget != null) {\n+            return routeTarget;\n         }\n+        return getParentRegistry().getRouteTarget(target, parameters);\n+    }\n \n-        return getParentRegistry().getNavigationTarget(pathString);\n+    @Override\n+    public Optional<Class<? extends Component>> getNavigationTarget(\n+            String url) {\n+        Objects.requireNonNull(url, \"pathString must not be null.\");\n+        final Optional<Class<? extends Component>> target = getConfiguration()\n+                .getTarget(url);\n+        if (target.isPresent()) {\n+            return target;\n+        }\n+\n+        return getParentRegistry().getNavigationTarget(url);\n     }\n \n     @Override\n     public Optional<Class<? extends Component>> getNavigationTarget(\n-            String pathString, List<String> segments) {\n-        Objects.requireNonNull(pathString, \"pathString must not be null.\");\n-        if (getConfiguration().hasRoute(pathString, segments)) {\n-            return getConfiguration().getRoute(pathString, segments);\n+            String url, List<String> segments) {\n+        Objects.requireNonNull(url, \"url must not be null.\");\n+        final Optional<Class<? extends Component>> target = getConfiguration()\n+                .getTarget(PathUtil.getPath(url, segments));\n+        if (target.isPresent()) {\n+            return target;\n         }\n \n-        return getParentRegistry().getNavigationTarget(pathString, segments);\n+        return getParentRegistry().getNavigationTarget(url, segments);\n     }\n \n     @Override\n     public Optional<String> getTargetUrl(\n             Class<? extends Component> navigationTarget) {\n-\n         Optional<String> targetUrl = super.getTargetUrl(navigationTarget);\n         if (targetUrl.isPresent()) {\n             return targetUrl;\n         }\n-\n         return getParentRegistry().getTargetUrl(navigationTarget);\n     }\n \n     @Override\n+    public Optional<String> getTargetUrl(\n+            Class<? extends Component> navigationTarget,\n+            RouteParameters parameters) {\n+        Optional<String> targetUrl = super.getTargetUrl(navigationTarget,\n+                parameters);\n+        if (targetUrl.isPresent()) {\n+            return targetUrl;\n+        }\n+\n+        return getParentRegistry().getTargetUrl(navigationTarget, parameters);\n+    }\n+\n+    @Override\n+    public Optional<String> getTemplate(\n+            Class<? extends Component> navigationTarget) {\n+        final Optional<String> targetRoute = super.getTemplate(\n+                navigationTarget);\n+        if (targetRoute.isPresent()) {\n+            return targetRoute;\n+        }\n+        return getParentRegistry().getTemplate(navigationTarget);\n+    }\n+\n+    /**\n+     * @deprecated instead use {@link #getNavigationRouteTarget(String)} and\n+     *             retrieve the list of route layouts from the\n+     *             {@link RouteTarget} contained in the\n+     *             {@link NavigationRouteTarget}.\n+     * @see RouteTarget#getParentLayouts()\n+     */\n+    @Override\n+    @Deprecated\n     public List<Class<? extends RouterLayout>> getRouteLayouts(String path,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMjczOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0OFrOGXWQ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0OFrOGXWQ_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTIzMQ==", "bodyText": "Remove useless curly braces around statement", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135231", "createdAt": "2020-05-19T08:48:48Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java", "diffHunk": "@@ -329,45 +333,26 @@ public void removeRoute(String path) {\n     @Override\n     public void removeRoute(String path,\n             Class<? extends Component> navigationTarget) {\n-        if (!getConfiguration().hasRoute(path)) {\n+        if (!getConfiguration().hasTemplate(path)) {\n             return;\n         }\n-        configure(configuration -> configuration.removeRoute(path,\n-                navigationTarget));\n+        configureWithFullTemplate(path, navigationTarget,\n+                (configuration, fullTemplate) -> configuration\n+                        .removeRoute(fullTemplate, navigationTarget));\n     }\n \n     @Override\n     public void clean() {\n         configure(ConfigureRoutes::clear);\n     }\n \n-    /**\n-     * This adds a new route path to the configuration.\n-     * <p>\n-     * Note! this should only be called from a configure() for thread safety.\n-     *\n-     * @param path\n-     *            path for the navigation target\n-     * @param navigationTarget\n-     *            navigation target for given path\n-     * @param configuration\n-     *            mutable configuration object\n-     * @return the route target to which the target was added\n-     */\n-    private RouteTarget addRouteToConfiguration(String path,\n+    private void configureWithFullTemplate(String path,\n             Class<? extends Component> navigationTarget,\n-            ConfigureRoutes configuration) {\n-        if (!hasLock()) {\n-            throw new IllegalStateException(\n-                    \"addRouteToConfiguration requires the registry lock and a mutable configuration.\");\n-        }\n-\n-        configuration.setRoute(path, navigationTarget);\n-\n-        if (!configuration.hasRouteTarget(navigationTarget)) {\n-            configuration.setTargetRoute(navigationTarget, path);\n-        }\n-        return configuration.getRouteTarget(path);\n+            SerializableBiConsumer<ConfigureRoutes, String> templateConfiguration) {\n+        configure(configuration -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 278}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMjgyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0OFrOGXWRCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo0OFrOGXWRCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTI0Mg==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135242", "createdAt": "2020-05-19T08:48:48Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java", "diffHunk": "@@ -238,89 +250,81 @@ public ConfiguredRoutes getConfiguration() {\n     }\n \n     private List<Class<? extends RouterLayout>> getParentLayouts(\n-            ConfiguredRoutes configuration, Class<? extends Component> target,\n-            String url) {\n-        RouteTarget routeTarget = configuration.getRouteTarget(url);\n+            ConfiguredRoutes configuration, String template) {\n+        RouteTarget routeTarget = configuration.getRouteTarget(template);\n         if (routeTarget != null) {\n-            return routeTarget.getParentLayouts(target);\n+            return routeTarget.getParentLayouts();\n         }\n         return Collections.emptyList();\n     }\n \n+    /**\n+     * @deprecated instead use {@link #getNavigationRouteTarget(String)} and\n+     *             retrieve the list of route layouts from the\n+     *             {@link RouteTarget} contained in the\n+     *             {@link NavigationRouteTarget}.\n+     * @see RouteTarget#getParentLayouts()\n+     */\n     @Override\n+    @Deprecated\n     public List<Class<? extends RouterLayout>> getRouteLayouts(String path,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMjkwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/RouteRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo1MFrOGXWRFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo1MFrOGXWRFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTI1NA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135254", "createdAt": "2020-05-19T08:48:50Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/RouteRegistry.java", "diffHunk": "@@ -168,7 +215,13 @@ void setRoute(String path, Class<? extends Component> navigationTarget,\n      * @param navigationTarget\n      *            navigation target to get layout chain for\n      * @return layout chain of target\n+     * @deprecated instead use {@link #getNavigationRouteTarget(String)} and\n+     *             retrieve the list of route layouts from the\n+     *             {@link RouteTarget} contained in the\n+     *             {@link NavigationRouteTarget}.\n+     * @see RouteTarget#getParentLayouts()\n      */\n+    @Deprecated\n     List<Class<? extends RouterLayout>> getRouteLayouts(String path,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIzMzAxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo1MVrOGXWRKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0ODo1MVrOGXWRKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNTI3NA==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/vaadin/flow/pull/8379#discussion_r427135274", "createdAt": "2020-05-19T08:48:51Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteConfiguration.java", "diffHunk": "@@ -115,17 +111,30 @@ public static RouteConfiguration forRegistry(RouteRegistry registry) {\n      * @param path\n      *         path to check for route registration\n      * @return true if there exists a route for the given path\n+     * @deprecated Use {@link #isPathAvailable(String)}\n      */\n+    @Deprecated\n     public boolean isPathRegistered(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c84002ea02af76240859d4db1a20d55e9b707e"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3534, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}