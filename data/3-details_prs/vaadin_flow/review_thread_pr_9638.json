{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MDE0NjQz", "number": 9638, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDoxMTo1NlrOFE54oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDoxMTo1NlrOFE54oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjg3MDA5OnYy", "diffSide": "RIGHT", "path": "flow-client/src/main/resources/META-INF/resources/frontend/Connect.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDoxMTo1NlrOIFJJeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDozNzo0N1rOIFKNDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2MzY3Mg==", "bodyText": "BTW not a blocker, but we could remove this private method altogether. It was extracted for the sole purpose of calling for sending deferred requests, I think.", "url": "https://github.com/vaadin/flow/pull/9638#discussion_r542263672", "createdAt": "2020-12-14T10:11:56Z", "author": {"login": "platosha"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/Connect.ts", "diffHunk": "@@ -331,40 +309,10 @@ export class ConnectClient {\n       );\n     }\n \n-    return this.requestCall(false, endpoint, method, params);\n-  }\n-\n-  async deferrableCall(\n-    endpoint: string,\n-    method: string,\n-    params?: any,\n-  ): Promise<DeferrableResult<any>> {\n-    if ($wnd.Vaadin.connectionState.online) {\n-      try {\n-        const result = await this.call(endpoint, method, params);\n-        return { isDeferred: false, result };\n-      } catch (error) {\n-        if ((error instanceof EndpointResponseError) || (error instanceof EndpointError)) {\n-          // Error thrown in the client, carry to the user\n-          throw error;\n-        } else {\n-          // Network error\n-          return this.offlineHelper.storeDeferredCall({ endpoint, method, params });\n-        }\n-      }\n-    } else {\n-      return this.offlineHelper.storeDeferredCall({ endpoint, method, params });\n-    }\n-  }\n-\n-  async submitDeferredCalls() {\n-    await this.offlineHelper.processDeferredCalls(\n-      (endpoint, method, params) => this.requestCall(true, endpoint, method, params),\n-      this.deferredCallHandler);\n+    return this.requestCall(endpoint, method, params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4eca4448ab457fe4b81a60e5680a9426ff8ec9a"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI4MDk3NA==", "bodyText": "Good catch, now it's removed.", "url": "https://github.com/vaadin/flow/pull/9638#discussion_r542280974", "createdAt": "2020-12-14T10:37:47Z", "author": {"login": "haijian-vaadin"}, "path": "flow-client/src/main/resources/META-INF/resources/frontend/Connect.ts", "diffHunk": "@@ -331,40 +309,10 @@ export class ConnectClient {\n       );\n     }\n \n-    return this.requestCall(false, endpoint, method, params);\n-  }\n-\n-  async deferrableCall(\n-    endpoint: string,\n-    method: string,\n-    params?: any,\n-  ): Promise<DeferrableResult<any>> {\n-    if ($wnd.Vaadin.connectionState.online) {\n-      try {\n-        const result = await this.call(endpoint, method, params);\n-        return { isDeferred: false, result };\n-      } catch (error) {\n-        if ((error instanceof EndpointResponseError) || (error instanceof EndpointError)) {\n-          // Error thrown in the client, carry to the user\n-          throw error;\n-        } else {\n-          // Network error\n-          return this.offlineHelper.storeDeferredCall({ endpoint, method, params });\n-        }\n-      }\n-    } else {\n-      return this.offlineHelper.storeDeferredCall({ endpoint, method, params });\n-    }\n-  }\n-\n-  async submitDeferredCalls() {\n-    await this.offlineHelper.processDeferredCalls(\n-      (endpoint, method, params) => this.requestCall(true, endpoint, method, params),\n-      this.deferredCallHandler);\n+    return this.requestCall(endpoint, method, params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2MzY3Mg=="}, "originalCommit": {"oid": "d4eca4448ab457fe4b81a60e5680a9426ff8ec9a"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3728, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}