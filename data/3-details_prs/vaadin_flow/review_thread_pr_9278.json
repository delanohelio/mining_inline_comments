{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzOTU0MjUz", "number": 9278, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzozODo1MFrOE1Gkfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzo1MzowNFrOE1G1VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTE3NjMwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzozODo1MFrOHtMEFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzozODo1MFrOHtMEFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0NTYyMQ==", "bodyText": "Missing service parameter from the javaDoc", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517145621", "createdAt": "2020-11-04T07:38:50Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "diffHunk": "@@ -162,16 +166,31 @@ private boolean dependencyHasTagName(Dependency dependency, String tag) {\n     /**\n      * Finds the JavaScript sources for given tag.\n      *\n-     * @param tag the value of the {@link com.vaadin.flow.component.Tag} annotation,\n-     *            e.g. `my-component`\n-     * @param url the URL resolved according to the {@link com.vaadin.flow.component.dependency.JsModule}\n-     *            spec, for example {@code ./view/my-view.js} or {@code @vaadin/vaadin-button.js}.\n+     * @param tag", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTE5MTA5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzo0MzozMFrOHtMMYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODozODowM1rOHtN3Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0Nzc0Ng==", "bodyText": "Should we just have a method getResourceProvider in service so you wouldn't need to do this dance in every place as now it's basically the same code in every place and then we could have some null checks in place also.\nPerhaps even have the shorthand of getApplicationResource in  service", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517147746", "createdAt": "2020-11-04T07:43:30Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "diffHunk": "@@ -162,16 +166,31 @@ private boolean dependencyHasTagName(Dependency dependency, String tag) {\n     /**\n      * Finds the JavaScript sources for given tag.\n      *\n-     * @param tag the value of the {@link com.vaadin.flow.component.Tag} annotation,\n-     *            e.g. `my-component`\n-     * @param url the URL resolved according to the {@link com.vaadin.flow.component.dependency.JsModule}\n-     *            spec, for example {@code ./view/my-view.js} or {@code @vaadin/vaadin-button.js}.\n+     * @param tag\n+     *            the value of the {@link com.vaadin.flow.component.Tag}\n+     *            annotation, e.g. `my-component`\n+     * @param url\n+     *            the URL resolved according to the\n+     *            {@link com.vaadin.flow.component.dependency.JsModule} spec,\n+     *            for example {@code ./view/my-view.js} or\n+     *            {@code @vaadin/vaadin-button.js}.\n      * @return the .js source which declares given custom element, or null if no\n      *         such source can be found.\n      */\n-    protected String getSourcesFromTemplate(String tag, String url) {\n-        InputStream content = getClass().getClassLoader()\n-                .getResourceAsStream(url);\n+    protected String getSourcesFromTemplate(VaadinService service, String tag,\n+            String url) {\n+        Lookup lookup = service.getContext().getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2MDk0MQ==", "bodyText": "getApplicaitonResource shouldn't be in the service for sure.\nJust because this method may be called when there is no any service yet at all (and this is not the only method in ResourceProvider).\nFor the same reason I would avoid having getResourceProvider  in the service.\nThe only reason why getResourceProvider  could have been added into the service is just a shorthand.\nBut this is not a good reason. The shorthand can be a static method like SomeUtilClass.getResourceProvider(VaadinSevrice). Not sure whether it's worth or not: I don't like static methods.\nOverall : it's antipattern vs pattern and I'm not sure whether this is an antipattern or a pattern.\nTechnically there is no any logical reason to have ResourceProvider in the service (except a convenience method).\nAnd declaring such method in the service litters API: there can be other services which are used in various places in the code like ResourceProvider. Should we add a getter for every such service ? And should we do this every time when such service appears? (the opposite is also true: we may decide to remove any service at any time).\nSuch (I would say antipattern) allows to dynamically get service in the same way as OSGi allows to do this without modifying API everytime when new service appears (or disappears).\nIt has advantage (described above: keep API the same) and disadvantage: one has to know that there is a service which can be accessed this way.\nFor me the advantage at the moment outbalances a bit disadvantages.", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517160941", "createdAt": "2020-11-04T08:11:39Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "diffHunk": "@@ -162,16 +166,31 @@ private boolean dependencyHasTagName(Dependency dependency, String tag) {\n     /**\n      * Finds the JavaScript sources for given tag.\n      *\n-     * @param tag the value of the {@link com.vaadin.flow.component.Tag} annotation,\n-     *            e.g. `my-component`\n-     * @param url the URL resolved according to the {@link com.vaadin.flow.component.dependency.JsModule}\n-     *            spec, for example {@code ./view/my-view.js} or {@code @vaadin/vaadin-button.js}.\n+     * @param tag\n+     *            the value of the {@link com.vaadin.flow.component.Tag}\n+     *            annotation, e.g. `my-component`\n+     * @param url\n+     *            the URL resolved according to the\n+     *            {@link com.vaadin.flow.component.dependency.JsModule} spec,\n+     *            for example {@code ./view/my-view.js} or\n+     *            {@code @vaadin/vaadin-button.js}.\n      * @return the .js source which declares given custom element, or null if no\n      *         such source can be found.\n      */\n-    protected String getSourcesFromTemplate(String tag, String url) {\n-        InputStream content = getClass().getClassLoader()\n-                .getResourceAsStream(url);\n+    protected String getSourcesFromTemplate(VaadinService service, String tag,\n+            String url) {\n+        Lookup lookup = service.getContext().getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0Nzc0Ng=="}, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2Nzg0NQ==", "bodyText": "Perhaps we could have in ResourceProvider the method as getXYZ(service) the main concern is the moment you get a null on lookup which should be handled nicer than the current NPE that it will throw which in some cases is hard to know what was null for instance if the line is service.getContext().getAttribute(Lookup.class).lookup(ResourceProvider.class)", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517167845", "createdAt": "2020-11-04T08:25:03Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "diffHunk": "@@ -162,16 +166,31 @@ private boolean dependencyHasTagName(Dependency dependency, String tag) {\n     /**\n      * Finds the JavaScript sources for given tag.\n      *\n-     * @param tag the value of the {@link com.vaadin.flow.component.Tag} annotation,\n-     *            e.g. `my-component`\n-     * @param url the URL resolved according to the {@link com.vaadin.flow.component.dependency.JsModule}\n-     *            spec, for example {@code ./view/my-view.js} or {@code @vaadin/vaadin-button.js}.\n+     * @param tag\n+     *            the value of the {@link com.vaadin.flow.component.Tag}\n+     *            annotation, e.g. `my-component`\n+     * @param url\n+     *            the URL resolved according to the\n+     *            {@link com.vaadin.flow.component.dependency.JsModule} spec,\n+     *            for example {@code ./view/my-view.js} or\n+     *            {@code @vaadin/vaadin-button.js}.\n      * @return the .js source which declares given custom element, or null if no\n      *         such source can be found.\n      */\n-    protected String getSourcesFromTemplate(String tag, String url) {\n-        InputStream content = getClass().getClassLoader()\n-                .getResourceAsStream(url);\n+    protected String getSourcesFromTemplate(VaadinService service, String tag,\n+            String url) {\n+        Lookup lookup = service.getContext().getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0Nzc0Ng=="}, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3MzM4NA==", "bodyText": "ResourceProvider is an interface.\nIt may not have any static method.\nservice.getContext().getAttribute(Lookup.class)  may not be null\nlookup.lookup(ResourceProvider.class) also may not be null.\n(at least in runtime)\nThe code is done in the way that the instances always there because they are set in the servlet init phase.\nBut I don't really see a benefit having this in a separate method: you may not prevent NPE (NPE means everything is broken, it may just not happen, it's not possible to do a fallback). And if NPE happens (e.g. in the test) then how you may properly handle this ?\nIt just means that the test is not properly configured and I don't see any good message which may say something meaningful here.", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517173384", "createdAt": "2020-11-04T08:34:54Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "diffHunk": "@@ -162,16 +166,31 @@ private boolean dependencyHasTagName(Dependency dependency, String tag) {\n     /**\n      * Finds the JavaScript sources for given tag.\n      *\n-     * @param tag the value of the {@link com.vaadin.flow.component.Tag} annotation,\n-     *            e.g. `my-component`\n-     * @param url the URL resolved according to the {@link com.vaadin.flow.component.dependency.JsModule}\n-     *            spec, for example {@code ./view/my-view.js} or {@code @vaadin/vaadin-button.js}.\n+     * @param tag\n+     *            the value of the {@link com.vaadin.flow.component.Tag}\n+     *            annotation, e.g. `my-component`\n+     * @param url\n+     *            the URL resolved according to the\n+     *            {@link com.vaadin.flow.component.dependency.JsModule} spec,\n+     *            for example {@code ./view/my-view.js} or\n+     *            {@code @vaadin/vaadin-button.js}.\n      * @return the .js source which declares given custom element, or null if no\n      *         such source can be found.\n      */\n-    protected String getSourcesFromTemplate(String tag, String url) {\n-        InputStream content = getClass().getClassLoader()\n-                .getResourceAsStream(url);\n+    protected String getSourcesFromTemplate(VaadinService service, String tag,\n+            String url) {\n+        Lookup lookup = service.getContext().getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0Nzc0Ng=="}, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3NTEzNA==", "bodyText": "The only benefit which I see for now is replacing NPE with some ISE or RuntimeException.\nAnd I don't think replacing one exception with another is really a benefit.\nMay be it's worth to add a check in getAttribute()  method specifically for Lookup.class  parameter and log a warning but this is a separate ticket.", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517175134", "createdAt": "2020-11-04T08:38:03Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "diffHunk": "@@ -162,16 +166,31 @@ private boolean dependencyHasTagName(Dependency dependency, String tag) {\n     /**\n      * Finds the JavaScript sources for given tag.\n      *\n-     * @param tag the value of the {@link com.vaadin.flow.component.Tag} annotation,\n-     *            e.g. `my-component`\n-     * @param url the URL resolved according to the {@link com.vaadin.flow.component.dependency.JsModule}\n-     *            spec, for example {@code ./view/my-view.js} or {@code @vaadin/vaadin-button.js}.\n+     * @param tag\n+     *            the value of the {@link com.vaadin.flow.component.Tag}\n+     *            annotation, e.g. `my-component`\n+     * @param url\n+     *            the URL resolved according to the\n+     *            {@link com.vaadin.flow.component.dependency.JsModule} spec,\n+     *            for example {@code ./view/my-view.js} or\n+     *            {@code @vaadin/vaadin-button.js}.\n      * @return the .js source which declares given custom element, or null if no\n      *         such source can be found.\n      */\n-    protected String getSourcesFromTemplate(String tag, String url) {\n-        InputStream content = getClass().getClassLoader()\n-                .getResourceAsStream(url);\n+    protected String getSourcesFromTemplate(VaadinService service, String tag,\n+            String url) {\n+        Lookup lookup = service.getContext().getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0Nzc0Ng=="}, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTIwODQ2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzo0OToxOFrOHtMWTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoyODo0MVrOHtSC_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE1MDI4NA==", "bodyText": "the inputStream should be closed after the streamToString call.", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517150284", "createdAt": "2020-11-04T07:49:18Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "diffHunk": "@@ -162,16 +166,31 @@ private boolean dependencyHasTagName(Dependency dependency, String tag) {\n     /**\n      * Finds the JavaScript sources for given tag.\n      *\n-     * @param tag the value of the {@link com.vaadin.flow.component.Tag} annotation,\n-     *            e.g. `my-component`\n-     * @param url the URL resolved according to the {@link com.vaadin.flow.component.dependency.JsModule}\n-     *            spec, for example {@code ./view/my-view.js} or {@code @vaadin/vaadin-button.js}.\n+     * @param tag\n+     *            the value of the {@link com.vaadin.flow.component.Tag}\n+     *            annotation, e.g. `my-component`\n+     * @param url\n+     *            the URL resolved according to the\n+     *            {@link com.vaadin.flow.component.dependency.JsModule} spec,\n+     *            for example {@code ./view/my-view.js} or\n+     *            {@code @vaadin/vaadin-button.js}.\n      * @return the .js source which declares given custom element, or null if no\n      *         such source can be found.\n      */\n-    protected String getSourcesFromTemplate(String tag, String url) {\n-        InputStream content = getClass().getClassLoader()\n-                .getResourceAsStream(url);\n+    protected String getSourcesFromTemplate(VaadinService service, String tag,\n+            String url) {\n+        Lookup lookup = service.getContext().getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);\n+        InputStream content = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0MTY5NA==", "bodyText": "streamToString  should do this.\nBut not even this call : IOUtils.toString  should do this.\nQuite unexpected that it's no done there.", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517241694", "createdAt": "2020-11-04T10:25:38Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "diffHunk": "@@ -162,16 +166,31 @@ private boolean dependencyHasTagName(Dependency dependency, String tag) {\n     /**\n      * Finds the JavaScript sources for given tag.\n      *\n-     * @param tag the value of the {@link com.vaadin.flow.component.Tag} annotation,\n-     *            e.g. `my-component`\n-     * @param url the URL resolved according to the {@link com.vaadin.flow.component.dependency.JsModule}\n-     *            spec, for example {@code ./view/my-view.js} or {@code @vaadin/vaadin-button.js}.\n+     * @param tag\n+     *            the value of the {@link com.vaadin.flow.component.Tag}\n+     *            annotation, e.g. `my-component`\n+     * @param url\n+     *            the URL resolved according to the\n+     *            {@link com.vaadin.flow.component.dependency.JsModule} spec,\n+     *            for example {@code ./view/my-view.js} or\n+     *            {@code @vaadin/vaadin-button.js}.\n      * @return the .js source which declares given custom element, or null if no\n      *         such source can be found.\n      */\n-    protected String getSourcesFromTemplate(String tag, String url) {\n-        InputStream content = getClass().getClassLoader()\n-                .getResourceAsStream(url);\n+    protected String getSourcesFromTemplate(VaadinService service, String tag,\n+            String url) {\n+        Lookup lookup = service.getContext().getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);\n+        InputStream content = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE1MDI4NA=="}, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0MzY0NA==", "bodyText": "Actually ,\npublic static String streamToString(InputStream inputStream) {\n        String ret = \"\";\n        try {\n            return IOUtils.toString(inputStream, StandardCharsets.UTF_8)\n                    .replaceAll(\"\\\\R\", System.lineSeparator());\n        } catch (IOException exception) {\n            // ignore exception on close()\n            LoggerFactory.getLogger(FrontendUtils.class)\n                    .warn(\"Couldn't close template input stream\", exception);\n        }\n        return ret;\n    }\n\nThe code is wrong : it expects that IOEcception  happens on close only which is wrong.\nAnd also it expects that IOUtils.toString  is closed based on the log message (I haven't found the code which closes the stream in apache utils).\nSo this is a separate issue. I'm relying here that the stream is closed inside this util method.", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517243644", "createdAt": "2020-11-04T10:28:41Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "diffHunk": "@@ -162,16 +166,31 @@ private boolean dependencyHasTagName(Dependency dependency, String tag) {\n     /**\n      * Finds the JavaScript sources for given tag.\n      *\n-     * @param tag the value of the {@link com.vaadin.flow.component.Tag} annotation,\n-     *            e.g. `my-component`\n-     * @param url the URL resolved according to the {@link com.vaadin.flow.component.dependency.JsModule}\n-     *            spec, for example {@code ./view/my-view.js} or {@code @vaadin/vaadin-button.js}.\n+     * @param tag\n+     *            the value of the {@link com.vaadin.flow.component.Tag}\n+     *            annotation, e.g. `my-component`\n+     * @param url\n+     *            the URL resolved according to the\n+     *            {@link com.vaadin.flow.component.dependency.JsModule} spec,\n+     *            for example {@code ./view/my-view.js} or\n+     *            {@code @vaadin/vaadin-button.js}.\n      * @return the .js source which declares given custom element, or null if no\n      *         such source can be found.\n      */\n-    protected String getSourcesFromTemplate(String tag, String url) {\n-        InputStream content = getClass().getClassLoader()\n-                .getResourceAsStream(url);\n+    protected String getSourcesFromTemplate(VaadinService service, String tag,\n+            String url) {\n+        Lookup lookup = service.getContext().getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);\n+        InputStream content = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE1MDI4NA=="}, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTIxNzU0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/BootstrapUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzo1MjoyNFrOHtMbug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzo1MjoyNFrOHtMbug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE1MTY3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                file, e));\n          \n          \n            \n                                file), e);", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517151674", "createdAt": "2020-11-04T07:52:24Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/BootstrapUtils.java", "diffHunk": "@@ -301,13 +305,24 @@ static String getDependencyContents(VaadinRequest request, String file) {\n \n     private static InputStream getInlineResourceStream(VaadinRequest request,\n             String file) {\n-        InputStream stream = request.getService().getClassLoader()\n-                .getResourceAsStream(file);\n+        VaadinService service = request.getService();\n+        ResourceProvider resourceProvider = service.getContext()\n+                .getAttribute(Lookup.class).lookup(ResourceProvider.class);\n+        URL appResource = resourceProvider.getApplicationResource(service,\n+                file);\n+\n+        InputStream stream = null;\n+        try {\n+            stream = appResource == null ? null : appResource.openStream();\n+        } catch (IOException e) {\n+            throw new IllegalStateException(String.format(\n+                    \"Couldn't open application resource '%s' for inline resource\",\n+                    file, e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTIxOTQxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/BootstrapUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzo1MzowNFrOHtMcyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDozMDo0NlrOHtSIZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE1MTk0Ng==", "bodyText": "Unrelated formatting change", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517151946", "createdAt": "2020-11-04T07:53:04Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/BootstrapUtils.java", "diffHunk": "@@ -462,26 +477,26 @@ private static JsonObject createInlineDependencyObject(String content) {\n         // found\" target\n         return resolveRouteNotFoundNavigationTarget(\n                 ui.getSession().getService().getContext())\n-                .map(errorNavigationTarget -> {\n-                    /*\n-                     * {@code resolveTopParentLayout} is theoretically the\n-                     * correct way to get the parent layout. But in fact it does\n-                     * work for non route targets.\n-                     */\n-                    List<Class<? extends RouterLayout>> layouts = RouteUtil\n-                            .getParentLayoutsForNonRouteTarget(\n-                                    errorNavigationTarget);\n-                    if (layouts.isEmpty()) {\n-                        return errorNavigationTarget;\n-                    } else {\n-                        return layouts.get(layouts.size() - 1);\n-                    }\n-                });\n+                        .map(errorNavigationTarget -> {\n+                            /*\n+                             * {@code resolveTopParentLayout} is theoretically\n+                             * the correct way to get the parent layout. But in\n+                             * fact it does work for non route targets.\n+                             */\n+                            List<Class<? extends RouterLayout>> layouts = RouteUtil\n+                                    .getParentLayoutsForNonRouteTarget(\n+                                            errorNavigationTarget);\n+                            if (layouts.isEmpty()) {\n+                                return errorNavigationTarget;\n+                            } else {\n+                                return layouts.get(layouts.size() - 1);\n+                            }\n+                        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NTAyOQ==", "bodyText": "There were changes in this file, formatting is done by Eclipse based on the standard rules.\nThis has been discussed without any decision again in the slack.", "url": "https://github.com/vaadin/flow/pull/9278#discussion_r517245029", "createdAt": "2020-11-04T10:30:46Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/BootstrapUtils.java", "diffHunk": "@@ -462,26 +477,26 @@ private static JsonObject createInlineDependencyObject(String content) {\n         // found\" target\n         return resolveRouteNotFoundNavigationTarget(\n                 ui.getSession().getService().getContext())\n-                .map(errorNavigationTarget -> {\n-                    /*\n-                     * {@code resolveTopParentLayout} is theoretically the\n-                     * correct way to get the parent layout. But in fact it does\n-                     * work for non route targets.\n-                     */\n-                    List<Class<? extends RouterLayout>> layouts = RouteUtil\n-                            .getParentLayoutsForNonRouteTarget(\n-                                    errorNavigationTarget);\n-                    if (layouts.isEmpty()) {\n-                        return errorNavigationTarget;\n-                    } else {\n-                        return layouts.get(layouts.size() - 1);\n-                    }\n-                });\n+                        .map(errorNavigationTarget -> {\n+                            /*\n+                             * {@code resolveTopParentLayout} is theoretically\n+                             * the correct way to get the parent layout. But in\n+                             * fact it does work for non route targets.\n+                             */\n+                            List<Class<? extends RouterLayout>> layouts = RouteUtil\n+                                    .getParentLayoutsForNonRouteTarget(\n+                                            errorNavigationTarget);\n+                            if (layouts.isEmpty()) {\n+                                return errorNavigationTarget;\n+                            } else {\n+                                return layouts.get(layouts.size() - 1);\n+                            }\n+                        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE1MTk0Ng=="}, "originalCommit": {"oid": "3d376470bf585aa062651b60532f34cb97c4c400"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2965, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}