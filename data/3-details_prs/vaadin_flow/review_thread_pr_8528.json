{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMzAzMTc5", "number": 8528, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTo0MToxNFrOEDmefA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNToxNTowM1rOEEJKNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjExNTgwOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTo0MToxNFrOGgttQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODoxMjozNFrOGhWflw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1NjQ4MA==", "bodyText": "Should getDataProvider() only be called once in the method?\nAnd should itemIdentifier.equals() be used because it can't be null?", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r436956480", "createdAt": "2020-06-08T19:41:14Z", "author": {"login": "knoobie"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -126,10 +130,11 @@ public AbstractListDataView(\n \n     @Override\n     public boolean contains(T item) {\n-        // TODO: delegate this to the data communicator/component, since the\n-        // equality could be\n-        // determined by the provided identity checker (the default is equals).\n-        return getItems().anyMatch(i -> Objects.equals(i, item));\n+        final Object itemIdentifier = getDataProvider().getId(item);\n+        Objects.requireNonNull(itemIdentifier,\n+                \"Identity Provider should not return null\");\n+        return getItems().anyMatch(i -> getDataProvider().getId(i)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNDcyNw==", "bodyText": "Thank you for review! Done.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437624727", "createdAt": "2020-06-09T18:12:34Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -126,10 +130,11 @@ public AbstractListDataView(\n \n     @Override\n     public boolean contains(T item) {\n-        // TODO: delegate this to the data communicator/component, since the\n-        // equality could be\n-        // determined by the provided identity checker (the default is equals).\n-        return getItems().anyMatch(i -> Objects.equals(i, item));\n+        final Object itemIdentifier = getDataProvider().getId(item);\n+        Objects.requireNonNull(itemIdentifier,\n+                \"Identity Provider should not return null\");\n+        return getItems().anyMatch(i -> getDataProvider().getId(i)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1NjQ4MA=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjEzMjY1OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTo0Njo1MlrOGgt4Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODoxODowNlrOGhWr-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1OTI1OQ==", "bodyText": "The javadoc on both methods isn't clear if it updates an item or items.\nRandom question: why does data provider allows for multiple items with the same id? If I remember correctly V8 allows it too.. but only on the server side, the client side is broken once multiple rows have the same id in a grid. For example if you place components inside a row and scrolling.. the components aren't displayed in all rows correctly.. instead only some are shown.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r436959259", "createdAt": "2020-06-08T19:46:52Z", "author": {"login": "knoobie"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNzg5OQ==", "bodyText": "Yes, that's weird and this is crutch actually. My intension was to handle cases when users add the items into the collection directly, but I believe we should protect data view API instead to reject the duplicates. Now updateItem searches for first appearance of identical item assuming that there are no duplicates (same Id).", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437627899", "createdAt": "2020-06-09T18:18:06Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1OTI1OQ=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzMxNjcyOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNToyOTowN1rOGg5REw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNTo1Mzo1NVrOGhlzeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NTg3NQ==", "bodyText": "For a non List implementation we could if needed just remove and add if the item is not the same item as in the collection.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437145875", "createdAt": "2020-06-09T05:29:07Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);\n+                    getDataProvider().refreshItem(item);\n+                }\n+            }\n+            return this;\n+        }\n+        throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzMTQ0Ng==", "bodyText": "This would violate the ordering of elements. I'm not sure this would appropriate for users. WDYT?", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437631446", "createdAt": "2020-06-09T18:23:39Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);\n+                    getDataProvider().refreshItem(item);\n+                }\n+            }\n+            return this;\n+        }\n+        throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NTg3NQ=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NTU3OA==", "bodyText": "Well we do call it a ListDataView so I guess it's fine to fail on not having a list.\nFor a SetDataView we should have some default ordering required so then it would be fine.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437875578", "createdAt": "2020-06-10T05:53:55Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);\n+                    getDataProvider().refreshItem(item);\n+                }\n+            }\n+            return this;\n+        }\n+        throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NTg3NQ=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzMxODIxOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozMDowM1rOGg5SGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNTo1ODoyN1rOGhl5XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NjEzOQ==", "bodyText": "Before setting we could check if item.equals(nextItem) and only refresh if they are the same item.\ne.g.\n            if (itemIdentifier.equals(\n                        identityProvider.apply(nextItem))) {\n                if (!itemList.get(i).equals(item)) {\n                    itemList.set(i, item);\n                }\n                provider.refresh(item);\n            }", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437146139", "createdAt": "2020-06-09T05:30:03Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNDc3OQ==", "bodyText": "The second if block would never entered if the default DataProvider.getId is used, isn't it? For the identityProvider it is fine, because I assume the equal method would be more strict, but if the developer does not override getId it wouldn't make sense.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437634779", "createdAt": "2020-06-09T18:29:47Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NjEzOQ=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2MzIzOQ==", "bodyText": "Well if you have the default id and the objects equal then there is no need to set the item and we only need to refresh.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437863239", "createdAt": "2020-06-10T05:09:53Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NjEzOQ=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NzA4NA==", "bodyText": "I expect that calling set and refresh methods should happen either together, or not called at all. Suppose for example the item with some fields not included in equals method, the component is refreshed with that item then, but the backed collection not. So, after the refreshAll the item will be fetched with a stale state.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437877084", "createdAt": "2020-06-10T05:58:27Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NjEzOQ=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzMyMzQ0OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozMjo0MlrOGg5VRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODozMTo0MVrOGhXLGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0Njk0OA==", "bodyText": "This formatting change is not correct as our line length is 80, but now this is already 101.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437146948", "createdAt": "2020-06-09T05:32:42Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -164,8 +203,7 @@ public boolean contains(T item) {\n     public AbstractListDataView<T> addItemAfter(T item, T after) {\n         final Collection<T> items = getDataProvider().getItems();\n         if (!items.contains(after)) {\n-            throw new IllegalArgumentException(\n-                    \"Item to insert after is not available in the data\");\n+            throw new IllegalArgumentException(\"Item to insert after is not available in the data\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNTg2Ng==", "bodyText": "Done. That was the result of merging or incorrect code style customisation.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437635866", "createdAt": "2020-06-09T18:31:41Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -164,8 +203,7 @@ public boolean contains(T item) {\n     public AbstractListDataView<T> addItemAfter(T item, T after) {\n         final Collection<T> items = getDataProvider().getItems();\n         if (!items.contains(after)) {\n-            throw new IllegalArgumentException(\n-                    \"Item to insert after is not available in the data\");\n+            throw new IllegalArgumentException(\"Item to insert after is not available in the data\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0Njk0OA=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzMyNzAzOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozNDo0N1rOGg5XeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozNDo0N1rOGg5XeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NzUxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Equality between items relies on equality of its identifiers\n          \n          \n            \n                 * Equality between the items is determined by the identifiers", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437147513", "createdAt": "2020-06-09T05:34:47Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzMyODIyOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozNToyNlrOGg5YMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODozMTo1MlrOGhXLhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NzY5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Finds an items equal to {@code item} in the non-filtered data set\n          \n          \n            \n                 * Finds an item equal to {@code item} in the non-filtered data set", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437147699", "createdAt": "2020-06-09T05:35:26Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers\n+     * provided by {@link DataProvider#getId(Object)}.\n+     *\n+     * @param item\n+     *         item containing updated state\n+     * @return this ListDataView instance\n+     *\n+     * @see #updateItem(Object, SerializableFunction)\n+     */\n+    V updateItem(T item);\n+\n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNTk3NQ==", "bodyText": "done", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437635975", "createdAt": "2020-06-09T18:31:52Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers\n+     * provided by {@link DataProvider#getId(Object)}.\n+     *\n+     * @param item\n+     *         item containing updated state\n+     * @return this ListDataView instance\n+     *\n+     * @see #updateItem(Object, SerializableFunction)\n+     */\n+    V updateItem(T item);\n+\n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NzY5OQ=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzMzMzMyOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozNzo0OFrOGg5bPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozNzo0OFrOGg5bPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODQ3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Equality between items relies on equality of its identifiers\n          \n          \n            \n                  * Equality between the items is determined by the identifiers", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437148476", "createdAt": "2020-06-09T05:37:48Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers\n+     * provided by {@link DataProvider#getId(Object)}.\n+     *\n+     * @param item\n+     *         item containing updated state\n+     * @return this ListDataView instance\n+     *\n+     * @see #updateItem(Object, SerializableFunction)\n+     */\n+    V updateItem(T item);\n+\n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzMzNDg4OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozODo0NFrOGg5cNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozODo0NFrOGg5cNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODcyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *         object which is used to find the equal items in data set.\n          \n          \n            \n                 *         object which is used to determine the equality between items.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437148725", "createdAt": "2020-06-09T05:38:44Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers\n+     * provided by {@link DataProvider#getId(Object)}.\n+     *\n+     * @param item\n+     *         item containing updated state\n+     * @return this ListDataView instance\n+     *\n+     * @see #updateItem(Object, SerializableFunction)\n+     */\n+    V updateItem(T item);\n+\n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers\n+     * provided by {@code identityProvider}.\n+     *\n+     * @param item\n+     *         item containing updated state\n+     * @param identityProvider\n+     *         callback that transforms {@code item} object into identifier\n+     *         object which is used to find the equal items in data set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzMzNTk5OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozOToyNlrOGg5c7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODozMTo1OFrOGhXLxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODkwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Finds an items equal to {@code item} in the non-filtered data set\n          \n          \n            \n                 * Finds an item equal to {@code item} in the non-filtered data set", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437148908", "createdAt": "2020-06-09T05:39:26Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNjAzOA==", "bodyText": "done", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437636038", "createdAt": "2020-06-09T18:31:58Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODkwOA=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzM0NTE1OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTo0Mzo0NVrOGg5iUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODo0MjozOVrOGhXi-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MDI4OQ==", "bodyText": "This is duplicated 3 times so it could be a method getIdentifier(T item) also the unchecked getId calls could then use this method to get the non null check.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437150289", "createdAt": "2020-06-09T05:43:45Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -278,9 +316,13 @@ protected void validateItemIndex(int itemIndex) {\n \n     private int getItemIndex(T item) {\n         Objects.requireNonNull(item, \"item cannot be null\");\n+        final Object itemIdentifier = getDataProvider().getId(item);\n+        Objects.requireNonNull(itemIdentifier,\n+                \"Identity Provider should not return null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0MTk3OA==", "bodyText": "done", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437641978", "createdAt": "2020-06-09T18:42:39Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -278,9 +316,13 @@ protected void validateItemIndex(int itemIndex) {\n \n     private int getItemIndex(T item) {\n         Objects.requireNonNull(item, \"item cannot be null\");\n+        final Object itemIdentifier = getDataProvider().getId(item);\n+        Objects.requireNonNull(itemIdentifier,\n+                \"Identity Provider should not return null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MDI4OQ=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzM2MDI4OnYy", "diffSide": "RIGHT", "path": "flow-data/src/test/java/com/vaadin/flow/tests/data/bean/Item.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTo1MToxMFrOGg5rZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODo0Mjo1MVrOGhXjbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MjYxNQ==", "bodyText": "Would move item creation to the test class as it's  nice if the item content could be seen from the test class.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437152615", "createdAt": "2020-06-09T05:51:10Z", "author": {"login": "caalador"}, "path": "flow-data/src/test/java/com/vaadin/flow/tests/data/bean/Item.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.tests.data.bean;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Objects;\n+\n+public class Item {\n+\n+    private long id;\n+    private String value;\n+    private String description;\n+\n+    public Item(long id) {\n+        this.id = id;\n+    }\n+\n+    public Item(long id, String value, String description) {\n+        this.id = id;\n+        this.value = value;\n+        this.description = description;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Item item = (Item) o;\n+        return id == item.id;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id);\n+    }\n+\n+    public static Collection<Item> getTestItems() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0MjA5NA==", "bodyText": "done", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437642094", "createdAt": "2020-06-09T18:42:51Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/test/java/com/vaadin/flow/tests/data/bean/Item.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.tests.data.bean;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Objects;\n+\n+public class Item {\n+\n+    private long id;\n+    private String value;\n+    private String description;\n+\n+    public Item(long id) {\n+        this.id = id;\n+    }\n+\n+    public Item(long id, String value, String description) {\n+        this.id = id;\n+        this.value = value;\n+        this.description = description;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Item item = (Item) o;\n+        return id == item.id;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id);\n+    }\n+\n+    public static Collection<Item> getTestItems() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MjYxNQ=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzM3NzQ2OnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTo1OToxM1rOGg52Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODo0NDoyM1rOGhXmwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NTM1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                            break;\n          \n          \n            \n                        }\n          \n      \n    \n    \n  \n\nWe should break on the  first match as we only update item not multiple items.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437155350", "createdAt": "2020-06-09T05:59:13Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);\n+                    getDataProvider().refreshItem(item);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0Mjk0NA==", "bodyText": "For-each loop has been replaced by getItemIndex call", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437642944", "createdAt": "2020-06-09T18:44:23Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);\n+                    getDataProvider().refreshItem(item);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NTM1MA=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzM3ODAyOnYy", "diffSide": "RIGHT", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTo1OTozNlrOGg52ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNToyMzozN1rOGhlSRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NTQ1MQ==", "bodyText": "This test does bring up the question of @knoobie that why does data provider allow for multiple items with the same identifier as I would say that this is a bit confusing that we can suddenly change the contents of 2 items", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437155451", "createdAt": "2020-06-09T05:59:36Z", "author": {"login": "caalador"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -431,6 +433,103 @@ public void clearFilters_removesAllSetAndAddedFilters() {\n                 dataView.getItems().count());\n     }\n \n+    @Test\n+    public void updateItem_idEquality_updatesExistingItem() {\n+        Collection<Item> items = Item.getTestItems();\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(\n+                new Item(1L, \"updatedValue\", \"updatedDescr\"));\n+\n+        Optional<Item> firstItem =\n+                items.stream().filter(i -> i.getId() == 1L).findFirst();\n+\n+        // Item with id = 1 supposed to be updated\n+        Assert.assertTrue(firstItem.isPresent());\n+        Assert.assertEquals(3, items.size());\n+        Assert.assertEquals(\"updatedValue\", firstItem.get().getValue());\n+        Assert.assertEquals(\"updatedDescr\", firstItem.get().getDescription());\n+    }\n+\n+    @Test\n+    public void updateItem_idEquality_updatesExistingItems() {\n+        Collection<Item> items = Item.getTestItems();\n+        items.add(new Item(1L, \"duplicatedValue\", \"duplicatedDescr\"));\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1Njg5NA==", "bodyText": "Yes, I fixed that. Nevertheless, I would propose to protect add- methods agains duplicates using DataProvider.getId in a separate PR.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437656894", "createdAt": "2020-06-09T19:09:15Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -431,6 +433,103 @@ public void clearFilters_removesAllSetAndAddedFilters() {\n                 dataView.getItems().count());\n     }\n \n+    @Test\n+    public void updateItem_idEquality_updatesExistingItem() {\n+        Collection<Item> items = Item.getTestItems();\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(\n+                new Item(1L, \"updatedValue\", \"updatedDescr\"));\n+\n+        Optional<Item> firstItem =\n+                items.stream().filter(i -> i.getId() == 1L).findFirst();\n+\n+        // Item with id = 1 supposed to be updated\n+        Assert.assertTrue(firstItem.isPresent());\n+        Assert.assertEquals(3, items.size());\n+        Assert.assertEquals(\"updatedValue\", firstItem.get().getValue());\n+        Assert.assertEquals(\"updatedDescr\", firstItem.get().getDescription());\n+    }\n+\n+    @Test\n+    public void updateItem_idEquality_updatesExistingItems() {\n+        Collection<Item> items = Item.getTestItems();\n+        items.add(new Item(1L, \"duplicatedValue\", \"duplicatedDescr\"));\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NTQ1MQ=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NzA3OQ==", "bodyText": "Just create a new issue for it.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437867079", "createdAt": "2020-06-10T05:23:37Z", "author": {"login": "caalador"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -431,6 +433,103 @@ public void clearFilters_removesAllSetAndAddedFilters() {\n                 dataView.getItems().count());\n     }\n \n+    @Test\n+    public void updateItem_idEquality_updatesExistingItem() {\n+        Collection<Item> items = Item.getTestItems();\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(\n+                new Item(1L, \"updatedValue\", \"updatedDescr\"));\n+\n+        Optional<Item> firstItem =\n+                items.stream().filter(i -> i.getId() == 1L).findFirst();\n+\n+        // Item with id = 1 supposed to be updated\n+        Assert.assertTrue(firstItem.isPresent());\n+        Assert.assertEquals(3, items.size());\n+        Assert.assertEquals(\"updatedValue\", firstItem.get().getValue());\n+        Assert.assertEquals(\"updatedDescr\", firstItem.get().getDescription());\n+    }\n+\n+    @Test\n+    public void updateItem_idEquality_updatesExistingItems() {\n+        Collection<Item> items = Item.getTestItems();\n+        items.add(new Item(1L, \"duplicatedValue\", \"duplicatedDescr\"));\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NTQ1MQ=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzM5OTkxOnYy", "diffSide": "RIGHT", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjoxMDowM1rOGg6EIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTowOToyN1rOGhYdpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1ODk0Ng==", "bodyText": "The dataprovider should be created once and that instance served. This due to the fact that the suplier is already called 2 times just for the updateItem so we now create 4 ItemDataProviders during this simple test.\nThis goes for all the other tests also.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437158946", "createdAt": "2020-06-09T06:10:03Z", "author": {"login": "caalador"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -431,6 +433,103 @@ public void clearFilters_removesAllSetAndAddedFilters() {\n                 dataView.getItems().count());\n     }\n \n+    @Test\n+    public void updateItem_idEquality_updatesExistingItem() {\n+        Collection<Item> items = Item.getTestItems();\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(\n+                new Item(1L, \"updatedValue\", \"updatedDescr\"));\n+\n+        Optional<Item> firstItem =\n+                items.stream().filter(i -> i.getId() == 1L).findFirst();\n+\n+        // Item with id = 1 supposed to be updated\n+        Assert.assertTrue(firstItem.isPresent());\n+        Assert.assertEquals(3, items.size());\n+        Assert.assertEquals(\"updatedValue\", firstItem.get().getValue());\n+        Assert.assertEquals(\"updatedDescr\", firstItem.get().getDescription());\n+    }\n+\n+    @Test\n+    public void updateItem_idEquality_updatesExistingItems() {\n+        Collection<Item> items = Item.getTestItems();\n+        items.add(new Item(1L, \"duplicatedValue\", \"duplicatedDescr\"));\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(\n+                new Item(1L, \"updatedValue\", \"updatedDescr\"));\n+\n+        List<Item> updatedItems =\n+                items.stream().filter(i -> i.getId() == 1L).collect(Collectors.toList());\n+\n+        // Two items with id = 1 supposed to be updated\n+        Assert.assertEquals(2, updatedItems.size());\n+        Assert.assertEquals(4, items.size());\n+        Assert.assertEquals(\"updatedValue\", updatedItems.get(0).getValue());\n+        Assert.assertEquals(\"updatedDescr\", updatedItems.get(0).getDescription());\n+        Assert.assertEquals(\"updatedValue\", updatedItems.get(1).getValue());\n+        Assert.assertEquals(\"updatedDescr\", updatedItems.get(1).getDescription());\n+    }\n+\n+    @Test\n+    public void updateItem_descrIdentity_updatesExistingItem() {\n+        Collection<Item> items = Item.getTestItems();\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> new ItemDataProvider(items), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1Njk5OA==", "bodyText": "done", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437656998", "createdAt": "2020-06-09T19:09:27Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -431,6 +433,103 @@ public void clearFilters_removesAllSetAndAddedFilters() {\n                 dataView.getItems().count());\n     }\n \n+    @Test\n+    public void updateItem_idEquality_updatesExistingItem() {\n+        Collection<Item> items = Item.getTestItems();\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(\n+                new Item(1L, \"updatedValue\", \"updatedDescr\"));\n+\n+        Optional<Item> firstItem =\n+                items.stream().filter(i -> i.getId() == 1L).findFirst();\n+\n+        // Item with id = 1 supposed to be updated\n+        Assert.assertTrue(firstItem.isPresent());\n+        Assert.assertEquals(3, items.size());\n+        Assert.assertEquals(\"updatedValue\", firstItem.get().getValue());\n+        Assert.assertEquals(\"updatedDescr\", firstItem.get().getDescription());\n+    }\n+\n+    @Test\n+    public void updateItem_idEquality_updatesExistingItems() {\n+        Collection<Item> items = Item.getTestItems();\n+        items.add(new Item(1L, \"duplicatedValue\", \"duplicatedDescr\"));\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(\n+                new Item(1L, \"updatedValue\", \"updatedDescr\"));\n+\n+        List<Item> updatedItems =\n+                items.stream().filter(i -> i.getId() == 1L).collect(Collectors.toList());\n+\n+        // Two items with id = 1 supposed to be updated\n+        Assert.assertEquals(2, updatedItems.size());\n+        Assert.assertEquals(4, items.size());\n+        Assert.assertEquals(\"updatedValue\", updatedItems.get(0).getValue());\n+        Assert.assertEquals(\"updatedDescr\", updatedItems.get(0).getDescription());\n+        Assert.assertEquals(\"updatedValue\", updatedItems.get(1).getValue());\n+        Assert.assertEquals(\"updatedDescr\", updatedItems.get(1).getDescription());\n+    }\n+\n+    @Test\n+    public void updateItem_descrIdentity_updatesExistingItem() {\n+        Collection<Item> items = Item.getTestItems();\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> new ItemDataProvider(items), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1ODk0Ng=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQwMjE3OnYy", "diffSide": "RIGHT", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjoxMDo1NlrOGg6Fgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOToxMDo1MVrOGhYgiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1OTI5OA==", "bodyText": "The name could perhaps somehow note that it has the Id as Description", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437159298", "createdAt": "2020-06-09T06:10:56Z", "author": {"login": "caalador"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -439,4 +538,26 @@ public ListDataViewImpl(\n             super(dataProviderSupplier, component);\n         }\n     }\n+\n+    private static class ItemDataProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1NzczNg==", "bodyText": "Did not find the better name than CustomIdentityItemDataProvider", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437657736", "createdAt": "2020-06-09T19:10:51Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -439,4 +538,26 @@ public ListDataViewImpl(\n             super(dataProviderSupplier, component);\n         }\n     }\n+\n+    private static class ItemDataProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1OTI5OA=="}, "originalCommit": {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzc5ODMxOnYy", "diffSide": "RIGHT", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNToxNTowM1rOGhlI8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNTo0MDowOVrOGhlj_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NDY4OA==", "bodyText": "Do we need the dataProvider here as we  can just use the getDataProvider() method to get a ListDataProvider.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437864688", "createdAt": "2020-06-10T05:15:03Z", "author": {"login": "caalador"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -276,13 +317,37 @@ protected void validateItemIndex(int itemIndex) {\n         return this;\n     }\n \n-    private int getItemIndex(T item) {\n+    private int getItemIndex(\n+            T item, SerializableFunction<T, ?> identityProvider) {\n         Objects.requireNonNull(item, \"item cannot be null\");\n+        final Object itemIdentifier = getIdentifier(item,\n+                identityProvider);\n         AtomicInteger index = new AtomicInteger(-1);\n         if (!getItems().peek(t -> index.incrementAndGet())\n-                .filter(t -> Objects.equals(item, t)).findFirst().isPresent()) {\n+                .filter(t -> itemIdentifier.equals(\n+                        getIdentifier(t, identityProvider)))\n+                .findFirst().isPresent()) {\n             return -1;\n         }\n         return index.get();\n     }\n+\n+    private int getItemIndex(T item) {\n+        ListDataProvider<T> dataProvider = getDataProvider();\n+        return getItemIndex(item, dataProvider::getId);\n+    }\n+\n+    private Object getIdentifier(T item,\n+                                 SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        final Object itemIdentifier = identityProvider.apply(item);\n+        Objects.requireNonNull(itemIdentifier,\n+                \"Identity provider should not return null\");\n+        return itemIdentifier;\n+    }\n+\n+    private Object getIdentifier(T item, ListDataProvider<T> dataProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d777f56dce182464652749eab705ced349582810"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3MTYxMw==", "bodyText": "This method could be invoked in a loop, so i wanted to avoid multiple getDataProvider() calls here inside this method.", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437871613", "createdAt": "2020-06-10T05:40:09Z", "author": {"login": "mshabarov"}, "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -276,13 +317,37 @@ protected void validateItemIndex(int itemIndex) {\n         return this;\n     }\n \n-    private int getItemIndex(T item) {\n+    private int getItemIndex(\n+            T item, SerializableFunction<T, ?> identityProvider) {\n         Objects.requireNonNull(item, \"item cannot be null\");\n+        final Object itemIdentifier = getIdentifier(item,\n+                identityProvider);\n         AtomicInteger index = new AtomicInteger(-1);\n         if (!getItems().peek(t -> index.incrementAndGet())\n-                .filter(t -> Objects.equals(item, t)).findFirst().isPresent()) {\n+                .filter(t -> itemIdentifier.equals(\n+                        getIdentifier(t, identityProvider)))\n+                .findFirst().isPresent()) {\n             return -1;\n         }\n         return index.get();\n     }\n+\n+    private int getItemIndex(T item) {\n+        ListDataProvider<T> dataProvider = getDataProvider();\n+        return getItemIndex(item, dataProvider::getId);\n+    }\n+\n+    private Object getIdentifier(T item,\n+                                 SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        final Object itemIdentifier = identityProvider.apply(item);\n+        Objects.requireNonNull(itemIdentifier,\n+                \"Identity provider should not return null\");\n+        return itemIdentifier;\n+    }\n+\n+    private Object getIdentifier(T item, ListDataProvider<T> dataProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NDY4OA=="}, "originalCommit": {"oid": "d777f56dce182464652749eab705ced349582810"}, "originalPosition": 163}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3469, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}