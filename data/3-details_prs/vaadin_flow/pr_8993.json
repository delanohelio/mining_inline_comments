{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMDUxMzc3", "number": 8993, "title": "feat(offline): read @PWA to configure webpack build", "bodyText": "Fixes #8983", "createdAt": "2020-09-09T18:47:28Z", "url": "https://github.com/vaadin/flow/pull/8993", "merged": true, "mergeCommit": {"oid": "847f33c3487ddca0787a50c781ee644e09436a1c"}, "closed": true, "closedAt": "2020-09-23T11:33:49Z", "author": {"login": "platosha"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHlyZDABqjM3NTI3MzE0Nzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLm2-3gFqTQ5NDI3NDExOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16d5ce07788638389b32cfd4bc0cb1cc675fd09b", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/16d5ce07788638389b32cfd4bc0cb1cc675fd09b", "committedDate": "2020-09-10T19:13:14Z", "message": "Add tests and apply analysis suggestions"}, "afterCommit": {"oid": "6105dc06b1930e878584003cbb06a290a505bf21", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/6105dc06b1930e878584003cbb06a290a505bf21", "committedDate": "2020-09-10T19:15:56Z", "message": "Add tests and apply analysis suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2Njg4NDcw", "url": "https://github.com/vaadin/flow/pull/8993#pullrequestreview-486688470", "createdAt": "2020-09-11T10:25:12Z", "commit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoyNToxMlrOHQZX_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo1MDoxMlrOHQaFFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NTAwNg==", "bodyText": "This is not thread-safe collection.\nAlso field could be made final", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486955006", "createdAt": "2020-09-11T10:25:12Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -37,6 +41,7 @@\n  * @since 2.0\n  */\n final class FrontendAnnotatedClassVisitor extends ClassVisitor {\n+    private static Map<String, Map<String, Object>> annotationDefaults = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NzkzNA==", "bodyText": "Can be replaced with !data.contains(info)", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486957934", "createdAt": "2020-09-11T10:31:18Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -66,34 +75,65 @@\n      *             when the class name is not found\n      */\n     public void visitClass(String name) {\n+        visitClass(name, this);\n+    }\n+\n+    /**\n+     * Visit recursively a class to find annotations.\n+     *\n+     * @param name\n+     *            the class name\n+     * @param visitor\n+     *            the visitor to use\n+     * @throws IOException\n+     *             when the class name is not found\n+     */\n+    public void visitClass(String name, ClassVisitor visitor) {\n         if (name == null) {\n             return;\n         }\n         try {\n             ClassReader cr;\n             URL url = finder.getResource(name.replace(\".\", \"/\") + \".class\");\n             cr = new ClassReader(url.openStream());\n-            cr.accept(this, 0);\n+            cr.accept(visitor, 0);\n         } catch (IOException e) {\n             throw new UncheckedIOException(e);\n         }\n     }\n \n     // Executed for the class definition info.\n     @Override\n-    public void visit(int version, int access, String name, String signature, String superName,\n-            String[] interfaces) {\n-        visitClass(superName);\n+    public void visit(int version, int access, String name, String signature,\n+            String superName, String[] interfaces) {\n+        visitClass(superName, this);\n     }\n \n     @Override\n-    public AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {\n+    public AnnotationVisitor visitAnnotation(String descriptor,\n+            boolean visible) {\n         String cname = descriptor.replace(\"/\", \".\");\n         if (cname.contains(annotationName)) {\n             return new RepeatedAnnotationVisitor() {\n                 // initialize for non repeated annotations\n                 HashMap<String, Object> info = new HashMap<>();\n \n+                @Override\n+                public AnnotationVisitor visitArray(String name) {\n+                    List values = new ArrayList<>();\n+                    info.put(name, values);\n+\n+                    return new AnnotationVisitor(api, this) {\n+                        @Override\n+                        public void visit(String dummy, Object value) {\n+                            if (data.indexOf(info) < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1OTMwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IOException\n          \n          \n            \n                 * @throws UncheckedIOException", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486959308", "createdAt": "2020-09-11T10:34:14Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -66,34 +75,65 @@\n      *             when the class name is not found\n      */\n     public void visitClass(String name) {\n+        visitClass(name, this);\n+    }\n+\n+    /**\n+     * Visit recursively a class to find annotations.\n+     *\n+     * @param name\n+     *            the class name\n+     * @param visitor\n+     *            the visitor to use\n+     * @throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MDgwMw==", "bodyText": "All those anonymous visitors should be extracted into static inner classes", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486960803", "createdAt": "2020-09-11T10:37:41Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -66,34 +75,65 @@\n      *             when the class name is not found\n      */\n     public void visitClass(String name) {\n+        visitClass(name, this);\n+    }\n+\n+    /**\n+     * Visit recursively a class to find annotations.\n+     *\n+     * @param name\n+     *            the class name\n+     * @param visitor\n+     *            the visitor to use\n+     * @throws IOException\n+     *             when the class name is not found\n+     */\n+    public void visitClass(String name, ClassVisitor visitor) {\n         if (name == null) {\n             return;\n         }\n         try {\n             ClassReader cr;\n             URL url = finder.getResource(name.replace(\".\", \"/\") + \".class\");\n             cr = new ClassReader(url.openStream());\n-            cr.accept(this, 0);\n+            cr.accept(visitor, 0);\n         } catch (IOException e) {\n             throw new UncheckedIOException(e);\n         }\n     }\n \n     // Executed for the class definition info.\n     @Override\n-    public void visit(int version, int access, String name, String signature, String superName,\n-            String[] interfaces) {\n-        visitClass(superName);\n+    public void visit(int version, int access, String name, String signature,\n+            String superName, String[] interfaces) {\n+        visitClass(superName, this);\n     }\n \n     @Override\n-    public AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {\n+    public AnnotationVisitor visitAnnotation(String descriptor,\n+            boolean visible) {\n         String cname = descriptor.replace(\"/\", \".\");\n         if (cname.contains(annotationName)) {\n             return new RepeatedAnnotationVisitor() {\n                 // initialize for non repeated annotations\n                 HashMap<String, Object> info = new HashMap<>();\n \n+                @Override\n+                public AnnotationVisitor visitArray(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MjQ2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return LoggerFactory.getLogger(this.getClass());\n          \n          \n            \n                    return LoggerFactory.getLogger(FrontendAnnotatedClassVisitor.class);", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486962465", "createdAt": "2020-09-11T10:41:34Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -165,10 +204,106 @@ public AnnotationVisitor visitAnnotation(String name, String descriptor) {\n      * @return a set of all values found\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public <T> Set<T> getValuesForKey(String key, String value, String property) {\n-        return (Set<T>)data.stream()\n+    public <T> Set<T> getValuesForKey(String key, String value,\n+            String property) {\n+        return (Set<T>) data.stream()\n                 .filter(h -> h.containsKey(key) && h.get(key).equals(value))\n-                .map(h -> h.get(property))\n-                .collect(Collectors.toSet());\n+                .map(h -> h.get(property)).collect(Collectors.toSet());\n+    }\n+\n+    /**\n+     * Return the values of a an annotation parameter.\n+     *\n+     * @throws IllegalArgumentException\n+     *             if there is not one single annotation\n+     * @param parameter\n+     *            the annotation parameter used for getting values\n+     * @return the value from the annotation\n+     */\n+    public <T> T getValue(String parameter) {\n+        if (data.size() != 1) {\n+            throw new IllegalArgumentException(\n+                    \"getValue can only be used when there is one annotation. There are \"\n+                            + data.size() + \" instances of \" + annotationName);\n+        }\n+        Set<T> values = getValues(parameter);\n+        if (values.isEmpty()) {\n+            getLogger().debug(\"No value for {} using default: {}\", parameter,\n+                    getDefault(parameter));\n+            return getDefault(parameter);\n+        }\n+        return values.iterator().next();\n+    }\n+\n+    private <T> T getDefault(String parameter) {\n+        return (T) annotationDefaults.get(annotationName).get(parameter);\n+    }\n+\n+    private Map<String, Object> readAnnotationDefaultValues(\n+            String annotationName) {\n+        getLogger().debug(\"Reading default values for {}\", annotationName);\n+        Map<String, Object> defaults = new HashMap<>();\n+\n+        visitClass(annotationName, new AnnotationClassVisitor(defaults));\n+\n+        getLogger().debug(\"Default values for {}: {}\", annotationName,\n+                defaults);\n+\n+        return defaults;\n+    }\n+\n+    private Logger getLogger() {\n+        return LoggerFactory.getLogger(this.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NTI2NQ==", "bodyText": "Replace with an empty String[] array constant: preallocation is not needed since Java 6", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486965265", "createdAt": "2020-09-11T10:47:36Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "diffHunk": "@@ -369,6 +385,59 @@ private void computePackages() throws ClassNotFoundException, IOException {\n         }\n     }\n \n+    /**\n+     * Find the class with a {@link com.vaadin.flow.server.PWA} annotation and\n+     * read it into a {@link com.vaadin.flow.server.PwaConfiguration} object.\n+     *\n+     * @throws ClassNotFoundException\n+     * @throws IllegalStateException\n+     */\n+    private void computePwaConfiguration()\n+            throws ClassNotFoundException, IllegalStateException {\n+\n+        FrontendAnnotatedClassVisitor pwaVisitor = new FrontendAnnotatedClassVisitor(\n+                getFinder(), PWA.class.getName());\n+        Class<?> AppShellConfigurator = getFinder().loadClass(\n+                AppShellConfigurator.class.getName());\n+\n+        for (Class<?> hopefullyAppShellClass :\n+                getFinder().getAnnotatedClasses(PWA.class.getName())) {\n+                    if (!Arrays.asList(hopefullyAppShellClass.getInterfaces())\n+                            .contains(AppShellConfigurator)) {\n+                        throw new IllegalStateException(\n+                                ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION);\n+                    }\n+                    pwaVisitor.visitClass(hopefullyAppShellClass.getName());\n+        }\n+\n+        Set<String> dependencies = pwaVisitor.getValues(\"name\");\n+        if (dependencies.size() > 1) {\n+            throw new IllegalStateException(ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION);\n+        }\n+        if (dependencies.isEmpty()) {\n+            this.pwaConfiguration = new PwaConfiguration();\n+            return;\n+        }\n+\n+        String name = pwaVisitor.getValue(\"name\");\n+        String shortName = pwaVisitor.getValue(\"shortName\");\n+        String description = pwaVisitor.getValue(\"description\");\n+        String backgroundColor = pwaVisitor.getValue(\"backgroundColor\");\n+        String themeColor = pwaVisitor.getValue(\"themeColor\");\n+        String iconPath = pwaVisitor.getValue(\"iconPath\");\n+        log().error(\"iconPath in {}: {}\", getClass().getSimpleName(), iconPath);\n+        String manifestPath = pwaVisitor.getValue(\"manifestPath\");\n+        String offlinePath = pwaVisitor.getValue(\"offlinePath\");\n+        String display = pwaVisitor.getValue(\"display\");\n+        String startPath = pwaVisitor.getValue(\"startPath\");\n+        List<String> offlineResources = pwaVisitor.getValue(\"offlineResources\");\n+\n+        this.pwaConfiguration = new PwaConfiguration(true, name, shortName,\n+                description, backgroundColor, themeColor, iconPath,\n+                manifestPath, offlinePath, display, startPath,\n+                offlineResources.toArray(new String[offlineResources.size()]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NjU1MA==", "bodyText": "shortName might be null here, PwaConfiguration constructor will throw NPE in that case", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r486966550", "createdAt": "2020-09-11T10:50:12Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java", "diffHunk": "@@ -407,6 +426,62 @@ private Object invokeAnnotationMethod(Annotation target,\n         }\n     }\n \n+    private PwaConfiguration discoverPwa() {\n+        try {\n+            Class<? extends Annotation> loadedPWAAnnotation = getFinder()\n+                    .loadClass(PWA.class.getName());\n+\n+            Set<Class<?>> annotatedClasses = getFinder()\n+                    .getAnnotatedClasses(loadedPWAAnnotation);\n+            if (annotatedClasses.isEmpty()) {\n+                return new PwaConfiguration();\n+            } else if (annotatedClasses.size() != 1) {\n+                throw new IllegalStateException(\n+                        ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION);\n+            }\n+\n+            Class<?> hopefullyAppShellClass =\n+                    annotatedClasses.iterator().next();\n+            if (!Arrays.asList(hopefullyAppShellClass.getInterfaces()).stream()\n+                    .map(Class::getName).collect(Collectors.toList())\n+                    .contains(AppShellConfigurator.class.getName())) {\n+                throw new IllegalStateException(\n+                        ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION);\n+            }\n+\n+            Annotation pwa = annotationFinder\n+                    .apply(hopefullyAppShellClass, loadedPWAAnnotation).get(0);\n+\n+            String name = getAnnotationValueAsString(pwa, \"name\");\n+            String shortName = getAnnotationValueAsString(pwa, \"shortName\");\n+            String description = getAnnotationValueAsString(pwa,\n+                    \"description\");\n+            String backgroundColor = getAnnotationValueAsString(pwa,\n+                    \"backgroundColor\");\n+            String themeColor = getAnnotationValueAsString(pwa,\n+                    \"themeColor\");\n+            String iconPath = getAnnotationValueAsString(pwa, \"iconPath\");\n+\n+            getLogger().error(\"iconPath in \" + getClass().getSimpleName() + \": \"\n+                    + iconPath);\n+            String manifestPath = getAnnotationValueAsString(pwa,\n+                    \"manifestPath\");\n+            String offlinePath = getAnnotationValueAsString(pwa,\n+                    \"offlinePath\");\n+            String display = getAnnotationValueAsString(pwa, \"display\");\n+            String startPath = getAnnotationValueAsString(pwa, \"startPath\");\n+            String[] offlineResources = (String[]) getAnnotationValue(pwa,\n+                    \"offlineResources\");\n+\n+            return new PwaConfiguration(true, name, shortName, description,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f69422e4049aea3c9677cbb7953092545efa27"}, "originalPosition": 175}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f448c62a5f7a6471024f008b9326ab1075b8fa0f", "author": {"user": {"login": "haijian-vaadin", "name": "Haijian Wang"}}, "url": "https://github.com/vaadin/flow/commit/f448c62a5f7a6471024f008b9326ab1075b8fa0f", "committedDate": "2020-09-11T11:52:28Z", "message": "Merge branch 'feature/offline' into ap/feature/pwa-webpack-config"}, "afterCommit": {"oid": "1c7e0fabe91704ef821dbac1591edff02b28f6a3", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/1c7e0fabe91704ef821dbac1591edff02b28f6a3", "committedDate": "2020-09-16T15:34:37Z", "message": "Apply review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNDc1Mjk3", "url": "https://github.com/vaadin/flow/pull/8993#pullrequestreview-490475297", "createdAt": "2020-09-17T10:58:18Z", "commit": {"oid": "dcbdb451a234014bb5ab578918963a931304f731"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1ODoxOFrOHTcm2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo1ODoxOFrOHTcm2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1MzY4OQ==", "bodyText": "Consider using java.lang.reflect.Method#getDefaultValue instead of ASM to collect default annotation values.", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r490153689", "createdAt": "2020-09-17T10:58:18Z", "author": {"login": "fluorumlabs"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java", "diffHunk": "@@ -165,10 +170,187 @@ public AnnotationVisitor visitAnnotation(String name, String descriptor) {\n      * @return a set of all values found\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public <T> Set<T> getValuesForKey(String key, String value, String property) {\n-        return (Set<T>)data.stream()\n+    public <T> Set<T> getValuesForKey(String key, String value,\n+            String property) {\n+        return (Set<T>) data.stream()\n                 .filter(h -> h.containsKey(key) && h.get(key).equals(value))\n-                .map(h -> h.get(property))\n-                .collect(Collectors.toSet());\n+                .map(h -> h.get(property)).collect(Collectors.toSet());\n+    }\n+\n+    /**\n+     * Return the values of a an annotation parameter.\n+     *\n+     * @throws IllegalArgumentException\n+     *             if there is not one single annotation\n+     * @param parameter\n+     *            the annotation parameter used for getting values\n+     * @return the value from the annotation\n+     */\n+    public <T> T getValue(String parameter) {\n+        if (data.size() != 1) {\n+            throw new IllegalArgumentException(\n+                    \"getValue can only be used when there is one annotation. There are \"\n+                            + data.size() + \" instances of \" + annotationName);\n+        }\n+        Set<T> values = getValues(parameter);\n+        if (values.isEmpty()) {\n+            getLogger().debug(\"No value for {} using default: {}\", parameter,\n+                    getDefault(parameter));\n+            return getDefault(parameter);\n+        }\n+        return values.iterator().next();\n+    }\n+\n+    private <T> T getDefault(String parameter) {\n+        return (T) annotationDefaults.get(annotationName).get(parameter);\n+    }\n+\n+    private Map<String, Object> readAnnotationDefaultValues(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbdb451a234014bb5ab578918963a931304f731"}, "originalPosition": 180}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1a791b2b495e5949c430d0dad659086191ab1a6", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/e1a791b2b495e5949c430d0dad659086191ab1a6", "committedDate": "2020-09-18T09:08:07Z", "message": "feat(offline): read @PWA to configure webpack build\n\nFixes #8983"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "315b70f920b03e4c3ecd826a32c2a1f9652b82e6", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/315b70f920b03e4c3ecd826a32c2a1f9652b82e6", "committedDate": "2020-09-18T09:08:10Z", "message": "Return default PwaConfiguration in full scanner when annotation not found"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40791295d1e38170534a1b2468abd36cb3330b64", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/40791295d1e38170534a1b2468abd36cb3330b64", "committedDate": "2020-09-18T09:08:10Z", "message": "Fix knownClasses in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbf4d31849b07505cf0dce3e9dd521ef3e8030c9", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/dbf4d31849b07505cf0dce3e9dd521ef3e8030c9", "committedDate": "2020-09-18T09:08:10Z", "message": "fix: NPE during PwaConfiguration instantiation in FrontendDependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d35d871523b1c39cce3c448e74d7ff48a219a1e", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/5d35d871523b1c39cce3c448e74d7ff48a219a1e", "committedDate": "2020-09-18T09:08:10Z", "message": "Add tests and apply analysis suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d116832b502baf39597d792fe5ac9edbd3b50378", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/d116832b502baf39597d792fe5ac9edbd3b50378", "committedDate": "2020-09-18T09:08:10Z", "message": "test: ensure TaskUpdateWebpack generates offlineResources from PwaConfiguration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9ad2a14b6735694e633d89107a60b119f9555c5", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/d9ad2a14b6735694e633d89107a60b119f9555c5", "committedDate": "2020-09-18T09:08:10Z", "message": "test: ensure offline resources are listed in webpack from PWA annotaion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ad0eb44aacc99660b71e992430f4624b1ff203a", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/2ad0eb44aacc99660b71e992430f4624b1ff203a", "committedDate": "2020-09-18T09:08:10Z", "message": "fix PwaTestIT fixture app as PWA annotation must be on AppShell class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0959b0ee386288b817107b3c68c61965c9a2b52", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/d0959b0ee386288b817107b3c68c61965c9a2b52", "committedDate": "2020-09-18T09:08:10Z", "message": "Update test fixtures so that PWA annotation is on AppShell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a91a8aaeaaac45a56f06bf3e6f7397e5780556f", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/7a91a8aaeaaac45a56f06bf3e6f7397e5780556f", "committedDate": "2020-09-18T09:08:10Z", "message": "Update flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java\n\nCo-authored-by: Artem Godin <fluorumlabs@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26bdd6ba2b385fb758c55a29e8c2520927d9b85a", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/26bdd6ba2b385fb758c55a29e8c2520927d9b85a", "committedDate": "2020-09-18T09:08:10Z", "message": "Update flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendAnnotatedClassVisitor.java\n\nCo-authored-by: Artem Godin <fluorumlabs@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f55e9169c7bea875db74551785f0bd6d160b1d99", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/f55e9169c7bea875db74551785f0bd6d160b1d99", "committedDate": "2020-09-18T09:08:10Z", "message": "Apply review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7c898a66dfb0b3d3a3f7a386a9b0724ae258331", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/e7c898a66dfb0b3d3a3f7a386a9b0724ae258331", "committedDate": "2020-09-18T09:08:10Z", "message": "Apply IDE suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e553f9c7e4ea635b456c3a564757f8faaccebb0d", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/e553f9c7e4ea635b456c3a564757f8faaccebb0d", "committedDate": "2020-09-18T09:08:10Z", "message": "fix: visit annotation items from repeatable container"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6e74093f471a78d7f362851418779e90a6c2eaa", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/b6e74093f471a78d7f362851418779e90a6c2eaa", "committedDate": "2020-09-18T09:08:10Z", "message": "Add periods to javadoc comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da67112e8ef98668a17ce224b6d1447538252226", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/da67112e8ef98668a17ce224b6d1447538252226", "committedDate": "2020-09-18T09:08:11Z", "message": "Remove unnecessary error log line"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dcbdb451a234014bb5ab578918963a931304f731", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/dcbdb451a234014bb5ab578918963a931304f731", "committedDate": "2020-09-17T10:47:54Z", "message": "Remove unnecessary error log line"}, "afterCommit": {"oid": "da67112e8ef98668a17ce224b6d1447538252226", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/da67112e8ef98668a17ce224b6d1447538252226", "committedDate": "2020-09-18T09:08:11Z", "message": "Remove unnecessary error log line"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNDA1MTI2", "url": "https://github.com/vaadin/flow/pull/8993#pullrequestreview-491405126", "createdAt": "2020-09-18T12:07:06Z", "commit": {"oid": "da67112e8ef98668a17ce224b6d1447538252226"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjowNzowNlrOHUKaAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoyNDo1NFrOHUK8DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwNDA2Nw==", "bodyText": "The name of the error message constant ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION seems counter intuitive in this case, though the actual value does mention both cases (\"There can only be one @PWA annotation and it must be set on the \" + AppShellConfigurator.class.getSimpleName() + \" implementor.\").\nI'd consider renaming the constant as now it seems like it's only about the other case below.\nMy suggestion for a name: ERROR_INVALID_PWA_ANNOTATION.\n(Not a blocker though)", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r490904067", "createdAt": "2020-09-18T12:07:06Z", "author": {"login": "Haprog"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "diffHunk": "@@ -370,6 +386,56 @@ private void computePackages() throws ClassNotFoundException, IOException {\n         }\n     }\n \n+    /**\n+     * Find the class with a {@link com.vaadin.flow.server.PWA} annotation and\n+     * read it into a {@link com.vaadin.flow.server.PwaConfiguration} object.\n+     *\n+     * @throws ClassNotFoundException\n+     */\n+    private void computePwaConfiguration() throws ClassNotFoundException {\n+        FrontendAnnotatedClassVisitor pwaVisitor = new FrontendAnnotatedClassVisitor(\n+                getFinder(), PWA.class.getName());\n+        Class<?> appShellConfiguratorClass = getFinder().loadClass(\n+                AppShellConfigurator.class.getName());\n+\n+        for (Class<?> hopefullyAppShellClass :\n+                getFinder().getAnnotatedClasses(PWA.class.getName())) {\n+                    if (!Arrays.asList(hopefullyAppShellClass.getInterfaces())\n+                            .contains(appShellConfiguratorClass)) {\n+                        throw new IllegalStateException(\n+                                ERROR_CAN_ONLY_HAVE_ONE_PWA_ANNOTATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da67112e8ef98668a17ce224b6d1447538252226"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxMjY0Ng==", "bodyText": "DEAULT_FLOW_RESOURCES_FOLDER (with typo) is now deprecated (since last rebase). Please use the corrected one:\nDEFAULT_FLOW_RESOURCES_FOLDER instead.", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r490912646", "createdAt": "2020-09-18T12:24:40Z", "author": {"login": "Haprog"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeTasksTest.java", "diffHunk": "@@ -17,8 +19,11 @@\n import com.vaadin.flow.server.ExecutionFailedException;\n import com.vaadin.flow.server.connect.Endpoint;\n import com.vaadin.flow.server.frontend.NodeTasks.Builder;\n+import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder.DefaultClassFinder;\n+import com.vaadin.flow.server.frontend.scanner.samples.pwa.AppShellWithPwa;\n \n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEAULT_FLOW_RESOURCES_FOLDER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da67112e8ef98668a17ce224b6d1447538252226"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxMjc4MA==", "bodyText": "DEAULT_FLOW_RESOURCES_FOLDER (with typo) is now deprecated. Please use the corrected one:\nDEFAULT_FLOW_RESOURCES_FOLDER instead.", "url": "https://github.com/vaadin/flow/pull/8993#discussion_r490912780", "createdAt": "2020-09-18T12:24:54Z", "author": {"login": "Haprog"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeTasksTest.java", "diffHunk": "@@ -132,19 +140,46 @@ public void should_Generate_Connect_Files() throws Exception {\n \n         Arrays.asList(\n                 // enableClientSide\n-                \"target/index.html\",\n-                \"target/index.ts\",\n-                // withConnectJavaSourceFolder and withConnectGeneratedOpenApiJson\n+                \"target/index.html\", \"target/index.ts\",\n+                // withConnectJavaSourceFolder and\n+                // withConnectGeneratedOpenApiJson\n                 \"api-file.json\",\n                 // withConnectClientTsApiFolder\n-                \"api/connect-client.default.ts\",\n-                \"api/MyEndpoint.ts\")\n-                .forEach(name -> assertTrue(name + \" not created.\", new File(dir, name).exists()));\n+                \"api/connect-client.default.ts\", \"api/MyEndpoint.ts\")\n+                .forEach(name -> assertTrue(name + \" not created.\",\n+                        new File(dir, name).exists()));\n+    }\n+\n+    @Test\n+    public void should_Set_PWA_Offline_Resources() throws Exception {\n+        ClassFinder classFinder = new DefaultClassFinder(new HashSet<>(\n+                new ArrayList<>(Arrays.asList(AppShellWithPwa.class))));\n+\n+        Builder builder = new Builder(classFinder, new File(userDir))\n+                .withFlowResourcesFolder(\n+                        new File(userDir, DEAULT_FLOW_RESOURCES_FOLDER))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da67112e8ef98668a17ce224b6d1447538252226"}, "originalPosition": 157}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17ea40d64b5ab1307f2f3c33233ec8d201bbb014", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/17ea40d64b5ab1307f2f3c33233ec8d201bbb014", "committedDate": "2020-09-21T11:19:40Z", "message": "fix: use non-deprecated constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df40ba52c5a5b87ed6722fc1ccd80514670112b4", "author": {"user": {"login": "platosha", "name": "Anton Platonov"}}, "url": "https://github.com/vaadin/flow/commit/df40ba52c5a5b87ed6722fc1ccd80514670112b4", "committedDate": "2020-09-21T11:20:09Z", "message": "Use better name for PWA annotation error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyOTUwMjg2", "url": "https://github.com/vaadin/flow/pull/8993#pullrequestreview-492950286", "createdAt": "2020-09-21T20:20:15Z", "commit": {"oid": "df40ba52c5a5b87ed6722fc1ccd80514670112b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0Mjc0MTE4", "url": "https://github.com/vaadin/flow/pull/8993#pullrequestreview-494274118", "createdAt": "2020-09-23T06:46:51Z", "commit": {"oid": "df40ba52c5a5b87ed6722fc1ccd80514670112b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 167, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}