{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxOTMxMzE5", "number": 8533, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjozMzowOFrOEFzKig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo1MDoxOFrOEF3Yww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTE2NjE4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/HasSize.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjozMzowOFrOGkNCsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODo0NDo0MFrOGkRZhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxNTYwMg==", "bodyText": "Move this out from the interface to its own class as it's long and has actual code inside it.", "url": "https://github.com/vaadin/flow/pull/8533#discussion_r440615602", "createdAt": "2020-06-16T06:33:08Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/HasSize.java", "diffHunk": "@@ -245,4 +345,144 @@ default void setSizeUndefined() {\n         setWidth(null);\n         setHeight(null);\n     }\n+\n+    /**\n+     * Enum of supported units in Css sizes\n+     */\n+    public enum Unit {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96de4a9ca696fba70139c230b9fcb4bef7c01391"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4Njk4MQ==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8533#discussion_r440686981", "createdAt": "2020-06-16T08:44:40Z", "author": {"login": "TatuLund"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/HasSize.java", "diffHunk": "@@ -245,4 +345,144 @@ default void setSizeUndefined() {\n         setWidth(null);\n         setHeight(null);\n     }\n+\n+    /**\n+     * Enum of supported units in Css sizes\n+     */\n+    public enum Unit {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxNTYwMg=="}, "originalCommit": {"oid": "96de4a9ca696fba70139c230b9fcb4bef7c01391"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTE3MTA0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/component/HasSizeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjozNTowMlrOGkNFmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODo0NToxMVrOGkRa4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxNjM0NA==", "bodyText": "Remove unused variable in test.", "url": "https://github.com/vaadin/flow/pull/8533#discussion_r440616344", "createdAt": "2020-06-16T06:35:02Z", "author": {"login": "caalador"}, "path": "flow-server/src/test/java/com/vaadin/flow/component/HasSizeTest.java", "diffHunk": "@@ -168,4 +225,53 @@ public void setSizeUndefined() {\n         Assert.assertNull(component.getHeight());\n     }\n \n+    @Test\n+    public void getUnit() {\n+        HasSizeComponent c = new HasSizeComponent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96de4a9ca696fba70139c230b9fcb4bef7c01391"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NzMzMQ==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8533#discussion_r440687331", "createdAt": "2020-06-16T08:45:11Z", "author": {"login": "TatuLund"}, "path": "flow-server/src/test/java/com/vaadin/flow/component/HasSizeTest.java", "diffHunk": "@@ -168,4 +225,53 @@ public void setSizeUndefined() {\n         Assert.assertNull(component.getHeight());\n     }\n \n+    @Test\n+    public void getUnit() {\n+        HasSizeComponent c = new HasSizeComponent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxNjM0NA=="}, "originalCommit": {"oid": "96de4a9ca696fba70139c230b9fcb4bef7c01391"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTE3MTM0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/component/HasSizeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjozNTowOFrOGkNFwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODo0NDo0OFrOGkRZ2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxNjM4Ng==", "bodyText": "Remove unused variable in test.", "url": "https://github.com/vaadin/flow/pull/8533#discussion_r440616386", "createdAt": "2020-06-16T06:35:08Z", "author": {"login": "caalador"}, "path": "flow-server/src/test/java/com/vaadin/flow/component/HasSizeTest.java", "diffHunk": "@@ -168,4 +225,53 @@ public void setSizeUndefined() {\n         Assert.assertNull(component.getHeight());\n     }\n \n+    @Test\n+    public void getUnit() {\n+        HasSizeComponent c = new HasSizeComponent();\n+        for (Unit unit : Unit.values()) {\n+            String cssSize = 100f+unit.toString();\n+            Optional<Unit> theUnit = Unit.getUnit(cssSize);\n+            Assert.assertTrue(theUnit.isPresent());\n+            Assert.assertEquals(theUnit.get(), unit);\n+        }\n+    }\n+\n+    @Test\n+    public void getSize() {\n+        HasSizeComponent c = new HasSizeComponent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96de4a9ca696fba70139c230b9fcb4bef7c01391"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NzA2NA==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8533#discussion_r440687064", "createdAt": "2020-06-16T08:44:48Z", "author": {"login": "TatuLund"}, "path": "flow-server/src/test/java/com/vaadin/flow/component/HasSizeTest.java", "diffHunk": "@@ -168,4 +225,53 @@ public void setSizeUndefined() {\n         Assert.assertNull(component.getHeight());\n     }\n \n+    @Test\n+    public void getUnit() {\n+        HasSizeComponent c = new HasSizeComponent();\n+        for (Unit unit : Unit.values()) {\n+            String cssSize = 100f+unit.toString();\n+            Optional<Unit> theUnit = Unit.getUnit(cssSize);\n+            Assert.assertTrue(theUnit.isPresent());\n+            Assert.assertEquals(theUnit.get(), unit);\n+        }\n+    }\n+\n+    @Test\n+    public void getSize() {\n+        HasSizeComponent c = new HasSizeComponent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxNjM4Ng=="}, "originalCommit": {"oid": "96de4a9ca696fba70139c230b9fcb4bef7c01391"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTE3Nzg3OnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/component/HasSizeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjozNzozMlrOGkNJhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODo0NDo1N1rOGkRaMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxNzM0OQ==", "bodyText": "Unit tests should be in their own test class", "url": "https://github.com/vaadin/flow/pull/8533#discussion_r440617349", "createdAt": "2020-06-16T06:37:32Z", "author": {"login": "caalador"}, "path": "flow-server/src/test/java/com/vaadin/flow/component/HasSizeTest.java", "diffHunk": "@@ -168,4 +225,53 @@ public void setSizeUndefined() {\n         Assert.assertNull(component.getHeight());\n     }\n \n+    @Test\n+    public void getUnit() {\n+        HasSizeComponent c = new HasSizeComponent();\n+        for (Unit unit : Unit.values()) {\n+            String cssSize = 100f+unit.toString();\n+            Optional<Unit> theUnit = Unit.getUnit(cssSize);\n+            Assert.assertTrue(theUnit.isPresent());\n+            Assert.assertEquals(theUnit.get(), unit);\n+        }\n+    }\n+\n+    @Test\n+    public void getSize() {\n+        HasSizeComponent c = new HasSizeComponent();\n+        for (Unit unit : Unit.values()) {\n+            String cssSize = 100f+unit.toString();\n+            float size = Unit.getSize(cssSize);\n+            Assert.assertEquals(100f, size, 0.01);\n+        }\n+        for (Unit unit : Unit.values()) {\n+            String cssSize = unit.toString();\n+            float size = Unit.getSize(cssSize);\n+            Assert.assertEquals(0f, size, 0.01);\n+        }\n+    }\n+\n+    @Test(expected = NumberFormatException.class)\n+    public void getSizeException() {\n+        String cssSize = \"10a0px\";\n+        float size = Unit.getSize(cssSize);        \t\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void getSizeNoUnit() {\n+        String cssSize = \"100\";\n+        float size = Unit.getSize(cssSize);        \t\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void getSizeNoValidUnit() {\n+        String cssSize = \"100p\";\n+        float size = Unit.getSize(cssSize);        \t\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void getUnitException() {\n+        String cssSize = null;\n+        Optional<Unit> size = Unit.getUnit(cssSize);        \t\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96de4a9ca696fba70139c230b9fcb4bef7c01391"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NzE1Mw==", "bodyText": "Done", "url": "https://github.com/vaadin/flow/pull/8533#discussion_r440687153", "createdAt": "2020-06-16T08:44:57Z", "author": {"login": "TatuLund"}, "path": "flow-server/src/test/java/com/vaadin/flow/component/HasSizeTest.java", "diffHunk": "@@ -168,4 +225,53 @@ public void setSizeUndefined() {\n         Assert.assertNull(component.getHeight());\n     }\n \n+    @Test\n+    public void getUnit() {\n+        HasSizeComponent c = new HasSizeComponent();\n+        for (Unit unit : Unit.values()) {\n+            String cssSize = 100f+unit.toString();\n+            Optional<Unit> theUnit = Unit.getUnit(cssSize);\n+            Assert.assertTrue(theUnit.isPresent());\n+            Assert.assertEquals(theUnit.get(), unit);\n+        }\n+    }\n+\n+    @Test\n+    public void getSize() {\n+        HasSizeComponent c = new HasSizeComponent();\n+        for (Unit unit : Unit.values()) {\n+            String cssSize = 100f+unit.toString();\n+            float size = Unit.getSize(cssSize);\n+            Assert.assertEquals(100f, size, 0.01);\n+        }\n+        for (Unit unit : Unit.values()) {\n+            String cssSize = unit.toString();\n+            float size = Unit.getSize(cssSize);\n+            Assert.assertEquals(0f, size, 0.01);\n+        }\n+    }\n+\n+    @Test(expected = NumberFormatException.class)\n+    public void getSizeException() {\n+        String cssSize = \"10a0px\";\n+        float size = Unit.getSize(cssSize);        \t\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void getSizeNoUnit() {\n+        String cssSize = \"100\";\n+        float size = Unit.getSize(cssSize);        \t\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void getSizeNoValidUnit() {\n+        String cssSize = \"100p\";\n+        float size = Unit.getSize(cssSize);        \t\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void getUnitException() {\n+        String cssSize = null;\n+        Optional<Unit> size = Unit.getUnit(cssSize);        \t\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxNzM0OQ=="}, "originalCommit": {"oid": "96de4a9ca696fba70139c230b9fcb4bef7c01391"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTg0MTgxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/Unit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0NTo1MlrOGkTtRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0NTo1MlrOGkTtRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNDgwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Stream<Unit> units = getUnits().filter(unit -> cssSize.endsWith(unit.toString()));\n          \n          \n            \n                    return units.findFirst();\n          \n          \n            \n                    return getUnits().filter(unit -> cssSize.endsWith(unit.toString())).findFirst();", "url": "https://github.com/vaadin/flow/pull/8533#discussion_r440724807", "createdAt": "2020-06-16T09:45:52Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/Unit.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Enum of supported units in Css sizes.\n+ */\n+public enum Unit {\n+    /**\n+     * Unit code representing pixels.\n+     */\n+    PIXELS(\"px\"),\n+    /**\n+     * Unit code representing points (1/72nd of an inch).\n+     */\n+    POINTS(\"pt\"),\n+    /**\n+     * Unit code representing picas (12 points).\n+     */\n+    PICAS(\"pc\"),\n+    /**\n+     * Unit code representing the font-size of the root font.\n+     */\n+    REM(\"rem\"),\n+    /**\n+     * Unit code representing the font-size of the relevant font.\n+     */\n+    EM(\"em\"),\n+    /**\n+     * Unit code representing the x-height of the relevant font.\n+     */\n+    EX(\"ex\"),\n+    /**\n+     * Unit code representing millimeters.\n+     */\n+    MM(\"mm\"),\n+    /**\n+     * Unit code representing centimeters.\n+     */\n+    CM(\"cm\"),\n+    /**\n+     * Unit code representing inches.\n+     */\n+    INCH(\"in\"),\n+    /**\n+     * Unit code representing in percentage of the containing element\n+     * defined by terminal.\n+     */\n+    PERCENTAGE(\"%\");\n+\n+    private final String symbol;\n+\n+    private Unit(String symbol) {\n+        this.symbol = symbol;\n+    }\n+\n+    public String getSymbol() {\n+        return symbol;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return symbol;\n+    }\n+\n+    static Stream<Unit> getUnits() {\n+        return Stream.of(Unit.values());\n+    }\n+\n+    /**\n+     * Gives size unit of the css string representing a size.\n+     * \n+     * @param cssSize Css compliant size string such as \"50px\".\n+     * \n+     * @return A Optional unit.\n+     */\n+    public static Optional<Unit> getUnit(String cssSize) {\n+        if (cssSize == null) {\n+             throw new IllegalArgumentException(\"The parameter can't be null\");\n+        }\n+        Stream<Unit> units = getUnits().filter(unit -> cssSize.endsWith(unit.toString()));\n+        return units.findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4e454798aef81708c97d49fe10b4255b45873"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTg1NTMyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/Unit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0OTozNlrOGkT13g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo1Nzo0N1rOGkUI7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNzAwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Stream<Unit> units = getUnits().filter(unit -> cssSize.endsWith(unit.toString()));\n          \n          \n            \n                    String size;\n          \n          \n            \n                    String unit = \"\";\n          \n          \n            \n                    try {\n          \n          \n            \n                        unit = units.findFirst().get().toString();\n          \n          \n            \n                    } catch (NoSuchElementException e) {\n          \n          \n            \n                        throw new IllegalArgumentException(\n          \n          \n            \n                                \"The parameter string '\"+cssSize+\"' does not contain valid unit\");\n          \n          \n            \n                    }\n          \n          \n            \n                    size = cssSize.substring(0,cssSize.length()-unit.length());\n          \n          \n            \n                    Unit unit = getUnits()\n          \n          \n            \n                            .filter(value -> cssSize.endsWith(value.toString())).findFirst()\n          \n          \n            \n                            .orElseThrow(() -> new IllegalArgumentException(String.format(\n          \n          \n            \n                                    \"The parameter string '%s' does not contain valid unit\",\n          \n          \n            \n                                    cssSize)));\n          \n          \n            \n                    String size = cssSize\n          \n          \n            \n                            .substring(0, cssSize.length() - unit.toString().length());", "url": "https://github.com/vaadin/flow/pull/8533#discussion_r440727006", "createdAt": "2020-06-16T09:49:36Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/Unit.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Enum of supported units in Css sizes.\n+ */\n+public enum Unit {\n+    /**\n+     * Unit code representing pixels.\n+     */\n+    PIXELS(\"px\"),\n+    /**\n+     * Unit code representing points (1/72nd of an inch).\n+     */\n+    POINTS(\"pt\"),\n+    /**\n+     * Unit code representing picas (12 points).\n+     */\n+    PICAS(\"pc\"),\n+    /**\n+     * Unit code representing the font-size of the root font.\n+     */\n+    REM(\"rem\"),\n+    /**\n+     * Unit code representing the font-size of the relevant font.\n+     */\n+    EM(\"em\"),\n+    /**\n+     * Unit code representing the x-height of the relevant font.\n+     */\n+    EX(\"ex\"),\n+    /**\n+     * Unit code representing millimeters.\n+     */\n+    MM(\"mm\"),\n+    /**\n+     * Unit code representing centimeters.\n+     */\n+    CM(\"cm\"),\n+    /**\n+     * Unit code representing inches.\n+     */\n+    INCH(\"in\"),\n+    /**\n+     * Unit code representing in percentage of the containing element\n+     * defined by terminal.\n+     */\n+    PERCENTAGE(\"%\");\n+\n+    private final String symbol;\n+\n+    private Unit(String symbol) {\n+        this.symbol = symbol;\n+    }\n+\n+    public String getSymbol() {\n+        return symbol;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return symbol;\n+    }\n+\n+    static Stream<Unit> getUnits() {\n+        return Stream.of(Unit.values());\n+    }\n+\n+    /**\n+     * Gives size unit of the css string representing a size.\n+     * \n+     * @param cssSize Css compliant size string such as \"50px\".\n+     * \n+     * @return A Optional unit.\n+     */\n+    public static Optional<Unit> getUnit(String cssSize) {\n+        if (cssSize == null) {\n+             throw new IllegalArgumentException(\"The parameter can't be null\");\n+        }\n+        Stream<Unit> units = getUnits().filter(unit -> cssSize.endsWith(unit.toString()));\n+        return units.findFirst();\n+    }\n+\n+    /**\n+     * Gives size component as float of the css string representing a size.\n+     * \n+     * @param cssSize Css compliant size string such as \"50px\".\n+     * \n+     * @return Size as float, 0 if string contained only the unit.\n+     */\n+    public static float getSize(String cssSize) {\n+        if (cssSize == null || cssSize.length() < 1) {\n+            throw new IllegalArgumentException(\"The parameter can't be null\");\n+        }\n+        Stream<Unit> units = getUnits().filter(unit -> cssSize.endsWith(unit.toString()));\n+        String size;\n+        String unit = \"\";\n+        try {\n+            unit = units.findFirst().get().toString();\n+        } catch (NoSuchElementException e) {\n+            throw new IllegalArgumentException(\n+                    \"The parameter string '\"+cssSize+\"' does not contain valid unit\");\n+        }\n+        size = cssSize.substring(0,cssSize.length()-unit.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4e454798aef81708c97d49fe10b4255b45873"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczMTg4Nw==", "bodyText": "Ok, tried out this on my test app, seems to pass my unit tests too", "url": "https://github.com/vaadin/flow/pull/8533#discussion_r440731887", "createdAt": "2020-06-16T09:57:47Z", "author": {"login": "TatuLund"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/Unit.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Enum of supported units in Css sizes.\n+ */\n+public enum Unit {\n+    /**\n+     * Unit code representing pixels.\n+     */\n+    PIXELS(\"px\"),\n+    /**\n+     * Unit code representing points (1/72nd of an inch).\n+     */\n+    POINTS(\"pt\"),\n+    /**\n+     * Unit code representing picas (12 points).\n+     */\n+    PICAS(\"pc\"),\n+    /**\n+     * Unit code representing the font-size of the root font.\n+     */\n+    REM(\"rem\"),\n+    /**\n+     * Unit code representing the font-size of the relevant font.\n+     */\n+    EM(\"em\"),\n+    /**\n+     * Unit code representing the x-height of the relevant font.\n+     */\n+    EX(\"ex\"),\n+    /**\n+     * Unit code representing millimeters.\n+     */\n+    MM(\"mm\"),\n+    /**\n+     * Unit code representing centimeters.\n+     */\n+    CM(\"cm\"),\n+    /**\n+     * Unit code representing inches.\n+     */\n+    INCH(\"in\"),\n+    /**\n+     * Unit code representing in percentage of the containing element\n+     * defined by terminal.\n+     */\n+    PERCENTAGE(\"%\");\n+\n+    private final String symbol;\n+\n+    private Unit(String symbol) {\n+        this.symbol = symbol;\n+    }\n+\n+    public String getSymbol() {\n+        return symbol;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return symbol;\n+    }\n+\n+    static Stream<Unit> getUnits() {\n+        return Stream.of(Unit.values());\n+    }\n+\n+    /**\n+     * Gives size unit of the css string representing a size.\n+     * \n+     * @param cssSize Css compliant size string such as \"50px\".\n+     * \n+     * @return A Optional unit.\n+     */\n+    public static Optional<Unit> getUnit(String cssSize) {\n+        if (cssSize == null) {\n+             throw new IllegalArgumentException(\"The parameter can't be null\");\n+        }\n+        Stream<Unit> units = getUnits().filter(unit -> cssSize.endsWith(unit.toString()));\n+        return units.findFirst();\n+    }\n+\n+    /**\n+     * Gives size component as float of the css string representing a size.\n+     * \n+     * @param cssSize Css compliant size string such as \"50px\".\n+     * \n+     * @return Size as float, 0 if string contained only the unit.\n+     */\n+    public static float getSize(String cssSize) {\n+        if (cssSize == null || cssSize.length() < 1) {\n+            throw new IllegalArgumentException(\"The parameter can't be null\");\n+        }\n+        Stream<Unit> units = getUnits().filter(unit -> cssSize.endsWith(unit.toString()));\n+        String size;\n+        String unit = \"\";\n+        try {\n+            unit = units.findFirst().get().toString();\n+        } catch (NoSuchElementException e) {\n+            throw new IllegalArgumentException(\n+                    \"The parameter string '\"+cssSize+\"' does not contain valid unit\");\n+        }\n+        size = cssSize.substring(0,cssSize.length()-unit.length());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNzAwNg=="}, "originalCommit": {"oid": "07b4e454798aef81708c97d49fe10b4255b45873"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTg1Nzk1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/component/Unit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo1MDoxOFrOGkT3pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo1MDoxOFrOGkT3pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNzQ2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Unit(String symbol) {\n          \n          \n            \n                Unit(String symbol) {", "url": "https://github.com/vaadin/flow/pull/8533#discussion_r440727461", "createdAt": "2020-06-16T09:50:18Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/component/Unit.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component;\n+\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Enum of supported units in Css sizes.\n+ */\n+public enum Unit {\n+    /**\n+     * Unit code representing pixels.\n+     */\n+    PIXELS(\"px\"),\n+    /**\n+     * Unit code representing points (1/72nd of an inch).\n+     */\n+    POINTS(\"pt\"),\n+    /**\n+     * Unit code representing picas (12 points).\n+     */\n+    PICAS(\"pc\"),\n+    /**\n+     * Unit code representing the font-size of the root font.\n+     */\n+    REM(\"rem\"),\n+    /**\n+     * Unit code representing the font-size of the relevant font.\n+     */\n+    EM(\"em\"),\n+    /**\n+     * Unit code representing the x-height of the relevant font.\n+     */\n+    EX(\"ex\"),\n+    /**\n+     * Unit code representing millimeters.\n+     */\n+    MM(\"mm\"),\n+    /**\n+     * Unit code representing centimeters.\n+     */\n+    CM(\"cm\"),\n+    /**\n+     * Unit code representing inches.\n+     */\n+    INCH(\"in\"),\n+    /**\n+     * Unit code representing in percentage of the containing element\n+     * defined by terminal.\n+     */\n+    PERCENTAGE(\"%\");\n+\n+    private final String symbol;\n+\n+    private Unit(String symbol) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4e454798aef81708c97d49fe10b4255b45873"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3478, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}