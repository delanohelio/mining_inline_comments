{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0OTQ1MDgw", "number": 9613, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzoyNzowNVrOFD2fgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTozOToyMVrOFHubYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTgyODUwOnYy", "diffSide": "RIGHT", "path": "flow-tests/test-themes/src/test/java/com/vaadin/flow/uitest/ui/theme/CssLoadingIT.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzoyNzowNVrOIDsStw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNzozODo1OVrOIFDXpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MjMyNw==", "bodyText": "The test name doesn't give a clear insight to what it actually tests.", "url": "https://github.com/vaadin/flow/pull/9613#discussion_r540742327", "createdAt": "2020-12-11T07:27:05Z", "author": {"login": "caalador"}, "path": "flow-tests/test-themes/src/test/java/com/vaadin/flow/uitest/ui/theme/CssLoadingIT.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui.theme;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+import com.vaadin.flow.component.html.testbench.ParagraphElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+import static com.vaadin.flow.uitest.ui.theme.CssLoadingView.CSS_IMPORT__PAGE_ADD_STYLESHEET;\n+import static com.vaadin.flow.uitest.ui.theme.CssLoadingView.CSS_IMPORT__STYLESHEET;\n+import static com.vaadin.flow.uitest.ui.theme.CssLoadingView.PAGE_ADD_STYLESHEET__STYLESHEET;\n+\n+public class CssLoadingIT extends ChromeBrowserTest {\n+\n+    private static final String BLUE_RGBA = \"rgba(0, 0, 255, 1)\";\n+    private static final String GREEN_RGBA = \"rgba(0, 255, 0, 1)\";\n+    private static final String STYLESHEET_LUMO_FONT_SIZE_M = \" 30px\";\n+\n+    @Test\n+    public void StyleSheet_overrides_CssImport() {\n+        open();\n+        // @StyleSheet [blue] > page.addStyleSheet() [green] < @CssImport [red]\n+        Assert.assertEquals(\n+                \"Styles from @StyleSheet should have a higher priority than from @CssImport.\",\n+                BLUE_RGBA, $(ParagraphElement.class).id(CSS_IMPORT__STYLESHEET)\n+                        .getCssValue(\"color\"));\n+    }\n+\n+    @Test\n+    public void addStyleSheet_overrides_StyleSheet() {\n+        open();\n+        Assert.assertEquals(\n+                \"Styles from addStyleSheet() should have a higher priority than from @StyleSheet.\",\n+                BLUE_RGBA,\n+                $(ParagraphElement.class).id(PAGE_ADD_STYLESHEET__STYLESHEET)\n+                        .getCssValue(\"color\"));\n+    }\n+\n+    @Test\n+    public void addStyleSheet_overrides_CssImport() {\n+        open();\n+        Assert.assertEquals(\n+                \"Styles from addStyleSheet() should have a higher priority than from @CssImport.\",\n+                GREEN_RGBA,\n+                $(ParagraphElement.class).id(CSS_IMPORT__PAGE_ADD_STYLESHEET)\n+                        .getCssValue(\"color\"));\n+    }\n+\n+    @Test\n+    public void lumoStyleIsOverridden() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "470b0179a8a4d84edbb30188406ad6780d9cc22e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2MDc4Mw==", "bodyText": "I actually have no idea how to test Lumo styles in a more specific way.", "url": "https://github.com/vaadin/flow/pull/9613#discussion_r542160783", "createdAt": "2020-12-14T07:20:25Z", "author": {"login": "tanbt"}, "path": "flow-tests/test-themes/src/test/java/com/vaadin/flow/uitest/ui/theme/CssLoadingIT.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui.theme;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+import com.vaadin.flow.component.html.testbench.ParagraphElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+import static com.vaadin.flow.uitest.ui.theme.CssLoadingView.CSS_IMPORT__PAGE_ADD_STYLESHEET;\n+import static com.vaadin.flow.uitest.ui.theme.CssLoadingView.CSS_IMPORT__STYLESHEET;\n+import static com.vaadin.flow.uitest.ui.theme.CssLoadingView.PAGE_ADD_STYLESHEET__STYLESHEET;\n+\n+public class CssLoadingIT extends ChromeBrowserTest {\n+\n+    private static final String BLUE_RGBA = \"rgba(0, 0, 255, 1)\";\n+    private static final String GREEN_RGBA = \"rgba(0, 255, 0, 1)\";\n+    private static final String STYLESHEET_LUMO_FONT_SIZE_M = \" 30px\";\n+\n+    @Test\n+    public void StyleSheet_overrides_CssImport() {\n+        open();\n+        // @StyleSheet [blue] > page.addStyleSheet() [green] < @CssImport [red]\n+        Assert.assertEquals(\n+                \"Styles from @StyleSheet should have a higher priority than from @CssImport.\",\n+                BLUE_RGBA, $(ParagraphElement.class).id(CSS_IMPORT__STYLESHEET)\n+                        .getCssValue(\"color\"));\n+    }\n+\n+    @Test\n+    public void addStyleSheet_overrides_StyleSheet() {\n+        open();\n+        Assert.assertEquals(\n+                \"Styles from addStyleSheet() should have a higher priority than from @StyleSheet.\",\n+                BLUE_RGBA,\n+                $(ParagraphElement.class).id(PAGE_ADD_STYLESHEET__STYLESHEET)\n+                        .getCssValue(\"color\"));\n+    }\n+\n+    @Test\n+    public void addStyleSheet_overrides_CssImport() {\n+        open();\n+        Assert.assertEquals(\n+                \"Styles from addStyleSheet() should have a higher priority than from @CssImport.\",\n+                GREEN_RGBA,\n+                $(ParagraphElement.class).id(CSS_IMPORT__PAGE_ADD_STYLESHEET)\n+                        .getCssValue(\"color\"));\n+    }\n+\n+    @Test\n+    public void lumoStyleIsOverridden() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MjMyNw=="}, "originalCommit": {"oid": "470b0179a8a4d84edbb30188406ad6780d9cc22e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2MzcwNg==", "bodyText": "Should I create separate views to test the priority of each pair of sources: a view to test @CssImport vs @StyleSheet, another view for  @StyleSheet vs page.addStylesheet, and so on?\nThere could be many combinations if doing so.", "url": "https://github.com/vaadin/flow/pull/9613#discussion_r542163706", "createdAt": "2020-12-14T07:27:15Z", "author": {"login": "tanbt"}, "path": "flow-tests/test-themes/src/test/java/com/vaadin/flow/uitest/ui/theme/CssLoadingIT.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui.theme;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+import com.vaadin.flow.component.html.testbench.ParagraphElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+import static com.vaadin.flow.uitest.ui.theme.CssLoadingView.CSS_IMPORT__PAGE_ADD_STYLESHEET;\n+import static com.vaadin.flow.uitest.ui.theme.CssLoadingView.CSS_IMPORT__STYLESHEET;\n+import static com.vaadin.flow.uitest.ui.theme.CssLoadingView.PAGE_ADD_STYLESHEET__STYLESHEET;\n+\n+public class CssLoadingIT extends ChromeBrowserTest {\n+\n+    private static final String BLUE_RGBA = \"rgba(0, 0, 255, 1)\";\n+    private static final String GREEN_RGBA = \"rgba(0, 255, 0, 1)\";\n+    private static final String STYLESHEET_LUMO_FONT_SIZE_M = \" 30px\";\n+\n+    @Test\n+    public void StyleSheet_overrides_CssImport() {\n+        open();\n+        // @StyleSheet [blue] > page.addStyleSheet() [green] < @CssImport [red]\n+        Assert.assertEquals(\n+                \"Styles from @StyleSheet should have a higher priority than from @CssImport.\",\n+                BLUE_RGBA, $(ParagraphElement.class).id(CSS_IMPORT__STYLESHEET)\n+                        .getCssValue(\"color\"));\n+    }\n+\n+    @Test\n+    public void addStyleSheet_overrides_StyleSheet() {\n+        open();\n+        Assert.assertEquals(\n+                \"Styles from addStyleSheet() should have a higher priority than from @StyleSheet.\",\n+                BLUE_RGBA,\n+                $(ParagraphElement.class).id(PAGE_ADD_STYLESHEET__STYLESHEET)\n+                        .getCssValue(\"color\"));\n+    }\n+\n+    @Test\n+    public void addStyleSheet_overrides_CssImport() {\n+        open();\n+        Assert.assertEquals(\n+                \"Styles from addStyleSheet() should have a higher priority than from @CssImport.\",\n+                GREEN_RGBA,\n+                $(ParagraphElement.class).id(CSS_IMPORT__PAGE_ADD_STYLESHEET)\n+                        .getCssValue(\"color\"));\n+    }\n+\n+    @Test\n+    public void lumoStyleIsOverridden() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MjMyNw=="}, "originalCommit": {"oid": "470b0179a8a4d84edbb30188406ad6780d9cc22e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2ODk5Ng==", "bodyText": "Perhaps you could ask Rolf or Jouni about lumo tests, also Rolf might have a vision on the expected ordering.\nHaving overriding tests would be perhaps better as a bunch where each step has 2 values where one is overridden or something.", "url": "https://github.com/vaadin/flow/pull/9613#discussion_r542168996", "createdAt": "2020-12-14T07:38:59Z", "author": {"login": "caalador"}, "path": "flow-tests/test-themes/src/test/java/com/vaadin/flow/uitest/ui/theme/CssLoadingIT.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui.theme;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+import com.vaadin.flow.component.html.testbench.ParagraphElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+import static com.vaadin.flow.uitest.ui.theme.CssLoadingView.CSS_IMPORT__PAGE_ADD_STYLESHEET;\n+import static com.vaadin.flow.uitest.ui.theme.CssLoadingView.CSS_IMPORT__STYLESHEET;\n+import static com.vaadin.flow.uitest.ui.theme.CssLoadingView.PAGE_ADD_STYLESHEET__STYLESHEET;\n+\n+public class CssLoadingIT extends ChromeBrowserTest {\n+\n+    private static final String BLUE_RGBA = \"rgba(0, 0, 255, 1)\";\n+    private static final String GREEN_RGBA = \"rgba(0, 255, 0, 1)\";\n+    private static final String STYLESHEET_LUMO_FONT_SIZE_M = \" 30px\";\n+\n+    @Test\n+    public void StyleSheet_overrides_CssImport() {\n+        open();\n+        // @StyleSheet [blue] > page.addStyleSheet() [green] < @CssImport [red]\n+        Assert.assertEquals(\n+                \"Styles from @StyleSheet should have a higher priority than from @CssImport.\",\n+                BLUE_RGBA, $(ParagraphElement.class).id(CSS_IMPORT__STYLESHEET)\n+                        .getCssValue(\"color\"));\n+    }\n+\n+    @Test\n+    public void addStyleSheet_overrides_StyleSheet() {\n+        open();\n+        Assert.assertEquals(\n+                \"Styles from addStyleSheet() should have a higher priority than from @StyleSheet.\",\n+                BLUE_RGBA,\n+                $(ParagraphElement.class).id(PAGE_ADD_STYLESHEET__STYLESHEET)\n+                        .getCssValue(\"color\"));\n+    }\n+\n+    @Test\n+    public void addStyleSheet_overrides_CssImport() {\n+        open();\n+        Assert.assertEquals(\n+                \"Styles from addStyleSheet() should have a higher priority than from @CssImport.\",\n+                GREEN_RGBA,\n+                $(ParagraphElement.class).id(CSS_IMPORT__PAGE_ADD_STYLESHEET)\n+                        .getCssValue(\"color\"));\n+    }\n+\n+    @Test\n+    public void lumoStyleIsOverridden() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MjMyNw=="}, "originalCommit": {"oid": "470b0179a8a4d84edbb30188406ad6780d9cc22e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDMyNjEwOnYy", "diffSide": "RIGHT", "path": "flow-tests/test-themes/src/test/java/com/vaadin/flow/uitest/ui/theme/CssLoadingIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMToxMzo1NVrOIIe3Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTozMzo0OFrOIIfbVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2NTE1OA==", "bodyText": "Should these 3 tests just be merged to one multipleDefinitions_correctOverrides as opening a new browser for single asserts is quite heavy and they could just mention in the assertion fail message which part failed for which exception.", "url": "https://github.com/vaadin/flow/pull/9613#discussion_r545765158", "createdAt": "2020-12-18T11:13:55Z", "author": {"login": "caalador"}, "path": "flow-tests/test-themes/src/test/java/com/vaadin/flow/uitest/ui/theme/CssLoadingIT.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui.theme;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+import com.vaadin.flow.component.html.testbench.ParagraphElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+/**\n+ * Test CSS loading order from different sources.\n+ *\n+ * The expected order is: Lumo styles < @CssImport < page.addStylesheet\n+ * < @Stylehseet < parent theme < current theme (app theme)\n+ */\n+public class CssLoadingIT extends ChromeBrowserTest {\n+\n+    private static final String RED_RGBA = \"rgba(255, 0, 0, 1)\";\n+    private static final String BLUE_RGBA = \"rgba(0, 0, 255, 1)\";\n+    private static final String GREEN_RGBA = \"rgba(0, 255, 0, 1)\";\n+    private static final String YELLOW_RGBA = \"rgba(255, 255, 0, 1)\";\n+    private static final String STYLESHEET_LUMO_FONT_SIZE_M = \" 1.1rem\";\n+\n+    @Test\n+    public void CssImport_overrides_Lumo() {\n+        open();\n+        WebElement htmlElement = findElement(By.tagName(\"html\"));\n+\n+        Assert.assertEquals(\"CssImport styles should override Lumo styles.\",\n+                STYLESHEET_LUMO_FONT_SIZE_M,\n+                executeScript(\n+                        \"return getComputedStyle(arguments[0]).getPropertyValue('--lumo-font-size-m')\",\n+                        htmlElement));\n+    }\n+\n+    @Test\n+    public void pageAddStylesheet_overrides_CssImport() {\n+        open();\n+        assertStylesOverride(\"p1\", GREEN_RGBA, \"16px\", \"1px\");\n+    }\n+\n+    @Test\n+    public void Stylesheet_overrides_pageAddStylesheetAndCssImport() {\n+        open();\n+        // @Stylesheet should override color and font-size but not margin\n+        assertStylesOverride(\"p2\", BLUE_RGBA, \"18px\", \"1px\");\n+    }\n+\n+    @Test\n+    public void appTheme_overrides_all() {\n+        open();\n+        assertStylesOverride(\"p3\", YELLOW_RGBA, \"20px\", \"2px\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf00390c394113e863495df67dc2ffdf31420dbd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3NDQyMw==", "bodyText": "Done.", "url": "https://github.com/vaadin/flow/pull/9613#discussion_r545774423", "createdAt": "2020-12-18T11:33:48Z", "author": {"login": "tanbt"}, "path": "flow-tests/test-themes/src/test/java/com/vaadin/flow/uitest/ui/theme/CssLoadingIT.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui.theme;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+import com.vaadin.flow.component.html.testbench.ParagraphElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+/**\n+ * Test CSS loading order from different sources.\n+ *\n+ * The expected order is: Lumo styles < @CssImport < page.addStylesheet\n+ * < @Stylehseet < parent theme < current theme (app theme)\n+ */\n+public class CssLoadingIT extends ChromeBrowserTest {\n+\n+    private static final String RED_RGBA = \"rgba(255, 0, 0, 1)\";\n+    private static final String BLUE_RGBA = \"rgba(0, 0, 255, 1)\";\n+    private static final String GREEN_RGBA = \"rgba(0, 255, 0, 1)\";\n+    private static final String YELLOW_RGBA = \"rgba(255, 255, 0, 1)\";\n+    private static final String STYLESHEET_LUMO_FONT_SIZE_M = \" 1.1rem\";\n+\n+    @Test\n+    public void CssImport_overrides_Lumo() {\n+        open();\n+        WebElement htmlElement = findElement(By.tagName(\"html\"));\n+\n+        Assert.assertEquals(\"CssImport styles should override Lumo styles.\",\n+                STYLESHEET_LUMO_FONT_SIZE_M,\n+                executeScript(\n+                        \"return getComputedStyle(arguments[0]).getPropertyValue('--lumo-font-size-m')\",\n+                        htmlElement));\n+    }\n+\n+    @Test\n+    public void pageAddStylesheet_overrides_CssImport() {\n+        open();\n+        assertStylesOverride(\"p1\", GREEN_RGBA, \"16px\", \"1px\");\n+    }\n+\n+    @Test\n+    public void Stylesheet_overrides_pageAddStylesheetAndCssImport() {\n+        open();\n+        // @Stylesheet should override color and font-size but not margin\n+        assertStylesOverride(\"p2\", BLUE_RGBA, \"18px\", \"1px\");\n+    }\n+\n+    @Test\n+    public void appTheme_overrides_all() {\n+        open();\n+        assertStylesOverride(\"p3\", YELLOW_RGBA, \"20px\", \"2px\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2NTE1OA=="}, "originalCommit": {"oid": "bf00390c394113e863495df67dc2ffdf31420dbd"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjQ1MDI3OnYy", "diffSide": "RIGHT", "path": "flow-tests/test-themes/src/test/java/com/vaadin/flow/uitest/ui/theme/CssLoadingIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTozOToyMVrOIJSBlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTo0MDozMlrOIJSDfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwMzQxMg==", "bodyText": "Is it better to split out these 3 assertions into 3 separate tests and name them accordingly for better readability/maintainability?", "url": "https://github.com/vaadin/flow/pull/9613#discussion_r546603412", "createdAt": "2020-12-21T09:39:21Z", "author": {"login": "mshabarov"}, "path": "flow-tests/test-themes/src/test/java/com/vaadin/flow/uitest/ui/theme/CssLoadingIT.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui.theme;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+import com.vaadin.flow.component.html.testbench.ParagraphElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+/**\n+ * Test CSS loading order from different sources.\n+ *\n+ * The expected priority is: Lumo styles < @CssImport < page.addStylesheet\n+ * < @Stylehseet < parent theme < current theme (app theme)\n+ */\n+public class CssLoadingIT extends ChromeBrowserTest {\n+\n+    private static final String BLUE_RGBA = \"rgba(0, 0, 255, 1)\";\n+    private static final String GREEN_RGBA = \"rgba(0, 255, 0, 1)\";\n+    private static final String YELLOW_RGBA = \"rgba(255, 255, 0, 1)\";\n+    private static final String STYLESHEET_LUMO_FONT_SIZE_M = \" 1.1rem\";\n+\n+    @Test\n+    public void CssImport_overrides_Lumo() {\n+        open();\n+        WebElement htmlElement = findElement(By.tagName(\"html\"));\n+\n+        Assert.assertEquals(\"CssImport styles should override Lumo styles.\",\n+                STYLESHEET_LUMO_FONT_SIZE_M,\n+                executeScript(\n+                        \"return getComputedStyle(arguments[0]).getPropertyValue('--lumo-font-size-m')\",\n+                        htmlElement));\n+    }\n+\n+    @Test\n+    public void multipleDefinitions_correctOverrides() {\n+        open();\n+        assertStylesOverride(\"p1\", GREEN_RGBA, \"16px\", \"1px\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e17e63123b7ea1edd7b10138d2402f9daf2a99"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwMzkwMw==", "bodyText": "Sorry, just saw Mikael's comment about it. Ignore my comment.", "url": "https://github.com/vaadin/flow/pull/9613#discussion_r546603903", "createdAt": "2020-12-21T09:40:32Z", "author": {"login": "mshabarov"}, "path": "flow-tests/test-themes/src/test/java/com/vaadin/flow/uitest/ui/theme/CssLoadingIT.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.uitest.ui.theme;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+import com.vaadin.flow.component.html.testbench.ParagraphElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+/**\n+ * Test CSS loading order from different sources.\n+ *\n+ * The expected priority is: Lumo styles < @CssImport < page.addStylesheet\n+ * < @Stylehseet < parent theme < current theme (app theme)\n+ */\n+public class CssLoadingIT extends ChromeBrowserTest {\n+\n+    private static final String BLUE_RGBA = \"rgba(0, 0, 255, 1)\";\n+    private static final String GREEN_RGBA = \"rgba(0, 255, 0, 1)\";\n+    private static final String YELLOW_RGBA = \"rgba(255, 255, 0, 1)\";\n+    private static final String STYLESHEET_LUMO_FONT_SIZE_M = \" 1.1rem\";\n+\n+    @Test\n+    public void CssImport_overrides_Lumo() {\n+        open();\n+        WebElement htmlElement = findElement(By.tagName(\"html\"));\n+\n+        Assert.assertEquals(\"CssImport styles should override Lumo styles.\",\n+                STYLESHEET_LUMO_FONT_SIZE_M,\n+                executeScript(\n+                        \"return getComputedStyle(arguments[0]).getPropertyValue('--lumo-font-size-m')\",\n+                        htmlElement));\n+    }\n+\n+    @Test\n+    public void multipleDefinitions_correctOverrides() {\n+        open();\n+        assertStylesOverride(\"p1\", GREEN_RGBA, \"16px\", \"1px\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwMzQxMg=="}, "originalCommit": {"oid": "e1e17e63123b7ea1edd7b10138d2402f9daf2a99"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2908, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}