{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NjMyOTg0", "number": 9484, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNTo0NjoxMFrOE9EngQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNjowMVrOE9Kk8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDc0MjQxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNTo0NjoxMFrOH5kCSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0MDowMlrOH5q1iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMTI5MQ==", "bodyText": "[0-9] is \\d.\nThe expression will become shorter.", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530121291", "createdAt": "2020-11-25T05:46:10Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -51,8 +51,20 @@\n public class ResponseWriter implements Serializable {\n     private static final int DEFAULT_BUFFER_SIZE = 32 * 1024;\n \n-    private static final Pattern RANGE_HEADER_PATTERN = Pattern.compile(\"^bytes=(([0-9]*-[0-9]*,?\\\\s*)+)$\");\n-    private static final Pattern BYTE_RANGE_PATTERN = Pattern.compile(\"([0-9]*)-([0-9]*)\");\n+    private static final Pattern RANGE_HEADER_PATTERN = Pattern.compile(\n+            \"^bytes=(([0-9]*-[0-9]*\\\\s*,\\\\s*)*[0-9]*-[0-9]*\\\\s*)$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62820ba144e4b3ed49d4f6af595a5ab794c6f92c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzMjcxMg==", "bodyText": "Done.", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530232712", "createdAt": "2020-11-25T09:40:02Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -51,8 +51,20 @@\n public class ResponseWriter implements Serializable {\n     private static final int DEFAULT_BUFFER_SIZE = 32 * 1024;\n \n-    private static final Pattern RANGE_HEADER_PATTERN = Pattern.compile(\"^bytes=(([0-9]*-[0-9]*,?\\\\s*)+)$\");\n-    private static final Pattern BYTE_RANGE_PATTERN = Pattern.compile(\"([0-9]*)-([0-9]*)\");\n+    private static final Pattern RANGE_HEADER_PATTERN = Pattern.compile(\n+            \"^bytes=(([0-9]*-[0-9]*\\\\s*,\\\\s*)*[0-9]*-[0-9]*\\\\s*)$\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMTI5MQ=="}, "originalCommit": {"oid": "62820ba144e4b3ed49d4f6af595a5ab794c6f92c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDc0NjUxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNTo0ODoxN1rOH5kErw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTozOTo1NlrOH5q1Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMTkwMw==", "bodyText": "unnecessary for inside while : please refactor", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530121903", "createdAt": "2020-11-25T05:48:17Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -208,8 +221,14 @@ private void writeRangeContents(String range, HttpServletResponse response,\n             long start = startGroup.isEmpty() ? 0L : Long.parseLong(startGroup);\n             long end = endGroup.isEmpty() ? Long.MAX_VALUE\n                     : Long.parseLong(endGroup);\n+            for (Pair<Long, Long> accepted : ranges) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62820ba144e4b3ed49d4f6af595a5ab794c6f92c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzMjYzNQ==", "bodyText": "Done. Moved the limit checks to a separate method.", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530232635", "createdAt": "2020-11-25T09:39:56Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -208,8 +221,14 @@ private void writeRangeContents(String range, HttpServletResponse response,\n             long start = startGroup.isEmpty() ? 0L : Long.parseLong(startGroup);\n             long end = endGroup.isEmpty() ? Long.MAX_VALUE\n                     : Long.parseLong(endGroup);\n+            for (Pair<Long, Long> accepted : ranges) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMTkwMw=="}, "originalCommit": {"oid": "62820ba144e4b3ed49d4f6af595a5ab794c6f92c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDc1MTY2OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNTo1MDo1MVrOH5kHuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTozODo1N1rOH5qywg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMjY4Mw==", "bodyText": "What happens if ranges.size() >= MAX_RANGE_COUNT?\nThere is no mistake set. The processing goes in happy path.\nThis is not the same as check for overlappingRangeCount which fails the request processing.", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530122683", "createdAt": "2020-11-25T05:50:51Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,8 +208,9 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n+        int overlappingRangeCount = 0;\n         List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62820ba144e4b3ed49d4f6af595a5ab794c6f92c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMzMzMA==", "bodyText": "Ah, is it covered by the case that end < start?\nI would may be refactor this a bit and log an error message depending on what happened (instead of one big if).\nThat will also help to avoid comments: log messages will be self documented.", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530123330", "createdAt": "2020-11-25T05:53:06Z", "author": {"login": "denis-anisimov"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,8 +208,9 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n+        int overlappingRangeCount = 0;\n         List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMjY4Mw=="}, "originalCommit": {"oid": "62820ba144e4b3ed49d4f6af595a5ab794c6f92c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzMjAwMg==", "bodyText": "According to the RFC, it is acceptable for the server to either drop some ranges or outright reject a request when ranges are out-of-order or overlapping. My implementation was inconsistent in the handling of too many ranges compared to too many overlapping range. In the case of a benevolent client (that happened to asks too many ranges or too many overlapping ranges), it is probably better to serve the maximum amount rather than outright deny the request. Then the client gets at least some of the requested parts and only needs to request the others separately.\nI have amended the implementation to serve only the ranges processed so far when hitting more than 2 overlapping ranges. Also added logging.", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530232002", "createdAt": "2020-11-25T09:38:57Z", "author": {"login": "joheriks"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,8 +208,9 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n+        int overlappingRangeCount = 0;\n         List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMjY4Mw=="}, "originalCommit": {"oid": "62820ba144e4b3ed49d4f6af595a5ab794c6f92c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTcxODc4OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNTo1OVrOH5tJRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNTo1OVrOH5tJRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3MDUzNQ==", "bodyText": "Replace the synchronized class \"Stack\" by an unsynchronized one such as \"Deque\".", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530270535", "createdAt": "2020-11-25T10:35:59Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,13 +208,14 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd5c0263a9495b232be89678bd44f12e0ce5f55"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTcxODg0OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNjowMFrOH5tJTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNjowMFrOH5tJTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3MDU0Mg==", "bodyText": "Invoke method(s) only conditionally.", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530270542", "createdAt": "2020-11-25T10:36:00Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -211,11 +224,20 @@ private void writeRangeContents(String range, HttpServletResponse response,\n             if (end < start\n                     || (resourceLength >= 0 && start >= resourceLength)) {\n                 // illegal range -> 416\n+                getLogger().info(\"received an illegal range '{}' for resource '{}'\",\n+                        rangeMatcher.group(), resourceURL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd5c0263a9495b232be89678bd44f12e0ce5f55"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTcxODkwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNjowMVrOH5tJVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNjowMVrOH5tJVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3MDU1MQ==", "bodyText": "Invoke method(s) only conditionally.", "url": "https://github.com/vaadin/flow/pull/9484#discussion_r530270551", "createdAt": "2020-11-25T10:36:01Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/internal/ResponseWriter.java", "diffHunk": "@@ -196,13 +208,14 @@ private void writeRangeContents(String range, HttpServletResponse response,\n         long resourceLength = connection.getContentLengthLong();\n         Matcher rangeMatcher = BYTE_RANGE_PATTERN.matcher(byteRanges);\n \n-        List<Pair<Long, Long>> ranges = new ArrayList<>();\n-        while (rangeMatcher.find()) {\n+        Stack<Pair<Long, Long>> ranges = new Stack<>();\n+        while (rangeMatcher.find() && ranges.size() < MAX_RANGE_COUNT) {\n             String startGroup = rangeMatcher.group(1);\n             String endGroup = rangeMatcher.group(2);\n             if (startGroup.isEmpty() && endGroup.isEmpty()) {\n                 response.setContentLengthLong(0L);\n                 response.setStatus(416); // Range Not Satisfiable\n+                getLogger().info(\"received a malformed range: '{}'\", rangeMatcher.group());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd5c0263a9495b232be89678bd44f12e0ce5f55"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2820, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}