{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5ODUyNzEw", "number": 9389, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOTo0OTozM1rOE4mP1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODozMzo0MFrOE5UQOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzgyMzU5OnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOTo0OTozM1rOHynpCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOTo0OTozM1rOHynpCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg0MDMzMQ==", "bodyText": "Refactor this code to not nest more than 3 if/for/while/switch/try statements.", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r522840331", "createdAt": "2020-11-13T09:49:33Z", "author": {"login": "vaadin-bot"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "diffHunk": "@@ -311,15 +311,24 @@ private void computeApplicationTheme() throws ClassNotFoundException,\n             // we have a proper theme or no-theme for the app\n             ThemeData themeData = themes.iterator().next();\n             if (!themeData.isNotheme()) {\n-                variant = themeData.getVariant();\n                 String themeClass = themeData.getThemeClass();\n-                if (themeClass == null) {\n-                    themeClass = LUMO;\n+                if (!themeData.getThemeName().isEmpty() && themeClass != null) {\n+                    throw new IllegalStateException(\n+                        \"Theme name and theme class can not both be specified. \"\n+                            + \"Theme name uses Lumo and can not be used in combination with custom theme class.\");\n+                }\n+                variant = themeData.getVariant();\n+                if (themeClass != null) {\n+                    theme = getFinder().loadClass(themeClass);\n+                } else {\n+                    theme = getDefaultTheme();\n+                    if (theme == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70856e324ada272eba807eed83f5d5a878d1eda"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MTY3MDgxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxNDoxNzoyNVrOHzLSFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNzoyNTo1N1rOHzqrdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNDI3Ng==", "bodyText": "This block of code not changed, but I wonder why nothing is done when the themes is empty and the theme is null, that means the LUMO theme is not in classpath. Does that lead to same behaviour as if we had NoTheme set?", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523424276", "createdAt": "2020-11-14T14:17:25Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "diffHunk": "@@ -311,15 +311,24 @@ private void computeApplicationTheme() throws ClassNotFoundException,\n             // we have a proper theme or no-theme for the app\n             ThemeData themeData = themes.iterator().next();\n             if (!themeData.isNotheme()) {\n-                variant = themeData.getVariant();\n                 String themeClass = themeData.getThemeClass();\n-                if (themeClass == null) {\n-                    themeClass = LUMO;\n+                if (!themeData.getThemeName().isEmpty() && themeClass != null) {\n+                    throw new IllegalStateException(\n+                        \"Theme name and theme class can not both be specified. \"\n+                            + \"Theme name uses Lumo and can not be used in combination with custom theme class.\");\n+                }\n+                variant = themeData.getVariant();\n+                if (themeClass != null) {\n+                    theme = getFinder().loadClass(themeClass);\n+                } else {\n+                    theme = getDefaultTheme();\n+                    if (theme == null) {\n+                        throw new IllegalStateException(\n+                            \"Lumo dependency needs to be available on the classpath when using a theme name.\");\n+                    }\n                 }\n-                theme = getFinder().loadClass(themeClass);\n                 themeName = themeData.getThemeName();\n             }\n-\n         }\n \n         // theme could be null when lumo is not found or when a NoTheme found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70856e324ada272eba807eed83f5d5a878d1eda"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkzODY3OA==", "bodyText": "If nothing is defined then everything should work the same as before so not having a theme definition and no lumo on classpath should result in no theme.\nIf theme name is defined we will throw that lumo needs to be on the classpath.", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523938678", "createdAt": "2020-11-16T07:25:57Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "diffHunk": "@@ -311,15 +311,24 @@ private void computeApplicationTheme() throws ClassNotFoundException,\n             // we have a proper theme or no-theme for the app\n             ThemeData themeData = themes.iterator().next();\n             if (!themeData.isNotheme()) {\n-                variant = themeData.getVariant();\n                 String themeClass = themeData.getThemeClass();\n-                if (themeClass == null) {\n-                    themeClass = LUMO;\n+                if (!themeData.getThemeName().isEmpty() && themeClass != null) {\n+                    throw new IllegalStateException(\n+                        \"Theme name and theme class can not both be specified. \"\n+                            + \"Theme name uses Lumo and can not be used in combination with custom theme class.\");\n+                }\n+                variant = themeData.getVariant();\n+                if (themeClass != null) {\n+                    theme = getFinder().loadClass(themeClass);\n+                } else {\n+                    theme = getDefaultTheme();\n+                    if (theme == null) {\n+                        throw new IllegalStateException(\n+                            \"Lumo dependency needs to be available on the classpath when using a theme name.\");\n+                    }\n                 }\n-                theme = getFinder().loadClass(themeClass);\n                 themeName = themeData.getThemeName();\n             }\n-\n         }\n \n         // theme could be null when lumo is not found or when a NoTheme found", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNDI3Ng=="}, "originalCommit": {"oid": "e70856e324ada272eba807eed83f5d5a878d1eda"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MTY4MzcyOnYy", "diffSide": "RIGHT", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxNDozNDo0MVrOHzLYCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNzoyMzo0NVrOHzqoUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNTgwMw==", "bodyText": "Am I right that the setting the themName will result to default theme (LUMO) styles + custom theme styles (they are merged in the end)?", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523425803", "createdAt": "2020-11-14T14:34:41Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "diffHunk": "@@ -311,15 +311,24 @@ private void computeApplicationTheme() throws ClassNotFoundException,\n             // we have a proper theme or no-theme for the app\n             ThemeData themeData = themes.iterator().next();\n             if (!themeData.isNotheme()) {\n-                variant = themeData.getVariant();\n                 String themeClass = themeData.getThemeClass();\n-                if (themeClass == null) {\n-                    themeClass = LUMO;\n+                if (!themeData.getThemeName().isEmpty() && themeClass != null) {\n+                    throw new IllegalStateException(\n+                        \"Theme name and theme class can not both be specified. \"\n+                            + \"Theme name uses Lumo and can not be used in combination with custom theme class.\");\n+                }\n+                variant = themeData.getVariant();\n+                if (themeClass != null) {\n+                    theme = getFinder().loadClass(themeClass);\n+                } else {\n+                    theme = getDefaultTheme();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70856e324ada272eba807eed83f5d5a878d1eda"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkzNzg3Mw==", "bodyText": "The application theme always bases on lumo and lumo will be set for it.", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523937873", "createdAt": "2020-11-16T07:23:45Z", "author": {"login": "caalador"}, "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "diffHunk": "@@ -311,15 +311,24 @@ private void computeApplicationTheme() throws ClassNotFoundException,\n             // we have a proper theme or no-theme for the app\n             ThemeData themeData = themes.iterator().next();\n             if (!themeData.isNotheme()) {\n-                variant = themeData.getVariant();\n                 String themeClass = themeData.getThemeClass();\n-                if (themeClass == null) {\n-                    themeClass = LUMO;\n+                if (!themeData.getThemeName().isEmpty() && themeClass != null) {\n+                    throw new IllegalStateException(\n+                        \"Theme name and theme class can not both be specified. \"\n+                            + \"Theme name uses Lumo and can not be used in combination with custom theme class.\");\n+                }\n+                variant = themeData.getVariant();\n+                if (themeClass != null) {\n+                    theme = getFinder().loadClass(themeClass);\n+                } else {\n+                    theme = getDefaultTheme();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNTgwMw=="}, "originalCommit": {"oid": "e70856e324ada272eba807eed83f5d5a878d1eda"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MTcwMTIwOnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxNDo1NzowNVrOHzLgZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNzozNTo0N1rOHzq6GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNzk0MA==", "bodyText": "Maybe it's better to check the entire message to protect agains accidental modifucation/deletion of the last part of message?", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523427940", "createdAt": "2020-11-14T14:57:05Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java", "diffHunk": "@@ -123,6 +123,39 @@ public void appShellConfigurator_collectedAsEndpoint()\n             themeDefinition.getTheme());\n     }\n \n+    @Test\n+    public void themeDefiningClassAndName_throwsException()\n+        throws ClassNotFoundException {\n+        Mockito.when(classFinder.getSubTypesOf(AppShellConfigurator.class))\n+            .thenReturn(Collections.singleton(FaultyThemeAnnotation.class));\n+        Mockito.when(classFinder.loadClass(FakeLumo.class.getName()))\n+            .thenReturn((Class) FakeLumo.class);\n+\n+        IllegalStateException exception = Assert\n+            .assertThrows(IllegalStateException.class,\n+                () -> new FrontendDependencies(classFinder, false));\n+\n+        Assert.assertTrue(\"Unexpected message: \" + exception.getMessage(),\n+            exception.getMessage().startsWith(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70856e324ada272eba807eed83f5d5a878d1eda"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk0MjQyNA==", "bodyText": "done.", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523942424", "createdAt": "2020-11-16T07:35:47Z", "author": {"login": "caalador"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java", "diffHunk": "@@ -123,6 +123,39 @@ public void appShellConfigurator_collectedAsEndpoint()\n             themeDefinition.getTheme());\n     }\n \n+    @Test\n+    public void themeDefiningClassAndName_throwsException()\n+        throws ClassNotFoundException {\n+        Mockito.when(classFinder.getSubTypesOf(AppShellConfigurator.class))\n+            .thenReturn(Collections.singleton(FaultyThemeAnnotation.class));\n+        Mockito.when(classFinder.loadClass(FakeLumo.class.getName()))\n+            .thenReturn((Class) FakeLumo.class);\n+\n+        IllegalStateException exception = Assert\n+            .assertThrows(IllegalStateException.class,\n+                () -> new FrontendDependencies(classFinder, false));\n+\n+        Assert.assertTrue(\"Unexpected message: \" + exception.getMessage(),\n+            exception.getMessage().startsWith(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNzk0MA=="}, "originalCommit": {"oid": "e70856e324ada272eba807eed83f5d5a878d1eda"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MTcwOTE1OnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxNTowODoxMVrOHzLkSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNzo0NDoyNFrOHzrHzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyODkzOQ==", "bodyText": "There should be also a test checking the theme = getDefaultTheme(); line has been executed and theme defaults to LUMO, when the themeClass is null, but probably this test already exists, where is it then?", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523428939", "createdAt": "2020-11-14T15:08:11Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java", "diffHunk": "@@ -123,6 +123,39 @@ public void appShellConfigurator_collectedAsEndpoint()\n             themeDefinition.getTheme());\n     }\n \n+    @Test\n+    public void themeDefiningClassAndName_throwsException()\n+        throws ClassNotFoundException {\n+        Mockito.when(classFinder.getSubTypesOf(AppShellConfigurator.class))\n+            .thenReturn(Collections.singleton(FaultyThemeAnnotation.class));\n+        Mockito.when(classFinder.loadClass(FakeLumo.class.getName()))\n+            .thenReturn((Class) FakeLumo.class);\n+\n+        IllegalStateException exception = Assert\n+            .assertThrows(IllegalStateException.class,\n+                () -> new FrontendDependencies(classFinder, false));\n+\n+        Assert.assertTrue(\"Unexpected message: \" + exception.getMessage(),\n+            exception.getMessage().startsWith(\n+                \"Theme name and theme class can not both be specified.\"));\n+    }\n+\n+    @Test\n+    public void noDefaultThemeAvailable_throwsException()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70856e324ada272eba807eed83f5d5a878d1eda"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk0NTkzMg==", "bodyText": "Added a test.", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523945932", "createdAt": "2020-11-16T07:44:24Z", "author": {"login": "caalador"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java", "diffHunk": "@@ -123,6 +123,39 @@ public void appShellConfigurator_collectedAsEndpoint()\n             themeDefinition.getTheme());\n     }\n \n+    @Test\n+    public void themeDefiningClassAndName_throwsException()\n+        throws ClassNotFoundException {\n+        Mockito.when(classFinder.getSubTypesOf(AppShellConfigurator.class))\n+            .thenReturn(Collections.singleton(FaultyThemeAnnotation.class));\n+        Mockito.when(classFinder.loadClass(FakeLumo.class.getName()))\n+            .thenReturn((Class) FakeLumo.class);\n+\n+        IllegalStateException exception = Assert\n+            .assertThrows(IllegalStateException.class,\n+                () -> new FrontendDependencies(classFinder, false));\n+\n+        Assert.assertTrue(\"Unexpected message: \" + exception.getMessage(),\n+            exception.getMessage().startsWith(\n+                \"Theme name and theme class can not both be specified.\"));\n+    }\n+\n+    @Test\n+    public void noDefaultThemeAvailable_throwsException()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyODkzOQ=="}, "originalCommit": {"oid": "e70856e324ada272eba807eed83f5d5a878d1eda"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MTcxMTY2OnYy", "diffSide": "RIGHT", "path": "flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/MiscelaneousView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxNToxMToxNFrOHzLlaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNzo0NDo0OFrOHzrIeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyOTIyNw==", "bodyText": "add a new line", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523429227", "createdAt": "2020-11-14T15:11:14Z", "author": {"login": "mshabarov"}, "path": "flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/MiscelaneousView.java", "diffHunk": "@@ -42,9 +45,15 @@ public String getBaseUrl() {\n         public String getThemeUrl() {\n             return \"legacyTheme/my-theme\";\n         }\n+\n+        @Override\n+        public List<String> getHeaderInlineContents() {\n+            return Collections.singletonList(\"<custom-style>\\n <style>\\n   html {\\n\"\n+                + \"      font-size: 20px;\\n  color:red;  }\\n <style>\\n </custom-style>\");\n+        }\n     }\n \n     public MiscelaneousView() {\n         setId(TEST_VIEW_ID);\n     }\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70856e324ada272eba807eed83f5d5a878d1eda"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk0NjEwNg==", "bodyText": "added", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523946106", "createdAt": "2020-11-16T07:44:48Z", "author": {"login": "caalador"}, "path": "flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/MiscelaneousView.java", "diffHunk": "@@ -42,9 +45,15 @@ public String getBaseUrl() {\n         public String getThemeUrl() {\n             return \"legacyTheme/my-theme\";\n         }\n+\n+        @Override\n+        public List<String> getHeaderInlineContents() {\n+            return Collections.singletonList(\"<custom-style>\\n <style>\\n   html {\\n\"\n+                + \"      font-size: 20px;\\n  color:red;  }\\n <style>\\n </custom-style>\");\n+        }\n     }\n \n     public MiscelaneousView() {\n         setId(TEST_VIEW_ID);\n     }\n-}\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyOTIyNw=="}, "originalCommit": {"oid": "e70856e324ada272eba807eed83f5d5a878d1eda"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTM2MTIxOnYy", "diffSide": "RIGHT", "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODozMzo0MFrOHzsl9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODozMzo0MFrOHzsl9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk3MDAzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    FrontendDependencies dependencies = new FrontendDependencies(classFinder, false);;\n          \n          \n            \n                    FrontendDependencies dependencies = new FrontendDependencies(classFinder, false);", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523970038", "createdAt": "2020-11-16T08:33:40Z", "author": {"login": "mshabarov"}, "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java", "diffHunk": "@@ -123,6 +123,54 @@ public void appShellConfigurator_collectedAsEndpoint()\n             themeDefinition.getTheme());\n     }\n \n+    @Test\n+    public void themeDefiningClassAndName_throwsException()\n+        throws ClassNotFoundException {\n+        Mockito.when(classFinder.getSubTypesOf(AppShellConfigurator.class))\n+            .thenReturn(Collections.singleton(FaultyThemeAnnotation.class));\n+        Mockito.when(classFinder.loadClass(FakeLumo.class.getName()))\n+            .thenReturn((Class) FakeLumo.class);\n+\n+        IllegalStateException exception = Assert\n+            .assertThrows(IllegalStateException.class,\n+                () -> new FrontendDependencies(classFinder, false));\n+\n+        Assert.assertEquals(\"Unexpected message for the thrown exception\",\n+            \"Theme name and theme class can not both be specified. \"\n+                + \"Theme name uses Lumo and can not be used in combination with custom theme class.\",\n+            exception.getMessage());\n+    }\n+\n+    @Test\n+    public void noDefaultThemeAvailable_throwsException()\n+        throws ClassNotFoundException {\n+        Mockito.when(classFinder.getSubTypesOf(AppShellConfigurator.class))\n+            .thenReturn(Collections.singleton(MyAppThemeShell.class));\n+        Mockito.when(classFinder.loadClass(FrontendDependencies.LUMO))\n+            .thenThrow(ClassNotFoundException.class);\n+\n+        IllegalStateException exception = Assert\n+            .assertThrows(IllegalStateException.class,\n+                () -> new FrontendDependencies(classFinder, false));\n+\n+        Assert.assertEquals(\"Thrown exception didn't contain correct message\",\n+            \"Lumo dependency needs to be available on the classpath when using a theme name.\",\n+            exception.getMessage());\n+    }\n+\n+    @Test\n+    public void appThemeDefined_getsLumoAsTheme() {\n+        Mockito.when(classFinder.getSubTypesOf(AppShellConfigurator.class))\n+            .thenReturn(Collections.singleton(MyAppThemeShell.class));\n+\n+        FrontendDependencies dependencies = new FrontendDependencies(classFinder, false);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8608f07b12541f58b903f6f495d5c8b9f9f116d7"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3025, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}