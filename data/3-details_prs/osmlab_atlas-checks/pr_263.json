{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTA3NzA4", "number": 263, "title": "[LineCrossingWaterBody] Expand waterbody definition and add flaggable items configurables", "bodyText": "Description:\nThis PR adds a few changes to LineCrossingWaterBodyCheck (LCWB).\n1.) There are a few new configurables in the check.\nhighway.minimum controls the minimum highway classification for flagging (flags all highways by default),\nhighways.exclude defines which highways should not be flagged (excludes none by default),\nlineItems.offending specifies the tags on a lineItem that make the lineItem invalidly crossing a waterbody and should be flagged (none by default, meaning there are no restrictions),\nlineItems.non_offending specifies the tags on a lineItem that make the lineItem validly crossing the waterbody (default exists, see configuration), and\nbuildings.flag is a switch for whether or not the check should flag buildings that intersect with waterbodies.\nNote: buildings definition:\nbuilding->*&building->!no\n2.) The definition of waterbody has expanded. Previously it was only natural=water Areas. Now, it is an Area with any tag combination from List A and without all tag combinations from List B (see below)\nList A:\n            \"natural->spring,hot_spring&name->*\" + \"|natural->lake,pond\" + \"|water:type->lake\"\n                    + \"|landuse->pond\" + \"|water->lake,pond,oxbow,salt_lake\" +\n\n                    // Rivers\n                    \"|natural->stream\"\n                    + \"|water->canal,river,lock,moat,riverbank,creek,stream,stream_pool\"\n                    + \"|waterway->river,riverbank,brook,ditch,stream,creek,canal,derelict_canal\"\n                    + \"|stream->*\" + \"|waterway->drain&name->*\" + \"|water->drain&name->*\" +\n\n                    // Reservoirs\n                    \"|water->reservoir\" + \"|water->dam&natural->water\" + \"|landuse->reservoir\"\n                    + \"|natural->reservoir\" + \"|seamark:type->dam&natural->water\" +\n\n                    // Miscellaneous\n                    \"|natural->water\" + \"|waterway->water\" + \"|water->water,perennial\"\n                    + \"|landuse->water\" +\n\n                    // Wetlands\n                    \"|wetland->tidalflat,reedbed\" + \"|water->tidalflat,reedbed\"\n                    + \"|natural->tidalflat,reedbed\" +\n\n                    // Lagoons\n                    \"|natural->lagoon\" + \"|water->lagoon\" + \"|waterway->lagoon\" +\n\n                    // Intermittent/Dry lakes\n                    \"|intermittent->dry\" + \"|seasonal->dry\" + \"|natural->dry_lake\" +\n\n                    // Unique\n                    \"|waterway->billabong,navigablechannel,river;stream,reservoir\"\n\nList B:\n            + \"|waterway->lock_gate,dock,water_point,floodway,spillway,wastewater,waterhole,culvert,dam,waterfall,fish_pass,dry_dock,construction,boat_lift,weir,breakwater,boatyard\"\n            + \"|water->lock_gate,dock,water_point,floodway,spillway,wastewater,waterhole,pool,reflecting_pool,swimming_pool,salt_pool,fountain,tank,fish_pass\"\n            + \"|tunnel->culvert\" + \"|waterway->drain&name->!\" + \"|water->drain&name->!\"\n            + \"|wetland->tidalflat,reedbed&seasonal->yes\"\n            + \"|water->tidalflat,reedbed&seasonal->yes\"\n            + \"|natural->tidalflat,reedbed&seasonal->yes\" + \"|covered->yes\" + \"|highway->*\"\n            + \"|natural->strait,channel,fjord,sound,bay\" + \"|harbour->*&harbour->!no\"\n            + \"|estuary->*&estuary->!no\" + \"|bay->*&bay->!no\"\n            + \"|seamark:type->harbour,harbour_basin,sea_area\" + \"|place->sea\"\n            + \"|water->bay,cove,harbour\" + \"|waterway->artificial,dock\"\n            + \"|man_made->breakwater,pier\" + \"|natural->beach,marsh,swamp\" + \"|water->marsh\"\n            + \"|wetland->bog,fen,mangrove,marsh,saltern,saltmarsh,string_bog,swamp,wet_meadow\"\n            + \"|waterway->drainage_channel,glacier,Minnow Falls, pumping_station\"\n            + \"|water->tank,Earth_Tank_,_Off_Stream_Flow_Dam,treatment_pond,re#,swamp_-_occasional,trough,Trough,waste_water\"\n\nPotential Impact:\nWith configurables at their default, we should get the same functionality as the old LCWB, except we stop flagging bridges and do not flag items if they are on a different level (LevelTag). However, since we include the new water body definitions as introduced in this PR we should expect some more flags to account for a more inclusive water body definition.\nDefault configurables -> mainly additions (more waterbody tags) and some subtractions (bridges/level tags) expected\nUser-defined configurables -> flag counts vary\nUnit Test Approach:\nNew unit tests\nTest Results:\nTests passing", "createdAt": "2020-02-20T18:25:34Z", "url": "https://github.com/osmlab/atlas-checks/pull/263", "merged": true, "mergeCommit": {"oid": "0e6f13a1d2c1b9d33b1645229e82eae2e2dd1d8f"}, "closed": true, "closedAt": "2020-03-02T19:51:52Z", "author": {"login": "seancoulter"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBxHs5AH2gAyMzc3OTA3NzA4OmJmMDc2ZjE2MjdiYTg2NWQ3NGU0NWM4NjBiODI3OGZhYTIwMjA4Zjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJzO5lAFqTM2NzQ4MTc5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bf076f1627ba865d74e45c860b8278faa20208f9", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/bf076f1627ba865d74e45c860b8278faa20208f9", "committedDate": "2020-02-06T20:53:46Z", "message": "lcwb update to flag intersecting buildings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37c6a16bbdb97b989280c10e9557f9708789e5bb", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/37c6a16bbdb97b989280c10e9557f9708789e5bb", "committedDate": "2020-02-10T19:07:24Z", "message": "Merge https://github.com/osmlab/atlas-checks into lcwbUpdates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e96b8701e37fbaee34ecf31cc417f6fcda63ae19", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/e96b8701e37fbaee34ecf31cc417f6fcda63ae19", "committedDate": "2020-02-10T19:07:50Z", "message": "small fixes; update instruction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c2d6d90b2f9f7c4ff48dbc756354f6257c96270", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/1c2d6d90b2f9f7c4ff48dbc756354f6257c96270", "committedDate": "2020-02-12T23:22:37Z", "message": "LCWB add switch for flagging specific lineItems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03ee4149f24306f2ea39f8127377d1cfa2342e0f", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/03ee4149f24306f2ea39f8127377d1cfa2342e0f", "committedDate": "2020-02-13T19:03:58Z", "message": "nonoffending building tags; introduce level tag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59c2dd670132220c66446a74b212cf26bcb4fb00", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/59c2dd670132220c66446a74b212cf26bcb4fb00", "committedDate": "2020-02-13T19:05:57Z", "message": "Merge https://github.com/osmlab/atlas-checks into lcwbUpdates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3", "committedDate": "2020-02-20T18:07:15Z", "message": "Merge https://github.com/osmlab/atlas-checks into lcwbUpdates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMTgzODQ3", "url": "https://github.com/osmlab/atlas-checks/pull/263#pullrequestreview-362183847", "createdAt": "2020-02-20T19:45:16Z", "commit": {"oid": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjc5MTcy", "url": "https://github.com/osmlab/atlas-checks/pull/263#pullrequestreview-362279172", "createdAt": "2020-02-20T22:25:41Z", "commit": {"oid": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjoyNTo0MVrOFslTYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjoyNTo0MVrOFslTYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5MjgzNQ==", "bodyText": "nit: If we can move all of these validations into a method and call it from here will have increase readability and easy to test.", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r382292835", "createdAt": "2020-02-20T22:25:41Z", "author": {"login": "smaheshwaram"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java", "diffHunk": "@@ -146,23 +221,43 @@ private static boolean isBoundary(final AtlasEntity crossingLine)\n     public LineCrossingWaterBodyCheck(final Configuration configuration)\n     {\n         super(configuration);\n+        this.filterOffendingLineItems = this.configurationValue(configuration,\n+                \"intersectingLineItems.filter\", DEFAULT_OFFENDING_LINEITEM_FILTER);\n     }\n \n     @Override\n     public boolean validCheckForObject(final AtlasObject object)\n     {\n-        return TypePredicates.IS_AREA.test(object) && TagPredicates.IS_WATER_BODY.test(object);\n+        // We only consider water body areas, not linear water bodies\n+        return TypePredicates.IS_AREA.test(object) && !INVALID_WATER_BODY_TAGS.test(object)\n+                && VALID_WATER_BODY_TAGS.test(object);\n     }\n \n     @Override\n     protected Optional<CheckFlag> flag(final AtlasObject object)\n     {\n-        // First retrieve the crossing edges and lines\n+        // First retrieve the crossing edges, lines, buildings\n         final Area objectAsArea = (Area) object;\n         final Polygon areaAsPolygon = objectAsArea.asPolygon();\n         final Atlas atlas = object.getAtlas();\n-        final Iterable<AtlasItem> crossingLinearItems = new MultiIterable<>(\n-                atlas.edgesIntersecting(areaAsPolygon), atlas.linesIntersecting(areaAsPolygon));\n+        final Iterable<AtlasItem> allCrossingItems = this.filterOffendingLineItems\n+                // If we're only looking for crossing buildings/railways/streets\n+                ? new MultiIterable<>(\n+                        atlas.lineItemsIntersecting(areaAsPolygon,\n+                                lineItem -> (lineItem instanceof Edge\n+                                        && HIGHWAY_TYPE_TO_FLAG.test((Edge) lineItem)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3"}, "originalPosition": 169}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjg2NTg4", "url": "https://github.com/osmlab/atlas-checks/pull/263#pullrequestreview-362286588", "createdAt": "2020-02-20T22:40:13Z", "commit": {"oid": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjo0MDoxM1rOFslrSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjo0MDoxM1rOFslrSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5ODk1Mw==", "bodyText": "Wondering if we can move these to json file and do validation here will be good. It's just my opinion. Please use your better judgement.", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r382298953", "createdAt": "2020-02-20T22:40:13Z", "author": {"login": "smaheshwaram"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java", "diffHunk": "@@ -66,6 +72,75 @@\n             + \"man_made->pier,breakwater,embankment,groyne,dyke,pipeline|route->ferry|highway->proposed,construction|ice_road->yes|ford->yes|winter_road->yes|snowmobile->yes|ski->yes\";\n     private static final TaggableFilter CAN_CROSS_WATER_BODY_FILTER = TaggableFilter\n             .forDefinition(CAN_CROSS_WATER_BODY_TAGS);\n+    private static final String OFFENDING_LINEITEMS = \"railway->rail,narrow_gauge,preserved,subway,disused,monorail,tram,light_rail,funicular,construction,miniature\";\n+    private static final TaggableFilter IS_OFFENDER = TaggableFilter\n+            .forDefinition(OFFENDING_LINEITEMS);\n+    // Whether we should flag buildings that cross waterbodies\n+    private static final Predicate<Edge> HIGHWAY_TYPE_TO_FLAG = object -> object.highwayTag()\n+            .isMoreImportantThanOrEqualTo(HighwayTag.PATH)\n+            && Validators.isNotOfType(object, HighwayTag.class, HighwayTag.BUS_GUIDEWAY);\n+    // Whether we should limit flags to only streets, buildings, and railways\n+    private static final boolean DEFAULT_OFFENDING_LINEITEM_FILTER = false;\n+    private boolean filterOffendingLineItems;\n+    // Assume the object is an area based on atlas call\n+    private static final Predicate<AtlasObject> IS_BUILDING = object -> Validators\n+            .isNotOfType(object, BuildingTag.class, BuildingTag.NO);\n+    private static final String BUILDING_TAGS_DO_NOT_FLAG = \"public_transport->station,aerialway=station\";\n+    private static final TaggableFilter NONOFFENDING_BUILDINGS = TaggableFilter\n+            .forDefinition(BUILDING_TAGS_DO_NOT_FLAG);\n+\n+    private static final String WATER_BODY_TAGS =\n+            // Lakes\n+            \"natural->spring,hot_spring&name->*\" + \"|natural->lake,pond\" + \"|water:type->lake\"\n+                    + \"|landuse->pond\" + \"|water->lake,pond,oxbow,salt_lake\" +\n+\n+                    // Rivers\n+                    \"|natural->stream\"\n+                    + \"|water->canal,river,lock,moat,riverbank,creek,stream,stream_pool\"\n+                    + \"|waterway->river,riverbank,brook,ditch,stream,creek,canal,derelict_canal\"\n+                    + \"|stream->*\" + \"|waterway->drain&name->*\" + \"|water->drain&name->*\" +\n+\n+                    // Reservoirs\n+                    \"|water->reservoir\" + \"|water->dam&natural->water\" + \"|landuse->reservoir\"\n+                    + \"|natural->reservoir\" + \"|seamark:type->dam&natural->water\" +\n+\n+                    // Miscellaneous\n+                    \"|natural->water\" + \"|waterway->water\" + \"|water->water,perennial\"\n+                    + \"|landuse->water\" +\n+\n+                    // Wetlands\n+                    \"|wetland->tidalflat,reedbed\" + \"|water->tidalflat,reedbed\"\n+                    + \"|natural->tidalflat,reedbed\" +\n+\n+                    // Lagoons\n+                    \"|natural->lagoon\" + \"|water->lagoon\" + \"|waterway->lagoon\" +\n+\n+                    // Intermittent/Dry lakes\n+                    \"|intermittent->dry\" + \"|seasonal->dry\" + \"|natural->dry_lake\" +\n+\n+                    // Unique\n+                    \"|waterway->billabong,navigablechannel,river;stream,reservoir\";\n+    private static final TaggableFilter VALID_WATER_BODY_TAGS = TaggableFilter\n+            .forDefinition(WATER_BODY_TAGS);\n+\n+    private static final String WATER_BODY_EXCLUDE_TAGS = \"natural->dock,water_point,floodway,spillway,wastewater,waterhole\"\n+            + \"|waterway->lock_gate,dock,water_point,floodway,spillway,wastewater,waterhole,culvert,dam,waterfall,fish_pass,dry_dock,construction,boat_lift,weir,breakwater,boatyard\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjg2NzM3", "url": "https://github.com/osmlab/atlas-checks/pull/263#pullrequestreview-362286737", "createdAt": "2020-02-20T22:40:34Z", "commit": {"oid": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTU3MTQ3", "url": "https://github.com/osmlab/atlas-checks/pull/263#pullrequestreview-363557147", "createdAt": "2020-02-24T17:12:19Z", "commit": {"oid": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxMjoxOVrOFtovdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxMjoxOVrOFtovdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5Nzc0OQ==", "bodyText": "Rather than having this as a boolean switch, perhaps it would be more useful to have the configurable be a taggable filter. That way the user could easily select whatever lines they liked to be flagged.", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r383397749", "createdAt": "2020-02-24T17:12:19Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java", "diffHunk": "@@ -146,23 +221,43 @@ private static boolean isBoundary(final AtlasEntity crossingLine)\n     public LineCrossingWaterBodyCheck(final Configuration configuration)\n     {\n         super(configuration);\n+        this.filterOffendingLineItems = this.configurationValue(configuration,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3"}, "originalPosition": 141}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64567e38d1df7ea8cc99122403e26ad68a40a32a", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/64567e38d1df7ea8cc99122403e26ad68a40a32a", "committedDate": "2020-02-26T01:05:04Z", "message": "LCWB add more unit tests; make tags configurable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "934245d2a859c10f34e090306ef72324da05ba7a", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/934245d2a859c10f34e090306ef72324da05ba7a", "committedDate": "2020-02-26T02:32:00Z", "message": "LCWB add more configurables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6812677f5d9a9a75834b43561776c12725ba694e", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/6812677f5d9a9a75834b43561776c12725ba694e", "committedDate": "2020-02-26T19:26:13Z", "message": "LCWB javadoc nit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "351ca48b845e4f2d72cf2cbe1150682fa820a00d", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/351ca48b845e4f2d72cf2cbe1150682fa820a00d", "committedDate": "2020-02-26T20:23:21Z", "message": "spotlessApply"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76ea87da2701a0ee790d368a88d456aa61de7a73", "author": {"user": {"login": "danielduhh", "name": "Daniel B"}}, "url": "https://github.com/osmlab/atlas-checks/commit/76ea87da2701a0ee790d368a88d456aa61de7a73", "committedDate": "2020-02-26T20:38:34Z", "message": "Merge branch 'dev' into lcwbUpdates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1OTE5Mzk3", "url": "https://github.com/osmlab/atlas-checks/pull/263#pullrequestreview-365919397", "createdAt": "2020-02-27T19:01:53Z", "commit": {"oid": "76ea87da2701a0ee790d368a88d456aa61de7a73"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTowMTo1M1rOFvdcDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTowMTo1M1rOFvdcDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwOTcxMQ==", "bodyText": "Any reason to use this instead of BuildingTag.isBuilding()?", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r385309711", "createdAt": "2020-02-27T19:01:53Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java", "diffHunk": "@@ -35,56 +40,102 @@\n import org.openstreetmap.atlas.utilities.configuration.Configuration;\n \n /**\n- * Flags line items (edges or lines) that are crossing water bodies invalidly.\n+ * Flags line items (edges or lines) and optionally buildings that are crossing water bodies\n+ * invalidly. Configurable values and\n  * {@code LineCrossingWaterBodyCheck#canCrossWaterBody(AtlasItem)} and\n- * {@code Utilities#haveExplicitLocationsForIntersections(Polygon, AtlasItem)} is used to decide\n+ * {@code Utilities#haveExplicitLocationsForIntersections(Polygon, AtlasItem)} are used to decide\n  * whether a crossing is valid or not.\n  *\n  * @author mertk\n  * @author savannahostrowski\n  * @author sayana_saithu\n+ * @author seancoulter\n  */\n public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n {\n     private static final String LINEAR_INSTRUCTION = \"Linear item {0,number,#} is crossing water body invalidly.\";\n+    private static final String BUILDING_INSTRUCTION = \"Building item {0,number,#} is intersecting water body invalidly.\";\n     private static final String WATERBODY_INSTRUCTION = \"The water body with id {0,number,#} has invalid crossings.\";\n     private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(WATERBODY_INSTRUCTION,\n-            LINEAR_INSTRUCTION);\n+            LINEAR_INSTRUCTION, BUILDING_INSTRUCTION);\n     private static final String ADDRESS_PREFIX_KEY = \"addr\";\n     // Whitelist for line tags\n-\n     private static final Set<String> VALID_LINE_TAGS = Stream.of(NotesTag.KEY, SourceTag.KEY,\n             NaturalTag.KEY, PlaceTag.KEY, AdministrativeLevelTag.KEY).collect(Collectors.toSet());\n     // Whitelisted tags filter for multipolygon relations. Multipolygon relations with these tags\n-    // are\n-    // expected to cross water bodies.\n+    // are expected to cross water bodies.\n     private static final TaggableFilter VALID_RELATIONS_TAG_FILTER = TaggableFilter\n             .forDefinition(\"natural->*|place->*|landuse->*|waterway->*|admin_level->*|boundary->*\");\n-    private static final String CAN_CROSS_WATER_BODY_TAGS = \"waterway->*|boundary->*|landuse->*|\"\n+    private static final String DEFAULT_CAN_CROSS_WATER_BODY_TAGS = \"waterway->*|boundary->*|landuse->*|\"\n             + \"bridge->yes,viaduct,aqueduct,boardwalk,covered,low_water_crossing,movable,suspension|tunnel->yes,culvert,building_passage|\"\n             + \"embankment->yes|location->underwater,underground|power->line,minor_line|\"\n             + \"man_made->pier,breakwater,embankment,groyne,dyke,pipeline|route->ferry|highway->proposed,construction|ice_road->yes|ford->yes|winter_road->yes|snowmobile->yes|ski->yes\";\n-    private static final TaggableFilter CAN_CROSS_WATER_BODY_FILTER = TaggableFilter\n-            .forDefinition(CAN_CROSS_WATER_BODY_TAGS);\n-    private static final long serialVersionUID = 6048659185833217159L;\n+    private TaggableFilter canCrossWaterBodyFilter;\n+    private TaggableFilter lineItemsOffending;\n+    private boolean flagBuildings;\n+    private static final String DEFAULT_HIGHWAY_MINIMUM = \"TOLL_GANTRY\";\n+    private HighwayTag highwayMinimum;\n+    private static final List<String> DEFAULT_HIGHWAYS_EXCLUDE = Collections.emptyList();\n+    private List<HighwayTag> highwaysExclude;\n+    private static final Predicate<AtlasObject> IS_BUILDING = object -> Validators", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76ea87da2701a0ee790d368a88d456aa61de7a73"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0207257af3d6610c5b428b119846dbab53f7c457", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/0207257af3d6610c5b428b119846dbab53f7c457", "committedDate": "2020-02-27T19:52:13Z", "message": "LCWB use isBuilding()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "100e2d467ecfab9697e64074cdb3b6d4aeea9bde", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/100e2d467ecfab9697e64074cdb3b6d4aeea9bde", "committedDate": "2020-02-27T19:52:41Z", "message": "Merge https://github.com/osmlab/atlas-checks into lcwbUpdates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da023d2d3d4790663bb767b7afa9f5cf562ce3f8", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/da023d2d3d4790663bb767b7afa9f5cf562ce3f8", "committedDate": "2020-02-27T19:53:10Z", "message": "Merge branch 'lcwbUpdates' of https://github.com/seancoulter/atlas-checks into lcwbUpdates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDM1MTIx", "url": "https://github.com/osmlab/atlas-checks/pull/263#pullrequestreview-367435121", "createdAt": "2020-03-02T18:43:00Z", "commit": {"oid": "da023d2d3d4790663bb767b7afa9f5cf562ce3f8"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9ec53f593205e8ab72b81207fdd4c78ddd22a93", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/a9ec53f593205e8ab72b81207fdd4c78ddd22a93", "committedDate": "2020-03-02T18:58:09Z", "message": "Merge branch 'dev' into lcwbUpdates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDUyMTU0", "url": "https://github.com/osmlab/atlas-checks/pull/263#pullrequestreview-367452154", "createdAt": "2020-03-02T19:08:12Z", "commit": {"oid": "a9ec53f593205e8ab72b81207fdd4c78ddd22a93"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce13f75e82746a74bc6200ff3eca4b5643a8ab6a", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/ce13f75e82746a74bc6200ff3eca4b5643a8ab6a", "committedDate": "2020-03-02T19:18:25Z", "message": "LCWB warning suppression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269", "author": {"user": null}, "url": "https://github.com/osmlab/atlas-checks/commit/fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269", "committedDate": "2020-03-02T19:18:56Z", "message": "Merge branch 'lcwbUpdates' of https://github.com/seancoulter/atlas-checks into lcwbUpdates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDY1ODkz", "url": "https://github.com/osmlab/atlas-checks/pull/263#pullrequestreview-367465893", "createdAt": "2020-03-02T19:28:39Z", "commit": {"oid": "fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDY5MDc2", "url": "https://github.com/osmlab/atlas-checks/pull/263#pullrequestreview-367469076", "createdAt": "2020-03-02T19:33:22Z", "commit": {"oid": "fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDgwNzc4", "url": "https://github.com/osmlab/atlas-checks/pull/263#pullrequestreview-367480778", "createdAt": "2020-03-02T19:51:22Z", "commit": {"oid": "fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDgwNzk0", "url": "https://github.com/osmlab/atlas-checks/pull/263#pullrequestreview-367480794", "createdAt": "2020-03-02T19:51:23Z", "commit": {"oid": "fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo1MToyM1rOFwtBYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo1MToyM1rOFwtBYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxMzYwMw==", "bodyText": "nit: All the checks are enabled by default in this config.", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r386613603", "createdAt": "2020-03-02T19:51:23Z", "author": {"login": "sayas01"}, "path": "config/configuration.json", "diffHunk": "@@ -436,7 +436,16 @@\n       \"tags\": \"building\"\n     }\n   },\n-  \"LineCrossingWaterBodyCheck\": {},\n+  \"LineCrossingWaterBodyCheck\": {\n+    \"enabled\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDgxNzkw", "url": "https://github.com/osmlab/atlas-checks/pull/263#pullrequestreview-367481790", "createdAt": "2020-03-02T19:52:50Z", "commit": {"oid": "fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo1Mjo1MFrOFwtEbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo1Mjo1MFrOFwtEbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNDM4MA==", "bodyText": "Also could you add the MR \"challenge\" field?", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r386614380", "createdAt": "2020-03-02T19:52:50Z", "author": {"login": "sayas01"}, "path": "config/configuration.json", "diffHunk": "@@ -436,7 +436,16 @@\n       \"tags\": \"building\"\n     }\n   },\n-  \"LineCrossingWaterBodyCheck\": {},\n+  \"LineCrossingWaterBodyCheck\": {\n+    \"enabled\": true,\n+    \"highway.minimum\": \"path\",\n+    \"highways.exclude\": [\n+      \"bus_guideway\"\n+    ],\n+    \"lineItems.offending\": \"railway->rail,narrow_gauge,preserved,subway,disused,monorail,tram,light_rail,funicular,construction,miniature\",\n+    \"lineItems.non_offending\": \"waterway->*|boundary->*|landuse->*|bridge->yes,viaduct,aqueduct,boardwalk,covered,low_water_crossing,movable,suspension|tunnel->yes,culvert,building_passage|embankment->yes|location->underwater,underground|power->line,minor_line|man_made->pier,breakwater,embankment,groyne,dyke,pipeline|route->ferry|highway->proposed,construction|ice_road->yes|ford->yes|winter_road->yes|snowmobile->yes|ski->yes\",\n+    \"buildings.flag\": true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3287, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}