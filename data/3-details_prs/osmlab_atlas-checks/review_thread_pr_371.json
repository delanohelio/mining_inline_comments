{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMTc0NDkx", "number": 371, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo1NDoxNFrOEzam7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoyMTo1MFrOE1Bz3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzQ4NzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo1NDoxNFrOHqn6Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDo1Njo1NFrOHquWtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1NjE0Nw==", "bodyText": "Please add this to the configuration file. Otherwise it can be easy to forget it exists.", "url": "https://github.com/osmlab/atlas-checks/pull/371#discussion_r514456147", "createdAt": "2020-10-29T17:54:14Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "diffHunk": "@@ -0,0 +1,369 @@\n+package org.openstreetmap.atlas.checks.validation.intersections;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.change.FeatureChange;\n+import org.openstreetmap.atlas.geography.atlas.complete.CompleteEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasItem;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.ConstructionDateTag;\n+import org.openstreetmap.atlas.tags.ConstructionTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+\n+/**\n+ * This check is to detect and flag nodes under the three scenarios below: 1) When a railway crosses\n+ * a highway, but intersection node is missing. 2) When railway/highway intersection node exists,\n+ * but railway=level_crossing tag is missing. 3) When tag railway=level_crossing exists, on a node,\n+ * but is lacking of either highway or railway going through the node (osmose 7090), or not on a\n+ * node, instead, on the related way features (osmose 9015)\n+ *\n+ * @author aiannicelli\n+ */\n+public class LevelCrossingOnRailwayCheck extends BaseCheck<Long>\n+{\n+    private static final String RAILWAY_FILTER_DEFAULT = \"railway->rail,tram,disused,preserved,miniature,light_rail,subway,narrow_gauge\";\n+    private final TaggableFilter railwayFilter;\n+    private static final Long OSM_LAYER_DEFAULT = 0L;\n+    private final Long layerDefault;\n+    private static final String INVALID_TAGGED_OBJECT = \"The object (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"but is not a node. To fix: Remove `railway=level_crossing` tag.\";\n+    private static final int INVALID_TAGGED_OBJECT_INDEX = 0;\n+    private static final String NODE_MISSING_LC_TAG = \"The intersection node (OSM ID: {0,number,#}) is \"\n+            + \"missing a `railway=level_crossing` tag. This means that there are at least one valid railway and one \"\n+            + \"car navigable highway on the same layer at this node. To fix: If the two ways should be on different \"\n+            + \"layers then adjust the layer tags for each way appropriately. If the two ways do intersect on the same \"\n+            + \"layer then add the `railway=level_crossing` tag to this node.\";\n+    private static final int NODE_MISSING_LC_TAG_INDEX = 1;\n+    private static final String NODE_INVALID_LC_TAG_NO_HIGHWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there is no car navigable highway at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_HIGHWAY_INDEX = 2;\n+    private static final String NODE_INVALID_LC_TAG_NO_RAILWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there are no existing rails at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_RAILWAY_INDEX = 3;\n+    private static final String NODE_INVALID_LC_TAG_LAYERS = \"The node (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"tag, but there are no railway and highway intersection on the same layer. \"\n+            + \"To fix: If the railway and highway should be on the same layer then update the layer tags for both ways \"\n+            + \"to be equal. If the ways are on different layers then remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_LAYERS_INDEX = 4;\n+    private static final String INTERSECTION_MISSING_NODE = \"The railway (OSM ID: {0,number,#}) has one or more car \"\n+            + \"navigable intersections on the same layer that are missing intersection nodes. To fix: \"\n+            + \"If highway and railway do cross at the same layer then add appropriate intersection node(s) with \"\n+            + \"`railway=level_crossing` tag. If highway and railway are on different layers then update the \"\n+            + \"appropriate layer tag for the way that goes under or over the other way.\";\n+    private static final int INTERSECTION_MISSING_NODE_INDEX = 5;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(INVALID_TAGGED_OBJECT,\n+            NODE_MISSING_LC_TAG, NODE_INVALID_LC_TAG_NO_HIGHWAY, NODE_INVALID_LC_TAG_NO_RAILWAY,\n+            NODE_INVALID_LC_TAG_LAYERS, INTERSECTION_MISSING_NODE);\n+    private static final List<String> CONSTRUCTION_TAGS = List.of(HighwayTag.KEY, RailwayTag.KEY);\n+    private static final long serialVersionUID = -2063033332877849846L;\n+\n+    /**\n+     * constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public LevelCrossingOnRailwayCheck(final Configuration configuration)\n+    {\n+\n+        super(configuration);\n+        this.layerDefault = this.configurationValue(configuration, \"layer.default\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f66b4f3263fd3e51badd50b9f140d728fe54e2"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU2MTcxOQ==", "bodyText": "Done", "url": "https://github.com/osmlab/atlas-checks/pull/371#discussion_r514561719", "createdAt": "2020-10-29T20:56:54Z", "author": {"login": "atiannicelli"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "diffHunk": "@@ -0,0 +1,369 @@\n+package org.openstreetmap.atlas.checks.validation.intersections;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.change.FeatureChange;\n+import org.openstreetmap.atlas.geography.atlas.complete.CompleteEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasItem;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.ConstructionDateTag;\n+import org.openstreetmap.atlas.tags.ConstructionTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+\n+/**\n+ * This check is to detect and flag nodes under the three scenarios below: 1) When a railway crosses\n+ * a highway, but intersection node is missing. 2) When railway/highway intersection node exists,\n+ * but railway=level_crossing tag is missing. 3) When tag railway=level_crossing exists, on a node,\n+ * but is lacking of either highway or railway going through the node (osmose 7090), or not on a\n+ * node, instead, on the related way features (osmose 9015)\n+ *\n+ * @author aiannicelli\n+ */\n+public class LevelCrossingOnRailwayCheck extends BaseCheck<Long>\n+{\n+    private static final String RAILWAY_FILTER_DEFAULT = \"railway->rail,tram,disused,preserved,miniature,light_rail,subway,narrow_gauge\";\n+    private final TaggableFilter railwayFilter;\n+    private static final Long OSM_LAYER_DEFAULT = 0L;\n+    private final Long layerDefault;\n+    private static final String INVALID_TAGGED_OBJECT = \"The object (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"but is not a node. To fix: Remove `railway=level_crossing` tag.\";\n+    private static final int INVALID_TAGGED_OBJECT_INDEX = 0;\n+    private static final String NODE_MISSING_LC_TAG = \"The intersection node (OSM ID: {0,number,#}) is \"\n+            + \"missing a `railway=level_crossing` tag. This means that there are at least one valid railway and one \"\n+            + \"car navigable highway on the same layer at this node. To fix: If the two ways should be on different \"\n+            + \"layers then adjust the layer tags for each way appropriately. If the two ways do intersect on the same \"\n+            + \"layer then add the `railway=level_crossing` tag to this node.\";\n+    private static final int NODE_MISSING_LC_TAG_INDEX = 1;\n+    private static final String NODE_INVALID_LC_TAG_NO_HIGHWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there is no car navigable highway at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_HIGHWAY_INDEX = 2;\n+    private static final String NODE_INVALID_LC_TAG_NO_RAILWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there are no existing rails at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_RAILWAY_INDEX = 3;\n+    private static final String NODE_INVALID_LC_TAG_LAYERS = \"The node (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"tag, but there are no railway and highway intersection on the same layer. \"\n+            + \"To fix: If the railway and highway should be on the same layer then update the layer tags for both ways \"\n+            + \"to be equal. If the ways are on different layers then remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_LAYERS_INDEX = 4;\n+    private static final String INTERSECTION_MISSING_NODE = \"The railway (OSM ID: {0,number,#}) has one or more car \"\n+            + \"navigable intersections on the same layer that are missing intersection nodes. To fix: \"\n+            + \"If highway and railway do cross at the same layer then add appropriate intersection node(s) with \"\n+            + \"`railway=level_crossing` tag. If highway and railway are on different layers then update the \"\n+            + \"appropriate layer tag for the way that goes under or over the other way.\";\n+    private static final int INTERSECTION_MISSING_NODE_INDEX = 5;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(INVALID_TAGGED_OBJECT,\n+            NODE_MISSING_LC_TAG, NODE_INVALID_LC_TAG_NO_HIGHWAY, NODE_INVALID_LC_TAG_NO_RAILWAY,\n+            NODE_INVALID_LC_TAG_LAYERS, INTERSECTION_MISSING_NODE);\n+    private static final List<String> CONSTRUCTION_TAGS = List.of(HighwayTag.KEY, RailwayTag.KEY);\n+    private static final long serialVersionUID = -2063033332877849846L;\n+\n+    /**\n+     * constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public LevelCrossingOnRailwayCheck(final Configuration configuration)\n+    {\n+\n+        super(configuration);\n+        this.layerDefault = this.configurationValue(configuration, \"layer.default\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1NjE0Nw=="}, "originalCommit": {"oid": "08f66b4f3263fd3e51badd50b9f140d728fe54e2"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzUxNzA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxODowMTozNVrOHqoMjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxODowMTozNVrOHqoMjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDgxMw==", "bodyText": "Nice!", "url": "https://github.com/osmlab/atlas-checks/pull/371#discussion_r514460813", "createdAt": "2020-10-29T18:01:35Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "diffHunk": "@@ -0,0 +1,369 @@\n+package org.openstreetmap.atlas.checks.validation.intersections;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.change.FeatureChange;\n+import org.openstreetmap.atlas.geography.atlas.complete.CompleteEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasItem;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.ConstructionDateTag;\n+import org.openstreetmap.atlas.tags.ConstructionTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+\n+/**\n+ * This check is to detect and flag nodes under the three scenarios below: 1) When a railway crosses\n+ * a highway, but intersection node is missing. 2) When railway/highway intersection node exists,\n+ * but railway=level_crossing tag is missing. 3) When tag railway=level_crossing exists, on a node,\n+ * but is lacking of either highway or railway going through the node (osmose 7090), or not on a\n+ * node, instead, on the related way features (osmose 9015)\n+ *\n+ * @author aiannicelli\n+ */\n+public class LevelCrossingOnRailwayCheck extends BaseCheck<Long>\n+{\n+    private static final String RAILWAY_FILTER_DEFAULT = \"railway->rail,tram,disused,preserved,miniature,light_rail,subway,narrow_gauge\";\n+    private final TaggableFilter railwayFilter;\n+    private static final Long OSM_LAYER_DEFAULT = 0L;\n+    private final Long layerDefault;\n+    private static final String INVALID_TAGGED_OBJECT = \"The object (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"but is not a node. To fix: Remove `railway=level_crossing` tag.\";\n+    private static final int INVALID_TAGGED_OBJECT_INDEX = 0;\n+    private static final String NODE_MISSING_LC_TAG = \"The intersection node (OSM ID: {0,number,#}) is \"\n+            + \"missing a `railway=level_crossing` tag. This means that there are at least one valid railway and one \"\n+            + \"car navigable highway on the same layer at this node. To fix: If the two ways should be on different \"\n+            + \"layers then adjust the layer tags for each way appropriately. If the two ways do intersect on the same \"\n+            + \"layer then add the `railway=level_crossing` tag to this node.\";\n+    private static final int NODE_MISSING_LC_TAG_INDEX = 1;\n+    private static final String NODE_INVALID_LC_TAG_NO_HIGHWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there is no car navigable highway at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_HIGHWAY_INDEX = 2;\n+    private static final String NODE_INVALID_LC_TAG_NO_RAILWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there are no existing rails at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_RAILWAY_INDEX = 3;\n+    private static final String NODE_INVALID_LC_TAG_LAYERS = \"The node (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"tag, but there are no railway and highway intersection on the same layer. \"\n+            + \"To fix: If the railway and highway should be on the same layer then update the layer tags for both ways \"\n+            + \"to be equal. If the ways are on different layers then remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_LAYERS_INDEX = 4;\n+    private static final String INTERSECTION_MISSING_NODE = \"The railway (OSM ID: {0,number,#}) has one or more car \"\n+            + \"navigable intersections on the same layer that are missing intersection nodes. To fix: \"\n+            + \"If highway and railway do cross at the same layer then add appropriate intersection node(s) with \"\n+            + \"`railway=level_crossing` tag. If highway and railway are on different layers then update the \"\n+            + \"appropriate layer tag for the way that goes under or over the other way.\";\n+    private static final int INTERSECTION_MISSING_NODE_INDEX = 5;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(INVALID_TAGGED_OBJECT,\n+            NODE_MISSING_LC_TAG, NODE_INVALID_LC_TAG_NO_HIGHWAY, NODE_INVALID_LC_TAG_NO_RAILWAY,\n+            NODE_INVALID_LC_TAG_LAYERS, INTERSECTION_MISSING_NODE);\n+    private static final List<String> CONSTRUCTION_TAGS = List.of(HighwayTag.KEY, RailwayTag.KEY);\n+    private static final long serialVersionUID = -2063033332877849846L;\n+\n+    /**\n+     * constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public LevelCrossingOnRailwayCheck(final Configuration configuration)\n+    {\n+\n+        super(configuration);\n+        this.layerDefault = this.configurationValue(configuration, \"layer.default\",\n+                OSM_LAYER_DEFAULT);\n+        this.railwayFilter = this.configurationValue(configuration, \"railway.filter\",\n+                RAILWAY_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+    }\n+\n+    /**\n+     * Object check looks for the vaild objects to check for level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        /*-\n+         * The following objects should be checked:\n+         *  1) Any node.\n+         *  2) Any object that is tagged with railway=level_crossing.\n+         *  3) Any object that is tagged as a railway as indicted in railway.filter.\n+         */\n+        return object instanceof Node\n+                || Validators.isOfType(object, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                || this.railwayFilter.test(object);\n+    }\n+\n+    /**\n+     * Create a Return Flags for level_crossing objects.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        /*-\n+         * The following invalid situations are to be flagged:\n+         *  1) object is node and\n+         *     a) is marked as a level crossing but does in not an intersection of highway and railway\n+         *     b) is not tagged as a level crossing and is an intersection of highway and railway.\n+         *  2) object is not a node or point and is tagged with railway=level_crossing.\n+         *  3) object is railway and intersects a highway on the same layer but there is no node.\n+         */\n+\n+        final Optional<CheckFlag> flagIncorrectlyTagged = this.flagIncorrectlyTagged(object);\n+        if (!flagIncorrectlyTagged.isEmpty())\n+        {\n+            return flagIncorrectlyTagged;\n+        }\n+        final Optional<CheckFlag> flagNonNodeTagged = this.flagNonNodeTagged(object);\n+        if (!flagNonNodeTagged.isEmpty())\n+        {\n+            return flagNonNodeTagged;\n+        }\n+        final Optional<CheckFlag> flagInvalidIntersections = this.flagInvalidIntersections(object);\n+        if (!flagInvalidIntersections.isEmpty())\n+        {\n+            return flagInvalidIntersections;\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    /**\n+     * Flag nodes incorrectly tagged with level_crossing or missing level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    private Optional<CheckFlag> flagIncorrectlyTagged(final AtlasObject object)\n+    {\n+        if (object instanceof Node)\n+        {\n+            final Node node = (Node) object;\n+\n+            final int issueType = this.isValidLevelCrossingNode(node);\n+            if (Validators.isOfType(node, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                    && issueType > 0)\n+            {\n+                // This is a node that is tagged with railway=level_crossing and is not a\n+                // railway/highway intersection\n+                return Optional.of(this\n+                        .createFlag(object,\n+                                this.getLocalizedInstruction(issueType, object.getOsmIdentifier()))\n+                        .addFixSuggestion(FeatureChange.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f66b4f3263fd3e51badd50b9f140d728fe54e2"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzUzNDcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxODowNTo0OVrOHqoXRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDo1ODozMFrOHquZ9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MzU1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!(object instanceof Node || object instanceof Point)\n          \n          \n            \n                    if (!(object instanceof LocationItem)", "url": "https://github.com/osmlab/atlas-checks/pull/371#discussion_r514463556", "createdAt": "2020-10-29T18:05:49Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "diffHunk": "@@ -0,0 +1,369 @@\n+package org.openstreetmap.atlas.checks.validation.intersections;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.change.FeatureChange;\n+import org.openstreetmap.atlas.geography.atlas.complete.CompleteEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasItem;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.ConstructionDateTag;\n+import org.openstreetmap.atlas.tags.ConstructionTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+\n+/**\n+ * This check is to detect and flag nodes under the three scenarios below: 1) When a railway crosses\n+ * a highway, but intersection node is missing. 2) When railway/highway intersection node exists,\n+ * but railway=level_crossing tag is missing. 3) When tag railway=level_crossing exists, on a node,\n+ * but is lacking of either highway or railway going through the node (osmose 7090), or not on a\n+ * node, instead, on the related way features (osmose 9015)\n+ *\n+ * @author aiannicelli\n+ */\n+public class LevelCrossingOnRailwayCheck extends BaseCheck<Long>\n+{\n+    private static final String RAILWAY_FILTER_DEFAULT = \"railway->rail,tram,disused,preserved,miniature,light_rail,subway,narrow_gauge\";\n+    private final TaggableFilter railwayFilter;\n+    private static final Long OSM_LAYER_DEFAULT = 0L;\n+    private final Long layerDefault;\n+    private static final String INVALID_TAGGED_OBJECT = \"The object (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"but is not a node. To fix: Remove `railway=level_crossing` tag.\";\n+    private static final int INVALID_TAGGED_OBJECT_INDEX = 0;\n+    private static final String NODE_MISSING_LC_TAG = \"The intersection node (OSM ID: {0,number,#}) is \"\n+            + \"missing a `railway=level_crossing` tag. This means that there are at least one valid railway and one \"\n+            + \"car navigable highway on the same layer at this node. To fix: If the two ways should be on different \"\n+            + \"layers then adjust the layer tags for each way appropriately. If the two ways do intersect on the same \"\n+            + \"layer then add the `railway=level_crossing` tag to this node.\";\n+    private static final int NODE_MISSING_LC_TAG_INDEX = 1;\n+    private static final String NODE_INVALID_LC_TAG_NO_HIGHWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there is no car navigable highway at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_HIGHWAY_INDEX = 2;\n+    private static final String NODE_INVALID_LC_TAG_NO_RAILWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there are no existing rails at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_RAILWAY_INDEX = 3;\n+    private static final String NODE_INVALID_LC_TAG_LAYERS = \"The node (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"tag, but there are no railway and highway intersection on the same layer. \"\n+            + \"To fix: If the railway and highway should be on the same layer then update the layer tags for both ways \"\n+            + \"to be equal. If the ways are on different layers then remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_LAYERS_INDEX = 4;\n+    private static final String INTERSECTION_MISSING_NODE = \"The railway (OSM ID: {0,number,#}) has one or more car \"\n+            + \"navigable intersections on the same layer that are missing intersection nodes. To fix: \"\n+            + \"If highway and railway do cross at the same layer then add appropriate intersection node(s) with \"\n+            + \"`railway=level_crossing` tag. If highway and railway are on different layers then update the \"\n+            + \"appropriate layer tag for the way that goes under or over the other way.\";\n+    private static final int INTERSECTION_MISSING_NODE_INDEX = 5;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(INVALID_TAGGED_OBJECT,\n+            NODE_MISSING_LC_TAG, NODE_INVALID_LC_TAG_NO_HIGHWAY, NODE_INVALID_LC_TAG_NO_RAILWAY,\n+            NODE_INVALID_LC_TAG_LAYERS, INTERSECTION_MISSING_NODE);\n+    private static final List<String> CONSTRUCTION_TAGS = List.of(HighwayTag.KEY, RailwayTag.KEY);\n+    private static final long serialVersionUID = -2063033332877849846L;\n+\n+    /**\n+     * constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public LevelCrossingOnRailwayCheck(final Configuration configuration)\n+    {\n+\n+        super(configuration);\n+        this.layerDefault = this.configurationValue(configuration, \"layer.default\",\n+                OSM_LAYER_DEFAULT);\n+        this.railwayFilter = this.configurationValue(configuration, \"railway.filter\",\n+                RAILWAY_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+    }\n+\n+    /**\n+     * Object check looks for the vaild objects to check for level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        /*-\n+         * The following objects should be checked:\n+         *  1) Any node.\n+         *  2) Any object that is tagged with railway=level_crossing.\n+         *  3) Any object that is tagged as a railway as indicted in railway.filter.\n+         */\n+        return object instanceof Node\n+                || Validators.isOfType(object, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                || this.railwayFilter.test(object);\n+    }\n+\n+    /**\n+     * Create a Return Flags for level_crossing objects.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        /*-\n+         * The following invalid situations are to be flagged:\n+         *  1) object is node and\n+         *     a) is marked as a level crossing but does in not an intersection of highway and railway\n+         *     b) is not tagged as a level crossing and is an intersection of highway and railway.\n+         *  2) object is not a node or point and is tagged with railway=level_crossing.\n+         *  3) object is railway and intersects a highway on the same layer but there is no node.\n+         */\n+\n+        final Optional<CheckFlag> flagIncorrectlyTagged = this.flagIncorrectlyTagged(object);\n+        if (!flagIncorrectlyTagged.isEmpty())\n+        {\n+            return flagIncorrectlyTagged;\n+        }\n+        final Optional<CheckFlag> flagNonNodeTagged = this.flagNonNodeTagged(object);\n+        if (!flagNonNodeTagged.isEmpty())\n+        {\n+            return flagNonNodeTagged;\n+        }\n+        final Optional<CheckFlag> flagInvalidIntersections = this.flagInvalidIntersections(object);\n+        if (!flagInvalidIntersections.isEmpty())\n+        {\n+            return flagInvalidIntersections;\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    /**\n+     * Flag nodes incorrectly tagged with level_crossing or missing level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    private Optional<CheckFlag> flagIncorrectlyTagged(final AtlasObject object)\n+    {\n+        if (object instanceof Node)\n+        {\n+            final Node node = (Node) object;\n+\n+            final int issueType = this.isValidLevelCrossingNode(node);\n+            if (Validators.isOfType(node, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                    && issueType > 0)\n+            {\n+                // This is a node that is tagged with railway=level_crossing and is not a\n+                // railway/highway intersection\n+                return Optional.of(this\n+                        .createFlag(object,\n+                                this.getLocalizedInstruction(issueType, object.getOsmIdentifier()))\n+                        .addFixSuggestion(FeatureChange.add(\n+                                (AtlasEntity) ((CompleteEntity) CompleteEntity\n+                                        .from((AtlasEntity) object)).withRemovedTag(RailwayTag.KEY),\n+                                object.getAtlas())));\n+            }\n+            if (!Validators.isOfType(node, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                    && issueType == 0)\n+            {\n+                // This is a valid railway/highway intersect node that is not tagged with\n+                // railway=level_crossing\n+                return Optional.of(this\n+                        .createFlag(object,\n+                                this.getLocalizedInstruction(NODE_MISSING_LC_TAG_INDEX,\n+                                        object.getOsmIdentifier()))\n+                        .addFixSuggestion(FeatureChange.add(\n+                                (AtlasEntity) ((CompleteEntity) CompleteEntity\n+                                        .from((AtlasEntity) object)).withAddedTag(RailwayTag.KEY,\n+                                                RailwayTag.LEVEL_CROSSING.toString().toLowerCase()),\n+                                object.getAtlas())));\n+\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Flag all railway/highway intersections that are missing an intersection node\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    private Optional<CheckFlag> flagInvalidIntersections(final AtlasObject object)\n+    {\n+        if (object instanceof Line && this.railwayFilter.test(object))\n+        {\n+            final Line railway = (Line) object;\n+            final Atlas atlas = railway.getAtlas();\n+            final List<Location> badIntersectingHighways = new ArrayList<>();\n+\n+            Iterables.asList(atlas.edgesIntersecting(railway.bounds()))\n+                    .forEach(highway -> badIntersectingHighways\n+                            .addAll(this.missingNodesAtIntersectionOnSameLayer(railway, highway)));\n+            if (!badIntersectingHighways.isEmpty())\n+            {\n+                return Optional.of(this.createFlag(object,\n+                        this.getLocalizedInstruction(INTERSECTION_MISSING_NODE_INDEX,\n+                                railway.getOsmIdentifier()),\n+                        badIntersectingHighways));\n+            }\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Flag all objects that are not nodes or points that are tagged with railway=level_crossing\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    private Optional<CheckFlag> flagNonNodeTagged(final AtlasObject object)\n+    {\n+        if (!(object instanceof Node || object instanceof Point)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f66b4f3263fd3e51badd50b9f140d728fe54e2"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU2MjU0OA==", "bodyText": "Done", "url": "https://github.com/osmlab/atlas-checks/pull/371#discussion_r514562548", "createdAt": "2020-10-29T20:58:30Z", "author": {"login": "atiannicelli"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "diffHunk": "@@ -0,0 +1,369 @@\n+package org.openstreetmap.atlas.checks.validation.intersections;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.change.FeatureChange;\n+import org.openstreetmap.atlas.geography.atlas.complete.CompleteEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasItem;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.geography.atlas.items.Point;\n+import org.openstreetmap.atlas.tags.ConstructionDateTag;\n+import org.openstreetmap.atlas.tags.ConstructionTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+\n+/**\n+ * This check is to detect and flag nodes under the three scenarios below: 1) When a railway crosses\n+ * a highway, but intersection node is missing. 2) When railway/highway intersection node exists,\n+ * but railway=level_crossing tag is missing. 3) When tag railway=level_crossing exists, on a node,\n+ * but is lacking of either highway or railway going through the node (osmose 7090), or not on a\n+ * node, instead, on the related way features (osmose 9015)\n+ *\n+ * @author aiannicelli\n+ */\n+public class LevelCrossingOnRailwayCheck extends BaseCheck<Long>\n+{\n+    private static final String RAILWAY_FILTER_DEFAULT = \"railway->rail,tram,disused,preserved,miniature,light_rail,subway,narrow_gauge\";\n+    private final TaggableFilter railwayFilter;\n+    private static final Long OSM_LAYER_DEFAULT = 0L;\n+    private final Long layerDefault;\n+    private static final String INVALID_TAGGED_OBJECT = \"The object (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"but is not a node. To fix: Remove `railway=level_crossing` tag.\";\n+    private static final int INVALID_TAGGED_OBJECT_INDEX = 0;\n+    private static final String NODE_MISSING_LC_TAG = \"The intersection node (OSM ID: {0,number,#}) is \"\n+            + \"missing a `railway=level_crossing` tag. This means that there are at least one valid railway and one \"\n+            + \"car navigable highway on the same layer at this node. To fix: If the two ways should be on different \"\n+            + \"layers then adjust the layer tags for each way appropriately. If the two ways do intersect on the same \"\n+            + \"layer then add the `railway=level_crossing` tag to this node.\";\n+    private static final int NODE_MISSING_LC_TAG_INDEX = 1;\n+    private static final String NODE_INVALID_LC_TAG_NO_HIGHWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there is no car navigable highway at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_HIGHWAY_INDEX = 2;\n+    private static final String NODE_INVALID_LC_TAG_NO_RAILWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there are no existing rails at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_RAILWAY_INDEX = 3;\n+    private static final String NODE_INVALID_LC_TAG_LAYERS = \"The node (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"tag, but there are no railway and highway intersection on the same layer. \"\n+            + \"To fix: If the railway and highway should be on the same layer then update the layer tags for both ways \"\n+            + \"to be equal. If the ways are on different layers then remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_LAYERS_INDEX = 4;\n+    private static final String INTERSECTION_MISSING_NODE = \"The railway (OSM ID: {0,number,#}) has one or more car \"\n+            + \"navigable intersections on the same layer that are missing intersection nodes. To fix: \"\n+            + \"If highway and railway do cross at the same layer then add appropriate intersection node(s) with \"\n+            + \"`railway=level_crossing` tag. If highway and railway are on different layers then update the \"\n+            + \"appropriate layer tag for the way that goes under or over the other way.\";\n+    private static final int INTERSECTION_MISSING_NODE_INDEX = 5;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(INVALID_TAGGED_OBJECT,\n+            NODE_MISSING_LC_TAG, NODE_INVALID_LC_TAG_NO_HIGHWAY, NODE_INVALID_LC_TAG_NO_RAILWAY,\n+            NODE_INVALID_LC_TAG_LAYERS, INTERSECTION_MISSING_NODE);\n+    private static final List<String> CONSTRUCTION_TAGS = List.of(HighwayTag.KEY, RailwayTag.KEY);\n+    private static final long serialVersionUID = -2063033332877849846L;\n+\n+    /**\n+     * constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public LevelCrossingOnRailwayCheck(final Configuration configuration)\n+    {\n+\n+        super(configuration);\n+        this.layerDefault = this.configurationValue(configuration, \"layer.default\",\n+                OSM_LAYER_DEFAULT);\n+        this.railwayFilter = this.configurationValue(configuration, \"railway.filter\",\n+                RAILWAY_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+    }\n+\n+    /**\n+     * Object check looks for the vaild objects to check for level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        /*-\n+         * The following objects should be checked:\n+         *  1) Any node.\n+         *  2) Any object that is tagged with railway=level_crossing.\n+         *  3) Any object that is tagged as a railway as indicted in railway.filter.\n+         */\n+        return object instanceof Node\n+                || Validators.isOfType(object, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                || this.railwayFilter.test(object);\n+    }\n+\n+    /**\n+     * Create a Return Flags for level_crossing objects.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        /*-\n+         * The following invalid situations are to be flagged:\n+         *  1) object is node and\n+         *     a) is marked as a level crossing but does in not an intersection of highway and railway\n+         *     b) is not tagged as a level crossing and is an intersection of highway and railway.\n+         *  2) object is not a node or point and is tagged with railway=level_crossing.\n+         *  3) object is railway and intersects a highway on the same layer but there is no node.\n+         */\n+\n+        final Optional<CheckFlag> flagIncorrectlyTagged = this.flagIncorrectlyTagged(object);\n+        if (!flagIncorrectlyTagged.isEmpty())\n+        {\n+            return flagIncorrectlyTagged;\n+        }\n+        final Optional<CheckFlag> flagNonNodeTagged = this.flagNonNodeTagged(object);\n+        if (!flagNonNodeTagged.isEmpty())\n+        {\n+            return flagNonNodeTagged;\n+        }\n+        final Optional<CheckFlag> flagInvalidIntersections = this.flagInvalidIntersections(object);\n+        if (!flagInvalidIntersections.isEmpty())\n+        {\n+            return flagInvalidIntersections;\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    /**\n+     * Flag nodes incorrectly tagged with level_crossing or missing level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    private Optional<CheckFlag> flagIncorrectlyTagged(final AtlasObject object)\n+    {\n+        if (object instanceof Node)\n+        {\n+            final Node node = (Node) object;\n+\n+            final int issueType = this.isValidLevelCrossingNode(node);\n+            if (Validators.isOfType(node, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                    && issueType > 0)\n+            {\n+                // This is a node that is tagged with railway=level_crossing and is not a\n+                // railway/highway intersection\n+                return Optional.of(this\n+                        .createFlag(object,\n+                                this.getLocalizedInstruction(issueType, object.getOsmIdentifier()))\n+                        .addFixSuggestion(FeatureChange.add(\n+                                (AtlasEntity) ((CompleteEntity) CompleteEntity\n+                                        .from((AtlasEntity) object)).withRemovedTag(RailwayTag.KEY),\n+                                object.getAtlas())));\n+            }\n+            if (!Validators.isOfType(node, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                    && issueType == 0)\n+            {\n+                // This is a valid railway/highway intersect node that is not tagged with\n+                // railway=level_crossing\n+                return Optional.of(this\n+                        .createFlag(object,\n+                                this.getLocalizedInstruction(NODE_MISSING_LC_TAG_INDEX,\n+                                        object.getOsmIdentifier()))\n+                        .addFixSuggestion(FeatureChange.add(\n+                                (AtlasEntity) ((CompleteEntity) CompleteEntity\n+                                        .from((AtlasEntity) object)).withAddedTag(RailwayTag.KEY,\n+                                                RailwayTag.LEVEL_CROSSING.toString().toLowerCase()),\n+                                object.getAtlas())));\n+\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Flag all railway/highway intersections that are missing an intersection node\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    private Optional<CheckFlag> flagInvalidIntersections(final AtlasObject object)\n+    {\n+        if (object instanceof Line && this.railwayFilter.test(object))\n+        {\n+            final Line railway = (Line) object;\n+            final Atlas atlas = railway.getAtlas();\n+            final List<Location> badIntersectingHighways = new ArrayList<>();\n+\n+            Iterables.asList(atlas.edgesIntersecting(railway.bounds()))\n+                    .forEach(highway -> badIntersectingHighways\n+                            .addAll(this.missingNodesAtIntersectionOnSameLayer(railway, highway)));\n+            if (!badIntersectingHighways.isEmpty())\n+            {\n+                return Optional.of(this.createFlag(object,\n+                        this.getLocalizedInstruction(INTERSECTION_MISSING_NODE_INDEX,\n+                                railway.getOsmIdentifier()),\n+                        badIntersectingHighways));\n+            }\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Flag all objects that are not nodes or points that are tagged with railway=level_crossing\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    private Optional<CheckFlag> flagNonNodeTagged(final AtlasObject object)\n+    {\n+        if (!(object instanceof Node || object instanceof Point)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MzU1Ng=="}, "originalCommit": {"oid": "08f66b4f3263fd3e51badd50b9f140d728fe54e2"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzU2NDE2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheckTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxODoxMzowNFrOHqopcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDo1ODowMVrOHquY6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2ODIxMA==", "bodyText": "Please add a some unit tests that use the ConfigurationResolver.inLineConfiguration() to check that the 2 configurables work as expected. And please test that the expected fix suggestions are created.", "url": "https://github.com/osmlab/atlas-checks/pull/371#discussion_r514468210", "createdAt": "2020-10-29T18:13:04Z", "author": {"login": "Bentleysb"}, "path": "src/test/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheckTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.openstreetmap.atlas.checks.validation.intersections;\n+\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.openstreetmap.atlas.checks.configuration.ConfigurationResolver;\n+import org.openstreetmap.atlas.checks.validation.verifier.ConsumerBasedExpectedCheckVerifier;\n+\n+/**\n+ * Unit tests for {@link LevelCrossingOnRailwayCheck}.\n+ *\n+ * @author atiannicelli\n+ */\n+public class LevelCrossingOnRailwayCheckTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f66b4f3263fd3e51badd50b9f140d728fe54e2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU2MjI4MQ==", "bodyText": "Done. I added two new tests to specifically test the two config parameters. Also added verifications for fix suggestions.", "url": "https://github.com/osmlab/atlas-checks/pull/371#discussion_r514562281", "createdAt": "2020-10-29T20:58:01Z", "author": {"login": "atiannicelli"}, "path": "src/test/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheckTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.openstreetmap.atlas.checks.validation.intersections;\n+\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.openstreetmap.atlas.checks.configuration.ConfigurationResolver;\n+import org.openstreetmap.atlas.checks.validation.verifier.ConsumerBasedExpectedCheckVerifier;\n+\n+/**\n+ * Unit tests for {@link LevelCrossingOnRailwayCheck}.\n+ *\n+ * @author atiannicelli\n+ */\n+public class LevelCrossingOnRailwayCheckTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2ODIxMA=="}, "originalCommit": {"oid": "08f66b4f3263fd3e51badd50b9f140d728fe54e2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDM5MzQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoyMDoyMFrOHtFBZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTowMjowN1rOHtcGAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMDI0Nw==", "bodyText": "nit: issueType could be better served as an Enum to avoid referencing docs for explanation", "url": "https://github.com/osmlab/atlas-checks/pull/371#discussion_r517030247", "createdAt": "2020-11-04T00:20:20Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "diffHunk": "@@ -0,0 +1,369 @@\n+package org.openstreetmap.atlas.checks.validation.intersections;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.change.FeatureChange;\n+import org.openstreetmap.atlas.geography.atlas.complete.CompleteEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasItem;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.tags.ConstructionDateTag;\n+import org.openstreetmap.atlas.tags.ConstructionTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+\n+/**\n+ * This check is to detect and flag nodes under the three scenarios below: 1) When a railway crosses\n+ * a highway, but intersection node is missing. 2) When railway/highway intersection node exists,\n+ * but railway=level_crossing tag is missing. 3) When tag railway=level_crossing exists, on a node,\n+ * but is lacking of either highway or railway going through the node (osmose 7090), or not on a\n+ * node, instead, on the related way features (osmose 9015)\n+ *\n+ * @author aiannicelli\n+ */\n+public class LevelCrossingOnRailwayCheck extends BaseCheck<Long>\n+{\n+    private static final String RAILWAY_FILTER_DEFAULT = \"railway->rail,tram,disused,preserved,miniature,light_rail,subway,narrow_gauge\";\n+    private final TaggableFilter railwayFilter;\n+    private static final Long OSM_LAYER_DEFAULT = 0L;\n+    private final Long layerDefault;\n+    private static final String INVALID_TAGGED_OBJECT = \"The object (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"but is not a node. To fix: Remove `railway=level_crossing` tag.\";\n+    private static final int INVALID_TAGGED_OBJECT_INDEX = 0;\n+    private static final String NODE_MISSING_LC_TAG = \"The intersection node (OSM ID: {0,number,#}) is \"\n+            + \"missing a `railway=level_crossing` tag. This means that there are at least one valid railway and one \"\n+            + \"car navigable highway on the same layer at this node. To fix: If the two ways should be on different \"\n+            + \"layers then adjust the layer tags for each way appropriately. If the two ways do intersect on the same \"\n+            + \"layer then add the `railway=level_crossing` tag to this node.\";\n+    private static final int NODE_MISSING_LC_TAG_INDEX = 1;\n+    private static final String NODE_INVALID_LC_TAG_NO_HIGHWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there is no car navigable highway at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_HIGHWAY_INDEX = 2;\n+    private static final String NODE_INVALID_LC_TAG_NO_RAILWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there are no existing rails at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_RAILWAY_INDEX = 3;\n+    private static final String NODE_INVALID_LC_TAG_LAYERS = \"The node (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"tag, but there are no railway and highway intersection on the same layer. \"\n+            + \"To fix: If the railway and highway should be on the same layer then update the layer tags for both ways \"\n+            + \"to be equal. If the ways are on different layers then remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_LAYERS_INDEX = 4;\n+    private static final String INTERSECTION_MISSING_NODE = \"The railway (OSM ID: {0,number,#}) has one or more car \"\n+            + \"navigable intersections on the same layer that are missing intersection nodes. To fix: \"\n+            + \"If highway and railway do cross at the same layer then add appropriate intersection node(s) with \"\n+            + \"`railway=level_crossing` tag. If highway and railway are on different layers then update the \"\n+            + \"appropriate layer tag for the way that goes under or over the other way.\";\n+    private static final int INTERSECTION_MISSING_NODE_INDEX = 5;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(INVALID_TAGGED_OBJECT,\n+            NODE_MISSING_LC_TAG, NODE_INVALID_LC_TAG_NO_HIGHWAY, NODE_INVALID_LC_TAG_NO_RAILWAY,\n+            NODE_INVALID_LC_TAG_LAYERS, INTERSECTION_MISSING_NODE);\n+    private static final List<String> CONSTRUCTION_TAGS = List.of(HighwayTag.KEY, RailwayTag.KEY);\n+    private static final long serialVersionUID = -2063033332877849846L;\n+\n+    /**\n+     * constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public LevelCrossingOnRailwayCheck(final Configuration configuration)\n+    {\n+\n+        super(configuration);\n+        this.layerDefault = this.configurationValue(configuration, \"layer.default\",\n+                OSM_LAYER_DEFAULT);\n+        this.railwayFilter = this.configurationValue(configuration, \"railway.filter\",\n+                RAILWAY_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+    }\n+\n+    /**\n+     * Object check looks for the vaild objects to check for level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        /*-\n+         * The following objects should be checked:\n+         *  1) Any node.\n+         *  2) Any object that is tagged with railway=level_crossing.\n+         *  3) Any object that is tagged as a railway as indicted in railway.filter.\n+         */\n+        return object instanceof Node\n+                || Validators.isOfType(object, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                || this.railwayFilter.test(object);\n+    }\n+\n+    /**\n+     * Create a Return Flags for level_crossing objects.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        /*-\n+         * The following invalid situations are to be flagged:\n+         *  1) object is node and\n+         *     a) is marked as a level crossing but does in not an intersection of highway and railway\n+         *     b) is not tagged as a level crossing and is an intersection of highway and railway.\n+         *  2) object is not a node or point and is tagged with railway=level_crossing.\n+         *  3) object is railway and intersects a highway on the same layer but there is no node.\n+         */\n+\n+        final Optional<CheckFlag> flagIncorrectlyTagged = this.flagIncorrectlyTagged(object);\n+        if (!flagIncorrectlyTagged.isEmpty())\n+        {\n+            return flagIncorrectlyTagged;\n+        }\n+        final Optional<CheckFlag> flagNonNodeTagged = this.flagNonNodeTagged(object);\n+        if (!flagNonNodeTagged.isEmpty())\n+        {\n+            return flagNonNodeTagged;\n+        }\n+        final Optional<CheckFlag> flagInvalidIntersections = this.flagInvalidIntersections(object);\n+        if (!flagInvalidIntersections.isEmpty())\n+        {\n+            return flagInvalidIntersections;\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    /**\n+     * Flag nodes incorrectly tagged with level_crossing or missing level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    private Optional<CheckFlag> flagIncorrectlyTagged(final AtlasObject object)\n+    {\n+        if (object instanceof Node)\n+        {\n+            final Node node = (Node) object;\n+\n+            final int issueType = this.isValidLevelCrossingNode(node);\n+            if (Validators.isOfType(node, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                    && issueType > 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b82641e0bdaba4bb163d601a3ad8eeb8c189fe25"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwODI1Ng==", "bodyText": "Addressed in latest version.", "url": "https://github.com/osmlab/atlas-checks/pull/371#discussion_r517408256", "createdAt": "2020-11-04T15:02:07Z", "author": {"login": "atiannicelli"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "diffHunk": "@@ -0,0 +1,369 @@\n+package org.openstreetmap.atlas.checks.validation.intersections;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.change.FeatureChange;\n+import org.openstreetmap.atlas.geography.atlas.complete.CompleteEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasItem;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.tags.ConstructionDateTag;\n+import org.openstreetmap.atlas.tags.ConstructionTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+\n+/**\n+ * This check is to detect and flag nodes under the three scenarios below: 1) When a railway crosses\n+ * a highway, but intersection node is missing. 2) When railway/highway intersection node exists,\n+ * but railway=level_crossing tag is missing. 3) When tag railway=level_crossing exists, on a node,\n+ * but is lacking of either highway or railway going through the node (osmose 7090), or not on a\n+ * node, instead, on the related way features (osmose 9015)\n+ *\n+ * @author aiannicelli\n+ */\n+public class LevelCrossingOnRailwayCheck extends BaseCheck<Long>\n+{\n+    private static final String RAILWAY_FILTER_DEFAULT = \"railway->rail,tram,disused,preserved,miniature,light_rail,subway,narrow_gauge\";\n+    private final TaggableFilter railwayFilter;\n+    private static final Long OSM_LAYER_DEFAULT = 0L;\n+    private final Long layerDefault;\n+    private static final String INVALID_TAGGED_OBJECT = \"The object (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"but is not a node. To fix: Remove `railway=level_crossing` tag.\";\n+    private static final int INVALID_TAGGED_OBJECT_INDEX = 0;\n+    private static final String NODE_MISSING_LC_TAG = \"The intersection node (OSM ID: {0,number,#}) is \"\n+            + \"missing a `railway=level_crossing` tag. This means that there are at least one valid railway and one \"\n+            + \"car navigable highway on the same layer at this node. To fix: If the two ways should be on different \"\n+            + \"layers then adjust the layer tags for each way appropriately. If the two ways do intersect on the same \"\n+            + \"layer then add the `railway=level_crossing` tag to this node.\";\n+    private static final int NODE_MISSING_LC_TAG_INDEX = 1;\n+    private static final String NODE_INVALID_LC_TAG_NO_HIGHWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there is no car navigable highway at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_HIGHWAY_INDEX = 2;\n+    private static final String NODE_INVALID_LC_TAG_NO_RAILWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there are no existing rails at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_RAILWAY_INDEX = 3;\n+    private static final String NODE_INVALID_LC_TAG_LAYERS = \"The node (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"tag, but there are no railway and highway intersection on the same layer. \"\n+            + \"To fix: If the railway and highway should be on the same layer then update the layer tags for both ways \"\n+            + \"to be equal. If the ways are on different layers then remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_LAYERS_INDEX = 4;\n+    private static final String INTERSECTION_MISSING_NODE = \"The railway (OSM ID: {0,number,#}) has one or more car \"\n+            + \"navigable intersections on the same layer that are missing intersection nodes. To fix: \"\n+            + \"If highway and railway do cross at the same layer then add appropriate intersection node(s) with \"\n+            + \"`railway=level_crossing` tag. If highway and railway are on different layers then update the \"\n+            + \"appropriate layer tag for the way that goes under or over the other way.\";\n+    private static final int INTERSECTION_MISSING_NODE_INDEX = 5;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(INVALID_TAGGED_OBJECT,\n+            NODE_MISSING_LC_TAG, NODE_INVALID_LC_TAG_NO_HIGHWAY, NODE_INVALID_LC_TAG_NO_RAILWAY,\n+            NODE_INVALID_LC_TAG_LAYERS, INTERSECTION_MISSING_NODE);\n+    private static final List<String> CONSTRUCTION_TAGS = List.of(HighwayTag.KEY, RailwayTag.KEY);\n+    private static final long serialVersionUID = -2063033332877849846L;\n+\n+    /**\n+     * constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public LevelCrossingOnRailwayCheck(final Configuration configuration)\n+    {\n+\n+        super(configuration);\n+        this.layerDefault = this.configurationValue(configuration, \"layer.default\",\n+                OSM_LAYER_DEFAULT);\n+        this.railwayFilter = this.configurationValue(configuration, \"railway.filter\",\n+                RAILWAY_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+    }\n+\n+    /**\n+     * Object check looks for the vaild objects to check for level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        /*-\n+         * The following objects should be checked:\n+         *  1) Any node.\n+         *  2) Any object that is tagged with railway=level_crossing.\n+         *  3) Any object that is tagged as a railway as indicted in railway.filter.\n+         */\n+        return object instanceof Node\n+                || Validators.isOfType(object, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                || this.railwayFilter.test(object);\n+    }\n+\n+    /**\n+     * Create a Return Flags for level_crossing objects.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        /*-\n+         * The following invalid situations are to be flagged:\n+         *  1) object is node and\n+         *     a) is marked as a level crossing but does in not an intersection of highway and railway\n+         *     b) is not tagged as a level crossing and is an intersection of highway and railway.\n+         *  2) object is not a node or point and is tagged with railway=level_crossing.\n+         *  3) object is railway and intersects a highway on the same layer but there is no node.\n+         */\n+\n+        final Optional<CheckFlag> flagIncorrectlyTagged = this.flagIncorrectlyTagged(object);\n+        if (!flagIncorrectlyTagged.isEmpty())\n+        {\n+            return flagIncorrectlyTagged;\n+        }\n+        final Optional<CheckFlag> flagNonNodeTagged = this.flagNonNodeTagged(object);\n+        if (!flagNonNodeTagged.isEmpty())\n+        {\n+            return flagNonNodeTagged;\n+        }\n+        final Optional<CheckFlag> flagInvalidIntersections = this.flagInvalidIntersections(object);\n+        if (!flagInvalidIntersections.isEmpty())\n+        {\n+            return flagInvalidIntersections;\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    /**\n+     * Flag nodes incorrectly tagged with level_crossing or missing level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    private Optional<CheckFlag> flagIncorrectlyTagged(final AtlasObject object)\n+    {\n+        if (object instanceof Node)\n+        {\n+            final Node node = (Node) object;\n+\n+            final int issueType = this.isValidLevelCrossingNode(node);\n+            if (Validators.isOfType(node, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                    && issueType > 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMDI0Nw=="}, "originalCommit": {"oid": "b82641e0bdaba4bb163d601a3ad8eeb8c189fe25"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDM5NjQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoyMTo1MFrOHtFDCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODozNDo1OVrOHtkzbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMDY2Ng==", "bodyText": "just a thought. could the railway tag just have the wrong value, but the feature is still a legitimate \"railway\"? in which case we may want to not send up a fix suggestion", "url": "https://github.com/osmlab/atlas-checks/pull/371#discussion_r517030666", "createdAt": "2020-11-04T00:21:50Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "diffHunk": "@@ -0,0 +1,369 @@\n+package org.openstreetmap.atlas.checks.validation.intersections;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.change.FeatureChange;\n+import org.openstreetmap.atlas.geography.atlas.complete.CompleteEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasItem;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.tags.ConstructionDateTag;\n+import org.openstreetmap.atlas.tags.ConstructionTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+\n+/**\n+ * This check is to detect and flag nodes under the three scenarios below: 1) When a railway crosses\n+ * a highway, but intersection node is missing. 2) When railway/highway intersection node exists,\n+ * but railway=level_crossing tag is missing. 3) When tag railway=level_crossing exists, on a node,\n+ * but is lacking of either highway or railway going through the node (osmose 7090), or not on a\n+ * node, instead, on the related way features (osmose 9015)\n+ *\n+ * @author aiannicelli\n+ */\n+public class LevelCrossingOnRailwayCheck extends BaseCheck<Long>\n+{\n+    private static final String RAILWAY_FILTER_DEFAULT = \"railway->rail,tram,disused,preserved,miniature,light_rail,subway,narrow_gauge\";\n+    private final TaggableFilter railwayFilter;\n+    private static final Long OSM_LAYER_DEFAULT = 0L;\n+    private final Long layerDefault;\n+    private static final String INVALID_TAGGED_OBJECT = \"The object (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"but is not a node. To fix: Remove `railway=level_crossing` tag.\";\n+    private static final int INVALID_TAGGED_OBJECT_INDEX = 0;\n+    private static final String NODE_MISSING_LC_TAG = \"The intersection node (OSM ID: {0,number,#}) is \"\n+            + \"missing a `railway=level_crossing` tag. This means that there are at least one valid railway and one \"\n+            + \"car navigable highway on the same layer at this node. To fix: If the two ways should be on different \"\n+            + \"layers then adjust the layer tags for each way appropriately. If the two ways do intersect on the same \"\n+            + \"layer then add the `railway=level_crossing` tag to this node.\";\n+    private static final int NODE_MISSING_LC_TAG_INDEX = 1;\n+    private static final String NODE_INVALID_LC_TAG_NO_HIGHWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there is no car navigable highway at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_HIGHWAY_INDEX = 2;\n+    private static final String NODE_INVALID_LC_TAG_NO_RAILWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there are no existing rails at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_RAILWAY_INDEX = 3;\n+    private static final String NODE_INVALID_LC_TAG_LAYERS = \"The node (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"tag, but there are no railway and highway intersection on the same layer. \"\n+            + \"To fix: If the railway and highway should be on the same layer then update the layer tags for both ways \"\n+            + \"to be equal. If the ways are on different layers then remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_LAYERS_INDEX = 4;\n+    private static final String INTERSECTION_MISSING_NODE = \"The railway (OSM ID: {0,number,#}) has one or more car \"\n+            + \"navigable intersections on the same layer that are missing intersection nodes. To fix: \"\n+            + \"If highway and railway do cross at the same layer then add appropriate intersection node(s) with \"\n+            + \"`railway=level_crossing` tag. If highway and railway are on different layers then update the \"\n+            + \"appropriate layer tag for the way that goes under or over the other way.\";\n+    private static final int INTERSECTION_MISSING_NODE_INDEX = 5;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(INVALID_TAGGED_OBJECT,\n+            NODE_MISSING_LC_TAG, NODE_INVALID_LC_TAG_NO_HIGHWAY, NODE_INVALID_LC_TAG_NO_RAILWAY,\n+            NODE_INVALID_LC_TAG_LAYERS, INTERSECTION_MISSING_NODE);\n+    private static final List<String> CONSTRUCTION_TAGS = List.of(HighwayTag.KEY, RailwayTag.KEY);\n+    private static final long serialVersionUID = -2063033332877849846L;\n+\n+    /**\n+     * constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public LevelCrossingOnRailwayCheck(final Configuration configuration)\n+    {\n+\n+        super(configuration);\n+        this.layerDefault = this.configurationValue(configuration, \"layer.default\",\n+                OSM_LAYER_DEFAULT);\n+        this.railwayFilter = this.configurationValue(configuration, \"railway.filter\",\n+                RAILWAY_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+    }\n+\n+    /**\n+     * Object check looks for the vaild objects to check for level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        /*-\n+         * The following objects should be checked:\n+         *  1) Any node.\n+         *  2) Any object that is tagged with railway=level_crossing.\n+         *  3) Any object that is tagged as a railway as indicted in railway.filter.\n+         */\n+        return object instanceof Node\n+                || Validators.isOfType(object, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                || this.railwayFilter.test(object);\n+    }\n+\n+    /**\n+     * Create a Return Flags for level_crossing objects.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        /*-\n+         * The following invalid situations are to be flagged:\n+         *  1) object is node and\n+         *     a) is marked as a level crossing but does in not an intersection of highway and railway\n+         *     b) is not tagged as a level crossing and is an intersection of highway and railway.\n+         *  2) object is not a node or point and is tagged with railway=level_crossing.\n+         *  3) object is railway and intersects a highway on the same layer but there is no node.\n+         */\n+\n+        final Optional<CheckFlag> flagIncorrectlyTagged = this.flagIncorrectlyTagged(object);\n+        if (!flagIncorrectlyTagged.isEmpty())\n+        {\n+            return flagIncorrectlyTagged;\n+        }\n+        final Optional<CheckFlag> flagNonNodeTagged = this.flagNonNodeTagged(object);\n+        if (!flagNonNodeTagged.isEmpty())\n+        {\n+            return flagNonNodeTagged;\n+        }\n+        final Optional<CheckFlag> flagInvalidIntersections = this.flagInvalidIntersections(object);\n+        if (!flagInvalidIntersections.isEmpty())\n+        {\n+            return flagInvalidIntersections;\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    /**\n+     * Flag nodes incorrectly tagged with level_crossing or missing level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    private Optional<CheckFlag> flagIncorrectlyTagged(final AtlasObject object)\n+    {\n+        if (object instanceof Node)\n+        {\n+            final Node node = (Node) object;\n+\n+            final int issueType = this.isValidLevelCrossingNode(node);\n+            if (Validators.isOfType(node, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                    && issueType > 0)\n+            {\n+                // This is a node that is tagged with railway=level_crossing and is not a\n+                // railway/highway intersection\n+                return Optional.of(this\n+                        .createFlag(object,\n+                                this.getLocalizedInstruction(issueType, object.getOsmIdentifier()))\n+                        .addFixSuggestion(FeatureChange.add(\n+                                (AtlasEntity) ((CompleteEntity) CompleteEntity\n+                                        .from((AtlasEntity) object)).withRemovedTag(RailwayTag.KEY),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b82641e0bdaba4bb163d601a3ad8eeb8c189fe25"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3NDUxNg==", "bodyText": "In this check the feature is a node, so it is not a rail way. There are valid \"railway\" tags for nodes, but this specific check is determining that the \"level_crossing\" value is not correct. I guess there could be some other valid key value for this node, but I'm not sure how to determine that. Are you saying that you don't want a fix suggestion associated with this flagged issue?", "url": "https://github.com/osmlab/atlas-checks/pull/371#discussion_r517374516", "createdAt": "2020-11-04T14:16:45Z", "author": {"login": "atiannicelli"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "diffHunk": "@@ -0,0 +1,369 @@\n+package org.openstreetmap.atlas.checks.validation.intersections;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.change.FeatureChange;\n+import org.openstreetmap.atlas.geography.atlas.complete.CompleteEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasItem;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.tags.ConstructionDateTag;\n+import org.openstreetmap.atlas.tags.ConstructionTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+\n+/**\n+ * This check is to detect and flag nodes under the three scenarios below: 1) When a railway crosses\n+ * a highway, but intersection node is missing. 2) When railway/highway intersection node exists,\n+ * but railway=level_crossing tag is missing. 3) When tag railway=level_crossing exists, on a node,\n+ * but is lacking of either highway or railway going through the node (osmose 7090), or not on a\n+ * node, instead, on the related way features (osmose 9015)\n+ *\n+ * @author aiannicelli\n+ */\n+public class LevelCrossingOnRailwayCheck extends BaseCheck<Long>\n+{\n+    private static final String RAILWAY_FILTER_DEFAULT = \"railway->rail,tram,disused,preserved,miniature,light_rail,subway,narrow_gauge\";\n+    private final TaggableFilter railwayFilter;\n+    private static final Long OSM_LAYER_DEFAULT = 0L;\n+    private final Long layerDefault;\n+    private static final String INVALID_TAGGED_OBJECT = \"The object (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"but is not a node. To fix: Remove `railway=level_crossing` tag.\";\n+    private static final int INVALID_TAGGED_OBJECT_INDEX = 0;\n+    private static final String NODE_MISSING_LC_TAG = \"The intersection node (OSM ID: {0,number,#}) is \"\n+            + \"missing a `railway=level_crossing` tag. This means that there are at least one valid railway and one \"\n+            + \"car navigable highway on the same layer at this node. To fix: If the two ways should be on different \"\n+            + \"layers then adjust the layer tags for each way appropriately. If the two ways do intersect on the same \"\n+            + \"layer then add the `railway=level_crossing` tag to this node.\";\n+    private static final int NODE_MISSING_LC_TAG_INDEX = 1;\n+    private static final String NODE_INVALID_LC_TAG_NO_HIGHWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there is no car navigable highway at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_HIGHWAY_INDEX = 2;\n+    private static final String NODE_INVALID_LC_TAG_NO_RAILWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there are no existing rails at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_RAILWAY_INDEX = 3;\n+    private static final String NODE_INVALID_LC_TAG_LAYERS = \"The node (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"tag, but there are no railway and highway intersection on the same layer. \"\n+            + \"To fix: If the railway and highway should be on the same layer then update the layer tags for both ways \"\n+            + \"to be equal. If the ways are on different layers then remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_LAYERS_INDEX = 4;\n+    private static final String INTERSECTION_MISSING_NODE = \"The railway (OSM ID: {0,number,#}) has one or more car \"\n+            + \"navigable intersections on the same layer that are missing intersection nodes. To fix: \"\n+            + \"If highway and railway do cross at the same layer then add appropriate intersection node(s) with \"\n+            + \"`railway=level_crossing` tag. If highway and railway are on different layers then update the \"\n+            + \"appropriate layer tag for the way that goes under or over the other way.\";\n+    private static final int INTERSECTION_MISSING_NODE_INDEX = 5;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(INVALID_TAGGED_OBJECT,\n+            NODE_MISSING_LC_TAG, NODE_INVALID_LC_TAG_NO_HIGHWAY, NODE_INVALID_LC_TAG_NO_RAILWAY,\n+            NODE_INVALID_LC_TAG_LAYERS, INTERSECTION_MISSING_NODE);\n+    private static final List<String> CONSTRUCTION_TAGS = List.of(HighwayTag.KEY, RailwayTag.KEY);\n+    private static final long serialVersionUID = -2063033332877849846L;\n+\n+    /**\n+     * constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public LevelCrossingOnRailwayCheck(final Configuration configuration)\n+    {\n+\n+        super(configuration);\n+        this.layerDefault = this.configurationValue(configuration, \"layer.default\",\n+                OSM_LAYER_DEFAULT);\n+        this.railwayFilter = this.configurationValue(configuration, \"railway.filter\",\n+                RAILWAY_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+    }\n+\n+    /**\n+     * Object check looks for the vaild objects to check for level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        /*-\n+         * The following objects should be checked:\n+         *  1) Any node.\n+         *  2) Any object that is tagged with railway=level_crossing.\n+         *  3) Any object that is tagged as a railway as indicted in railway.filter.\n+         */\n+        return object instanceof Node\n+                || Validators.isOfType(object, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                || this.railwayFilter.test(object);\n+    }\n+\n+    /**\n+     * Create a Return Flags for level_crossing objects.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        /*-\n+         * The following invalid situations are to be flagged:\n+         *  1) object is node and\n+         *     a) is marked as a level crossing but does in not an intersection of highway and railway\n+         *     b) is not tagged as a level crossing and is an intersection of highway and railway.\n+         *  2) object is not a node or point and is tagged with railway=level_crossing.\n+         *  3) object is railway and intersects a highway on the same layer but there is no node.\n+         */\n+\n+        final Optional<CheckFlag> flagIncorrectlyTagged = this.flagIncorrectlyTagged(object);\n+        if (!flagIncorrectlyTagged.isEmpty())\n+        {\n+            return flagIncorrectlyTagged;\n+        }\n+        final Optional<CheckFlag> flagNonNodeTagged = this.flagNonNodeTagged(object);\n+        if (!flagNonNodeTagged.isEmpty())\n+        {\n+            return flagNonNodeTagged;\n+        }\n+        final Optional<CheckFlag> flagInvalidIntersections = this.flagInvalidIntersections(object);\n+        if (!flagInvalidIntersections.isEmpty())\n+        {\n+            return flagInvalidIntersections;\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    /**\n+     * Flag nodes incorrectly tagged with level_crossing or missing level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    private Optional<CheckFlag> flagIncorrectlyTagged(final AtlasObject object)\n+    {\n+        if (object instanceof Node)\n+        {\n+            final Node node = (Node) object;\n+\n+            final int issueType = this.isValidLevelCrossingNode(node);\n+            if (Validators.isOfType(node, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                    && issueType > 0)\n+            {\n+                // This is a node that is tagged with railway=level_crossing and is not a\n+                // railway/highway intersection\n+                return Optional.of(this\n+                        .createFlag(object,\n+                                this.getLocalizedInstruction(issueType, object.getOsmIdentifier()))\n+                        .addFixSuggestion(FeatureChange.add(\n+                                (AtlasEntity) ((CompleteEntity) CompleteEntity\n+                                        .from((AtlasEntity) object)).withRemovedTag(RailwayTag.KEY),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMDY2Ng=="}, "originalCommit": {"oid": "b82641e0bdaba4bb163d601a3ad8eeb8c189fe25"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1MDk1OQ==", "bodyText": "Yeah after thinking about this for a bit we could still send up the fix suggestion. My only concern was that the editor might want to change the Railway tag value to something more appropriate if applicable, instead of deleting the tag,  but they have the ability to do that by just not applying the fix suggestion", "url": "https://github.com/osmlab/atlas-checks/pull/371#discussion_r517550959", "createdAt": "2020-11-04T18:34:59Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LevelCrossingOnRailwayCheck.java", "diffHunk": "@@ -0,0 +1,369 @@\n+package org.openstreetmap.atlas.checks.validation.intersections;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.Location;\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.geography.atlas.change.FeatureChange;\n+import org.openstreetmap.atlas.geography.atlas.complete.CompleteEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasEntity;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasItem;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.geography.atlas.items.Line;\n+import org.openstreetmap.atlas.geography.atlas.items.LocationItem;\n+import org.openstreetmap.atlas.geography.atlas.items.Node;\n+import org.openstreetmap.atlas.tags.ConstructionDateTag;\n+import org.openstreetmap.atlas.tags.ConstructionTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.LayerTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.tags.filters.TaggableFilter;\n+import org.openstreetmap.atlas.utilities.collections.Iterables;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+\n+/**\n+ * This check is to detect and flag nodes under the three scenarios below: 1) When a railway crosses\n+ * a highway, but intersection node is missing. 2) When railway/highway intersection node exists,\n+ * but railway=level_crossing tag is missing. 3) When tag railway=level_crossing exists, on a node,\n+ * but is lacking of either highway or railway going through the node (osmose 7090), or not on a\n+ * node, instead, on the related way features (osmose 9015)\n+ *\n+ * @author aiannicelli\n+ */\n+public class LevelCrossingOnRailwayCheck extends BaseCheck<Long>\n+{\n+    private static final String RAILWAY_FILTER_DEFAULT = \"railway->rail,tram,disused,preserved,miniature,light_rail,subway,narrow_gauge\";\n+    private final TaggableFilter railwayFilter;\n+    private static final Long OSM_LAYER_DEFAULT = 0L;\n+    private final Long layerDefault;\n+    private static final String INVALID_TAGGED_OBJECT = \"The object (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"but is not a node. To fix: Remove `railway=level_crossing` tag.\";\n+    private static final int INVALID_TAGGED_OBJECT_INDEX = 0;\n+    private static final String NODE_MISSING_LC_TAG = \"The intersection node (OSM ID: {0,number,#}) is \"\n+            + \"missing a `railway=level_crossing` tag. This means that there are at least one valid railway and one \"\n+            + \"car navigable highway on the same layer at this node. To fix: If the two ways should be on different \"\n+            + \"layers then adjust the layer tags for each way appropriately. If the two ways do intersect on the same \"\n+            + \"layer then add the `railway=level_crossing` tag to this node.\";\n+    private static final int NODE_MISSING_LC_TAG_INDEX = 1;\n+    private static final String NODE_INVALID_LC_TAG_NO_HIGHWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there is no car navigable highway at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_HIGHWAY_INDEX = 2;\n+    private static final String NODE_INVALID_LC_TAG_NO_RAILWAY = \"The node (OSM ID: {0,number,#}) has \"\n+            + \"`railway=level_crossing` tag, but there are no existing rails at this intersection. \"\n+            + \"To fix: Remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_NO_RAILWAY_INDEX = 3;\n+    private static final String NODE_INVALID_LC_TAG_LAYERS = \"The node (OSM ID: {0,number,#}) has `railway=level_crossing` \"\n+            + \"tag, but there are no railway and highway intersection on the same layer. \"\n+            + \"To fix: If the railway and highway should be on the same layer then update the layer tags for both ways \"\n+            + \"to be equal. If the ways are on different layers then remove railway=level_crossing tag.\";\n+    private static final int NODE_INVALID_LC_TAG_LAYERS_INDEX = 4;\n+    private static final String INTERSECTION_MISSING_NODE = \"The railway (OSM ID: {0,number,#}) has one or more car \"\n+            + \"navigable intersections on the same layer that are missing intersection nodes. To fix: \"\n+            + \"If highway and railway do cross at the same layer then add appropriate intersection node(s) with \"\n+            + \"`railway=level_crossing` tag. If highway and railway are on different layers then update the \"\n+            + \"appropriate layer tag for the way that goes under or over the other way.\";\n+    private static final int INTERSECTION_MISSING_NODE_INDEX = 5;\n+\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(INVALID_TAGGED_OBJECT,\n+            NODE_MISSING_LC_TAG, NODE_INVALID_LC_TAG_NO_HIGHWAY, NODE_INVALID_LC_TAG_NO_RAILWAY,\n+            NODE_INVALID_LC_TAG_LAYERS, INTERSECTION_MISSING_NODE);\n+    private static final List<String> CONSTRUCTION_TAGS = List.of(HighwayTag.KEY, RailwayTag.KEY);\n+    private static final long serialVersionUID = -2063033332877849846L;\n+\n+    /**\n+     * constructor\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public LevelCrossingOnRailwayCheck(final Configuration configuration)\n+    {\n+\n+        super(configuration);\n+        this.layerDefault = this.configurationValue(configuration, \"layer.default\",\n+                OSM_LAYER_DEFAULT);\n+        this.railwayFilter = this.configurationValue(configuration, \"railway.filter\",\n+                RAILWAY_FILTER_DEFAULT, TaggableFilter::forDefinition);\n+    }\n+\n+    /**\n+     * Object check looks for the vaild objects to check for level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        /*-\n+         * The following objects should be checked:\n+         *  1) Any node.\n+         *  2) Any object that is tagged with railway=level_crossing.\n+         *  3) Any object that is tagged as a railway as indicted in railway.filter.\n+         */\n+        return object instanceof Node\n+                || Validators.isOfType(object, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                || this.railwayFilter.test(object);\n+    }\n+\n+    /**\n+     * Create a Return Flags for level_crossing objects.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        /*-\n+         * The following invalid situations are to be flagged:\n+         *  1) object is node and\n+         *     a) is marked as a level crossing but does in not an intersection of highway and railway\n+         *     b) is not tagged as a level crossing and is an intersection of highway and railway.\n+         *  2) object is not a node or point and is tagged with railway=level_crossing.\n+         *  3) object is railway and intersects a highway on the same layer but there is no node.\n+         */\n+\n+        final Optional<CheckFlag> flagIncorrectlyTagged = this.flagIncorrectlyTagged(object);\n+        if (!flagIncorrectlyTagged.isEmpty())\n+        {\n+            return flagIncorrectlyTagged;\n+        }\n+        final Optional<CheckFlag> flagNonNodeTagged = this.flagNonNodeTagged(object);\n+        if (!flagNonNodeTagged.isEmpty())\n+        {\n+            return flagNonNodeTagged;\n+        }\n+        final Optional<CheckFlag> flagInvalidIntersections = this.flagInvalidIntersections(object);\n+        if (!flagInvalidIntersections.isEmpty())\n+        {\n+            return flagInvalidIntersections;\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    /**\n+     * Flag nodes incorrectly tagged with level_crossing or missing level_crossing tag.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that contains flagged issue details\n+     */\n+    private Optional<CheckFlag> flagIncorrectlyTagged(final AtlasObject object)\n+    {\n+        if (object instanceof Node)\n+        {\n+            final Node node = (Node) object;\n+\n+            final int issueType = this.isValidLevelCrossingNode(node);\n+            if (Validators.isOfType(node, RailwayTag.class, RailwayTag.LEVEL_CROSSING)\n+                    && issueType > 0)\n+            {\n+                // This is a node that is tagged with railway=level_crossing and is not a\n+                // railway/highway intersection\n+                return Optional.of(this\n+                        .createFlag(object,\n+                                this.getLocalizedInstruction(issueType, object.getOsmIdentifier()))\n+                        .addFixSuggestion(FeatureChange.add(\n+                                (AtlasEntity) ((CompleteEntity) CompleteEntity\n+                                        .from((AtlasEntity) object)).withRemovedTag(RailwayTag.KEY),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMDY2Ng=="}, "originalCommit": {"oid": "b82641e0bdaba4bb163d601a3ad8eeb8c189fe25"}, "originalPosition": 187}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3179, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}