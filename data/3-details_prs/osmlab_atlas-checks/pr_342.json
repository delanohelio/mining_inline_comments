{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MzA2NjYz", "number": 342, "title": "New check: Missing bridge structure (#341)", "bodyText": "Description:\nPort of Osmose check #7012. Flags long bridges without detailed info (bridge type/structure).\nIssue #341\nPotential Impact:\nNone.\nUnit Test Approach:\nUnit tests created for two positive scenarios (railway and major-highway bridges that meet all preconditions) and several negative scenarios (when some of the preconditions or check criteria are not met). Tests use local mini-atlases with artificial data.\nTest Results:\n\n\n\nISO\nTotal Flags\nSampled\nSampling %\nTP\nFP\nFalse Positive Rate\n\n\n\n\nNZL\n24\n24\n100%\n24\n0\n0%\n\n\nARG\n62\n20\n33%\n20\n0\n0%\n\n\nBOL\n3\n3\n100%\n3\n0\n0%\n\n\nCOL\n17\n17\n100%\n17\n0\n0%\n\n\nDMA\n0\n0\n100%\n0\n0\n0%\n\n\nCYM\n0\n0\n100%\n0\n0\n0%\n\n\nTUR\n258\n52\n20%\n52\n0\n0%", "createdAt": "2020-08-18T08:50:47Z", "url": "https://github.com/osmlab/atlas-checks/pull/342", "merged": true, "mergeCommit": {"oid": "f9afd01620c4a33d097f153dcd346a88de676faf"}, "closed": true, "closedAt": "2020-08-25T23:26:55Z", "author": {"login": "ladwlo"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAFFArABqjM2NjU4MzA5MjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCfLc9gFqTQ3NTAxOTQyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4cc64b1eb55cbd4efb04a105aef91eabbbd17fd", "author": {"user": {"login": "ladwlo", "name": "\u0141adys\u0142aw W\u0142odarski"}}, "url": "https://github.com/osmlab/atlas-checks/commit/b4cc64b1eb55cbd4efb04a105aef91eabbbd17fd", "committedDate": "2020-08-18T10:37:26Z", "message": "Making Sonar happy"}, "afterCommit": {"oid": "6ec52e367e73e015ee6c02cc895afe7724ab7a57", "author": {"user": {"login": "ladwlo", "name": "\u0141adys\u0142aw W\u0142odarski"}}, "url": "https://github.com/osmlab/atlas-checks/commit/6ec52e367e73e015ee6c02cc895afe7724ab7a57", "committedDate": "2020-08-18T11:12:06Z", "message": "Making Sonar happy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97b1d67f8bd444bd2794b7134c83085825c1cef8", "author": {"user": {"login": "ladwlo", "name": "\u0141adys\u0142aw W\u0142odarski"}}, "url": "https://github.com/osmlab/atlas-checks/commit/97b1d67f8bd444bd2794b7134c83085825c1cef8", "committedDate": "2020-08-18T12:28:31Z", "message": "New check: Missing bridge structure (#341)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2137a2188c9f661ab444e9c45a06c974cc962835", "author": {"user": {"login": "ladwlo", "name": "\u0141adys\u0142aw W\u0142odarski"}}, "url": "https://github.com/osmlab/atlas-checks/commit/2137a2188c9f661ab444e9c45a06c974cc962835", "committedDate": "2020-08-18T12:18:19Z", "message": "Formatting"}, "afterCommit": {"oid": "97b1d67f8bd444bd2794b7134c83085825c1cef8", "author": {"user": {"login": "ladwlo", "name": "\u0141adys\u0142aw W\u0142odarski"}}, "url": "https://github.com/osmlab/atlas-checks/commit/97b1d67f8bd444bd2794b7134c83085825c1cef8", "committedDate": "2020-08-18T12:28:31Z", "message": "New check: Missing bridge structure (#341)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b02cf1c0d72c14e09512d616377c8e0513db69b", "author": {"user": {"login": "ladwlo", "name": "\u0141adys\u0142aw W\u0142odarski"}}, "url": "https://github.com/osmlab/atlas-checks/commit/8b02cf1c0d72c14e09512d616377c8e0513db69b", "committedDate": "2020-08-19T09:48:10Z", "message": "No duplicate flagging of bidirectional Ways"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18f541dfd96dda5b189ea244b71dcee2dd02f5ab", "author": {"user": {"login": "ladwlo", "name": "\u0141adys\u0142aw W\u0142odarski"}}, "url": "https://github.com/osmlab/atlas-checks/commit/18f541dfd96dda5b189ea244b71dcee2dd02f5ab", "committedDate": "2020-08-19T09:51:32Z", "message": "Replacing Atlas ID in the violation info with OSM ID"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bff8038d5957264cd3dd0d0a98d3fc91073d416", "author": {"user": {"login": "ladwlo", "name": "\u0141adys\u0142aw W\u0142odarski"}}, "url": "https://github.com/osmlab/atlas-checks/commit/2bff8038d5957264cd3dd0d0a98d3fc91073d416", "committedDate": "2020-08-19T09:54:17Z", "message": "Updating documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwOTkyMTQy", "url": "https://github.com/osmlab/atlas-checks/pull/342#pullrequestreview-470992142", "createdAt": "2020-08-19T21:54:28Z", "commit": {"oid": "2bff8038d5957264cd3dd0d0a98d3fc91073d416"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo1NDoyOFrOHDbrnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjowNjoyMVrOHDcQKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM2MTMwOQ==", "bodyText": "Could you please add a MapRoulette challenge object (lots of examples throughout the configuration).", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r473361309", "createdAt": "2020-08-19T21:54:28Z", "author": {"login": "Bentleysb"}, "path": "config/configuration.json", "diffHunk": "@@ -1057,5 +1057,8 @@\n       \"difficulty\": \"EASY\",\n       \"defaultPriority\": \"MEDIUM\"\n     }\n+  },\n+  \"BridgeDetailedInfoCheck\": {\n+    \"bridge.length.minimum.meters\": 500.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff8038d5957264cd3dd0d0a98d3fc91073d416"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM2ODc3MQ==", "bodyText": "This could be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Optional<String> bridgeTag = object.getTag(BRIDGE_TAG);\n          \n          \n            \n                    return bridgeTag.isPresent() && \"yes\".equals(bridgeTag.get());\n          \n          \n            \n                    return Validators.isOfType(object, BridgeTag.class, BridgeTag.YES);", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r473368771", "createdAt": "2020-08-19T22:03:50Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String RAILWAY_TAG = \"railway\";\n+    public static final String BRIDGE_TAG = \"bridge\";\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeStructureTag = object.getTag(BRIDGE_STRUCTURE_TAG);\n+        if (((Edge) object).length().isGreaterThan(this.minimumLength)\n+                && !bridgeStructureTag.isPresent())\n+        {\n+            return Optional\n+                    .of(createFlag(object, getLocalizedInstruction(0, object.getOsmIdentifier())));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private boolean isGenericBridge(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeTag = object.getTag(BRIDGE_TAG);\n+        return bridgeTag.isPresent() && \"yes\".equals(bridgeTag.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff8038d5957264cd3dd0d0a98d3fc91073d416"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3MDY2NA==", "bodyText": "This could be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return object.getTag(RAILWAY_TAG).isPresent();\n          \n          \n            \n                    return Validators.hasValuesFor(object, RailwayTag.class);", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r473370664", "createdAt": "2020-08-19T22:06:21Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String RAILWAY_TAG = \"railway\";\n+    public static final String BRIDGE_TAG = \"bridge\";\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeStructureTag = object.getTag(BRIDGE_STRUCTURE_TAG);\n+        if (((Edge) object).length().isGreaterThan(this.minimumLength)\n+                && !bridgeStructureTag.isPresent())\n+        {\n+            return Optional\n+                    .of(createFlag(object, getLocalizedInstruction(0, object.getOsmIdentifier())));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private boolean isGenericBridge(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeTag = object.getTag(BRIDGE_TAG);\n+        return bridgeTag.isPresent() && \"yes\".equals(bridgeTag.get());\n+    }\n+\n+    private boolean isMajorHighway(final AtlasObject object)\n+    {\n+        return MAJOR_HIGHWAYS.contains(((Edge) object).highwayTag());\n+    }\n+\n+    private boolean isRailway(final AtlasObject object)\n+    {\n+        return object.getTag(RAILWAY_TAG).isPresent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff8038d5957264cd3dd0d0a98d3fc91073d416"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef", "author": {"user": {"login": "ladwlo", "name": "\u0141adys\u0142aw W\u0142odarski"}}, "url": "https://github.com/osmlab/atlas-checks/commit/80b9402ec3b0baaedd215623c4140755f9f8b1ef", "committedDate": "2020-08-20T07:47:47Z", "message": "Adding MapRoulette challenge; minor refactoring to accommodate code review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNzEzNjY3", "url": "https://github.com/osmlab/atlas-checks/pull/342#pullrequestreview-471713667", "createdAt": "2020-08-20T15:10:38Z", "commit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxMDozOFrOHEGN_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozNToyMFrOHEHXkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1ODIzOQ==", "bodyText": "Please revert this change.", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474058239", "createdAt": "2020-08-20T15:10:38Z", "author": {"login": "sayas01"}, "path": "config/configuration.json", "diffHunk": "@@ -4,7 +4,7 @@\n       \"org.openstreetmap.atlas.checks.validation\"\n     ],\n     \"type\": \"org.openstreetmap.atlas.checks.base.BaseCheck\",\n-    \"enabled.value.default\": true\n+    \"enabled.value.default\": false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2NjAwNQ==", "bodyText": "nit: Since there is only a single instruction, you can use Collections.singletonList instead of Arrays.asList.", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474066005", "createdAt": "2020-08-20T15:21:55Z", "author": {"login": "sayas01"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.BridgeTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2OTg4NQ==", "bodyText": "Looks like the RailwayTag class already has a public method isRailway which could be leveraged here like: RailwayTag.isRailway()", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474069885", "createdAt": "2020-08-20T15:27:44Z", "author": {"login": "sayas01"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.BridgeTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NDE4Mw==", "bodyText": "One other way to check this would be to use Validators class. Predicate can be declared as a constant at the top like:\nprivate static final Predicate<AtlasObject> MAJOR_HIGHWAYS = object -> Validators.isOfType( object, Highway.class, HighwayTag.MOTORWAY, HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY)", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474074183", "createdAt": "2020-08-20T15:32:38Z", "author": {"login": "sayas01"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.BridgeTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeStructureTag = object.getTag(BRIDGE_STRUCTURE_TAG);\n+        if (((Edge) object).length().isGreaterThan(this.minimumLength)\n+                && !bridgeStructureTag.isPresent())\n+        {\n+            return Optional\n+                    .of(createFlag(object, getLocalizedInstruction(0, object.getOsmIdentifier())));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private boolean isGenericBridge(final AtlasObject object)\n+    {\n+        return Validators.isOfType(object, BridgeTag.class, BridgeTag.YES);\n+    }\n+\n+    private boolean isMajorHighway(final AtlasObject object)\n+    {\n+        return MAJOR_HIGHWAYS.contains(((Edge) object).highwayTag());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NTk2Mw==", "bodyText": "nit: Could clean this class up by static importing TestAtlas.*.", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474075963", "createdAt": "2020-08-20T15:34:21Z", "author": {"login": "sayas01"}, "path": "src/test/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheckTestRule.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.utilities.testing.CoreTestRule;\n+import org.openstreetmap.atlas.utilities.testing.TestAtlas;\n+\n+/**\n+ * Test atlases for {@link BridgeDetailedInfoCheckTest}\n+ *\n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheckTestRule extends CoreTestRule\n+{\n+\n+    // short bridge\n+    private static final String LOC_1 = \"47.222,-122.444\";\n+    private static final String LOC_2 = \"47.225,-122.441\";\n+    // long bridge\n+    private static final String LOC_3 = \"47.111,-122.666\";\n+    private static final String LOC_4 = \"47.115,-122.661\";\n+\n+    @TestAtlas(\n+            // nodes\n+            nodes = { @TestAtlas.Node(coordinates = @TestAtlas.Loc(value = LOC_3)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NjcwNw==", "bodyText": "Love the extensive unit testing!! \ud83d\udcaf", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474076707", "createdAt": "2020-08-20T15:35:03Z", "author": {"login": "sayas01"}, "path": "src/test/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheckTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.openstreetmap.atlas.checks.configuration.ConfigurationResolver;\n+import org.openstreetmap.atlas.checks.validation.verifier.ConsumerBasedExpectedCheckVerifier;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+\n+/**\n+ * Tests for {@link BridgeDetailedInfoCheck}\n+ *\n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheckTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NzA3Mw==", "bodyText": "Nice documentation!", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474077073", "createdAt": "2020-08-20T15:35:20Z", "author": {"login": "sayas01"}, "path": "docs/checks/bridgeDetailedInfoCheck.md", "diffHunk": "@@ -0,0 +1,25 @@\n+# Bridge Detailed Info Check", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNzQ2MTY2", "url": "https://github.com/osmlab/atlas-checks/pull/342#pullrequestreview-471746166", "createdAt": "2020-08-20T15:41:09Z", "commit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo0MToxMFrOHEHuHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo0MToxMFrOHEHuHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4Mjg0Ng==", "bodyText": "Could use bridgeStructureTag.isEmpty() instead.", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474082846", "createdAt": "2020-08-20T15:41:10Z", "author": {"login": "sayas01"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.BridgeTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeStructureTag = object.getTag(BRIDGE_STRUCTURE_TAG);\n+        if (((Edge) object).length().isGreaterThan(this.minimumLength)\n+                && !bridgeStructureTag.isPresent())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01919b2ee27252c28512a4af201b1a6c2270da1f", "author": {"user": {"login": "ladwlo", "name": "\u0141adys\u0142aw W\u0142odarski"}}, "url": "https://github.com/osmlab/atlas-checks/commit/01919b2ee27252c28512a4af201b1a6c2270da1f", "committedDate": "2020-08-20T16:39:51Z", "message": "More refactoring after code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3aa08c376e1f57d56d541bc608e9f52e09da68c", "author": {"user": {"login": "ladwlo", "name": "\u0141adys\u0142aw W\u0142odarski"}}, "url": "https://github.com/osmlab/atlas-checks/commit/e3aa08c376e1f57d56d541bc608e9f52e09da68c", "committedDate": "2020-08-20T16:40:17Z", "message": "Reverting accidentally changed 'enabled' flags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d386245f963d5257dcc8f896af60be797880b31", "author": {"user": {"login": "ladwlo", "name": "\u0141adys\u0142aw W\u0142odarski"}}, "url": "https://github.com/osmlab/atlas-checks/commit/4d386245f963d5257dcc8f896af60be797880b31", "committedDate": "2020-08-20T16:53:12Z", "message": "Fixing one more checkstyle problem"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzI4MTU0", "url": "https://github.com/osmlab/atlas-checks/pull/342#pullrequestreview-473728154", "createdAt": "2020-08-24T17:53:01Z", "commit": {"oid": "4d386245f963d5257dcc8f896af60be797880b31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NjI3NzMz", "url": "https://github.com/osmlab/atlas-checks/pull/342#pullrequestreview-474627733", "createdAt": "2020-08-25T16:00:45Z", "commit": {"oid": "4d386245f963d5257dcc8f896af60be797880b31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MDE5NDIx", "url": "https://github.com/osmlab/atlas-checks/pull/342#pullrequestreview-475019421", "createdAt": "2020-08-25T22:44:39Z", "commit": {"oid": "4d386245f963d5257dcc8f896af60be797880b31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3156, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}