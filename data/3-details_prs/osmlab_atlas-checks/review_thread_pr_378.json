{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2Njg2Nzgy", "number": 378, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoxODoyMFrOEquXZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzo0OToyMlrOEq9b6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjM1MzAyOnYy", "diffSide": "RIGHT", "path": "docs/maproulette_upload.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoxODoyMFrOHdF8Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoxODoyMFrOHdF8Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2ODA1OQ==", "bodyText": "This parameter should be optional.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * **checkinCommentPrefix** - Prefix added to default check in comment of [prefix ISO - CheckName]\n          \n          \n            \n            * **checkinCommentPrefix** (optional) - Prefix added to default check in comment of [prefix ISO - CheckName]", "url": "https://github.com/osmlab/atlas-checks/pull/378#discussion_r500268059", "createdAt": "2020-10-06T13:18:20Z", "author": {"login": "atiannicelli"}, "path": "docs/maproulette_upload.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# MapRoulette Upload Command\n+\n+The [MapRouletteUploadCommand](/src/main/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommand.java) deserilizes line-delimited Atlas Check flags, and uploads them to the provided MapRoulette server.\n+\n+The command creates a new Challenge for each Atlas Check and country in the input data. For example: the following Challenges are created if the input data contains flags for EdgeCrossingEdgeCheck and SinkIslandCheck in USA and CAN:\n+\n+1. CAN - EdgeCrossingEdgeCheck\n+2. CAN - SinkIslandCheck\n+2. USA - EdgeCrossingEdgeCheck\n+3. USA - SinkIslandCheck\n+\n+Each Challenge is added to the project provided in the MapRoulette connection url.\n+\n+## Parameters\n+\n+* **maproulette** - MapRoulette connection url\n+* **logfiles** - Path to `/flag` output geojson\n+* **config** - Path to Atlas Checks configuration\n+* **countries** (optional) - Comma delimited list of country permit list\n+* **checks** (optional) - Comma delimted list of checks permit list\n+* **outputPath** (optional) - Path to store text file of new challenge ids\n+* **checkinComment** (optional) - Value of Changeset check in comment\n+* **checkinCommentPrefix** - Prefix added to default check in comment of [prefix ISO - CheckName]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7f72ee9e3054d9c4fd9f80c37e0dd2a065549a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjU5NjY5OnYy", "diffSide": "RIGHT", "path": "docs/maproulette_upload.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowMToxMFrOHdISXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowMToxMFrOHdISXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwNjUyNQ==", "bodyText": "I don't think you want \"staging\" in there. I had to remove it to make it work for me.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            -maproulette=\"https://staging.maproulette.org:443:checks_example_project:api|key\" \\\n          \n          \n            \n            -maproulette=\"https://maproulette.org:443:checks_example_project:api|key\" \\", "url": "https://github.com/osmlab/atlas-checks/pull/378#discussion_r500306525", "createdAt": "2020-10-06T14:01:10Z", "author": {"login": "atiannicelli"}, "path": "docs/maproulette_upload.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# MapRoulette Upload Command\n+\n+The [MapRouletteUploadCommand](/src/main/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommand.java) deserilizes line-delimited Atlas Check flags, and uploads them to the provided MapRoulette server.\n+\n+The command creates a new Challenge for each Atlas Check and country in the input data. For example: the following Challenges are created if the input data contains flags for EdgeCrossingEdgeCheck and SinkIslandCheck in USA and CAN:\n+\n+1. CAN - EdgeCrossingEdgeCheck\n+2. CAN - SinkIslandCheck\n+2. USA - EdgeCrossingEdgeCheck\n+3. USA - SinkIslandCheck\n+\n+Each Challenge is added to the project provided in the MapRoulette connection url.\n+\n+## Parameters\n+\n+* **maproulette** - MapRoulette connection url\n+* **logfiles** - Path to `/flag` output geojson\n+* **config** - Path to Atlas Checks configuration\n+* **countries** (optional) - Comma delimited list of country permit list\n+* **checks** (optional) - Comma delimted list of checks permit list\n+* **outputPath** (optional) - Path to store text file of new challenge ids\n+* **checkinComment** (optional) - Value of Changeset check in comment\n+* **checkinCommentPrefix** - Prefix added to default check in comment of [prefix ISO - CheckName]\n+\n+## Example\n+\n+The following command will upload EdgeCrossingEdge & SinkIsland checks to the `checks_example_project` Project on staging.maproulette.org. \n+Please remember to change the MapRoulette API key. You can find this in your MapRoulette user settings.\n+\n+```java\n+java -cp build/libs/atlas-checks-6.1.3-SNAPSHOT-shaded.jar org.openstreetmap.atlas.checks.maproulette.MapRouletteUploadCommand \\\n+-maproulette=\"https://staging.maproulette.org:443:checks_example_project:api|key\" \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7f72ee9e3054d9c4fd9f80c37e0dd2a065549a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjYyOTc4OnYy", "diffSide": "RIGHT", "path": "docs/maproulette_upload.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNjozOFrOHdIm7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNjozOFrOHdIm7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMTc5MQ==", "bodyText": "Not to be picky, but I think this creates \"Canada - EdgeCrossingEdgeCheck\"\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. CAN - EdgeCrossingEdgeCheck\n          \n          \n            \n            1. Canada - EdgeCrossingEdgeCheck", "url": "https://github.com/osmlab/atlas-checks/pull/378#discussion_r500311791", "createdAt": "2020-10-06T14:06:38Z", "author": {"login": "atiannicelli"}, "path": "docs/maproulette_upload.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# MapRoulette Upload Command\n+\n+The [MapRouletteUploadCommand](/src/main/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommand.java) deserilizes line-delimited Atlas Check flags, and uploads them to the provided MapRoulette server.\n+\n+The command creates a new Challenge for each Atlas Check and country in the input data. For example: the following Challenges are created if the input data contains flags for EdgeCrossingEdgeCheck and SinkIslandCheck in USA and CAN:\n+\n+1. CAN - EdgeCrossingEdgeCheck", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7f72ee9e3054d9c4fd9f80c37e0dd2a065549a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjYzMDY1OnYy", "diffSide": "RIGHT", "path": "docs/maproulette_upload.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNjo0OVrOHdInfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNjo0OVrOHdInfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMTkzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. CAN - SinkIslandCheck\n          \n          \n            \n            2. Canada - SinkIslandCheck", "url": "https://github.com/osmlab/atlas-checks/pull/378#discussion_r500311935", "createdAt": "2020-10-06T14:06:49Z", "author": {"login": "atiannicelli"}, "path": "docs/maproulette_upload.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# MapRoulette Upload Command\n+\n+The [MapRouletteUploadCommand](/src/main/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommand.java) deserilizes line-delimited Atlas Check flags, and uploads them to the provided MapRoulette server.\n+\n+The command creates a new Challenge for each Atlas Check and country in the input data. For example: the following Challenges are created if the input data contains flags for EdgeCrossingEdgeCheck and SinkIslandCheck in USA and CAN:\n+\n+1. CAN - EdgeCrossingEdgeCheck\n+2. CAN - SinkIslandCheck", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7f72ee9e3054d9c4fd9f80c37e0dd2a065549a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjYzMTk2OnYy", "diffSide": "RIGHT", "path": "docs/maproulette_upload.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNzowMlrOHdIoSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNzowMlrOHdIoSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMjEzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. USA - EdgeCrossingEdgeCheck\n          \n          \n            \n            2. United States - EdgeCrossingEdgeCheck", "url": "https://github.com/osmlab/atlas-checks/pull/378#discussion_r500312138", "createdAt": "2020-10-06T14:07:02Z", "author": {"login": "atiannicelli"}, "path": "docs/maproulette_upload.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# MapRoulette Upload Command\n+\n+The [MapRouletteUploadCommand](/src/main/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommand.java) deserilizes line-delimited Atlas Check flags, and uploads them to the provided MapRoulette server.\n+\n+The command creates a new Challenge for each Atlas Check and country in the input data. For example: the following Challenges are created if the input data contains flags for EdgeCrossingEdgeCheck and SinkIslandCheck in USA and CAN:\n+\n+1. CAN - EdgeCrossingEdgeCheck\n+2. CAN - SinkIslandCheck\n+2. USA - EdgeCrossingEdgeCheck", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7f72ee9e3054d9c4fd9f80c37e0dd2a065549a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjYzMzIwOnYy", "diffSide": "RIGHT", "path": "docs/maproulette_upload.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNzoxM1rOHdIpAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNzoxM1rOHdIpAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMjMyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            3. USA - SinkIslandCheck\n          \n          \n            \n            3. United States - SinkIslandCheck", "url": "https://github.com/osmlab/atlas-checks/pull/378#discussion_r500312321", "createdAt": "2020-10-06T14:07:13Z", "author": {"login": "atiannicelli"}, "path": "docs/maproulette_upload.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# MapRoulette Upload Command\n+\n+The [MapRouletteUploadCommand](/src/main/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommand.java) deserilizes line-delimited Atlas Check flags, and uploads them to the provided MapRoulette server.\n+\n+The command creates a new Challenge for each Atlas Check and country in the input data. For example: the following Challenges are created if the input data contains flags for EdgeCrossingEdgeCheck and SinkIslandCheck in USA and CAN:\n+\n+1. CAN - EdgeCrossingEdgeCheck\n+2. CAN - SinkIslandCheck\n+2. USA - EdgeCrossingEdgeCheck\n+3. USA - SinkIslandCheck", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7f72ee9e3054d9c4fd9f80c37e0dd2a065549a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjY1MTE3OnYy", "diffSide": "RIGHT", "path": "docs/maproulette_upload.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowOTo1N1rOHdIz0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1NzoyNVrOHdO2_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNTA4OQ==", "bodyText": "I had to copy https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.29/slf4j-api-1.7.29.jar to the same directory and add that to the class path. Is that worth putting in here or would java experts just know that?", "url": "https://github.com/osmlab/atlas-checks/pull/378#discussion_r500315089", "createdAt": "2020-10-06T14:09:57Z", "author": {"login": "atiannicelli"}, "path": "docs/maproulette_upload.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# MapRoulette Upload Command\n+\n+The [MapRouletteUploadCommand](/src/main/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommand.java) deserilizes line-delimited Atlas Check flags, and uploads them to the provided MapRoulette server.\n+\n+The command creates a new Challenge for each Atlas Check and country in the input data. For example: the following Challenges are created if the input data contains flags for EdgeCrossingEdgeCheck and SinkIslandCheck in USA and CAN:\n+\n+1. CAN - EdgeCrossingEdgeCheck\n+2. CAN - SinkIslandCheck\n+2. USA - EdgeCrossingEdgeCheck\n+3. USA - SinkIslandCheck\n+\n+Each Challenge is added to the project provided in the MapRoulette connection url.\n+\n+## Parameters\n+\n+* **maproulette** - MapRoulette connection url\n+* **logfiles** - Path to `/flag` output geojson\n+* **config** - Path to Atlas Checks configuration\n+* **countries** (optional) - Comma delimited list of country permit list\n+* **checks** (optional) - Comma delimted list of checks permit list\n+* **outputPath** (optional) - Path to store text file of new challenge ids\n+* **checkinComment** (optional) - Value of Changeset check in comment\n+* **checkinCommentPrefix** - Prefix added to default check in comment of [prefix ISO - CheckName]\n+\n+## Example\n+\n+The following command will upload EdgeCrossingEdge & SinkIsland checks to the `checks_example_project` Project on staging.maproulette.org. \n+Please remember to change the MapRoulette API key. You can find this in your MapRoulette user settings.\n+\n+```java\n+java -cp build/libs/atlas-checks-6.1.3-SNAPSHOT-shaded.jar org.openstreetmap.atlas.checks.maproulette.MapRouletteUploadCommand \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7f72ee9e3054d9c4fd9f80c37e0dd2a065549a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxMTc1MA==", "bodyText": "Ah yeah.. sl4j is excluded in the gradle build. We could probably remove that.", "url": "https://github.com/osmlab/atlas-checks/pull/378#discussion_r500411750", "createdAt": "2020-10-06T15:54:01Z", "author": {"login": "danielduhh"}, "path": "docs/maproulette_upload.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# MapRoulette Upload Command\n+\n+The [MapRouletteUploadCommand](/src/main/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommand.java) deserilizes line-delimited Atlas Check flags, and uploads them to the provided MapRoulette server.\n+\n+The command creates a new Challenge for each Atlas Check and country in the input data. For example: the following Challenges are created if the input data contains flags for EdgeCrossingEdgeCheck and SinkIslandCheck in USA and CAN:\n+\n+1. CAN - EdgeCrossingEdgeCheck\n+2. CAN - SinkIslandCheck\n+2. USA - EdgeCrossingEdgeCheck\n+3. USA - SinkIslandCheck\n+\n+Each Challenge is added to the project provided in the MapRoulette connection url.\n+\n+## Parameters\n+\n+* **maproulette** - MapRoulette connection url\n+* **logfiles** - Path to `/flag` output geojson\n+* **config** - Path to Atlas Checks configuration\n+* **countries** (optional) - Comma delimited list of country permit list\n+* **checks** (optional) - Comma delimted list of checks permit list\n+* **outputPath** (optional) - Path to store text file of new challenge ids\n+* **checkinComment** (optional) - Value of Changeset check in comment\n+* **checkinCommentPrefix** - Prefix added to default check in comment of [prefix ISO - CheckName]\n+\n+## Example\n+\n+The following command will upload EdgeCrossingEdge & SinkIsland checks to the `checks_example_project` Project on staging.maproulette.org. \n+Please remember to change the MapRoulette API key. You can find this in your MapRoulette user settings.\n+\n+```java\n+java -cp build/libs/atlas-checks-6.1.3-SNAPSHOT-shaded.jar org.openstreetmap.atlas.checks.maproulette.MapRouletteUploadCommand \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNTA4OQ=="}, "originalCommit": {"oid": "0f7f72ee9e3054d9c4fd9f80c37e0dd2a065549a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxNDIwNw==", "bodyText": "OK, looks good as is then.", "url": "https://github.com/osmlab/atlas-checks/pull/378#discussion_r500414207", "createdAt": "2020-10-06T15:57:25Z", "author": {"login": "atiannicelli"}, "path": "docs/maproulette_upload.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# MapRoulette Upload Command\n+\n+The [MapRouletteUploadCommand](/src/main/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommand.java) deserilizes line-delimited Atlas Check flags, and uploads them to the provided MapRoulette server.\n+\n+The command creates a new Challenge for each Atlas Check and country in the input data. For example: the following Challenges are created if the input data contains flags for EdgeCrossingEdgeCheck and SinkIslandCheck in USA and CAN:\n+\n+1. CAN - EdgeCrossingEdgeCheck\n+2. CAN - SinkIslandCheck\n+2. USA - EdgeCrossingEdgeCheck\n+3. USA - SinkIslandCheck\n+\n+Each Challenge is added to the project provided in the MapRoulette connection url.\n+\n+## Parameters\n+\n+* **maproulette** - MapRoulette connection url\n+* **logfiles** - Path to `/flag` output geojson\n+* **config** - Path to Atlas Checks configuration\n+* **countries** (optional) - Comma delimited list of country permit list\n+* **checks** (optional) - Comma delimted list of checks permit list\n+* **outputPath** (optional) - Path to store text file of new challenge ids\n+* **checkinComment** (optional) - Value of Changeset check in comment\n+* **checkinCommentPrefix** - Prefix added to default check in comment of [prefix ISO - CheckName]\n+\n+## Example\n+\n+The following command will upload EdgeCrossingEdge & SinkIsland checks to the `checks_example_project` Project on staging.maproulette.org. \n+Please remember to change the MapRoulette API key. You can find this in your MapRoulette user settings.\n+\n+```java\n+java -cp build/libs/atlas-checks-6.1.3-SNAPSHOT-shaded.jar org.openstreetmap.atlas.checks.maproulette.MapRouletteUploadCommand \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNTA4OQ=="}, "originalCommit": {"oid": "0f7f72ee9e3054d9c4fd9f80c37e0dd2a065549a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDgyMjE4OnYy", "diffSide": "RIGHT", "path": "docs/maproulette_upload.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzo0OToyMlrOHddvkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzo0OToyMlrOHddvkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1ODA2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following command will upload EdgeCrossingEdge & SinkIsland checks to the `checks_example_project` Project on staging.maproulette.org. \n          \n          \n            \n            The following command will upload EdgeCrossingEdge & SinkIsland checks to the `checks_example_project` Project on maproulette.org.", "url": "https://github.com/osmlab/atlas-checks/pull/378#discussion_r500658066", "createdAt": "2020-10-06T23:49:22Z", "author": {"login": "Bentleysb"}, "path": "docs/maproulette_upload.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# MapRoulette Upload Command\n+\n+The [MapRouletteUploadCommand](/src/main/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommand.java) deserilizes line-delimited Atlas Check flags, and uploads them to the provided MapRoulette server.\n+\n+The command creates a new Challenge for each Atlas Check and country in the input data. For example: the following Challenges are created if the input data contains flags for EdgeCrossingEdgeCheck and SinkIslandCheck in USA and CAN:\n+\n+1. Canada - EdgeCrossingEdgeCheck\n+2. Canada - SinkIslandCheck\n+2. United States - EdgeCrossingEdgeCheck\n+3. United States - SinkIslandCheck\n+\n+Each Challenge is added to the project provided in the MapRoulette connection url.\n+\n+## Parameters\n+\n+* **maproulette** - MapRoulette connection url\n+* **logfiles** - Path to `/flag` output geojson\n+* **config** - Path to Atlas Checks configuration\n+* **countries** (optional) - Comma delimited list of country permit list\n+* **checks** (optional) - Comma delimted list of checks permit list\n+* **outputPath** (optional) - Path to store text file of new challenge ids\n+* **checkinComment** (optional) - Value of Changeset check in comment\n+* **checkinCommentPrefix** (optional) - Prefix added to default check in comment of [prefix ISO - CheckName]\n+\n+## Example\n+\n+The following command will upload EdgeCrossingEdge & SinkIsland checks to the `checks_example_project` Project on staging.maproulette.org. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675a5f33539942bd71afa2aef17d085b20dafbbe"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3183, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}