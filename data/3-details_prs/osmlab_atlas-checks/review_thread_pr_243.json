{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNzk4ODMy", "number": 243, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxNToyMVrODbDk4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1NjoyMFrODe7BHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njk2NzM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxNToyMVrOFiUvdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTowMzoyN1rOFmPWOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNTczNA==", "bodyText": "Isn't this change performing the same operation as before? For all connections, checkIfEdgeHeadingDifferenceExceedsThreshold(comingFrom, comingTo); was called from walk.visitedEdge previously, and now it is called here. Was this to improve performance or is there something I am missing?", "url": "https://github.com/osmlab/atlas-checks/pull/243#discussion_r371535734", "createdAt": "2020-01-27T23:15:21Z", "author": {"login": "sayas01"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "diffHunk": "@@ -160,6 +161,10 @@ private boolean networkWalkQualifiesAsSnakeRoad(final SnakeRoadNetworkWalk walk)\n      */\n     private void walkNetwork(final Edge current, final SnakeRoadNetworkWalk walk)\n     {\n+        final Set<Edge> directConnections = walk.getConnectedMasterEdgeOfTheSameWay(current);\n+        directConnections.stream().forEach(connection -> walk", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a307566b67a885de04b85840d7903a2fb6725c1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NjM0OQ==", "bodyText": "The difference is before it used to call checkIfEdgeHeadingDifferenceExceedsThreshold() from visitedEdge() for all the edges not just directly connected edges to a current edge. My code will make sure that it will check the heading difference of two directly connected edges to a current edge.", "url": "https://github.com/osmlab/atlas-checks/pull/243#discussion_r371556349", "createdAt": "2020-01-28T00:26:38Z", "author": {"login": "smaheshwaram"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "diffHunk": "@@ -160,6 +161,10 @@ private boolean networkWalkQualifiesAsSnakeRoad(final SnakeRoadNetworkWalk walk)\n      */\n     private void walkNetwork(final Edge current, final SnakeRoadNetworkWalk walk)\n     {\n+        final Set<Edge> directConnections = walk.getConnectedMasterEdgeOfTheSameWay(current);\n+        directConnections.stream().forEach(connection -> walk", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNTczNA=="}, "originalCommit": {"oid": "8a307566b67a885de04b85840d7903a2fb6725c1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1ODY1NA==", "bodyText": "ahh I think the names got me confused.. directConnections and walk.getDirectConnections() are different but I read it as same.", "url": "https://github.com/osmlab/atlas-checks/pull/243#discussion_r371558654", "createdAt": "2020-01-28T00:35:19Z", "author": {"login": "sayas01"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "diffHunk": "@@ -160,6 +161,10 @@ private boolean networkWalkQualifiesAsSnakeRoad(final SnakeRoadNetworkWalk walk)\n      */\n     private void walkNetwork(final Edge current, final SnakeRoadNetworkWalk walk)\n     {\n+        final Set<Edge> directConnections = walk.getConnectedMasterEdgeOfTheSameWay(current);\n+        directConnections.stream().forEach(connection -> walk", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNTczNA=="}, "originalCommit": {"oid": "8a307566b67a885de04b85840d7903a2fb6725c1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk4MTM4NA==", "bodyText": "The requirements from your PR description say to me that the 'snakiness' can be determined from any 2 consecutive edges, so shouldn't we be calling lines 164-166 inside the while loop as well? Instead of passing current we pass connection", "url": "https://github.com/osmlab/atlas-checks/pull/243#discussion_r371981384", "createdAt": "2020-01-28T18:32:24Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "diffHunk": "@@ -160,6 +161,10 @@ private boolean networkWalkQualifiesAsSnakeRoad(final SnakeRoadNetworkWalk walk)\n      */\n     private void walkNetwork(final Edge current, final SnakeRoadNetworkWalk walk)\n     {\n+        final Set<Edge> directConnections = walk.getConnectedMasterEdgeOfTheSameWay(current);\n+        directConnections.stream().forEach(connection -> walk", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNTczNA=="}, "originalCommit": {"oid": "8a307566b67a885de04b85840d7903a2fb6725c1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjczMDU3NA==", "bodyText": "Heading difference is verified only against the current edge and it direct connections(this will be done for each edge when it is processed). Valence is checked for whole highway so that we can qualify it as a snake road.\nMoving these lines inside the while loop will make the check do the same thing repeatedly for an edge object that will be processed for snakeRoadCheck.", "url": "https://github.com/osmlab/atlas-checks/pull/243#discussion_r372730574", "createdAt": "2020-01-30T02:18:24Z", "author": {"login": "smaheshwaram"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "diffHunk": "@@ -160,6 +161,10 @@ private boolean networkWalkQualifiesAsSnakeRoad(final SnakeRoadNetworkWalk walk)\n      */\n     private void walkNetwork(final Edge current, final SnakeRoadNetworkWalk walk)\n     {\n+        final Set<Edge> directConnections = walk.getConnectedMasterEdgeOfTheSameWay(current);\n+        directConnections.stream().forEach(connection -> walk", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNTczNA=="}, "originalCommit": {"oid": "8a307566b67a885de04b85840d7903a2fb6725c1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU1OTUwNg==", "bodyText": "Sorry if I'm misunderstanding. But aren't we now only calling checkIfEdgeHeadingDifferenceExceedsThreshold(current, connection)) between the starting edge and all of its connected edges? When we want to be calling it on every consecutive edge in the original Way. This might be doable if we reassign current whenever we move to the next layer of edges", "url": "https://github.com/osmlab/atlas-checks/pull/243#discussion_r375559506", "createdAt": "2020-02-05T23:08:24Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "diffHunk": "@@ -160,6 +161,10 @@ private boolean networkWalkQualifiesAsSnakeRoad(final SnakeRoadNetworkWalk walk)\n      */\n     private void walkNetwork(final Edge current, final SnakeRoadNetworkWalk walk)\n     {\n+        final Set<Edge> directConnections = walk.getConnectedMasterEdgeOfTheSameWay(current);\n+        directConnections.stream().forEach(connection -> walk", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNTczNA=="}, "originalCommit": {"oid": "8a307566b67a885de04b85840d7903a2fb6725c1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0MTY1OA==", "bodyText": "yes, thats true.\nMy assumption is when snakeRoadcheck is invoked its invoked for every edge, if we do this inside for loop, heading difference is calculated repeatedly for all consecutive edges.\nSo by not doing this only the edge where heading difference is greater than threshold is flagged.", "url": "https://github.com/osmlab/atlas-checks/pull/243#discussion_r375641658", "createdAt": "2020-02-06T05:03:27Z", "author": {"login": "smaheshwaram"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "diffHunk": "@@ -160,6 +161,10 @@ private boolean networkWalkQualifiesAsSnakeRoad(final SnakeRoadNetworkWalk walk)\n      */\n     private void walkNetwork(final Edge current, final SnakeRoadNetworkWalk walk)\n     {\n+        final Set<Edge> directConnections = walk.getConnectedMasterEdgeOfTheSameWay(current);\n+        directConnections.stream().forEach(connection -> walk", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNTczNA=="}, "originalCommit": {"oid": "8a307566b67a885de04b85840d7903a2fb6725c1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjc0NDkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMzoxMjoyNlrOFmKaug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzo1MTozNlrOFpdoLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU2MDg5MA==", "bodyText": "to avoid reprocessing, we can just say final Set<Edge> directConnections = walk.getDirectConnections() here. Might need to change Set to a LinkedList doing this", "url": "https://github.com/osmlab/atlas-checks/pull/243#discussion_r375560890", "createdAt": "2020-02-05T23:12:26Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "diffHunk": "@@ -160,6 +161,10 @@ private boolean networkWalkQualifiesAsSnakeRoad(final SnakeRoadNetworkWalk walk)\n      */\n     private void walkNetwork(final Edge current, final SnakeRoadNetworkWalk walk)\n     {\n+        final Set<Edge> directConnections = walk.getConnectedMasterEdgeOfTheSameWay(current);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e21d292bb73c4a499ce29baa78dcc3d6f0e215a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyMTM1OA==", "bodyText": "Done", "url": "https://github.com/osmlab/atlas-checks/pull/243#discussion_r379021358", "createdAt": "2020-02-13T17:51:36Z", "author": {"login": "smaheshwaram"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "diffHunk": "@@ -160,6 +161,10 @@ private boolean networkWalkQualifiesAsSnakeRoad(final SnakeRoadNetworkWalk walk)\n      */\n     private void walkNetwork(final Edge current, final SnakeRoadNetworkWalk walk)\n     {\n+        final Set<Edge> directConnections = walk.getConnectedMasterEdgeOfTheSameWay(current);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU2MDg5MA=="}, "originalCommit": {"oid": "0e21d292bb73c4a499ce29baa78dcc3d6f0e215a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzUwODE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1NjoyMFrOFoVEVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzo1MTo0NlrOFpdolQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMjUzNQ==", "bodyText": "conn -> onceRemovedConnection", "url": "https://github.com/osmlab/atlas-checks/pull/243#discussion_r377832535", "createdAt": "2020-02-11T18:56:20Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "diffHunk": "@@ -168,9 +169,13 @@ private void walkNetwork(final Edge current, final SnakeRoadNetworkWalk walk)\n             // Process it\n             walk.visitEdge(current, connection);\n \n+            final Set<Edge> oneLayerRemovedConnections = walk\n+                    .getConnectedMasterEdgeOfTheSameWay(connection);\n+            oneLayerRemovedConnections.forEach(\n+                    conn -> walk.checkIfEdgeHeadingDifferenceExceedsThreshold(connection, conn));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f27e83d04135a0e62161ead5c1a7fcad79a489f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMjg2Nw==", "bodyText": "(to avoid abbreviating)", "url": "https://github.com/osmlab/atlas-checks/pull/243#discussion_r377832867", "createdAt": "2020-02-11T18:56:56Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "diffHunk": "@@ -168,9 +169,13 @@ private void walkNetwork(final Edge current, final SnakeRoadNetworkWalk walk)\n             // Process it\n             walk.visitEdge(current, connection);\n \n+            final Set<Edge> oneLayerRemovedConnections = walk\n+                    .getConnectedMasterEdgeOfTheSameWay(connection);\n+            oneLayerRemovedConnections.forEach(\n+                    conn -> walk.checkIfEdgeHeadingDifferenceExceedsThreshold(connection, conn));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMjUzNQ=="}, "originalCommit": {"oid": "1f27e83d04135a0e62161ead5c1a7fcad79a489f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyMTQ2MQ==", "bodyText": "Done", "url": "https://github.com/osmlab/atlas-checks/pull/243#discussion_r379021461", "createdAt": "2020-02-13T17:51:46Z", "author": {"login": "smaheshwaram"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/linear/edges/SnakeRoadCheck.java", "diffHunk": "@@ -168,9 +169,13 @@ private void walkNetwork(final Edge current, final SnakeRoadNetworkWalk walk)\n             // Process it\n             walk.visitEdge(current, connection);\n \n+            final Set<Edge> oneLayerRemovedConnections = walk\n+                    .getConnectedMasterEdgeOfTheSameWay(connection);\n+            oneLayerRemovedConnections.forEach(\n+                    conn -> walk.checkIfEdgeHeadingDifferenceExceedsThreshold(connection, conn));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMjUzNQ=="}, "originalCommit": {"oid": "1f27e83d04135a0e62161ead5c1a7fcad79a489f"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3245, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}