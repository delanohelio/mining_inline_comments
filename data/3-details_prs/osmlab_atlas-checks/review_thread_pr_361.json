{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MjgxMjg0", "number": 361, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoyMDozNVrOElw9DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOToxNjoyNFrOElzhQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDM0ODI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/event/CheckFlagEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoyMDozNVrOHVa84Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoyMDozNVrOHVa84Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMzcxMw==", "bodyText": "This can be a constant", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r492223713", "createdAt": "2020-09-21T17:20:35Z", "author": {"login": "danielduhh"}, "path": "src/main/java/org/openstreetmap/atlas/checks/event/CheckFlagEvent.java", "diffHunk": "@@ -149,6 +151,7 @@ else if (flaggedRelations.size() != 1 && !feature.has(GEOMETRY))\n         flagProperties.add(\"feature_osmids\", uniqueFeatureOsmIds);\n         flagProperties.addProperty(\"feature_count\", featureProperties.size());\n         flagProperties.add(IDENTIFIERS, GSON.toJsonTree(flag.getUniqueIdentifiers()));\n+        flagProperties.add(\"fix_suggestions\", getFixSuggestionDescriptions(flag));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDM3MjA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/event/CheckFlagEvent.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoyNzowNFrOHVbL2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDoxNjowOVrOHW_Wxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNzU0NA==", "bodyText": "Would this make more sense as a json array?\nfix_suggestions: [\n {\n  identifier: \"Edge1212121\",\n  type: \"update\",\n  descriptors: []\n\n }\n]\n\nAlso, should we add the osm id here as well for ease of access?", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r492227544", "createdAt": "2020-09-21T17:27:04Z", "author": {"login": "danielduhh"}, "path": "src/main/java/org/openstreetmap/atlas/checks/event/CheckFlagEvent.java", "diffHunk": "@@ -235,6 +242,17 @@ public static JsonObject flagToJson(final CheckFlag flag,\n                 .map(tag -> String.format(\"%s=%s\", HighwayTag.KEY, tag.getTagValue()));\n     }\n \n+    private static JsonObject getFixSuggestionDescriptions(final CheckFlag flag)\n+    {\n+        final JsonObject fixSuggestionObject = new JsonObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg3NDgwNA==", "bodyText": "I thought it might be more convenient as an object, so that it would be easy to look up suggestions for the flagged object and you can still easily loop through it.\nAs for the OSM ID, we could add it if it seems like that would really be helpful. However, it is quite a simple calculation to get it from the Atlas ID, and realistically it should exist in the properties of one of the flagged objects.", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r492874804", "createdAt": "2020-09-22T16:29:54Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/event/CheckFlagEvent.java", "diffHunk": "@@ -235,6 +242,17 @@ public static JsonObject flagToJson(final CheckFlag flag,\n                 .map(tag -> String.format(\"%s=%s\", HighwayTag.KEY, tag.getTagValue()));\n     }\n \n+    private static JsonObject getFixSuggestionDescriptions(final CheckFlag flag)\n+    {\n+        final JsonObject fixSuggestionObject = new JsonObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNzU0NA=="}, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyNzYwMw==", "bodyText": "Yeah, I can see how that would be helpful for looks ups. My only concern is that it wouldn't follow the convention for all other collection type objects we store in JSON.\nAlso.. I think it would be useful if he added it to the \"properties\", since we're already use that object for parsing other metadata", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r493027603", "createdAt": "2020-09-22T20:54:37Z", "author": {"login": "danielduhh"}, "path": "src/main/java/org/openstreetmap/atlas/checks/event/CheckFlagEvent.java", "diffHunk": "@@ -235,6 +242,17 @@ public static JsonObject flagToJson(final CheckFlag flag,\n                 .map(tag -> String.format(\"%s=%s\", HighwayTag.KEY, tag.getTagValue()));\n     }\n \n+    private static JsonObject getFixSuggestionDescriptions(final CheckFlag flag)\n+    {\n+        final JsonObject fixSuggestionObject = new JsonObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNzU0NA=="}, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyMTk3OQ==", "bodyText": "I would argue we don't have much of a convention for storing collections in JSON. The only other things we store are the Atlas Objects and the flag properties. The Atlas Objects have to be in GeoJson convention. The properties we keep in as JSON objects as it fits well with the data being named fields in the flag. An important part of the suggestions is being able to pair them with a flagged object by the atlas id and item type, so I think it makes sense to gave it in an object with that identifier as the key. It also as close as you can get to a set in JSON because duplicate keys are not allowed.\nI did think about adding it to the properties, but thought it was distinct enough from the flag meta data. I also thought it might be easy for human reading if it was separate and not bloating the properties. However, I don't think this is a big deal either way, and in fact the geojson output has it in the feature properties. So if that is the place we think it fits best then I am happy to move it.", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r493721979", "createdAt": "2020-09-23T16:18:01Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/event/CheckFlagEvent.java", "diffHunk": "@@ -235,6 +242,17 @@ public static JsonObject flagToJson(final CheckFlag flag,\n                 .map(tag -> String.format(\"%s=%s\", HighwayTag.KEY, tag.getTagValue()));\n     }\n \n+    private static JsonObject getFixSuggestionDescriptions(final CheckFlag flag)\n+    {\n+        final JsonObject fixSuggestionObject = new JsonObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNzU0NA=="}, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNDY2Ng==", "bodyText": "One other option I considered was requiring a suggestion to have an associated flagged object and placing the suggestion in the features properties. This approach does not require the extra identifier, as it is already in the feature properties. I did not go with this because I wanted to keep the suggestions unrestricted for now, and I though it may cause issues with how we currently use the feature properties in post processing tools.", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r493724666", "createdAt": "2020-09-23T16:22:03Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/event/CheckFlagEvent.java", "diffHunk": "@@ -235,6 +242,17 @@ public static JsonObject flagToJson(final CheckFlag flag,\n                 .map(tag -> String.format(\"%s=%s\", HighwayTag.KEY, tag.getTagValue()));\n     }\n \n+    private static JsonObject getFixSuggestionDescriptions(final CheckFlag flag)\n+    {\n+        final JsonObject fixSuggestionObject = new JsonObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNzU0NA=="}, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1NzU1Ng==", "bodyText": "In the case where we have a flag holding multiple osm objects (e.g. way 1, way 2.... picked up by a walker) wouldn't we want some sort of separation for the fix suggestions, as they only apply to distinct objects? Maybe an array might work better in this case, or some sort of suggestion merging during flag deduplication. Or your last idea might address this", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r493857556", "createdAt": "2020-09-23T19:55:16Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/event/CheckFlagEvent.java", "diffHunk": "@@ -235,6 +242,17 @@ public static JsonObject flagToJson(final CheckFlag flag,\n                 .map(tag -> String.format(\"%s=%s\", HighwayTag.KEY, tag.getTagValue()));\n     }\n \n+    private static JsonObject getFixSuggestionDescriptions(final CheckFlag flag)\n+    {\n+        final JsonObject fixSuggestionObject = new JsonObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNzU0NA=="}, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg2MjMyMg==", "bodyText": "@seancoulter, this is exactly the case in the AreasWithHighwayTagCheck example included with this PR. My thought was that as we are flagging each edge we should have a suggestion for each edge, marked by the atlas ID. We are planning on handling the merging of the edges back into a way as part of the deserialization and MR upload process.", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r493862322", "createdAt": "2020-09-23T20:04:10Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/event/CheckFlagEvent.java", "diffHunk": "@@ -235,6 +242,17 @@ public static JsonObject flagToJson(final CheckFlag flag,\n                 .map(tag -> String.format(\"%s=%s\", HighwayTag.KEY, tag.getTagValue()));\n     }\n \n+    private static JsonObject getFixSuggestionDescriptions(final CheckFlag flag)\n+    {\n+        final JsonObject fixSuggestionObject = new JsonObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNzU0NA=="}, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg2ODc0Mw==", "bodyText": "Nice, sounds good", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r493868743", "createdAt": "2020-09-23T20:16:09Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/event/CheckFlagEvent.java", "diffHunk": "@@ -235,6 +242,17 @@ public static JsonObject flagToJson(final CheckFlag flag,\n                 .map(tag -> String.format(\"%s=%s\", HighwayTag.KEY, tag.getTagValue()));\n     }\n \n+    private static JsonObject getFixSuggestionDescriptions(final CheckFlag flag)\n+    {\n+        final JsonObject fixSuggestionObject = new JsonObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNzU0NA=="}, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDM3OTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/flag/CheckFlag.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoyOTowNVrOHVbQkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNjozNDoxM1rOHWC3VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyODc1Mg==", "bodyText": "Should we also add constructors for creating a CheckFlag without Locations?", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r492228752", "createdAt": "2020-09-21T17:29:05Z", "author": {"login": "danielduhh"}, "path": "src/main/java/org/openstreetmap/atlas/checks/flag/CheckFlag.java", "diffHunk": "@@ -105,11 +109,65 @@ public CheckFlag(final String identifier, final Set<? extends AtlasObject> objec\n      */\n     public CheckFlag(final String identifier, final Set<? extends AtlasObject> objects,\n             final List<String> instructions, final List<Location> points)\n+    {\n+        this(identifier, objects, instructions, points, new HashSet<>());\n+    }\n+\n+    /**\n+     * Creates a {@link CheckFlag} with the addition of a list of {@code point} {@link Location}s\n+     * that highlight specific points in the geometry that caused the rule violation\n+     *\n+     * @param identifier\n+     *            the identifying value to flag\n+     * @param objects\n+     *            {@link AtlasObject}s to flag\n+     * @param instructions\n+     *            a list of free form instructions\n+     * @param points\n+     *            {@code point} {@link Location}s to highlight\n+     * @param fixSuggestions\n+     *            {@link Set} of {@link FeatureChange}s representing suggested fixes for flagged\n+     *            features\n+     */\n+    public CheckFlag(final String identifier, final Set<? extends AtlasObject> objects,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg3NzY1Mg==", "bodyText": "I wanted to avoid adding constructors and instead use setters for this, as we already have a lot of CheckFlag constructors and methods that call those constructors in BaseCheck. I had to add this constructor, though, to maintain the serializability of the class.", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r492877652", "createdAt": "2020-09-22T16:34:13Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/flag/CheckFlag.java", "diffHunk": "@@ -105,11 +109,65 @@ public CheckFlag(final String identifier, final Set<? extends AtlasObject> objec\n      */\n     public CheckFlag(final String identifier, final Set<? extends AtlasObject> objects,\n             final List<String> instructions, final List<Location> points)\n+    {\n+        this(identifier, objects, instructions, points, new HashSet<>());\n+    }\n+\n+    /**\n+     * Creates a {@link CheckFlag} with the addition of a list of {@code point} {@link Location}s\n+     * that highlight specific points in the geometry that caused the rule violation\n+     *\n+     * @param identifier\n+     *            the identifying value to flag\n+     * @param objects\n+     *            {@link AtlasObject}s to flag\n+     * @param instructions\n+     *            a list of free form instructions\n+     * @param points\n+     *            {@code point} {@link Location}s to highlight\n+     * @param fixSuggestions\n+     *            {@link Set} of {@link FeatureChange}s representing suggested fixes for flagged\n+     *            features\n+     */\n+    public CheckFlag(final String identifier, final Set<? extends AtlasObject> objects,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyODc1Mg=="}, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDc2NTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/areas/AreasWithHighwayTagCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOToxNTozM1rOHVe8Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOToxNTozM1rOHVe8Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4OTExNA==", "bodyText": "Nice usage here \ud83d\udc4d", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r492289114", "createdAt": "2020-09-21T19:15:33Z", "author": {"login": "danielduhh"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/areas/AreasWithHighwayTagCheck.java", "diffHunk": "@@ -71,33 +73,41 @@ public boolean validCheckForObject(final AtlasObject object)\n                 // If the tag isn't one of the VALID_HIGHWAY_TAGS, we want to flag it.\n                 .filter(tag -> isUnacceptableAreaHighwayTagCombination(object, tag)).map(tag ->\n                 {\n-                    final String instruction;\n+                    this.markAsFlagged(object.getOsmIdentifier());\n+\n                     if (tag.equals(HighwayTag.FOOTWAY))\n                     {\n-                        instruction = this.getLocalizedInstruction(0, object.getOsmIdentifier(),\n-                                tag, HighwayTag.PEDESTRIAN);\n-                    }\n-                    else\n-                    {\n-                        instruction = this.getLocalizedInstruction(1, object.getOsmIdentifier(),\n-                                tag.getTagValue());\n-                    }\n-                    final Set<AtlasObject> results;\n-                    if (object instanceof Edge)\n-                    {\n-                        final EdgeWalker walker = new AreasWithHighwayTagCheckWalker((Edge) object);\n-                        final Set<Edge> connectedBadEdges = walker.collectEdges().stream()\n-                                .filter(Edge::isMainEdge).collect(Collectors.toSet());\n-                        connectedBadEdges\n-                                .forEach(badEdge -> this.markAsFlagged(badEdge.getOsmIdentifier()));\n-                        results = new HashSet<>(connectedBadEdges);\n-                    }\n-                    else\n-                    {\n-                        results = Collections.singleton(object);\n-                        this.markAsFlagged(object.getOsmIdentifier());\n+                        final Set<AtlasObject> objectsToFlag = this.getObjectsToFlag(object);\n+                        return this\n+                                .createFlag(objectsToFlag,\n+                                        this.getLocalizedInstruction(0, object.getOsmIdentifier(),\n+                                                tag, HighwayTag.PEDESTRIAN))\n+                                .addFixSuggestions(objectsToFlag.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDc2ODY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/flag/CheckFlag.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOToxNjoyNFrOHVe-Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOToxNjoyNFrOHVe-Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4OTU5MA==", "bodyText": "Do you mind adding a note about FeatureChanges?", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r492289590", "createdAt": "2020-09-21T19:16:24Z", "author": {"login": "danielduhh"}, "path": "src/main/java/org/openstreetmap/atlas/checks/flag/CheckFlag.java", "diffHunk": "@@ -105,11 +109,65 @@ public CheckFlag(final String identifier, final Set<? extends AtlasObject> objec\n      */\n     public CheckFlag(final String identifier, final Set<? extends AtlasObject> objects,\n             final List<String> instructions, final List<Location> points)\n+    {\n+        this(identifier, objects, instructions, points, new HashSet<>());\n+    }\n+\n+    /**\n+     * Creates a {@link CheckFlag} with the addition of a list of {@code point} {@link Location}s\n+     * that highlight specific points in the geometry that caused the rule violation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3173, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}