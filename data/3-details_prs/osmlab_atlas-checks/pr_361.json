{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MjgxMjg0", "number": 361, "title": "CheckFlag Fix Suggestions", "bodyText": "Description:\nThis is an expansion of the CheckFlag data structure to allow checks to add suggested fixes for data errors.\nThese suggested fixes can be added in the form of FeatureChanges. Ideally the FeatureChanges are created by altering CompleteEntity copies of AtlasEntitys that in the flaggedObjects of the CheckFlag. The FeatureChanges should also include a before view of the feature by providing an atlas context when creating it. The before view is necessary to calculate the changes made to the feature.\n2 new methods are added to CheckFlag for adding fix suggestions: addFixSuggestion(FeatureChange) and addFixSuggestions(Collection<FeatureChange>). Both return the CheckFlag to allow for chained calls.\nA getter is also added for the fix suggestions: public Set<FeatureChange> getFixSuggestions()\nThe information from the fix suggestions is added to both the flag and geojson logs. In both it appears as an object under the key fix_suggestions, however, in the flag logs this key is found in the root object of the line and in the geojson it is under the properties or each feature collection. The fix_suggestions object contains elements whose keys are unique feature IDs. Each element contains a description of the changes made to a feature (See example below).\nIncluded in this PR is an update to the AreasWithHighwayTagCheck to demonstrate the use of this new addition to CheckFlags. The check will now flag a feature and provide a suggested fix of either removing the area tag or updating the highway tag to be highway=pedestrian. The following are flag logs produced by the check:\n{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [\n          [\n            55.4535187,\n            25.3628649\n          ],\n          [\n            55.4535376,\n            25.3627203\n          ]\n        ]\n      },\n      \"properties\": {\n        \"area\": \"yes\",\n        \"last_edit_user_name\": \"CartographicChels\",\n        \"last_edit_changeset\": \"70291534\",\n        \"identifier\": \"209331363000004\",\n        \"itemType\": \"Edge\",\n        \"last_edit_time\": \"1557974395000\",\n        \"last_edit_user_id\": \"9051059\",\n        \"iso_country_code\": \"ARE\",\n        \"osmIdentifier\": \"209331363\",\n        \"highway\": \"footway\",\n        \"last_edit_version\": \"2\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [\n          [\n            55.4535376,\n            25.3627203\n          ],\n          [\n            55.4536967,\n            25.3627287\n          ]\n        ]\n      },\n      \"properties\": {\n        \"area\": \"yes\",\n        \"last_edit_user_name\": \"CartographicChels\",\n        \"last_edit_changeset\": \"70291534\",\n        \"identifier\": \"209331363000001\",\n        \"itemType\": \"Edge\",\n        \"last_edit_time\": \"1557974395000\",\n        \"last_edit_user_id\": \"9051059\",\n        \"iso_country_code\": \"ARE\",\n        \"osmIdentifier\": \"209331363\",\n        \"highway\": \"footway\",\n        \"last_edit_version\": \"2\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [\n          [\n            55.4536967,\n            25.3627287\n          ],\n          [\n            55.4536866,\n            25.3628827\n          ]\n        ]\n      },\n      \"properties\": {\n        \"area\": \"yes\",\n        \"last_edit_user_name\": \"CartographicChels\",\n        \"last_edit_changeset\": \"70291534\",\n        \"identifier\": \"209331363000002\",\n        \"itemType\": \"Edge\",\n        \"last_edit_time\": \"1557974395000\",\n        \"last_edit_user_id\": \"9051059\",\n        \"iso_country_code\": \"ARE\",\n        \"osmIdentifier\": \"209331363\",\n        \"highway\": \"footway\",\n        \"last_edit_version\": \"2\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [\n          [\n            55.4536866,\n            25.3628827\n          ],\n          [\n            55.4535187,\n            25.3628649\n          ]\n        ]\n      },\n      \"properties\": {\n        \"area\": \"yes\",\n        \"last_edit_user_name\": \"CartographicChels\",\n        \"last_edit_changeset\": \"70291534\",\n        \"identifier\": \"209331363000003\",\n        \"itemType\": \"Edge\",\n        \"last_edit_time\": \"1557974395000\",\n        \"last_edit_user_id\": \"9051059\",\n        \"iso_country_code\": \"ARE\",\n        \"osmIdentifier\": \"209331363\",\n        \"highway\": \"footway\",\n        \"last_edit_version\": \"2\"\n      }\n    }\n  ],\n  \"properties\": {\n    \"id\": \"209331363000001209331363000002209331363000003209331363000004\",\n    \"instructions\": \"1. The way with OSM ID 209331363 has a highway value of FOOTWAY, which should not have an area=yes tag. Consider changing this to highway=PEDESTRIAN.\",\n    \"identifiers\": [\n      \"Edge209331363000002\",\n      \"Edge209331363000001\",\n      \"Edge209331363000004\",\n      \"Edge209331363000003\"\n    ],\n    \"generator\": \"AreasWithHighwayTagCheck\",\n    \"timestamp\": \"Tue Sep 15 12:50:30 PDT 2020\"\n  },\n  \"fix_suggestions\": {\n    \"Edge209331363000003\": {\n      \"type\": \"UPDATE\",\n      \"descriptors\": [\n        {\n          \"name\": \"TAG\",\n          \"type\": \"UPDATE\",\n          \"key\": \"highway\",\n          \"value\": \"pedestrian\",\n          \"originalValue\": \"footway\"\n        }\n      ]\n    },\n    \"Edge209331363000002\": {\n      \"type\": \"UPDATE\",\n      \"descriptors\": [\n        {\n          \"name\": \"TAG\",\n          \"type\": \"UPDATE\",\n          \"key\": \"highway\",\n          \"value\": \"pedestrian\",\n          \"originalValue\": \"footway\"\n        }\n      ]\n    },\n    \"Edge209331363000001\": {\n      \"type\": \"UPDATE\",\n      \"descriptors\": [\n        {\n          \"name\": \"TAG\",\n          \"type\": \"UPDATE\",\n          \"key\": \"highway\",\n          \"value\": \"pedestrian\",\n          \"originalValue\": \"footway\"\n        }\n      ]\n    },\n    \"Edge209331363000004\": {\n      \"type\": \"UPDATE\",\n      \"descriptors\": [\n        {\n          \"name\": \"TAG\",\n          \"type\": \"UPDATE\",\n          \"key\": \"highway\",\n          \"value\": \"pedestrian\",\n          \"originalValue\": \"footway\"\n        }\n      ]\n    }\n  }\n}\n\n{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [\n          [\n            56.3124025,\n            25.1411205\n          ],\n          [\n            56.3123332,\n            25.1407975\n          ],\n          [\n            56.3120985,\n            25.1408437\n          ],\n          [\n            56.3120824,\n            25.140868\n          ],\n          [\n            56.3121334,\n            25.1410926\n          ],\n          [\n            56.3122259,\n            25.1411448\n          ],\n          [\n            56.3124025,\n            25.1411205\n          ]\n        ]\n      },\n      \"properties\": {\n        \"area\": \"yes\",\n        \"wheelchair\": \"no\",\n        \"last_edit_changeset\": \"56874082\",\n        \"identifier\": \"503403567000001\",\n        \"itemType\": \"Edge\",\n        \"bicycle\": \"no\",\n        \"iso_country_code\": \"ARE\",\n        \"osmIdentifier\": \"503403567\",\n        \"horse\": \"no\",\n        \"last_edit_user_name\": \"Rotilom\",\n        \"last_edit_time\": \"1520179798000\",\n        \"last_edit_user_id\": \"6853562\",\n        \"service\": \"parking_aisle\",\n        \"highway\": \"path\",\n        \"last_edit_version\": \"2\",\n        \"foot\": \"yes\"\n      }\n    }\n  ],\n  \"properties\": {\n    \"id\": \"503403567000001\",\n    \"instructions\": \"1. The way with OSM ID 503403567 has a highway value of PATH, which should not have an area=yes tag.\",\n    \"identifiers\": [\n      \"Edge503403567000001\"\n    ],\n    \"generator\": \"AreasWithHighwayTagCheck\",\n    \"timestamp\": \"Tue Sep 15 12:50:30 PDT 2020\"\n  },\n  \"fix_suggestions\": {\n    \"Edge503403567000001\": {\n      \"type\": \"UPDATE\",\n      \"descriptors\": [\n        {\n          \"name\": \"TAG\",\n          \"type\": \"REMOVE\",\n          \"key\": \"area\",\n          \"value\": \"yes\"\n        }\n      ]\n    }\n  }\n}\n\nI was looking to add documentation on this addition withing the docs MD files, but could not find an appropriate place. The only technical guidance on writing a check appeared to be within specific tutorials. Any suggestions of a place are welcome, otherwise a new general check design doc may be needed.\nPotential Impact:\nAdds a new field to CheckFlag. Adds extra data in the logs.\nUnit Test Approach:\nAdded unit tests for the new CheckFlag methods. Created unit tests for the CheckFlagEvent class that test the fix_suggestion json for tag, geometry, and relation changes. Updated unit tests for AreasWithHighwayTagCheck to test the fix suggestions.\nTest Results:\nRan local tests with the IntegrityCheckSparkJob and ShardedIntegrityChecksSparkJob, using the altered AreasWithHighwayTagCheck. Both the flag and geojson logs showed the fix_suggestion section with the correct details.", "createdAt": "2020-09-16T22:38:27Z", "url": "https://github.com/osmlab/atlas-checks/pull/361", "merged": true, "mergeCommit": {"oid": "91b7ec1c17a650fd005acd201df0fe942419e6ea"}, "closed": true, "closedAt": "2020-09-23T21:40:23Z", "author": {"login": "Bentleysb"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJjgSjAH2gAyNDg4MjgxMjg0OmQxNDc1M2RkYjYxNGM1NzYyMTk5M2M3MjMyYzIxMmRlYmNhZDQ0NDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLy8QIAFqTQ5NTAzODQ5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d14753ddb614c57621993c7232c212debcad4444", "author": {"user": {"login": "Bentleysb", "name": "Bentley Breithaupt"}}, "url": "https://github.com/osmlab/atlas-checks/commit/d14753ddb614c57621993c7232c212debcad4444", "committedDate": "2020-09-16T21:44:30Z", "message": "fix suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931", "author": {"user": {"login": "Bentleysb", "name": "Bentley Breithaupt"}}, "url": "https://github.com/osmlab/atlas-checks/commit/b039b39a1e4a6204bceebc573342abf86e82e931", "committedDate": "2020-09-16T22:25:05Z", "message": "fix tag"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxODE3OTU1", "url": "https://github.com/osmlab/atlas-checks/pull/361#pullrequestreview-491817955", "createdAt": "2020-09-18T22:36:21Z", "commit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODgzMTcy", "url": "https://github.com/osmlab/atlas-checks/pull/361#pullrequestreview-492883172", "createdAt": "2020-09-21T18:40:11Z", "commit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODI2MjA5", "url": "https://github.com/osmlab/atlas-checks/pull/361#pullrequestreview-492826209", "createdAt": "2020-09-21T17:20:35Z", "commit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoyMDozNVrOHVa84Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOToxNjoyNFrOHVe-Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMzcxMw==", "bodyText": "This can be a constant", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r492223713", "createdAt": "2020-09-21T17:20:35Z", "author": {"login": "danielduhh"}, "path": "src/main/java/org/openstreetmap/atlas/checks/event/CheckFlagEvent.java", "diffHunk": "@@ -149,6 +151,7 @@ else if (flaggedRelations.size() != 1 && !feature.has(GEOMETRY))\n         flagProperties.add(\"feature_osmids\", uniqueFeatureOsmIds);\n         flagProperties.addProperty(\"feature_count\", featureProperties.size());\n         flagProperties.add(IDENTIFIERS, GSON.toJsonTree(flag.getUniqueIdentifiers()));\n+        flagProperties.add(\"fix_suggestions\", getFixSuggestionDescriptions(flag));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNzU0NA==", "bodyText": "Would this make more sense as a json array?\nfix_suggestions: [\n {\n  identifier: \"Edge1212121\",\n  type: \"update\",\n  descriptors: []\n\n }\n]\n\nAlso, should we add the osm id here as well for ease of access?", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r492227544", "createdAt": "2020-09-21T17:27:04Z", "author": {"login": "danielduhh"}, "path": "src/main/java/org/openstreetmap/atlas/checks/event/CheckFlagEvent.java", "diffHunk": "@@ -235,6 +242,17 @@ public static JsonObject flagToJson(final CheckFlag flag,\n                 .map(tag -> String.format(\"%s=%s\", HighwayTag.KEY, tag.getTagValue()));\n     }\n \n+    private static JsonObject getFixSuggestionDescriptions(final CheckFlag flag)\n+    {\n+        final JsonObject fixSuggestionObject = new JsonObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyODc1Mg==", "bodyText": "Should we also add constructors for creating a CheckFlag without Locations?", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r492228752", "createdAt": "2020-09-21T17:29:05Z", "author": {"login": "danielduhh"}, "path": "src/main/java/org/openstreetmap/atlas/checks/flag/CheckFlag.java", "diffHunk": "@@ -105,11 +109,65 @@ public CheckFlag(final String identifier, final Set<? extends AtlasObject> objec\n      */\n     public CheckFlag(final String identifier, final Set<? extends AtlasObject> objects,\n             final List<String> instructions, final List<Location> points)\n+    {\n+        this(identifier, objects, instructions, points, new HashSet<>());\n+    }\n+\n+    /**\n+     * Creates a {@link CheckFlag} with the addition of a list of {@code point} {@link Location}s\n+     * that highlight specific points in the geometry that caused the rule violation\n+     *\n+     * @param identifier\n+     *            the identifying value to flag\n+     * @param objects\n+     *            {@link AtlasObject}s to flag\n+     * @param instructions\n+     *            a list of free form instructions\n+     * @param points\n+     *            {@code point} {@link Location}s to highlight\n+     * @param fixSuggestions\n+     *            {@link Set} of {@link FeatureChange}s representing suggested fixes for flagged\n+     *            features\n+     */\n+    public CheckFlag(final String identifier, final Set<? extends AtlasObject> objects,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4OTExNA==", "bodyText": "Nice usage here \ud83d\udc4d", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r492289114", "createdAt": "2020-09-21T19:15:33Z", "author": {"login": "danielduhh"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/areas/AreasWithHighwayTagCheck.java", "diffHunk": "@@ -71,33 +73,41 @@ public boolean validCheckForObject(final AtlasObject object)\n                 // If the tag isn't one of the VALID_HIGHWAY_TAGS, we want to flag it.\n                 .filter(tag -> isUnacceptableAreaHighwayTagCombination(object, tag)).map(tag ->\n                 {\n-                    final String instruction;\n+                    this.markAsFlagged(object.getOsmIdentifier());\n+\n                     if (tag.equals(HighwayTag.FOOTWAY))\n                     {\n-                        instruction = this.getLocalizedInstruction(0, object.getOsmIdentifier(),\n-                                tag, HighwayTag.PEDESTRIAN);\n-                    }\n-                    else\n-                    {\n-                        instruction = this.getLocalizedInstruction(1, object.getOsmIdentifier(),\n-                                tag.getTagValue());\n-                    }\n-                    final Set<AtlasObject> results;\n-                    if (object instanceof Edge)\n-                    {\n-                        final EdgeWalker walker = new AreasWithHighwayTagCheckWalker((Edge) object);\n-                        final Set<Edge> connectedBadEdges = walker.collectEdges().stream()\n-                                .filter(Edge::isMainEdge).collect(Collectors.toSet());\n-                        connectedBadEdges\n-                                .forEach(badEdge -> this.markAsFlagged(badEdge.getOsmIdentifier()));\n-                        results = new HashSet<>(connectedBadEdges);\n-                    }\n-                    else\n-                    {\n-                        results = Collections.singleton(object);\n-                        this.markAsFlagged(object.getOsmIdentifier());\n+                        final Set<AtlasObject> objectsToFlag = this.getObjectsToFlag(object);\n+                        return this\n+                                .createFlag(objectsToFlag,\n+                                        this.getLocalizedInstruction(0, object.getOsmIdentifier(),\n+                                                tag, HighwayTag.PEDESTRIAN))\n+                                .addFixSuggestions(objectsToFlag.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4OTU5MA==", "bodyText": "Do you mind adding a note about FeatureChanges?", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r492289590", "createdAt": "2020-09-21T19:16:24Z", "author": {"login": "danielduhh"}, "path": "src/main/java/org/openstreetmap/atlas/checks/flag/CheckFlag.java", "diffHunk": "@@ -105,11 +109,65 @@ public CheckFlag(final String identifier, final Set<? extends AtlasObject> objec\n      */\n     public CheckFlag(final String identifier, final Set<? extends AtlasObject> objects,\n             final List<String> instructions, final List<Location> points)\n+    {\n+        this(identifier, objects, instructions, points, new HashSet<>());\n+    }\n+\n+    /**\n+     * Creates a {@link CheckFlag} with the addition of a list of {@code point} {@link Location}s\n+     * that highlight specific points in the geometry that caused the rule violation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cbd933a72d914f2f4981e31151604f2ae59b5bd", "author": {"user": {"login": "Bentleysb", "name": "Bentley Breithaupt"}}, "url": "https://github.com/osmlab/atlas-checks/commit/8cbd933a72d914f2f4981e31151604f2ae59b5bd", "committedDate": "2020-09-22T16:08:52Z", "message": "merge latest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a636a0e393621961cea02cc686981cfee8bb648", "author": {"user": {"login": "Bentleysb", "name": "Bentley Breithaupt"}}, "url": "https://github.com/osmlab/atlas-checks/commit/9a636a0e393621961cea02cc686981cfee8bb648", "committedDate": "2020-09-22T16:20:38Z", "message": "comment and constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "028217c02f27457ab17c0d559f845ba3e9d6fb6d", "author": {"user": {"login": "Bentleysb", "name": "Bentley Breithaupt"}}, "url": "https://github.com/osmlab/atlas-checks/commit/028217c02f27457ab17c0d559f845ba3e9d6fb6d", "committedDate": "2020-09-22T16:22:20Z", "message": "comment and constant"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf9f501b97a957a4bde5806b5f1aeee050ee81d2", "author": {"user": {"login": "Bentleysb", "name": "Bentley Breithaupt"}}, "url": "https://github.com/osmlab/atlas-checks/commit/cf9f501b97a957a4bde5806b5f1aeee050ee81d2", "committedDate": "2020-09-22T19:41:42Z", "message": "fix countryShardMap bug"}, "afterCommit": {"oid": "028217c02f27457ab17c0d559f845ba3e9d6fb6d", "author": {"user": {"login": "Bentleysb", "name": "Bentley Breithaupt"}}, "url": "https://github.com/osmlab/atlas-checks/commit/028217c02f27457ab17c0d559f845ba3e9d6fb6d", "committedDate": "2020-09-22T16:22:20Z", "message": "comment and constant"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0OTg4ODE1", "url": "https://github.com/osmlab/atlas-checks/pull/361#pullrequestreview-494988815", "createdAt": "2020-09-23T19:38:35Z", "commit": {"oid": "028217c02f27457ab17c0d559f845ba3e9d6fb6d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MDAwMTY1", "url": "https://github.com/osmlab/atlas-checks/pull/361#pullrequestreview-495000165", "createdAt": "2020-09-23T19:55:16Z", "commit": {"oid": "028217c02f27457ab17c0d559f845ba3e9d6fb6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo1NToxNlrOHW-rFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo1NToxNlrOHW-rFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1NzU1Ng==", "bodyText": "In the case where we have a flag holding multiple osm objects (e.g. way 1, way 2.... picked up by a walker) wouldn't we want some sort of separation for the fix suggestions, as they only apply to distinct objects? Maybe an array might work better in this case, or some sort of suggestion merging during flag deduplication. Or your last idea might address this", "url": "https://github.com/osmlab/atlas-checks/pull/361#discussion_r493857556", "createdAt": "2020-09-23T19:55:16Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/event/CheckFlagEvent.java", "diffHunk": "@@ -235,6 +242,17 @@ public static JsonObject flagToJson(final CheckFlag flag,\n                 .map(tag -> String.format(\"%s=%s\", HighwayTag.KEY, tag.getTagValue()));\n     }\n \n+    private static JsonObject getFixSuggestionDescriptions(final CheckFlag flag)\n+    {\n+        final JsonObject fixSuggestionObject = new JsonObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNzU0NA=="}, "originalCommit": {"oid": "b039b39a1e4a6204bceebc573342abf86e82e931"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MDE1MzQy", "url": "https://github.com/osmlab/atlas-checks/pull/361#pullrequestreview-495015342", "createdAt": "2020-09-23T20:17:08Z", "commit": {"oid": "028217c02f27457ab17c0d559f845ba3e9d6fb6d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MDM4NDkw", "url": "https://github.com/osmlab/atlas-checks/pull/361#pullrequestreview-495038490", "createdAt": "2020-09-23T20:51:28Z", "commit": {"oid": "028217c02f27457ab17c0d559f845ba3e9d6fb6d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3182, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}