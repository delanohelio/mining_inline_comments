{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjE1Njgx", "number": 310, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTo0Njo0OVrOEEb_Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTo0Njo0OVrOEEb_Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDg4MzI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/relations/InvalidTurnRestrictionCheck.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTo0Njo0OVrOGiD30A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDozMTo1MFrOGiFRAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2ODIwOA==", "bodyText": "nit: Could we combine the conditionals in noneMatch() ?", "url": "https://github.com/osmlab/atlas-checks/pull/310#discussion_r438368208", "createdAt": "2020-06-10T19:46:49Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/relations/InvalidTurnRestrictionCheck.java", "diffHunk": "@@ -46,22 +72,32 @@ public boolean validCheckForObject(final AtlasObject object)\n     @Override\n     protected Optional<CheckFlag> flag(final AtlasObject object)\n     {\n-        final Optional<CheckFlag> result;\n-\n         final Relation relation = (Relation) object;\n-        if (!TurnRestriction.from(relation).isPresent())\n+        final Set<AtlasObject> members = relation.members().stream().map(RelationMember::getEntity)\n+                .collect(Collectors.toSet());\n+\n+        // A to and from member are required\n+        if (relation.members().stream()\n+                .noneMatch(member -> member.getRole().equals(RelationTypeTag.RESTRICTION_ROLE_FROM))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbcb3df40bc589f65fdf515333ff56f23796ab72"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4Mjg2Mw==", "bodyText": "We can't combine them because then it would be false if there were just from or to members but not both.", "url": "https://github.com/osmlab/atlas-checks/pull/310#discussion_r438382863", "createdAt": "2020-06-10T20:15:38Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/relations/InvalidTurnRestrictionCheck.java", "diffHunk": "@@ -46,22 +72,32 @@ public boolean validCheckForObject(final AtlasObject object)\n     @Override\n     protected Optional<CheckFlag> flag(final AtlasObject object)\n     {\n-        final Optional<CheckFlag> result;\n-\n         final Relation relation = (Relation) object;\n-        if (!TurnRestriction.from(relation).isPresent())\n+        final Set<AtlasObject> members = relation.members().stream().map(RelationMember::getEntity)\n+                .collect(Collectors.toSet());\n+\n+        // A to and from member are required\n+        if (relation.members().stream()\n+                .noneMatch(member -> member.getRole().equals(RelationTypeTag.RESTRICTION_ROLE_FROM))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2ODIwOA=="}, "originalCommit": {"oid": "bbcb3df40bc589f65fdf515333ff56f23796ab72"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MTA0MA==", "bodyText": "Yeah that makes sense, I think the only way to combine them would be if we kept track of members we'd seen while iterating. Your way looks good", "url": "https://github.com/osmlab/atlas-checks/pull/310#discussion_r438391040", "createdAt": "2020-06-10T20:31:50Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/relations/InvalidTurnRestrictionCheck.java", "diffHunk": "@@ -46,22 +72,32 @@ public boolean validCheckForObject(final AtlasObject object)\n     @Override\n     protected Optional<CheckFlag> flag(final AtlasObject object)\n     {\n-        final Optional<CheckFlag> result;\n-\n         final Relation relation = (Relation) object;\n-        if (!TurnRestriction.from(relation).isPresent())\n+        final Set<AtlasObject> members = relation.members().stream().map(RelationMember::getEntity)\n+                .collect(Collectors.toSet());\n+\n+        // A to and from member are required\n+        if (relation.members().stream()\n+                .noneMatch(member -> member.getRole().equals(RelationTypeTag.RESTRICTION_ROLE_FROM))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2ODIwOA=="}, "originalCommit": {"oid": "bbcb3df40bc589f65fdf515333ff56f23796ab72"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3321, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}