{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMjM1ODU3", "number": 452, "title": "Concerning angle building check", "bodyText": "Description:\nThis check attempts to flag building who have angles between 80 and 89.7 degrees or between 90.3 and 100 degrees that need to be squared.\nTest Results:\n\n\n\nISO\nSampled\nTP\nFP\nFalse Positive Rate\n\n\n\n\nARG\n300\n300\n0\n0%\n\n\nAUS\n300\n300\n0\n0%\n\n\nCHL\n300\n300\n0\n0%\n\n\nCOL\n300\n299\n1\n0.003%\n\n\nECU\n300\n299\n1\n0.003%\n\n\n\nResolves #450", "createdAt": "2020-12-18T01:45:48Z", "url": "https://github.com/osmlab/atlas-checks/pull/452", "merged": true, "mergeCommit": {"oid": "6e623b8c80238b932d1a5d0b81786c28abd05154"}, "closed": true, "closedAt": "2020-12-30T20:53:20Z", "author": {"login": "reichg"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnJ5rxAH2gAyNTQyMjM1ODU3OmI1NWQ3NDM1ODU4ZjAxNmM3NDg1ZWVlZjE5OTc0ZTFhNzM4ZGMwYmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdpHo5QAFqTU1ODI3MDIyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b55d7435858f016c7485eeef19974e1a738dc0be", "author": {"user": {"login": "reichg", "name": "Gabe Reichenberger"}}, "url": "https://github.com/osmlab/atlas-checks/commit/b55d7435858f016c7485eeef19974e1a738dc0be", "committedDate": "2020-12-17T20:52:26Z", "message": "updated with angles over 90 degrees"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc448447bf875fec86a7c2dcec364e03c4f0e9ae", "author": {"user": {"login": "reichg", "name": "Gabe Reichenberger"}}, "url": "https://github.com/osmlab/atlas-checks/commit/fc448447bf875fec86a7c2dcec364e03c4f0e9ae", "committedDate": "2020-12-17T20:53:29Z", "message": "Merge branch 'dev' of https://github.com/reichg/atlas-checks into acuteAngleBuildingCheck"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9d99bfc62f14f180b37587e9686132c85d01bb1", "author": {"user": {"login": "reichg", "name": "Gabe Reichenberger"}}, "url": "https://github.com/osmlab/atlas-checks/commit/e9d99bfc62f14f180b37587e9686132c85d01bb1", "committedDate": "2020-12-18T01:44:57Z", "message": "False Positive Phase. Added node range for buildings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "453446b0e1e5de9079d85c2c64d1a5277a8f2b11", "author": {"user": {"login": "reichg", "name": "Gabe Reichenberger"}}, "url": "https://github.com/osmlab/atlas-checks/commit/453446b0e1e5de9079d85c2c64d1a5277a8f2b11", "committedDate": "2020-12-18T01:48:53Z", "message": "this and final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93b8b26002822e38f3cfce374f8083f5c9994dc2", "author": {"user": {"login": "reichg", "name": "Gabe Reichenberger"}}, "url": "https://github.com/osmlab/atlas-checks/commit/93b8b26002822e38f3cfce374f8083f5c9994dc2", "committedDate": "2020-12-18T22:23:43Z", "message": "all necessary documentation as well as unit tests complete. Awaiting FPR analysis from editors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e941be09e0db06015b091b6a9de017a064af9997", "author": {"user": {"login": "reichg", "name": "Gabe Reichenberger"}}, "url": "https://github.com/osmlab/atlas-checks/commit/e941be09e0db06015b091b6a9de017a064af9997", "committedDate": "2020-12-19T03:59:58Z", "message": "adjusting angle range after first round of FPR analysis."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf0e82ee3cc45129c0d66b13098fa4eb64e4c8c6", "author": {"user": {"login": "reichg", "name": "Gabe Reichenberger"}}, "url": "https://github.com/osmlab/atlas-checks/commit/cf0e82ee3cc45129c0d66b13098fa4eb64e4c8c6", "committedDate": "2020-12-21T21:07:10Z", "message": "Fixing Maproulette challenge attributes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDI2ODY1", "url": "https://github.com/osmlab/atlas-checks/pull/452#pullrequestreview-557426865", "createdAt": "2020-12-22T23:37:16Z", "commit": {"oid": "cf0e82ee3cc45129c0d66b13098fa4eb64e4c8c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzozNzoxNlrOIKMTQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzozNzoxNlrOIKMTQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1ODIxMQ==", "bodyText": "It would be nice to have a unit test or two for the angleCounts configurable.", "url": "https://github.com/osmlab/atlas-checks/pull/452#discussion_r547558211", "createdAt": "2020-12-22T23:37:16Z", "author": {"login": "Bentleysb"}, "path": "src/test/java/org/openstreetmap/atlas/checks/validation/areas/ConcerningAngleBuildingCheckTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.openstreetmap.atlas.checks.validation.areas;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.openstreetmap.atlas.checks.configuration.ConfigurationResolver;\n+import org.openstreetmap.atlas.checks.validation.verifier.ConsumerBasedExpectedCheckVerifier;\n+\n+/**\n+ * Tests for {@link ConcerningAngleBuildingCheck}\n+ *\n+ * @author v-garei\n+ */\n+public class ConcerningAngleBuildingCheckTest\n+{\n+    @Rule\n+    public ConcerningAngleBuildingCheckTestRule setup = new ConcerningAngleBuildingCheckTestRule();\n+\n+    @Rule\n+    public ConsumerBasedExpectedCheckVerifier verifier = new ConsumerBasedExpectedCheckVerifier();\n+\n+    private final ConcerningAngleBuildingCheck check = new ConcerningAngleBuildingCheck(\n+            ConfigurationResolver.inlineConfiguration(\"{\\\"ConcerningAngleBuildingCheck\\\": {\"\n+                    + \"\\\"angles\\\": \" + \"{\\\"minLowAngleDiff\\\": 80.0,\" + \"\\\"maxLowAngleDiff\\\": 89.9,\"\n+                    + \"\\\"minHighAngleDiff\\\": 90.1,\" + \"\\\"maxHighAngleDiff\\\": 100.0\" + \"},\"\n+                    + \"\\\"angleCounts\\\": {\" + \"\\\"min\\\": 4.0,\" + \"\\\"max\\\": 16.0}}}\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf0e82ee3cc45129c0d66b13098fa4eb64e4c8c6"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29ba3b1d17f0596094d76deb9caf4d01cd25133d", "author": {"user": {"login": "reichg", "name": "Gabe Reichenberger"}}, "url": "https://github.com/osmlab/atlas-checks/commit/29ba3b1d17f0596094d76deb9caf4d01cd25133d", "committedDate": "2020-12-23T01:27:37Z", "message": "Added tests for number of angles per suggested comment!"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MTg3MjU5", "url": "https://github.com/osmlab/atlas-checks/pull/452#pullrequestreview-558187259", "createdAt": "2020-12-23T19:21:39Z", "commit": {"oid": "29ba3b1d17f0596094d76deb9caf4d01cd25133d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MjcwMjI2", "url": "https://github.com/osmlab/atlas-checks/pull/452#pullrequestreview-558270226", "createdAt": "2020-12-23T23:21:52Z", "commit": {"oid": "29ba3b1d17f0596094d76deb9caf4d01cd25133d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMzoyMTo1MlrOIK6moQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMzoyMTo1MlrOIK6moQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMxNjgzMw==", "bodyText": "I think we may run into a situation where the vertex of 2 segments contains 2 nodes --1 node belonging to the meeting segments and another stray node which would be a Segment of length 0. So there's actually 3 segments all connected. We could log something so it's clear why we're skipping this kind of polygon", "url": "https://github.com/osmlab/atlas-checks/pull/452#discussion_r548316833", "createdAt": "2020-12-23T23:21:52Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/areas/ConcerningAngleBuildingCheck.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package org.openstreetmap.atlas.checks.validation.areas;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.Heading;\n+import org.openstreetmap.atlas.geography.Polygon;\n+import org.openstreetmap.atlas.geography.Segment;\n+import org.openstreetmap.atlas.geography.atlas.items.Area;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.ItemType;\n+import org.openstreetmap.atlas.geography.atlas.items.Relation;\n+import org.openstreetmap.atlas.geography.atlas.items.RelationMember;\n+import org.openstreetmap.atlas.tags.BuildingPartTag;\n+import org.openstreetmap.atlas.tags.BuildingTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+\n+/**\n+ * Auto generated Check template\n+ *\n+ * @author v-garei\n+ */\n+public class ConcerningAngleBuildingCheck extends BaseCheck<Long>\n+{\n+    private static final long serialVersionUID = 8586559001979110697L;\n+    private static final String CONCERNING_ANGLE_INSTRUCTIONS = \"Area {0, number, #} has concerning angles, please make all angles right angles.\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Collections\n+            .singletonList(CONCERNING_ANGLE_INSTRUCTIONS);\n+    private static final double ANGLE_DEFAULT = 90.0;\n+    private static final double MIN_LOW_ANGLE_DIFF_DEFAULT = 80.0;\n+    private static final double MAX_LOW_ANGLE_DIFF_DEFAULT = 89.9;\n+    private static final double MIN_HIGH_ANGLE_DIFF_DEFAULT = 90.1;\n+    private static final double MAX_HIGH_ANGLE_DIFF_DEFAULT = 100.0;\n+    private static final double MIN_ANGLE_COUNT_DEFAULT = 4.0;\n+    private static final double MAX_ANGLE_COUNT_DEFAULT = 16.0;\n+    private final double minLowAngleDiff;\n+    private final double maxLowAngleDiff;\n+    private final double minHighAngleDiff;\n+    private final double maxHighAngleDiff;\n+    private final double minAngleCount;\n+    private final double maxAngleCount;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public ConcerningAngleBuildingCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minLowAngleDiff = this.configurationValue(configuration, \"angles.minLowAngleDiff\",\n+                MIN_LOW_ANGLE_DIFF_DEFAULT);\n+        this.maxLowAngleDiff = this.configurationValue(configuration, \"angles.maxLowAngleDiff\",\n+                MAX_LOW_ANGLE_DIFF_DEFAULT);\n+        this.minHighAngleDiff = this.configurationValue(configuration, \"angles.minHighAngleDiff\",\n+                MIN_HIGH_ANGLE_DIFF_DEFAULT);\n+        this.maxHighAngleDiff = this.configurationValue(configuration, \"angles.maxHighAngleDiff\",\n+                MAX_HIGH_ANGLE_DIFF_DEFAULT);\n+        this.minAngleCount = this.configurationValue(configuration, \"angleCounts.min\",\n+                MIN_ANGLE_COUNT_DEFAULT);\n+        this.maxAngleCount = this.configurationValue(configuration, \"angleCounts.max\",\n+                MAX_ANGLE_COUNT_DEFAULT);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        return !isFlagged(object.getOsmIdentifier()) && this.isBuildingOrPart(object)\n+                && (object instanceof Area\n+                        || (object instanceof Relation && ((Relation) object).isMultiPolygon()));\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        markAsFlagged(object.getOsmIdentifier());\n+        final Set<Polygon> buildingPolygons = this.getPolygons(object).collect(Collectors.toSet());\n+        if (!buildingPolygons.isEmpty())\n+        {\n+            for (final Polygon polygon : buildingPolygons)\n+            {\n+                if (this.buildingAngleCountWithinValidRange(polygon)\n+                        && this.hasConcerningAngles(polygon))\n+                {\n+                    return Optional.of(this.createFlag(object,\n+                            this.getLocalizedInstruction(0, object.getOsmIdentifier())));\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    /**\n+     * checks to make sure building node count fits within desired range\n+     * \n+     * @param polygon\n+     *            building being checked\n+     * @return boolean ensuring that the node count fits within desired range\n+     */\n+    private boolean buildingAngleCountWithinValidRange(final Polygon polygon)\n+    {\n+        final List<Segment> polygonSegments = polygon.segments();\n+        return polygonSegments.size() >= this.minAngleCount\n+                && polygonSegments.size() <= this.maxAngleCount;\n+    }\n+\n+    /**\n+     * Get angle diff between 2 segments\n+     * \n+     * @param segment1\n+     *            a segment\n+     * @param segment2\n+     *            a connecting segment\n+     * @return angle difference between headings of segments\n+     */\n+    private double getAngleDiff(final Segment segment1, final Segment segment2)\n+    {\n+        final Optional<Heading> segmentOneHeading = segment1.heading();\n+        final Optional<Heading> segmentTwoHeading = segment2.heading();\n+        if (segmentOneHeading.isPresent() && segmentTwoHeading.isPresent())\n+        {\n+            return segmentOneHeading.get().difference(segmentTwoHeading.get()).asDegrees();\n+        }\n+        return ANGLE_DEFAULT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ba3b1d17f0596094d76deb9caf4d01cd25133d"}, "originalPosition": 154}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3246, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}