{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MzA2NjYz", "number": 342, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo1NDoyOFrOEaLHiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo0MToxMFrOEal_GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODgwNTg3OnYy", "diffSide": "RIGHT", "path": "config/configuration.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo1NDoyOFrOHDbrnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo1NDoyOFrOHDbrnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM2MTMwOQ==", "bodyText": "Could you please add a MapRoulette challenge object (lots of examples throughout the configuration).", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r473361309", "createdAt": "2020-08-19T21:54:28Z", "author": {"login": "Bentleysb"}, "path": "config/configuration.json", "diffHunk": "@@ -1057,5 +1057,8 @@\n       \"difficulty\": \"EASY\",\n       \"defaultPriority\": \"MEDIUM\"\n     }\n+  },\n+  \"BridgeDetailedInfoCheck\": {\n+    \"bridge.length.minimum.meters\": 500.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff8038d5957264cd3dd0d0a98d3fc91073d416"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODg0OTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjowMzo1MFrOHDcIww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo0OTo1MVrOHDxffA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM2ODc3MQ==", "bodyText": "This could be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Optional<String> bridgeTag = object.getTag(BRIDGE_TAG);\n          \n          \n            \n                    return bridgeTag.isPresent() && \"yes\".equals(bridgeTag.get());\n          \n          \n            \n                    return Validators.isOfType(object, BridgeTag.class, BridgeTag.YES);", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r473368771", "createdAt": "2020-08-19T22:03:50Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String RAILWAY_TAG = \"railway\";\n+    public static final String BRIDGE_TAG = \"bridge\";\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeStructureTag = object.getTag(BRIDGE_STRUCTURE_TAG);\n+        if (((Edge) object).length().isGreaterThan(this.minimumLength)\n+                && !bridgeStructureTag.isPresent())\n+        {\n+            return Optional\n+                    .of(createFlag(object, getLocalizedInstruction(0, object.getOsmIdentifier())));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private boolean isGenericBridge(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeTag = object.getTag(BRIDGE_TAG);\n+        return bridgeTag.isPresent() && \"yes\".equals(bridgeTag.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff8038d5957264cd3dd0d0a98d3fc91073d416"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcxODY1Mg==", "bodyText": "Done. Thanks for the hint!", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r473718652", "createdAt": "2020-08-20T07:49:51Z", "author": {"login": "ladwlo"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String RAILWAY_TAG = \"railway\";\n+    public static final String BRIDGE_TAG = \"bridge\";\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeStructureTag = object.getTag(BRIDGE_STRUCTURE_TAG);\n+        if (((Edge) object).length().isGreaterThan(this.minimumLength)\n+                && !bridgeStructureTag.isPresent())\n+        {\n+            return Optional\n+                    .of(createFlag(object, getLocalizedInstruction(0, object.getOsmIdentifier())));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private boolean isGenericBridge(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeTag = object.getTag(BRIDGE_TAG);\n+        return bridgeTag.isPresent() && \"yes\".equals(bridgeTag.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM2ODc3MQ=="}, "originalCommit": {"oid": "2bff8038d5957264cd3dd0d0a98d3fc91073d416"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODg2MTEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjowNjoyMVrOHDcQKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjowNjoyMVrOHDcQKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3MDY2NA==", "bodyText": "This could be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return object.getTag(RAILWAY_TAG).isPresent();\n          \n          \n            \n                    return Validators.hasValuesFor(object, RailwayTag.class);", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r473370664", "createdAt": "2020-08-19T22:06:21Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String RAILWAY_TAG = \"railway\";\n+    public static final String BRIDGE_TAG = \"bridge\";\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeStructureTag = object.getTag(BRIDGE_STRUCTURE_TAG);\n+        if (((Edge) object).length().isGreaterThan(this.minimumLength)\n+                && !bridgeStructureTag.isPresent())\n+        {\n+            return Optional\n+                    .of(createFlag(object, getLocalizedInstruction(0, object.getOsmIdentifier())));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private boolean isGenericBridge(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeTag = object.getTag(BRIDGE_TAG);\n+        return bridgeTag.isPresent() && \"yes\".equals(bridgeTag.get());\n+    }\n+\n+    private boolean isMajorHighway(final AtlasObject object)\n+    {\n+        return MAJOR_HIGHWAYS.contains(((Edge) object).highwayTag());\n+    }\n+\n+    private boolean isRailway(final AtlasObject object)\n+    {\n+        return object.getTag(RAILWAY_TAG).isPresent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bff8038d5957264cd3dd0d0a98d3fc91073d416"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzA1OTIwOnYy", "diffSide": "RIGHT", "path": "config/configuration.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxMDozOFrOHEGN_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjo0NTo1OFrOHEKosQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1ODIzOQ==", "bodyText": "Please revert this change.", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474058239", "createdAt": "2020-08-20T15:10:38Z", "author": {"login": "sayas01"}, "path": "config/configuration.json", "diffHunk": "@@ -4,7 +4,7 @@\n       \"org.openstreetmap.atlas.checks.validation\"\n     ],\n     \"type\": \"org.openstreetmap.atlas.checks.base.BaseCheck\",\n-    \"enabled.value.default\": true\n+    \"enabled.value.default\": false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEyNDE0Mg==", "bodyText": "Done.", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474124142", "createdAt": "2020-08-20T16:40:43Z", "author": {"login": "ladwlo"}, "path": "config/configuration.json", "diffHunk": "@@ -4,7 +4,7 @@\n       \"org.openstreetmap.atlas.checks.validation\"\n     ],\n     \"type\": \"org.openstreetmap.atlas.checks.base.BaseCheck\",\n-    \"enabled.value.default\": true\n+    \"enabled.value.default\": false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1ODIzOQ=="}, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMDYwOQ==", "bodyText": "Thanks for all the detailed remarks!", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474130609", "createdAt": "2020-08-20T16:45:58Z", "author": {"login": "ladwlo"}, "path": "config/configuration.json", "diffHunk": "@@ -4,7 +4,7 @@\n       \"org.openstreetmap.atlas.checks.validation\"\n     ],\n     \"type\": \"org.openstreetmap.atlas.checks.base.BaseCheck\",\n-    \"enabled.value.default\": true\n+    \"enabled.value.default\": false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1ODIzOQ=="}, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzEwNzI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToyMTo1NVrOHEGsVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToyMTo1NVrOHEGsVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2NjAwNQ==", "bodyText": "nit: Since there is only a single instruction, you can use Collections.singletonList instead of Arrays.asList.", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474066005", "createdAt": "2020-08-20T15:21:55Z", "author": {"login": "sayas01"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.BridgeTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzEzMTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToyNzo0NFrOHEG7fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToyNzo0NFrOHEG7fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2OTg4NQ==", "bodyText": "Looks like the RailwayTag class already has a public method isRailway which could be leveraged here like: RailwayTag.isRailway()", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474069885", "createdAt": "2020-08-20T15:27:44Z", "author": {"login": "sayas01"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.BridgeTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzE1NzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozMjozOFrOHEHMRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozMjozOFrOHEHMRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NDE4Mw==", "bodyText": "One other way to check this would be to use Validators class. Predicate can be declared as a constant at the top like:\nprivate static final Predicate<AtlasObject> MAJOR_HIGHWAYS = object -> Validators.isOfType( object, Highway.class, HighwayTag.MOTORWAY, HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY)", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474074183", "createdAt": "2020-08-20T15:32:38Z", "author": {"login": "sayas01"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.BridgeTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeStructureTag = object.getTag(BRIDGE_STRUCTURE_TAG);\n+        if (((Edge) object).length().isGreaterThan(this.minimumLength)\n+                && !bridgeStructureTag.isPresent())\n+        {\n+            return Optional\n+                    .of(createFlag(object, getLocalizedInstruction(0, object.getOsmIdentifier())));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private boolean isGenericBridge(final AtlasObject object)\n+    {\n+        return Validators.isOfType(object, BridgeTag.class, BridgeTag.YES);\n+    }\n+\n+    private boolean isMajorHighway(final AtlasObject object)\n+    {\n+        return MAJOR_HIGHWAYS.contains(((Edge) object).highwayTag());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzE2NzQ5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheckTestRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozNDoyMVrOHEHTOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozNDoyMVrOHEHTOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NTk2Mw==", "bodyText": "nit: Could clean this class up by static importing TestAtlas.*.", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474075963", "createdAt": "2020-08-20T15:34:21Z", "author": {"login": "sayas01"}, "path": "src/test/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheckTestRule.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.utilities.testing.CoreTestRule;\n+import org.openstreetmap.atlas.utilities.testing.TestAtlas;\n+\n+/**\n+ * Test atlases for {@link BridgeDetailedInfoCheckTest}\n+ *\n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheckTestRule extends CoreTestRule\n+{\n+\n+    // short bridge\n+    private static final String LOC_1 = \"47.222,-122.444\";\n+    private static final String LOC_2 = \"47.225,-122.441\";\n+    // long bridge\n+    private static final String LOC_3 = \"47.111,-122.666\";\n+    private static final String LOC_4 = \"47.115,-122.661\";\n+\n+    @TestAtlas(\n+            // nodes\n+            nodes = { @TestAtlas.Node(coordinates = @TestAtlas.Loc(value = LOC_3)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzE3MTg4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheckTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozNTowM1rOHEHWIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozNTowM1rOHEHWIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NjcwNw==", "bodyText": "Love the extensive unit testing!! \ud83d\udcaf", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474076707", "createdAt": "2020-08-20T15:35:03Z", "author": {"login": "sayas01"}, "path": "src/test/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheckTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.openstreetmap.atlas.checks.configuration.ConfigurationResolver;\n+import org.openstreetmap.atlas.checks.validation.verifier.ConsumerBasedExpectedCheckVerifier;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+\n+/**\n+ * Tests for {@link BridgeDetailedInfoCheck}\n+ *\n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheckTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzE3NDI0OnYy", "diffSide": "RIGHT", "path": "docs/checks/bridgeDetailedInfoCheck.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozNToyMFrOHEHXkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozNToyMFrOHEHXkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NzA3Mw==", "bodyText": "Nice documentation!", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474077073", "createdAt": "2020-08-20T15:35:20Z", "author": {"login": "sayas01"}, "path": "docs/checks/bridgeDetailedInfoCheck.md", "diffHunk": "@@ -0,0 +1,25 @@\n+# Bridge Detailed Info Check", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzIwNzkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo0MToxMFrOHEHuHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo0MToxMFrOHEHuHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4Mjg0Ng==", "bodyText": "Could use bridgeStructureTag.isEmpty() instead.", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474082846", "createdAt": "2020-08-20T15:41:10Z", "author": {"login": "sayas01"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.BridgeTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeStructureTag = object.getTag(BRIDGE_STRUCTURE_TAG);\n+        if (((Edge) object).length().isGreaterThan(this.minimumLength)\n+                && !bridgeStructureTag.isPresent())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3150, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}