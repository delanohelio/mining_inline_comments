{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MTI0NzE3", "number": 398, "title": "ExternalData: Use ResourceCache to get data", "bodyText": "Description:\nThis uses the same methods that the atlas files use to distribute additional data files.\nChecks which use external data must implement the ExternalDataUser interface. Depending upon needs, the implementer can either fetch locally immediately, fetch and parse, or do nothing (why would someone implement the interface and do nothing?).\nUnit Test Approach:\nTested with HDFS (manually). Test setup for this consisted of a Raspberry Pi 4 with HDFS and a Mac to actually run the checks (I found that I needed to allocate a lot of memory for external data, ~15G -- this only seemed to become an issue about the time that the geojson files were being written, most likely during the reduceByKey function).\nTo replicate errors/issues found during those tests, unit tests were written for WaterWayCheck, since that check can use external data files.\nWhat was specifically tested for:\n\nRetrieving data after serialization and deserialization (NPE was found here)\n\nWhat is not Unit tested:\n\nInitialization from the Spark Jobs\n\nWhat was specifically not tested for:\n\nCorrectness of read data\n\nTest Results:\nWaterWayCheck/InvalidTagsCheck, only NZL flags are considered and only WaterWayCheck flags are counted under Total Flags/Different flags.\n\n\n\nFS\nISO\nTotal Flags\nDifferent flags\nTime\nChecks/second\n\n\n\n\nprevious hdfs\nNZL\n12378\nN/A\n1h 38m 20s\n2.10\n\n\nprevious local\nNZL\n16296\nN/A\n38m 27s\n7.06\n\n\nhdfs\nNZL\n16296\n+3918\n3h 7m 35s\n1.45\n\n\nlocal\nNZL\n16296\n0\n1h 48m 42s\n2.50\n\n\n\nNotes:\n\nThe following configuration should be set for WaterWayCheck: \"resolution.min.uphill\": 100.0. This is due to the default minimum resolution being 1.0m, which is too small for publicly available NASA SRTM files.\nJVM Args were set in gradle for the hdfs run to jvmArgs([\"-Xmx15g\",\"-Xms15g\"])\nhdfs was run on a Raspberry Pi 4, where networking was wireless only. Real world runtimes is likely to be much lower.\nAdded JUnit5 as a dependency for tests -- the assertions for exceptions are a lot nicer in JUnit5 as compared to JUnit4. If needed, I can probably do something similar to what I did for JOSM and modify the JUnit Rules in Atlas to implement the appropriate callbacks while still maintaining compatibility with JUnit4.\n\nFrom https://spark.apache.org/docs/latest/cloud-integration.html , valid cloud object storages include S3, Azure, and Google Cloud Storage. (s3a, wasb, abfs, and gs).\nFrom https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/filesystem/introduction.html , additional filesystems include Swift (from OpenStack) and local (which may have surprising behavior, apparently).\nFurther investigation\nMemory leaks. I've run ./gradlew clean run with the same settings for checks, but with the following jvmargs: jvmArgs([\"-Xmx1g\",\"-Xms1g\", \"-XX:+HeapDumpOnOutOfMemoryError\"])\nFrom MAT, the primary suspects are:\n\norg.apache.spark.util.UninterruptibleThread with a total size of 288.96 MB\norg.apache.hadoop.conf.Configuration with a total size of 691.40 MB . From the stack trace, it is likely that org.apache.hadoop.fs.FileSystem is not being properly closed by org.openstreetmap.atlas.generator.tools.filesystem.FileSystemHelper. I'll be making some modifications in FileSystemHelper to see if that helps with the memory leak.\n\nFileSystemHelper is modified in osmlab/atlas-generator#167, which, when applied, allowed me to run NZL with 1G of ram (spark.{driver,executor}.memory->1g, -Xmx1g, -Xms1g). This also reduced runtime from 1h 48m 42s to 1h 2m 31s for the local row in Test Results.", "createdAt": "2020-10-20T22:08:32Z", "url": "https://github.com/osmlab/atlas-checks/pull/398", "merged": true, "mergeCommit": {"oid": "56533dcb70817f45b9361137ed1b55888b7a53e1"}, "closed": true, "closedAt": "2020-12-30T18:23:52Z", "author": {"login": "tsmock"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYm7bHgBqjM5NDg5MTU4MDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdrTXecgFqTU2MDE1MDgxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "483d68c520da959ad95f0ec180c656efffedbbdd", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/483d68c520da959ad95f0ec180c656efffedbbdd", "committedDate": "2020-11-02T15:48:20Z", "message": "ElevationUtilities: External data: Add tests to ensure that data is\nfetched.\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}, "afterCommit": {"oid": "5b94453509d9136d2e7333c77b8b8d9123114acf", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/5b94453509d9136d2e7333c77b8b8d9123114acf", "committedDate": "2020-11-02T16:11:01Z", "message": "ElevationUtilities: External data: Add tests to ensure that data is\nfetched.\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "608d89752ca850d42b9cec0cab18e7cf195c27a4", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/608d89752ca850d42b9cec0cab18e7cf195c27a4", "committedDate": "2020-11-02T17:40:17Z", "message": "FIXUP: Sonar\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}, "afterCommit": {"oid": "94ac48fdd2bf0e10c7a006669e45285cbcb85934", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/94ac48fdd2bf0e10c7a006669e45285cbcb85934", "committedDate": "2020-11-10T14:55:19Z", "message": "FIXUP: Sonar\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "94ac48fdd2bf0e10c7a006669e45285cbcb85934", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/94ac48fdd2bf0e10c7a006669e45285cbcb85934", "committedDate": "2020-11-10T14:55:19Z", "message": "FIXUP: Sonar\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}, "afterCommit": {"oid": "63274662b790bdb5699d306e020cebe18e54bb91", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/63274662b790bdb5699d306e020cebe18e54bb91", "committedDate": "2020-11-19T20:07:21Z", "message": "ElevationUtilities: External data: Add tests to ensure that data is\nfetched.\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63274662b790bdb5699d306e020cebe18e54bb91", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/63274662b790bdb5699d306e020cebe18e54bb91", "committedDate": "2020-11-19T20:07:21Z", "message": "ElevationUtilities: External data: Add tests to ensure that data is\nfetched.\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}, "afterCommit": {"oid": "0c636d008966f6cd18b2891f04683ca77ccd5837", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/0c636d008966f6cd18b2891f04683ca77ccd5837", "committedDate": "2020-11-30T19:25:30Z", "message": "ElevationUtilities: External data: Add tests to ensure that data is\nfetched.\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMzEzOTkx", "url": "https://github.com/osmlab/atlas-checks/pull/398#pullrequestreview-541313991", "createdAt": "2020-11-30T21:36:09Z", "commit": {"oid": "0c636d008966f6cd18b2891f04683ca77ccd5837"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTozNjoxMFrOH8Oyhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo0ODo0N1rOH8PLnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxODkxOQ==", "bodyText": "We could execute doFetching in each ExternalDataUser instance itself to leverage threading. We might need to pass the cache through the constructor though so we could do doFetching in the constructor. Up to you--also lets us see which checks have heavier downloads.", "url": "https://github.com/osmlab/atlas-checks/pull/398#discussion_r532918919", "createdAt": "2020-11-30T21:36:10Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/distributed/IntegrityCheckSparkJob.java", "diffHunk": "@@ -93,12 +95,15 @@ public static void main(final String[] args)\n      * @param configuration\n      *            {@link MapRouletteConfiguration} to create a new {@link MapRouletteClient}s\n      */\n-    @SuppressWarnings(\"rawtypes\")\n     private static void executeChecks(final String country, final Atlas atlas,\n-            final Set<BaseCheck> checksToRun, final MapRouletteConfiguration configuration)\n+            final Set<BaseCheck<?>> checksToRun, final ExternalDataFetcher fetcher,\n+            final MapRouletteConfiguration configuration)\n     {\n         final Pool checkExecutionPool = new Pool(checksToRun.size(), \"Check execution pool\",\n                 POOL_DURATION_BEFORE_KILL);\n+        checksToRun.stream().filter(ExternalDataUser.class::isInstance)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c636d008966f6cd18b2891f04683ca77ccd5837"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxOTYyMQ==", "bodyText": "what's SparkJob.INPUT point to exactly?", "url": "https://github.com/osmlab/atlas-checks/pull/398#discussion_r532919621", "createdAt": "2020-11-30T21:37:30Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/distributed/IntegrityCheckSparkJob.java", "diffHunk": "@@ -133,21 +138,19 @@ public String getName()\n         return \"Integrity Check Spark Job\";\n     }\n \n-    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public void start(final CommandMap commandMap)\n     {\n-        final String atlasDirectory = (String) commandMap.get(ATLAS_FOLDER);\n+        final String atlasDirectory = (String) commandMap.get(SparkJob.INPUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c636d008966f6cd18b2891f04683ca77ccd5837"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyMTg1MQ==", "bodyText": "Same with this -- might be better off in the check's constructor", "url": "https://github.com/osmlab/atlas-checks/pull/398#discussion_r532921851", "createdAt": "2020-11-30T21:41:55Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/distributed/ShardedIntegrityChecksSparkJob.java", "diffHunk": "@@ -395,8 +396,16 @@ public void process(final CheckFlagEvent event)\n             try (Pool checkPool = new Pool(task.getChecks().size(),\n                     \"Sharded Checks Execution Pool\"))\n             {\n+                // Get the file fetcher\n+                final ExternalDataFetcher fileFetcher = new ExternalDataFetcher(input,\n+                        configurationMap);\n                 for (final Check check : task.getChecks())\n                 {\n+                    if (check instanceof ExternalDataUser)\n+                    {\n+\n+                        ((ExternalDataUser) check).doFetching(fileFetcher, atlas);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c636d008966f6cd18b2891f04683ca77ccd5837"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyNTMyNw==", "bodyText": "nit: tis -> tarInputStream (?) to avoid abbreviations", "url": "https://github.com/osmlab/atlas-checks/pull/398#discussion_r532925327", "createdAt": "2020-11-30T21:48:46Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/utility/ElevationUtilities.java", "diffHunk": "@@ -314,25 +376,32 @@ public void putMap(final Location location, final short[][] map)\n      */\n     private synchronized short[][] loadMap(final int lat, final int lon)\n     {\n+        if (this.fileFetcher == null)\n+        {\n+            logger.error(\"Cannot load maps -- fileFetcher is not initialized or is null\");\n+            return EMPTY_MAP;\n+        }\n         final String filename = this.getSrtmFileName(lat, lon);\n-        Path path = Paths.get(this.srtmPath, filename);\n-        if (!path.toFile().isFile())\n+        Optional<Resource> path = this.fileFetcher\n+                .apply(Paths.get(this.srtmPath, filename).toString());\n+        if (path.isEmpty())\n         {\n-            for (final String ext : new String[] { \"zip\", \"gz\", \"xz\", \"bz\", \"bz2\", \"tar\" })\n+            for (final String ext : POSSIBLE_COMPRESSED_EXTS)\n             {\n-                path = Paths.get(this.srtmPath, filename + \".\" + ext);\n-                if (path.toFile().isFile())\n+                path = this.fileFetcher\n+                        .apply(Paths.get(this.srtmPath, filename + \".\" + ext).toString());\n+                if (path.isPresent())\n                 {\n                     break;\n                 }\n             }\n         }\n-        if (!path.toFile().isFile())\n+        if (path.isEmpty())\n         {\n             return EMPTY_MAP;\n         }\n-        try (InputStream is = CompressionUtilities\n-                .getUncompressedInputStream(Files.newInputStream(path)))\n+        try (InputStream tis = path.get().read();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c636d008966f6cd18b2891f04683ca77ccd5837"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyNTM0Mw==", "bodyText": "we could instead return EMPTY_MAP after the for loop in the above block, around line 398", "url": "https://github.com/osmlab/atlas-checks/pull/398#discussion_r532925343", "createdAt": "2020-11-30T21:48:47Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/utility/ElevationUtilities.java", "diffHunk": "@@ -314,25 +376,32 @@ public void putMap(final Location location, final short[][] map)\n      */\n     private synchronized short[][] loadMap(final int lat, final int lon)\n     {\n+        if (this.fileFetcher == null)\n+        {\n+            logger.error(\"Cannot load maps -- fileFetcher is not initialized or is null\");\n+            return EMPTY_MAP;\n+        }\n         final String filename = this.getSrtmFileName(lat, lon);\n-        Path path = Paths.get(this.srtmPath, filename);\n-        if (!path.toFile().isFile())\n+        Optional<Resource> path = this.fileFetcher\n+                .apply(Paths.get(this.srtmPath, filename).toString());\n+        if (path.isEmpty())\n         {\n-            for (final String ext : new String[] { \"zip\", \"gz\", \"xz\", \"bz\", \"bz2\", \"tar\" })\n+            for (final String ext : POSSIBLE_COMPRESSED_EXTS)\n             {\n-                path = Paths.get(this.srtmPath, filename + \".\" + ext);\n-                if (path.toFile().isFile())\n+                path = this.fileFetcher\n+                        .apply(Paths.get(this.srtmPath, filename + \".\" + ext).toString());\n+                if (path.isPresent())\n                 {\n                     break;\n                 }\n             }\n         }\n-        if (!path.toFile().isFile())\n+        if (path.isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c636d008966f6cd18b2891f04683ca77ccd5837"}, "originalPosition": 163}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMDQ2MTkw", "url": "https://github.com/osmlab/atlas-checks/pull/398#pullrequestreview-543046190", "createdAt": "2020-12-02T17:00:00Z", "commit": {"oid": "0c636d008966f6cd18b2891f04683ca77ccd5837"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c487dc0217472c9dade3eca935bc4daf71b887d7", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/c487dc0217472c9dade3eca935bc4daf71b887d7", "committedDate": "2020-12-02T17:14:08Z", "message": "ExternalData: WIP commit\n\n* Use constructors to fetch necessary data or to store the file fetcher\n  to be used later.\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}, "afterCommit": {"oid": "758386889547fac0c0d0fbd3ccadb27057002d08", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/758386889547fac0c0d0fbd3ccadb27057002d08", "committedDate": "2020-12-09T18:13:19Z", "message": "ExternalData: Use constructors to fetch data\n\n* Use constructors to fetch necessary data or to store the file fetcher\n  to be used later. Each check can decide how it fetches data.\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eea48ca611380349431c919aa4924645550a3fef", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/eea48ca611380349431c919aa4924645550a3fef", "committedDate": "2020-12-09T18:30:16Z", "message": "FIXUP: 7e6f764a96baa00399f5f6e7320d3dc819037ccd\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}, "afterCommit": {"oid": "55fc1a855f46a45932454f39235724ee25844626", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/55fc1a855f46a45932454f39235724ee25844626", "committedDate": "2020-12-10T19:31:21Z", "message": "FIXUP: Use streams to get possible files\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjIzOTU2", "url": "https://github.com/osmlab/atlas-checks/pull/398#pullrequestreview-550623956", "createdAt": "2020-12-11T22:39:36Z", "commit": {"oid": "55fc1a855f46a45932454f39235724ee25844626"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMjozOTozNlrOIES4DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMjozOTozNlrOIES4DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3NDQ3Nw==", "bodyText": "I think we need to assign this.cache if it's null then return it. Could be causing some cache misses", "url": "https://github.com/osmlab/atlas-checks/pull/398#discussion_r541374477", "createdAt": "2020-12-11T22:39:36Z", "author": {"login": "seancoulter"}, "path": "src/main/java/org/openstreetmap/atlas/checks/base/ExternalDataFetcher.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.openstreetmap.atlas.checks.base;\n+\n+import java.io.InputStream;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob;\n+import org.openstreetmap.atlas.exception.CoreException;\n+import org.openstreetmap.atlas.generator.tools.filesystem.FileSystemHelper;\n+import org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper;\n+import org.openstreetmap.atlas.streaming.resource.Resource;\n+import org.openstreetmap.atlas.utilities.caching.ConcurrentResourceCache;\n+import org.openstreetmap.atlas.utilities.caching.strategies.NamespaceCachingStrategy;\n+import org.openstreetmap.atlas.utilities.runtime.Retry;\n+import org.openstreetmap.atlas.utilities.scalars.Duration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The fetcher to use for generic resources. The fetcher uses hadoop cache to reduce remote reads.\n+ * See {@link ShardedIntegrityChecksSparkJob#atlasFetcher}. This a separate class so that it can\n+ * implement {@link Serializable}\n+ *\n+ * @author Taylor Smock\n+ */\n+public class ExternalDataFetcher implements Function<String, Optional<Resource>>, Serializable\n+{\n+    /**\n+     * Cache external data sources locally\n+     *\n+     * @author Taylor Smock\n+     */\n+    private class ExternalDataResourceCache extends ConcurrentResourceCache\n+    {\n+        ExternalDataResourceCache()\n+        {\n+            super(new NamespaceCachingStrategy(GLOBAL_HADOOP_FILECACHE_NAMESPACE),\n+                    new ExternalFileFetcher());\n+        }\n+    }\n+\n+    /**\n+     * Create a serializable function to get external files for use with a\n+     * {@link org.openstreetmap.atlas.utilities.caching.ResourceCache}.\n+     *\n+     * @author Taylor Smock\n+     */\n+    private class ExternalFileFetcher implements Function<URI, Optional<Resource>>, Serializable\n+    {\n+        private static final long serialVersionUID = 1721253891315559418L;\n+\n+        @Override\n+        public Optional<Resource> apply(final URI uri)\n+        {\n+            final Retry retry = new Retry(RETRY_ATTEMPTS, Duration.ONE_SECOND).withQuadratic(true);\n+            final boolean exists = retry.run(() ->\n+            {\n+                try (InputStream inputStream = FileSystemHelper\n+                        .resource(uri.toString(), ExternalDataFetcher.this.configuration).read())\n+                {\n+                    return true;\n+                }\n+                catch (final Exception e)\n+                {\n+                    if (e.getMessage().contains(FileSystemHelper.FILE_NOT_FOUND))\n+                    {\n+                        return false;\n+                    }\n+                    else\n+                    {\n+                        throw new CoreException(\"Unable to test existence of {}\", uri, e);\n+                    }\n+                }\n+            });\n+            if (!exists)\n+            {\n+                if (!ExternalDataFetcher.this.silent)\n+                {\n+                    logger.warn(\"Fetcher: resource {} does not exist!\", uri);\n+                }\n+                return Optional.empty();\n+            }\n+            return Optional.ofNullable(FileSystemHelper.resource(uri.toString(),\n+                    ExternalDataFetcher.this.configuration));\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 724339604023082195L;\n+    private static final String GLOBAL_HADOOP_FILECACHE_NAMESPACE = \"__HadoopExternalFileCache_global_namespace__\";\n+    private static final Logger logger = LoggerFactory.getLogger(ExternalDataFetcher.class);\n+    /** Maximum number of retries for where an error occurs when getting a file */\n+    private static final int RETRY_ATTEMPTS = 5;\n+    /** The input folder path (same as the atlas file paths) */\n+    private final String input;\n+    /** The configuration used to create the cache */\n+    private final Map<String, String> configuration;\n+    /** The actual caching object */\n+    private final transient ExternalDataResourceCache cache;\n+    /**\n+     * {@code true} implies that the caller does not want to log that files are not present\n+     */\n+    private boolean silent;\n+\n+    /**\n+     * Create the fetcher to use for generic resources. The fetcher uses hadoop cache to reduce\n+     * remote reads. See {@link ShardedIntegrityChecksSparkJob#atlasFetcher}.\n+     *\n+     * @param input\n+     *            {@link String} input folder path\n+     * @param configuration\n+     *            {@link org.openstreetmap.atlas.generator.tools.spark.SparkJob} configuration map\n+     */\n+    public ExternalDataFetcher(final String input, final Map<String, String> configuration)\n+    {\n+        this.input = input;\n+        this.configuration = configuration;\n+        this.cache = new ExternalDataResourceCache();\n+    }\n+\n+    @Override\n+    public Optional<Resource> apply(final String string)\n+    {\n+        return this.getCache().get(this.getUri(string));\n+    }\n+\n+    /**\n+     * Make missed file messages silent (use when checking for files -- please log actual issues\n+     * when this is used) Unfortunately, this does not suppress <i>all</i> messages from missed\n+     * files.\n+     *\n+     * @param silent\n+     *            {@code true} suppresses some logging messages from non-existent files\n+     */\n+    public void setSilent(final boolean silent)\n+    {\n+        this.silent = silent;\n+    }\n+\n+    /**\n+     * @return The resource cacher to use\n+     */\n+    @Nonnull\n+    private ExternalDataResourceCache getCache()\n+    {\n+        return this.cache != null ? this.cache : new ExternalDataResourceCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55fc1a855f46a45932454f39235724ee25844626"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxOTAxNjA4", "url": "https://github.com/osmlab/atlas-checks/pull/398#pullrequestreview-551901608", "createdAt": "2020-12-14T21:19:26Z", "commit": {"oid": "89ff96d8e640781926831bee590d3248469a00b3"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02b050e16683734b5f082f2b2ac9669d55d3d4f8", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/02b050e16683734b5f082f2b2ac9669d55d3d4f8", "committedDate": "2020-12-16T14:07:27Z", "message": "Gradle: Add JUnit5\n\nJUnit5 has better support for exceptions (assertThrows,\nassertDoesNotThrow, etc.).\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8158f6b4e29f332bd338ca8dfaa7b47761ce7ece", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/8158f6b4e29f332bd338ca8dfaa7b47761ce7ece", "committedDate": "2020-12-16T16:24:30Z", "message": "ExternalData: Allow checks to obtain and use arbitrary external data\n\nWaterWayChecks: Add note in documentation about resolution and NASA SRTM\nElevationUtilities: External data: Add tests to ensure that data is\nfetched.\nExternalData:\n* Use ResourceCache to get data\n* Use check constructors to fetch necessary data or to store the file fetcher\n  to be used later. Each check can decide how it fetches data.\n* See docs/externalData.md for implementation notes.\nCheckResourceLoader: Fix all code smells\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89ff96d8e640781926831bee590d3248469a00b3", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/89ff96d8e640781926831bee590d3248469a00b3", "committedDate": "2020-12-14T20:00:39Z", "message": "CheckResourceLoader: Fix all code smells\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}, "afterCommit": {"oid": "8158f6b4e29f332bd338ca8dfaa7b47761ce7ece", "author": {"user": {"login": "tsmock", "name": "Taylor Smock"}}, "url": "https://github.com/osmlab/atlas-checks/commit/8158f6b4e29f332bd338ca8dfaa7b47761ce7ece", "committedDate": "2020-12-16T16:24:30Z", "message": "ExternalData: Allow checks to obtain and use arbitrary external data\n\nWaterWayChecks: Add note in documentation about resolution and NASA SRTM\nElevationUtilities: External data: Add tests to ensure that data is\nfetched.\nExternalData:\n* Use ResourceCache to get data\n* Use check constructors to fetch necessary data or to store the file fetcher\n  to be used later. Each check can decide how it fetches data.\n* See docs/externalData.md for implementation notes.\nCheckResourceLoader: Fix all code smells\n\nSigned-off-by: Taylor Smock <tsmock@fb.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NjExNjky", "url": "https://github.com/osmlab/atlas-checks/pull/398#pullrequestreview-556611692", "createdAt": "2020-12-21T19:25:43Z", "commit": {"oid": "8158f6b4e29f332bd338ca8dfaa7b47761ce7ece"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMTUwODEw", "url": "https://github.com/osmlab/atlas-checks/pull/398#pullrequestreview-560150810", "createdAt": "2020-12-30T18:09:49Z", "commit": {"oid": "8158f6b4e29f332bd338ca8dfaa7b47761ce7ece"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3209, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}