{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MDIwOTEw", "number": 286, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDo0MDowNVrOD70T4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDo0MDo0M1rOD70Upw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDQ5NjMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/database/FlagDatabaseSubCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDo0MDowNVrOGUYGSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDo0MDowNVrOGUYGSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxOTUzMQ==", "bodyText": "The unique identifiers are unsorted so in this case it would be a good idea to call .sorted() on the stream before collecting it.", "url": "https://github.com/osmlab/atlas-checks/pull/286#discussion_r424019531", "createdAt": "2020-05-12T20:40:05Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/database/FlagDatabaseSubCommand.java", "diffHunk": "@@ -239,7 +240,8 @@ public void executeFlagStatement(final PreparedStatement sql, final CheckFlag fl\n     {\n         try\n         {\n-            sql.setString(1, flag.getIdentifier());\n+            sql.setString(1, flag.getUniqueIdentifiers().stream().map(String::toString)\n+                    .collect(Collectors.joining(\",\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03eba7576b63c2c1cb09e5deba15dd87b5a508c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDQ5ODMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/flag/serializer/CheckFlagDeserializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDo0MDo0M1rOGUYHhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDowNzowM1rOGXF0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxOTg0NA==", "bodyText": "Same thing about .sorted().", "url": "https://github.com/osmlab/atlas-checks/pull/286#discussion_r424019844", "createdAt": "2020-05-12T20:40:43Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/flag/serializer/CheckFlagDeserializer.java", "diffHunk": "@@ -34,11 +39,27 @@ public CheckFlag deserialize(final JsonElement json, final Type typeOfT,\n         final JsonObject properties = full.get(PROPERTIES).getAsJsonObject();\n         final String checkName = properties.get(GENERATOR).getAsString();\n         final String instruction = properties.get(INSTRUCTIONS).getAsString();\n-        final String flagIdentifier = properties.get(ID).getAsString();\n+        final String flagIdentifier = properties.get(IDENTIFIERS) == null\n+                ? properties.get(ID).getAsString()\n+                // Convert array of ids into comma delimited string\n+                : this.parseIdentifiers((JsonArray) properties.get(IDENTIFIERS));\n         final CheckFlag flag = new CheckFlag(flagIdentifier);\n         flag.addInstruction(instruction);\n         flag.setChallengeName(checkName);\n \n         return flag;\n     }\n+\n+    /**\n+     * Returns a comma delimited string of identifiers.\n+     * \n+     * @param identifiers\n+     *            - array of flag identifiers\n+     * @return - comma delimited string\n+     */\n+    private String parseIdentifiers(final JsonArray identifiers)\n+    {\n+        return Arrays.asList(new Gson().fromJson(identifiers, String[].class)).stream()\n+                .map(String::toString).collect(Collectors.joining(\",\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03eba7576b63c2c1cb09e5deba15dd87b5a508c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NTcxNg==", "bodyText": "This should be fixed now", "url": "https://github.com/osmlab/atlas-checks/pull/286#discussion_r426865716", "createdAt": "2020-05-18T20:07:03Z", "author": {"login": "danielduhh"}, "path": "src/main/java/org/openstreetmap/atlas/checks/flag/serializer/CheckFlagDeserializer.java", "diffHunk": "@@ -34,11 +39,27 @@ public CheckFlag deserialize(final JsonElement json, final Type typeOfT,\n         final JsonObject properties = full.get(PROPERTIES).getAsJsonObject();\n         final String checkName = properties.get(GENERATOR).getAsString();\n         final String instruction = properties.get(INSTRUCTIONS).getAsString();\n-        final String flagIdentifier = properties.get(ID).getAsString();\n+        final String flagIdentifier = properties.get(IDENTIFIERS) == null\n+                ? properties.get(ID).getAsString()\n+                // Convert array of ids into comma delimited string\n+                : this.parseIdentifiers((JsonArray) properties.get(IDENTIFIERS));\n         final CheckFlag flag = new CheckFlag(flagIdentifier);\n         flag.addInstruction(instruction);\n         flag.setChallengeName(checkName);\n \n         return flag;\n     }\n+\n+    /**\n+     * Returns a comma delimited string of identifiers.\n+     * \n+     * @param identifiers\n+     *            - array of flag identifiers\n+     * @return - comma delimited string\n+     */\n+    private String parseIdentifiers(final JsonArray identifiers)\n+    {\n+        return Arrays.asList(new Gson().fromJson(identifiers, String[].class)).stream()\n+                .map(String::toString).collect(Collectors.joining(\",\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxOTg0NA=="}, "originalCommit": {"oid": "c03eba7576b63c2c1cb09e5deba15dd87b5a508c"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3294, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}