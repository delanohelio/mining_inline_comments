{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzcwMzUz", "number": 241, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMTowNzozNVrODXtLgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODoyNToxNFrODX8eLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTg0MDY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/BigNodeBadDataCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMTowNzozNVrOFdJiaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMTowNzozNVrOFdJiaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwOTI4OA==", "bodyText": "nit: extra space", "url": "https://github.com/osmlab/atlas-checks/pull/241#discussion_r366109288", "createdAt": "2020-01-14T01:07:35Z", "author": {"login": "danielduhh"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/BigNodeBadDataCheck.java", "diffHunk": "@@ -77,29 +78,43 @@ public boolean validCheckForObject(final AtlasObject object)\n         {\n             return Optional.empty();\n         }\n-        final int allPathsCount = bigNode.allPaths().size();\n+\n         final int junctionEdgesCount = bigNode.junctionEdges().size();\n-        final Set<RestrictedPath> turnRestrictions = bigNode.turnRestrictions();\n-        final int turnRestrictionCount = turnRestrictions.size();\n-        // Get list of restricted path OSM ids\n-        final List<Long> restrictedPathOsmIds = turnRestrictions.stream()\n-                .flatMap(restrictedPath -> Iterables.asList(restrictedPath.getRoute()).stream()\n-                        .map(Edge::getOsmIdentifier))\n-                .collect(Collectors.toList());\n-\n-        if (allPathsCount > maxNumberPathsThreshold\n-                || junctionEdgesCount > maxNumberJunctionEdgesThreshold)\n+        if (junctionEdgesCount > maxNumberJunctionEdgesThreshold)\n         {\n             final CheckFlag flag = createFlag(bigNode,\n-                    this.getLocalizedInstruction(0, allPathsCount, junctionEdgesCount,\n-                            turnRestrictionCount, restrictedPathOsmIds.toString()));\n+                    this.getLocalizedInstruction(0, junctionEdgesCount));\n \n             bigNode.edges().forEach(flag::addObject);\n             // Add map pin at each BigNode Node\n             bigNode.nodes().forEach(b -> flag.addPoint(b.getLocation()));\n \n             return Optional.of(flag);\n         }\n+        else\n+        {\n+            final int allPathsCount = bigNode.allPaths().size();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "359815f92c84c4ef7d88eec300f8823bf83c0c7b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDM0NjA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/BigNodeBadDataCheck.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODoyNToxNFrOFdhWYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODozMTo1N1rOFdhjYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5OTQyNg==", "bodyText": "@Bentleysb Great improvement on the run time. I only have one doubt. So, here are you trying to get bigNode.allPaths() only if no other flag conditions are met so that you can save run time!!", "url": "https://github.com/osmlab/atlas-checks/pull/241#discussion_r366499426", "createdAt": "2020-01-14T18:25:14Z", "author": {"login": "smaheshwaram"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/BigNodeBadDataCheck.java", "diffHunk": "@@ -77,29 +78,42 @@ public boolean validCheckForObject(final AtlasObject object)\n         {\n             return Optional.empty();\n         }\n-        final int allPathsCount = bigNode.allPaths().size();\n+\n         final int junctionEdgesCount = bigNode.junctionEdges().size();\n-        final Set<RestrictedPath> turnRestrictions = bigNode.turnRestrictions();\n-        final int turnRestrictionCount = turnRestrictions.size();\n-        // Get list of restricted path OSM ids\n-        final List<Long> restrictedPathOsmIds = turnRestrictions.stream()\n-                .flatMap(restrictedPath -> Iterables.asList(restrictedPath.getRoute()).stream()\n-                        .map(Edge::getOsmIdentifier))\n-                .collect(Collectors.toList());\n-\n-        if (allPathsCount > maxNumberPathsThreshold\n-                || junctionEdgesCount > maxNumberJunctionEdgesThreshold)\n+        if (junctionEdgesCount > maxNumberJunctionEdgesThreshold)\n         {\n             final CheckFlag flag = createFlag(bigNode,\n-                    this.getLocalizedInstruction(0, allPathsCount, junctionEdgesCount,\n-                            turnRestrictionCount, restrictedPathOsmIds.toString()));\n+                    this.getLocalizedInstruction(0, junctionEdgesCount));\n \n             bigNode.edges().forEach(flag::addObject);\n             // Add map pin at each BigNode Node\n             bigNode.nodes().forEach(b -> flag.addPoint(b.getLocation()));\n \n             return Optional.of(flag);\n         }\n+        else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16237ba7887e1ce83a610d8d79460837b90582cf"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwMTIyMQ==", "bodyText": "That is the idea. Although currently the number of junction edges is the only other flag condition.", "url": "https://github.com/osmlab/atlas-checks/pull/241#discussion_r366501221", "createdAt": "2020-01-14T18:28:50Z", "author": {"login": "Bentleysb"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/BigNodeBadDataCheck.java", "diffHunk": "@@ -77,29 +78,42 @@ public boolean validCheckForObject(final AtlasObject object)\n         {\n             return Optional.empty();\n         }\n-        final int allPathsCount = bigNode.allPaths().size();\n+\n         final int junctionEdgesCount = bigNode.junctionEdges().size();\n-        final Set<RestrictedPath> turnRestrictions = bigNode.turnRestrictions();\n-        final int turnRestrictionCount = turnRestrictions.size();\n-        // Get list of restricted path OSM ids\n-        final List<Long> restrictedPathOsmIds = turnRestrictions.stream()\n-                .flatMap(restrictedPath -> Iterables.asList(restrictedPath.getRoute()).stream()\n-                        .map(Edge::getOsmIdentifier))\n-                .collect(Collectors.toList());\n-\n-        if (allPathsCount > maxNumberPathsThreshold\n-                || junctionEdgesCount > maxNumberJunctionEdgesThreshold)\n+        if (junctionEdgesCount > maxNumberJunctionEdgesThreshold)\n         {\n             final CheckFlag flag = createFlag(bigNode,\n-                    this.getLocalizedInstruction(0, allPathsCount, junctionEdgesCount,\n-                            turnRestrictionCount, restrictedPathOsmIds.toString()));\n+                    this.getLocalizedInstruction(0, junctionEdgesCount));\n \n             bigNode.edges().forEach(flag::addObject);\n             // Add map pin at each BigNode Node\n             bigNode.nodes().forEach(b -> flag.addPoint(b.getLocation()));\n \n             return Optional.of(flag);\n         }\n+        else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5OTQyNg=="}, "originalCommit": {"oid": "16237ba7887e1ce83a610d8d79460837b90582cf"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwMjc1Mw==", "bodyText": "So we cannot avoid running into the case where it takes lot of time going through all the big node paths but we can at least save time on checking conditions ahead like junction edges. Cool. Thanks.", "url": "https://github.com/osmlab/atlas-checks/pull/241#discussion_r366502753", "createdAt": "2020-01-14T18:31:57Z", "author": {"login": "smaheshwaram"}, "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/BigNodeBadDataCheck.java", "diffHunk": "@@ -77,29 +78,42 @@ public boolean validCheckForObject(final AtlasObject object)\n         {\n             return Optional.empty();\n         }\n-        final int allPathsCount = bigNode.allPaths().size();\n+\n         final int junctionEdgesCount = bigNode.junctionEdges().size();\n-        final Set<RestrictedPath> turnRestrictions = bigNode.turnRestrictions();\n-        final int turnRestrictionCount = turnRestrictions.size();\n-        // Get list of restricted path OSM ids\n-        final List<Long> restrictedPathOsmIds = turnRestrictions.stream()\n-                .flatMap(restrictedPath -> Iterables.asList(restrictedPath.getRoute()).stream()\n-                        .map(Edge::getOsmIdentifier))\n-                .collect(Collectors.toList());\n-\n-        if (allPathsCount > maxNumberPathsThreshold\n-                || junctionEdgesCount > maxNumberJunctionEdgesThreshold)\n+        if (junctionEdgesCount > maxNumberJunctionEdgesThreshold)\n         {\n             final CheckFlag flag = createFlag(bigNode,\n-                    this.getLocalizedInstruction(0, allPathsCount, junctionEdgesCount,\n-                            turnRestrictionCount, restrictedPathOsmIds.toString()));\n+                    this.getLocalizedInstruction(0, junctionEdgesCount));\n \n             bigNode.edges().forEach(flag::addObject);\n             // Add map pin at each BigNode Node\n             bigNode.nodes().forEach(b -> flag.addPoint(b.getLocation()));\n \n             return Optional.of(flag);\n         }\n+        else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5OTQyNg=="}, "originalCommit": {"oid": "16237ba7887e1ce83a610d8d79460837b90582cf"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3243, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}