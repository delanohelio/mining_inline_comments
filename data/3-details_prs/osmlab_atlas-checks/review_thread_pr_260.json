{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MzY3MDM1", "number": 260, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzoxNDoyM1rODg4zPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo1OTowMFrODg7rhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODExNjQ3OnYy", "diffSide": "RIGHT", "path": "src/test/resources/org/openstreetmap/atlas/checks/maproulette/checksConfig.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzoxNDoyM1rOFrV6Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzoxNDoyM1rOFrV6Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MjA0Mg==", "bodyText": "Nit: should be newline here", "url": "https://github.com/osmlab/atlas-checks/pull/260#discussion_r380992042", "createdAt": "2020-02-18T23:14:23Z", "author": {"login": "seancoulter"}, "path": "src/test/resources/org/openstreetmap/atlas/checks/maproulette/checksConfig.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"SomeCheck\": {\n+    \"challenge\": {\n+      \"name\": \"Spiky Buildings\"\n+    }\n+  },\n+  \"SomeOtherCheck\": {\n+    \"challenge\": {\n+      \"name\": \"Intersecting Lines\"\n+    }\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c068bde52daea513c01b2b1c33e03f87e0f45da8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODEzMzUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommandTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzoyMzowNFrOFrWEuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjowNzo0NlrOFrY5Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5NDc0Nw==", "bodyText": "runAndTest could call this method to cut down on some duplication", "url": "https://github.com/osmlab/atlas-checks/pull/260#discussion_r380994747", "createdAt": "2020-02-18T23:23:04Z", "author": {"login": "seancoulter"}, "path": "src/test/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommandTest.java", "diffHunk": "@@ -83,6 +116,30 @@ public void writeFiles()\n         }\n     }\n \n+    /**\n+     * Similar to runAndTest, however this function will return a {@link TestMapRouletteConnection}\n+     *\n+     * @param additionalArguments\n+     *            String[] of extra arguments for {@link MapRouletteUploadCommand}, to add to the\n+     *            data i/o locations and server config\n+     * @return TestMapRouletteConnection\n+     */\n+    private TestMapRouletteConnection run(final String[] additionalArguments)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c068bde52daea513c01b2b1c33e03f87e0f45da8"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0MDk3NQ==", "bodyText": "Yup, good call. This was handled in the latest commit", "url": "https://github.com/osmlab/atlas-checks/pull/260#discussion_r381040975", "createdAt": "2020-02-19T02:07:46Z", "author": {"login": "danielduhh"}, "path": "src/test/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommandTest.java", "diffHunk": "@@ -83,6 +116,30 @@ public void writeFiles()\n         }\n     }\n \n+    /**\n+     * Similar to runAndTest, however this function will return a {@link TestMapRouletteConnection}\n+     *\n+     * @param additionalArguments\n+     *            String[] of extra arguments for {@link MapRouletteUploadCommand}, to add to the\n+     *            data i/o locations and server config\n+     * @return TestMapRouletteConnection\n+     */\n+    private TestMapRouletteConnection run(final String[] additionalArguments)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5NDc0Nw=="}, "originalCommit": {"oid": "c068bde52daea513c01b2b1c33e03f87e0f45da8"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODU4ODIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommandTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo1OTowMFrOFraZkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo1OTowMFrOFraZkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NTYxOQ==", "bodyText": "nice testing! cool to see it java and how I can try and create testing in python.", "url": "https://github.com/osmlab/atlas-checks/pull/260#discussion_r381065619", "createdAt": "2020-02-19T03:59:00Z", "author": {"login": "dcastrowa"}, "path": "src/test/java/org/openstreetmap/atlas/checks/maproulette/MapRouletteUploadCommandTest.java", "diffHunk": "@@ -57,7 +60,39 @@ public void testCountryFilter()\n     public void testExecute()\n     {\n         final String[] additionalArguments = {};\n-        this.runAndTest(additionalArguments, 1, 2, 2);\n+        this.runAndTest(additionalArguments, 1, 3, 3);\n+    }\n+\n+    @Test\n+    public void testGetCountryDisplayName()\n+    {\n+        final Optional<String> countries1 = Optional.of(\"CAN,MEX\");\n+        final Optional<String> countries2 = Optional.of(\"USA\");\n+        final MapRouletteUploadCommand command = new MapRouletteUploadCommand();\n+        final String displayCountryNames1 = command.getCountryDisplayName(countries1);\n+        final String displayCountryNames2 = command.getCountryDisplayName(countries2);\n+\n+        Assert.assertEquals(\"Canada, Mexico\", displayCountryNames1);\n+        Assert.assertEquals(\"United States\", displayCountryNames2);\n+    }\n+\n+    @Test\n+    public void testGetCustomChallengeName()\n+    {\n+        final String[] additionalArguments = { String.format(\"-config=%s\",\n+                MapRouletteUploadCommandTest.class.getResource(\"checksConfig.json\").getPath()) };\n+\n+        final TestMapRouletteConnection connection = this.run(additionalArguments);\n+        final Set<Project> projects = connection.uploadedProjects();\n+\n+        final List<String> challengeNames = projects.stream().flatMap(project -> connection\n+                .challengesForProject(project).stream().map(Challenge::getName))\n+                .collect(Collectors.toList());\n+        Collections.sort(challengeNames);\n+\n+        Assert.assertEquals(\"Canada - Spiky Buildings\", challengeNames.get(0));\n+        Assert.assertEquals(\"Mexico, Belize - Intersecting Lines\", challengeNames.get(1));\n+        Assert.assertEquals(\"United States - Address Point Match\", challengeNames.get(2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf3dd76f3a9614318fd0d768acb561e12c220d36"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3267, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}