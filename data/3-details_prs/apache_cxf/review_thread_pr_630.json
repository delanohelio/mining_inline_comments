{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2ODA1NDQw", "number": 630, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMzo1NToyN1rODap2yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMzozODowOFrODbF9aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mjc1MzM5OnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMzo1NToyN1rOFhuq3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMzo1NToyN1rOFhuq3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkxMTk2Ng==", "bodyText": "Hi @jgallimore, thanks for the PR. I think CXF should not assume any intrinsic knowledge about the URI scheme and handle it in a specific way. For example,  what about handling jar:file? Or any other custom schemes?\nAlthough the reply on spec list (https://www.eclipse.org/lists/jaxrs-dev/msg00774.html) explicitly mentions that JAX-RS context is REST-over-HTTP (the CXF case), we could certainly make UriBuilder more flexible if the general solution could be found.\nHope it makes sense, thank you.", "url": "https://github.com/apache/cxf/pull/630#discussion_r370911966", "createdAt": "2020-01-25T03:55:27Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java", "diffHunk": "@@ -651,8 +651,8 @@ private void setUriParts(URI uri) {\n         } else {\n             schemeSpecificPart = uri.getSchemeSpecificPart();\n         }\n-        if (scheme != null && host == null && (query == null || query.isEmpty()) && userInfo == null\n-            && uri.getSchemeSpecificPart() != null) {\n+        if (scheme != null && !\"file\".equalsIgnoreCase(scheme) && host == null && (query == null || query.isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9059a7eaa8d95a5e7b64bb7a84816d29151e01ee"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzIwMDgxOnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMToyOTo1NFrOFiW8eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMToyOTo1NFrOFiW8eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3MTgzNA==", "bodyText": "We have a helper method for it,  CollectionUtils.isEmpty(query) from org.apache.cxf.common.util", "url": "https://github.com/apache/cxf/pull/630#discussion_r371571834", "createdAt": "2020-01-28T01:29:54Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java", "diffHunk": "@@ -661,6 +662,14 @@ private void setUriParts(URI uri) {\n         }\n     }\n \n+    private boolean queryIsEmpty() {\n+        return query == null || query.isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c056a50c79f390f4e777bf717c693adfd5b124"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzM1Njg0OnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMzozNzowNlrOFiYbpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMzozNzowNlrOFiYbpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NjE5OA==", "bodyText": "It would be good to check if uri.getPath() is not null, otherwise \"//\" + uri.getPath() becomes something like //null", "url": "https://github.com/apache/cxf/pull/630#discussion_r371596198", "createdAt": "2020-01-28T03:37:06Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java", "diffHunk": "@@ -661,6 +662,14 @@ private void setUriParts(URI uri) {\n         }\n     }\n \n+    private boolean queryIsEmpty() {\n+        return query == null || query.isEmpty();\n+    }\n+\n+    private boolean sspMatchessPath(final URI uri) {\n+        return uri.getRawSchemeSpecificPart() != null && uri.getRawSchemeSpecificPart().equals(\"//\" + uri.getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c056a50c79f390f4e777bf717c693adfd5b124"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzM1Nzg0OnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMzozODowOFrOFiYcOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMzozODowOFrOFiYcOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NjM0Ng==", "bodyText": "Matchess is misspelled, schemeSpecificPartMatchesUriPath would be probably better name (despite being long).", "url": "https://github.com/apache/cxf/pull/630#discussion_r371596346", "createdAt": "2020-01-28T03:38:08Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java", "diffHunk": "@@ -661,6 +662,14 @@ private void setUriParts(URI uri) {\n         }\n     }\n \n+    private boolean queryIsEmpty() {\n+        return query == null || query.isEmpty();\n+    }\n+\n+    private boolean sspMatchessPath(final URI uri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c056a50c79f390f4e777bf717c693adfd5b124"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3652, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}