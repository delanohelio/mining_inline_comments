{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NjkwMTI3", "number": 680, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMjoyMzoyOFrOEGK7Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMjozNzozM1rOEGLEMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTA1OTI3OnYy", "diffSide": "RIGHT", "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIInstantiator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMjoyMzoyOFrOGkzX8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo0NjowM1rOGlSkBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0MzYzNA==", "bodyText": "Won't IdentityHashMap be a bit more appropriate here since we track references essentially?", "url": "https://github.com/apache/cxf/pull/680#discussion_r441243634", "createdAt": "2020-06-17T02:23:28Z", "author": {"login": "reta"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIInstantiator.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.microprofile.client.cdi;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.cxf.jaxrs.impl.ConfigurableImpl.Instantiator;\n+\n+\n+public final class CDIInstantiator implements Instantiator {\n+\n+    static final CDIInstantiator INSTANCE = new CDIInstantiator();\n+\n+    private final Map<Object, Instance<?>> cdiInstances = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a818ee3e63c6e4b1011a66cf39da32c181e96f89"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1NDYzMQ==", "bodyText": "Agreed - good catch.", "url": "https://github.com/apache/cxf/pull/680#discussion_r441754631", "createdAt": "2020-06-17T18:46:03Z", "author": {"login": "andymc12"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIInstantiator.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.microprofile.client.cdi;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.cxf.jaxrs.impl.ConfigurableImpl.Instantiator;\n+\n+\n+public final class CDIInstantiator implements Instantiator {\n+\n+    static final CDIInstantiator INSTANCE = new CDIInstantiator();\n+\n+    private final Map<Object, Instance<?>> cdiInstances = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0MzYzNA=="}, "originalCommit": {"oid": "a818ee3e63c6e4b1011a66cf39da32c181e96f89"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTA3MTEyOnYy", "diffSide": "RIGHT", "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMjozMDozMVrOGkzfTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo0NjoxNFrOGlSkdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NTUxNw==", "bodyText": "Minor, probably should be final", "url": "https://github.com/apache/cxf/pull/680#discussion_r441245517", "createdAt": "2020-06-17T02:30:31Z", "author": {"login": "reta"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java", "diffHunk": "@@ -42,6 +43,8 @@\n         MessageBodyWriter.class, MessageBodyReader.class, ResponseExceptionMapper.class};\n     private static final String CONFIG_KEY_DISABLE_MAPPER = \"microprofile.rest.client.disable.default.mapper\";\n \n+    private Instantiator instantiator = CDIFacade.getInstantiator().orElse(super.getInstantiator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a818ee3e63c6e4b1011a66cf39da32c181e96f89"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1NDc0Mw==", "bodyText": "Agreed.", "url": "https://github.com/apache/cxf/pull/680#discussion_r441754743", "createdAt": "2020-06-17T18:46:14Z", "author": {"login": "andymc12"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java", "diffHunk": "@@ -42,6 +43,8 @@\n         MessageBodyWriter.class, MessageBodyReader.class, ResponseExceptionMapper.class};\n     private static final String CONFIG_KEY_DISABLE_MAPPER = \"microprofile.rest.client.disable.default.mapper\";\n \n+    private Instantiator instantiator = CDIFacade.getInstantiator().orElse(super.getInstantiator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NTUxNw=="}, "originalCommit": {"oid": "a818ee3e63c6e4b1011a66cf39da32c181e96f89"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTA4MjA4OnYy", "diffSide": "RIGHT", "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMjozNzozM1rOGkzmGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTo1MDo0M1rOGlYpTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NzI1OA==", "bodyText": "A bit more thoughts on that, the MicroProfileClientConfigurableImpl is created from CxfTypeSafeClientBuilder, which it turn is created from:\n\nCDI: RestClientBean\nNon-CDI: CxfRestClientBuilderResolver\n\nMay be we could pass the instantiator through CxfTypeSafeClientBuilder? Fe RestClientBean could rely on CDI one while CxfRestClientBuilderResolver could use default.\nWDYT?", "url": "https://github.com/apache/cxf/pull/680#discussion_r441247258", "createdAt": "2020-06-17T02:37:33Z", "author": {"login": "reta"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java", "diffHunk": "@@ -42,6 +43,8 @@\n         MessageBodyWriter.class, MessageBodyReader.class, ResponseExceptionMapper.class};\n     private static final String CONFIG_KEY_DISABLE_MAPPER = \"microprofile.rest.client.disable.default.mapper\";\n \n+    private Instantiator instantiator = CDIFacade.getInstantiator().orElse(super.getInstantiator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a818ee3e63c6e4b1011a66cf39da32c181e96f89"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg0MDkwOQ==", "bodyText": "I think it is a good idea, but when I tried it out, I realized that it breaks one of the TCK test cases - it fails when a new client is built using the RestClientBuilder from within a CDI-managed bean - specifically, this test.", "url": "https://github.com/apache/cxf/pull/680#discussion_r441840909", "createdAt": "2020-06-17T21:20:18Z", "author": {"login": "andymc12"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java", "diffHunk": "@@ -42,6 +43,8 @@\n         MessageBodyWriter.class, MessageBodyReader.class, ResponseExceptionMapper.class};\n     private static final String CONFIG_KEY_DISABLE_MAPPER = \"microprofile.rest.client.disable.default.mapper\";\n \n+    private Instantiator instantiator = CDIFacade.getInstantiator().orElse(super.getInstantiator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NzI1OA=="}, "originalCommit": {"oid": "a818ee3e63c6e4b1011a66cf39da32c181e96f89"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1NDI4NQ==", "bodyText": "Gotcha, thanks !", "url": "https://github.com/apache/cxf/pull/680#discussion_r441854285", "createdAt": "2020-06-17T21:50:43Z", "author": {"login": "reta"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientConfigurableImpl.java", "diffHunk": "@@ -42,6 +43,8 @@\n         MessageBodyWriter.class, MessageBodyReader.class, ResponseExceptionMapper.class};\n     private static final String CONFIG_KEY_DISABLE_MAPPER = \"microprofile.rest.client.disable.default.mapper\";\n \n+    private Instantiator instantiator = CDIFacade.getInstantiator().orElse(super.getInstantiator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NzI1OA=="}, "originalCommit": {"oid": "a818ee3e63c6e4b1011a66cf39da32c181e96f89"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3582, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}