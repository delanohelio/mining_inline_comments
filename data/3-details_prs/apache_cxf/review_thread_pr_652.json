{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MTc3MTk2", "number": 652, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODowMTowOFrODpxv9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODoxMzo1N1rODpx8PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTMzMzAwOnYy", "diffSide": "RIGHT", "path": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/filters/JwsJwksJwtAccessTokenValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODowMTowOFrOF5KQfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODowMTowOFrOF5KQfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4MTIxNA==", "bodyText": "Can you add some javadoc explaining what the new validator is doing?", "url": "https://github.com/apache/cxf/pull/652#discussion_r395481214", "createdAt": "2020-03-20T08:01:08Z", "author": {"login": "coheigea"}, "path": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/filters/JwsJwksJwtAccessTokenValidator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.rs.security.oauth2.filters;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.cxf.rs.security.jose.jaxrs.JsonWebKeysProvider;\n+import org.apache.cxf.rs.security.jose.jwk.JsonWebKey;\n+import org.apache.cxf.rs.security.jose.jwk.JsonWebKeys;\n+import org.apache.cxf.rs.security.jose.jwk.PublicKeyUse;\n+import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n+import org.apache.cxf.rs.security.jose.jws.JwsUtils;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268d612ecc158f886d4e262bf4251e4d78211b76"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTM2MDUxOnYy", "diffSide": "RIGHT", "path": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/filters/JwsJwksJwtAccessTokenValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODoxMjoyOVrOF5KhNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDoxNDo1OVrOF5N_YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4NTQ5NQ==", "bodyText": "I find it hard to follow the logic in this method. Why is the JwkHolder added to jsonWebKeys for kid if the key ids don't match (and then removed on line 77?)", "url": "https://github.com/apache/cxf/pull/652#discussion_r395485495", "createdAt": "2020-03-20T08:12:29Z", "author": {"login": "coheigea"}, "path": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/filters/JwsJwksJwtAccessTokenValidator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.rs.security.oauth2.filters;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.cxf.rs.security.jose.jaxrs.JsonWebKeysProvider;\n+import org.apache.cxf.rs.security.jose.jwk.JsonWebKey;\n+import org.apache.cxf.rs.security.jose.jwk.JsonWebKeys;\n+import org.apache.cxf.rs.security.jose.jwk.PublicKeyUse;\n+import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n+import org.apache.cxf.rs.security.jose.jws.JwsUtils;\n+\n+public class JwsJwksJwtAccessTokenValidator extends JwtAccessTokenValidator {\n+\n+    final Map<String, JwkHolder> jsonWebKeys = new ConcurrentHashMap<>();\n+\n+    private String jwksURL;\n+\n+    @Override\n+    protected JwsSignatureVerifier getInitializedSignatureVerifier(JwsHeaders jwsHeaders) {\n+        Objects.requireNonNull(jwsHeaders.getKeyId());\n+        return jsonWebKeys.computeIfAbsent(jwsHeaders.getKeyId(), keyId -> updateJwk(keyId)).getJwsSignatureVerifier();\n+    }\n+\n+    public void setJwksURL(String jwksURL) {\n+        this.jwksURL = jwksURL;\n+    }\n+\n+    @Override\n+    public void setJwsVerifier(JwsSignatureVerifier theJwsVerifier) {\n+        throw new IllegalArgumentException(\"Actual JwsSignatureVerifier will be populated from the JWK Set URL\");\n+    }\n+\n+    private JwkHolder updateJwk(String keyId) {\n+        Objects.requireNonNull(jwksURL, \"JWK Set URL must be specified\");\n+        JwkHolder jwkHolder = null;\n+        final Set<String> kids = new HashSet<>();\n+        for (JsonWebKey jwk : getJsonWebKeys().getKeys()) {\n+            if (PublicKeyUse.ENCRYPT != jwk.getPublicKeyUse()) {\n+                final String kid = jwk.getKeyId();\n+                kids.add(kid);\n+                final JwkHolder h = new JwkHolder(jwk);\n+                if (keyId.equals(kid)) {\n+                    jwkHolder = h;\n+                } else {\n+                    jsonWebKeys.putIfAbsent(kid, h);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268d612ecc158f886d4e262bf4251e4d78211b76"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0MjM2OQ==", "bodyText": "added new jwk only; at L77 old keys removed\nthis case covered in JwsJwksJwtAccessTokenValidatorTest", "url": "https://github.com/apache/cxf/pull/652#discussion_r395542369", "createdAt": "2020-03-20T10:14:59Z", "author": {"login": "amarkevich"}, "path": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/filters/JwsJwksJwtAccessTokenValidator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.rs.security.oauth2.filters;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.cxf.rs.security.jose.jaxrs.JsonWebKeysProvider;\n+import org.apache.cxf.rs.security.jose.jwk.JsonWebKey;\n+import org.apache.cxf.rs.security.jose.jwk.JsonWebKeys;\n+import org.apache.cxf.rs.security.jose.jwk.PublicKeyUse;\n+import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n+import org.apache.cxf.rs.security.jose.jws.JwsUtils;\n+\n+public class JwsJwksJwtAccessTokenValidator extends JwtAccessTokenValidator {\n+\n+    final Map<String, JwkHolder> jsonWebKeys = new ConcurrentHashMap<>();\n+\n+    private String jwksURL;\n+\n+    @Override\n+    protected JwsSignatureVerifier getInitializedSignatureVerifier(JwsHeaders jwsHeaders) {\n+        Objects.requireNonNull(jwsHeaders.getKeyId());\n+        return jsonWebKeys.computeIfAbsent(jwsHeaders.getKeyId(), keyId -> updateJwk(keyId)).getJwsSignatureVerifier();\n+    }\n+\n+    public void setJwksURL(String jwksURL) {\n+        this.jwksURL = jwksURL;\n+    }\n+\n+    @Override\n+    public void setJwsVerifier(JwsSignatureVerifier theJwsVerifier) {\n+        throw new IllegalArgumentException(\"Actual JwsSignatureVerifier will be populated from the JWK Set URL\");\n+    }\n+\n+    private JwkHolder updateJwk(String keyId) {\n+        Objects.requireNonNull(jwksURL, \"JWK Set URL must be specified\");\n+        JwkHolder jwkHolder = null;\n+        final Set<String> kids = new HashSet<>();\n+        for (JsonWebKey jwk : getJsonWebKeys().getKeys()) {\n+            if (PublicKeyUse.ENCRYPT != jwk.getPublicKeyUse()) {\n+                final String kid = jwk.getKeyId();\n+                kids.add(kid);\n+                final JwkHolder h = new JwkHolder(jwk);\n+                if (keyId.equals(kid)) {\n+                    jwkHolder = h;\n+                } else {\n+                    jsonWebKeys.putIfAbsent(kid, h);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4NTQ5NQ=="}, "originalCommit": {"oid": "268d612ecc158f886d4e262bf4251e4d78211b76"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTM2NDQ0OnYy", "diffSide": "LEFT", "path": "systests/rs-security/src/test/java/org/apache/cxf/systest/jaxrs/security/oidc/filters/OIDCFiltersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODoxMzo1N1rOF5Kjig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDoxNjo1NVrOF5OC1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4NjA5MA==", "bodyText": "Why is it being removed?", "url": "https://github.com/apache/cxf/pull/652#discussion_r395486090", "createdAt": "2020-03-20T08:13:57Z", "author": {"login": "coheigea"}, "path": "systests/rs-security/src/test/java/org/apache/cxf/systest/jaxrs/security/oidc/filters/OIDCFiltersTest.java", "diffHunk": "@@ -111,45 +101,6 @@ public void testClientCodeRequestFilter() throws Exception {\n         assertEquals(returnedBook.getId(), 123L);\n     }\n \n-    @org.junit.Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268d612ecc158f886d4e262bf4251e4d78211b76"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0MzI1NQ==", "bodyText": "Initially this test was introduced exactly for AT signature validation using JWKS but its more complex to configure and do not support key rotation", "url": "https://github.com/apache/cxf/pull/652#discussion_r395543255", "createdAt": "2020-03-20T10:16:55Z", "author": {"login": "amarkevich"}, "path": "systests/rs-security/src/test/java/org/apache/cxf/systest/jaxrs/security/oidc/filters/OIDCFiltersTest.java", "diffHunk": "@@ -111,45 +101,6 @@ public void testClientCodeRequestFilter() throws Exception {\n         assertEquals(returnedBook.getId(), 123L);\n     }\n \n-    @org.junit.Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4NjA5MA=="}, "originalCommit": {"oid": "268d612ecc158f886d4e262bf4251e4d78211b76"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3693, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}