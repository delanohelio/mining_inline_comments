{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MzAyNTQ4", "number": 660, "title": "[CXF-8263] Support SSEs in MP Rest Client 2.0", "bodyText": "Hi All - if you have time, could you review my changes for SSE support in MP Rest Client 2.0?  I developed this at the same time as the spec/API changes so there may need to be some tweaks to this implementation if the MP community requests changes to the spec/API.\nThe relevant MP API issue is eclipse/microprofile-rest-client#11 and my proposed spec/API/TCK changes are at eclipse/microprofile-rest-client#266\nThanks!", "createdAt": "2020-04-17T19:28:16Z", "url": "https://github.com/apache/cxf/pull/660", "merged": true, "mergeCommit": {"oid": "296fd745d6f4e47a1404fc6521ddd80e16af8677"}, "closed": true, "closedAt": "2020-05-28T14:52:54Z", "author": {"login": "andymc12"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcY5SCGgFqTM5NTkzMzU0Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABclMrrdgBqjMzNzU2OTU1OTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTMzNTQy", "url": "https://github.com/apache/cxf/pull/660#pullrequestreview-395933542", "createdAt": "2020-04-18T17:24:32Z", "commit": {"oid": "c424684ee4242c51c09bc1e24a3f17304a77a0ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNzoyNDozM1rOGHstng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNzoyNDozM1rOGHstng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyNTc5MA==", "bodyText": "Should be final as well?", "url": "https://github.com/apache/cxf/pull/660#discussion_r410725790", "createdAt": "2020-04-18T17:24:33Z", "author": {"login": "reta"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/sse/SsePublisher.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.microprofile.client.sse;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.ws.rs.ext.Providers;\n+import javax.ws.rs.sse.InboundSseEvent;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+public class SsePublisher implements Publisher<InboundSseEvent> {\n+\n+    final Executor executor;\n+    final BufferedReader br;\n+    final Providers providers;\n+    final List<SseSubscription> subscriptions = new LinkedList<>();\n+    AtomicBoolean isStarted = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c424684ee4242c51c09bc1e24a3f17304a77a0ce"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTMzODQ0", "url": "https://github.com/apache/cxf/pull/660#pullrequestreview-395933844", "createdAt": "2020-04-18T17:28:07Z", "commit": {"oid": "c424684ee4242c51c09bc1e24a3f17304a77a0ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNzoyODowN1rOGHsvNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNzoyODowN1rOGHsvNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyNjE5Ng==", "bodyText": "This is one is a bit tricky. The space after is : is optional (https://www.w3.org/TR/2015/REC-eventsource-20150203/#event-stream-interpretation), both data:  and data: are valid event encodings.", "url": "https://github.com/apache/cxf/pull/660#discussion_r410726196", "createdAt": "2020-04-18T17:28:07Z", "author": {"login": "reta"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/sse/SsePublisher.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.microprofile.client.sse;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.ws.rs.ext.Providers;\n+import javax.ws.rs.sse.InboundSseEvent;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+public class SsePublisher implements Publisher<InboundSseEvent> {\n+\n+    final Executor executor;\n+    final BufferedReader br;\n+    final Providers providers;\n+    final List<SseSubscription> subscriptions = new LinkedList<>();\n+    AtomicBoolean isStarted = new AtomicBoolean(false);\n+\n+    SsePublisher(InputStream is, Executor executor, Providers providers) {\n+        br = new BufferedReader(new InputStreamReader(is));\n+        this.executor = executor;\n+        this.providers = providers;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super InboundSseEvent> subscriber) {\n+        SseSubscription subscription = new SseSubscription(this, subscriber);\n+        subscriptions.add(subscription);\n+        subscription.fireSubscribe();\n+        start();\n+    }\n+\n+    private void start() {\n+        if (isStarted.compareAndSet(false, true)) {\n+            executor.execute(() -> {\n+                try (BufferedReader br2 = br) {\n+                    SseEventBuilder builder = new SseEventBuilder(providers);\n+                    String line = br.readLine();\n+                    while (line != null && !subscriptions.isEmpty()) {\n+                        if (line.startsWith(\"data: \")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c424684ee4242c51c09bc1e24a3f17304a77a0ce"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTM0MzAz", "url": "https://github.com/apache/cxf/pull/660#pullrequestreview-395934303", "createdAt": "2020-04-18T17:34:02Z", "commit": {"oid": "c424684ee4242c51c09bc1e24a3f17304a77a0ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNzozNDowMlrOGHsx8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNzozNDowMlrOGHsx8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyNjg5Ng==", "bodyText": "May be just declare buffer a LinkedList instead of Queue (it is private member anyway) so to eliminate casting?", "url": "https://github.com/apache/cxf/pull/660#discussion_r410726896", "createdAt": "2020-04-18T17:34:02Z", "author": {"login": "reta"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/sse/SseSubscription.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.microprofile.client.sse;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.ws.rs.sse.InboundSseEvent;\n+\n+import org.apache.cxf.common.util.SystemPropertyAction;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public class SseSubscription implements Subscription {\n+\n+    private static final int DEFAULT_BUFFER_SIZE = \n+        SystemPropertyAction.getInteger(\"org.apache.cxf.microprofile.client.sse.bufferSize\", 256);\n+    private final SsePublisher publisher;\n+    private final Subscriber<? super InboundSseEvent> subscriber;\n+    private final AtomicLong requested = new AtomicLong();\n+    private final AtomicLong delivered = new AtomicLong();\n+    private final AtomicBoolean completed = new AtomicBoolean();\n+    private final Queue<InboundSseEvent> buffer = new LinkedList<>();\n+    private final AtomicInteger bufferSize = new AtomicInteger(DEFAULT_BUFFER_SIZE);\n+\n+    SseSubscription(SsePublisher publisher, Subscriber<? super InboundSseEvent> subscriber) {\n+        this.publisher = publisher;\n+        this.subscriber = subscriber;\n+    }\n+\n+    @Override\n+    public void request(long n) {\n+        if (n < 1) {\n+            throw new IllegalArgumentException(\"Only postive values are valid - passed-in \" + n);\n+        }\n+        requested.addAndGet(n);\n+        synchronized (buffer) {\n+            InboundSseEvent bufferedEvent = null;\n+            while (delivered.get() < requested.get()\n+                   && (bufferedEvent = ((LinkedList<InboundSseEvent>) buffer).pollFirst()) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c424684ee4242c51c09bc1e24a3f17304a77a0ce"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDUxNDk3", "url": "https://github.com/apache/cxf/pull/660#pullrequestreview-396051497", "createdAt": "2020-04-19T19:07:26Z", "commit": {"oid": "c424684ee4242c51c09bc1e24a3f17304a77a0ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTowNzoyNlrOGH7mRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTowNzoyNlrOGH7mRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2OTY2OA==", "bodyText": "I think the completed condition is missed here (unexpected, due to error fe), no onNext calls are expected in this case.", "url": "https://github.com/apache/cxf/pull/660#discussion_r410969668", "createdAt": "2020-04-19T19:07:26Z", "author": {"login": "reta"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/sse/SseSubscription.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.microprofile.client.sse;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.ws.rs.sse.InboundSseEvent;\n+\n+import org.apache.cxf.common.util.SystemPropertyAction;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public class SseSubscription implements Subscription {\n+\n+    private static final int DEFAULT_BUFFER_SIZE = \n+        SystemPropertyAction.getInteger(\"org.apache.cxf.microprofile.client.sse.bufferSize\", 256);\n+    private final SsePublisher publisher;\n+    private final Subscriber<? super InboundSseEvent> subscriber;\n+    private final AtomicLong requested = new AtomicLong();\n+    private final AtomicLong delivered = new AtomicLong();\n+    private final AtomicBoolean completed = new AtomicBoolean();\n+    private final Queue<InboundSseEvent> buffer = new LinkedList<>();\n+    private final AtomicInteger bufferSize = new AtomicInteger(DEFAULT_BUFFER_SIZE);\n+\n+    SseSubscription(SsePublisher publisher, Subscriber<? super InboundSseEvent> subscriber) {\n+        this.publisher = publisher;\n+        this.subscriber = subscriber;\n+    }\n+\n+    @Override\n+    public void request(long n) {\n+        if (n < 1) {\n+            throw new IllegalArgumentException(\"Only postive values are valid - passed-in \" + n);\n+        }\n+        requested.addAndGet(n);\n+        synchronized (buffer) {\n+            InboundSseEvent bufferedEvent = null;\n+            while (delivered.get() < requested.get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c424684ee4242c51c09bc1e24a3f17304a77a0ce"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4dc7f36c0a03769613a7ce7c205b7ea6aca594a6", "author": {"user": {"login": "andymc12", "name": "Andy McCright"}}, "url": "https://github.com/apache/cxf/commit/4dc7f36c0a03769613a7ce7c205b7ea6aca594a6", "committedDate": "2020-05-07T02:46:10Z", "message": "Code review comments\n\n- Passes Reactive Streams TCK (in MP Rest Client TCK)\n- Use ExecutorService specified when client was built\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>"}, "afterCommit": {"oid": "de9c97806f0c55fcf5cef66dec10523ec5be11c6", "author": {"user": {"login": "andymc12", "name": "Andy McCright"}}, "url": "https://github.com/apache/cxf/commit/de9c97806f0c55fcf5cef66dec10523ec5be11c6", "committedDate": "2020-05-12T02:01:48Z", "message": "Code review comments\n\n- Passes Reactive Streams TCK (in MP Rest Client TCK)\n- Use ExecutorService specified when client was built\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTMyNjY4", "url": "https://github.com/apache/cxf/pull/660#pullrequestreview-410532668", "createdAt": "2020-05-13T01:44:24Z", "commit": {"oid": "de9c97806f0c55fcf5cef66dec10523ec5be11c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTo0NDoyNVrOGUeo4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTo0NDoyNVrOGUeo4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyNjY5MA==", "bodyText": "Probably not a good idea, exposing CXF internals (see please suggestion for SseMessageBodyReader)", "url": "https://github.com/apache/cxf/pull/660#discussion_r424126690", "createdAt": "2020-05-13T01:44:25Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ProvidersImpl.java", "diffHunk": "@@ -62,4 +62,8 @@ public ProvidersImpl(Message m) {\n     private Type getGenericType(Class<?> type, Type genericType) {\n         return genericType == null ? type : genericType;\n     }\n+\n+    public Message getMessage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de9c97806f0c55fcf5cef66dec10523ec5be11c6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTMzMDY5", "url": "https://github.com/apache/cxf/pull/660#pullrequestreview-410533069", "createdAt": "2020-05-13T01:45:51Z", "commit": {"oid": "de9c97806f0c55fcf5cef66dec10523ec5be11c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTo0NTo1MVrOGUeqMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTo0NTo1MVrOGUeqMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyNzAyNA==", "bodyText": "CXF has MessageContext contextual extension to get the message context:\n@Context\nprivate MessageContext messageContext;", "url": "https://github.com/apache/cxf/pull/660#discussion_r424127024", "createdAt": "2020-05-13T01:45:51Z", "author": {"login": "reta"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/sse/SseMessageBodyReader.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.microprofile.client.sse;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.concurrent.ExecutorService;\n+\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.ext.MessageBodyReader;\n+import javax.ws.rs.ext.Providers;\n+import javax.ws.rs.sse.InboundSseEvent;\n+\n+import org.apache.cxf.jaxrs.impl.ProvidersImpl;\n+import org.apache.cxf.jaxrs.impl.tl.ThreadLocalProviders;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.microprofile.client.Utils;\n+import org.reactivestreams.Publisher;\n+\n+@Produces(MediaType.SERVER_SENT_EVENTS)\n+public class SseMessageBodyReader implements MessageBodyReader<Publisher<?>> {\n+\n+    @Context\n+    Providers providers;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de9c97806f0c55fcf5cef66dec10523ec5be11c6"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTMzMzU5", "url": "https://github.com/apache/cxf/pull/660#pullrequestreview-410533359", "createdAt": "2020-05-13T01:46:51Z", "commit": {"oid": "de9c97806f0c55fcf5cef66dec10523ec5be11c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTo0Njo1MVrOGUerBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTo0Njo1MVrOGUerBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyNzIzNw==", "bodyText": "And you could use messageContext here to check the correct executor :-)", "url": "https://github.com/apache/cxf/pull/660#discussion_r424127237", "createdAt": "2020-05-13T01:46:51Z", "author": {"login": "reta"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/sse/SseMessageBodyReader.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.microprofile.client.sse;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.concurrent.ExecutorService;\n+\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.ext.MessageBodyReader;\n+import javax.ws.rs.ext.Providers;\n+import javax.ws.rs.sse.InboundSseEvent;\n+\n+import org.apache.cxf.jaxrs.impl.ProvidersImpl;\n+import org.apache.cxf.jaxrs.impl.tl.ThreadLocalProviders;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.microprofile.client.Utils;\n+import org.reactivestreams.Publisher;\n+\n+@Produces(MediaType.SERVER_SENT_EVENTS)\n+public class SseMessageBodyReader implements MessageBodyReader<Publisher<?>> {\n+\n+    @Context\n+    Providers providers;\n+\n+    @Override\n+    public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {\n+        return Publisher.class.isAssignableFrom(type) && MediaType.SERVER_SENT_EVENTS_TYPE.isCompatible(mediaType);\n+    }\n+\n+    @Override\n+    public Publisher<?> readFrom(Class<Publisher<?>> type, Type genericType,\n+            Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders,\n+            InputStream entityStream) throws IOException, WebApplicationException {\n+        ProvidersImpl providersImpl = (ProvidersImpl) (providers instanceof ThreadLocalProviders\n+            ? ((ThreadLocalProviders)providers).get() : providers);\n+        Message message = providersImpl.getMessage();\n+        ExecutorService executor = Utils.getExecutorService(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de9c97806f0c55fcf5cef66dec10523ec5be11c6"}, "originalPosition": 62}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de9c97806f0c55fcf5cef66dec10523ec5be11c6", "author": {"user": {"login": "andymc12", "name": "Andy McCright"}}, "url": "https://github.com/apache/cxf/commit/de9c97806f0c55fcf5cef66dec10523ec5be11c6", "committedDate": "2020-05-12T02:01:48Z", "message": "Code review comments\n\n- Passes Reactive Streams TCK (in MP Rest Client TCK)\n- Use ExecutorService specified when client was built\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>"}, "afterCommit": {"oid": "a2bf71c3dd4f24e23bde543655915f5e8f0a26fd", "author": {"user": {"login": "andymc12", "name": "Andy McCright"}}, "url": "https://github.com/apache/cxf/commit/a2bf71c3dd4f24e23bde543655915f5e8f0a26fd", "committedDate": "2020-05-13T14:58:19Z", "message": "Code review comments\n\n- Passes Reactive Streams TCK (in MP Rest Client TCK)\n- Use ExecutorService specified when client was built\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDI5NzI5", "url": "https://github.com/apache/cxf/pull/660#pullrequestreview-411429729", "createdAt": "2020-05-14T02:49:41Z", "commit": {"oid": "a2bf71c3dd4f24e23bde543655915f5e8f0a26fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMjo0OTo0MVrOGVKPXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMjo0OTo0MVrOGVKPXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0MTA1NA==", "bodyText": "Sorry, the usage of updateAndGet was \"bothering\" me and now I understand why ... I believe we should rethink the approach, here is the problem:\n    /* ...\n     * @param updateFunction a side-effect-free function\n     * ...\n     */\n    public final long updateAndGet(LongUnaryOperator updateFunction) {\n\nThe updateFunction must be a side-effect-free function (because it could be applied multiple times) but in current implementation it  is not. I have observed interesting races between request and fireEvent, which always are scheduled on different threads, when the value of delivered was changed and updateFunction  was applied multiple times, calling onNext several times.\nDoes it make sense to you?", "url": "https://github.com/apache/cxf/pull/660#discussion_r424841054", "createdAt": "2020-05-14T02:49:41Z", "author": {"login": "reta"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/sse/SseSubscription.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.microprofile.client.sse;\n+\n+import java.util.LinkedList;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.ws.rs.sse.InboundSseEvent;\n+\n+import org.apache.cxf.common.util.SystemPropertyAction;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public class SseSubscription implements Subscription {\n+\n+    private static final int DEFAULT_BUFFER_SIZE = \n+        SystemPropertyAction.getInteger(\"org.apache.cxf.microprofile.client.sse.bufferSize\", 256);\n+    private final SsePublisher publisher;\n+    private final Subscriber<? super InboundSseEvent> subscriber;\n+    private final AtomicLong requested = new AtomicLong();\n+    private final AtomicLong delivered = new AtomicLong();\n+    private final AtomicBoolean completed = new AtomicBoolean();\n+    private final AtomicBoolean canceled = new AtomicBoolean();\n+    //CHECKSTYLE:OFF\n+    private final LinkedList<InboundSseEvent> buffer = new LinkedList<>(); //NOPMD\n+    //CHECKSTYLE:ON\n+    private final AtomicInteger bufferSize = new AtomicInteger(DEFAULT_BUFFER_SIZE);\n+\n+    SseSubscription(SsePublisher publisher, Subscriber<? super InboundSseEvent> subscriber) {\n+        this.publisher = publisher;\n+        this.subscriber = subscriber;\n+    }\n+\n+    @Override\n+    public void request(long n) {\n+        if (canceled.get()) {\n+            return;\n+        }\n+        if (n < 1) {\n+            fireError(new IllegalArgumentException(\"Only positive values may be requested - passed-in \" + n));\n+            return;\n+        }\n+        requested.addAndGet(n);\n+        synchronized (buffer) {\n+            InboundSseEvent bufferedEvent = null;\n+            while (delivered.get() < requested.get()\n+                   && (bufferedEvent = buffer.pollFirst()) != null) {\n+                InboundSseEvent finalEvent = bufferedEvent;\n+                delivered.updateAndGet(l -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2bf71c3dd4f24e23bde543655915f5e8f0a26fd"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDI5OTEw", "url": "https://github.com/apache/cxf/pull/660#pullrequestreview-411429910", "createdAt": "2020-05-14T02:50:15Z", "commit": {"oid": "a2bf71c3dd4f24e23bde543655915f5e8f0a26fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMjo1MDoxNlrOGVKP9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMjo1MDoxNlrOGVKP9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0MTIwNQ==", "bodyText": "Probably needs !canceled.get() && !completed.get() as well ...", "url": "https://github.com/apache/cxf/pull/660#discussion_r424841205", "createdAt": "2020-05-14T02:50:16Z", "author": {"login": "reta"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/sse/SseSubscription.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.microprofile.client.sse;\n+\n+import java.util.LinkedList;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.ws.rs.sse.InboundSseEvent;\n+\n+import org.apache.cxf.common.util.SystemPropertyAction;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public class SseSubscription implements Subscription {\n+\n+    private static final int DEFAULT_BUFFER_SIZE = \n+        SystemPropertyAction.getInteger(\"org.apache.cxf.microprofile.client.sse.bufferSize\", 256);\n+    private final SsePublisher publisher;\n+    private final Subscriber<? super InboundSseEvent> subscriber;\n+    private final AtomicLong requested = new AtomicLong();\n+    private final AtomicLong delivered = new AtomicLong();\n+    private final AtomicBoolean completed = new AtomicBoolean();\n+    private final AtomicBoolean canceled = new AtomicBoolean();\n+    //CHECKSTYLE:OFF\n+    private final LinkedList<InboundSseEvent> buffer = new LinkedList<>(); //NOPMD\n+    //CHECKSTYLE:ON\n+    private final AtomicInteger bufferSize = new AtomicInteger(DEFAULT_BUFFER_SIZE);\n+\n+    SseSubscription(SsePublisher publisher, Subscriber<? super InboundSseEvent> subscriber) {\n+        this.publisher = publisher;\n+        this.subscriber = subscriber;\n+    }\n+\n+    @Override\n+    public void request(long n) {\n+        if (canceled.get()) {\n+            return;\n+        }\n+        if (n < 1) {\n+            fireError(new IllegalArgumentException(\"Only positive values may be requested - passed-in \" + n));\n+            return;\n+        }\n+        requested.addAndGet(n);\n+        synchronized (buffer) {\n+            InboundSseEvent bufferedEvent = null;\n+            while (delivered.get() < requested.get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2bf71c3dd4f24e23bde543655915f5e8f0a26fd"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2bf71c3dd4f24e23bde543655915f5e8f0a26fd", "author": {"user": {"login": "andymc12", "name": "Andy McCright"}}, "url": "https://github.com/apache/cxf/commit/a2bf71c3dd4f24e23bde543655915f5e8f0a26fd", "committedDate": "2020-05-13T14:58:19Z", "message": "Code review comments\n\n- Passes Reactive Streams TCK (in MP Rest Client TCK)\n- Use ExecutorService specified when client was built\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>"}, "afterCommit": {"oid": "71a636fbe8c634204c6f035c37c6c744861459f0", "author": {"user": {"login": "andymc12", "name": "Andy McCright"}}, "url": "https://github.com/apache/cxf/commit/71a636fbe8c634204c6f035c37c6c744861459f0", "committedDate": "2020-05-26T19:52:25Z", "message": "Code review comments\n\n- Passes Reactive Streams TCK (in MP Rest Client TCK)\n- Use ExecutorService specified when client was built\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb0ece06e7252debc22b430872b5ef55a0fe315b", "author": {"user": {"login": "andymc12", "name": "Andy McCright"}}, "url": "https://github.com/apache/cxf/commit/cb0ece06e7252debc22b430872b5ef55a0fe315b", "committedDate": "2020-05-26T22:47:42Z", "message": "[CXF-8263] Support SSEs in MP Rest Client 2.0\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8c4e429fb5c003d63bd2f28ce376cdc9e06f5ef", "author": {"user": {"login": "andymc12", "name": "Andy McCright"}}, "url": "https://github.com/apache/cxf/commit/d8c4e429fb5c003d63bd2f28ce376cdc9e06f5ef", "committedDate": "2020-05-26T22:47:42Z", "message": "Review comments\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9f65151a91c9c87330c825811548697359402a9", "author": {"user": {"login": "andymc12", "name": "Andy McCright"}}, "url": "https://github.com/apache/cxf/commit/b9f65151a91c9c87330c825811548697359402a9", "committedDate": "2020-05-26T22:47:42Z", "message": "Code review comments\n\n- Passes Reactive Streams TCK (in MP Rest Client TCK)\n- Use ExecutorService specified when client was built\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71a636fbe8c634204c6f035c37c6c744861459f0", "author": {"user": {"login": "andymc12", "name": "Andy McCright"}}, "url": "https://github.com/apache/cxf/commit/71a636fbe8c634204c6f035c37c6c744861459f0", "committedDate": "2020-05-26T19:52:25Z", "message": "Code review comments\n\n- Passes Reactive Streams TCK (in MP Rest Client TCK)\n- Use ExecutorService specified when client was built\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>"}, "afterCommit": {"oid": "b9f65151a91c9c87330c825811548697359402a9", "author": {"user": {"login": "andymc12", "name": "Andy McCright"}}, "url": "https://github.com/apache/cxf/commit/b9f65151a91c9c87330c825811548697359402a9", "committedDate": "2020-05-26T22:47:42Z", "message": "Code review comments\n\n- Passes Reactive Streams TCK (in MP Rest Client TCK)\n- Use ExecutorService specified when client was built\n\nSigned-off-by: Andy McCright <j.andrew.mccright@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2088, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}