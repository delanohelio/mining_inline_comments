{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MjEwODI0", "number": 683, "title": "CXF-8303: MP: Context propagation impossible using AsyncInvocationInterceptorFactory", "bodyText": "Aligning MP Client implementation to use only one executor service, configured through MicroProfileClientFactoryBean and propagated via contextual property EXECUTOR_SERVICE_PROPERTY\nAlways initialize executor service in the MicroProfileClientFactoryBean, using ForkJoin pool as default if not specified\nRemoved async delegation from MPRestClientCallback::createFuture since it is always executed in the context of executor service (configured through MicroProfileClientFactoryBean)", "createdAt": "2020-07-15T02:47:46Z", "url": "https://github.com/apache/cxf/pull/683", "merged": true, "mergeCommit": {"oid": "2244024ba6d438f44adffd56b1dc8e02cb45cf71"}, "closed": true, "closedAt": "2020-07-19T13:07:35Z", "author": {"login": "reta"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1BUq2gH2gAyNDQ5MjEwODI0OjFhYTlhNDlhNmExNTQ2YTc0MTMwMmI2ZjBmMTIzNGVhYjZiMGJhNWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2IytIgBqjM1NjExNDE4Mzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1aa9a49a6a1546a741302b6f0f1234eab6b0ba5d", "author": {"user": {"login": "reta", "name": "Andriy Redko"}}, "url": "https://github.com/apache/cxf/commit/1aa9a49a6a1546a741302b6f0f1234eab6b0ba5d", "committedDate": "2020-07-15T02:36:33Z", "message": "CXF-8303: MP: Context propagation impossible using AsyncInvocationInterceptorFactory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NjQ1OTU4", "url": "https://github.com/apache/cxf/pull/683#pullrequestreview-448645958", "createdAt": "2020-07-15T05:49:23Z", "commit": {"oid": "1aa9a49a6a1546a741302b6f0f1234eab6b0ba5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNTo0OToyM1rOGxvOCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNTo0OToyM1rOGxvOCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwNzA1MA==", "bodyText": "maybe make it lazy to not create it (forkjoin common pool) if the app does not use it and the client for its lifecycle?", "url": "https://github.com/apache/cxf/pull/683#discussion_r454807050", "createdAt": "2020-07-15T05:49:23Z", "author": {"login": "rmannibucau"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/MicroProfileClientFactoryBean.java", "diffHunk": "@@ -63,7 +66,7 @@ public MicroProfileClientFactoryBean(MicroProfileClientConfigurableImpl<RestClie\n         super(new MicroProfileServiceFactoryBean());\n         this.configuration = configuration.getConfiguration();\n         this.comparator = MicroProfileClientProviderFactory.createComparator(this);\n-        this.executorService = executorService;\n+        this.executorService = (executorService == null) ? defaultExecutorService() : executorService; ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aa9a49a6a1546a741302b6f0f1234eab6b0ba5d"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NjQ2MzYz", "url": "https://github.com/apache/cxf/pull/683#pullrequestreview-448646363", "createdAt": "2020-07-15T05:50:27Z", "commit": {"oid": "1aa9a49a6a1546a741302b6f0f1234eab6b0ba5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNTo1MDoyN1rOGxvPcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNTo1MDoyN1rOGxvPcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwNzQxMQ==", "bodyText": "think you can use JsonbJaxrsProvider from johnzon-jsonb instead of importing this one which does not use jsonb, would be more consistent with MP probably?", "url": "https://github.com/apache/cxf/pull/683#discussion_r454807411", "createdAt": "2020-07-15T05:50:27Z", "author": {"login": "rmannibucau"}, "path": "systests/microprofile/client/async/pom.xml", "diffHunk": "@@ -76,6 +76,12 @@\n                 <version>${cxf.johnzon.version}</version>\n                 <scope>test</scope>\n             </dependency>\n+            <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aa9a49a6a1546a741302b6f0f1234eab6b0ba5d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38d597f17eb678ccb2277fe9d76c204ac5ab3861", "author": {"user": {"login": "reta", "name": "Andriy Redko"}}, "url": "https://github.com/apache/cxf/commit/38d597f17eb678ccb2277fe9d76c204ac5ab3861", "committedDate": "2020-07-15T21:58:32Z", "message": "Switched test cases to use JsonbJaxrsProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjM5ODMy", "url": "https://github.com/apache/cxf/pull/683#pullrequestreview-450239832", "createdAt": "2020-07-16T21:48:09Z", "commit": {"oid": "38d597f17eb678ccb2277fe9d76c204ac5ab3861"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76a77920b8cae7d09822483bc8eb5205af26dcda", "author": {"user": {"login": "reta", "name": "Andriy Redko"}}, "url": "https://github.com/apache/cxf/commit/76a77920b8cae7d09822483bc8eb5205af26dcda", "committedDate": "2020-07-17T21:39:27Z", "message": "Made default executor service lazy"}, "afterCommit": {"oid": "b39a34885aa688665e6b43c16f4e13725bbb8b27", "author": {"user": {"login": "reta", "name": "Andriy Redko"}}, "url": "https://github.com/apache/cxf/commit/b39a34885aa688665e6b43c16f4e13725bbb8b27", "committedDate": "2020-07-17T21:46:27Z", "message": "Made default executor service lazy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bff35d21b20c1d35fcbe1fb7e4abd3634041280d", "author": {"user": {"login": "reta", "name": "Andriy Redko"}}, "url": "https://github.com/apache/cxf/commit/bff35d21b20c1d35fcbe1fb7e4abd3634041280d", "committedDate": "2020-07-18T00:57:46Z", "message": "Made default executor service lazy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b39a34885aa688665e6b43c16f4e13725bbb8b27", "author": {"user": {"login": "reta", "name": "Andriy Redko"}}, "url": "https://github.com/apache/cxf/commit/b39a34885aa688665e6b43c16f4e13725bbb8b27", "committedDate": "2020-07-17T21:46:27Z", "message": "Made default executor service lazy"}, "afterCommit": {"oid": "bff35d21b20c1d35fcbe1fb7e4abd3634041280d", "author": {"user": {"login": "reta", "name": "Andriy Redko"}}, "url": "https://github.com/apache/cxf/commit/bff35d21b20c1d35fcbe1fb7e4abd3634041280d", "committedDate": "2020-07-18T00:57:46Z", "message": "Made default executor service lazy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDM3ODIy", "url": "https://github.com/apache/cxf/pull/683#pullrequestreview-451037822", "createdAt": "2020-07-18T07:06:52Z", "commit": {"oid": "bff35d21b20c1d35fcbe1fb7e4abd3634041280d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwNzowNjo1MlrOGzmYvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwNzowNjo1MlrOGzmYvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1OTQ4NQ==", "bodyText": "Guess you want to bypass the dopriviledge when there is no security manager\nOtherwise looks good to me now", "url": "https://github.com/apache/cxf/pull/683#discussion_r456759485", "createdAt": "2020-07-18T07:06:52Z", "author": {"login": "rmannibucau"}, "path": "rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/Utils.java", "diffHunk": "@@ -21,34 +21,109 @@\n \n import java.security.AccessController;\n import java.security.PrivilegedAction;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n \n+import org.apache.cxf.jaxrs.client.AbstractClient;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n-import org.apache.cxf.message.Message;\n \n public final class Utils {\n \n     private Utils() {\n     }\n \n-    public static ExecutorService getExecutorService(Message message) {\n-        ExecutorService es = message.get(ExecutorService.class);\n+    public static ExecutorService getExecutorService(MessageContext mc) {\n+        ExecutorService es = (ExecutorService) mc.get(AbstractClient.EXECUTOR_SERVICE_PROPERTY);\n         if (es == null) {\n-            es = AccessController.doPrivileged((PrivilegedAction<ExecutorService>)() -> {\n-                return ForkJoinPool.commonPool();\n-            });\n+            es = getCommonPool();\n         }\n         return es;\n     }\n+    \n+    public static ExecutorService defaultExecutorService() {\n+        return new LazyForkJoinExecutor();\n+    }\n+    \n+    private static class LazyForkJoinExecutor implements ExecutorService {\n+        @Override\n+        public void execute(Runnable command) {\n+            getCommonPool().execute(command);\n+        }\n \n-    public static ExecutorService getExecutorService(MessageContext mc) {\n-        ExecutorService es = (ExecutorService) mc.get(ExecutorService.class);\n-        if (es == null) {\n-            es = AccessController.doPrivileged((PrivilegedAction<ExecutorService>) () -> {\n-                return ForkJoinPool.commonPool();\n-            });\n+        @Override\n+        public void shutdown() {\n+            getCommonPool().shutdown();\n         }\n-        return es;\n+\n+        @Override\n+        public List<Runnable> shutdownNow() {\n+            return getCommonPool().shutdownNow();\n+        }\n+\n+        @Override\n+        public boolean isShutdown() {\n+            return getCommonPool().isShutdown();\n+        }\n+\n+        @Override\n+        public boolean isTerminated() {\n+            return getCommonPool().isTerminated();\n+        }\n+\n+        @Override\n+        public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {\n+            return getCommonPool().awaitTermination(timeout, unit);\n+        }\n+\n+        @Override\n+        public <T> Future<T> submit(Callable<T> task) {\n+            return getCommonPool().submit(task);\n+        }\n+\n+        @Override\n+        public <T> Future<T> submit(Runnable task, T result) {\n+            return getCommonPool().submit(task, result);\n+        }\n+\n+        @Override\n+        public Future<?> submit(Runnable task) {\n+            return getCommonPool().submit(task);\n+        }\n+\n+        @Override\n+        public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException {\n+            return getCommonPool().invokeAll(tasks);\n+        }\n+\n+        @Override\n+        public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout,\n+                TimeUnit unit) throws InterruptedException {\n+            return getCommonPool().invokeAll(tasks, timeout, unit);\n+        }\n+\n+        @Override\n+        public <T> T invokeAny(Collection<? extends Callable<T>> tasks) \n+                throws InterruptedException, ExecutionException {\n+            return getCommonPool().invokeAny(tasks);\n+        }\n+\n+        @Override\n+        public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, \n+                TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n+            return getCommonPool().invokeAny(tasks, timeout, unit);\n+        }\n+    }\n+    \n+    private static ExecutorService getCommonPool() {\n+        return AccessController.doPrivileged((PrivilegedAction<ExecutorService>) () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff35d21b20c1d35fcbe1fb7e4abd3634041280d"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b0d5ef2056a6b5f58d04d9770bbd468d7448067", "author": {"user": {"login": "reta", "name": "Andriy Redko"}}, "url": "https://github.com/apache/cxf/commit/9b0d5ef2056a6b5f58d04d9770bbd468d7448067", "committedDate": "2020-07-18T13:46:41Z", "message": "Explicitly check the presence of security manager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "feed19de15733592c9f9ad348f0edfb659dee33c", "author": {"user": {"login": "reta", "name": "Andriy Redko"}}, "url": "https://github.com/apache/cxf/commit/feed19de15733592c9f9ad348f0edfb659dee33c", "committedDate": "2020-07-18T13:51:01Z", "message": "Removing version for geronimo-jsonb_1.0_spec (taken from parent pom.xml)"}, "afterCommit": {"oid": "9b0d5ef2056a6b5f58d04d9770bbd468d7448067", "author": {"user": {"login": "reta", "name": "Andriy Redko"}}, "url": "https://github.com/apache/cxf/commit/9b0d5ef2056a6b5f58d04d9770bbd468d7448067", "committedDate": "2020-07-18T13:46:41Z", "message": "Explicitly check the presence of security manager"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2106, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}