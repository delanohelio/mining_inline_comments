{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMTE5MTk5", "number": 697, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoyNzozNlrOEmT2Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo1NzoyMVrOEmUKwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjA2NTQyOnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoyNzozNlrOHWQzsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo1MTo0MVrOHXE-zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNjA5Ng==", "bodyText": "This would modify the state of the stream, correct? May be it would be simpler to check/construct the PushbackInputStream and than do read / unread?", "url": "https://github.com/apache/cxf/pull/697#discussion_r493106096", "createdAt": "2020-09-23T00:27:36Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "diffHunk": "@@ -137,22 +143,70 @@ public Object getActualEntity() {\n         return lastEntity != null ? lastEntity : entity;\n     }\n \n+    @Override\n     public Object getEntity() {\n         return InjectionUtils.getEntity(getActualEntity());\n     }\n \n+    @Override\n     public boolean hasEntity() {\n-        return getActualEntity() != null;\n+        // per spec, need to check if the stream exists and if it has data.\n+        Object actualEntity = getActualEntity();\n+        if (actualEntity == null) {\n+            return false;\n+        } else if (actualEntity instanceof InputStream) {\n+            final InputStream is = (InputStream) actualEntity;\n+            try {\n+                if (is.markSupported()) {\n+                    is.mark(1);\n+                    int i = is.read();\n+                    is.reset();\n+                    return i != -1;\n+                } else {\n+                    try {\n+                        if (is.available() > 0) {\n+                            return true;\n+                        }\n+                    } catch (IOException ioe) {\n+                        //Do nothing\n+                    }\n+                    int b = is.read();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90a1c094d71036f8ca2c24a9b721a1ac813702b0"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkxNTA2Ng==", "bodyText": "This does read one byte of the stream.  If it is -1, then it simply returns false (no entity).  If there is data on the stream, then we construct the PushbackInputStream to unread the byte we checked before.  I think this approach is optimal for the case where there is no entity, but not harmful in the case where there is.  If the stream supports marking (fair uncommon imo) or the available method (much more common), then we'll never get this far.\nUnless you object, I'd like to leave it this way, but I can add a unit test to ensure the different expectations and complete coverage (input stream supporting marking, available, etc.).", "url": "https://github.com/apache/cxf/pull/697#discussion_r493915066", "createdAt": "2020-09-23T21:49:12Z", "author": {"login": "andymc12"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "diffHunk": "@@ -137,22 +143,70 @@ public Object getActualEntity() {\n         return lastEntity != null ? lastEntity : entity;\n     }\n \n+    @Override\n     public Object getEntity() {\n         return InjectionUtils.getEntity(getActualEntity());\n     }\n \n+    @Override\n     public boolean hasEntity() {\n-        return getActualEntity() != null;\n+        // per spec, need to check if the stream exists and if it has data.\n+        Object actualEntity = getActualEntity();\n+        if (actualEntity == null) {\n+            return false;\n+        } else if (actualEntity instanceof InputStream) {\n+            final InputStream is = (InputStream) actualEntity;\n+            try {\n+                if (is.markSupported()) {\n+                    is.mark(1);\n+                    int i = is.read();\n+                    is.reset();\n+                    return i != -1;\n+                } else {\n+                    try {\n+                        if (is.available() > 0) {\n+                            return true;\n+                        }\n+                    } catch (IOException ioe) {\n+                        //Do nothing\n+                    }\n+                    int b = is.read();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNjA5Ng=="}, "originalCommit": {"oid": "90a1c094d71036f8ca2c24a9b721a1ac813702b0"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2MDkxMQ==", "bodyText": "No objections, the reasoning was to keep PushbackInputStream  manipulations close by but indeed, you have a good argument in not doing so, thank you.", "url": "https://github.com/apache/cxf/pull/697#discussion_r493960911", "createdAt": "2020-09-23T23:51:41Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "diffHunk": "@@ -137,22 +143,70 @@ public Object getActualEntity() {\n         return lastEntity != null ? lastEntity : entity;\n     }\n \n+    @Override\n     public Object getEntity() {\n         return InjectionUtils.getEntity(getActualEntity());\n     }\n \n+    @Override\n     public boolean hasEntity() {\n-        return getActualEntity() != null;\n+        // per spec, need to check if the stream exists and if it has data.\n+        Object actualEntity = getActualEntity();\n+        if (actualEntity == null) {\n+            return false;\n+        } else if (actualEntity instanceof InputStream) {\n+            final InputStream is = (InputStream) actualEntity;\n+            try {\n+                if (is.markSupported()) {\n+                    is.mark(1);\n+                    int i = is.read();\n+                    is.reset();\n+                    return i != -1;\n+                } else {\n+                    try {\n+                        if (is.available() > 0) {\n+                            return true;\n+                        }\n+                    } catch (IOException ioe) {\n+                        //Do nothing\n+                    }\n+                    int b = is.read();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNjA5Ng=="}, "originalCommit": {"oid": "90a1c094d71036f8ca2c24a9b721a1ac813702b0"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjA3ODk5OnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDozNTowM1rOHWQ7bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTozMTo0N1rOHXtW5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwODA3Ng==", "bodyText": "Unfamiliar with this part, do you have insights about lastEntity vs entity?", "url": "https://github.com/apache/cxf/pull/697#discussion_r493108076", "createdAt": "2020-09-23T00:35:03Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "diffHunk": "@@ -137,22 +143,70 @@ public Object getActualEntity() {\n         return lastEntity != null ? lastEntity : entity;\n     }\n \n+    @Override\n     public Object getEntity() {\n         return InjectionUtils.getEntity(getActualEntity());\n     }\n \n+    @Override\n     public boolean hasEntity() {\n-        return getActualEntity() != null;\n+        // per spec, need to check if the stream exists and if it has data.\n+        Object actualEntity = getActualEntity();\n+        if (actualEntity == null) {\n+            return false;\n+        } else if (actualEntity instanceof InputStream) {\n+            final InputStream is = (InputStream) actualEntity;\n+            try {\n+                if (is.markSupported()) {\n+                    is.mark(1);\n+                    int i = is.read();\n+                    is.reset();\n+                    return i != -1;\n+                } else {\n+                    try {\n+                        if (is.available() > 0) {\n+                            return true;\n+                        }\n+                    } catch (IOException ioe) {\n+                        //Do nothing\n+                    }\n+                    int b = is.read();\n+                    if (b == -1) {\n+                        return false;\n+                    }\n+                    PushbackInputStream pbis;\n+                    if (is instanceof PushbackInputStream) {\n+                        pbis = (PushbackInputStream) is;\n+                    } else {\n+                        pbis = new PushbackInputStream(is, 1);\n+                        if (lastEntity != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90a1c094d71036f8ca2c24a9b721a1ac813702b0"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2ODc3NQ==", "bodyText": "I believe that lastEntity is used for optimizing the case where the entity is an InputStream and a user calls readEntity(SomeObject.class) - lastEntity will then be set to the instance of SomeObject so that subsequent readEntity calls can just return that object rather then re-reading it from the stream.  But since it is also possible to read an entity as an InputStream, this code covers cases like:\nresponse.readEntity(InputStream.class);\nif (response.hasEntity()) {\n    response.readEntity(InputStream.class); // or response.readEntity(SomeObject.class), etc", "url": "https://github.com/apache/cxf/pull/697#discussion_r493968775", "createdAt": "2020-09-24T00:18:10Z", "author": {"login": "andymc12"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "diffHunk": "@@ -137,22 +143,70 @@ public Object getActualEntity() {\n         return lastEntity != null ? lastEntity : entity;\n     }\n \n+    @Override\n     public Object getEntity() {\n         return InjectionUtils.getEntity(getActualEntity());\n     }\n \n+    @Override\n     public boolean hasEntity() {\n-        return getActualEntity() != null;\n+        // per spec, need to check if the stream exists and if it has data.\n+        Object actualEntity = getActualEntity();\n+        if (actualEntity == null) {\n+            return false;\n+        } else if (actualEntity instanceof InputStream) {\n+            final InputStream is = (InputStream) actualEntity;\n+            try {\n+                if (is.markSupported()) {\n+                    is.mark(1);\n+                    int i = is.read();\n+                    is.reset();\n+                    return i != -1;\n+                } else {\n+                    try {\n+                        if (is.available() > 0) {\n+                            return true;\n+                        }\n+                    } catch (IOException ioe) {\n+                        //Do nothing\n+                    }\n+                    int b = is.read();\n+                    if (b == -1) {\n+                        return false;\n+                    }\n+                    PushbackInputStream pbis;\n+                    if (is instanceof PushbackInputStream) {\n+                        pbis = (PushbackInputStream) is;\n+                    } else {\n+                        pbis = new PushbackInputStream(is, 1);\n+                        if (lastEntity != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwODA3Ng=="}, "originalCommit": {"oid": "90a1c094d71036f8ca2c24a9b721a1ac813702b0"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYyMjQzNg==", "bodyText": "\ud83d\udc4d thank you", "url": "https://github.com/apache/cxf/pull/697#discussion_r494622436", "createdAt": "2020-09-24T21:31:47Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "diffHunk": "@@ -137,22 +143,70 @@ public Object getActualEntity() {\n         return lastEntity != null ? lastEntity : entity;\n     }\n \n+    @Override\n     public Object getEntity() {\n         return InjectionUtils.getEntity(getActualEntity());\n     }\n \n+    @Override\n     public boolean hasEntity() {\n-        return getActualEntity() != null;\n+        // per spec, need to check if the stream exists and if it has data.\n+        Object actualEntity = getActualEntity();\n+        if (actualEntity == null) {\n+            return false;\n+        } else if (actualEntity instanceof InputStream) {\n+            final InputStream is = (InputStream) actualEntity;\n+            try {\n+                if (is.markSupported()) {\n+                    is.mark(1);\n+                    int i = is.read();\n+                    is.reset();\n+                    return i != -1;\n+                } else {\n+                    try {\n+                        if (is.available() > 0) {\n+                            return true;\n+                        }\n+                    } catch (IOException ioe) {\n+                        //Do nothing\n+                    }\n+                    int b = is.read();\n+                    if (b == -1) {\n+                        return false;\n+                    }\n+                    PushbackInputStream pbis;\n+                    if (is instanceof PushbackInputStream) {\n+                        pbis = (PushbackInputStream) is;\n+                    } else {\n+                        pbis = new PushbackInputStream(is, 1);\n+                        if (lastEntity != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwODA3Ng=="}, "originalCommit": {"oid": "90a1c094d71036f8ca2c24a9b721a1ac813702b0"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjA4NjAzOnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDozODo1NVrOHWQ_WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0MjoyN1rOHXAM9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwOTA4MQ==", "bodyText": "Sorry, why the outMessage.get(Message.REQUEST_URI) got removed?", "url": "https://github.com/apache/cxf/pull/697#discussion_r493109081", "createdAt": "2020-09-23T00:38:55Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "diffHunk": "@@ -218,42 +274,46 @@ private Date doGetDate(String dateHeader) {\n             : HttpUtils.getHttpDate(value.toString());\n     }\n \n+    @Override\n     public EntityTag getEntityTag() {\n         Object header = metadata.getFirst(HttpHeaders.ETAG);\n         return header == null || header instanceof EntityTag ? (EntityTag)header\n             : EntityTag.valueOf(header.toString());\n     }\n \n+    @Override\n     public Locale getLanguage() {\n         Object header = metadata.getFirst(HttpHeaders.CONTENT_LANGUAGE);\n         return header == null || header instanceof Locale ? (Locale)header\n             : HttpUtils.getLocale(header.toString());\n     }\n \n+    @Override\n     public Date getLastModified() {\n         return doGetDate(HttpHeaders.LAST_MODIFIED);\n     }\n \n+    @Override\n     public int getLength() {\n         Object header = metadata.getFirst(HttpHeaders.CONTENT_LENGTH);\n         return HttpUtils.getContentLength(header == null ? null : header.toString());\n     }\n \n+    @Override\n     public URI getLocation() {\n         Object header = metadata.getFirst(HttpHeaders.LOCATION);\n-        if (header == null && outMessage != null) {\n-            header = outMessage.get(Message.REQUEST_URI);\n-        }\n-        return header == null || header instanceof URI ? (URI) header\n+        return header == null || header instanceof URI ? (URI)header", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90a1c094d71036f8ca2c24a9b721a1ac813702b0"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4MjYxMg==", "bodyText": "I believe that was a TCK test.  IIRC, the TCK tests that getLocation should return null unless explicitly set as a Location: <someURI> header (via the ResponseBuilder.location(URI) method).\nI'm not positive, but I think it addresses this TCK test (currently listed in the failing tests):\ncom/sun/ts/tests/jaxrs/ee/rs/core/response/JAXRSClient.java#getLocationNotPresentTest_from_standalone: JAXRSClient_getLocationNotPresentTest_from_standalone", "url": "https://github.com/apache/cxf/pull/697#discussion_r493882612", "createdAt": "2020-09-23T20:42:27Z", "author": {"login": "andymc12"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "diffHunk": "@@ -218,42 +274,46 @@ private Date doGetDate(String dateHeader) {\n             : HttpUtils.getHttpDate(value.toString());\n     }\n \n+    @Override\n     public EntityTag getEntityTag() {\n         Object header = metadata.getFirst(HttpHeaders.ETAG);\n         return header == null || header instanceof EntityTag ? (EntityTag)header\n             : EntityTag.valueOf(header.toString());\n     }\n \n+    @Override\n     public Locale getLanguage() {\n         Object header = metadata.getFirst(HttpHeaders.CONTENT_LANGUAGE);\n         return header == null || header instanceof Locale ? (Locale)header\n             : HttpUtils.getLocale(header.toString());\n     }\n \n+    @Override\n     public Date getLastModified() {\n         return doGetDate(HttpHeaders.LAST_MODIFIED);\n     }\n \n+    @Override\n     public int getLength() {\n         Object header = metadata.getFirst(HttpHeaders.CONTENT_LENGTH);\n         return HttpUtils.getContentLength(header == null ? null : header.toString());\n     }\n \n+    @Override\n     public URI getLocation() {\n         Object header = metadata.getFirst(HttpHeaders.LOCATION);\n-        if (header == null && outMessage != null) {\n-            header = outMessage.get(Message.REQUEST_URI);\n-        }\n-        return header == null || header instanceof URI ? (URI) header\n+        return header == null || header instanceof URI ? (URI)header", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwOTA4MQ=="}, "originalCommit": {"oid": "90a1c094d71036f8ca2c24a9b721a1ac813702b0"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjA5MzM5OnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo0MzoxMVrOHWRDvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDozMjo1M1rOHW_5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMDIwNQ==", "bodyText": "Shouldn't AutoCloseable also be checked?", "url": "https://github.com/apache/cxf/pull/697#discussion_r493110205", "createdAt": "2020-09-23T00:43:11Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "diffHunk": "@@ -400,12 +472,30 @@ private Link makeAbsoluteLink(Link link) {\n                 responseMessage.put(Message.PROTOCOL_HEADERS, getHeaders());\n \n                 lastEntity = JAXRSUtils.readFromMessageBodyReader(readers, cls, t,\n-                                                                       anns,\n-                                                                       entityStream,\n-                                                                       mediaType,\n-                                                                       responseMessage);\n-                autoClose(cls, false);\n-                return castLastEntity();\n+                                                                  anns,\n+                                                                  entityStream,\n+                                                                  mediaType,\n+                                                                  responseMessage);\n+                // close the entity after readEntity is called.\n+                T tCastLastEntity = castLastEntity();\n+                shouldClose = shouldClose && !(tCastLastEntity instanceof Closeable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90a1c094d71036f8ca2c24a9b721a1ac813702b0"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3NzU1Mw==", "bodyText": "Closeable extends AutoCloseable, so we could get both with by checking AutoCloseable - I'll update this.", "url": "https://github.com/apache/cxf/pull/697#discussion_r493877553", "createdAt": "2020-09-23T20:32:53Z", "author": {"login": "andymc12"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "diffHunk": "@@ -400,12 +472,30 @@ private Link makeAbsoluteLink(Link link) {\n                 responseMessage.put(Message.PROTOCOL_HEADERS, getHeaders());\n \n                 lastEntity = JAXRSUtils.readFromMessageBodyReader(readers, cls, t,\n-                                                                       anns,\n-                                                                       entityStream,\n-                                                                       mediaType,\n-                                                                       responseMessage);\n-                autoClose(cls, false);\n-                return castLastEntity();\n+                                                                  anns,\n+                                                                  entityStream,\n+                                                                  mediaType,\n+                                                                  responseMessage);\n+                // close the entity after readEntity is called.\n+                T tCastLastEntity = castLastEntity();\n+                shouldClose = shouldClose && !(tCastLastEntity instanceof Closeable)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMDIwNQ=="}, "originalCommit": {"oid": "90a1c094d71036f8ca2c24a9b721a1ac813702b0"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjExNzc4OnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo1NzoyMVrOHWRSIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0NjowNVrOHXAUzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMzg4OA==", "bodyText": "You probably could reduce it to return type.isPrimitive() || Number.class.isAssignableFrom(type) || Boolean.class.isAssignableFrom(type) || Char.class.isAssignableFrom(type));  (PrimitiveTypes is not really needed in this case).", "url": "https://github.com/apache/cxf/pull/697#discussion_r493113888", "createdAt": "2020-09-23T00:57:21Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "diffHunk": "@@ -527,10 +621,47 @@ public String getReasonPhrase() {\n                 return statusEnum != null ? statusEnum.getReasonPhrase() : \"\";\n             }\n \n+            @Override\n             public int getStatusCode() {\n                 return statusCode;\n             }\n \n         };\n     }\n-}\n+\n+    private enum PrimitiveTypes {\n+        BYTE(Byte.class, byte.class) { },\n+        SHORT(Short.class, short.class) { },\n+        INTEGER(Integer.class, int.class) { },\n+        LONG(Long.class, long.class) { },\n+        FLOAT(Float.class, float.class) { },\n+        DOUBLE(Double.class, double.class) { },\n+        BOOLEAN(Boolean.class, boolean.class) { },\n+        CHAR(Character.class, char.class) { };\n+\n+        private final Class<?> wrapper;\n+        private final Class<?> primitive;\n+\n+        PrimitiveTypes(Class<?> wrapper, Class<?> primitive) {\n+            this.wrapper = wrapper;\n+            this.primitive = primitive;\n+        }\n+\n+        public static PrimitiveTypes forType(Class<?> type) {\n+            for (PrimitiveTypes primitive : PrimitiveTypes.values()) {\n+                if (primitive.supports(type)) {\n+                    return primitive;\n+                }\n+            }\n+            return null;\n+        }\n+\n+        public boolean supports(Class<?> type) {\n+            return type == wrapper || type == primitive;\n+        }\n+    }\n+\n+    private static boolean isBasicType(Class<?> type) {\n+        return PrimitiveTypes.forType(type) != null || Number.class.isAssignableFrom(type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90a1c094d71036f8ca2c24a9b721a1ac813702b0"}, "originalPosition": 380}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4NDYyMw==", "bodyText": "Good call - I'm not sure why the PrimitiveTypes inner class was created... my first guess was performance, but it actually looks like it would perform worse.  I'll use your suggestion.", "url": "https://github.com/apache/cxf/pull/697#discussion_r493884623", "createdAt": "2020-09-23T20:46:05Z", "author": {"login": "andymc12"}, "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java", "diffHunk": "@@ -527,10 +621,47 @@ public String getReasonPhrase() {\n                 return statusEnum != null ? statusEnum.getReasonPhrase() : \"\";\n             }\n \n+            @Override\n             public int getStatusCode() {\n                 return statusCode;\n             }\n \n         };\n     }\n-}\n+\n+    private enum PrimitiveTypes {\n+        BYTE(Byte.class, byte.class) { },\n+        SHORT(Short.class, short.class) { },\n+        INTEGER(Integer.class, int.class) { },\n+        LONG(Long.class, long.class) { },\n+        FLOAT(Float.class, float.class) { },\n+        DOUBLE(Double.class, double.class) { },\n+        BOOLEAN(Boolean.class, boolean.class) { },\n+        CHAR(Character.class, char.class) { };\n+\n+        private final Class<?> wrapper;\n+        private final Class<?> primitive;\n+\n+        PrimitiveTypes(Class<?> wrapper, Class<?> primitive) {\n+            this.wrapper = wrapper;\n+            this.primitive = primitive;\n+        }\n+\n+        public static PrimitiveTypes forType(Class<?> type) {\n+            for (PrimitiveTypes primitive : PrimitiveTypes.values()) {\n+                if (primitive.supports(type)) {\n+                    return primitive;\n+                }\n+            }\n+            return null;\n+        }\n+\n+        public boolean supports(Class<?> type) {\n+            return type == wrapper || type == primitive;\n+        }\n+    }\n+\n+    private static boolean isBasicType(Class<?> type) {\n+        return PrimitiveTypes.forType(type) != null || Number.class.isAssignableFrom(type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMzg4OA=="}, "originalCommit": {"oid": "90a1c094d71036f8ca2c24a9b721a1ac813702b0"}, "originalPosition": 380}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3610, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}