{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NTEwOTk1", "number": 688, "title": "CXF-8324: Allow wider range of values for attachment properties", "bodyText": "Provide better error if the given value is not allowed\nDocument allowed values for properties\nI also had to do some special handling if someone provides a BigInteger which has a larger value than Long.MAX_VALUE.", "createdAt": "2020-08-10T13:45:53Z", "url": "https://github.com/apache/cxf/pull/688", "merged": true, "mergeCommit": {"oid": "f63582f4f39c76c2152ea67626b21326d81e6845"}, "closed": true, "closedAt": "2020-08-12T09:31:10Z", "author": {"login": "theobisproject"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9ib1LAH2gAyNDY1NTEwOTk1OmMyYjE1MzhjN2ZkMjk1ZGE1MmUyZDM0ZjNiMGE0NWJiOTNjODJmNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-GyhYAFqTQ2NTY4MDc3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c2b1538c7fd295da52e2d34f3b0a45bb93c82f56", "author": {"user": {"login": "theobisproject", "name": "Robin Schimpf"}}, "url": "https://github.com/apache/cxf/commit/c2b1538c7fd295da52e2d34f3b0a45bb93c82f56", "committedDate": "2020-08-10T13:42:38Z", "message": "CXF-8324: Allow wider range of values for attachment properties\n\nProvide better error if the given value is not allowed\nDocument allowed values for properties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjgwNzcz", "url": "https://github.com/apache/cxf/pull/688#pullrequestreview-465680773", "createdAt": "2020-08-12T08:03:56Z", "commit": {"oid": "c2b1538c7fd295da52e2d34f3b0a45bb93c82f56"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODowMzo1NlrOG_WTeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODowMzo1NlrOG_WTeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3ODkwNg==", "bodyText": "Maybe for /dev/null we could instead just use something like Files.createTempDirectory instead - I'm not sure if the former would work properly on windows?", "url": "https://github.com/apache/cxf/pull/688#discussion_r469078906", "createdAt": "2020-08-12T08:03:56Z", "author": {"login": "coheigea"}, "path": "core/src/test/java/org/apache/cxf/attachment/AttachmentUtilTest.java", "diffHunk": "@@ -122,4 +133,204 @@ public void testCreateContentID() throws Exception {\n         assertNotEquals(AttachmentUtil.createContentID(null), AttachmentUtil.createContentID(null));\n     }\n \n+    private CachedOutputStream testSetStreamedAttachmentProperties(final String property, final Object value)\n+            throws IOException {\n+        return testSetStreamedAttachmentProperties(property, value, new CachedOutputStream());\n+    }\n+\n+    private CachedOutputStream testSetStreamedAttachmentProperties(final String property, final Object value,\n+            final CachedOutputStream cos) throws IOException {\n+        Message message = new MessageImpl();\n+        message.put(property, value);\n+        AttachmentUtil.setStreamedAttachmentProperties(message, cos);\n+\n+        return cos;\n+    }\n+\n+    @Test\n+    public void bigIntAsAttachmentMemoryThreshold() throws IOException {\n+        BigInteger bigInteger = new BigInteger(String.valueOf(Long.MAX_VALUE));\n+        try (CachedOutputStream cos = testSetStreamedAttachmentProperties(\n+                AttachmentDeserializer.ATTACHMENT_MEMORY_THRESHOLD, bigInteger)) {\n+            assertEquals(bigInteger.longValue(), cos.getThreshold());\n+        }\n+        // Overflow long value\n+        bigInteger = bigInteger.add(BigInteger.ONE);\n+        try (CachedOutputStream cos = testSetStreamedAttachmentProperties(\n+                AttachmentDeserializer.ATTACHMENT_MEMORY_THRESHOLD, bigInteger)) {\n+            assertEquals(AttachmentDeserializer.THRESHOLD, cos.getThreshold());\n+        }\n+    }\n+\n+    @Test\n+    public void longAsAttachmentMemoryThreshold() throws IOException {\n+        try (CachedOutputStream cos = testSetStreamedAttachmentProperties(\n+                AttachmentDeserializer.ATTACHMENT_MEMORY_THRESHOLD, Long.MAX_VALUE)) {\n+            assertEquals(Long.MAX_VALUE, cos.getThreshold());\n+        }\n+    }\n+\n+    @Test\n+    public void integerAsAttachmentMemoryThreshold() throws IOException {\n+        try (CachedOutputStream cos = testSetStreamedAttachmentProperties(\n+                AttachmentDeserializer.ATTACHMENT_MEMORY_THRESHOLD, Integer.MAX_VALUE)) {\n+            assertEquals(Integer.MAX_VALUE, cos.getThreshold());\n+        }\n+    }\n+\n+    @Test\n+    public void shortAsAttachmentMemoryThreshold() throws IOException {\n+        try (CachedOutputStream cos = testSetStreamedAttachmentProperties(\n+                AttachmentDeserializer.ATTACHMENT_MEMORY_THRESHOLD, Short.MAX_VALUE)) {\n+            assertEquals(Short.MAX_VALUE, cos.getThreshold());\n+        }\n+    }\n+\n+    @Test\n+    public void byteAsAttachmentMemoryThreshold() throws IOException {\n+        try (CachedOutputStream cos = testSetStreamedAttachmentProperties(\n+                AttachmentDeserializer.ATTACHMENT_MEMORY_THRESHOLD, Byte.MAX_VALUE)) {\n+            assertEquals(Byte.MAX_VALUE, cos.getThreshold());\n+        }\n+    }\n+\n+    @Test\n+    public void numberStringAsAttachmentMemoryThreshold() throws IOException {\n+        try (CachedOutputStream cos = testSetStreamedAttachmentProperties(\n+                AttachmentDeserializer.ATTACHMENT_MEMORY_THRESHOLD, \"12345\")) {\n+            assertEquals(12345, cos.getThreshold());\n+        }\n+    }\n+\n+    @Test(expected = IOException.class)\n+    public void nonNumberStringAsAttachmentMemoryThreshold() throws IOException {\n+        try (CachedOutputStream cos = testSetStreamedAttachmentProperties(\n+                AttachmentDeserializer.ATTACHMENT_MEMORY_THRESHOLD, \"test\")) {\n+            // Will throw exception\n+        }\n+    }\n+\n+    @Test(expected = IOException.class)\n+    public void objectAsAttachmentMemoryThreshold() throws IOException {\n+        try (CachedOutputStream cos = testSetStreamedAttachmentProperties(\n+                AttachmentDeserializer.ATTACHMENT_MEMORY_THRESHOLD, new Object())) {\n+            // Will throw exception\n+        }\n+    }\n+\n+    @Test\n+    public void bigIntAsAttachmentMaxSize() throws IOException {\n+        CachedOutputStream cos = createMock(CachedOutputStream.class);\n+        BigInteger bigInteger = new BigInteger(String.valueOf(Long.MAX_VALUE));\n+        cos = testSetStreamedAttachmentProperties(AttachmentDeserializer.ATTACHMENT_MAX_SIZE, bigInteger, cos);\n+        replay(cos);\n+        cos.setMaxSize(bigInteger.longValue());\n+        cos.setThreshold(102400L);\n+        verify(cos);\n+        // Overflow long value\n+        bigInteger = bigInteger.add(BigInteger.ONE);\n+        cos = createMock(CachedOutputStream.class);\n+        cos = testSetStreamedAttachmentProperties(AttachmentDeserializer.ATTACHMENT_MAX_SIZE, bigInteger, cos);\n+        replay(cos);\n+        cos.setThreshold(102400L);\n+        verify(cos);\n+    }\n+\n+    @Test\n+    public void longAsAttachmentMaxSize() throws IOException {\n+        CachedOutputStream cos = createMock(CachedOutputStream.class);\n+        cos = testSetStreamedAttachmentProperties(AttachmentDeserializer.ATTACHMENT_MAX_SIZE, Long.MAX_VALUE, cos);\n+        replay(cos);\n+        cos.setMaxSize(Long.MAX_VALUE);\n+        cos.setThreshold(102400L);\n+        verify(cos);\n+    }\n+\n+    @Test\n+    public void integerAsAttachmentMaxSize() throws IOException {\n+        CachedOutputStream cos = createMock(CachedOutputStream.class);\n+        cos = testSetStreamedAttachmentProperties(AttachmentDeserializer.ATTACHMENT_MAX_SIZE, Integer.MAX_VALUE, cos);\n+        replay(cos);\n+        cos.setMaxSize(Integer.MAX_VALUE);\n+        cos.setThreshold(102400L);\n+        verify(cos);\n+    }\n+\n+    @Test\n+    public void shortAsAttachmentMaxSize() throws IOException {\n+        CachedOutputStream cos = createMock(CachedOutputStream.class);\n+        cos = testSetStreamedAttachmentProperties(AttachmentDeserializer.ATTACHMENT_MAX_SIZE, Short.MAX_VALUE, cos);\n+        replay(cos);\n+        cos.setMaxSize(Short.MAX_VALUE);\n+        cos.setThreshold(102400L);\n+        verify(cos);\n+    }\n+\n+    @Test\n+    public void byteAsAttachmentMaxSize() throws IOException {\n+        CachedOutputStream cos = createMock(CachedOutputStream.class);\n+        cos = testSetStreamedAttachmentProperties(AttachmentDeserializer.ATTACHMENT_MAX_SIZE, Byte.MAX_VALUE, cos);\n+        replay(cos);\n+        cos.setMaxSize(Byte.MAX_VALUE);\n+        cos.setThreshold(102400L);\n+        verify(cos);\n+    }\n+\n+    @Test\n+    public void numberStringAsAttachmentMaxSize() throws IOException {\n+        CachedOutputStream cos = createMock(CachedOutputStream.class);\n+        cos = testSetStreamedAttachmentProperties(AttachmentDeserializer.ATTACHMENT_MAX_SIZE, \"12345\", cos);\n+        replay(cos);\n+        cos.setMaxSize(12345);\n+        cos.setThreshold(102400L);\n+        verify(cos);\n+    }\n+\n+    @Test(expected = IOException.class)\n+    public void nonNumberStringAsAttachmentMaxSize() throws IOException {\n+        try (CachedOutputStream cos = testSetStreamedAttachmentProperties(AttachmentDeserializer.ATTACHMENT_MAX_SIZE,\n+                \"test\")) {\n+            // Will throw exception\n+        }\n+    }\n+\n+    @Test(expected = IOException.class)\n+    public void objectAsAttachmentMaxSize() throws IOException {\n+        try (CachedOutputStream cos = testSetStreamedAttachmentProperties(AttachmentDeserializer.ATTACHMENT_MAX_SIZE,\n+                new Object())) {\n+            // Will throw exception\n+        }\n+    }\n+\n+    @Test\n+    public void fileAsAttachmentDirectory() throws IOException {\n+        File attachmentDirectory = new File(\"/dev/null\");\n+        CachedOutputStream cos = createMock(CachedOutputStream.class);\n+        cos = testSetStreamedAttachmentProperties(AttachmentDeserializer.ATTACHMENT_DIRECTORY, attachmentDirectory,\n+                cos);\n+        replay(cos);\n+        cos.setOutputDir(attachmentDirectory);\n+        cos.setThreshold(102400L);\n+        verify(cos);\n+    }\n+\n+    @Test\n+    public void stringAsAttachmentDirectory() throws IOException {\n+        String attachmentDirectory = \"/dev/null\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2b1538c7fd295da52e2d34f3b0a45bb93c82f56"}, "originalPosition": 207}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2119, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}