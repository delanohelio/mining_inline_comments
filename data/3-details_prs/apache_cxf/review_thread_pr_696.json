{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNTc3MTIy", "number": 696, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoxNDowOFrOEmTsiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoxNDowOFrOEmTsiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjA0MDQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/interceptor/ServiceInvokerInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoxNDowOFrOHWQlWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNToxNDozOFrOHWzmMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMjQyNA==", "bodyText": "Sorry @andymc12 , just of of curiosity, the MessageImpl is a HashMap and uses its default constructor, where capacity is set to 16 and load factor to 0.75.\n/**\n     * Constructs an empty <tt>HashMap</tt> with the default initial capacity\n     * (16) and the default load factor (0.75).\n     */\n    public HashMap() {\n        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n    }\n\nYou guys found out that load factor of 1 helps to eliminate unnecessary resizing (probably because the size of the message container is around 16 elements)?", "url": "https://github.com/apache/cxf/pull/696#discussion_r493102424", "createdAt": "2020-09-23T00:14:08Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/interceptor/ServiceInvokerInterceptor.java", "diffHunk": "@@ -62,7 +62,7 @@ public void run() {\n \n                     Message outMessage = runableEx.getOutMessage();\n                     if (outMessage == null) {\n-                        outMessage = new MessageImpl();\n+                        outMessage = new MessageImpl(16, 1); // perf: size 16 / factor 1 to avoid resize operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e62f626ae1274157400b49490bffb242757b6577"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY3NjA4MQ==", "bodyText": "Yes. It's been a while since we made this change, but I know the performance team tried a few different options and found 16/1 to be the best combination based on the benchmarks they were running.  But I agree with your assessment - this combination is best where there are between 12-16 elements - or rather, it avoids resize between 0-16, but it performs better than the default when where are between 12-16 elements.\nThanks for the review!", "url": "https://github.com/apache/cxf/pull/696#discussion_r493676081", "createdAt": "2020-09-23T15:14:38Z", "author": {"login": "andymc12"}, "path": "core/src/main/java/org/apache/cxf/interceptor/ServiceInvokerInterceptor.java", "diffHunk": "@@ -62,7 +62,7 @@ public void run() {\n \n                     Message outMessage = runableEx.getOutMessage();\n                     if (outMessage == null) {\n-                        outMessage = new MessageImpl();\n+                        outMessage = new MessageImpl(16, 1); // perf: size 16 / factor 1 to avoid resize operation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMjQyNA=="}, "originalCommit": {"oid": "e62f626ae1274157400b49490bffb242757b6577"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3607, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}