{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTA0OTI3", "number": 641, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoyMzoyNFrODgyNtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo0NTo0NVrODhGSKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzAzNzM0OnYy", "diffSide": "RIGHT", "path": "rt/management/src/main/java/org/apache/cxf/management/jmx/MBServerConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoyMzoyNFrOFrLcKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMTo0NTo1N1rOFrlI2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyMDUyMA==", "bodyText": "I'm just wondering what happens if we define a URL that doesn't end with jmxrmi....shouldn't we take the lookup name from the serviceUrl?", "url": "https://github.com/apache/cxf/pull/641#discussion_r380820520", "createdAt": "2020-02-18T17:23:24Z", "author": {"login": "coheigea"}, "path": "rt/management/src/main/java/org/apache/cxf/management/jmx/MBServerConnectorFactory.java", "diffHunk": "@@ -169,18 +174,71 @@ public void run() {\n         } else {\n              // Start the connector server in the same thread.\n             connectorServer.start();\n+            remoteServerStub = rmiServer.toStub();\n         }\n \n         if (LOG.isLoggable(Level.INFO)) {\n             LOG.info(\"JMX connector server started: \" + connectorServer);\n         }\n     }\n \n+    static int getRegistryPort(final String url) {\n+        int serverStart = url.indexOf(\"/jndi/rmi://\");\n+        final String serverPart = url.substring(serverStart + 12);\n+        int portStart = serverPart.indexOf(':') + 1;\n+\n+        int portEnd;\n+        int port = 0;\n+        if (portStart > 0) {\n+            portEnd = indexNotOfNumber(serverPart, portStart);\n+            if (portEnd > portStart) {\n+                final String portString = serverPart.substring(portStart, portEnd);\n+                port = Integer.parseInt(portString);\n+            }\n+        }\n+        return port;\n+    }\n+\n     public void destroy() throws IOException {\n         connectorServer.stop();\n         if (LOG.isLoggable(Level.INFO)) {\n             LOG.info(\"JMX connector server stopped: \" + connectorServer);\n         }\n     }\n \n+    /*\n+     * Better to use the internal API than re-invent the wheel.\n+     */\n+    @SuppressWarnings(\"restriction\")\n+    private class JmxRegistry extends sun.rmi.registry.RegistryImpl {\n+        static final String LOOKUP_NAME = \"jmxrmi\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e502467138d4bc96a4b05c74e3308ee6f821cd52"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyODY0Mg==", "bodyText": "Good point. Let's see if we can do that in a smarter way.", "url": "https://github.com/apache/cxf/pull/641#discussion_r380828642", "createdAt": "2020-02-18T17:38:15Z", "author": {"login": "jgallimore"}, "path": "rt/management/src/main/java/org/apache/cxf/management/jmx/MBServerConnectorFactory.java", "diffHunk": "@@ -169,18 +174,71 @@ public void run() {\n         } else {\n              // Start the connector server in the same thread.\n             connectorServer.start();\n+            remoteServerStub = rmiServer.toStub();\n         }\n \n         if (LOG.isLoggable(Level.INFO)) {\n             LOG.info(\"JMX connector server started: \" + connectorServer);\n         }\n     }\n \n+    static int getRegistryPort(final String url) {\n+        int serverStart = url.indexOf(\"/jndi/rmi://\");\n+        final String serverPart = url.substring(serverStart + 12);\n+        int portStart = serverPart.indexOf(':') + 1;\n+\n+        int portEnd;\n+        int port = 0;\n+        if (portStart > 0) {\n+            portEnd = indexNotOfNumber(serverPart, portStart);\n+            if (portEnd > portStart) {\n+                final String portString = serverPart.substring(portStart, portEnd);\n+                port = Integer.parseInt(portString);\n+            }\n+        }\n+        return port;\n+    }\n+\n     public void destroy() throws IOException {\n         connectorServer.stop();\n         if (LOG.isLoggable(Level.INFO)) {\n             LOG.info(\"JMX connector server stopped: \" + connectorServer);\n         }\n     }\n \n+    /*\n+     * Better to use the internal API than re-invent the wheel.\n+     */\n+    @SuppressWarnings(\"restriction\")\n+    private class JmxRegistry extends sun.rmi.registry.RegistryImpl {\n+        static final String LOOKUP_NAME = \"jmxrmi\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyMDUyMA=="}, "originalCommit": {"oid": "e502467138d4bc96a4b05c74e3308ee6f821cd52"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxNDA3NA==", "bodyText": "Hopefully done in the latest commit.", "url": "https://github.com/apache/cxf/pull/641#discussion_r380914074", "createdAt": "2020-02-18T20:22:25Z", "author": {"login": "jgallimore"}, "path": "rt/management/src/main/java/org/apache/cxf/management/jmx/MBServerConnectorFactory.java", "diffHunk": "@@ -169,18 +174,71 @@ public void run() {\n         } else {\n              // Start the connector server in the same thread.\n             connectorServer.start();\n+            remoteServerStub = rmiServer.toStub();\n         }\n \n         if (LOG.isLoggable(Level.INFO)) {\n             LOG.info(\"JMX connector server started: \" + connectorServer);\n         }\n     }\n \n+    static int getRegistryPort(final String url) {\n+        int serverStart = url.indexOf(\"/jndi/rmi://\");\n+        final String serverPart = url.substring(serverStart + 12);\n+        int portStart = serverPart.indexOf(':') + 1;\n+\n+        int portEnd;\n+        int port = 0;\n+        if (portStart > 0) {\n+            portEnd = indexNotOfNumber(serverPart, portStart);\n+            if (portEnd > portStart) {\n+                final String portString = serverPart.substring(portStart, portEnd);\n+                port = Integer.parseInt(portString);\n+            }\n+        }\n+        return port;\n+    }\n+\n     public void destroy() throws IOException {\n         connectorServer.stop();\n         if (LOG.isLoggable(Level.INFO)) {\n             LOG.info(\"JMX connector server stopped: \" + connectorServer);\n         }\n     }\n \n+    /*\n+     * Better to use the internal API than re-invent the wheel.\n+     */\n+    @SuppressWarnings(\"restriction\")\n+    private class JmxRegistry extends sun.rmi.registry.RegistryImpl {\n+        static final String LOOKUP_NAME = \"jmxrmi\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyMDUyMA=="}, "originalCommit": {"oid": "e502467138d4bc96a4b05c74e3308ee6f821cd52"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI0MTU2MA==", "bodyText": "Looks good thanks", "url": "https://github.com/apache/cxf/pull/641#discussion_r381241560", "createdAt": "2020-02-19T11:45:57Z", "author": {"login": "coheigea"}, "path": "rt/management/src/main/java/org/apache/cxf/management/jmx/MBServerConnectorFactory.java", "diffHunk": "@@ -169,18 +174,71 @@ public void run() {\n         } else {\n              // Start the connector server in the same thread.\n             connectorServer.start();\n+            remoteServerStub = rmiServer.toStub();\n         }\n \n         if (LOG.isLoggable(Level.INFO)) {\n             LOG.info(\"JMX connector server started: \" + connectorServer);\n         }\n     }\n \n+    static int getRegistryPort(final String url) {\n+        int serverStart = url.indexOf(\"/jndi/rmi://\");\n+        final String serverPart = url.substring(serverStart + 12);\n+        int portStart = serverPart.indexOf(':') + 1;\n+\n+        int portEnd;\n+        int port = 0;\n+        if (portStart > 0) {\n+            portEnd = indexNotOfNumber(serverPart, portStart);\n+            if (portEnd > portStart) {\n+                final String portString = serverPart.substring(portStart, portEnd);\n+                port = Integer.parseInt(portString);\n+            }\n+        }\n+        return port;\n+    }\n+\n     public void destroy() throws IOException {\n         connectorServer.stop();\n         if (LOG.isLoggable(Level.INFO)) {\n             LOG.info(\"JMX connector server stopped: \" + connectorServer);\n         }\n     }\n \n+    /*\n+     * Better to use the internal API than re-invent the wheel.\n+     */\n+    @SuppressWarnings(\"restriction\")\n+    private class JmxRegistry extends sun.rmi.registry.RegistryImpl {\n+        static final String LOOKUP_NAME = \"jmxrmi\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyMDUyMA=="}, "originalCommit": {"oid": "e502467138d4bc96a4b05c74e3308ee6f821cd52"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDMyNTUzOnYy", "diffSide": "RIGHT", "path": "rt/management/src/main/java/org/apache/cxf/management/jmx/MBServerConnectorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo0NTo0NlrOFrq8dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo0NTo0NlrOFrq8dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzNjY5Mw==", "bodyText": "Could we make this protected? And add a test for it?", "url": "https://github.com/apache/cxf/pull/641#discussion_r381336693", "createdAt": "2020-02-19T14:45:46Z", "author": {"login": "coheigea"}, "path": "rt/management/src/main/java/org/apache/cxf/management/jmx/MBServerConnectorFactory.java", "diffHunk": "@@ -169,18 +176,85 @@ public void run() {\n         } else {\n              // Start the connector server in the same thread.\n             connectorServer.start();\n+            remoteServerStub = rmiServer.toStub();\n         }\n \n         if (LOG.isLoggable(Level.INFO)) {\n             LOG.info(\"JMX connector server started: \" + connectorServer);\n         }\n     }\n \n+    static int getRegistryPort(final String url) {\n+        int serverStart = url.indexOf(\"/jndi/rmi://\");\n+        final String serverPart = url.substring(serverStart + 12);\n+        int portStart = serverPart.indexOf(':') + 1;\n+\n+        int portEnd;\n+        int port = 0;\n+        if (portStart > 0) {\n+            portEnd = indexNotOfNumber(serverPart, portStart);\n+            if (portEnd > portStart) {\n+                final String portString = serverPart.substring(portStart, portEnd);\n+                port = Integer.parseInt(portString);\n+            }\n+        }\n+        return port;\n+    }\n+\n+    public static String getBindingName(final JMXServiceURL jmxServiceURL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6497cbe9da35a6e747330fdd5b675b4f6e1ba45d"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3670, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}