{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NzU4NDEw", "number": 721, "reviewThreads": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo1MzowOFrOE3eP1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxOTo0MzowNlrOFEguPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjAyNzA4OnYy", "diffSide": "RIGHT", "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBContextInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo1MzowOFrOHw1edA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo1MzowOFrOHw1edA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2OTg0NA==", "bodyText": "I think we have to clearly distinguish the case when factory class exists and does not (createFactory). Could you please extract the logic of detecting the presence of factory class into dedicated method and modify addClass method to try to find the factory class first and fallback to createFactory if needed?\nWe should also ensure that the factory class is suitable and could be used accordingly.", "url": "https://github.com/apache/cxf/pull/721#discussion_r520969844", "createdAt": "2020-11-11T00:53:08Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBContextInitializer.java", "diffHunk": "@@ -559,44 +559,47 @@ private static Object createTypeReference(QName n, Class<?> cls) {\n     private Object createFactory(Class<?> cls, Constructor<?> contructor) {\n         String newClassName = cls.getName() + \"Factory\";\n         ASMHelper helper = new ASMHelper();\n-        ClassWriter cw = helper.createClassWriter();\n-        MethodVisitor mv;\n-\n-        cw.visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER,\n-                 ASMHelper.periodToSlashes(newClassName), null, \"java/lang/Object\", null);\n-\n-        cw.visitSource(cls.getSimpleName() + \"Factory\" + \".java\", null);\n+        Class<?> factoryClass = helper.findClass(newClassName, cls);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjAyOTE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "isResolved": true, "comments": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo1MzozN1rOHw1f6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxMDoxOTozMFrOHzJ__w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA==", "bodyText": "How these methods are supposed to be used?", "url": "https://github.com/apache/cxf/pull/721#discussion_r520970218", "createdAt": "2020-11-11T00:53:37Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE2OTUwOQ==", "bodyText": "inside quarkiverse-cxf inside a a servlet\nhttps://github.com/quarkiverse/quarkiverse-cxf/blob/master/runtime/src/main/java/io/quarkiverse/cxf/CXFQuarkusServlet.java#L50\nor\nhttps://github.com/quarkiverse/quarkiverse-cxf/blob/master/runtime/src/main/java/io/quarkiverse/cxf/CxfClientProducer.java#L19\nI can add\nASMHelper.addExternalClass('io.quarkiverse.test.FruitFactory', Class.forName('io.quarkiverse.test.FruitFactory'));\nhere it is just for factory but I will provide the full list of generated class wrapperHelper (for request and response), packageInfo, customException with faultInfo field, NamespacePrefixMapper", "url": "https://github.com/apache/cxf/pull/721#discussion_r521169509", "createdAt": "2020-11-11T07:37:08Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwOTA2MA==", "bodyText": "augmentor will produce class during build time and send class generated through recorder to runtime.", "url": "https://github.com/apache/cxf/pull/721#discussion_r521209060", "createdAt": "2020-11-11T08:58:08Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxMjE3MQ==", "bodyText": "Is it possible to not make it quarkus specific? Here is my proposal:\n\nMake ASMHelper a SPI set as cxf bus extension - to support versions in a pluggable way and not hardcode 10 versions of asm + reflection\nProvide current default impls\nHave a a) generate proxy at build time mojo AND b) a load first proxy (before generating it) strategy (note that it makes asm useless and must not trigger asm classloading to work).\n\n3 is close to https://github.com/apache/openwebbeans/blob/1f83552e74c7966fc1009a3a7417900e7ce42b32/webbeans-impl/src/main/java/org/apache/webbeans/service/ClassLoaderProxyService.java#L85 for runtime and https://github.com/apache/openwebbeans/blob/1f83552e74c7966fc1009a3a7417900e7ce42b32/webbeans-impl/src/main/java/org/apache/webbeans/service/ClassLoaderProxyService.java#L62 for build time (and dump the proxies as .class).\nThis way the code is not quarkus specific and benefits all applications in JVM and native mode.", "url": "https://github.com/apache/cxf/pull/721#discussion_r521212171", "createdAt": "2020-11-11T09:03:34Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NzgwMA==", "bodyText": "I do not get the point that this is quarkus specific\n\n\nindeed it is not quarkus specific but graal specific because can be used by spring boot too. Or any system which can provide class directly to avoid class generation. Anyway, It was the other proposition in the jira. But I found that less intrusive. The issue if I do so, I will have to do it for more class (wrapper helper, exception,...) which are generated. That s why I choose this solution.\n\n\nIf I understand correctly, I create a class factory proxy static which provide creator which return Class and if not in Map<String, Class<?>> . and each time, AsmHelper is used, I add this ProxyClassFactory in between. And in my code I just call ProxyClassFactory.getProxies().put(...);\n\n\nSorry, I do not know what you mean by \"SPI set as cxf bus extension\" ?\nDo you mean, adding interface and implementation in bus-extensions.txt and adding interface for ASMHelper and inherit ASMHelper an implemtnation for each asm version in getASMClass ?\nIt seems a big refactoring and not related to the proxy need for quarkus ?\nI agree that static class is not a good solution for ASMHelper and it is better to have factory pattern but I need a little help on that to have more explanation to respect the cxf pattern (bus-extensions.txt and factory). Do you have any document / guide ?", "url": "https://github.com/apache/cxf/pull/721#discussion_r521267800", "createdAt": "2020-11-11T10:39:43Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMDQ5NA==", "bodyText": "@dufoli:\n\nit is quarkus specific until you have the generator in cxf codebase (which is not the case in the pr) so it is quarkus specific ;). In other words, current PR is a quarkus extension point because it is feature incomplete for all other env and there is no real reason for that - don't get me wrong, I understand you got stucked and solve your issue but I think to integrate mainstream code it should go a bit further otherwise there is no benefit to get it in cxf land.\nyou actually don't need this map, you just do a classloader.loadClass (take care it is not the tccl but cxf classloader, can be in bus extensions). Only small thing to take care is to not do it at runtime but only deploy time but it should already be the case (or with a lazy init pattern but only once). In quarkus land you just generate the class at build time and put it in runtime classes (as other proxies).\nthe spi point is to avoid to have to handle ow2.asm, xbean.asm7, xbean.asm8, xbean.asm9 etc.\nto not make it global it must be in cxf bus extensions IMHO (as ClassUnwrapper for example). Each time a class is generated, it has a bus not far so it should be easy to read from there.\n\nhope it makes sense", "url": "https://github.com/apache/cxf/pull/721#discussion_r521310494", "createdAt": "2020-11-11T12:02:39Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ1MjgwNQ==", "bodyText": "@rmannibucau  thanks for response ! ;-)\n\nhmm, I think, I got your point. indeed, you mean that I need to use cxf parsing system to get serviceInfo and generate all classes without loading servlet or client stuff. The issue is that quarkus use yandex to parse classes and gizmo lib to generate code during build time. I am not sure, I can reuse the cxf system to parse wsdl, and annoted classe and generate serviceInfo in order to generate all classes. Is it doable ? Because I need to inject particular classWriter for that.\nIs it your point ? I have think to a such system at the beginning but it was a nightmare to understand how to use cxf for that. Because it is not a usual case.\nSo you mean that I inject my own classLoader which contain my classes in order that classLoader see the class I have generated ?\nI do not get you point fully but I will try to code what I understand and I will let you review the code and give feedback.", "url": "https://github.com/apache/cxf/pull/721#discussion_r521452805", "createdAt": "2020-11-11T15:49:33Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ1ODEwOQ==", "bodyText": "@dufoli\n\njandex or not does not change much things, at the end you must register the generated class in graal so a loadClass will cover both cases, only the generation phase will be different but CXF must get one impl for this feature to make sense in CXF itself IMHO - and it shouldnt be that hard to do a mojo generating proxies.\nyou don't need any custom classloader since classes are generated and dumped (physically or not) at build time in the target/classes of your project so you have them at runtime and just need to read them at run time.", "url": "https://github.com/apache/cxf/pull/721#discussion_r521458109", "createdAt": "2020-11-11T15:57:02Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYzNDAxOQ==", "bodyText": "TODO:\nFor point 1)\n\nI create ASMHelper as interface with public\nrename ASMHelper class to ASMHelperImpl and make it inherite of interface.\ncreate subclass of ASMHelperImpl  for each version of ASM ? (not sure of this part )\ncreate class Proxy implements ASMHelper which do nothing but just load class from classLoader. For this part it is not clear because className is send through a visite on ClassWriter. So it mean I need a NoOpClassWriter wich just store className ?\nadd in bus-extenstions.txt a line:\norg.apache.cxf.common.util.ASMHelper$TypeHelperClassLoader:org.apache.cxf.common.util.ASMHelper$:true", "url": "https://github.com/apache/cxf/pull/721#discussion_r521634019", "createdAt": "2020-11-11T20:57:15Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYzNTM2MA==", "bodyText": "just to know if I am on right direction... @rmannibucau can you just check what I provide.\nBut I need to understand some things which seems odd to me.", "url": "https://github.com/apache/cxf/pull/721#discussion_r521635360", "createdAt": "2020-11-11T21:00:06Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYzODU3NQ==", "bodyText": "Hmm,\nThink it mixes two things, sorry if I was not clear about this point.\nUntil now we were generating proxies with asm, that was it.\nNow we will be able to load proxies without using asm at all so we must split loading and generation IMO and only trigger generation if not existing so it means 2 independent services: GeneratedClassLoader maybe and ClassGenerator (backend by ASM).\nSplitting it avoids to have the generation API in build time generation case.\nIt also means CXF does not need the proxy code anymore since asmX integration can now belong to another module (we can create a cxf-asm-compat module for migration purposes maybe and only keep ow2 integration code in cxf-core and register it only if asm is available and ClassGenerator not registered in the bus already).\nAbout the registration: I wouldn't register it by default but use something like: if (not bus has ClassGenerator) tryLoadOw2AsmClassGenerator().\nHope it makes sense.\nIn all case I think it goes in the very right direction, thanks a lot for the effort!", "url": "https://github.com/apache/cxf/pull/721#discussion_r521638575", "createdAt": "2020-11-11T21:06:33Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NDU5MQ==", "bodyText": "indeed best is just to provide me pseudoCode of usage you expect. Because, you are talking about SPI for ASMHelper and ClassLoader so I am bit lost? I think we need a factory for both (because I hate static class)", "url": "https://github.com/apache/cxf/pull/721#discussion_r521654591", "createdAt": "2020-11-11T21:39:39Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NzczNg==", "bodyText": "Idea is to split the way to get the class - findClass (Generated Class Loader or finder, name was not very great since ambiguous with ClassLoader) - and the way to generate a class (all asm impls).\nAll static calls must become deprecated imho.", "url": "https://github.com/apache/cxf/pull/721#discussion_r521667736", "createdAt": "2020-11-11T22:08:28Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NTg0NQ==", "bodyText": "Ok So, I am on good way, but long move. Because so much here use static...", "url": "https://github.com/apache/cxf/pull/721#discussion_r521685845", "createdAt": "2020-11-11T22:51:57Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5NDQzMQ==", "bodyText": "I have move asmHelper to instance now. I will continue tomorrow...", "url": "https://github.com/apache/cxf/pull/721#discussion_r521694431", "createdAt": "2020-11-11T23:16:11Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5NDQ2NA==", "bodyText": "thanks for help ;-)", "url": "https://github.com/apache/cxf/pull/721#discussion_r521694464", "createdAt": "2020-11-11T23:16:18Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyMDkyOA==", "bodyText": "@rmannibucau I have implement all for (it do not build because not migrate for other and I have issue of syntax validation.)\n\ndo you know how maven can fix syntax validation automatically ? be cause process-sources report error but do not fix them. (import sort, ...)\nif you are ok with this solution, I will continue with other classes.\nBTW, Huge patch 1200 LOC and it is not finished ;-)", "url": "https://github.com/apache/cxf/pull/721#discussion_r522020928", "createdAt": "2020-11-12T11:02:56Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyMTQ2Nw==", "bodyText": "is there any live chat like zulip, because we are both french and it can be easier to exchange about solution directly?", "url": "https://github.com/apache/cxf/pull/721#discussion_r522021467", "createdAt": "2020-11-12T11:03:50Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyNzg2OQ==", "bodyText": "@dufoli we have slack (the-asf), can need to request an invite (don't fully recall the details) but it should be quite straight forward to connect.\nFor syntax validation I'm generally doing it manually (don't think maven-checkstyle-plugin can autoformat sources).\nAbout the rest I'd say ASMHelperImpl can maybe be N classes and drop the abstraction, wdyt? Also the generation is not only about namespace mapper think we have some other proxies no?\nbut overall, it looks good.", "url": "https://github.com/apache/cxf/pull/721#discussion_r522027869", "createdAt": "2020-11-12T11:14:29Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA0NTY4Mg==", "bodyText": "and I need to know how I can inject to bus.GetExtension(org.apache.cxf.common.spi.ClassLoaderService.class) the\norg.apache.cxf.common.spi.ClassLoaderProxyService$LoadFirst instead of\norg.apache.cxf.common.spi.ClassLoaderProxyService$GenerateJustInTime\nand after how I inject my class...\nthrough bus-extensions.txt , if create bus-extensions.txt in my quarkus augmentor with\norg.apache.cxf.common.spi.ClassLoaderProxyService:org.apache.cxf.common.spi.ClassLoaderProxyService$GenerateJustInTime: true\nis it ok ?\nor I have to use code to declare a change of extension ?\nsecond question is how to use cxf to parse code and wsdl to generate class . I was thinking to use my own ASMHelper with a quarkus class writer .", "url": "https://github.com/apache/cxf/pull/721#discussion_r522045682", "createdAt": "2020-11-12T11:45:51Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA1NjEzMw==", "bodyText": "@dufoli: i tend to do programmatically or configuration (spring) when configuring cxf deployment. I didn't dig into your quarkus integration but if you create yourself your bus you can do it quite trivially, if you don't, you fallback on a default factory and the txt file is needed (i would recommend you to not rely on it since it will be easier to interact with cxf without but it works).\nTo generate you should trigger a cxf deployment (potentially on a local storage) and let the spy service capture the proxies, then you dump them in the graal classes singleton I think - here again, having the bus means you have the service instance so it is quite trivial to run the cxf deployment and read the captured instances ;).", "url": "https://github.com/apache/cxf/pull/721#discussion_r522056133", "createdAt": "2020-11-12T12:04:23Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI1ODIwNw==", "bodyText": "@rmannibucau I have added basic codes for it but it is complicated for something.\nClassCreator class generate the JAXButils createNamespaceWrapper and it work but it work because we are in same module (core) but other classcreator are in dependencies... so if we switch to new system class creation need to be moved to core which seems a bad idea to me.", "url": "https://github.com/apache/cxf/pull/721#discussion_r522258207", "createdAt": "2020-11-12T16:52:23Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2NjAyOQ==", "bodyText": "@dufoli not sure i'm following, the goal is to hide ASM abstraction and replace it by a functional API so it shouldn't be an issue. Also for something jaxb specific you can use another SPI in the bus, sounds fine for me. They can be implemented in the same module (ex: cxf-asm, cxf-xbean-asm9 and so on) and instantiated at need only. wdyt?", "url": "https://github.com/apache/cxf/pull/721#discussion_r522266029", "createdAt": "2020-11-12T17:02:54Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI4NDQzOQ==", "bodyText": "ok got it. So it mean that each class writer  (ASMHelper) will need a dedicated service provider with classloader on one side and class generator on other side. I get it. I was just expectif a single service provider to avoid to recode each time the balancing system everywhere. I prefer to have a single solution for all ASMHelper Class generator. I will think to it .", "url": "https://github.com/apache/cxf/pull/721#discussion_r522284439", "createdAt": "2020-11-12T17:27:56Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5NDI1MQ==", "bodyText": "The classloader part can be shared, we don't have to split the code which is the same.\nThe proxy generation will likely be forked until we keep the kind of facade we have (but it has some pitfalls and is not tested).\nNow if you prefer a single asm module for now it works too as a first step - your PR is not exactly on that point, it just implies a refactoring which enables that point ;). Once we have extensions in the bus we can refactor more easily in a second step too. The only key point is to split bytecode generation and loading in extensions.\nOpen point: will corba module be dropped (I see it uses asmhelper but if it is deleted soon no need to handle it and then asm becomes an xml thing it seems which can makes things easier).", "url": "https://github.com/apache/cxf/pull/721#discussion_r522294251", "createdAt": "2020-11-12T17:41:31Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ1MDAzNQ==", "bodyText": "I have produce all ASMHelper spi. Need to fix format and test tomorrow.", "url": "https://github.com/apache/cxf/pull/721#discussion_r522450035", "createdAt": "2020-11-12T21:54:24Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjcxMDk5NQ==", "bodyText": "+1, small note: when you read an extension, maybe check it is null and if so throw an exception saying \"missing extension X, you can add module m1 or m2\" to ensure user is aware of what happens.", "url": "https://github.com/apache/cxf/pull/721#discussion_r522710995", "createdAt": "2020-11-13T07:10:25Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjcxODU0Mw==", "bodyText": "basic null ref check... ;-)\nMy current issue, is that I miss one class JAXBExtensionHelper and it is full static... and no bus available to getExtension...\nI am looking for solution.", "url": "https://github.com/apache/cxf/pull/721#discussion_r522718543", "createdAt": "2020-11-13T07:18:55Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjcyMDg5NA==", "bodyText": "AFAIK it is only used in \"register\" or \"loader\" classes which have the bus ;)", "url": "https://github.com/apache/cxf/pull/721#discussion_r522720894", "createdAt": "2020-11-13T07:21:20Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4NDk0OA==", "bodyText": "Yes I remove static...", "url": "https://github.com/apache/cxf/pull/721#discussion_r522784948", "createdAt": "2020-11-13T08:23:20Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM5NzE5MA==", "bodyText": "I have issue with test class. I use the mock system to create bus and return the good ASMHelper.\n        Bus bus = control.createMock(Bus.class);\n        EasyMock.expect(bus.getExtension(ASMHelper.class)).andReturn(new ASMHelperImpl()).anyTimes();\n        ExtensionClassCreator extr = new ExtensionClassGenerator(bus);\n        EasyMock.expect(bus.getExtension(ExtensionClassCreator.class)).andStubReturn(extr);\n\nbut I get error:\njava.lang.IllegalStateException:\nmissing behavior definition for the preceding method call:\nBus.getExtension(interface org.apache.cxf.common.util.ASMHelper)\nUsage is: expect(a.foo()).andXXX()\nat org.apache.cxf.wsdl.JAXBExtensionHelperTest.testAddTestExtension(JAXBExtensionHelperTest.java:88)", "url": "https://github.com/apache/cxf/pull/721#discussion_r523397190", "createdAt": "2020-11-14T09:07:21Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM5NzIyMA==", "bodyText": "I have try with AndStubReturn but change nothing...", "url": "https://github.com/apache/cxf/pull/721#discussion_r523397220", "createdAt": "2020-11-14T09:07:51Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM5Nzg4NA==", "bodyText": "Before digging, did you try not mocking it at all? Looks very doable using the bus impl directly (also mock tests have very few value at the end so I wouldnt invest much in them if possible).", "url": "https://github.com/apache/cxf/pull/721#discussion_r523397884", "createdAt": "2020-11-14T09:15:56Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQwMzI2Mw==", "bodyText": "it work without mock but now, I am on a real issue because asm version generated is not the good one ... Strange", "url": "https://github.com/apache/cxf/pull/721#discussion_r523403263", "createdAt": "2020-11-14T10:19:30Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA=="}, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjAzNTM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo1NDo1M1rOHw1jyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo1NDo1M1rOHw1jyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MTIwOA==", "bodyText": "Same as for createFactory, it would be better to distinguish the case when suitable factory exists vs creating a new one.", "url": "https://github.com/apache/cxf/pull/721#discussion_r520971208", "createdAt": "2020-11-11T00:54:53Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java", "diffHunk": "@@ -1346,7 +1346,11 @@ private static Object createEclipseNamespaceMapper(Class<?> mcls, Map<String, St\n             + (\"RI\".equals(postFix) ? \"\" : \"internal/\")\n             + \"bind/marshaller/NamespacePrefixMapper\";\n         String postFixedName = \"org/apache/cxf/jaxb/NamespaceMapper\" + postFix;\n+        Class<?> cls = helper.findClass(className, ref);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDYzMDM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjowMzozNlrOH0hghQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowODozMVrOH2thNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNjk5Nw==", "bodyText": "I think we could delete this debug flag and related code. It could be easily achieved by introducing respective extension fe DumpingClassGeneratorClassLoader extends ClassGeneratorClassLoader", "url": "https://github.com/apache/cxf/pull/721#discussion_r524836997", "createdAt": "2020-11-17T02:03:36Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkzNTExMw==", "bodyText": "ok. I was thinking it is a cool feature to add. if I add a system property for that but ok. I will remove it.", "url": "https://github.com/apache/cxf/pull/721#discussion_r524935113", "createdAt": "2020-11-17T07:32:40Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNjk5Nw=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MTM3MA==", "bodyText": "Thinking out loud: if you replace the boolean by a string \"GENERATED_CLASS_OUTPUT\", wouldnt it help the build time generation? (null=deactivate=default)", "url": "https://github.com/apache/cxf/pull/721#discussion_r524941370", "createdAt": "2020-11-17T07:46:43Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNjk5Nw=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MzUxMQ==", "bodyText": "and make it public... @reta  ok for you ?", "url": "https://github.com/apache/cxf/pull/721#discussion_r524943511", "createdAt": "2020-11-17T07:51:04Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNjk5Nw=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk1MDY4Mw==", "bodyText": "or System.getProperty ;)", "url": "https://github.com/apache/cxf/pull/721#discussion_r524950683", "createdAt": "2020-11-17T08:04:08Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNjk5Nw=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ5OTc3Nw==", "bodyText": "If you really need to have this capability (vs providing specialized extension), I would go with system property with location to dump generated bits.", "url": "https://github.com/apache/cxf/pull/721#discussion_r525499777", "createdAt": "2020-11-17T20:28:33Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNjk5Nw=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0NTg3Mg==", "bodyText": "I have removed it. I do not need it. It was during debug and think it was a cool feature for users to debug their apps but ok.", "url": "https://github.com/apache/cxf/pull/721#discussion_r526645872", "createdAt": "2020-11-19T07:30:10Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNjk5Nw=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMDkzMw==", "bodyText": "\ud83d\udc4d thanks!", "url": "https://github.com/apache/cxf/pull/721#discussion_r527130933", "createdAt": "2020-11-19T19:08:31Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNjk5Nw=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDYzNzA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjowNjo1MVrOH0hkYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyODo1MFrOH03dcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNzk4NA==", "bodyText": "AFAIK the access to bus is not synchronized anywhere, so I don't think you need it.", "url": "https://github.com/apache/cxf/pull/721#discussion_r524837984", "createdAt": "2020-11-17T02:06:51Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;\n+    protected final Bus bus;\n+\n+    public ClassGeneratorClassLoader(final Bus bus) {\n+        this.bus = bus == null ? BusFactory.getDefaultBus() : bus;\n+    }\n+\n+    private String getFilePath(String s) {\n+        String sep = System.getProperty(\"file.separator\");\n+        String relativePath = s.replace('.', sep.charAt(0));\n+        String userDir = System.getProperty(\"user.dir\");\n+        return userDir + sep + \"target\" + sep + \"dump\" + sep + relativePath + \".class\";\n+    }\n+    private void saveClass(String className, byte[] bytes) {\n+\n+        File file;\n+        try {\n+            String classFileName = getFilePath(className);\n+            String finalFileName = classFileName;\n+            file = new File(finalFileName);\n+            int i = 1;\n+            while (file.exists()) {\n+                finalFileName = classFileName.substring(0, classFileName.length() - 6) + String.valueOf(i) + \".class\";\n+                file = new File(finalFileName);\n+                i++;\n+            }\n+            file.getParentFile().mkdirs();\n+            try (FileOutputStream fop = new FileOutputStream(file)) {\n+                file.createNewFile();\n+                fop.write(bytes);\n+                fop.flush();\n+            }\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    protected Class<?> loadClass(String className, byte[] bytes) {\n+        if (DEBUG) {\n+            saveClass(className, bytes);\n+        }\n+        TypeHelperClassLoader loader = getOrCreateLoader();\n+        synchronized (loader) {\n+            Class<?> cls = loader.lookupDefinedClass(className);\n+            if (cls == null) {\n+                return loader.defineClass(className, bytes);\n+            }\n+            return cls;\n+        }\n+    }\n+    protected Class<?> findClass(String className) {\n+        return getOrCreateLoader().lookupDefinedClass(className);\n+    }\n+    private TypeHelperClassLoader getOrCreateLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            synchronized (bus) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyMjAwMQ==", "bodyText": "we must not have 2 loaders so the pattern must be a computeIfAbsent. I don't think it is exposed by the bus so having a synchro point these is good - but can be on \"this\", just needs a constant ref in this bus context.", "url": "https://github.com/apache/cxf/pull/721#discussion_r524922001", "createdAt": "2020-11-17T06:59:41Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;\n+    protected final Bus bus;\n+\n+    public ClassGeneratorClassLoader(final Bus bus) {\n+        this.bus = bus == null ? BusFactory.getDefaultBus() : bus;\n+    }\n+\n+    private String getFilePath(String s) {\n+        String sep = System.getProperty(\"file.separator\");\n+        String relativePath = s.replace('.', sep.charAt(0));\n+        String userDir = System.getProperty(\"user.dir\");\n+        return userDir + sep + \"target\" + sep + \"dump\" + sep + relativePath + \".class\";\n+    }\n+    private void saveClass(String className, byte[] bytes) {\n+\n+        File file;\n+        try {\n+            String classFileName = getFilePath(className);\n+            String finalFileName = classFileName;\n+            file = new File(finalFileName);\n+            int i = 1;\n+            while (file.exists()) {\n+                finalFileName = classFileName.substring(0, classFileName.length() - 6) + String.valueOf(i) + \".class\";\n+                file = new File(finalFileName);\n+                i++;\n+            }\n+            file.getParentFile().mkdirs();\n+            try (FileOutputStream fop = new FileOutputStream(file)) {\n+                file.createNewFile();\n+                fop.write(bytes);\n+                fop.flush();\n+            }\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    protected Class<?> loadClass(String className, byte[] bytes) {\n+        if (DEBUG) {\n+            saveClass(className, bytes);\n+        }\n+        TypeHelperClassLoader loader = getOrCreateLoader();\n+        synchronized (loader) {\n+            Class<?> cls = loader.lookupDefinedClass(className);\n+            if (cls == null) {\n+                return loader.defineClass(className, bytes);\n+            }\n+            return cls;\n+        }\n+    }\n+    protected Class<?> findClass(String className) {\n+        return getOrCreateLoader().lookupDefinedClass(className);\n+    }\n+    private TypeHelperClassLoader getOrCreateLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            synchronized (bus) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNzk4NA=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5NTA4Ng==", "bodyText": "@rmannibucau this part in understandable, sadly bus.setExtension(loader, TypeHelperClassLoader.class); could happen anywhere so we are just localizing this particular single flow. I am fine with keeping it", "url": "https://github.com/apache/cxf/pull/721#discussion_r525195086", "createdAt": "2020-11-17T14:26:46Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;\n+    protected final Bus bus;\n+\n+    public ClassGeneratorClassLoader(final Bus bus) {\n+        this.bus = bus == null ? BusFactory.getDefaultBus() : bus;\n+    }\n+\n+    private String getFilePath(String s) {\n+        String sep = System.getProperty(\"file.separator\");\n+        String relativePath = s.replace('.', sep.charAt(0));\n+        String userDir = System.getProperty(\"user.dir\");\n+        return userDir + sep + \"target\" + sep + \"dump\" + sep + relativePath + \".class\";\n+    }\n+    private void saveClass(String className, byte[] bytes) {\n+\n+        File file;\n+        try {\n+            String classFileName = getFilePath(className);\n+            String finalFileName = classFileName;\n+            file = new File(finalFileName);\n+            int i = 1;\n+            while (file.exists()) {\n+                finalFileName = classFileName.substring(0, classFileName.length() - 6) + String.valueOf(i) + \".class\";\n+                file = new File(finalFileName);\n+                i++;\n+            }\n+            file.getParentFile().mkdirs();\n+            try (FileOutputStream fop = new FileOutputStream(file)) {\n+                file.createNewFile();\n+                fop.write(bytes);\n+                fop.flush();\n+            }\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    protected Class<?> loadClass(String className, byte[] bytes) {\n+        if (DEBUG) {\n+            saveClass(className, bytes);\n+        }\n+        TypeHelperClassLoader loader = getOrCreateLoader();\n+        synchronized (loader) {\n+            Class<?> cls = loader.lookupDefinedClass(className);\n+            if (cls == null) {\n+                return loader.defineClass(className, bytes);\n+            }\n+            return cls;\n+        }\n+    }\n+    protected Class<?> findClass(String className) {\n+        return getOrCreateLoader().lookupDefinedClass(className);\n+    }\n+    private TypeHelperClassLoader getOrCreateLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            synchronized (bus) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNzk4NA=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5NjY1OQ==", "bodyText": "@reta I see, the only other case where it can be done programmatically is when a container/server does it during bootstrap so I wouldn't worry too much. Worse case, code would have to synchronize on the too - which can be added to the javadoc.", "url": "https://github.com/apache/cxf/pull/721#discussion_r525196659", "createdAt": "2020-11-17T14:28:50Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;\n+    protected final Bus bus;\n+\n+    public ClassGeneratorClassLoader(final Bus bus) {\n+        this.bus = bus == null ? BusFactory.getDefaultBus() : bus;\n+    }\n+\n+    private String getFilePath(String s) {\n+        String sep = System.getProperty(\"file.separator\");\n+        String relativePath = s.replace('.', sep.charAt(0));\n+        String userDir = System.getProperty(\"user.dir\");\n+        return userDir + sep + \"target\" + sep + \"dump\" + sep + relativePath + \".class\";\n+    }\n+    private void saveClass(String className, byte[] bytes) {\n+\n+        File file;\n+        try {\n+            String classFileName = getFilePath(className);\n+            String finalFileName = classFileName;\n+            file = new File(finalFileName);\n+            int i = 1;\n+            while (file.exists()) {\n+                finalFileName = classFileName.substring(0, classFileName.length() - 6) + String.valueOf(i) + \".class\";\n+                file = new File(finalFileName);\n+                i++;\n+            }\n+            file.getParentFile().mkdirs();\n+            try (FileOutputStream fop = new FileOutputStream(file)) {\n+                file.createNewFile();\n+                fop.write(bytes);\n+                fop.flush();\n+            }\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    protected Class<?> loadClass(String className, byte[] bytes) {\n+        if (DEBUG) {\n+            saveClass(className, bytes);\n+        }\n+        TypeHelperClassLoader loader = getOrCreateLoader();\n+        synchronized (loader) {\n+            Class<?> cls = loader.lookupDefinedClass(className);\n+            if (cls == null) {\n+                return loader.defineClass(className, bytes);\n+            }\n+            return cls;\n+        }\n+    }\n+    protected Class<?> findClass(String className) {\n+        return getOrCreateLoader().lookupDefinedClass(className);\n+    }\n+    private TypeHelperClassLoader getOrCreateLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            synchronized (bus) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNzk4NA=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDY0MjU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjowOTo1MVrOH0hnmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjowOTo1MVrOH0hnmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzODgwOA==", "bodyText": "Since loader is a Bus extension (TypeHelperClassLoader fe), it could be access from anywhere basically, so the synchronization is not going to be useful, could be removed.", "url": "https://github.com/apache/cxf/pull/721#discussion_r524838808", "createdAt": "2020-11-17T02:09:51Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;\n+    protected final Bus bus;\n+\n+    public ClassGeneratorClassLoader(final Bus bus) {\n+        this.bus = bus == null ? BusFactory.getDefaultBus() : bus;\n+    }\n+\n+    private String getFilePath(String s) {\n+        String sep = System.getProperty(\"file.separator\");\n+        String relativePath = s.replace('.', sep.charAt(0));\n+        String userDir = System.getProperty(\"user.dir\");\n+        return userDir + sep + \"target\" + sep + \"dump\" + sep + relativePath + \".class\";\n+    }\n+    private void saveClass(String className, byte[] bytes) {\n+\n+        File file;\n+        try {\n+            String classFileName = getFilePath(className);\n+            String finalFileName = classFileName;\n+            file = new File(finalFileName);\n+            int i = 1;\n+            while (file.exists()) {\n+                finalFileName = classFileName.substring(0, classFileName.length() - 6) + String.valueOf(i) + \".class\";\n+                file = new File(finalFileName);\n+                i++;\n+            }\n+            file.getParentFile().mkdirs();\n+            try (FileOutputStream fop = new FileOutputStream(file)) {\n+                file.createNewFile();\n+                fop.write(bytes);\n+                fop.flush();\n+            }\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    protected Class<?> loadClass(String className, byte[] bytes) {\n+        if (DEBUG) {\n+            saveClass(className, bytes);\n+        }\n+        TypeHelperClassLoader loader = getOrCreateLoader();\n+        synchronized (loader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDY1MDEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoxNDowNFrOH0hsEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoxNDowNFrOH0hsEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzOTk1Mw==", "bodyText": "It seems like we have recurrent patterns:\n\nname.replace('/', '.') slashes to periods (used many times)\nASMHelper:periodToSlashes periods to slashes\n\nWe could extract those to org.apache.cxf.common.util.StringUtils (and actually drop one method from ASMHelper interface)", "url": "https://github.com/apache/cxf/pull/721#discussion_r524839953", "createdAt": "2020-11-17T02:14:04Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;\n+    protected final Bus bus;\n+\n+    public ClassGeneratorClassLoader(final Bus bus) {\n+        this.bus = bus == null ? BusFactory.getDefaultBus() : bus;\n+    }\n+\n+    private String getFilePath(String s) {\n+        String sep = System.getProperty(\"file.separator\");\n+        String relativePath = s.replace('.', sep.charAt(0));\n+        String userDir = System.getProperty(\"user.dir\");\n+        return userDir + sep + \"target\" + sep + \"dump\" + sep + relativePath + \".class\";\n+    }\n+    private void saveClass(String className, byte[] bytes) {\n+\n+        File file;\n+        try {\n+            String classFileName = getFilePath(className);\n+            String finalFileName = classFileName;\n+            file = new File(finalFileName);\n+            int i = 1;\n+            while (file.exists()) {\n+                finalFileName = classFileName.substring(0, classFileName.length() - 6) + String.valueOf(i) + \".class\";\n+                file = new File(finalFileName);\n+                i++;\n+            }\n+            file.getParentFile().mkdirs();\n+            try (FileOutputStream fop = new FileOutputStream(file)) {\n+                file.createNewFile();\n+                fop.write(bytes);\n+                fop.flush();\n+            }\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    protected Class<?> loadClass(String className, byte[] bytes) {\n+        if (DEBUG) {\n+            saveClass(className, bytes);\n+        }\n+        TypeHelperClassLoader loader = getOrCreateLoader();\n+        synchronized (loader) {\n+            Class<?> cls = loader.lookupDefinedClass(className);\n+            if (cls == null) {\n+                return loader.defineClass(className, bytes);\n+            }\n+            return cls;\n+        }\n+    }\n+    protected Class<?> findClass(String className) {\n+        return getOrCreateLoader().lookupDefinedClass(className);\n+    }\n+    private TypeHelperClassLoader getOrCreateLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            synchronized (bus) {\n+                loader = bus.getExtension(TypeHelperClassLoader.class);\n+                if (loader == null) {\n+                    ClassLoader parent = bus.getExtension(ClassLoader.class);\n+                    if (parent == null) {\n+                        parent = Thread.currentThread().getContextClassLoader();\n+                    }\n+                    loader = new TypeHelperClassLoader(parent);\n+                    bus.setExtension(loader, TypeHelperClassLoader.class);\n+                }\n+            }\n+        }\n+        return loader;\n+    }\n+\n+\n+    public static class TypeHelperClassLoader extends ClassLoader {\n+        ConcurrentHashMap<String, Class<?>> defined = new ConcurrentHashMap<>();\n+\n+        TypeHelperClassLoader(ClassLoader parent) {\n+            super(parent);\n+        }\n+        public Class<?> lookupDefinedClass(String name) {\n+            return defined.get(name.replace('/', '.'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDY2MTczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoxOTozOVrOH0hykg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODowNjoxMFrOH0okTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MTYxOA==", "bodyText": "Minor, probably computeIfAbsent would be a bit more helpful (may eliminate some calls to super.defineClass) but we could keep it like that", "url": "https://github.com/apache/cxf/pull/721#discussion_r524841618", "createdAt": "2020-11-17T02:19:39Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;\n+    protected final Bus bus;\n+\n+    public ClassGeneratorClassLoader(final Bus bus) {\n+        this.bus = bus == null ? BusFactory.getDefaultBus() : bus;\n+    }\n+\n+    private String getFilePath(String s) {\n+        String sep = System.getProperty(\"file.separator\");\n+        String relativePath = s.replace('.', sep.charAt(0));\n+        String userDir = System.getProperty(\"user.dir\");\n+        return userDir + sep + \"target\" + sep + \"dump\" + sep + relativePath + \".class\";\n+    }\n+    private void saveClass(String className, byte[] bytes) {\n+\n+        File file;\n+        try {\n+            String classFileName = getFilePath(className);\n+            String finalFileName = classFileName;\n+            file = new File(finalFileName);\n+            int i = 1;\n+            while (file.exists()) {\n+                finalFileName = classFileName.substring(0, classFileName.length() - 6) + String.valueOf(i) + \".class\";\n+                file = new File(finalFileName);\n+                i++;\n+            }\n+            file.getParentFile().mkdirs();\n+            try (FileOutputStream fop = new FileOutputStream(file)) {\n+                file.createNewFile();\n+                fop.write(bytes);\n+                fop.flush();\n+            }\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    protected Class<?> loadClass(String className, byte[] bytes) {\n+        if (DEBUG) {\n+            saveClass(className, bytes);\n+        }\n+        TypeHelperClassLoader loader = getOrCreateLoader();\n+        synchronized (loader) {\n+            Class<?> cls = loader.lookupDefinedClass(className);\n+            if (cls == null) {\n+                return loader.defineClass(className, bytes);\n+            }\n+            return cls;\n+        }\n+    }\n+    protected Class<?> findClass(String className) {\n+        return getOrCreateLoader().lookupDefinedClass(className);\n+    }\n+    private TypeHelperClassLoader getOrCreateLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            synchronized (bus) {\n+                loader = bus.getExtension(TypeHelperClassLoader.class);\n+                if (loader == null) {\n+                    ClassLoader parent = bus.getExtension(ClassLoader.class);\n+                    if (parent == null) {\n+                        parent = Thread.currentThread().getContextClassLoader();\n+                    }\n+                    loader = new TypeHelperClassLoader(parent);\n+                    bus.setExtension(loader, TypeHelperClassLoader.class);\n+                }\n+            }\n+        }\n+        return loader;\n+    }\n+\n+\n+    public static class TypeHelperClassLoader extends ClassLoader {\n+        ConcurrentHashMap<String, Class<?>> defined = new ConcurrentHashMap<>();\n+\n+        TypeHelperClassLoader(ClassLoader parent) {\n+            super(parent);\n+        }\n+        public Class<?> lookupDefinedClass(String name) {\n+            return defined.get(name.replace('/', '.'));\n+        }\n+\n+        @Override\n+        protected Class<?> findClass(String name) throws ClassNotFoundException {\n+            if (name.endsWith(\"package-info\")) {\n+                return getParent().loadClass(name);\n+            }\n+            return super.findClass(name);\n+        }\n+\n+        public Class<?> defineClass(String name, byte[] bytes) {\n+            Class<?> ret = defined.get(name.replace('/', '.'));\n+            if (ret != null) {\n+                return ret;\n+            }\n+            if (name.endsWith(\"package-info\")) {\n+                Package p = super.getPackage(name.substring(0, name.length() - 13));\n+                if (p == null) {\n+                    definePackage(name.substring(0, name.length() - 13).replace('/', '.'),\n+                            null,\n+                            null,\n+                            null,\n+                            null,\n+                            null,\n+                            null,\n+                            null);\n+                }\n+            }\n+\n+            ret = super.defineClass(name.replace('/', '.'), bytes, 0, bytes.length);\n+            Class<?> tmpRet = defined.putIfAbsent(name.replace('/', '.'), ret);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk1MjY1Mw==", "bodyText": "done", "url": "https://github.com/apache/cxf/pull/721#discussion_r524952653", "createdAt": "2020-11-17T08:06:10Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;\n+    protected final Bus bus;\n+\n+    public ClassGeneratorClassLoader(final Bus bus) {\n+        this.bus = bus == null ? BusFactory.getDefaultBus() : bus;\n+    }\n+\n+    private String getFilePath(String s) {\n+        String sep = System.getProperty(\"file.separator\");\n+        String relativePath = s.replace('.', sep.charAt(0));\n+        String userDir = System.getProperty(\"user.dir\");\n+        return userDir + sep + \"target\" + sep + \"dump\" + sep + relativePath + \".class\";\n+    }\n+    private void saveClass(String className, byte[] bytes) {\n+\n+        File file;\n+        try {\n+            String classFileName = getFilePath(className);\n+            String finalFileName = classFileName;\n+            file = new File(finalFileName);\n+            int i = 1;\n+            while (file.exists()) {\n+                finalFileName = classFileName.substring(0, classFileName.length() - 6) + String.valueOf(i) + \".class\";\n+                file = new File(finalFileName);\n+                i++;\n+            }\n+            file.getParentFile().mkdirs();\n+            try (FileOutputStream fop = new FileOutputStream(file)) {\n+                file.createNewFile();\n+                fop.write(bytes);\n+                fop.flush();\n+            }\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    protected Class<?> loadClass(String className, byte[] bytes) {\n+        if (DEBUG) {\n+            saveClass(className, bytes);\n+        }\n+        TypeHelperClassLoader loader = getOrCreateLoader();\n+        synchronized (loader) {\n+            Class<?> cls = loader.lookupDefinedClass(className);\n+            if (cls == null) {\n+                return loader.defineClass(className, bytes);\n+            }\n+            return cls;\n+        }\n+    }\n+    protected Class<?> findClass(String className) {\n+        return getOrCreateLoader().lookupDefinedClass(className);\n+    }\n+    private TypeHelperClassLoader getOrCreateLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            synchronized (bus) {\n+                loader = bus.getExtension(TypeHelperClassLoader.class);\n+                if (loader == null) {\n+                    ClassLoader parent = bus.getExtension(ClassLoader.class);\n+                    if (parent == null) {\n+                        parent = Thread.currentThread().getContextClassLoader();\n+                    }\n+                    loader = new TypeHelperClassLoader(parent);\n+                    bus.setExtension(loader, TypeHelperClassLoader.class);\n+                }\n+            }\n+        }\n+        return loader;\n+    }\n+\n+\n+    public static class TypeHelperClassLoader extends ClassLoader {\n+        ConcurrentHashMap<String, Class<?>> defined = new ConcurrentHashMap<>();\n+\n+        TypeHelperClassLoader(ClassLoader parent) {\n+            super(parent);\n+        }\n+        public Class<?> lookupDefinedClass(String name) {\n+            return defined.get(name.replace('/', '.'));\n+        }\n+\n+        @Override\n+        protected Class<?> findClass(String name) throws ClassNotFoundException {\n+            if (name.endsWith(\"package-info\")) {\n+                return getParent().loadClass(name);\n+            }\n+            return super.findClass(name);\n+        }\n+\n+        public Class<?> defineClass(String name, byte[] bytes) {\n+            Class<?> ret = defined.get(name.replace('/', '.'));\n+            if (ret != null) {\n+                return ret;\n+            }\n+            if (name.endsWith(\"package-info\")) {\n+                Package p = super.getPackage(name.substring(0, name.length() - 13));\n+                if (p == null) {\n+                    definePackage(name.substring(0, name.length() - 13).replace('/', '.'),\n+                            null,\n+                            null,\n+                            null,\n+                            null,\n+                            null,\n+                            null,\n+                            null);\n+                }\n+            }\n+\n+            ret = super.defineClass(name.replace('/', '.'), bytes, 0, bytes.length);\n+            Class<?> tmpRet = defined.putIfAbsent(name.replace('/', '.'), ret);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MTYxOA=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDY2ODYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyMjo0NlrOH0h2Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjo1NjoxOFrOH21XaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MjU4Mg==", "bodyText": "Should we try to get the Classloader from bus?\nClassLoader classloader = bus.getExtension(ClassLoader.class); \n\n@rmannibucau wouldn't fallback to  Thread.currentThread().getContextClassLoader(); be more appropriate here?", "url": "https://github.com/apache/cxf/pull/721#discussion_r524842582", "createdAt": "2020-11-17T02:22:46Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.Bus;\n+\n+public class ClassLoaderProxyService implements ClassLoaderService {\n+    NamespaceClassCreator srv;\n+    public ClassLoaderProxyService(Bus bus) {\n+        this(new NamespaceClassGenerator(bus));\n+    }\n+    public ClassLoaderProxyService(NamespaceClassCreator srv) {\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Object createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        Class<?> cls = srv.createNamespaceWrapper(mcls, map);\n+        try {\n+            return cls.getConstructor(Map.class).newInstance(map);\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+    public class LoadFirst extends ClassLoaderProxyService {\n+        public LoadFirst(Bus bus) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyMjg2Mg==", "bodyText": "It hink we have a classloaderutils which tries the tccl and if null uses the system classloader. Would be a saner default if the bus does not have one.", "url": "https://github.com/apache/cxf/pull/721#discussion_r524922862", "createdAt": "2020-11-17T07:01:59Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.Bus;\n+\n+public class ClassLoaderProxyService implements ClassLoaderService {\n+    NamespaceClassCreator srv;\n+    public ClassLoaderProxyService(Bus bus) {\n+        this(new NamespaceClassGenerator(bus));\n+    }\n+    public ClassLoaderProxyService(NamespaceClassCreator srv) {\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Object createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        Class<?> cls = srv.createNamespaceWrapper(mcls, map);\n+        try {\n+            return cls.getConstructor(Map.class).newInstance(map);\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+    public class LoadFirst extends ClassLoaderProxyService {\n+        public LoadFirst(Bus bus) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MjU4Mg=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNTk2MQ==", "bodyText": "@reta maybe we can skip bus param and class loader parameter and just use in GeneratedNamespaceClassLoader\nClassLoaderUtils.loadClass(String className, Class<?> callingClass) with callingClass equal to GeneratedNamespaceClassLoader.class\nand we use same pattern for all generated class. wdyt ?\n@rmannibucau  @reta", "url": "https://github.com/apache/cxf/pull/721#discussion_r525005961", "createdAt": "2020-11-17T09:28:33Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.Bus;\n+\n+public class ClassLoaderProxyService implements ClassLoaderService {\n+    NamespaceClassCreator srv;\n+    public ClassLoaderProxyService(Bus bus) {\n+        this(new NamespaceClassGenerator(bus));\n+    }\n+    public ClassLoaderProxyService(NamespaceClassCreator srv) {\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Object createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        Class<?> cls = srv.createNamespaceWrapper(mcls, map);\n+        try {\n+            return cls.getConstructor(Map.class).newInstance(map);\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+    public class LoadFirst extends ClassLoaderProxyService {\n+        public LoadFirst(Bus bus) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MjU4Mg=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNDY4Mg==", "bodyText": "@dufoli any classloader usage should following this chain 1. bus one, 2. tccl, 3. system classloader (there is an utility for 2+3). Using any random class classloader will lead to a random behavior in all but flat classpath env sadly.", "url": "https://github.com/apache/cxf/pull/721#discussion_r525024682", "createdAt": "2020-11-17T09:55:36Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.Bus;\n+\n+public class ClassLoaderProxyService implements ClassLoaderService {\n+    NamespaceClassCreator srv;\n+    public ClassLoaderProxyService(Bus bus) {\n+        this(new NamespaceClassGenerator(bus));\n+    }\n+    public ClassLoaderProxyService(NamespaceClassCreator srv) {\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Object createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        Class<?> cls = srv.createNamespaceWrapper(mcls, map);\n+        try {\n+            return cls.getConstructor(Map.class).newInstance(map);\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+    public class LoadFirst extends ClassLoaderProxyService {\n+        public LoadFirst(Bus bus) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MjU4Mg=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0Njg1NQ==", "bodyText": "hmm I have use ClassLoaderUtils . It mean that all classloader service provider must start with bus instead of only ClassLoaderUtils.load ? It mean I have to get set bus in contructor and check bus.getExtension(Classloader) right ?", "url": "https://github.com/apache/cxf/pull/721#discussion_r526646855", "createdAt": "2020-11-19T07:32:33Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.Bus;\n+\n+public class ClassLoaderProxyService implements ClassLoaderService {\n+    NamespaceClassCreator srv;\n+    public ClassLoaderProxyService(Bus bus) {\n+        this(new NamespaceClassGenerator(bus));\n+    }\n+    public ClassLoaderProxyService(NamespaceClassCreator srv) {\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Object createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        Class<?> cls = srv.createNamespaceWrapper(mcls, map);\n+        try {\n+            return cls.getConstructor(Map.class).newInstance(map);\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+    public class LoadFirst extends ClassLoaderProxyService {\n+        public LoadFirst(Bus bus) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MjU4Mg=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMjQyMA==", "bodyText": "May be we could introduce overloaded method to ClassLoaderUtils which also accepts bus and does the classloader resolution taking into account the extension?", "url": "https://github.com/apache/cxf/pull/721#discussion_r527132420", "createdAt": "2020-11-19T19:10:57Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.Bus;\n+\n+public class ClassLoaderProxyService implements ClassLoaderService {\n+    NamespaceClassCreator srv;\n+    public ClassLoaderProxyService(Bus bus) {\n+        this(new NamespaceClassGenerator(bus));\n+    }\n+    public ClassLoaderProxyService(NamespaceClassCreator srv) {\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Object createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        Class<?> cls = srv.createNamespaceWrapper(mcls, map);\n+        try {\n+            return cls.getConstructor(Map.class).newInstance(map);\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+    public class LoadFirst extends ClassLoaderProxyService {\n+        public LoadFirst(Bus bus) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MjU4Mg=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMzgyNw==", "bodyText": "I have just push a solution with a common class to do that with bus", "url": "https://github.com/apache/cxf/pull/721#discussion_r527133827", "createdAt": "2020-11-19T19:13:27Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.Bus;\n+\n+public class ClassLoaderProxyService implements ClassLoaderService {\n+    NamespaceClassCreator srv;\n+    public ClassLoaderProxyService(Bus bus) {\n+        this(new NamespaceClassGenerator(bus));\n+    }\n+    public ClassLoaderProxyService(NamespaceClassCreator srv) {\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Object createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        Class<?> cls = srv.createNamespaceWrapper(mcls, map);\n+        try {\n+            return cls.getConstructor(Map.class).newInstance(map);\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+    public class LoadFirst extends ClassLoaderProxyService {\n+        public LoadFirst(Bus bus) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MjU4Mg=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1OTQ5Nw==", "bodyText": "\ud83d\udc4d , no objections, thank you", "url": "https://github.com/apache/cxf/pull/721#discussion_r527259497", "createdAt": "2020-11-19T22:56:18Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.Bus;\n+\n+public class ClassLoaderProxyService implements ClassLoaderService {\n+    NamespaceClassCreator srv;\n+    public ClassLoaderProxyService(Bus bus) {\n+        this(new NamespaceClassGenerator(bus));\n+    }\n+    public ClassLoaderProxyService(NamespaceClassCreator srv) {\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Object createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        Class<?> cls = srv.createNamespaceWrapper(mcls, map);\n+        try {\n+            return cls.getConstructor(Map.class).newInstance(map);\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+    public class LoadFirst extends ClassLoaderProxyService {\n+        public LoadFirst(Bus bus) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MjU4Mg=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDY3MDY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyMzo0NVrOH0h3kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyMzo0NVrOH0h3kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0Mjg5Ng==", "bodyText": "Probably better to use standard CXF logging facilities please", "url": "https://github.com/apache/cxf/pull/721#discussion_r524842896", "createdAt": "2020-11-17T02:23:45Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.Bus;\n+\n+public class ClassLoaderProxyService implements ClassLoaderService {\n+    NamespaceClassCreator srv;\n+    public ClassLoaderProxyService(Bus bus) {\n+        this(new NamespaceClassGenerator(bus));\n+    }\n+    public ClassLoaderProxyService(NamespaceClassCreator srv) {\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Object createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        Class<?> cls = srv.createNamespaceWrapper(mcls, map);\n+        try {\n+            return cls.getConstructor(Map.class).newInstance(map);\n+        } catch (Throwable e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDY3Njk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedNamespaceClassLoader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyNjo0MFrOH0h7PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDoyOTo1N1rOH1KD0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MzgzNg==", "bodyText": "If I am not mistaken, ClassLoader already use synchronization or/and locking internally for loading classes (@rmannibucau please correct me if I am wrong), why do you need  synchronized here?", "url": "https://github.com/apache/cxf/pull/721#discussion_r524843836", "createdAt": "2020-11-17T02:26:40Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedNamespaceClassLoader.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+public class GeneratedNamespaceClassLoader implements NamespaceClassCreator {\n+    ClassLoader cl;\n+    GeneratedNamespaceClassLoader(ClassLoader cl) {\n+        this.cl = cl;\n+    }\n+    public synchronized Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyMzI2Ng==", "bodyText": "to avoid to generate twice the same class and register only once, +-0 to drop it", "url": "https://github.com/apache/cxf/pull/721#discussion_r524923266", "createdAt": "2020-11-17T07:03:00Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedNamespaceClassLoader.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+public class GeneratedNamespaceClassLoader implements NamespaceClassCreator {\n+    ClassLoader cl;\n+    GeneratedNamespaceClassLoader(ClassLoader cl) {\n+        this.cl = cl;\n+    }\n+    public synchronized Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MzgzNg=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA0MTUyMA==", "bodyText": "I have removed it then think that if I switch to ClassLoaderUtils.loadClass I will have an issue because it can be thread relative whereas we need that class is generated once then discover whatever the thread (request received). So not sure it is goot to used it. We need a single classloader by called class not by thread. Does it make sens to you ?", "url": "https://github.com/apache/cxf/pull/721#discussion_r525041520", "createdAt": "2020-11-17T10:21:26Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedNamespaceClassLoader.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+public class GeneratedNamespaceClassLoader implements NamespaceClassCreator {\n+    ClassLoader cl;\n+    GeneratedNamespaceClassLoader(ClassLoader cl) {\n+        this.cl = cl;\n+    }\n+    public synchronized Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MzgzNg=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUwMTM5Mg==", "bodyText": "Let's keep it, I think we could implement simpler mechanism but not in scope of this PR", "url": "https://github.com/apache/cxf/pull/721#discussion_r525501392", "createdAt": "2020-11-17T20:29:57Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedNamespaceClassLoader.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+public class GeneratedNamespaceClassLoader implements NamespaceClassCreator {\n+    ClassLoader cl;\n+    GeneratedNamespaceClassLoader(ClassLoader cl) {\n+        this.cl = cl;\n+    }\n+    public synchronized Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MzgzNg=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDcwNzUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/NamespaceClassGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo0MTo0MVrOH0iM_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDozMToxM1rOH1KJcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0ODM4MA==", "bodyText": "Also the use of synchronized is not really justified, this class seems to have no state to take care of, why you need it?", "url": "https://github.com/apache/cxf/pull/721#discussion_r524848380", "createdAt": "2020-11-17T02:41:41Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/NamespaceClassGenerator.java", "diffHunk": "@@ -0,0 +1,450 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+\n+public class NamespaceClassGenerator extends ClassGeneratorClassLoader implements NamespaceClassCreator {\n+\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassGeneratorClassLoader.class);\n+    ASMHelper helper;\n+\n+    public NamespaceClassGenerator(Bus bus) {\n+        super(bus);\n+        helper = bus.getExtension(ASMHelper.class);\n+    }\n+\n+    @Override\n+    public synchronized Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAzNzQxMg==", "bodyText": "JaxBUtils.marshall is called by request so it seems to be multi threaded right ? so I guess that createNamespceWrapper need to be synchronized (compare to classLoader part) to avoid double class generation. ?", "url": "https://github.com/apache/cxf/pull/721#discussion_r525037412", "createdAt": "2020-11-17T10:15:00Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/spi/NamespaceClassGenerator.java", "diffHunk": "@@ -0,0 +1,450 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+\n+public class NamespaceClassGenerator extends ClassGeneratorClassLoader implements NamespaceClassCreator {\n+\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassGeneratorClassLoader.class);\n+    ASMHelper helper;\n+\n+    public NamespaceClassGenerator(Bus bus) {\n+        super(bus);\n+        helper = bus.getExtension(ASMHelper.class);\n+    }\n+\n+    @Override\n+    public synchronized Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0ODM4MA=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUwMjgzMw==", "bodyText": "Yeah. seems like concurrent class generation is an issue, let's keep it as is for now, I think we could address it later", "url": "https://github.com/apache/cxf/pull/721#discussion_r525502833", "createdAt": "2020-11-17T20:31:13Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/NamespaceClassGenerator.java", "diffHunk": "@@ -0,0 +1,450 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+\n+public class NamespaceClassGenerator extends ClassGeneratorClassLoader implements NamespaceClassCreator {\n+\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassGeneratorClassLoader.class);\n+    ASMHelper helper;\n+\n+    public NamespaceClassGenerator(Bus bus) {\n+        super(bus);\n+        helper = bus.getExtension(ASMHelper.class);\n+    }\n+\n+    @Override\n+    public synchronized Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0ODM4MA=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDcxNDcwOnYy", "diffSide": "RIGHT", "path": "rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaFixedAnyImplGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo0NToyN1rOH0iRKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNzowMzo1MVrOH0myhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0OTQ0OA==", "bodyText": "Seems like you could use bus.getExtension(ASMHelper.class), correct?", "url": "https://github.com/apache/cxf/pull/721#discussion_r524849448", "createdAt": "2020-11-17T02:45:27Z", "author": {"login": "reta"}, "path": "rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaFixedAnyImplGenerator.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.binding.corba.utils;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.ClassGeneratorClassLoader;\n+import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.ASMHelperImpl;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+\n+public class CorbaFixedAnyImplGenerator extends ClassGeneratorClassLoader {\n+\n+    public CorbaFixedAnyImplGenerator(Bus bus) {\n+        super(bus);\n+    }\n+    public Class<?> createFixedAnyClass() {\n+        //TODO move to bus.getExtension(ASMHelper.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2ODUzMg==", "bodyText": "Yes but no bus available.... So need refractor to get it...", "url": "https://github.com/apache/cxf/pull/721#discussion_r524868532", "createdAt": "2020-11-17T03:55:19Z", "author": {"login": "dufoli"}, "path": "rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaFixedAnyImplGenerator.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.binding.corba.utils;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.ClassGeneratorClassLoader;\n+import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.ASMHelperImpl;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+\n+public class CorbaFixedAnyImplGenerator extends ClassGeneratorClassLoader {\n+\n+    public CorbaFixedAnyImplGenerator(Bus bus) {\n+        super(bus);\n+    }\n+    public Class<?> createFixedAnyClass() {\n+        //TODO move to bus.getExtension(ASMHelper.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0OTQ0OA=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyMzUyNg==", "bodyText": "it is in the constructor so it is available ;)", "url": "https://github.com/apache/cxf/pull/721#discussion_r524923526", "createdAt": "2020-11-17T07:03:51Z", "author": {"login": "rmannibucau"}, "path": "rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaFixedAnyImplGenerator.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.binding.corba.utils;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.ClassGeneratorClassLoader;\n+import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.ASMHelperImpl;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+\n+public class CorbaFixedAnyImplGenerator extends ClassGeneratorClassLoader {\n+\n+    public CorbaFixedAnyImplGenerator(Bus bus) {\n+        super(bus);\n+    }\n+    public Class<?> createFixedAnyClass() {\n+        //TODO move to bus.getExtension(ASMHelper.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0OTQ0OA=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDcyMDkzOnYy", "diffSide": "RIGHT", "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/FactoryClassProxyService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo0ODo1N1rOH0iVAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjoxMzozMFrOH0yDfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1MDQzNA==", "bodyText": "Is the comment still relevant? It seems like you the correct classloader", "url": "https://github.com/apache/cxf/pull/721#discussion_r524850434", "createdAt": "2020-11-17T02:48:57Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/FactoryClassProxyService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import org.apache.cxf.Bus;\n+\n+public class FactoryClassProxyService implements FactoryClassCreator {\n+    FactoryClassCreator srv;\n+    public FactoryClassProxyService(Bus bus) {\n+        this(new FactoryClassGenerator(bus));\n+    }\n+    public FactoryClassProxyService(FactoryClassCreator srv) {\n+        super();\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Class<?> createFactory(Class<?> cls) {\n+        return srv.createFactory(cls);\n+    }\n+\n+    public class LoadFirst extends FactoryClassProxyService {\n+        public LoadFirst(ClassLoader cl) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA0NTkzMQ==", "bodyText": "loadFirst will be initialize by outside code I guess but if we change it in bus-extensions.txt it will failed because bus extensions expect a Bus as first argument. So I guess, I have to put bus for every loadFirst ctor. On master, we have the system with Map of class and classloader and I think it was done on purpose to avoid the following cases:\n2 requests arrive => 2 threads are created (right ?) => each one want to get a class generated => get a classloader which are common on all thread (need synchronized) => ry to find class => if not found generate class and load them in classLoader. I think that s why class loader was on a static map to handle multi thread. wdyt ?", "url": "https://github.com/apache/cxf/pull/721#discussion_r525045931", "createdAt": "2020-11-17T10:28:02Z", "author": {"login": "dufoli"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/FactoryClassProxyService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import org.apache.cxf.Bus;\n+\n+public class FactoryClassProxyService implements FactoryClassCreator {\n+    FactoryClassCreator srv;\n+    public FactoryClassProxyService(Bus bus) {\n+        this(new FactoryClassGenerator(bus));\n+    }\n+    public FactoryClassProxyService(FactoryClassCreator srv) {\n+        super();\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Class<?> createFactory(Class<?> cls) {\n+        return srv.createFactory(cls);\n+    }\n+\n+    public class LoadFirst extends FactoryClassProxyService {\n+        public LoadFirst(ClassLoader cl) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1MDQzNA=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwODA5Mw==", "bodyText": "I don't think so, the static variables were a lazy+leaky impl IMHO.\nGenerating twice the class is not an issue while the classloader ensures it does findClass before any registration in a correctly locked context.\nWorse case you lost some CPU cycles but didn't block a thread.", "url": "https://github.com/apache/cxf/pull/721#discussion_r525108093", "createdAt": "2020-11-17T12:13:30Z", "author": {"login": "rmannibucau"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/FactoryClassProxyService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import org.apache.cxf.Bus;\n+\n+public class FactoryClassProxyService implements FactoryClassCreator {\n+    FactoryClassCreator srv;\n+    public FactoryClassProxyService(Bus bus) {\n+        this(new FactoryClassGenerator(bus));\n+    }\n+    public FactoryClassProxyService(FactoryClassCreator srv) {\n+        super();\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Class<?> createFactory(Class<?> cls) {\n+        return srv.createFactory(cls);\n+    }\n+\n+    public class LoadFirst extends FactoryClassProxyService {\n+        public LoadFirst(ClassLoader cl) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1MDQzNA=="}, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDcyNzA1OnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/WrapperClassCreatorProxyService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo1MTo0N1rOH0iYWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo1MTo0N1rOH0iYWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1MTI5MQ==", "bodyText": "Is it still relevant comment?", "url": "https://github.com/apache/cxf/pull/721#discussion_r524851291", "createdAt": "2020-11-17T02:51:47Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/WrapperClassCreatorProxyService.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxws.spi;\n+\n+import java.util.Set;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.jaxws.WrapperClassGenerator;\n+import org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean;\n+import org.apache.cxf.service.model.InterfaceInfo;\n+\n+public class WrapperClassCreatorProxyService implements WrapperClassCreator {\n+    WrapperClassCreator srv;\n+    public WrapperClassCreatorProxyService(final Bus bus) {\n+        this(new WrapperClassGenerator(bus));\n+    }\n+    public WrapperClassCreatorProxyService(WrapperClassCreator srv) {\n+        super();\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Set<Class<?>> generate(Bus bus, JaxWsServiceFactoryBean fact, InterfaceInfo inf, boolean q) {\n+        return srv.generate(bus, fact, inf, q);\n+    }\n+\n+    public class LoadFirst extends WrapperClassCreatorProxyService {\n+        public LoadFirst(ClassLoader cl) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTExNDEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/util/StringUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDoxMDoxMlrOH2HYzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDoxMDoxMlrOH2HYzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwNjE4OQ==", "bodyText": "\ud83d\udc4d thank you", "url": "https://github.com/apache/cxf/pull/721#discussion_r526506189", "createdAt": "2020-11-19T00:10:12Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/util/StringUtils.java", "diffHunk": "@@ -160,4 +160,18 @@ static void byteToHex(byte b, StringBuilder sb) {\n         sb.append(HEX[(0xF0 & b) >> 4]);\n         sb.append(HEX[0x0F & b]);\n     }\n+\n+    public static String periodToSlashes(String s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTEyOTQzOnYy", "diffSide": "RIGHT", "path": "rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaAnyHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDoxNzoxMVrOH2Hh3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDoxNzoxMVrOH2Hh3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwODUwOQ==", "bodyText": "Don't like that, but we probably need synchronized block here, the original static method createFixedAnyConstructor was declared static synchronized probably to protected against concurrent generation.", "url": "https://github.com/apache/cxf/pull/721#discussion_r526508509", "createdAt": "2020-11-19T00:17:11Z", "author": {"login": "reta"}, "path": "rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaAnyHelper.java", "diffHunk": "@@ -273,257 +267,19 @@ public static void extractPrimitiveFromAny(Any a, CorbaPrimitiveHandler primitiv\n     }\n \n     private static Any createFixedAny(ORB orb, Any any) {\n-        createFixedAnyConstructor();\n+        if (fixedAnyConstructor == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE1NzE3OnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/WrapperClassGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDoyOTo0MFrOH2HyOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNzoyNDo0MlrOH2PxKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxMjY5OA==", "bodyText": "It should not be instance field anymore, could be instantiated in generate and filled along the way (probably needed to pass through as an argument to a few methods)", "url": "https://github.com/apache/cxf/pull/721#discussion_r526512698", "createdAt": "2020-11-19T00:29:40Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/WrapperClassGenerator.java", "diffHunk": "@@ -56,19 +59,18 @@\n import org.apache.cxf.service.model.SchemaInfo;\n import org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean;\n \n-public final class WrapperClassGenerator extends ASMHelper {\n+public final class WrapperClassGenerator extends ClassGeneratorClassLoader implements WrapperClassCreator {\n     public static final String DEFAULT_PACKAGE_NAME = \"defaultnamespace\";\n \n     private static final Logger LOG = LogUtils.getL7dLogger(WrapperClassGenerator.class);\n-    private Set<Class<?>> wrapperBeans = new LinkedHashSet<>();\n-    private InterfaceInfo interfaceInfo;\n+    private Set<Class<?>> wrapperBeans;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0MzQ5Ng==", "bodyText": "I was thinking the same when I move the code.", "url": "https://github.com/apache/cxf/pull/721#discussion_r526643496", "createdAt": "2020-11-19T07:24:42Z", "author": {"login": "dufoli"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/WrapperClassGenerator.java", "diffHunk": "@@ -56,19 +59,18 @@\n import org.apache.cxf.service.model.SchemaInfo;\n import org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean;\n \n-public final class WrapperClassGenerator extends ASMHelper {\n+public final class WrapperClassGenerator extends ClassGeneratorClassLoader implements WrapperClassCreator {\n     public static final String DEFAULT_PACKAGE_NAME = \"defaultnamespace\";\n \n     private static final Logger LOG = LogUtils.getL7dLogger(WrapperClassGenerator.class);\n-    private Set<Class<?>> wrapperBeans = new LinkedHashSet<>();\n-    private InterfaceInfo interfaceInfo;\n+    private Set<Class<?>> wrapperBeans;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxMjY5OA=="}, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE2NzgxOnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/GeneratedWrapperClassLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozNDozNlrOH2H4hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowODo1MFrOH2th6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNDMxMQ==", "bodyText": "Similarly to WrapperClassGenerator, we could probably don't need instance field but create the collection in place, wdyt?", "url": "https://github.com/apache/cxf/pull/721#discussion_r526514311", "createdAt": "2020-11-19T00:34:36Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/GeneratedWrapperClassLoader.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxws.spi;\n+\n+import java.lang.reflect.Method;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.util.PackageUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.cxf.jaxws.WrapperClassGenerator;\n+import org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean;\n+import org.apache.cxf.service.model.InterfaceInfo;\n+import org.apache.cxf.service.model.MessageInfo;\n+import org.apache.cxf.service.model.MessagePartInfo;\n+import org.apache.cxf.service.model.OperationInfo;\n+import org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean;\n+\n+public class GeneratedWrapperClassLoader implements WrapperClassCreator {\n+    private Set<Class<?>> wrapperBeans = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0MzY2OA==", "bodyText": "ok for me", "url": "https://github.com/apache/cxf/pull/721#discussion_r526643668", "createdAt": "2020-11-19T07:25:07Z", "author": {"login": "dufoli"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/GeneratedWrapperClassLoader.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxws.spi;\n+\n+import java.lang.reflect.Method;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.util.PackageUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.cxf.jaxws.WrapperClassGenerator;\n+import org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean;\n+import org.apache.cxf.service.model.InterfaceInfo;\n+import org.apache.cxf.service.model.MessageInfo;\n+import org.apache.cxf.service.model.MessagePartInfo;\n+import org.apache.cxf.service.model.OperationInfo;\n+import org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean;\n+\n+public class GeneratedWrapperClassLoader implements WrapperClassCreator {\n+    private Set<Class<?>> wrapperBeans = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNDMxMQ=="}, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMTExNA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/cxf/pull/721#discussion_r527131114", "createdAt": "2020-11-19T19:08:50Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/GeneratedWrapperClassLoader.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxws.spi;\n+\n+import java.lang.reflect.Method;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.util.PackageUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.cxf.jaxws.WrapperClassGenerator;\n+import org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean;\n+import org.apache.cxf.service.model.InterfaceInfo;\n+import org.apache.cxf.service.model.MessageInfo;\n+import org.apache.cxf.service.model.MessagePartInfo;\n+import org.apache.cxf.service.model.OperationInfo;\n+import org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean;\n+\n+public class GeneratedWrapperClassLoader implements WrapperClassCreator {\n+    private Set<Class<?>> wrapperBeans = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNDMxMQ=="}, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE3Nzg1OnYy", "diffSide": "RIGHT", "path": "rt/wsdl/src/main/java/org/apache/cxf/wsdl/ExtensionClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOTowOVrOH2H-dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOTowOVrOH2H-dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNTgyOA==", "bodyText": "Probably we should log the exception here (debug or trace), just to help with troubleshooting", "url": "https://github.com/apache/cxf/pull/721#discussion_r526515828", "createdAt": "2020-11-19T00:39:09Z", "author": {"login": "reta"}, "path": "rt/wsdl/src/main/java/org/apache/cxf/wsdl/ExtensionClassLoader.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.wsdl;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+\n+public class ExtensionClassLoader implements ExtensionClassCreator {\n+\n+    public ExtensionClassLoader() {\n+    }\n+    @Override\n+    public Class<?> createExtensionClass(Class<?> cls, QName qname, ClassLoader loader) {\n+        try {\n+            return ClassLoaderUtils.loadClass(cls.getName() + \"Extensibility\", ExtensionClassLoader.class);\n+        } catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE3ODA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedNamespaceClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOToxOVrOH2H-nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOToxOVrOH2H-nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNTg2OQ==", "bodyText": "Probably we should log the exception here (debug or trace), just to help with troubleshooting", "url": "https://github.com/apache/cxf/pull/721#discussion_r526515869", "createdAt": "2020-11-19T00:39:19Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedNamespaceClassLoader.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+\n+public class GeneratedNamespaceClassLoader implements NamespaceClassCreator {\n+    GeneratedNamespaceClassLoader() {\n+    }\n+    public synchronized Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        String postFix = \"\";\n+\n+        if (mcls.getName().contains(\"eclipse\")) {\n+            try {\n+                return ClassLoaderUtils.loadClass(\"org.apache.cxf.jaxb.EclipseNamespaceMapper\",\n+                        GeneratedNamespaceClassLoader.class);\n+            } catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE3ODI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedNamespaceClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOToyNFrOH2H-uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOToyNFrOH2H-uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNTg5OQ==", "bodyText": "Probably we should log the exception here (debug or trace), just to help with troubleshooting", "url": "https://github.com/apache/cxf/pull/721#discussion_r526515899", "createdAt": "2020-11-19T00:39:24Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedNamespaceClassLoader.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+\n+public class GeneratedNamespaceClassLoader implements NamespaceClassCreator {\n+    GeneratedNamespaceClassLoader() {\n+    }\n+    public synchronized Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        String postFix = \"\";\n+\n+        if (mcls.getName().contains(\"eclipse\")) {\n+            try {\n+                return ClassLoaderUtils.loadClass(\"org.apache.cxf.jaxb.EclipseNamespaceMapper\",\n+                        GeneratedNamespaceClassLoader.class);\n+            } catch (ClassNotFoundException e) {\n+            }\n+        } else if (mcls.getName().contains(\".internal\")) {\n+            postFix = \"Internal\";\n+        } else if (mcls.getName().contains(\"com.sun\")) {\n+            postFix = \"RI\";\n+        }\n+        try {\n+            return ClassLoaderUtils.loadClass(\"org.apache.cxf.jaxb.NamespaceMapper\" + postFix,\n+                    GeneratedNamespaceClassLoader.class);\n+        } catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE3ODkwOnYy", "diffSide": "RIGHT", "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/FactoryClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOTozNFrOH2H_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOTozNFrOH2H_Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNTk3MA==", "bodyText": "Probably we should log the exception here (debug or trace), just to help with troubleshooting", "url": "https://github.com/apache/cxf/pull/721#discussion_r526515970", "createdAt": "2020-11-19T00:39:34Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/FactoryClassLoader.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.jaxb;\n+\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+\n+public class FactoryClassLoader implements FactoryClassCreator {\n+    public FactoryClassLoader() {\n+    }\n+    @Override\n+    public Class<?> createFactory(Class<?> cls) {\n+        String newClassName = cls.getName() + \"Factory\";\n+        try {\n+            return ClassLoaderUtils.loadClass(newClassName, FactoryClassLoader.class);\n+        } catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE4MjQ2OnYy", "diffSide": "RIGHT", "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0MTowM1rOH2IA-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0MTowM1rOH2IA-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNjQ3NQ==", "bodyText": "Please log the exception here (debug or trace), just to help with troubleshooting (no e.printStackTrace(); please)", "url": "https://github.com/apache/cxf/pull/721#discussion_r526516475", "createdAt": "2020-11-19T00:41:03Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperClassLoader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.databinding.WrapperHelper;\n+\n+public class WrapperHelperClassLoader implements WrapperHelperCreator {\n+    public WrapperHelperClassLoader() {\n+    }\n+\n+    @Override\n+    public WrapperHelper compile(Bus bus, Class<?> wrapperType, Method[] setMethods, Method[] getMethods,\n+                                 Method[] jaxbMethods, Field[] fields, Object objectFactory) {\n+\n+        int count = 1;\n+        String newClassName = wrapperType.getName() + \"_WrapperTypeHelper\" + count;\n+\n+        Class<?> cls = null;\n+        try {\n+            cls = ClassLoaderUtils.loadClass(newClassName, WrapperHelperClassLoader.class);\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE4Mzc5OnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/GeneratedWrapperClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0MTo0MFrOH2IBxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0MTo0MFrOH2IBxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNjY3OA==", "bodyText": "Probably we should log the exception here (debug or trace), just to help with troubleshooting", "url": "https://github.com/apache/cxf/pull/721#discussion_r526516678", "createdAt": "2020-11-19T00:41:40Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/GeneratedWrapperClassLoader.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxws.spi;\n+\n+import java.lang.reflect.Method;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.util.PackageUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.cxf.jaxws.WrapperClassGenerator;\n+import org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean;\n+import org.apache.cxf.service.model.InterfaceInfo;\n+import org.apache.cxf.service.model.MessageInfo;\n+import org.apache.cxf.service.model.MessagePartInfo;\n+import org.apache.cxf.service.model.OperationInfo;\n+import org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean;\n+\n+public class GeneratedWrapperClassLoader implements WrapperClassCreator {\n+    private Set<Class<?>> wrapperBeans = new LinkedHashSet<>();\n+    private InterfaceInfo interfaceInfo;\n+    private JaxWsServiceFactoryBean factory;\n+\n+    public GeneratedWrapperClassLoader() {\n+    }\n+\n+    @Override\n+    public Set<Class<?>> generate(Bus bus, JaxWsServiceFactoryBean fact, InterfaceInfo ii, boolean q) {\n+        factory = fact;\n+        this.interfaceInfo = ii;\n+        for (OperationInfo opInfo : interfaceInfo.getOperations()) {\n+            if (opInfo.isUnwrappedCapable()) {\n+                Method method = (Method)opInfo.getProperty(ReflectionServiceFactoryBean.METHOD);\n+                if (method == null) {\n+                    continue;\n+                }\n+                MessagePartInfo inf = opInfo.getInput().getFirstMessagePart();\n+                if (inf.getTypeClass() == null) {\n+                    MessageInfo messageInfo = opInfo.getUnwrappedOperation().getInput();\n+                    createWrapperClass(inf,\n+                            messageInfo,\n+                            opInfo,\n+                            method,\n+                            true);\n+                }\n+                MessageInfo messageInfo = opInfo.getUnwrappedOperation().getOutput();\n+                if (messageInfo != null) {\n+                    inf = opInfo.getOutput().getFirstMessagePart();\n+                    if (inf.getTypeClass() == null) {\n+                        createWrapperClass(inf,\n+                                messageInfo,\n+                                opInfo,\n+                                method,\n+                                false);\n+                    }\n+                }\n+            }\n+        }\n+        return wrapperBeans;\n+    }\n+\n+    private void createWrapperClass(MessagePartInfo wrapperPart,\n+                                    MessageInfo messageInfo,\n+                                    OperationInfo op,\n+                                    Method method,\n+                                    boolean isRequest) {\n+        boolean anonymous = factory.getAnonymousWrapperTypes();\n+\n+        String pkg = getPackageName(method) + \".jaxws_asm\" + (anonymous ? \"_an\" : \"\");\n+        String className = pkg + \".\"\n+                + StringUtils.capitalize(op.getName().getLocalPart());\n+        if (!isRequest) {\n+            className = className + \"Response\";\n+        }\n+\n+        Class<?> clz = null;\n+        try {\n+            clz = ClassLoaderUtils.loadClass(className, GeneratedWrapperClassLoader.class);\n+        } catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE4NDUyOnYy", "diffSide": "RIGHT", "path": "rt/frontend/simple/src/main/java/org/apache/cxf/endpoint/dynamic/ExceptionClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0MTo1NVrOH2ICKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0MTo1NVrOH2ICKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNjc3OA==", "bodyText": "Probably we should log the exception here (debug or trace), just to help with troubleshooting", "url": "https://github.com/apache/cxf/pull/721#discussion_r526516778", "createdAt": "2020-11-19T00:41:55Z", "author": {"login": "reta"}, "path": "rt/frontend/simple/src/main/java/org/apache/cxf/endpoint/dynamic/ExceptionClassLoader.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.endpoint.dynamic;\n+\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+\n+public class ExceptionClassLoader implements ExceptionClassCreator {\n+\n+    public ExceptionClassLoader() {\n+    }\n+\n+    @Override\n+    public Class<?> createExceptionClass(Class<?> bean) {\n+        String newClassName = bean.getName() + \"_Exception\";\n+        try {\n+            return ClassLoaderUtils.loadClass(newClassName, ExceptionClassLoader.class);\n+        } catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzc4NjI1OnYy", "diffSide": "RIGHT", "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperClassLoader.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMjozMzo0OVrOH376UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToyNjo0MVrOH4FBPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQxNTMxMw==", "bodyText": "Please catch Throwable here to cover XxxError (like VerifyError fe)", "url": "https://github.com/apache/cxf/pull/721#discussion_r528415313", "createdAt": "2020-11-22T22:33:49Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperClassLoader.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.GeneratedClassClassLoader;\n+import org.apache.cxf.databinding.WrapperHelper;\n+\n+public class WrapperHelperClassLoader extends GeneratedClassClassLoader implements WrapperHelperCreator {\n+    public WrapperHelperClassLoader(Bus bus) {\n+        super(bus);\n+    }\n+\n+    @Override\n+    public WrapperHelper compile(Class<?> wrapperType, Method[] setMethods, Method[] getMethods,\n+                                 Method[] jaxbMethods, Field[] fields, Object objectFactory) {\n+\n+        int count = 1;\n+        String newClassName = wrapperType.getName() + \"_WrapperTypeHelper\" + count;\n+\n+        Class<?> cls = loadClass(newClassName, WrapperHelperClassLoader.class);\n+        while (cls != null) {\n+            try {\n+                WrapperHelper helper = WrapperHelper.class.cast(cls.getDeclaredConstructor().newInstance());\n+                if (!helper.getSignature().equals(WrapperHelperCompiler.computeSignature(setMethods, getMethods))) {\n+                    count++;\n+                    newClassName = wrapperType.getName() + \"_WrapperTypeHelper\" + count;\n+                    cls = loadClass(newClassName, WrapperHelperClassLoader.class);\n+                } else {\n+                    return helper;\n+                }\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f43af940b62b4c7aaa8a282b394480718c071be"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyNzk0OQ==", "bodyText": "Strange because I have check previous code and it was the same...", "url": "https://github.com/apache/cxf/pull/721#discussion_r528427949", "createdAt": "2020-11-23T00:14:38Z", "author": {"login": "dufoli"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperClassLoader.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.GeneratedClassClassLoader;\n+import org.apache.cxf.databinding.WrapperHelper;\n+\n+public class WrapperHelperClassLoader extends GeneratedClassClassLoader implements WrapperHelperCreator {\n+    public WrapperHelperClassLoader(Bus bus) {\n+        super(bus);\n+    }\n+\n+    @Override\n+    public WrapperHelper compile(Class<?> wrapperType, Method[] setMethods, Method[] getMethods,\n+                                 Method[] jaxbMethods, Field[] fields, Object objectFactory) {\n+\n+        int count = 1;\n+        String newClassName = wrapperType.getName() + \"_WrapperTypeHelper\" + count;\n+\n+        Class<?> cls = loadClass(newClassName, WrapperHelperClassLoader.class);\n+        while (cls != null) {\n+            try {\n+                WrapperHelper helper = WrapperHelper.class.cast(cls.getDeclaredConstructor().newInstance());\n+                if (!helper.getSignature().equals(WrapperHelperCompiler.computeSignature(setMethods, getMethods))) {\n+                    count++;\n+                    newClassName = wrapperType.getName() + \"_WrapperTypeHelper\" + count;\n+                    cls = loadClass(newClassName, WrapperHelperClassLoader.class);\n+                } else {\n+                    return helper;\n+                }\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQxNTMxMw=="}, "originalCommit": {"oid": "3f43af940b62b4c7aaa8a282b394480718c071be"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0MzU5NQ==", "bodyText": "Yes, the code seems to be fine but the context has changed, I believe it corresponds to this block:\ntry {\n            return new WrapperHelperCompiler(wrapperType,\n                                        setMethods,\n                                        getMethods,\n                                        jaxbMethods,\n                                        fields,\n                                        objectFactory).compile();\n\n        } catch (Throwable t) {\n            // Some error - probably a bad version of ASM or similar\n        }\n        return null;\n\nFrom WrapperHelperCompiler.java", "url": "https://github.com/apache/cxf/pull/721#discussion_r528443595", "createdAt": "2020-11-23T02:12:17Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperClassLoader.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.GeneratedClassClassLoader;\n+import org.apache.cxf.databinding.WrapperHelper;\n+\n+public class WrapperHelperClassLoader extends GeneratedClassClassLoader implements WrapperHelperCreator {\n+    public WrapperHelperClassLoader(Bus bus) {\n+        super(bus);\n+    }\n+\n+    @Override\n+    public WrapperHelper compile(Class<?> wrapperType, Method[] setMethods, Method[] getMethods,\n+                                 Method[] jaxbMethods, Field[] fields, Object objectFactory) {\n+\n+        int count = 1;\n+        String newClassName = wrapperType.getName() + \"_WrapperTypeHelper\" + count;\n+\n+        Class<?> cls = loadClass(newClassName, WrapperHelperClassLoader.class);\n+        while (cls != null) {\n+            try {\n+                WrapperHelper helper = WrapperHelper.class.cast(cls.getDeclaredConstructor().newInstance());\n+                if (!helper.getSignature().equals(WrapperHelperCompiler.computeSignature(setMethods, getMethods))) {\n+                    count++;\n+                    newClassName = wrapperType.getName() + \"_WrapperTypeHelper\" + count;\n+                    cls = loadClass(newClassName, WrapperHelperClassLoader.class);\n+                } else {\n+                    return helper;\n+                }\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQxNTMxMw=="}, "originalCommit": {"oid": "3f43af940b62b4c7aaa8a282b394480718c071be"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwMjMyMA==", "bodyText": "Ensuring you use COMPUTE_FRAMES and visitMaxs(0, 0) all will be computed but if some class writer don't use that, the refactoring can have changed some stack and the hardcoded ones can be wrong now. One thing to try is to dump the .class, convert it in .java (using jd-gui or so) and try to import it in a project, sometimes something obvious appear.", "url": "https://github.com/apache/cxf/pull/721#discussion_r528502320", "createdAt": "2020-11-23T07:11:09Z", "author": {"login": "rmannibucau"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperClassLoader.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.GeneratedClassClassLoader;\n+import org.apache.cxf.databinding.WrapperHelper;\n+\n+public class WrapperHelperClassLoader extends GeneratedClassClassLoader implements WrapperHelperCreator {\n+    public WrapperHelperClassLoader(Bus bus) {\n+        super(bus);\n+    }\n+\n+    @Override\n+    public WrapperHelper compile(Class<?> wrapperType, Method[] setMethods, Method[] getMethods,\n+                                 Method[] jaxbMethods, Field[] fields, Object objectFactory) {\n+\n+        int count = 1;\n+        String newClassName = wrapperType.getName() + \"_WrapperTypeHelper\" + count;\n+\n+        Class<?> cls = loadClass(newClassName, WrapperHelperClassLoader.class);\n+        while (cls != null) {\n+            try {\n+                WrapperHelper helper = WrapperHelper.class.cast(cls.getDeclaredConstructor().newInstance());\n+                if (!helper.getSignature().equals(WrapperHelperCompiler.computeSignature(setMethods, getMethods))) {\n+                    count++;\n+                    newClassName = wrapperType.getName() + \"_WrapperTypeHelper\" + count;\n+                    cls = loadClass(newClassName, WrapperHelperClassLoader.class);\n+                } else {\n+                    return helper;\n+                }\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQxNTMxMw=="}, "originalCommit": {"oid": "3f43af940b62b4c7aaa8a282b394480718c071be"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2NDU0MA==", "bodyText": "@rmannibucau @reta just implement your 2 feedbacks.", "url": "https://github.com/apache/cxf/pull/721#discussion_r528564540", "createdAt": "2020-11-23T09:26:41Z", "author": {"login": "dufoli"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperClassLoader.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.GeneratedClassClassLoader;\n+import org.apache.cxf.databinding.WrapperHelper;\n+\n+public class WrapperHelperClassLoader extends GeneratedClassClassLoader implements WrapperHelperCreator {\n+    public WrapperHelperClassLoader(Bus bus) {\n+        super(bus);\n+    }\n+\n+    @Override\n+    public WrapperHelper compile(Class<?> wrapperType, Method[] setMethods, Method[] getMethods,\n+                                 Method[] jaxbMethods, Field[] fields, Object objectFactory) {\n+\n+        int count = 1;\n+        String newClassName = wrapperType.getName() + \"_WrapperTypeHelper\" + count;\n+\n+        Class<?> cls = loadClass(newClassName, WrapperHelperClassLoader.class);\n+        while (cls != null) {\n+            try {\n+                WrapperHelper helper = WrapperHelper.class.cast(cls.getDeclaredConstructor().newInstance());\n+                if (!helper.getSignature().equals(WrapperHelperCompiler.computeSignature(setMethods, getMethods))) {\n+                    count++;\n+                    newClassName = wrapperType.getName() + \"_WrapperTypeHelper\" + count;\n+                    cls = loadClass(newClassName, WrapperHelperClassLoader.class);\n+                } else {\n+                    return helper;\n+                }\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQxNTMxMw=="}, "originalCommit": {"oid": "3f43af940b62b4c7aaa8a282b394480718c071be"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzODQwOTE0OnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/WrapperNamespaceClassGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxMDowMzo0NFrOH7iCJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzo1MToyNVrOH8Sfqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NTYzOA==", "bodyText": "shouldnt all this glue code be in \"main\" instead of test to be reusable just by setting a few extensions on its bus?", "url": "https://github.com/apache/cxf/pull/721#discussion_r532185638", "createdAt": "2020-11-29T10:03:44Z", "author": {"login": "rmannibucau"}, "path": "rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/WrapperNamespaceClassGeneratorTest.java", "diffHunk": "@@ -119,5 +126,170 @@ public void testForXmlList() throws Exception {\n         assertTrue(\"The generated response wrapper class is not correct\", bout.toString().contains(expected));\n \n     }\n+    public class CustomClassLoader extends ClassLoader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b56890eac545b7b323cafbc9cd14299670ed5e5c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NjE2OQ==", "bodyText": "@rmannibucau exactly my issue I found that not very easy to set up. So How to found a solution for that.\nThe second issue is that when code is generated just in time,  it depend of class loader or class to store it in the map. So I need to do so on generated first part.", "url": "https://github.com/apache/cxf/pull/721#discussion_r532186169", "createdAt": "2020-11-29T10:07:30Z", "author": {"login": "dufoli"}, "path": "rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/WrapperNamespaceClassGeneratorTest.java", "diffHunk": "@@ -119,5 +126,170 @@ public void testForXmlList() throws Exception {\n         assertTrue(\"The generated response wrapper class is not correct\", bout.toString().contains(expected));\n \n     }\n+    public class CustomClassLoader extends ClassLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NTYzOA=="}, "originalCommit": {"oid": "b56890eac545b7b323cafbc9cd14299670ed5e5c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NjI2MA==", "bodyText": "That was my point at the very bginning to said that I am affraid that it is complicated to cache generated class. Help needed to go the cleaner and easier way ;-)", "url": "https://github.com/apache/cxf/pull/721#discussion_r532186260", "createdAt": "2020-11-29T10:08:45Z", "author": {"login": "dufoli"}, "path": "rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/WrapperNamespaceClassGeneratorTest.java", "diffHunk": "@@ -119,5 +126,170 @@ public void testForXmlList() throws Exception {\n         assertTrue(\"The generated response wrapper class is not correct\", bout.toString().contains(expected));\n \n     }\n+    public class CustomClassLoader extends ClassLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NTYzOA=="}, "originalCommit": {"oid": "b56890eac545b7b323cafbc9cd14299670ed5e5c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NjM4Nw==", "bodyText": "Guess we must arrive at something like:\nbus.setExtension(X.class, new BuiltInCaptureImpl())\n\nBuiltInCaptureImpl should trigger the loading of all potentially generated classes (by reflection) and provide a Map<String, byte[]> of generated classes (then user can getGeneratedClasses() and dump it somehwere.\nwdyt?", "url": "https://github.com/apache/cxf/pull/721#discussion_r532186387", "createdAt": "2020-11-29T10:09:40Z", "author": {"login": "rmannibucau"}, "path": "rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/WrapperNamespaceClassGeneratorTest.java", "diffHunk": "@@ -119,5 +126,170 @@ public void testForXmlList() throws Exception {\n         assertTrue(\"The generated response wrapper class is not correct\", bout.toString().contains(expected));\n \n     }\n+    public class CustomClassLoader extends ClassLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NTYzOA=="}, "originalCommit": {"oid": "b56890eac545b7b323cafbc9cd14299670ed5e5c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIxNjIxMA==", "bodyText": "Agree with @rmannibucau, goes back to DEBUG flag discussion, since we now have the extensions in right places, we could add one to collect generated classes (and delegate for actual generation).", "url": "https://github.com/apache/cxf/pull/721#discussion_r532216210", "createdAt": "2020-11-29T14:19:43Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/WrapperNamespaceClassGeneratorTest.java", "diffHunk": "@@ -119,5 +126,170 @@ public void testForXmlList() throws Exception {\n         assertTrue(\"The generated response wrapper class is not correct\", bout.toString().contains(expected));\n \n     }\n+    public class CustomClassLoader extends ClassLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NTYzOA=="}, "originalCommit": {"oid": "b56890eac545b7b323cafbc9cd14299670ed5e5c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ4NjY5Ng==", "bodyText": "I have start to code something for that.\n\nI think that it can be used on cxf side too by having a tool like the wsdl2java tool but to pregenerate all classes.\nI have code something with start and restore to save all class bytes and classNames. and restore but my issue with the 2 maps (always them).\n\nFor CLASS_MAP, I can store the key classname and restore must find original class so I think to Class.forName but not sur it will work.\nsummary :\npublic interface ClassGeneratorCapture {\n    void save(String className, Class<?> cls, byte[] bytes);\n\n    Map<? extends Class<?>,? extends WeakReference<ClassGeneratorClassLoader.TypeHelperClassLoader>> getClassMap();\n\n    Map<? extends ClassLoader,? extends WeakReference<ClassGeneratorClassLoader.TypeHelperClassLoader>> getLoaderMap();\n}\nSo previously loaded side will change.\nBecause Instead of inherit of GeneratedClassClassLoader, I will inherit to ClassGeneratorClassLoader (same as generation part). It is more consistent but restore of classloader map is not doable I think. I need to see if we can move all to class map", "url": "https://github.com/apache/cxf/pull/721#discussion_r532486696", "createdAt": "2020-11-30T10:20:33Z", "author": {"login": "dufoli"}, "path": "rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/WrapperNamespaceClassGeneratorTest.java", "diffHunk": "@@ -119,5 +126,170 @@ public void testForXmlList() throws Exception {\n         assertTrue(\"The generated response wrapper class is not correct\", bout.toString().contains(expected));\n \n     }\n+    public class CustomClassLoader extends ClassLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NTYzOA=="}, "originalCommit": {"oid": "b56890eac545b7b323cafbc9cd14299670ed5e5c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5NTMxMA==", "bodyText": "If it moves to services it does not need the weak reference since the classloader life time will be the bus lifetime.\nCan need a destroy() callback called when the bus is destroyed (don't recall if extensions can implement autocloseable but can be an option, worse case you can add a bus lifecycle listener to call it from the listener when getting the bus instance).\nI'm also pretty sure it does not need to be in the contract, contract only needs Map<String, byte[]> to export the generated classes.\nInternally the generator class can use a map of classloaders but it must not leak outside the implementation IMHO.\nTypically for build time generation, most flat classpath deployments - including quarkus - it willl not be needed and will just make it more complex with no real gain for end user and our integration code.\nAbout how to generate, I spoke earlier of doing a new mojo to complete the e2e feature, think it still makes sense (ensure to extract in a \"tool\" class what you need in your quarkus build step so can be a Runnable which will be called in the mojo and your build step) but I don't think it should be merged to any existing mojo. It should be usable \"alone\" probably.\nHope it makes sense.", "url": "https://github.com/apache/cxf/pull/721#discussion_r532495310", "createdAt": "2020-11-30T10:33:20Z", "author": {"login": "rmannibucau"}, "path": "rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/WrapperNamespaceClassGeneratorTest.java", "diffHunk": "@@ -119,5 +126,170 @@ public void testForXmlList() throws Exception {\n         assertTrue(\"The generated response wrapper class is not correct\", bout.toString().contains(expected));\n \n     }\n+    public class CustomClassLoader extends ClassLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NTYzOA=="}, "originalCommit": {"oid": "b56890eac545b7b323cafbc9cd14299670ed5e5c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxMzMyOQ==", "bodyText": "WeakReference => aggreed. It was kind of proof of concept to have the system of stop the world save a picture... then reload. ;-)\nMy issue is this damn Maps... I prefer to kill the key reference to class loader or class which have been calling findClass. Anyway when I try to kill it was a nightmare... All test failed ;-(\nI am not sure about the Map<String, byte[]>. I prefer to have Map<String, Class<?>>. Are you ok with that ?\nwhat is e2e feature ?", "url": "https://github.com/apache/cxf/pull/721#discussion_r532513329", "createdAt": "2020-11-30T11:02:27Z", "author": {"login": "dufoli"}, "path": "rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/WrapperNamespaceClassGeneratorTest.java", "diffHunk": "@@ -119,5 +126,170 @@ public void testForXmlList() throws Exception {\n         assertTrue(\"The generated response wrapper class is not correct\", bout.toString().contains(expected));\n \n     }\n+    public class CustomClassLoader extends ClassLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NTYzOA=="}, "originalCommit": {"oid": "b56890eac545b7b323cafbc9cd14299670ed5e5c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUyMzIyOQ==", "bodyText": "E2e = your write an app, setup a maven plugin execution and get pregenerated runtime. This is the story we want to enable ;).\nI understand the test nightmare but we must not design an api for tests IMHO and from all other products doing this kind of generation we know it is not needed so let's keep the SPI clean and we will clean up the impl later. If you need to expose this internal it means the spi is not at the right point maybe - but think the classloader itself shoude the spi in this particular case.\nIf you find a failling test i can run easily, i can have a look later this week.", "url": "https://github.com/apache/cxf/pull/721#discussion_r532523229", "createdAt": "2020-11-30T11:20:04Z", "author": {"login": "rmannibucau"}, "path": "rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/WrapperNamespaceClassGeneratorTest.java", "diffHunk": "@@ -119,5 +126,170 @@ public void testForXmlList() throws Exception {\n         assertTrue(\"The generated response wrapper class is not correct\", bout.toString().contains(expected));\n \n     }\n+    public class CustomClassLoader extends ClassLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NTYzOA=="}, "originalCommit": {"oid": "b56890eac545b7b323cafbc9cd14299670ed5e5c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1OTA5MQ==", "bodyText": "ok so todo list is to go back to classLoader solution. But I will to embded my own classloader with singleton pattern to load className and byte[] and put a method restore  with Capture class Object as parameter", "url": "https://github.com/apache/cxf/pull/721#discussion_r532759091", "createdAt": "2020-11-30T17:10:46Z", "author": {"login": "dufoli"}, "path": "rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/WrapperNamespaceClassGeneratorTest.java", "diffHunk": "@@ -119,5 +126,170 @@ public void testForXmlList() throws Exception {\n         assertTrue(\"The generated response wrapper class is not correct\", bout.toString().contains(expected));\n \n     }\n+    public class CustomClassLoader extends ClassLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NTYzOA=="}, "originalCommit": {"oid": "b56890eac545b7b323cafbc9cd14299670ed5e5c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk3OTYyNw==", "bodyText": "ok hope now it is better. test is ok and API seems better.", "url": "https://github.com/apache/cxf/pull/721#discussion_r532979627", "createdAt": "2020-11-30T23:51:25Z", "author": {"login": "dufoli"}, "path": "rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/WrapperNamespaceClassGeneratorTest.java", "diffHunk": "@@ -119,5 +126,170 @@ public void testForXmlList() throws Exception {\n         assertTrue(\"The generated response wrapper class is not correct\", bout.toString().contains(expected));\n \n     }\n+    public class CustomClassLoader extends ClassLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NTYzOA=="}, "originalCommit": {"oid": "b56890eac545b7b323cafbc9cd14299670ed5e5c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDE0NjAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorCapture.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjoyMjo1M1rOH8VlVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjoyMjo1M1rOH8VlVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAzMDIyOA==", "bodyText": "This extension point is not used by class generators but class loaders (GeneratedClassClassLoader & ClassGeneratorClassLoader). I think GeneratedClassClassLoaderCapture would be longer and more descriptive name, wdyt?", "url": "https://github.com/apache/cxf/pull/721#discussion_r533030228", "createdAt": "2020-12-01T02:22:53Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorCapture.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+public interface ClassGeneratorCapture {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525d2dd8305f6830a6b53cf9582911cc4671720c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDE2MzcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedClassClassLoader.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjozMToxNVrOH8Vvmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo0ODoyMFrOH9pS4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAzMjg1OA==", "bodyText": "I don't think you need this method, is it supposed to be used outside of tests?", "url": "https://github.com/apache/cxf/pull/721#discussion_r533032858", "createdAt": "2020-12-01T02:31:15Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedClassClassLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+\n+public class GeneratedClassClassLoader {\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassLoaderProxyService.class);\n+    protected final Bus bus;\n+\n+    public GeneratedClassClassLoader(Bus bus) {\n+        this.bus = bus;\n+    }\n+    protected Class<?> findClass(String className, Class<?> callingClass) {\n+        ClassLoader cl = getClassLoader();\n+        try {\n+            return cl.loadClass(className);\n+        } catch (ClassNotFoundException e) {\n+            //ignore and try with other class loader\n+        }\n+        try {\n+            return ClassLoaderUtils.loadClass(className, callingClass);\n+        } catch (ClassNotFoundException e) {\n+            LOG.fine(\"Failed to load class :\" + e.toString());\n+        }\n+        return null;\n+    }\n+    public TypeHelperClassLoader getClassLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            loader = bus.getExtension(TypeHelperClassLoader.class);\n+            if (loader == null) {\n+                ClassLoader parent = bus.getExtension(ClassLoader.class);\n+                if (parent == null) {\n+                    parent = Thread.currentThread().getContextClassLoader();\n+                }\n+                loader = new TypeHelperClassLoader(parent);\n+                bus.setExtension(loader, TypeHelperClassLoader.class);\n+            }\n+        }\n+        return loader;\n+    }\n+\n+    public void restore(ClassGeneratorCapture capture) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525d2dd8305f6830a6b53cf9582911cc4671720c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExODQ4NQ==", "bodyText": "hmm outside of test, I will proceed like that:\n\nmake my own capture\nwrite in .class file the bytes\nHow to inject the class files generated and available in app to the ClassLoader used in GeneratedClassClassLoader.java?\nsorry if my question seems dumb but I am a bit lost....", "url": "https://github.com/apache/cxf/pull/721#discussion_r533118485", "createdAt": "2020-12-01T07:19:32Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedClassClassLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+\n+public class GeneratedClassClassLoader {\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassLoaderProxyService.class);\n+    protected final Bus bus;\n+\n+    public GeneratedClassClassLoader(Bus bus) {\n+        this.bus = bus;\n+    }\n+    protected Class<?> findClass(String className, Class<?> callingClass) {\n+        ClassLoader cl = getClassLoader();\n+        try {\n+            return cl.loadClass(className);\n+        } catch (ClassNotFoundException e) {\n+            //ignore and try with other class loader\n+        }\n+        try {\n+            return ClassLoaderUtils.loadClass(className, callingClass);\n+        } catch (ClassNotFoundException e) {\n+            LOG.fine(\"Failed to load class :\" + e.toString());\n+        }\n+        return null;\n+    }\n+    public TypeHelperClassLoader getClassLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            loader = bus.getExtension(TypeHelperClassLoader.class);\n+            if (loader == null) {\n+                ClassLoader parent = bus.getExtension(ClassLoader.class);\n+                if (parent == null) {\n+                    parent = Thread.currentThread().getContextClassLoader();\n+                }\n+                loader = new TypeHelperClassLoader(parent);\n+                bus.setExtension(loader, TypeHelperClassLoader.class);\n+            }\n+        }\n+        return loader;\n+    }\n+\n+    public void restore(ClassGeneratorCapture capture) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAzMjg1OA=="}, "originalCommit": {"oid": "525d2dd8305f6830a6b53cf9582911cc4671720c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyOTEzMg==", "bodyText": "Outside of a test you have written the .class in target/classes (maven/gradle) or in classloader singleton of quarkus (= it is int the future runtime classloader, no need to do anything special except have a stable name to reuse it and load it, xxhash64 of all parameters can help there, you can check the openwebbeans impl which has this option). The main trick is to ensure CXF uses a SPI to load the class. Generally the \"write\"/capture and \"read\"/load is the same SPI to ensure both sides match. One \"already written\" impl will throw an UnsupportedOperationException in write but it is a detail. In OWB the read/write methods are merged as a \"defineAndLoad\" ([1]) one but it is not required. The defineAndLoad deep implementation (actual classloader load) is either the one we currently have with a map in a classloader or a more aggressive one using Unsafe ([2]).\n[1] https://github.com/apache/openwebbeans/blob/master/webbeans-impl/src/main/java/org/apache/webbeans/service/ClassLoaderProxyService.java\n[2] https://github.com/apache/openwebbeans/blob/master/webbeans-impl/src/main/java/org/apache/webbeans/proxy/Unsafe.java#L132", "url": "https://github.com/apache/cxf/pull/721#discussion_r533129132", "createdAt": "2020-12-01T07:44:34Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedClassClassLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+\n+public class GeneratedClassClassLoader {\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassLoaderProxyService.class);\n+    protected final Bus bus;\n+\n+    public GeneratedClassClassLoader(Bus bus) {\n+        this.bus = bus;\n+    }\n+    protected Class<?> findClass(String className, Class<?> callingClass) {\n+        ClassLoader cl = getClassLoader();\n+        try {\n+            return cl.loadClass(className);\n+        } catch (ClassNotFoundException e) {\n+            //ignore and try with other class loader\n+        }\n+        try {\n+            return ClassLoaderUtils.loadClass(className, callingClass);\n+        } catch (ClassNotFoundException e) {\n+            LOG.fine(\"Failed to load class :\" + e.toString());\n+        }\n+        return null;\n+    }\n+    public TypeHelperClassLoader getClassLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            loader = bus.getExtension(TypeHelperClassLoader.class);\n+            if (loader == null) {\n+                ClassLoader parent = bus.getExtension(ClassLoader.class);\n+                if (parent == null) {\n+                    parent = Thread.currentThread().getContextClassLoader();\n+                }\n+                loader = new TypeHelperClassLoader(parent);\n+                bus.setExtension(loader, TypeHelperClassLoader.class);\n+            }\n+        }\n+        return loader;\n+    }\n+\n+    public void restore(ClassGeneratorCapture capture) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAzMjg1OA=="}, "originalCommit": {"oid": "525d2dd8305f6830a6b53cf9582911cc4671720c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwMzU5OQ==", "bodyText": "hmm so it mean that I expose Map<String, byte[]> proxies = new HashMap<>(); as they do ?\nI do not like to expose byte. I prefer to inject class loader of Map<String, Class<?>> proxies;\nbecause load a byte to class is not really needed at runtime.  no ?", "url": "https://github.com/apache/cxf/pull/721#discussion_r533203599", "createdAt": "2020-12-01T09:20:30Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedClassClassLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+\n+public class GeneratedClassClassLoader {\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassLoaderProxyService.class);\n+    protected final Bus bus;\n+\n+    public GeneratedClassClassLoader(Bus bus) {\n+        this.bus = bus;\n+    }\n+    protected Class<?> findClass(String className, Class<?> callingClass) {\n+        ClassLoader cl = getClassLoader();\n+        try {\n+            return cl.loadClass(className);\n+        } catch (ClassNotFoundException e) {\n+            //ignore and try with other class loader\n+        }\n+        try {\n+            return ClassLoaderUtils.loadClass(className, callingClass);\n+        } catch (ClassNotFoundException e) {\n+            LOG.fine(\"Failed to load class :\" + e.toString());\n+        }\n+        return null;\n+    }\n+    public TypeHelperClassLoader getClassLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            loader = bus.getExtension(TypeHelperClassLoader.class);\n+            if (loader == null) {\n+                ClassLoader parent = bus.getExtension(ClassLoader.class);\n+                if (parent == null) {\n+                    parent = Thread.currentThread().getContextClassLoader();\n+                }\n+                loader = new TypeHelperClassLoader(parent);\n+                bus.setExtension(loader, TypeHelperClassLoader.class);\n+            }\n+        }\n+        return loader;\n+    }\n+\n+    public void restore(ClassGeneratorCapture capture) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAzMjg1OA=="}, "originalCommit": {"oid": "525d2dd8305f6830a6b53cf9582911cc4671720c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI0MTgxMg==", "bodyText": "You dont have to expose the map, you can provide a getter from the classloader (because it is what these classes do at the end) and it is convenient for libs like yours which will then just dump everything from there but it is not required. Your lib can also extend it and dump it on the fly. The getter does not cost anything and is a simple option but forcing a subclass is not that complicated too. Also note that the runtime mode does NOT use the map of bytes, it is the capture mode, the runtime mode just loadClass directly.", "url": "https://github.com/apache/cxf/pull/721#discussion_r533241812", "createdAt": "2020-12-01T09:47:11Z", "author": {"login": "rmannibucau"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedClassClassLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+\n+public class GeneratedClassClassLoader {\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassLoaderProxyService.class);\n+    protected final Bus bus;\n+\n+    public GeneratedClassClassLoader(Bus bus) {\n+        this.bus = bus;\n+    }\n+    protected Class<?> findClass(String className, Class<?> callingClass) {\n+        ClassLoader cl = getClassLoader();\n+        try {\n+            return cl.loadClass(className);\n+        } catch (ClassNotFoundException e) {\n+            //ignore and try with other class loader\n+        }\n+        try {\n+            return ClassLoaderUtils.loadClass(className, callingClass);\n+        } catch (ClassNotFoundException e) {\n+            LOG.fine(\"Failed to load class :\" + e.toString());\n+        }\n+        return null;\n+    }\n+    public TypeHelperClassLoader getClassLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            loader = bus.getExtension(TypeHelperClassLoader.class);\n+            if (loader == null) {\n+                ClassLoader parent = bus.getExtension(ClassLoader.class);\n+                if (parent == null) {\n+                    parent = Thread.currentThread().getContextClassLoader();\n+                }\n+                loader = new TypeHelperClassLoader(parent);\n+                bus.setExtension(loader, TypeHelperClassLoader.class);\n+            }\n+        }\n+        return loader;\n+    }\n+\n+    public void restore(ClassGeneratorCapture capture) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAzMjg1OA=="}, "originalCommit": {"oid": "525d2dd8305f6830a6b53cf9582911cc4671720c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwMTc2Mg==", "bodyText": "I have removed restore response. I guess it is right now ;-)", "url": "https://github.com/apache/cxf/pull/721#discussion_r534401762", "createdAt": "2020-12-02T18:48:20Z", "author": {"login": "dufoli"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedClassClassLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+\n+public class GeneratedClassClassLoader {\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassLoaderProxyService.class);\n+    protected final Bus bus;\n+\n+    public GeneratedClassClassLoader(Bus bus) {\n+        this.bus = bus;\n+    }\n+    protected Class<?> findClass(String className, Class<?> callingClass) {\n+        ClassLoader cl = getClassLoader();\n+        try {\n+            return cl.loadClass(className);\n+        } catch (ClassNotFoundException e) {\n+            //ignore and try with other class loader\n+        }\n+        try {\n+            return ClassLoaderUtils.loadClass(className, callingClass);\n+        } catch (ClassNotFoundException e) {\n+            LOG.fine(\"Failed to load class :\" + e.toString());\n+        }\n+        return null;\n+    }\n+    public TypeHelperClassLoader getClassLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            loader = bus.getExtension(TypeHelperClassLoader.class);\n+            if (loader == null) {\n+                ClassLoader parent = bus.getExtension(ClassLoader.class);\n+                if (parent == null) {\n+                    parent = Thread.currentThread().getContextClassLoader();\n+                }\n+                loader = new TypeHelperClassLoader(parent);\n+                bus.setExtension(loader, TypeHelperClassLoader.class);\n+            }\n+        }\n+        return loader;\n+    }\n+\n+    public void restore(ClassGeneratorCapture capture) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAzMjg1OA=="}, "originalCommit": {"oid": "525d2dd8305f6830a6b53cf9582911cc4671720c"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTY5MDUyOnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/WrapperClassGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo0MToxM1rOH--P8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo1ODowNFrOH--mLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MzY1MQ==", "bodyText": "Please remove qualified and interfaceInfo from class members, pass them as arguments along the chain.", "url": "https://github.com/apache/cxf/pull/721#discussion_r535793651", "createdAt": "2020-12-04T02:41:13Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/WrapperClassGenerator.java", "diffHunk": "@@ -109,7 +109,11 @@ private String getPackageName(Method method) {\n         return list;\n     }\n \n-    public Set<Class<?>> generate() {\n+    public Set<Class<?>> generate(JaxWsServiceFactoryBean factory, InterfaceInfo ii, boolean q) {\n+        this.qualified = q;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f19e12dcd48f7328c0724b48fe11887651e95a8c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5ODM1Ng==", "bodyText": "I can not. The verify limit the number of parameters to seven max. Else I have to create an internal class context to forward it between method.", "url": "https://github.com/apache/cxf/pull/721#discussion_r535798356", "createdAt": "2020-12-04T02:55:25Z", "author": {"login": "dufoli"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/WrapperClassGenerator.java", "diffHunk": "@@ -109,7 +109,11 @@ private String getPackageName(Method method) {\n         return list;\n     }\n \n-    public Set<Class<?>> generate() {\n+    public Set<Class<?>> generate(JaxWsServiceFactoryBean factory, InterfaceInfo ii, boolean q) {\n+        this.qualified = q;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MzY1MQ=="}, "originalCommit": {"oid": "f19e12dcd48f7328c0724b48fe11887651e95a8c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5OTM0Mw==", "bodyText": "You mean checkstyle?\n// CHECKSTYLE: OFF\n....\n// CHECKSTYLE: ON\n(no very great but will do the job)", "url": "https://github.com/apache/cxf/pull/721#discussion_r535799343", "createdAt": "2020-12-04T02:58:04Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/WrapperClassGenerator.java", "diffHunk": "@@ -109,7 +109,11 @@ private String getPackageName(Method method) {\n         return list;\n     }\n \n-    public Set<Class<?>> generate() {\n+    public Set<Class<?>> generate(JaxWsServiceFactoryBean factory, InterfaceInfo ii, boolean q) {\n+        this.qualified = q;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MzY1MQ=="}, "originalCommit": {"oid": "f19e12dcd48f7328c0724b48fe11887651e95a8c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTg0NDM4OnYy", "diffSide": "RIGHT", "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNDozNzoyN1rOIAFFFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMDo1MToyN1rOIAR8yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk1NDEzNA==", "bodyText": "This pattern of changing class state during method execution is the cause of test failures, could you please replace class members\n        this.wrapperType = wt;\n        this.setMethods = setters;\n        this.getMethods = getters;\n        this.jaxbMethods = jms;\n        this.fields = fs;\n\nwith arguments (or move some of them into constructor please)?", "url": "https://github.com/apache/cxf/pull/721#discussion_r536954134", "createdAt": "2020-12-06T04:37:27Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java", "diffHunk": "@@ -24,78 +24,56 @@\n \n import javax.xml.bind.JAXBElement;\n \n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.ClassGeneratorClassLoader;\n import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+import org.apache.cxf.common.util.StringUtils;\n import org.apache.cxf.databinding.WrapperHelper;\n \n-final class WrapperHelperCompiler extends ASMHelper {\n-\n-\n-    final Class<?> wrapperType;\n-    final Method[] setMethods;\n-    final Method[] getMethods;\n-    final Method[] jaxbMethods;\n-    final Field[] fields;\n-    final Object objectFactory;\n-    final ClassWriter cw;\n-\n-    private WrapperHelperCompiler(Class<?> wrapperType,\n-                                  Method[] setMethods,\n-                                  Method[] getMethods,\n-                                  Method[] jaxbMethods,\n-                                  Field[] fields,\n-                                  Object objectFactory) {\n-        this.wrapperType = wrapperType;\n-        this.setMethods = setMethods;\n-        this.getMethods = getMethods;\n-        this.jaxbMethods = jaxbMethods;\n-        this.fields = fields;\n-        this.objectFactory = objectFactory;\n-        cw = createClassWriter();\n-    }\n-\n-    static WrapperHelper compileWrapperHelper(Class<?> wrapperType,\n-                                              Method[] setMethods,\n-                                              Method[] getMethods,\n-                                              Method[] jaxbMethods,\n-                                              Field[] fields,\n-                                              Object objectFactory) {\n-        try {\n-            return new WrapperHelperCompiler(wrapperType,\n-                                        setMethods,\n-                                        getMethods,\n-                                        jaxbMethods,\n-                                        fields,\n-                                        objectFactory).compile();\n-\n-        } catch (Throwable t) {\n-            // Some error - probably a bad version of ASM or similar\n-        }\n-        return null;\n-    }\n-\n+public final class WrapperHelperCompiler extends ClassGeneratorClassLoader implements WrapperHelperCreator {\n \n+    private Class<?> wrapperType;\n+    private Method[] setMethods;\n+    private Method[] getMethods;\n+    private Method[] jaxbMethods;\n+    private Field[] fields;\n+    private ASMHelper.ClassWriter cw;\n+    private ASMHelper asmhelper;\n \n+    WrapperHelperCompiler(Bus bus) {\n+        super(bus);\n+    }\n \n+    public WrapperHelper compile(Class<?> wt, Method[] setters,\n+                                 Method[] getters, Method[] jms,\n+                                 Field[] fs, Object objectFactory) {\n+        this.wrapperType = wt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f9955a2ea54a11e76b3e1224f426f2d074db40"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5NjY5MA==", "bodyText": "hmmm. it is because bus.getExtension is a singleton so always same instance all properties must move to arg to avoid that it is modified by 2 processes. great catch....  I have check other class generator. And the only other case is ASMHelper and no properties in it which can lead to issue (cwClass can be shared). So it can be set and reuse without issue. The classwriter in the other hand must been send as args... but it was not the case.", "url": "https://github.com/apache/cxf/pull/721#discussion_r537096690", "createdAt": "2020-12-06T18:28:35Z", "author": {"login": "dufoli"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java", "diffHunk": "@@ -24,78 +24,56 @@\n \n import javax.xml.bind.JAXBElement;\n \n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.ClassGeneratorClassLoader;\n import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+import org.apache.cxf.common.util.StringUtils;\n import org.apache.cxf.databinding.WrapperHelper;\n \n-final class WrapperHelperCompiler extends ASMHelper {\n-\n-\n-    final Class<?> wrapperType;\n-    final Method[] setMethods;\n-    final Method[] getMethods;\n-    final Method[] jaxbMethods;\n-    final Field[] fields;\n-    final Object objectFactory;\n-    final ClassWriter cw;\n-\n-    private WrapperHelperCompiler(Class<?> wrapperType,\n-                                  Method[] setMethods,\n-                                  Method[] getMethods,\n-                                  Method[] jaxbMethods,\n-                                  Field[] fields,\n-                                  Object objectFactory) {\n-        this.wrapperType = wrapperType;\n-        this.setMethods = setMethods;\n-        this.getMethods = getMethods;\n-        this.jaxbMethods = jaxbMethods;\n-        this.fields = fields;\n-        this.objectFactory = objectFactory;\n-        cw = createClassWriter();\n-    }\n-\n-    static WrapperHelper compileWrapperHelper(Class<?> wrapperType,\n-                                              Method[] setMethods,\n-                                              Method[] getMethods,\n-                                              Method[] jaxbMethods,\n-                                              Field[] fields,\n-                                              Object objectFactory) {\n-        try {\n-            return new WrapperHelperCompiler(wrapperType,\n-                                        setMethods,\n-                                        getMethods,\n-                                        jaxbMethods,\n-                                        fields,\n-                                        objectFactory).compile();\n-\n-        } catch (Throwable t) {\n-            // Some error - probably a bad version of ASM or similar\n-        }\n-        return null;\n-    }\n-\n+public final class WrapperHelperCompiler extends ClassGeneratorClassLoader implements WrapperHelperCreator {\n \n+    private Class<?> wrapperType;\n+    private Method[] setMethods;\n+    private Method[] getMethods;\n+    private Method[] jaxbMethods;\n+    private Field[] fields;\n+    private ASMHelper.ClassWriter cw;\n+    private ASMHelper asmhelper;\n \n+    WrapperHelperCompiler(Bus bus) {\n+        super(bus);\n+    }\n \n+    public WrapperHelper compile(Class<?> wt, Method[] setters,\n+                                 Method[] getters, Method[] jms,\n+                                 Field[] fs, Object objectFactory) {\n+        this.wrapperType = wt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk1NDEzNA=="}, "originalCommit": {"oid": "68f9955a2ea54a11e76b3e1224f426f2d074db40"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5NjkyNg==", "bodyText": "Do you think I must move ASMHelper too to be sure ?", "url": "https://github.com/apache/cxf/pull/721#discussion_r537096926", "createdAt": "2020-12-06T18:29:53Z", "author": {"login": "dufoli"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java", "diffHunk": "@@ -24,78 +24,56 @@\n \n import javax.xml.bind.JAXBElement;\n \n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.ClassGeneratorClassLoader;\n import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+import org.apache.cxf.common.util.StringUtils;\n import org.apache.cxf.databinding.WrapperHelper;\n \n-final class WrapperHelperCompiler extends ASMHelper {\n-\n-\n-    final Class<?> wrapperType;\n-    final Method[] setMethods;\n-    final Method[] getMethods;\n-    final Method[] jaxbMethods;\n-    final Field[] fields;\n-    final Object objectFactory;\n-    final ClassWriter cw;\n-\n-    private WrapperHelperCompiler(Class<?> wrapperType,\n-                                  Method[] setMethods,\n-                                  Method[] getMethods,\n-                                  Method[] jaxbMethods,\n-                                  Field[] fields,\n-                                  Object objectFactory) {\n-        this.wrapperType = wrapperType;\n-        this.setMethods = setMethods;\n-        this.getMethods = getMethods;\n-        this.jaxbMethods = jaxbMethods;\n-        this.fields = fields;\n-        this.objectFactory = objectFactory;\n-        cw = createClassWriter();\n-    }\n-\n-    static WrapperHelper compileWrapperHelper(Class<?> wrapperType,\n-                                              Method[] setMethods,\n-                                              Method[] getMethods,\n-                                              Method[] jaxbMethods,\n-                                              Field[] fields,\n-                                              Object objectFactory) {\n-        try {\n-            return new WrapperHelperCompiler(wrapperType,\n-                                        setMethods,\n-                                        getMethods,\n-                                        jaxbMethods,\n-                                        fields,\n-                                        objectFactory).compile();\n-\n-        } catch (Throwable t) {\n-            // Some error - probably a bad version of ASM or similar\n-        }\n-        return null;\n-    }\n-\n+public final class WrapperHelperCompiler extends ClassGeneratorClassLoader implements WrapperHelperCreator {\n \n+    private Class<?> wrapperType;\n+    private Method[] setMethods;\n+    private Method[] getMethods;\n+    private Method[] jaxbMethods;\n+    private Field[] fields;\n+    private ASMHelper.ClassWriter cw;\n+    private ASMHelper asmhelper;\n \n+    WrapperHelperCompiler(Bus bus) {\n+        super(bus);\n+    }\n \n+    public WrapperHelper compile(Class<?> wt, Method[] setters,\n+                                 Method[] getters, Method[] jms,\n+                                 Field[] fs, Object objectFactory) {\n+        this.wrapperType = wt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk1NDEzNA=="}, "originalCommit": {"oid": "68f9955a2ea54a11e76b3e1224f426f2d074db40"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5OTE1Ng==", "bodyText": "Yes, I think making it local (fetch from the bus) would be better, thanks. Basically, we should not change the class members beside the construction phase.", "url": "https://github.com/apache/cxf/pull/721#discussion_r537099156", "createdAt": "2020-12-06T18:43:24Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java", "diffHunk": "@@ -24,78 +24,56 @@\n \n import javax.xml.bind.JAXBElement;\n \n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.ClassGeneratorClassLoader;\n import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+import org.apache.cxf.common.util.StringUtils;\n import org.apache.cxf.databinding.WrapperHelper;\n \n-final class WrapperHelperCompiler extends ASMHelper {\n-\n-\n-    final Class<?> wrapperType;\n-    final Method[] setMethods;\n-    final Method[] getMethods;\n-    final Method[] jaxbMethods;\n-    final Field[] fields;\n-    final Object objectFactory;\n-    final ClassWriter cw;\n-\n-    private WrapperHelperCompiler(Class<?> wrapperType,\n-                                  Method[] setMethods,\n-                                  Method[] getMethods,\n-                                  Method[] jaxbMethods,\n-                                  Field[] fields,\n-                                  Object objectFactory) {\n-        this.wrapperType = wrapperType;\n-        this.setMethods = setMethods;\n-        this.getMethods = getMethods;\n-        this.jaxbMethods = jaxbMethods;\n-        this.fields = fields;\n-        this.objectFactory = objectFactory;\n-        cw = createClassWriter();\n-    }\n-\n-    static WrapperHelper compileWrapperHelper(Class<?> wrapperType,\n-                                              Method[] setMethods,\n-                                              Method[] getMethods,\n-                                              Method[] jaxbMethods,\n-                                              Field[] fields,\n-                                              Object objectFactory) {\n-        try {\n-            return new WrapperHelperCompiler(wrapperType,\n-                                        setMethods,\n-                                        getMethods,\n-                                        jaxbMethods,\n-                                        fields,\n-                                        objectFactory).compile();\n-\n-        } catch (Throwable t) {\n-            // Some error - probably a bad version of ASM or similar\n-        }\n-        return null;\n-    }\n-\n+public final class WrapperHelperCompiler extends ClassGeneratorClassLoader implements WrapperHelperCreator {\n \n+    private Class<?> wrapperType;\n+    private Method[] setMethods;\n+    private Method[] getMethods;\n+    private Method[] jaxbMethods;\n+    private Field[] fields;\n+    private ASMHelper.ClassWriter cw;\n+    private ASMHelper asmhelper;\n \n+    WrapperHelperCompiler(Bus bus) {\n+        super(bus);\n+    }\n \n+    public WrapperHelper compile(Class<?> wt, Method[] setters,\n+                                 Method[] getters, Method[] jms,\n+                                 Field[] fs, Object objectFactory) {\n+        this.wrapperType = wt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk1NDEzNA=="}, "originalCommit": {"oid": "68f9955a2ea54a11e76b3e1224f426f2d074db40"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzExODkwNA==", "bodyText": "done", "url": "https://github.com/apache/cxf/pull/721#discussion_r537118904", "createdAt": "2020-12-06T20:39:26Z", "author": {"login": "dufoli"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java", "diffHunk": "@@ -24,78 +24,56 @@\n \n import javax.xml.bind.JAXBElement;\n \n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.ClassGeneratorClassLoader;\n import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+import org.apache.cxf.common.util.StringUtils;\n import org.apache.cxf.databinding.WrapperHelper;\n \n-final class WrapperHelperCompiler extends ASMHelper {\n-\n-\n-    final Class<?> wrapperType;\n-    final Method[] setMethods;\n-    final Method[] getMethods;\n-    final Method[] jaxbMethods;\n-    final Field[] fields;\n-    final Object objectFactory;\n-    final ClassWriter cw;\n-\n-    private WrapperHelperCompiler(Class<?> wrapperType,\n-                                  Method[] setMethods,\n-                                  Method[] getMethods,\n-                                  Method[] jaxbMethods,\n-                                  Field[] fields,\n-                                  Object objectFactory) {\n-        this.wrapperType = wrapperType;\n-        this.setMethods = setMethods;\n-        this.getMethods = getMethods;\n-        this.jaxbMethods = jaxbMethods;\n-        this.fields = fields;\n-        this.objectFactory = objectFactory;\n-        cw = createClassWriter();\n-    }\n-\n-    static WrapperHelper compileWrapperHelper(Class<?> wrapperType,\n-                                              Method[] setMethods,\n-                                              Method[] getMethods,\n-                                              Method[] jaxbMethods,\n-                                              Field[] fields,\n-                                              Object objectFactory) {\n-        try {\n-            return new WrapperHelperCompiler(wrapperType,\n-                                        setMethods,\n-                                        getMethods,\n-                                        jaxbMethods,\n-                                        fields,\n-                                        objectFactory).compile();\n-\n-        } catch (Throwable t) {\n-            // Some error - probably a bad version of ASM or similar\n-        }\n-        return null;\n-    }\n-\n+public final class WrapperHelperCompiler extends ClassGeneratorClassLoader implements WrapperHelperCreator {\n \n+    private Class<?> wrapperType;\n+    private Method[] setMethods;\n+    private Method[] getMethods;\n+    private Method[] jaxbMethods;\n+    private Field[] fields;\n+    private ASMHelper.ClassWriter cw;\n+    private ASMHelper asmhelper;\n \n+    WrapperHelperCompiler(Bus bus) {\n+        super(bus);\n+    }\n \n+    public WrapperHelper compile(Class<?> wt, Method[] setters,\n+                                 Method[] getters, Method[] jms,\n+                                 Field[] fs, Object objectFactory) {\n+        this.wrapperType = wt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk1NDEzNA=="}, "originalCommit": {"oid": "68f9955a2ea54a11e76b3e1224f426f2d074db40"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE2NTAwMw==", "bodyText": "\ud83d\udc4d thank you, things are back on track", "url": "https://github.com/apache/cxf/pull/721#discussion_r537165003", "createdAt": "2020-12-07T00:51:27Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java", "diffHunk": "@@ -24,78 +24,56 @@\n \n import javax.xml.bind.JAXBElement;\n \n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.ClassGeneratorClassLoader;\n import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+import org.apache.cxf.common.util.StringUtils;\n import org.apache.cxf.databinding.WrapperHelper;\n \n-final class WrapperHelperCompiler extends ASMHelper {\n-\n-\n-    final Class<?> wrapperType;\n-    final Method[] setMethods;\n-    final Method[] getMethods;\n-    final Method[] jaxbMethods;\n-    final Field[] fields;\n-    final Object objectFactory;\n-    final ClassWriter cw;\n-\n-    private WrapperHelperCompiler(Class<?> wrapperType,\n-                                  Method[] setMethods,\n-                                  Method[] getMethods,\n-                                  Method[] jaxbMethods,\n-                                  Field[] fields,\n-                                  Object objectFactory) {\n-        this.wrapperType = wrapperType;\n-        this.setMethods = setMethods;\n-        this.getMethods = getMethods;\n-        this.jaxbMethods = jaxbMethods;\n-        this.fields = fields;\n-        this.objectFactory = objectFactory;\n-        cw = createClassWriter();\n-    }\n-\n-    static WrapperHelper compileWrapperHelper(Class<?> wrapperType,\n-                                              Method[] setMethods,\n-                                              Method[] getMethods,\n-                                              Method[] jaxbMethods,\n-                                              Field[] fields,\n-                                              Object objectFactory) {\n-        try {\n-            return new WrapperHelperCompiler(wrapperType,\n-                                        setMethods,\n-                                        getMethods,\n-                                        jaxbMethods,\n-                                        fields,\n-                                        objectFactory).compile();\n-\n-        } catch (Throwable t) {\n-            // Some error - probably a bad version of ASM or similar\n-        }\n-        return null;\n-    }\n-\n+public final class WrapperHelperCompiler extends ClassGeneratorClassLoader implements WrapperHelperCreator {\n \n+    private Class<?> wrapperType;\n+    private Method[] setMethods;\n+    private Method[] getMethods;\n+    private Method[] jaxbMethods;\n+    private Field[] fields;\n+    private ASMHelper.ClassWriter cw;\n+    private ASMHelper asmhelper;\n \n+    WrapperHelperCompiler(Bus bus) {\n+        super(bus);\n+    }\n \n+    public WrapperHelper compile(Class<?> wt, Method[] setters,\n+                                 Method[] getters, Method[] jms,\n+                                 Field[] fs, Object objectFactory) {\n+        this.wrapperType = wt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk1NDEzNA=="}, "originalCommit": {"oid": "68f9955a2ea54a11e76b3e1224f426f2d074db40"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjkxOTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo0MTo1N1rOIDSvxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo0MTo1N1rOIDSvxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMyMzc4MA==", "bodyText": "Please declare srv as private final", "url": "https://github.com/apache/cxf/pull/721#discussion_r540323780", "createdAt": "2020-12-10T16:41:57Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.logging.LogUtils;\n+\n+public class ClassLoaderProxyService implements ClassLoaderService {\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassLoaderProxyService.class);\n+    NamespaceClassCreator srv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mjk1ODA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedClassClassLoaderCapture.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo0OToyM1rOIDTGjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo0OToyM1rOIDTGjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMyOTYxMg==", "bodyText": "Minor, may be better name for this method would be capture, wdyt?", "url": "https://github.com/apache/cxf/pull/721#discussion_r540329612", "createdAt": "2020-12-10T16:49:23Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedClassClassLoaderCapture.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.common.spi;\n+\n+/** Implement this interface to store class generated in order during build phase\n+ *  inject it back before runtime to avoid class generation.\n+ *  produce dot class file thanks to save method.\n+ *  You can check WrapperNamespaceClassGeneratorTest.testGeneratedFirst for usage\n+ *  Here is list of extensions to set in order to avoid class loading after generation during build time.\n+ *  bus.setExtension(new WrapperHelperClassLoader(bus), WrapperHelperCreator.class);\n+ *  bus.setExtension(new ExtensionClassLoader(bus), ExtensionClassCreator.class);\n+ *  bus.setExtension(new ExceptionClassLoader(bus), ExceptionClassCreator.class);\n+ *  bus.setExtension(new GeneratedWrapperClassLoader(bus), WrapperClassCreator.class);\n+ *  bus.setExtension(new FactoryClassLoader(bus), FactoryClassCreator.class);\n+ *  bus.setExtension(new GeneratedNamespaceClassLoader(bus), NamespaceClassCreator.class);\n+ * @author olivier dufour\n+ */\n+public interface GeneratedClassClassLoaderCapture {\n+    void save(String className, byte[] bytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzAxMjM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/NamespaceClassCreator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo1OTo1NlrOIDTmsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo1OTo1NlrOIDTmsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzNzg0MQ==", "bodyText": "We have this method createNamespaceWrapper here and in ClassLoaderService. The name is the same but those do slightly different things. May be we could rename this one to createNamespaceWrapperClass or  the one in ClassLoaderService to createNamespaceWrapperInstance, wdy?", "url": "https://github.com/apache/cxf/pull/721#discussion_r540337841", "createdAt": "2020-12-10T16:59:56Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/NamespaceClassCreator.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+/**\n+ * SPI interface to implement the proxy defining logic.\n+ * It enables to switch from unsafe to classloader logic for instance for java >= 9.\n+ */\n+public interface NamespaceClassCreator {\n+\n+    Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzAxNjAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/NamespaceClassGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzowMDo0MlrOIDTpAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzowMDo0MlrOIDTpAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzODQzMw==", "bodyText": "Please declare helper as private final", "url": "https://github.com/apache/cxf/pull/721#discussion_r540338433", "createdAt": "2020-12-10T17:00:42Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/NamespaceClassGenerator.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+\n+public class NamespaceClassGenerator extends ClassGeneratorClassLoader implements NamespaceClassCreator {\n+\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassGeneratorClassLoader.class);\n+    ASMHelper helper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzA3NzQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoxMzozM1rOIDUN2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoxMzozM1rOIDUN2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0Nzg2Nw==", "bodyText": "Please remove this method (setBadASM), it is internal impl only and is not used anywhere", "url": "https://github.com/apache/cxf/pull/721#discussion_r540347867", "createdAt": "2020-12-10T17:13:33Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -19,447 +19,29 @@\n \n package org.apache.cxf.common.util;\n \n-import java.lang.ref.WeakReference;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.GenericArrayType;\n import java.lang.reflect.Method;\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.TypeVariable;\n-import java.lang.reflect.WildcardType;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n \n-import org.apache.cxf.common.classloader.ClassLoaderUtils;\n import org.apache.cxf.common.util.ReflectionInvokationHandler.Optional;\n import org.apache.cxf.common.util.ReflectionInvokationHandler.UnwrapParam;\n import org.apache.cxf.common.util.ReflectionInvokationHandler.WrapReturn;\n \n-public class ASMHelper {\n-    protected static final Map<Class<?>, String> PRIMITIVE_MAP = new HashMap<>();\n-    protected static final Map<Class<?>, String> NONPRIMITIVE_MAP = new HashMap<>();\n-    protected static final Map<Class<?>, Integer> PRIMITIVE_ZERO_MAP = new HashMap<>();\n \n-    protected static final Map<ClassLoader, WeakReference<TypeHelperClassLoader>> LOADER_MAP\n-        = new WeakIdentityHashMap<>();\n-    protected static final Map<Class<?>, WeakReference<TypeHelperClassLoader>> CLASS_MAP\n-        = new WeakIdentityHashMap<>();\n+public interface ASMHelper {\n+    String getClassCode(Class<?> cl);\n+    String getClassCode(java.lang.reflect.Type type);\n+    ClassWriter createClassWriter();\n+    ASMType getType(String type);\n+    Label createLabel();\n+    OpcodesProxy getOpCodes();\n+    Class<?> getASMClass() throws ClassNotFoundException;\n+    String getMethodSignature(Method m);\n+    String getNonPrimitive(Class<?> tp);\n+    String getPrimitive(Class<?> tp);\n+    void setBadASM(boolean b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzA4MjgxOnYy", "diffSide": "RIGHT", "path": "systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ClientServerMiscTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoxNDozN1rOIDUQ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoxNDozN1rOIDUQ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0ODY0Mg==", "bodyText": "Please use Method m = helper.getClass().getMethod(\"setBadASM\", Boolean.TYPE);", "url": "https://github.com/apache/cxf/pull/721#discussion_r540348642", "createdAt": "2020-12-10T17:14:37Z", "author": {"login": "reta"}, "path": "systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ClientServerMiscTest.java", "diffHunk": "@@ -419,9 +420,11 @@ public void testWrappedHolderOutNull() throws Exception {\n     }\n \n     private void setASM(boolean b) throws Exception {\n-        Field f = ASMHelper.class.getDeclaredField(\"badASM\");\n-        ReflectionUtil.setAccessible(f);\n-        f.set(null, !b);\n+\n+        ASMHelper helper = getBus().getExtension(ASMHelper.class);\n+        Method m = ASMHelper.class.getMethod(\"setBadASM\", Boolean.TYPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzE4MTcyOnYy", "diffSide": "RIGHT", "path": "rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaAnyHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozNjoxNlrOIDVMuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozNjoxNlrOIDVMuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2Mzk2Mw==", "bodyText": "It seems like we did shortcut here by not passing the bus, could you please add Bus to method arguments? The bus instance is present in all flows, just needs to be passed around: CorbaConduit / CorbaDestination / CorbaServerConduit would need to be modified to accept Bus in constructors, and in CorbaStreamInInterceptor you could get the bus from exchange instance available in place.", "url": "https://github.com/apache/cxf/pull/721#discussion_r540363963", "createdAt": "2020-12-10T17:36:16Z", "author": {"login": "reta"}, "path": "rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaAnyHelper.java", "diffHunk": "@@ -272,258 +266,20 @@ public static void extractPrimitiveFromAny(Any a, CorbaPrimitiveHandler primitiv\n         IDL_TO_SCHEMA_TYPES.put(CorbaConstants.NT_CORBA_ANY, W3CConstants.NT_SCHEMA_ANYTYPE);\n     }\n \n-    private static Any createFixedAny(ORB orb, Any any) {\n-        createFixedAnyConstructor();\n+    private static synchronized Any createFixedAny(ORB orb, Any any) {\n+        if (fixedAnyConstructor == null) {\n+            CorbaFixedAnyImplGenerator corbaFixedAnyImplGenerator = new CorbaFixedAnyImplGenerator(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzE5MzkwOnYy", "diffSide": "RIGHT", "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/FactoryClassProxyService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozODozOVrOIDVUhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozODozOVrOIDVUhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NTk1Ng==", "bodyText": "Please declare srv as private final", "url": "https://github.com/apache/cxf/pull/721#discussion_r540365956", "createdAt": "2020-12-10T17:38:39Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/FactoryClassProxyService.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import org.apache.cxf.Bus;\n+\n+public class FactoryClassProxyService implements FactoryClassCreator {\n+    FactoryClassCreator srv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzI2MTE5OnYy", "diffSide": "RIGHT", "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1MjoyMlrOIDV9HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1MjoyMlrOIDV9HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3NjM0OA==", "bodyText": "I think we have to rename it to WrapperHelperClassGenerator to be on par with WrapperHelperClassLoader and others: FactoryClassGenerator / FactoryClassLoader, etc.", "url": "https://github.com/apache/cxf/pull/721#discussion_r540376348", "createdAt": "2020-12-10T17:52:22Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java", "diffHunk": "@@ -24,78 +24,43 @@\n \n import javax.xml.bind.JAXBElement;\n \n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.ClassGeneratorClassLoader;\n import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+import org.apache.cxf.common.util.StringUtils;\n import org.apache.cxf.databinding.WrapperHelper;\n \n-final class WrapperHelperCompiler extends ASMHelper {\n-\n-\n-    final Class<?> wrapperType;\n-    final Method[] setMethods;\n-    final Method[] getMethods;\n-    final Method[] jaxbMethods;\n-    final Field[] fields;\n-    final Object objectFactory;\n-    final ClassWriter cw;\n-\n-    private WrapperHelperCompiler(Class<?> wrapperType,\n-                                  Method[] setMethods,\n-                                  Method[] getMethods,\n-                                  Method[] jaxbMethods,\n-                                  Field[] fields,\n-                                  Object objectFactory) {\n-        this.wrapperType = wrapperType;\n-        this.setMethods = setMethods;\n-        this.getMethods = getMethods;\n-        this.jaxbMethods = jaxbMethods;\n-        this.fields = fields;\n-        this.objectFactory = objectFactory;\n-        cw = createClassWriter();\n-    }\n+public final class WrapperHelperCompiler extends ClassGeneratorClassLoader implements WrapperHelperCreator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzI2NDA4OnYy", "diffSide": "RIGHT", "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperProxyService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1MzowMVrOIDV-yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1MzowMVrOIDV-yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3Njc3Ng==", "bodyText": "Please declare srv as private final", "url": "https://github.com/apache/cxf/pull/721#discussion_r540376776", "createdAt": "2020-12-10T17:53:01Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperProxyService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.databinding.WrapperHelper;\n+\n+public class WrapperHelperProxyService implements WrapperHelperCreator {\n+    WrapperHelperCreator srv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzI3NzExOnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/WrapperClassCreatorProxyService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1NTo1NVrOIDWGew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1NTo1NVrOIDWGew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3ODc0Nw==", "bodyText": "Please declare srv as private final", "url": "https://github.com/apache/cxf/pull/721#discussion_r540378747", "createdAt": "2020-12-10T17:55:55Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/WrapperClassCreatorProxyService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxws.spi;\n+\n+import java.util.Set;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.jaxws.WrapperClassGenerator;\n+import org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean;\n+import org.apache.cxf.service.model.InterfaceInfo;\n+\n+public class WrapperClassCreatorProxyService implements WrapperClassCreator {\n+    WrapperClassCreator srv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzM2MjQ1OnYy", "diffSide": "RIGHT", "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/GeneratedWrapperClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoxNTowNFrOIDW4zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoxNTowNFrOIDW4zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MTYzMQ==", "bodyText": "Please rename to WrapperClassLoader to follow the convention:  ExceptionClassGenerator / ExceptionClassLoader, WrapperHelperClassLoader / WrapperHelperClassGenerator", "url": "https://github.com/apache/cxf/pull/721#discussion_r540391631", "createdAt": "2020-12-10T18:15:04Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/GeneratedWrapperClassLoader.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxws.spi;\n+\n+import java.lang.reflect.Method;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.GeneratedClassClassLoader;\n+import org.apache.cxf.common.util.PackageUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.cxf.jaxws.WrapperClassGenerator;\n+import org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean;\n+import org.apache.cxf.service.model.InterfaceInfo;\n+import org.apache.cxf.service.model.MessageInfo;\n+import org.apache.cxf.service.model.MessagePartInfo;\n+import org.apache.cxf.service.model.OperationInfo;\n+import org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean;\n+\n+/** If class has been generated during build time\n+ *  (use @see org.apache.cxf.common.spi.GeneratedClassClassLoaderCapture capture to save bytes)\n+ *  you can set class loader to avoid class generation during runtime:\n+ *  bus.setExtension(new GeneratedWrapperClassLoader(bus), WrapperClassCreator.class);\n+ * @author olivier dufour\n+ */\n+public class GeneratedWrapperClassLoader extends GeneratedClassClassLoader implements WrapperClassCreator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzM3MzA3OnYy", "diffSide": "RIGHT", "path": "rt/frontend/simple/src/main/java/org/apache/cxf/endpoint/dynamic/ExceptionClassCreatorProxyService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoxNzozNVrOIDW_Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoxNzozNVrOIDW_Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MzI3NA==", "bodyText": "Please declare srv as private final", "url": "https://github.com/apache/cxf/pull/721#discussion_r540393274", "createdAt": "2020-12-10T18:17:35Z", "author": {"login": "reta"}, "path": "rt/frontend/simple/src/main/java/org/apache/cxf/endpoint/dynamic/ExceptionClassCreatorProxyService.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.endpoint.dynamic;\n+\n+import org.apache.cxf.Bus;\n+\n+public class ExceptionClassCreatorProxyService implements ExceptionClassCreator {\n+    ExceptionClassCreator srv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTgzODk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzozMDo0MlrOIDsYiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzozMDo0MlrOIDsYiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MzgxOQ==", "bodyText": "The length of this line breaks checkstyle (120 chars max)", "url": "https://github.com/apache/cxf/pull/721#discussion_r540743819", "createdAt": "2020-12-11T07:30:42Z", "author": {"login": "coheigea"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.cxf.common.util.WeakIdentityHashMap;\n+\n+/** Class loader used to store and retrieve class generated during runtime to avoid class generation each time.\n+ *  inherited class use asmHelper to generate bytes and use @see #loadClass(String, Class&lt;?&gt;, byte[])\n+ *  or @see #loadClass(String, ClassLoader, byte[]) to store generated class.\n+ *  Class can be generated during buildtime. equivalent class is @see org.apache.cxf.common.spi.GeneratedClassClassLoader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMjc0NzQ4OnYy", "diffSide": "RIGHT", "path": "rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaFixedAnyImplClassCreatorProxyService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxOTo0MzowNlrOIEqM1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxOTo0MzowNlrOIEqM1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc1NjYyOQ==", "bodyText": "Please also declare it private final", "url": "https://github.com/apache/cxf/pull/721#discussion_r541756629", "createdAt": "2020-12-12T19:43:06Z", "author": {"login": "reta"}, "path": "rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaFixedAnyImplClassCreatorProxyService.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.binding.corba.utils;\n+\n+import org.apache.cxf.Bus;\n+\n+public class CorbaFixedAnyImplClassCreatorProxyService implements CorbaFixedAnyImplClassCreator {\n+    CorbaFixedAnyImplClassCreator srv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fefcb7ab1a566ba00d6091a4a9d0cd3a93a6b8d0"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3626, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}