{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwOTUyNDYz", "number": 681, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOTozMzoyMlrOEJYCXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDoxNToyMFrOENwPrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjY2NDYwOnYy", "diffSide": "RIGHT", "path": "rt/features/logging/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOTozMzoyMlrOGp319Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMzowMjoyNFrOGs4iCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1OTczMw==", "bodyText": "maybe a bit overkill for the actual usage? IMHO it would be great to drop or reuse cxf utils.", "url": "https://github.com/apache/cxf/pull/681#discussion_r446559733", "createdAt": "2020-06-27T19:33:22Z", "author": {"login": "rmannibucau"}, "path": "rt/features/logging/pom.xml", "diffHunk": "@@ -38,6 +38,10 @@\n             <groupId>org.slf4j</groupId>\n             <artifactId>slf4j-api</artifactId>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6870b040452032c557ec6a93af717139737801fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3NDcyOA==", "bodyText": "Perhaps, I will check", "url": "https://github.com/apache/cxf/pull/681#discussion_r447274728", "createdAt": "2020-06-29T21:50:47Z", "author": {"login": "ashakirin"}, "path": "rt/features/logging/pom.xml", "diffHunk": "@@ -38,6 +38,10 @@\n             <groupId>org.slf4j</groupId>\n             <artifactId>slf4j-api</artifactId>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1OTczMw=="}, "originalCommit": {"oid": "6870b040452032c557ec6a93af717139737801fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2ODMxMw==", "bodyText": "Agreed, there is no need to import it just for StringUtils.containsIgnoreCase", "url": "https://github.com/apache/cxf/pull/681#discussion_r447568313", "createdAt": "2020-06-30T10:06:55Z", "author": {"login": "coheigea"}, "path": "rt/features/logging/pom.xml", "diffHunk": "@@ -38,6 +38,10 @@\n             <groupId>org.slf4j</groupId>\n             <artifactId>slf4j-api</artifactId>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1OTczMw=="}, "originalCommit": {"oid": "6870b040452032c557ec6a93af717139737801fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxNjc0Ng==", "bodyText": "updated", "url": "https://github.com/apache/cxf/pull/681#discussion_r449716746", "createdAt": "2020-07-03T23:02:24Z", "author": {"login": "ashakirin"}, "path": "rt/features/logging/pom.xml", "diffHunk": "@@ -38,6 +38,10 @@\n             <groupId>org.slf4j</groupId>\n             <artifactId>slf4j-api</artifactId>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1OTczMw=="}, "originalCommit": {"oid": "6870b040452032c557ec6a93af717139737801fd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTUyOTc0OnYy", "diffSide": "RIGHT", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/MaskSensitiveHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDoxNDoyNFrOGq1qJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMjo1MDozM1rOGs4eNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjUxOQ==", "bodyText": "Could we find a way to do this matching in the constructor so it doesn't have to be done every time the expression is evaluated?", "url": "https://github.com/apache/cxf/pull/681#discussion_r447572519", "createdAt": "2020-06-30T10:14:24Z", "author": {"login": "coheigea"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/MaskSensitiveHelper.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.ext.logging;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.message.Message;\n+\n+import static org.apache.commons.lang3.ObjectUtils.isEmpty;\n+\n+public class MaskSensitiveHelper {\n+    private static final String ELEMENT_NAME_TEMPLATE = \"-ELEMENT_NAME-\";\n+    private static final String MATCH_PATTERN_XML = \"<-ELEMENT_NAME->(.*?)</-ELEMENT_NAME->\";\n+    private static final String MATCH_PATTERN_JSON = \"\\\"-ELEMENT_NAME-\\\"[ \\\\t]*:[ \\\\t]*\\\"(.*?)\\\"\";\n+    private static final String REPLACEMENT_PATTERN_XML = \"<-ELEMENT_NAME->XXX</-ELEMENT_NAME->\";\n+    private static final String REPLACEMENT_PATTERN_JSON = \"\\\"-ELEMENT_NAME-\\\": \\\"XXX\\\"\";\n+\n+    private static final String XML_CONTENT = \"xml\";\n+    private static final String HTML_CONTENT = \"html\";\n+    private static final String JSON_CONTENT = \"json\";\n+\n+    final List<String> sensitiveElementNames;\n+\n+    public MaskSensitiveHelper(final List<String> sensitiveElementNames) {\n+        this.sensitiveElementNames = sensitiveElementNames;\n+    }\n+\n+    public String maskSensitiveElements(\n+            final Message message,\n+            final String originalLogString) {\n+        if (isEmpty(sensitiveElementNames)) {\n+            return originalLogString;\n+        }\n+        String contentType = (String) message.get(Message.CONTENT_TYPE);\n+        if (StringUtils.containsIgnoreCase(contentType, XML_CONTENT)\n+                || StringUtils.containsIgnoreCase(contentType, HTML_CONTENT)) {\n+            return applyExpression(originalLogString, MATCH_PATTERN_XML, REPLACEMENT_PATTERN_XML);\n+        } else if (StringUtils.containsIgnoreCase(contentType, JSON_CONTENT)) {\n+            return applyExpression(originalLogString, MATCH_PATTERN_JSON, REPLACEMENT_PATTERN_JSON);\n+        } else {\n+            return originalLogString;\n+        }\n+    }\n+\n+    private String applyExpression(\n+            final String originalLogString,\n+            final String matchPatternTemplate,\n+            final String replacementTemplate) {\n+        String resultString = originalLogString;\n+        for (final String elementName : sensitiveElementNames) {\n+            final String matchPattern = matchPatternTemplate.replaceAll(ELEMENT_NAME_TEMPLATE, elementName);\n+            final String replacement = replacementTemplate.replaceAll(ELEMENT_NAME_TEMPLATE, elementName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6870b040452032c557ec6a93af717139737801fd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxNTc2NQ==", "bodyText": "I made some measurements year ago - there are no real performance difference in modern java with or without pre-compiled patterns - it is automatically optimized. However I find code with replaceAll more readable as with pattern. Can change it, but win is minimal. WDYT?", "url": "https://github.com/apache/cxf/pull/681#discussion_r449715765", "createdAt": "2020-07-03T22:50:33Z", "author": {"login": "ashakirin"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/MaskSensitiveHelper.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.ext.logging;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.message.Message;\n+\n+import static org.apache.commons.lang3.ObjectUtils.isEmpty;\n+\n+public class MaskSensitiveHelper {\n+    private static final String ELEMENT_NAME_TEMPLATE = \"-ELEMENT_NAME-\";\n+    private static final String MATCH_PATTERN_XML = \"<-ELEMENT_NAME->(.*?)</-ELEMENT_NAME->\";\n+    private static final String MATCH_PATTERN_JSON = \"\\\"-ELEMENT_NAME-\\\"[ \\\\t]*:[ \\\\t]*\\\"(.*?)\\\"\";\n+    private static final String REPLACEMENT_PATTERN_XML = \"<-ELEMENT_NAME->XXX</-ELEMENT_NAME->\";\n+    private static final String REPLACEMENT_PATTERN_JSON = \"\\\"-ELEMENT_NAME-\\\": \\\"XXX\\\"\";\n+\n+    private static final String XML_CONTENT = \"xml\";\n+    private static final String HTML_CONTENT = \"html\";\n+    private static final String JSON_CONTENT = \"json\";\n+\n+    final List<String> sensitiveElementNames;\n+\n+    public MaskSensitiveHelper(final List<String> sensitiveElementNames) {\n+        this.sensitiveElementNames = sensitiveElementNames;\n+    }\n+\n+    public String maskSensitiveElements(\n+            final Message message,\n+            final String originalLogString) {\n+        if (isEmpty(sensitiveElementNames)) {\n+            return originalLogString;\n+        }\n+        String contentType = (String) message.get(Message.CONTENT_TYPE);\n+        if (StringUtils.containsIgnoreCase(contentType, XML_CONTENT)\n+                || StringUtils.containsIgnoreCase(contentType, HTML_CONTENT)) {\n+            return applyExpression(originalLogString, MATCH_PATTERN_XML, REPLACEMENT_PATTERN_XML);\n+        } else if (StringUtils.containsIgnoreCase(contentType, JSON_CONTENT)) {\n+            return applyExpression(originalLogString, MATCH_PATTERN_JSON, REPLACEMENT_PATTERN_JSON);\n+        } else {\n+            return originalLogString;\n+        }\n+    }\n+\n+    private String applyExpression(\n+            final String originalLogString,\n+            final String matchPatternTemplate,\n+            final String replacementTemplate) {\n+        String resultString = originalLogString;\n+        for (final String elementName : sensitiveElementNames) {\n+            final String matchPattern = matchPatternTemplate.replaceAll(ELEMENT_NAME_TEMPLATE, elementName);\n+            final String replacement = replacementTemplate.replaceAll(ELEMENT_NAME_TEMPLATE, elementName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjUxOQ=="}, "originalCommit": {"oid": "6870b040452032c557ec6a93af717139737801fd"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTUzMjA3OnYy", "diffSide": "RIGHT", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDoxNTowM1rOGq1rqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjozNzozNlrOGvkGBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjkwNA==", "bodyText": "MaskSensitiveHelper is thread-safe, so it would be more performant only to create it once when sensitiveElementNames are set?", "url": "https://github.com/apache/cxf/pull/681#discussion_r447572904", "createdAt": "2020-06-30T10:15:03Z", "author": {"login": "coheigea"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -102,8 +110,12 @@ public void createExchangeId(Message message) {\n         }\n     }\n \n-    protected String transform(final String originalLogString) {\n+    protected String transform(final Message message, final String originalLogString) {\n         return originalLogString;\n     }\n \n+    protected String maskSensitiveElements(final Message message, String originalLogString) {\n+        return (new MaskSensitiveHelper(sensitiveElementNames))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6870b040452032c557ec6a93af717139737801fd"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxNTkyNA==", "bodyText": "yes, it is make sense", "url": "https://github.com/apache/cxf/pull/681#discussion_r449715924", "createdAt": "2020-07-03T22:52:42Z", "author": {"login": "ashakirin"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -102,8 +110,12 @@ public void createExchangeId(Message message) {\n         }\n     }\n \n-    protected String transform(final String originalLogString) {\n+    protected String transform(final Message message, final String originalLogString) {\n         return originalLogString;\n     }\n \n+    protected String maskSensitiveElements(final Message message, String originalLogString) {\n+        return (new MaskSensitiveHelper(sensitiveElementNames))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjkwNA=="}, "originalCommit": {"oid": "6870b040452032c557ec6a93af717139737801fd"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxNjU5NQ==", "bodyText": "only the thing that can contradict: I would like to add sensitive http headers names as well, if new separate setter for headers names will be introduced, instantiation of helper will be weird, WDYT?", "url": "https://github.com/apache/cxf/pull/681#discussion_r449716595", "createdAt": "2020-07-03T23:00:18Z", "author": {"login": "ashakirin"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -102,8 +110,12 @@ public void createExchangeId(Message message) {\n         }\n     }\n \n-    protected String transform(final String originalLogString) {\n+    protected String transform(final Message message, final String originalLogString) {\n         return originalLogString;\n     }\n \n+    protected String maskSensitiveElements(final Message message, String originalLogString) {\n+        return (new MaskSensitiveHelper(sensitiveElementNames))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjkwNA=="}, "originalCommit": {"oid": "6870b040452032c557ec6a93af717139737801fd"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxNzAwMg==", "bodyText": "But perhaps it doesn't make sense to introduce separate setters for elements and headers, user can just put them in the same list. Any opinions?", "url": "https://github.com/apache/cxf/pull/681#discussion_r449717002", "createdAt": "2020-07-03T23:05:25Z", "author": {"login": "ashakirin"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -102,8 +110,12 @@ public void createExchangeId(Message message) {\n         }\n     }\n \n-    protected String transform(final String originalLogString) {\n+    protected String transform(final Message message, final String originalLogString) {\n         return originalLogString;\n     }\n \n+    protected String maskSensitiveElements(final Message message, String originalLogString) {\n+        return (new MaskSensitiveHelper(sensitiveElementNames))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjkwNA=="}, "originalCommit": {"oid": "6870b040452032c557ec6a93af717139737801fd"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNzYyMA==", "bodyText": "Ignore my last two comments - headers must be masked in DefaultLogEventMapper and shouldn't be set in MaskSensitiveHelper at all", "url": "https://github.com/apache/cxf/pull/681#discussion_r452527620", "createdAt": "2020-07-09T22:37:36Z", "author": {"login": "ashakirin"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -102,8 +110,12 @@ public void createExchangeId(Message message) {\n         }\n     }\n \n-    protected String transform(final String originalLogString) {\n+    protected String transform(final Message message, final String originalLogString) {\n         return originalLogString;\n     }\n \n+    protected String maskSensitiveElements(final Message message, String originalLogString) {\n+        return (new MaskSensitiveHelper(sensitiveElementNames))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjkwNA=="}, "originalCommit": {"oid": "6870b040452032c557ec6a93af717139737801fd"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTYyMjI1OnYy", "diffSide": "RIGHT", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTo0Njo1OFrOGuEvcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjo1ODo0MFrOGvkgkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk2NTM2Mg==", "bodyText": "Maybe rename to HTTPHeaders or ProtocolHeaders to make the meaning clear (as opposed to say SOAP headers)", "url": "https://github.com/apache/cxf/pull/681#discussion_r450965362", "createdAt": "2020-07-07T15:46:58Z", "author": {"login": "coheigea"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -73,6 +78,14 @@ public long getInMemThreshold() {\n         return threshold;\n     }\n \n+    public void addSensitiveElementNames(final List<String> sensitiveElementNames) {\n+        maskSensitiveHelper.addSensitiveElementNames(sensitiveElementNames);\n+    }\n+\n+    public void addSensitiveHeaders(final List<String> sensitiveHeaders) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf4ea9cc1340af99a3774e43c4064e58cc4e66b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNDQxOQ==", "bodyText": "ProtocolHeaders indeed make more sense. Other question if it makes sense to support masking sensitive SOAP headers as well?", "url": "https://github.com/apache/cxf/pull/681#discussion_r452534419", "createdAt": "2020-07-09T22:58:40Z", "author": {"login": "ashakirin"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -73,6 +78,14 @@ public long getInMemThreshold() {\n         return threshold;\n     }\n \n+    public void addSensitiveElementNames(final List<String> sensitiveElementNames) {\n+        maskSensitiveHelper.addSensitiveElementNames(sensitiveElementNames);\n+    }\n+\n+    public void addSensitiveHeaders(final List<String> sensitiveHeaders) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk2NTM2Mg=="}, "originalCommit": {"oid": "6cf4ea9cc1340af99a3774e43c4064e58cc4e66b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTYyMzEyOnYy", "diffSide": "RIGHT", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTo0NzoxM1rOGuEwEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjo1NzoyNFrOGvkfCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk2NTUyMw==", "bodyText": "Why Optional here when maskSensitiveHelper is declared as final?", "url": "https://github.com/apache/cxf/pull/681#discussion_r450965523", "createdAt": "2020-07-07T15:47:13Z", "author": {"login": "coheigea"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -102,8 +115,13 @@ public void createExchangeId(Message message) {\n         }\n     }\n \n-    protected String transform(final String originalLogString) {\n+    protected String transform(final Message message, final String originalLogString) {\n         return originalLogString;\n     }\n \n+    protected String maskSensitiveElements(final Message message, String originalLogString) {\n+        return Optional.of(maskSensitiveHelper)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf4ea9cc1340af99a3774e43c4064e58cc4e66b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNDAyNw==", "bodyText": "Optional makes no sense anymore, stays from time, when maskSensitiveHelper was instantiated only by setter and wasn't final. Removed.", "url": "https://github.com/apache/cxf/pull/681#discussion_r452534027", "createdAt": "2020-07-09T22:57:24Z", "author": {"login": "ashakirin"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -102,8 +115,13 @@ public void createExchangeId(Message message) {\n         }\n     }\n \n-    protected String transform(final String originalLogString) {\n+    protected String transform(final Message message, final String originalLogString) {\n         return originalLogString;\n     }\n \n+    protected String maskSensitiveElements(final Message message, String originalLogString) {\n+        return Optional.of(maskSensitiveHelper)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk2NTUyMw=="}, "originalCommit": {"oid": "6cf4ea9cc1340af99a3774e43c4064e58cc4e66b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODIzNTQwOnYy", "diffSide": "RIGHT", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1MToxN1rOGwfFgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMTozOToxOVrOGy9uPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NDE0NQ==", "bodyText": "It's probably more performant to use an entrySet here instead:\nheaderMap.entrySet().forEach(entry -> {\nmaskedHeaderMap.put(entry.getKey(), sensitiveHeaderMap.containsKey(entry.getKey())\n? MASKED_HEADER_VALUE : entry.getValue());\n});", "url": "https://github.com/apache/cxf/pull/681#discussion_r453494145", "createdAt": "2020-07-13T08:51:17Z", "author": {"login": "coheigea"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java", "diffHunk": "@@ -95,6 +97,17 @@ public LogEvent map(Message message) {\n         return event;\n     }\n \n+    private Map<String, String> maskHeaders(\n+            final Map<String, String> headerMap,\n+            final Map<String, Boolean> sensitiveHeaderMap) {\n+        final Map<String, String> maskedHeaderMap = new HashMap<>();\n+        headerMap.keySet().forEach(key -> {\n+            maskedHeaderMap.put(key, sensitiveHeaderMap.containsKey(key)\n+                    ? MASKED_HEADER_VALUE : headerMap.get(key));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f66bb7c77125560d8d4091ac77258d79401613"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5MzI0Ng==", "bodyText": "Have replaced List on Set for all arguments, makes more sense and it is performant", "url": "https://github.com/apache/cxf/pull/681#discussion_r456093246", "createdAt": "2020-07-16T21:39:19Z", "author": {"login": "ashakirin"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java", "diffHunk": "@@ -95,6 +97,17 @@ public LogEvent map(Message message) {\n         return event;\n     }\n \n+    private Map<String, String> maskHeaders(\n+            final Map<String, String> headerMap,\n+            final Map<String, Boolean> sensitiveHeaderMap) {\n+        final Map<String, String> maskedHeaderMap = new HashMap<>();\n+        headerMap.keySet().forEach(key -> {\n+            maskedHeaderMap.put(key, sensitiveHeaderMap.containsKey(key)\n+                    ? MASKED_HEADER_VALUE : headerMap.get(key));\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NDE0NQ=="}, "originalCommit": {"oid": "b8f66bb7c77125560d8d4091ac77258d79401613"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODI2NTY2OnYy", "diffSide": "RIGHT", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1ODo0MVrOGwfX0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjo1NTozMVrOGxGqnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5ODgzMw==", "bodyText": "Do we need to use a map here, as the boolean value isn't actually used anywhere that I can see?", "url": "https://github.com/apache/cxf/pull/681#discussion_r453498833", "createdAt": "2020-07-13T08:58:41Z", "author": {"login": "coheigea"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -73,6 +82,15 @@ public long getInMemThreshold() {\n         return threshold;\n     }\n \n+    public void addSensitiveElementNames(final List<String> sensitiveElementNames) {\n+        maskSensitiveHelper.addSensitiveElementNames(sensitiveElementNames);\n+    }\n+\n+    public void addSensitiveProtocolHeaderNames(final List<String> sensitiveProtocolHeaderNames) {\n+        sensitiveProtocolHeaderMap = sensitiveProtocolHeaderNames.stream()\n+                .collect(Collectors.toMap(Function.identity(), name -> Boolean.TRUE));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f66bb7c77125560d8d4091ac77258d79401613"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0MjYyMA==", "bodyText": "Yes, set will be enough, you are right", "url": "https://github.com/apache/cxf/pull/681#discussion_r454142620", "createdAt": "2020-07-14T06:55:31Z", "author": {"login": "ashakirin"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java", "diffHunk": "@@ -73,6 +82,15 @@ public long getInMemThreshold() {\n         return threshold;\n     }\n \n+    public void addSensitiveElementNames(final List<String> sensitiveElementNames) {\n+        maskSensitiveHelper.addSensitiveElementNames(sensitiveElementNames);\n+    }\n+\n+    public void addSensitiveProtocolHeaderNames(final List<String> sensitiveProtocolHeaderNames) {\n+        sensitiveProtocolHeaderMap = sensitiveProtocolHeaderNames.stream()\n+                .collect(Collectors.toMap(Function.identity(), name -> Boolean.TRUE));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5ODgzMw=="}, "originalCommit": {"oid": "b8f66bb7c77125560d8d4091ac77258d79401613"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODQ2ODAwOnYy", "diffSide": "RIGHT", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/MaskSensitiveHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTo0NzozOFrOGwhOWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTo0NzozOFrOGwhOWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyOTE3OA==", "bodyText": "Could we move this template replacement into the constructor? Maybe create a map of matchPattern -> replacement and iterate over this instead of sensitiveNames?", "url": "https://github.com/apache/cxf/pull/681#discussion_r453529178", "createdAt": "2020-07-13T09:47:38Z", "author": {"login": "coheigea"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/MaskSensitiveHelper.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.ext.logging;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.cxf.message.Message;\n+\n+public class MaskSensitiveHelper {\n+    private static final String ELEMENT_NAME_TEMPLATE = \"-ELEMENT_NAME-\";\n+    private static final String MATCH_PATTERN_XML = \"<-ELEMENT_NAME->(.*?)</-ELEMENT_NAME->\";\n+    private static final String MATCH_PATTERN_JSON = \"\\\"-ELEMENT_NAME-\\\"[ \\\\t]*:[ \\\\t]*\\\"(.*?)\\\"\";\n+    private static final String REPLACEMENT_PATTERN_XML = \"<-ELEMENT_NAME->XXX</-ELEMENT_NAME->\";\n+    private static final String REPLACEMENT_PATTERN_JSON = \"\\\"-ELEMENT_NAME-\\\": \\\"XXX\\\"\";\n+\n+    private static final String XML_CONTENT = \"xml\";\n+    private static final String HTML_CONTENT = \"html\";\n+    private static final String JSON_CONTENT = \"json\";\n+\n+    final List<String> sensitiveElementNames = new ArrayList<>();\n+\n+    public void addSensitiveElementNames(final List<String> inSensitiveElementNames) {\n+        this.sensitiveElementNames.addAll(inSensitiveElementNames);\n+    }\n+\n+    public String maskSensitiveElements(\n+            final Message message,\n+            final String originalLogString) {\n+        if (sensitiveElementNames.isEmpty() || message == null) {\n+            return originalLogString;\n+        }\n+        final String contentType = (String) message.get(Message.CONTENT_TYPE);\n+        if (contentType.toLowerCase().contains(XML_CONTENT)\n+                || contentType.toLowerCase().contains(HTML_CONTENT)) {\n+            return applyMasks(originalLogString, MATCH_PATTERN_XML, REPLACEMENT_PATTERN_XML);\n+        } else if (contentType.toLowerCase().contains(JSON_CONTENT)) {\n+            return applyMasks(originalLogString, MATCH_PATTERN_JSON, REPLACEMENT_PATTERN_JSON);\n+        }\n+        return originalLogString;\n+    }\n+\n+    private String applyMasks(String originalLogString, String matchElementPattern, String replacementElementPattern) {\n+        return Optional.ofNullable(originalLogString)\n+                .map(s -> applyExpression(s, matchElementPattern, replacementElementPattern, sensitiveElementNames))\n+                .orElse(originalLogString);\n+    }\n+\n+    private String applyExpression(\n+            final String originalLogString,\n+            final String matchPatternTemplate,\n+            final String replacementTemplate,\n+            final List<String> sensitiveNames) {\n+        String resultString = originalLogString;\n+        for (final String sensitiveName : sensitiveNames) {\n+            final String matchPattern = matchPatternTemplate.replaceAll(ELEMENT_NAME_TEMPLATE, sensitiveName);\n+            final String replacement = replacementTemplate.replaceAll(ELEMENT_NAME_TEMPLATE, sensitiveName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f66bb7c77125560d8d4091ac77258d79401613"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODU3MzkwOnYy", "diffSide": "RIGHT", "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/MaskSensitiveHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDoxNToyMFrOGwiOHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDoxNToyMFrOGwiOHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0NTUwMw==", "bodyText": "Could we also return here if originalLogString is null + remove the Optional.ofNullable in applyMasks below?", "url": "https://github.com/apache/cxf/pull/681#discussion_r453545503", "createdAt": "2020-07-13T10:15:20Z", "author": {"login": "coheigea"}, "path": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/MaskSensitiveHelper.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.ext.logging;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.cxf.message.Message;\n+\n+public class MaskSensitiveHelper {\n+    private static final String ELEMENT_NAME_TEMPLATE = \"-ELEMENT_NAME-\";\n+    private static final String MATCH_PATTERN_XML = \"<-ELEMENT_NAME->(.*?)</-ELEMENT_NAME->\";\n+    private static final String MATCH_PATTERN_JSON = \"\\\"-ELEMENT_NAME-\\\"[ \\\\t]*:[ \\\\t]*\\\"(.*?)\\\"\";\n+    private static final String REPLACEMENT_PATTERN_XML = \"<-ELEMENT_NAME->XXX</-ELEMENT_NAME->\";\n+    private static final String REPLACEMENT_PATTERN_JSON = \"\\\"-ELEMENT_NAME-\\\": \\\"XXX\\\"\";\n+\n+    private static final String XML_CONTENT = \"xml\";\n+    private static final String HTML_CONTENT = \"html\";\n+    private static final String JSON_CONTENT = \"json\";\n+\n+    final List<String> sensitiveElementNames = new ArrayList<>();\n+\n+    public void addSensitiveElementNames(final List<String> inSensitiveElementNames) {\n+        this.sensitiveElementNames.addAll(inSensitiveElementNames);\n+    }\n+\n+    public String maskSensitiveElements(\n+            final Message message,\n+            final String originalLogString) {\n+        if (sensitiveElementNames.isEmpty() || message == null) {\n+            return originalLogString;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f66bb7c77125560d8d4091ac77258d79401613"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3585, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}