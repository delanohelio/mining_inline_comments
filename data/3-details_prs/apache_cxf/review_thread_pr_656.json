{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MzA0OTM0", "number": 656, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo1NDozM1rODr4Dwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo1NDozM1rODr4Dwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzMzODI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/cxf/validation/AbstractValidationInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo1NDozM1rOF8ek7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo0MzozNFrOF80Sag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1OTg1Mg==", "bodyText": "Minor, may be introducing the overloaded method MessageUtils.getTargetMethod(inMessage) (which calls the original one with null supplier) would be a bit more cleaner, no need to guess what second argument is. Alternatively, could be Optional<Method> so the caller can raise exceptions or get along with null. What do you think?", "url": "https://github.com/apache/cxf/pull/656#discussion_r398959852", "createdAt": "2020-03-26T23:54:33Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/validation/AbstractValidationInterceptor.java", "diffHunk": "@@ -108,15 +107,7 @@ protected Method getServiceMethod(Message message) {\n         Message inMessage = message.getExchange().getInMessage();\n         Method method = null;\n         if (inMessage != null) {\n-            method = (Method)inMessage.get(\"org.apache.cxf.resource.method\");\n-            if (method == null) {\n-                BindingOperationInfo bop = inMessage.getExchange().getBindingOperationInfo();\n-                if (bop != null) {\n-                    MethodDispatcher md = (MethodDispatcher)\n-                        inMessage.getExchange().getService().get(MethodDispatcher.class.getName());\n-                    method = md.getMethod(bop);\n-                }\n-            }\n+            method = MessageUtils.getTargetMethod(inMessage, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b11d6b26369650e5f4c6f3730dbb97d60927d9b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxNTU2Mg==", "bodyText": "Good idea!  I'll give the Optional<Method> approach a try.  Thanks!", "url": "https://github.com/apache/cxf/pull/656#discussion_r399315562", "createdAt": "2020-03-27T14:43:34Z", "author": {"login": "andymc12"}, "path": "core/src/main/java/org/apache/cxf/validation/AbstractValidationInterceptor.java", "diffHunk": "@@ -108,15 +107,7 @@ protected Method getServiceMethod(Message message) {\n         Message inMessage = message.getExchange().getInMessage();\n         Method method = null;\n         if (inMessage != null) {\n-            method = (Method)inMessage.get(\"org.apache.cxf.resource.method\");\n-            if (method == null) {\n-                BindingOperationInfo bop = inMessage.getExchange().getBindingOperationInfo();\n-                if (bop != null) {\n-                    MethodDispatcher md = (MethodDispatcher)\n-                        inMessage.getExchange().getService().get(MethodDispatcher.class.getName());\n-                    method = md.getMethod(bop);\n-                }\n-            }\n+            method = MessageUtils.getTargetMethod(inMessage, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1OTg1Mg=="}, "originalCommit": {"oid": "8b11d6b26369650e5f4c6f3730dbb97d60927d9b"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3698, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}