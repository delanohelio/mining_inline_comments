{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NzU4NDEw", "number": 721, "title": "[cxf-8340] add precompiled class for Graalvm native support", "bodyText": "", "createdAt": "2020-11-06T13:55:51Z", "url": "https://github.com/apache/cxf/pull/721", "merged": true, "mergeCommit": {"oid": "80c92d57ab7c34f59d51c3b30d0db9ab074e8c6b"}, "closed": true, "closedAt": "2020-12-16T23:36:41Z", "author": {"login": "dufoli"}, "timelineItems": {"totalCount": 82, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbTKwSAFqTUyNzc2NTk2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmEgbiAFqTU1MTMwMjc1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NzY1OTY2", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-527765966", "createdAt": "2020-11-11T00:53:07Z", "commit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo1MzowOFrOHw1edA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo1MzowOFrOHw1edA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2OTg0NA==", "bodyText": "I think we have to clearly distinguish the case when factory class exists and does not (createFactory). Could you please extract the logic of detecting the presence of factory class into dedicated method and modify addClass method to try to find the factory class first and fallback to createFactory if needed?\nWe should also ensure that the factory class is suitable and could be used accordingly.", "url": "https://github.com/apache/cxf/pull/721#discussion_r520969844", "createdAt": "2020-11-11T00:53:08Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBContextInitializer.java", "diffHunk": "@@ -559,44 +559,47 @@ private static Object createTypeReference(QName n, Class<?> cls) {\n     private Object createFactory(Class<?> cls, Constructor<?> contructor) {\n         String newClassName = cls.getName() + \"Factory\";\n         ASMHelper helper = new ASMHelper();\n-        ClassWriter cw = helper.createClassWriter();\n-        MethodVisitor mv;\n-\n-        cw.visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER,\n-                 ASMHelper.periodToSlashes(newClassName), null, \"java/lang/Object\", null);\n-\n-        cw.visitSource(cls.getSimpleName() + \"Factory\" + \".java\", null);\n+        Class<?> factoryClass = helper.findClass(newClassName, cls);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NzY2MTcy", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-527766172", "createdAt": "2020-11-11T00:53:37Z", "commit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo1MzozN1rOHw1f6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo1MzozN1rOHw1f6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MDIxOA==", "bodyText": "How these methods are supposed to be used?", "url": "https://github.com/apache/cxf/pull/721#discussion_r520970218", "createdAt": "2020-11-11T00:53:37Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -342,7 +342,10 @@ public ClassWriter createClassWriter() {\n         TypeHelperClassLoader loader = getTypeHelperClassLoader(l);\n         return loader.lookupDefinedClass(className);\n     }\n-\n+    public static void addExternalClass(String className, ClassLoader l, Class<?> cls) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NzY2NzE1", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-527766715", "createdAt": "2020-11-11T00:54:53Z", "commit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo1NDo1M1rOHw1jyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo1NDo1M1rOHw1jyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MTIwOA==", "bodyText": "Same as for createFactory, it would be better to distinguish the case when suitable factory exists vs creating a new one.", "url": "https://github.com/apache/cxf/pull/721#discussion_r520971208", "createdAt": "2020-11-11T00:54:53Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java", "diffHunk": "@@ -1346,7 +1346,11 @@ private static Object createEclipseNamespaceMapper(Class<?> mcls, Map<String, St\n             + (\"RI\".equals(postFix) ? \"\" : \"internal/\")\n             + \"bind/marshaller/NamespacePrefixMapper\";\n         String postFixedName = \"org/apache/cxf/jaxb/NamespaceMapper\" + postFix;\n+        Class<?> cls = helper.findClass(className, ref);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4780b1cd1d888cd4b527aa8d1c7e214f165275f1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTY3NDAz", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-531967403", "createdAt": "2020-11-17T02:03:36Z", "commit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjowMzozNlrOH0hghQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjowMzozNlrOH0hghQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNjk5Nw==", "bodyText": "I think we could delete this debug flag and related code. It could be easily achieved by introducing respective extension fe DumpingClassGeneratorClassLoader extends ClassGeneratorClassLoader", "url": "https://github.com/apache/cxf/pull/721#discussion_r524836997", "createdAt": "2020-11-17T02:03:36Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTY4ODg3", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-531968887", "createdAt": "2020-11-17T02:06:51Z", "commit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjowNjo1MVrOH0hkYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjowNjo1MVrOH0hkYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNzk4NA==", "bodyText": "AFAIK the access to bus is not synchronized anywhere, so I don't think you need it.", "url": "https://github.com/apache/cxf/pull/721#discussion_r524837984", "createdAt": "2020-11-17T02:06:51Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;\n+    protected final Bus bus;\n+\n+    public ClassGeneratorClassLoader(final Bus bus) {\n+        this.bus = bus == null ? BusFactory.getDefaultBus() : bus;\n+    }\n+\n+    private String getFilePath(String s) {\n+        String sep = System.getProperty(\"file.separator\");\n+        String relativePath = s.replace('.', sep.charAt(0));\n+        String userDir = System.getProperty(\"user.dir\");\n+        return userDir + sep + \"target\" + sep + \"dump\" + sep + relativePath + \".class\";\n+    }\n+    private void saveClass(String className, byte[] bytes) {\n+\n+        File file;\n+        try {\n+            String classFileName = getFilePath(className);\n+            String finalFileName = classFileName;\n+            file = new File(finalFileName);\n+            int i = 1;\n+            while (file.exists()) {\n+                finalFileName = classFileName.substring(0, classFileName.length() - 6) + String.valueOf(i) + \".class\";\n+                file = new File(finalFileName);\n+                i++;\n+            }\n+            file.getParentFile().mkdirs();\n+            try (FileOutputStream fop = new FileOutputStream(file)) {\n+                file.createNewFile();\n+                fop.write(bytes);\n+                fop.flush();\n+            }\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    protected Class<?> loadClass(String className, byte[] bytes) {\n+        if (DEBUG) {\n+            saveClass(className, bytes);\n+        }\n+        TypeHelperClassLoader loader = getOrCreateLoader();\n+        synchronized (loader) {\n+            Class<?> cls = loader.lookupDefinedClass(className);\n+            if (cls == null) {\n+                return loader.defineClass(className, bytes);\n+            }\n+            return cls;\n+        }\n+    }\n+    protected Class<?> findClass(String className) {\n+        return getOrCreateLoader().lookupDefinedClass(className);\n+    }\n+    private TypeHelperClassLoader getOrCreateLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            synchronized (bus) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTY5OTA4", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-531969908", "createdAt": "2020-11-17T02:09:50Z", "commit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjowOTo1MVrOH0hnmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjowOTo1MVrOH0hnmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzODgwOA==", "bodyText": "Since loader is a Bus extension (TypeHelperClassLoader fe), it could be access from anywhere basically, so the synchronization is not going to be useful, could be removed.", "url": "https://github.com/apache/cxf/pull/721#discussion_r524838808", "createdAt": "2020-11-17T02:09:51Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;\n+    protected final Bus bus;\n+\n+    public ClassGeneratorClassLoader(final Bus bus) {\n+        this.bus = bus == null ? BusFactory.getDefaultBus() : bus;\n+    }\n+\n+    private String getFilePath(String s) {\n+        String sep = System.getProperty(\"file.separator\");\n+        String relativePath = s.replace('.', sep.charAt(0));\n+        String userDir = System.getProperty(\"user.dir\");\n+        return userDir + sep + \"target\" + sep + \"dump\" + sep + relativePath + \".class\";\n+    }\n+    private void saveClass(String className, byte[] bytes) {\n+\n+        File file;\n+        try {\n+            String classFileName = getFilePath(className);\n+            String finalFileName = classFileName;\n+            file = new File(finalFileName);\n+            int i = 1;\n+            while (file.exists()) {\n+                finalFileName = classFileName.substring(0, classFileName.length() - 6) + String.valueOf(i) + \".class\";\n+                file = new File(finalFileName);\n+                i++;\n+            }\n+            file.getParentFile().mkdirs();\n+            try (FileOutputStream fop = new FileOutputStream(file)) {\n+                file.createNewFile();\n+                fop.write(bytes);\n+                fop.flush();\n+            }\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    protected Class<?> loadClass(String className, byte[] bytes) {\n+        if (DEBUG) {\n+            saveClass(className, bytes);\n+        }\n+        TypeHelperClassLoader loader = getOrCreateLoader();\n+        synchronized (loader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTcxMzMy", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-531971332", "createdAt": "2020-11-17T02:14:04Z", "commit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoxNDowNFrOH0hsEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoxNDowNFrOH0hsEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzOTk1Mw==", "bodyText": "It seems like we have recurrent patterns:\n\nname.replace('/', '.') slashes to periods (used many times)\nASMHelper:periodToSlashes periods to slashes\n\nWe could extract those to org.apache.cxf.common.util.StringUtils (and actually drop one method from ASMHelper interface)", "url": "https://github.com/apache/cxf/pull/721#discussion_r524839953", "createdAt": "2020-11-17T02:14:04Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;\n+    protected final Bus bus;\n+\n+    public ClassGeneratorClassLoader(final Bus bus) {\n+        this.bus = bus == null ? BusFactory.getDefaultBus() : bus;\n+    }\n+\n+    private String getFilePath(String s) {\n+        String sep = System.getProperty(\"file.separator\");\n+        String relativePath = s.replace('.', sep.charAt(0));\n+        String userDir = System.getProperty(\"user.dir\");\n+        return userDir + sep + \"target\" + sep + \"dump\" + sep + relativePath + \".class\";\n+    }\n+    private void saveClass(String className, byte[] bytes) {\n+\n+        File file;\n+        try {\n+            String classFileName = getFilePath(className);\n+            String finalFileName = classFileName;\n+            file = new File(finalFileName);\n+            int i = 1;\n+            while (file.exists()) {\n+                finalFileName = classFileName.substring(0, classFileName.length() - 6) + String.valueOf(i) + \".class\";\n+                file = new File(finalFileName);\n+                i++;\n+            }\n+            file.getParentFile().mkdirs();\n+            try (FileOutputStream fop = new FileOutputStream(file)) {\n+                file.createNewFile();\n+                fop.write(bytes);\n+                fop.flush();\n+            }\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    protected Class<?> loadClass(String className, byte[] bytes) {\n+        if (DEBUG) {\n+            saveClass(className, bytes);\n+        }\n+        TypeHelperClassLoader loader = getOrCreateLoader();\n+        synchronized (loader) {\n+            Class<?> cls = loader.lookupDefinedClass(className);\n+            if (cls == null) {\n+                return loader.defineClass(className, bytes);\n+            }\n+            return cls;\n+        }\n+    }\n+    protected Class<?> findClass(String className) {\n+        return getOrCreateLoader().lookupDefinedClass(className);\n+    }\n+    private TypeHelperClassLoader getOrCreateLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            synchronized (bus) {\n+                loader = bus.getExtension(TypeHelperClassLoader.class);\n+                if (loader == null) {\n+                    ClassLoader parent = bus.getExtension(ClassLoader.class);\n+                    if (parent == null) {\n+                        parent = Thread.currentThread().getContextClassLoader();\n+                    }\n+                    loader = new TypeHelperClassLoader(parent);\n+                    bus.setExtension(loader, TypeHelperClassLoader.class);\n+                }\n+            }\n+        }\n+        return loader;\n+    }\n+\n+\n+    public static class TypeHelperClassLoader extends ClassLoader {\n+        ConcurrentHashMap<String, Class<?>> defined = new ConcurrentHashMap<>();\n+\n+        TypeHelperClassLoader(ClassLoader parent) {\n+            super(parent);\n+        }\n+        public Class<?> lookupDefinedClass(String name) {\n+            return defined.get(name.replace('/', '.'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTczMzA2", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-531973306", "createdAt": "2020-11-17T02:19:39Z", "commit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoxOTozOVrOH0hykg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoxOTozOVrOH0hykg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MTYxOA==", "bodyText": "Minor, probably computeIfAbsent would be a bit more helpful (may eliminate some calls to super.defineClass) but we could keep it like that", "url": "https://github.com/apache/cxf/pull/721#discussion_r524841618", "createdAt": "2020-11-17T02:19:39Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+\n+public class ClassGeneratorClassLoader {\n+    //TODO handle that with system property\n+    private static final boolean DEBUG = false;\n+    protected final Bus bus;\n+\n+    public ClassGeneratorClassLoader(final Bus bus) {\n+        this.bus = bus == null ? BusFactory.getDefaultBus() : bus;\n+    }\n+\n+    private String getFilePath(String s) {\n+        String sep = System.getProperty(\"file.separator\");\n+        String relativePath = s.replace('.', sep.charAt(0));\n+        String userDir = System.getProperty(\"user.dir\");\n+        return userDir + sep + \"target\" + sep + \"dump\" + sep + relativePath + \".class\";\n+    }\n+    private void saveClass(String className, byte[] bytes) {\n+\n+        File file;\n+        try {\n+            String classFileName = getFilePath(className);\n+            String finalFileName = classFileName;\n+            file = new File(finalFileName);\n+            int i = 1;\n+            while (file.exists()) {\n+                finalFileName = classFileName.substring(0, classFileName.length() - 6) + String.valueOf(i) + \".class\";\n+                file = new File(finalFileName);\n+                i++;\n+            }\n+            file.getParentFile().mkdirs();\n+            try (FileOutputStream fop = new FileOutputStream(file)) {\n+                file.createNewFile();\n+                fop.write(bytes);\n+                fop.flush();\n+            }\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    protected Class<?> loadClass(String className, byte[] bytes) {\n+        if (DEBUG) {\n+            saveClass(className, bytes);\n+        }\n+        TypeHelperClassLoader loader = getOrCreateLoader();\n+        synchronized (loader) {\n+            Class<?> cls = loader.lookupDefinedClass(className);\n+            if (cls == null) {\n+                return loader.defineClass(className, bytes);\n+            }\n+            return cls;\n+        }\n+    }\n+    protected Class<?> findClass(String className) {\n+        return getOrCreateLoader().lookupDefinedClass(className);\n+    }\n+    private TypeHelperClassLoader getOrCreateLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            synchronized (bus) {\n+                loader = bus.getExtension(TypeHelperClassLoader.class);\n+                if (loader == null) {\n+                    ClassLoader parent = bus.getExtension(ClassLoader.class);\n+                    if (parent == null) {\n+                        parent = Thread.currentThread().getContextClassLoader();\n+                    }\n+                    loader = new TypeHelperClassLoader(parent);\n+                    bus.setExtension(loader, TypeHelperClassLoader.class);\n+                }\n+            }\n+        }\n+        return loader;\n+    }\n+\n+\n+    public static class TypeHelperClassLoader extends ClassLoader {\n+        ConcurrentHashMap<String, Class<?>> defined = new ConcurrentHashMap<>();\n+\n+        TypeHelperClassLoader(ClassLoader parent) {\n+            super(parent);\n+        }\n+        public Class<?> lookupDefinedClass(String name) {\n+            return defined.get(name.replace('/', '.'));\n+        }\n+\n+        @Override\n+        protected Class<?> findClass(String name) throws ClassNotFoundException {\n+            if (name.endsWith(\"package-info\")) {\n+                return getParent().loadClass(name);\n+            }\n+            return super.findClass(name);\n+        }\n+\n+        public Class<?> defineClass(String name, byte[] bytes) {\n+            Class<?> ret = defined.get(name.replace('/', '.'));\n+            if (ret != null) {\n+                return ret;\n+            }\n+            if (name.endsWith(\"package-info\")) {\n+                Package p = super.getPackage(name.substring(0, name.length() - 13));\n+                if (p == null) {\n+                    definePackage(name.substring(0, name.length() - 13).replace('/', '.'),\n+                            null,\n+                            null,\n+                            null,\n+                            null,\n+                            null,\n+                            null,\n+                            null);\n+                }\n+            }\n+\n+            ret = super.defineClass(name.replace('/', '.'), bytes, 0, bytes.length);\n+            Class<?> tmpRet = defined.putIfAbsent(name.replace('/', '.'), ret);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTc0NDEy", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-531974412", "createdAt": "2020-11-17T02:22:46Z", "commit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyMjo0NlrOH0h2Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyMjo0NlrOH0h2Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MjU4Mg==", "bodyText": "Should we try to get the Classloader from bus?\nClassLoader classloader = bus.getExtension(ClassLoader.class); \n\n@rmannibucau wouldn't fallback to  Thread.currentThread().getContextClassLoader(); be more appropriate here?", "url": "https://github.com/apache/cxf/pull/721#discussion_r524842582", "createdAt": "2020-11-17T02:22:46Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.Bus;\n+\n+public class ClassLoaderProxyService implements ClassLoaderService {\n+    NamespaceClassCreator srv;\n+    public ClassLoaderProxyService(Bus bus) {\n+        this(new NamespaceClassGenerator(bus));\n+    }\n+    public ClassLoaderProxyService(NamespaceClassCreator srv) {\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Object createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        Class<?> cls = srv.createNamespaceWrapper(mcls, map);\n+        try {\n+            return cls.getConstructor(Map.class).newInstance(map);\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+    public class LoadFirst extends ClassLoaderProxyService {\n+        public LoadFirst(Bus bus) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTc0Nzg4", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-531974788", "createdAt": "2020-11-17T02:23:45Z", "commit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyMzo0NVrOH0h3kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyMzo0NVrOH0h3kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0Mjg5Ng==", "bodyText": "Probably better to use standard CXF logging facilities please", "url": "https://github.com/apache/cxf/pull/721#discussion_r524842896", "createdAt": "2020-11-17T02:23:45Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.Bus;\n+\n+public class ClassLoaderProxyService implements ClassLoaderService {\n+    NamespaceClassCreator srv;\n+    public ClassLoaderProxyService(Bus bus) {\n+        this(new NamespaceClassGenerator(bus));\n+    }\n+    public ClassLoaderProxyService(NamespaceClassCreator srv) {\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Object createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        Class<?> cls = srv.createNamespaceWrapper(mcls, map);\n+        try {\n+            return cls.getConstructor(Map.class).newInstance(map);\n+        } catch (Throwable e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTc1ODM3", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-531975837", "createdAt": "2020-11-17T02:26:40Z", "commit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyNjo0MFrOH0h7PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyNjo0MFrOH0h7PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MzgzNg==", "bodyText": "If I am not mistaken, ClassLoader already use synchronization or/and locking internally for loading classes (@rmannibucau please correct me if I am wrong), why do you need  synchronized here?", "url": "https://github.com/apache/cxf/pull/721#discussion_r524843836", "createdAt": "2020-11-17T02:26:40Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedNamespaceClassLoader.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+public class GeneratedNamespaceClassLoader implements NamespaceClassCreator {\n+    ClassLoader cl;\n+    GeneratedNamespaceClassLoader(ClassLoader cl) {\n+        this.cl = cl;\n+    }\n+    public synchronized Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTgxMDUx", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-531981051", "createdAt": "2020-11-17T02:41:41Z", "commit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo0MTo0MVrOH0iM_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo0MTo0MVrOH0iM_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0ODM4MA==", "bodyText": "Also the use of synchronized is not really justified, this class seems to have no state to take care of, why you need it?", "url": "https://github.com/apache/cxf/pull/721#discussion_r524848380", "createdAt": "2020-11-17T02:41:41Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/NamespaceClassGenerator.java", "diffHunk": "@@ -0,0 +1,450 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+\n+public class NamespaceClassGenerator extends ClassGeneratorClassLoader implements NamespaceClassCreator {\n+\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassGeneratorClassLoader.class);\n+    ASMHelper helper;\n+\n+    public NamespaceClassGenerator(Bus bus) {\n+        super(bus);\n+        helper = bus.getExtension(ASMHelper.class);\n+    }\n+\n+    @Override\n+    public synchronized Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTgyMjc0", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-531982274", "createdAt": "2020-11-17T02:45:27Z", "commit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo0NToyN1rOH0iRKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo0NToyN1rOH0iRKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0OTQ0OA==", "bodyText": "Seems like you could use bus.getExtension(ASMHelper.class), correct?", "url": "https://github.com/apache/cxf/pull/721#discussion_r524849448", "createdAt": "2020-11-17T02:45:27Z", "author": {"login": "reta"}, "path": "rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaFixedAnyImplGenerator.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.binding.corba.utils;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.ClassGeneratorClassLoader;\n+import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.ASMHelperImpl;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+\n+public class CorbaFixedAnyImplGenerator extends ClassGeneratorClassLoader {\n+\n+    public CorbaFixedAnyImplGenerator(Bus bus) {\n+        super(bus);\n+    }\n+    public Class<?> createFixedAnyClass() {\n+        //TODO move to bus.getExtension(ASMHelper.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTgzNTIx", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-531983521", "createdAt": "2020-11-17T02:48:57Z", "commit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo0ODo1N1rOH0iVAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo0ODo1N1rOH0iVAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1MDQzNA==", "bodyText": "Is the comment still relevant? It seems like you the correct classloader", "url": "https://github.com/apache/cxf/pull/721#discussion_r524850434", "createdAt": "2020-11-17T02:48:57Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/FactoryClassProxyService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import org.apache.cxf.Bus;\n+\n+public class FactoryClassProxyService implements FactoryClassCreator {\n+    FactoryClassCreator srv;\n+    public FactoryClassProxyService(Bus bus) {\n+        this(new FactoryClassGenerator(bus));\n+    }\n+    public FactoryClassProxyService(FactoryClassCreator srv) {\n+        super();\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Class<?> createFactory(Class<?> cls) {\n+        return srv.createFactory(cls);\n+    }\n+\n+    public class LoadFirst extends FactoryClassProxyService {\n+        public LoadFirst(ClassLoader cl) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTg0NDM4", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-531984438", "createdAt": "2020-11-17T02:51:47Z", "commit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo1MTo0N1rOH0iYWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo1MTo0N1rOH0iYWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1MTI5MQ==", "bodyText": "Is it still relevant comment?", "url": "https://github.com/apache/cxf/pull/721#discussion_r524851291", "createdAt": "2020-11-17T02:51:47Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/WrapperClassCreatorProxyService.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxws.spi;\n+\n+import java.util.Set;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.jaxws.WrapperClassGenerator;\n+import org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean;\n+import org.apache.cxf.service.model.InterfaceInfo;\n+\n+public class WrapperClassCreatorProxyService implements WrapperClassCreator {\n+    WrapperClassCreator srv;\n+    public WrapperClassCreatorProxyService(final Bus bus) {\n+        this(new WrapperClassGenerator(bus));\n+    }\n+    public WrapperClassCreatorProxyService(WrapperClassCreator srv) {\n+        super();\n+        this.srv = srv;\n+    }\n+\n+    @Override\n+    public Set<Class<?>> generate(Bus bus, JaxWsServiceFactoryBean fact, InterfaceInfo inf, boolean q) {\n+        return srv.generate(bus, fact, inf, q);\n+    }\n+\n+    public class LoadFirst extends WrapperClassCreatorProxyService {\n+        public LoadFirst(ClassLoader cl) {\n+            //TODO not sure here if I get class loader like that ???", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87acf2b00e538178b9f6fe6fa598645cd56b007a"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTgyMjQ2", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-533982246", "createdAt": "2020-11-19T00:10:11Z", "commit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDoxMDoxMlrOH2HYzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDoxMDoxMlrOH2HYzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwNjE4OQ==", "bodyText": "\ud83d\udc4d thank you", "url": "https://github.com/apache/cxf/pull/721#discussion_r526506189", "createdAt": "2020-11-19T00:10:12Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/util/StringUtils.java", "diffHunk": "@@ -160,4 +160,18 @@ static void byteToHex(byte b, StringBuilder sb) {\n         sb.append(HEX[(0xF0 & b) >> 4]);\n         sb.append(HEX[0x0F & b]);\n     }\n+\n+    public static String periodToSlashes(String s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTg1MDYz", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-533985063", "createdAt": "2020-11-19T00:17:11Z", "commit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDoxNzoxMVrOH2Hh3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDoxNzoxMVrOH2Hh3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwODUwOQ==", "bodyText": "Don't like that, but we probably need synchronized block here, the original static method createFixedAnyConstructor was declared static synchronized probably to protected against concurrent generation.", "url": "https://github.com/apache/cxf/pull/721#discussion_r526508509", "createdAt": "2020-11-19T00:17:11Z", "author": {"login": "reta"}, "path": "rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaAnyHelper.java", "diffHunk": "@@ -273,257 +267,19 @@ public static void extractPrimitiveFromAny(Any a, CorbaPrimitiveHandler primitiv\n     }\n \n     private static Any createFixedAny(ORB orb, Any any) {\n-        createFixedAnyConstructor();\n+        if (fixedAnyConstructor == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTg5ODg0", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-533989884", "createdAt": "2020-11-19T00:29:40Z", "commit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDoyOTo0MFrOH2HyOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDoyOTo0MFrOH2HyOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxMjY5OA==", "bodyText": "It should not be instance field anymore, could be instantiated in generate and filled along the way (probably needed to pass through as an argument to a few methods)", "url": "https://github.com/apache/cxf/pull/721#discussion_r526512698", "createdAt": "2020-11-19T00:29:40Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/WrapperClassGenerator.java", "diffHunk": "@@ -56,19 +59,18 @@\n import org.apache.cxf.service.model.SchemaInfo;\n import org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean;\n \n-public final class WrapperClassGenerator extends ASMHelper {\n+public final class WrapperClassGenerator extends ClassGeneratorClassLoader implements WrapperClassCreator {\n     public static final String DEFAULT_PACKAGE_NAME = \"defaultnamespace\";\n \n     private static final Logger LOG = LogUtils.getL7dLogger(WrapperClassGenerator.class);\n-    private Set<Class<?>> wrapperBeans = new LinkedHashSet<>();\n-    private InterfaceInfo interfaceInfo;\n+    private Set<Class<?>> wrapperBeans;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTkxODA4", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-533991808", "createdAt": "2020-11-19T00:34:35Z", "commit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozNDozNlrOH2H4hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozNDozNlrOH2H4hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNDMxMQ==", "bodyText": "Similarly to WrapperClassGenerator, we could probably don't need instance field but create the collection in place, wdyt?", "url": "https://github.com/apache/cxf/pull/721#discussion_r526514311", "createdAt": "2020-11-19T00:34:36Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/GeneratedWrapperClassLoader.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxws.spi;\n+\n+import java.lang.reflect.Method;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.util.PackageUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.cxf.jaxws.WrapperClassGenerator;\n+import org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean;\n+import org.apache.cxf.service.model.InterfaceInfo;\n+import org.apache.cxf.service.model.MessageInfo;\n+import org.apache.cxf.service.model.MessagePartInfo;\n+import org.apache.cxf.service.model.OperationInfo;\n+import org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean;\n+\n+public class GeneratedWrapperClassLoader implements WrapperClassCreator {\n+    private Set<Class<?>> wrapperBeans = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTkzNTU0", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-533993554", "createdAt": "2020-11-19T00:39:09Z", "commit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOTowOVrOH2H-dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOTowOVrOH2H-dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNTgyOA==", "bodyText": "Probably we should log the exception here (debug or trace), just to help with troubleshooting", "url": "https://github.com/apache/cxf/pull/721#discussion_r526515828", "createdAt": "2020-11-19T00:39:09Z", "author": {"login": "reta"}, "path": "rt/wsdl/src/main/java/org/apache/cxf/wsdl/ExtensionClassLoader.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.wsdl;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+\n+public class ExtensionClassLoader implements ExtensionClassCreator {\n+\n+    public ExtensionClassLoader() {\n+    }\n+    @Override\n+    public Class<?> createExtensionClass(Class<?> cls, QName qname, ClassLoader loader) {\n+        try {\n+            return ClassLoaderUtils.loadClass(cls.getName() + \"Extensibility\", ExtensionClassLoader.class);\n+        } catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTkzNjI2", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-533993626", "createdAt": "2020-11-19T00:39:19Z", "commit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOToxOVrOH2H-nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOToxOVrOH2H-nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNTg2OQ==", "bodyText": "Probably we should log the exception here (debug or trace), just to help with troubleshooting", "url": "https://github.com/apache/cxf/pull/721#discussion_r526515869", "createdAt": "2020-11-19T00:39:19Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedNamespaceClassLoader.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+\n+public class GeneratedNamespaceClassLoader implements NamespaceClassCreator {\n+    GeneratedNamespaceClassLoader() {\n+    }\n+    public synchronized Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        String postFix = \"\";\n+\n+        if (mcls.getName().contains(\"eclipse\")) {\n+            try {\n+                return ClassLoaderUtils.loadClass(\"org.apache.cxf.jaxb.EclipseNamespaceMapper\",\n+                        GeneratedNamespaceClassLoader.class);\n+            } catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTkzNjc2", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-533993676", "createdAt": "2020-11-19T00:39:24Z", "commit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOToyNFrOH2H-uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOToyNFrOH2H-uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNTg5OQ==", "bodyText": "Probably we should log the exception here (debug or trace), just to help with troubleshooting", "url": "https://github.com/apache/cxf/pull/721#discussion_r526515899", "createdAt": "2020-11-19T00:39:24Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedNamespaceClassLoader.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+\n+public class GeneratedNamespaceClassLoader implements NamespaceClassCreator {\n+    GeneratedNamespaceClassLoader() {\n+    }\n+    public synchronized Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map) {\n+        String postFix = \"\";\n+\n+        if (mcls.getName().contains(\"eclipse\")) {\n+            try {\n+                return ClassLoaderUtils.loadClass(\"org.apache.cxf.jaxb.EclipseNamespaceMapper\",\n+                        GeneratedNamespaceClassLoader.class);\n+            } catch (ClassNotFoundException e) {\n+            }\n+        } else if (mcls.getName().contains(\".internal\")) {\n+            postFix = \"Internal\";\n+        } else if (mcls.getName().contains(\"com.sun\")) {\n+            postFix = \"RI\";\n+        }\n+        try {\n+            return ClassLoaderUtils.loadClass(\"org.apache.cxf.jaxb.NamespaceMapper\" + postFix,\n+                    GeneratedNamespaceClassLoader.class);\n+        } catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTkzNzI4", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-533993728", "createdAt": "2020-11-19T00:39:34Z", "commit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOTozNFrOH2H_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDozOTozNFrOH2H_Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNTk3MA==", "bodyText": "Probably we should log the exception here (debug or trace), just to help with troubleshooting", "url": "https://github.com/apache/cxf/pull/721#discussion_r526515970", "createdAt": "2020-11-19T00:39:34Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/FactoryClassLoader.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.jaxb;\n+\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+\n+public class FactoryClassLoader implements FactoryClassCreator {\n+    public FactoryClassLoader() {\n+    }\n+    @Override\n+    public Class<?> createFactory(Class<?> cls) {\n+        String newClassName = cls.getName() + \"Factory\";\n+        try {\n+            return ClassLoaderUtils.loadClass(newClassName, FactoryClassLoader.class);\n+        } catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTk0MjY0", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-533994264", "createdAt": "2020-11-19T00:41:03Z", "commit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0MTowM1rOH2IA-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0MTowM1rOH2IA-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNjQ3NQ==", "bodyText": "Please log the exception here (debug or trace), just to help with troubleshooting (no e.printStackTrace(); please)", "url": "https://github.com/apache/cxf/pull/721#discussion_r526516475", "createdAt": "2020-11-19T00:41:03Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperClassLoader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.databinding.WrapperHelper;\n+\n+public class WrapperHelperClassLoader implements WrapperHelperCreator {\n+    public WrapperHelperClassLoader() {\n+    }\n+\n+    @Override\n+    public WrapperHelper compile(Bus bus, Class<?> wrapperType, Method[] setMethods, Method[] getMethods,\n+                                 Method[] jaxbMethods, Field[] fields, Object objectFactory) {\n+\n+        int count = 1;\n+        String newClassName = wrapperType.getName() + \"_WrapperTypeHelper\" + count;\n+\n+        Class<?> cls = null;\n+        try {\n+            cls = ClassLoaderUtils.loadClass(newClassName, WrapperHelperClassLoader.class);\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTk0NDg1", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-533994485", "createdAt": "2020-11-19T00:41:39Z", "commit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0MTo0MFrOH2IBxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0MTo0MFrOH2IBxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNjY3OA==", "bodyText": "Probably we should log the exception here (debug or trace), just to help with troubleshooting", "url": "https://github.com/apache/cxf/pull/721#discussion_r526516678", "createdAt": "2020-11-19T00:41:40Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/GeneratedWrapperClassLoader.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxws.spi;\n+\n+import java.lang.reflect.Method;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.util.PackageUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.cxf.jaxws.WrapperClassGenerator;\n+import org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean;\n+import org.apache.cxf.service.model.InterfaceInfo;\n+import org.apache.cxf.service.model.MessageInfo;\n+import org.apache.cxf.service.model.MessagePartInfo;\n+import org.apache.cxf.service.model.OperationInfo;\n+import org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean;\n+\n+public class GeneratedWrapperClassLoader implements WrapperClassCreator {\n+    private Set<Class<?>> wrapperBeans = new LinkedHashSet<>();\n+    private InterfaceInfo interfaceInfo;\n+    private JaxWsServiceFactoryBean factory;\n+\n+    public GeneratedWrapperClassLoader() {\n+    }\n+\n+    @Override\n+    public Set<Class<?>> generate(Bus bus, JaxWsServiceFactoryBean fact, InterfaceInfo ii, boolean q) {\n+        factory = fact;\n+        this.interfaceInfo = ii;\n+        for (OperationInfo opInfo : interfaceInfo.getOperations()) {\n+            if (opInfo.isUnwrappedCapable()) {\n+                Method method = (Method)opInfo.getProperty(ReflectionServiceFactoryBean.METHOD);\n+                if (method == null) {\n+                    continue;\n+                }\n+                MessagePartInfo inf = opInfo.getInput().getFirstMessagePart();\n+                if (inf.getTypeClass() == null) {\n+                    MessageInfo messageInfo = opInfo.getUnwrappedOperation().getInput();\n+                    createWrapperClass(inf,\n+                            messageInfo,\n+                            opInfo,\n+                            method,\n+                            true);\n+                }\n+                MessageInfo messageInfo = opInfo.getUnwrappedOperation().getOutput();\n+                if (messageInfo != null) {\n+                    inf = opInfo.getOutput().getFirstMessagePart();\n+                    if (inf.getTypeClass() == null) {\n+                        createWrapperClass(inf,\n+                                messageInfo,\n+                                opInfo,\n+                                method,\n+                                false);\n+                    }\n+                }\n+            }\n+        }\n+        return wrapperBeans;\n+    }\n+\n+    private void createWrapperClass(MessagePartInfo wrapperPart,\n+                                    MessageInfo messageInfo,\n+                                    OperationInfo op,\n+                                    Method method,\n+                                    boolean isRequest) {\n+        boolean anonymous = factory.getAnonymousWrapperTypes();\n+\n+        String pkg = getPackageName(method) + \".jaxws_asm\" + (anonymous ? \"_an\" : \"\");\n+        String className = pkg + \".\"\n+                + StringUtils.capitalize(op.getName().getLocalPart());\n+        if (!isRequest) {\n+            className = className + \"Response\";\n+        }\n+\n+        Class<?> clz = null;\n+        try {\n+            clz = ClassLoaderUtils.loadClass(className, GeneratedWrapperClassLoader.class);\n+        } catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTk0NTg4", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-533994588", "createdAt": "2020-11-19T00:41:55Z", "commit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0MTo1NVrOH2ICKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0MTo1NVrOH2ICKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNjc3OA==", "bodyText": "Probably we should log the exception here (debug or trace), just to help with troubleshooting", "url": "https://github.com/apache/cxf/pull/721#discussion_r526516778", "createdAt": "2020-11-19T00:41:55Z", "author": {"login": "reta"}, "path": "rt/frontend/simple/src/main/java/org/apache/cxf/endpoint/dynamic/ExceptionClassLoader.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.endpoint.dynamic;\n+\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+\n+public class ExceptionClassLoader implements ExceptionClassCreator {\n+\n+    public ExceptionClassLoader() {\n+    }\n+\n+    @Override\n+    public Class<?> createExceptionClass(Class<?> bean) {\n+        String newClassName = bean.getName() + \"_Exception\";\n+        try {\n+            return ClassLoaderUtils.loadClass(newClassName, ExceptionClassLoader.class);\n+        } catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b3af80f23e1caa22e0cad16f34c471109e4af3"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MTIyODcx", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-536122871", "createdAt": "2020-11-22T22:33:49Z", "commit": {"oid": "3f43af940b62b4c7aaa8a282b394480718c071be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMjozMzo0OVrOH376UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMjozMzo0OVrOH376UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQxNTMxMw==", "bodyText": "Please catch Throwable here to cover XxxError (like VerifyError fe)", "url": "https://github.com/apache/cxf/pull/721#discussion_r528415313", "createdAt": "2020-11-22T22:33:49Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperClassLoader.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.GeneratedClassClassLoader;\n+import org.apache.cxf.databinding.WrapperHelper;\n+\n+public class WrapperHelperClassLoader extends GeneratedClassClassLoader implements WrapperHelperCreator {\n+    public WrapperHelperClassLoader(Bus bus) {\n+        super(bus);\n+    }\n+\n+    @Override\n+    public WrapperHelper compile(Class<?> wrapperType, Method[] setMethods, Method[] getMethods,\n+                                 Method[] jaxbMethods, Field[] fields, Object objectFactory) {\n+\n+        int count = 1;\n+        String newClassName = wrapperType.getName() + \"_WrapperTypeHelper\" + count;\n+\n+        Class<?> cls = loadClass(newClassName, WrapperHelperClassLoader.class);\n+        while (cls != null) {\n+            try {\n+                WrapperHelper helper = WrapperHelper.class.cast(cls.getDeclaredConstructor().newInstance());\n+                if (!helper.getSignature().equals(WrapperHelperCompiler.computeSignature(setMethods, getMethods))) {\n+                    count++;\n+                    newClassName = wrapperType.getName() + \"_WrapperTypeHelper\" + count;\n+                    cls = loadClass(newClassName, WrapperHelperClassLoader.class);\n+                } else {\n+                    return helper;\n+                }\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f43af940b62b4c7aaa8a282b394480718c071be"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b32d45e5f61fdae4f2e615efca7910d2aeedf577", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/b32d45e5f61fdae4f2e615efca7910d2aeedf577", "committedDate": "2020-11-24T09:15:37Z", "message": "[cxf-8340] add precompiled class for Graalvm native support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5072cc99b31bdf8b01cc3eccee5c85184597995c", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/5072cc99b31bdf8b01cc3eccee5c85184597995c", "committedDate": "2020-11-24T09:15:38Z", "message": "move findClass outside of generation class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9a8be7241c621988b2ed48754bf9f32a17dc09f", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/f9a8be7241c621988b2ed48754bf9f32a17dc09f", "committedDate": "2020-11-24T09:15:39Z", "message": "start big refactoring to have ASMHelper as SPI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cca63d573bdc0d13d6e27d2c42b65578edc08a20", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/cca63d573bdc0d13d6e27d2c42b65578edc08a20", "committedDate": "2020-11-24T09:15:41Z", "message": "start to remove all static in ASMHelper and use instance instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d55e56af942c9038e484a544470fa53e8fec876", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/8d55e56af942c9038e484a544470fa53e8fec876", "committedDate": "2020-11-24T09:15:41Z", "message": "implement the target for JAXBUtils and createNamespaceWrapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73c4b20cd0e00d8c5acb30e3e195467379cf7017", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/73c4b20cd0e00d8c5acb30e3e195467379cf7017", "committedDate": "2020-11-24T09:15:42Z", "message": "migrate all class except corba to support injection of pre compiled class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7071a4a750b0f2c6e6090cd87754c68e03181993", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/7071a4a750b0f2c6e6090cd87754c68e03181993", "committedDate": "2020-11-24T09:15:43Z", "message": "fix missing part"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6af30b173575fcfa80758cc6307822c9d132eec1", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/6af30b173575fcfa80758cc6307822c9d132eec1", "committedDate": "2020-11-24T09:15:44Z", "message": "fix iinjection and few test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a309473dc425ecc95289ec7c7f71dae31f48cc1", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/7a309473dc425ecc95289ec7c7f71dae31f48cc1", "committedDate": "2020-11-24T09:15:45Z", "message": "fix missing bus"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f3e997ef39938dca53de8cdce4a7fe70bb5ba07", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/6f3e997ef39938dca53de8cdce4a7fe70bb5ba07", "committedDate": "2020-11-24T09:15:46Z", "message": "fix missing bus"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "566c60bf08ec57f4339fc730f86ffc9b53405ae2", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/566c60bf08ec57f4339fc730f86ffc9b53405ae2", "committedDate": "2020-11-24T09:15:46Z", "message": "add exception creator for simple rt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff4e2fc79ab345d9b73967e4c87818155a8f4427", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/ff4e2fc79ab345d9b73967e4c87818155a8f4427", "committedDate": "2020-11-24T09:15:47Z", "message": "migrate corba too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22f578fb84e52b510dfda0c18e675aa72eb356c2", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/22f578fb84e52b510dfda0c18e675aa72eb356c2", "committedDate": "2020-11-24T09:15:48Z", "message": "fucking syntax issue because no auto format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4559be905d54c7860b4d8072ee7fe00a7d35aa0", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/d4559be905d54c7860b4d8072ee7fe00a7d35aa0", "committedDate": "2020-11-24T09:15:49Z", "message": "add a test for ASMHelper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd05aafa40434f0fbf577eb0b016d67f9a48b937", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/cd05aafa40434f0fbf577eb0b016d67f9a48b937", "committedDate": "2020-11-24T09:15:50Z", "message": "add debug dump of ASMHelper class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a13bf228e42911eca4e39d5686265abccf5d29e", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/2a13bf228e42911eca4e39d5686265abccf5d29e", "committedDate": "2020-11-24T09:15:51Z", "message": "fix bug with singleton not reset"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f73ad6359ea57b851f27d5d663fd9d62547a46b7", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/f73ad6359ea57b851f27d5d663fd9d62547a46b7", "committedDate": "2020-11-24T09:15:51Z", "message": "disable dump of class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d1e6d55559ff25cd9bee6b69e9727b20d82eea6", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/2d1e6d55559ff25cd9bee6b69e9727b20d82eea6", "committedDate": "2020-11-24T09:15:53Z", "message": "integrate partially patch of romain and remove unneeded param and import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "953d82cf8ae9141b849103be5f172cb2083bef1b", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/953d82cf8ae9141b849103be5f172cb2083bef1b", "committedDate": "2020-11-24T09:15:53Z", "message": "fix load of corba"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f96a756457a1d34da66f6c49589febe23e144840", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/f96a756457a1d34da66f6c49589febe23e144840", "committedDate": "2020-11-24T09:15:55Z", "message": "refactor to follow the reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1cdacbcb1d4c2473bf3a4f40ef634ac512c05bd", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/a1cdacbcb1d4c2473bf3a4f40ef634ac512c05bd", "committedDate": "2020-11-24T09:15:56Z", "message": "second pass of review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efcebf570c47a7e7704e0773b08a584e017eb992", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/efcebf570c47a7e7704e0773b08a584e017eb992", "committedDate": "2020-11-24T09:15:56Z", "message": "fix build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e83b948fe43429f84f3fac3b1d2ffd9fb7aa3cb4", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/e83b948fe43429f84f3fac3b1d2ffd9fb7aa3cb4", "committedDate": "2020-11-24T09:15:58Z", "message": "fix style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95f81e4bb7affafa552556ba9afd0ad0ecac1f3e", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/95f81e4bb7affafa552556ba9afd0ad0ecac1f3e", "committedDate": "2020-11-24T09:15:59Z", "message": "fix visitMaxs and catch throwable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04cf7106d8c54d645216d484722148709a48d525", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/04cf7106d8c54d645216d484722148709a48d525", "committedDate": "2020-11-24T09:15:59Z", "message": "fix corba generation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52d91bb45b8fe384e576a31c055a0c2d2e4b6185", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/52d91bb45b8fe384e576a31c055a0c2d2e4b6185", "committedDate": "2020-11-24T09:01:53Z", "message": "fix corba generation"}, "afterCommit": {"oid": "04cf7106d8c54d645216d484722148709a48d525", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/04cf7106d8c54d645216d484722148709a48d525", "committedDate": "2020-11-24T09:15:59Z", "message": "fix corba generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f0b35ccccc19b4275764c2704845f3f99397a6a", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/6f0b35ccccc19b4275764c2704845f3f99397a6a", "committedDate": "2020-11-25T22:14:59Z", "message": "use classGeneratorClassLoader class loader instead o thread one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7729b6c5db63b78f278ce179bdb8faa0236d79ab", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/7729b6c5db63b78f278ce179bdb8faa0236d79ab", "committedDate": "2020-11-27T20:09:49Z", "message": "add a static instant to hadle multiple bus"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6af47dd4c626b290cdd79bb5b35b6ab76e8a4eb", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/c6af47dd4c626b290cdd79bb5b35b6ab76e8a4eb", "committedDate": "2020-11-27T21:41:58Z", "message": "rollback class loading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e9e946c365340e4c96df61c01d6347c83e78052", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/3e9e946c365340e4c96df61c01d6347c83e78052", "committedDate": "2020-11-28T16:09:17Z", "message": "handle sync as before"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e57e89ada4c52fe11e4e14f3db5d2bfd8bd991ac", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/e57e89ada4c52fe11e4e14f3db5d2bfd8bd991ac", "committedDate": "2020-11-29T08:56:12Z", "message": "fix unit test with badASM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b56890eac545b7b323cafbc9cd14299670ed5e5c", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/b56890eac545b7b323cafbc9cd14299670ed5e5c", "committedDate": "2020-11-29T10:02:15Z", "message": "add a unit test for precompiled class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNDY0NDMx", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-540464431", "createdAt": "2020-11-29T10:03:43Z", "commit": {"oid": "b56890eac545b7b323cafbc9cd14299670ed5e5c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxMDowMzo0NFrOH7iCJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxMDowMzo0NFrOH7iCJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE4NTYzOA==", "bodyText": "shouldnt all this glue code be in \"main\" instead of test to be reusable just by setting a few extensions on its bus?", "url": "https://github.com/apache/cxf/pull/721#discussion_r532185638", "createdAt": "2020-11-29T10:03:44Z", "author": {"login": "rmannibucau"}, "path": "rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/WrapperNamespaceClassGeneratorTest.java", "diffHunk": "@@ -119,5 +126,170 @@ public void testForXmlList() throws Exception {\n         assertTrue(\"The generated response wrapper class is not correct\", bout.toString().contains(expected));\n \n     }\n+    public class CustomClassLoader extends ClassLoader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b56890eac545b7b323cafbc9cd14299670ed5e5c"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2bf7b48be57a992c6ad993a3d1c1628a7d179de", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/e2bf7b48be57a992c6ad993a3d1c1628a7d179de", "committedDate": "2020-11-30T18:20:36Z", "message": "add capture system and a unit test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08ed6d5c7281089727bde3018a6daf515068b206", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/08ed6d5c7281089727bde3018a6daf515068b206", "committedDate": "2020-11-30T10:52:58Z", "message": "add capture system to save and restore generated class"}, "afterCommit": {"oid": "e2bf7b48be57a992c6ad993a3d1c1628a7d179de", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/e2bf7b48be57a992c6ad993a3d1c1628a7d179de", "committedDate": "2020-11-30T18:20:36Z", "message": "add capture system and a unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "525d2dd8305f6830a6b53cf9582911cc4671720c", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/525d2dd8305f6830a6b53cf9582911cc4671720c", "committedDate": "2020-11-30T23:49:23Z", "message": "fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNDQxNTAw", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-541441500", "createdAt": "2020-12-01T02:22:53Z", "commit": {"oid": "525d2dd8305f6830a6b53cf9582911cc4671720c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjoyMjo1M1rOH8VlVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjoyMjo1M1rOH8VlVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAzMDIyOA==", "bodyText": "This extension point is not used by class generators but class loaders (GeneratedClassClassLoader & ClassGeneratorClassLoader). I think GeneratedClassClassLoaderCapture would be longer and more descriptive name, wdyt?", "url": "https://github.com/apache/cxf/pull/721#discussion_r533030228", "createdAt": "2020-12-01T02:22:53Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorCapture.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+public interface ClassGeneratorCapture {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525d2dd8305f6830a6b53cf9582911cc4671720c"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNDQ0NTk0", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-541444594", "createdAt": "2020-12-01T02:31:15Z", "commit": {"oid": "525d2dd8305f6830a6b53cf9582911cc4671720c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjozMToxNVrOH8Vvmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjozMToxNVrOH8Vvmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAzMjg1OA==", "bodyText": "I don't think you need this method, is it supposed to be used outside of tests?", "url": "https://github.com/apache/cxf/pull/721#discussion_r533032858", "createdAt": "2020-12-01T02:31:15Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedClassClassLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+\n+public class GeneratedClassClassLoader {\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassLoaderProxyService.class);\n+    protected final Bus bus;\n+\n+    public GeneratedClassClassLoader(Bus bus) {\n+        this.bus = bus;\n+    }\n+    protected Class<?> findClass(String className, Class<?> callingClass) {\n+        ClassLoader cl = getClassLoader();\n+        try {\n+            return cl.loadClass(className);\n+        } catch (ClassNotFoundException e) {\n+            //ignore and try with other class loader\n+        }\n+        try {\n+            return ClassLoaderUtils.loadClass(className, callingClass);\n+        } catch (ClassNotFoundException e) {\n+            LOG.fine(\"Failed to load class :\" + e.toString());\n+        }\n+        return null;\n+    }\n+    public TypeHelperClassLoader getClassLoader() {\n+        TypeHelperClassLoader loader = bus.getExtension(TypeHelperClassLoader.class);\n+        if (loader == null) {\n+            loader = bus.getExtension(TypeHelperClassLoader.class);\n+            if (loader == null) {\n+                ClassLoader parent = bus.getExtension(ClassLoader.class);\n+                if (parent == null) {\n+                    parent = Thread.currentThread().getContextClassLoader();\n+                }\n+                loader = new TypeHelperClassLoader(parent);\n+                bus.setExtension(loader, TypeHelperClassLoader.class);\n+            }\n+        }\n+        return loader;\n+    }\n+\n+    public void restore(ClassGeneratorCapture capture) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525d2dd8305f6830a6b53cf9582911cc4671720c"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3861e867dd74d8a78498a113de705faa23ee1b55", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/3861e867dd74d8a78498a113de705faa23ee1b55", "committedDate": "2020-12-02T18:47:53Z", "message": "remove restore method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45452327bd64c09b8d93095bba881ee03f3b3fc1", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/45452327bd64c09b8d93095bba881ee03f3b3fc1", "committedDate": "2020-12-03T20:32:20Z", "message": "rename capture"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f19e12dcd48f7328c0724b48fe11887651e95a8c", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/f19e12dcd48f7328c0724b48fe11887651e95a8c", "committedDate": "2020-12-03T21:18:33Z", "message": "add capture on loadClass for loader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NjE2OTMy", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-544616932", "createdAt": "2020-12-04T02:41:13Z", "commit": {"oid": "f19e12dcd48f7328c0724b48fe11887651e95a8c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo0MToxM1rOH--P8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo0MToxM1rOH--P8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MzY1MQ==", "bodyText": "Please remove qualified and interfaceInfo from class members, pass them as arguments along the chain.", "url": "https://github.com/apache/cxf/pull/721#discussion_r535793651", "createdAt": "2020-12-04T02:41:13Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/WrapperClassGenerator.java", "diffHunk": "@@ -109,7 +109,11 @@ private String getPackageName(Method method) {\n         return list;\n     }\n \n-    public Set<Class<?>> generate() {\n+    public Set<Class<?>> generate(JaxWsServiceFactoryBean factory, InterfaceInfo ii, boolean q) {\n+        this.qualified = q;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f19e12dcd48f7328c0724b48fe11887651e95a8c"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68f9955a2ea54a11e76b3e1224f426f2d074db40", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/68f9955a2ea54a11e76b3e1224f426f2d074db40", "committedDate": "2020-12-04T07:18:27Z", "message": "switch property to arg of method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NjcwMzA5", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-545670309", "createdAt": "2020-12-06T04:37:27Z", "commit": {"oid": "68f9955a2ea54a11e76b3e1224f426f2d074db40"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNDozNzoyN1rOIAFFFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNDozNzoyN1rOIAFFFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk1NDEzNA==", "bodyText": "This pattern of changing class state during method execution is the cause of test failures, could you please replace class members\n        this.wrapperType = wt;\n        this.setMethods = setters;\n        this.getMethods = getters;\n        this.jaxbMethods = jms;\n        this.fields = fs;\n\nwith arguments (or move some of them into constructor please)?", "url": "https://github.com/apache/cxf/pull/721#discussion_r536954134", "createdAt": "2020-12-06T04:37:27Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java", "diffHunk": "@@ -24,78 +24,56 @@\n \n import javax.xml.bind.JAXBElement;\n \n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.ClassGeneratorClassLoader;\n import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+import org.apache.cxf.common.util.StringUtils;\n import org.apache.cxf.databinding.WrapperHelper;\n \n-final class WrapperHelperCompiler extends ASMHelper {\n-\n-\n-    final Class<?> wrapperType;\n-    final Method[] setMethods;\n-    final Method[] getMethods;\n-    final Method[] jaxbMethods;\n-    final Field[] fields;\n-    final Object objectFactory;\n-    final ClassWriter cw;\n-\n-    private WrapperHelperCompiler(Class<?> wrapperType,\n-                                  Method[] setMethods,\n-                                  Method[] getMethods,\n-                                  Method[] jaxbMethods,\n-                                  Field[] fields,\n-                                  Object objectFactory) {\n-        this.wrapperType = wrapperType;\n-        this.setMethods = setMethods;\n-        this.getMethods = getMethods;\n-        this.jaxbMethods = jaxbMethods;\n-        this.fields = fields;\n-        this.objectFactory = objectFactory;\n-        cw = createClassWriter();\n-    }\n-\n-    static WrapperHelper compileWrapperHelper(Class<?> wrapperType,\n-                                              Method[] setMethods,\n-                                              Method[] getMethods,\n-                                              Method[] jaxbMethods,\n-                                              Field[] fields,\n-                                              Object objectFactory) {\n-        try {\n-            return new WrapperHelperCompiler(wrapperType,\n-                                        setMethods,\n-                                        getMethods,\n-                                        jaxbMethods,\n-                                        fields,\n-                                        objectFactory).compile();\n-\n-        } catch (Throwable t) {\n-            // Some error - probably a bad version of ASM or similar\n-        }\n-        return null;\n-    }\n-\n+public final class WrapperHelperCompiler extends ClassGeneratorClassLoader implements WrapperHelperCreator {\n \n+    private Class<?> wrapperType;\n+    private Method[] setMethods;\n+    private Method[] getMethods;\n+    private Method[] jaxbMethods;\n+    private Field[] fields;\n+    private ASMHelper.ClassWriter cw;\n+    private ASMHelper asmhelper;\n \n+    WrapperHelperCompiler(Bus bus) {\n+        super(bus);\n+    }\n \n+    public WrapperHelper compile(Class<?> wt, Method[] setters,\n+                                 Method[] getters, Method[] jms,\n+                                 Field[] fs, Object objectFactory) {\n+        this.wrapperType = wt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f9955a2ea54a11e76b3e1224f426f2d074db40"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "150c9bea88d2994e92a5288f38e90b8e8b0fe41e", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/150c9bea88d2994e92a5288f38e90b8e8b0fe41e", "committedDate": "2020-12-06T18:22:37Z", "message": "move field to parameter because singleton share same instance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "170a74260aff7d8a2bd52bcd235a28c0714d355a", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/170a74260aff7d8a2bd52bcd235a28c0714d355a", "committedDate": "2020-12-06T19:31:56Z", "message": "init helper in ctor to avoid new init of helper during build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/72930d287d6e94e6ed742331bbf4f0d2ce645129", "committedDate": "2020-12-07T10:36:47Z", "message": "add javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MzkyOTI1", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-549392925", "createdAt": "2020-12-10T16:41:57Z", "commit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo0MTo1N1rOIDSvxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoxNzozNVrOIDW_Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMyMzc4MA==", "bodyText": "Please declare srv as private final", "url": "https://github.com/apache/cxf/pull/721#discussion_r540323780", "createdAt": "2020-12-10T16:41:57Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassLoaderProxyService.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.logging.LogUtils;\n+\n+public class ClassLoaderProxyService implements ClassLoaderService {\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassLoaderProxyService.class);\n+    NamespaceClassCreator srv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMyOTYxMg==", "bodyText": "Minor, may be better name for this method would be capture, wdyt?", "url": "https://github.com/apache/cxf/pull/721#discussion_r540329612", "createdAt": "2020-12-10T16:49:23Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/GeneratedClassClassLoaderCapture.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.common.spi;\n+\n+/** Implement this interface to store class generated in order during build phase\n+ *  inject it back before runtime to avoid class generation.\n+ *  produce dot class file thanks to save method.\n+ *  You can check WrapperNamespaceClassGeneratorTest.testGeneratedFirst for usage\n+ *  Here is list of extensions to set in order to avoid class loading after generation during build time.\n+ *  bus.setExtension(new WrapperHelperClassLoader(bus), WrapperHelperCreator.class);\n+ *  bus.setExtension(new ExtensionClassLoader(bus), ExtensionClassCreator.class);\n+ *  bus.setExtension(new ExceptionClassLoader(bus), ExceptionClassCreator.class);\n+ *  bus.setExtension(new GeneratedWrapperClassLoader(bus), WrapperClassCreator.class);\n+ *  bus.setExtension(new FactoryClassLoader(bus), FactoryClassCreator.class);\n+ *  bus.setExtension(new GeneratedNamespaceClassLoader(bus), NamespaceClassCreator.class);\n+ * @author olivier dufour\n+ */\n+public interface GeneratedClassClassLoaderCapture {\n+    void save(String className, byte[] bytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzNzg0MQ==", "bodyText": "We have this method createNamespaceWrapper here and in ClassLoaderService. The name is the same but those do slightly different things. May be we could rename this one to createNamespaceWrapperClass or  the one in ClassLoaderService to createNamespaceWrapperInstance, wdy?", "url": "https://github.com/apache/cxf/pull/721#discussion_r540337841", "createdAt": "2020-12-10T16:59:56Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/NamespaceClassCreator.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+\n+/**\n+ * SPI interface to implement the proxy defining logic.\n+ * It enables to switch from unsafe to classloader logic for instance for java >= 9.\n+ */\n+public interface NamespaceClassCreator {\n+\n+    Class<?> createNamespaceWrapper(Class<?> mcls, Map<String, String> map);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzODQzMw==", "bodyText": "Please declare helper as private final", "url": "https://github.com/apache/cxf/pull/721#discussion_r540338433", "createdAt": "2020-12-10T17:00:42Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/spi/NamespaceClassGenerator.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+\n+public class NamespaceClassGenerator extends ClassGeneratorClassLoader implements NamespaceClassCreator {\n+\n+    private static final Logger LOG = LogUtils.getL7dLogger(ClassGeneratorClassLoader.class);\n+    ASMHelper helper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0Nzg2Nw==", "bodyText": "Please remove this method (setBadASM), it is internal impl only and is not used anywhere", "url": "https://github.com/apache/cxf/pull/721#discussion_r540347867", "createdAt": "2020-12-10T17:13:33Z", "author": {"login": "reta"}, "path": "core/src/main/java/org/apache/cxf/common/util/ASMHelper.java", "diffHunk": "@@ -19,447 +19,29 @@\n \n package org.apache.cxf.common.util;\n \n-import java.lang.ref.WeakReference;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.GenericArrayType;\n import java.lang.reflect.Method;\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.TypeVariable;\n-import java.lang.reflect.WildcardType;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n \n-import org.apache.cxf.common.classloader.ClassLoaderUtils;\n import org.apache.cxf.common.util.ReflectionInvokationHandler.Optional;\n import org.apache.cxf.common.util.ReflectionInvokationHandler.UnwrapParam;\n import org.apache.cxf.common.util.ReflectionInvokationHandler.WrapReturn;\n \n-public class ASMHelper {\n-    protected static final Map<Class<?>, String> PRIMITIVE_MAP = new HashMap<>();\n-    protected static final Map<Class<?>, String> NONPRIMITIVE_MAP = new HashMap<>();\n-    protected static final Map<Class<?>, Integer> PRIMITIVE_ZERO_MAP = new HashMap<>();\n \n-    protected static final Map<ClassLoader, WeakReference<TypeHelperClassLoader>> LOADER_MAP\n-        = new WeakIdentityHashMap<>();\n-    protected static final Map<Class<?>, WeakReference<TypeHelperClassLoader>> CLASS_MAP\n-        = new WeakIdentityHashMap<>();\n+public interface ASMHelper {\n+    String getClassCode(Class<?> cl);\n+    String getClassCode(java.lang.reflect.Type type);\n+    ClassWriter createClassWriter();\n+    ASMType getType(String type);\n+    Label createLabel();\n+    OpcodesProxy getOpCodes();\n+    Class<?> getASMClass() throws ClassNotFoundException;\n+    String getMethodSignature(Method m);\n+    String getNonPrimitive(Class<?> tp);\n+    String getPrimitive(Class<?> tp);\n+    void setBadASM(boolean b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0ODY0Mg==", "bodyText": "Please use Method m = helper.getClass().getMethod(\"setBadASM\", Boolean.TYPE);", "url": "https://github.com/apache/cxf/pull/721#discussion_r540348642", "createdAt": "2020-12-10T17:14:37Z", "author": {"login": "reta"}, "path": "systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ClientServerMiscTest.java", "diffHunk": "@@ -419,9 +420,11 @@ public void testWrappedHolderOutNull() throws Exception {\n     }\n \n     private void setASM(boolean b) throws Exception {\n-        Field f = ASMHelper.class.getDeclaredField(\"badASM\");\n-        ReflectionUtil.setAccessible(f);\n-        f.set(null, !b);\n+\n+        ASMHelper helper = getBus().getExtension(ASMHelper.class);\n+        Method m = ASMHelper.class.getMethod(\"setBadASM\", Boolean.TYPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2Mzk2Mw==", "bodyText": "It seems like we did shortcut here by not passing the bus, could you please add Bus to method arguments? The bus instance is present in all flows, just needs to be passed around: CorbaConduit / CorbaDestination / CorbaServerConduit would need to be modified to accept Bus in constructors, and in CorbaStreamInInterceptor you could get the bus from exchange instance available in place.", "url": "https://github.com/apache/cxf/pull/721#discussion_r540363963", "createdAt": "2020-12-10T17:36:16Z", "author": {"login": "reta"}, "path": "rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaAnyHelper.java", "diffHunk": "@@ -272,258 +266,20 @@ public static void extractPrimitiveFromAny(Any a, CorbaPrimitiveHandler primitiv\n         IDL_TO_SCHEMA_TYPES.put(CorbaConstants.NT_CORBA_ANY, W3CConstants.NT_SCHEMA_ANYTYPE);\n     }\n \n-    private static Any createFixedAny(ORB orb, Any any) {\n-        createFixedAnyConstructor();\n+    private static synchronized Any createFixedAny(ORB orb, Any any) {\n+        if (fixedAnyConstructor == null) {\n+            CorbaFixedAnyImplGenerator corbaFixedAnyImplGenerator = new CorbaFixedAnyImplGenerator(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NTk1Ng==", "bodyText": "Please declare srv as private final", "url": "https://github.com/apache/cxf/pull/721#discussion_r540365956", "createdAt": "2020-12-10T17:38:39Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/FactoryClassProxyService.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import org.apache.cxf.Bus;\n+\n+public class FactoryClassProxyService implements FactoryClassCreator {\n+    FactoryClassCreator srv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3NjM0OA==", "bodyText": "I think we have to rename it to WrapperHelperClassGenerator to be on par with WrapperHelperClassLoader and others: FactoryClassGenerator / FactoryClassLoader, etc.", "url": "https://github.com/apache/cxf/pull/721#discussion_r540376348", "createdAt": "2020-12-10T17:52:22Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperCompiler.java", "diffHunk": "@@ -24,78 +24,43 @@\n \n import javax.xml.bind.JAXBElement;\n \n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.ClassGeneratorClassLoader;\n import org.apache.cxf.common.util.ASMHelper;\n+import org.apache.cxf.common.util.OpcodesProxy;\n+import org.apache.cxf.common.util.StringUtils;\n import org.apache.cxf.databinding.WrapperHelper;\n \n-final class WrapperHelperCompiler extends ASMHelper {\n-\n-\n-    final Class<?> wrapperType;\n-    final Method[] setMethods;\n-    final Method[] getMethods;\n-    final Method[] jaxbMethods;\n-    final Field[] fields;\n-    final Object objectFactory;\n-    final ClassWriter cw;\n-\n-    private WrapperHelperCompiler(Class<?> wrapperType,\n-                                  Method[] setMethods,\n-                                  Method[] getMethods,\n-                                  Method[] jaxbMethods,\n-                                  Field[] fields,\n-                                  Object objectFactory) {\n-        this.wrapperType = wrapperType;\n-        this.setMethods = setMethods;\n-        this.getMethods = getMethods;\n-        this.jaxbMethods = jaxbMethods;\n-        this.fields = fields;\n-        this.objectFactory = objectFactory;\n-        cw = createClassWriter();\n-    }\n+public final class WrapperHelperCompiler extends ClassGeneratorClassLoader implements WrapperHelperCreator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3Njc3Ng==", "bodyText": "Please declare srv as private final", "url": "https://github.com/apache/cxf/pull/721#discussion_r540376776", "createdAt": "2020-12-10T17:53:01Z", "author": {"login": "reta"}, "path": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperProxyService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxb;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.databinding.WrapperHelper;\n+\n+public class WrapperHelperProxyService implements WrapperHelperCreator {\n+    WrapperHelperCreator srv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3ODc0Nw==", "bodyText": "Please declare srv as private final", "url": "https://github.com/apache/cxf/pull/721#discussion_r540378747", "createdAt": "2020-12-10T17:55:55Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/WrapperClassCreatorProxyService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxws.spi;\n+\n+import java.util.Set;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.jaxws.WrapperClassGenerator;\n+import org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean;\n+import org.apache.cxf.service.model.InterfaceInfo;\n+\n+public class WrapperClassCreatorProxyService implements WrapperClassCreator {\n+    WrapperClassCreator srv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MTYzMQ==", "bodyText": "Please rename to WrapperClassLoader to follow the convention:  ExceptionClassGenerator / ExceptionClassLoader, WrapperHelperClassLoader / WrapperHelperClassGenerator", "url": "https://github.com/apache/cxf/pull/721#discussion_r540391631", "createdAt": "2020-12-10T18:15:04Z", "author": {"login": "reta"}, "path": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spi/GeneratedWrapperClassLoader.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxws.spi;\n+\n+import java.lang.reflect.Method;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.common.spi.GeneratedClassClassLoader;\n+import org.apache.cxf.common.util.PackageUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.cxf.jaxws.WrapperClassGenerator;\n+import org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean;\n+import org.apache.cxf.service.model.InterfaceInfo;\n+import org.apache.cxf.service.model.MessageInfo;\n+import org.apache.cxf.service.model.MessagePartInfo;\n+import org.apache.cxf.service.model.OperationInfo;\n+import org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean;\n+\n+/** If class has been generated during build time\n+ *  (use @see org.apache.cxf.common.spi.GeneratedClassClassLoaderCapture capture to save bytes)\n+ *  you can set class loader to avoid class generation during runtime:\n+ *  bus.setExtension(new GeneratedWrapperClassLoader(bus), WrapperClassCreator.class);\n+ * @author olivier dufour\n+ */\n+public class GeneratedWrapperClassLoader extends GeneratedClassClassLoader implements WrapperClassCreator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MzI3NA==", "bodyText": "Please declare srv as private final", "url": "https://github.com/apache/cxf/pull/721#discussion_r540393274", "createdAt": "2020-12-10T18:17:35Z", "author": {"login": "reta"}, "path": "rt/frontend/simple/src/main/java/org/apache/cxf/endpoint/dynamic/ExceptionClassCreatorProxyService.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.endpoint.dynamic;\n+\n+import org.apache.cxf.Bus;\n+\n+public class ExceptionClassCreatorProxyService implements ExceptionClassCreator {\n+    ExceptionClassCreator srv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5ODU2Mzgz", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-549856383", "createdAt": "2020-12-11T07:30:41Z", "commit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzozMDo0MlrOIDsYiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzozMDo0MlrOIDsYiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MzgxOQ==", "bodyText": "The length of this line breaks checkstyle (120 chars max)", "url": "https://github.com/apache/cxf/pull/721#discussion_r540743819", "createdAt": "2020-12-11T07:30:42Z", "author": {"login": "coheigea"}, "path": "core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.common.spi;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.cxf.common.util.WeakIdentityHashMap;\n+\n+/** Class loader used to store and retrieve class generated during runtime to avoid class generation each time.\n+ *  inherited class use asmHelper to generate bytes and use @see #loadClass(String, Class&lt;?&gt;, byte[])\n+ *  or @see #loadClass(String, ClassLoader, byte[]) to store generated class.\n+ *  Class can be generated during buildtime. equivalent class is @see org.apache.cxf.common.spi.GeneratedClassClassLoader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72930d287d6e94e6ed742331bbf4f0d2ce645129"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fefcb7ab1a566ba00d6091a4a9d0cd3a93a6b8d0", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/fefcb7ab1a566ba00d6091a4a9d0cd3a93a6b8d0", "committedDate": "2020-12-11T16:29:18Z", "message": "add corbaFixedAnyImpl service proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "434e67f54f6e5f800daac7d7be1f61bd423bc91e", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/434e67f54f6e5f800daac7d7be1f61bd423bc91e", "committedDate": "2020-12-12T10:29:13Z", "message": "fix corba unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwODU2ODM3", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-550856837", "createdAt": "2020-12-12T19:43:06Z", "commit": {"oid": "fefcb7ab1a566ba00d6091a4a9d0cd3a93a6b8d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxOTo0MzowNlrOIEqM1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxOTo0MzowNlrOIEqM1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc1NjYyOQ==", "bodyText": "Please also declare it private final", "url": "https://github.com/apache/cxf/pull/721#discussion_r541756629", "createdAt": "2020-12-12T19:43:06Z", "author": {"login": "reta"}, "path": "rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaFixedAnyImplClassCreatorProxyService.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.binding.corba.utils;\n+\n+import org.apache.cxf.Bus;\n+\n+public class CorbaFixedAnyImplClassCreatorProxyService implements CorbaFixedAnyImplClassCreator {\n+    CorbaFixedAnyImplClassCreator srv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fefcb7ab1a566ba00d6091a4a9d0cd3a93a6b8d0"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwODU5NTYz", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-550859563", "createdAt": "2020-12-12T20:24:41Z", "commit": {"oid": "434e67f54f6e5f800daac7d7be1f61bd423bc91e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ad85342ffdc7dcd521d3cc36a32f5eb7e3ba83b", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/apache/cxf/commit/0ad85342ffdc7dcd521d3cc36a32f5eb7e3ba83b", "committedDate": "2020-12-13T08:06:47Z", "message": "few little improvment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMzAyNzUy", "url": "https://github.com/apache/cxf/pull/721#pullrequestreview-551302752", "createdAt": "2020-12-14T12:01:24Z", "commit": {"oid": "0ad85342ffdc7dcd521d3cc36a32f5eb7e3ba83b"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2146, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}