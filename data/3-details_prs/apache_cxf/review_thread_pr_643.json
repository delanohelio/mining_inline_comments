{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NzgxMDQ4", "number": 643, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjo1NDo0NVrODilaHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjo1NDo0NVrODilaHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTkxMDY5OnYy", "diffSide": "RIGHT", "path": "rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/interceptor/SseInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjo1NDo0NVrOFt6eoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjoxMDo1OVrOFuDxFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4ODM1Mw==", "bodyText": "Is this put and the above check if get is equal to null responsible that it is not called twice?", "url": "https://github.com/apache/cxf/pull/643#discussion_r383688353", "createdAt": "2020-02-25T06:54:45Z", "author": {"login": "maggu2810"}, "path": "rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/interceptor/SseInterceptor.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.jaxrs.sse.interceptor;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.jaxrs.impl.ResponseImpl;\n+import org.apache.cxf.jaxrs.model.OperationResourceInfo;\n+import org.apache.cxf.jaxrs.provider.ServerProviderFactory;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.cxf.message.Exchange;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.phase.AbstractPhaseInterceptor;\n+import org.apache.cxf.phase.Phase;\n+\n+public class SseInterceptor extends AbstractPhaseInterceptor<Message> {\n+    private static final Logger LOG = LogUtils.getL7dLogger(SseInterceptor.class);\n+    \n+    public SseInterceptor() {\n+        super(Phase.POST_LOGICAL);\n+    }\n+    public SseInterceptor(String phase) {\n+        super(phase);\n+    }\n+\n+    public void handleMessage(Message message) {\n+        if (!isRequestor(message) && message.get(SseInterceptor.class) == null) {\n+            message.put(SseInterceptor.class, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23132e250667d86bf5949e69055d499967ded9c2"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg0MDUzNQ==", "bodyText": "Yes, it shouldn't be called twice, but it serves as a guard.", "url": "https://github.com/apache/cxf/pull/643#discussion_r383840535", "createdAt": "2020-02-25T12:10:59Z", "author": {"login": "reta"}, "path": "rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/interceptor/SseInterceptor.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.jaxrs.sse.interceptor;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.jaxrs.impl.ResponseImpl;\n+import org.apache.cxf.jaxrs.model.OperationResourceInfo;\n+import org.apache.cxf.jaxrs.provider.ServerProviderFactory;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.cxf.message.Exchange;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.phase.AbstractPhaseInterceptor;\n+import org.apache.cxf.phase.Phase;\n+\n+public class SseInterceptor extends AbstractPhaseInterceptor<Message> {\n+    private static final Logger LOG = LogUtils.getL7dLogger(SseInterceptor.class);\n+    \n+    public SseInterceptor() {\n+        super(Phase.POST_LOGICAL);\n+    }\n+    public SseInterceptor(String phase) {\n+        super(phase);\n+    }\n+\n+    public void handleMessage(Message message) {\n+        if (!isRequestor(message) && message.get(SseInterceptor.class) == null) {\n+            message.put(SseInterceptor.class, this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4ODM1Mw=="}, "originalCommit": {"oid": "23132e250667d86bf5949e69055d499967ded9c2"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3676, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}