{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNDg5ODY1", "number": 1650, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTozOToxMlrOFH1gWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzozNzowNVrOFIPY2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzYwOTg1OnYy", "diffSide": "RIGHT", "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/eventstore/jdbc/MysqlJdbcEventStorageEngineTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTozOToxMlrOIJcgqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjozMToxNlrOIKBL1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3NTIxMA==", "bodyText": "With current approach we should be able to remove this try-catch block, right?\nSame applies for the other 2 tests.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1650#discussion_r546775210", "createdAt": "2020-12-21T15:39:12Z", "author": {"login": "lfgcampos"}, "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/eventstore/jdbc/MysqlJdbcEventStorageEngineTest.java", "diffHunk": "@@ -36,56 +37,58 @@\n  *\n  * @author Albert Attard (JavaCreed)\n  */\n+@Testcontainers\n class MysqlJdbcEventStorageEngineTest {\n \n-    private MysqlDataSource dataSource;\n+    @Container\n+    private static final MySQLContainer<?> MYSQL_CONTAINER = new MySQLContainer<>(\"mysql\")\n+            .withDatabaseName(\"axon\")\n+            .withUsername(\"admin\")\n+            .withPassword(\"some-password\");\n+\n     private JdbcEventStorageEngine testSubject;\n \n     @BeforeEach\n-    void setUp() throws Exception {\n-        /* Load the DB properties */\n-        final Properties properties = new Properties();\n-        properties.load(getClass().getResourceAsStream(\"/mysql.test.database.properties\"));\n-\n-        dataSource = new MysqlDataSource();\n-        dataSource.setUrl(properties.getProperty(\"jdbc.url\"));\n-        dataSource.setUser(properties.getProperty(\"jdbc.username\"));\n-        dataSource.setPassword(properties.getProperty(\"jdbc.password\"));\n+    void setUp() {\n+        MysqlDataSource dataSource = new MysqlDataSource();\n+        dataSource.setUrl(MYSQL_CONTAINER.getJdbcUrl());\n+        dataSource.setUser(MYSQL_CONTAINER.getUsername());\n+        dataSource.setPassword(MYSQL_CONTAINER.getPassword());\n         try {\n-            testSubject = createEngine(new SQLErrorCodesResolver(dataSource));\n+            testSubject = createEngine(dataSource);\n         } catch (Exception e) {\n             throw new TestAbortedException(\"Ignoring this test, as no valid MySQL instance is configured\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6aa96620d2b48db8f985f01970207ce1b8f19f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3NjA4NQ==", "bodyText": "Sure, let's put some more trust in test containers!", "url": "https://github.com/AxonFramework/AxonFramework/pull/1650#discussion_r547376085", "createdAt": "2020-12-22T16:31:16Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/eventstore/jdbc/MysqlJdbcEventStorageEngineTest.java", "diffHunk": "@@ -36,56 +37,58 @@\n  *\n  * @author Albert Attard (JavaCreed)\n  */\n+@Testcontainers\n class MysqlJdbcEventStorageEngineTest {\n \n-    private MysqlDataSource dataSource;\n+    @Container\n+    private static final MySQLContainer<?> MYSQL_CONTAINER = new MySQLContainer<>(\"mysql\")\n+            .withDatabaseName(\"axon\")\n+            .withUsername(\"admin\")\n+            .withPassword(\"some-password\");\n+\n     private JdbcEventStorageEngine testSubject;\n \n     @BeforeEach\n-    void setUp() throws Exception {\n-        /* Load the DB properties */\n-        final Properties properties = new Properties();\n-        properties.load(getClass().getResourceAsStream(\"/mysql.test.database.properties\"));\n-\n-        dataSource = new MysqlDataSource();\n-        dataSource.setUrl(properties.getProperty(\"jdbc.url\"));\n-        dataSource.setUser(properties.getProperty(\"jdbc.username\"));\n-        dataSource.setPassword(properties.getProperty(\"jdbc.password\"));\n+    void setUp() {\n+        MysqlDataSource dataSource = new MysqlDataSource();\n+        dataSource.setUrl(MYSQL_CONTAINER.getJdbcUrl());\n+        dataSource.setUser(MYSQL_CONTAINER.getUsername());\n+        dataSource.setPassword(MYSQL_CONTAINER.getPassword());\n         try {\n-            testSubject = createEngine(new SQLErrorCodesResolver(dataSource));\n+            testSubject = createEngine(dataSource);\n         } catch (Exception e) {\n             throw new TestAbortedException(\"Ignoring this test, as no valid MySQL instance is configured\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3NTIxMA=="}, "originalCommit": {"oid": "6e6aa96620d2b48db8f985f01970207ce1b8f19f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTg1MDUwOnYy", "diffSide": "RIGHT", "path": "integrationtests/src/test/java/org/axonframework/integrationtests/eventsourcing/eventstore/jdbc/Oracle11EventTableFactoryTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzozNzowNVrOIKDNNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODo1Mzo0NVrOIKcckQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwOTIwNw==", "bodyText": "You have to set it on the connection (few lines below, on setUp)", "url": "https://github.com/AxonFramework/AxonFramework/pull/1650#discussion_r547409207", "createdAt": "2020-12-22T17:37:05Z", "author": {"login": "lfgcampos"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/eventsourcing/eventstore/jdbc/Oracle11EventTableFactoryTest.java", "diffHunk": "@@ -18,32 +18,43 @@\n \n import org.axonframework.eventsourcing.eventstore.jdbc.EventSchema;\n import org.axonframework.eventsourcing.eventstore.jdbc.Oracle11EventTableFactory;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.opentest4j.TestAbortedException;\n+import org.junit.jupiter.api.*;\n+import org.testcontainers.containers.OracleContainer;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n \n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.SQLException;\n \n import static org.axonframework.common.io.IOUtils.closeQuietly;\n \n+/**\n+ * Integration test class validating the {@link Oracle11EventTableFactory}.\n+ *\n+ * @author Joris van der Kallen\n+ */\n+@SuppressWarnings({\"SqlDialectInspection\", \"SqlNoDataSourceInspection\"})\n+@Testcontainers\n class Oracle11EventTableFactoryTest {\n \n+    private static final String USERNAME = \"system\";\n+    private static final String PASSWORD = \"oracle\";\n+\n+    @Container\n+    private static final OracleContainer ORACLE_CONTAINER = new OracleContainer(\"gautamsaggar/oracle11g:v2\")\n+            //Disable oracle.jdbc.timezoneAsRegion as when on true GHA fails to run this test due to missing region-info\n+            .withEnv(\"oracle.jdbc.timezoneAsRegion\", \"false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b7d53192afce227f9b615c5c08ea78f22b2a2e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc4NzkyMQ==", "bodyText": "If you say so. Kinda shitty to test locally, as it simply works there... Would like some resources where you've found that bit, as my Oracle knowledge doesn't extend that far tbh.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1650#discussion_r547787921", "createdAt": "2020-12-23T08:13:03Z", "author": {"login": "smcvb"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/eventsourcing/eventstore/jdbc/Oracle11EventTableFactoryTest.java", "diffHunk": "@@ -18,32 +18,43 @@\n \n import org.axonframework.eventsourcing.eventstore.jdbc.EventSchema;\n import org.axonframework.eventsourcing.eventstore.jdbc.Oracle11EventTableFactory;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.opentest4j.TestAbortedException;\n+import org.junit.jupiter.api.*;\n+import org.testcontainers.containers.OracleContainer;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n \n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.SQLException;\n \n import static org.axonframework.common.io.IOUtils.closeQuietly;\n \n+/**\n+ * Integration test class validating the {@link Oracle11EventTableFactory}.\n+ *\n+ * @author Joris van der Kallen\n+ */\n+@SuppressWarnings({\"SqlDialectInspection\", \"SqlNoDataSourceInspection\"})\n+@Testcontainers\n class Oracle11EventTableFactoryTest {\n \n+    private static final String USERNAME = \"system\";\n+    private static final String PASSWORD = \"oracle\";\n+\n+    @Container\n+    private static final OracleContainer ORACLE_CONTAINER = new OracleContainer(\"gautamsaggar/oracle11g:v2\")\n+            //Disable oracle.jdbc.timezoneAsRegion as when on true GHA fails to run this test due to missing region-info\n+            .withEnv(\"oracle.jdbc.timezoneAsRegion\", \"false\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwOTIwNw=="}, "originalCommit": {"oid": "08b7d53192afce227f9b615c5c08ea78f22b2a2e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc5MTc1Ng==", "bodyText": "Pushed, let's see if you're right ;-)", "url": "https://github.com/AxonFramework/AxonFramework/pull/1650#discussion_r547791756", "createdAt": "2020-12-23T08:17:40Z", "author": {"login": "smcvb"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/eventsourcing/eventstore/jdbc/Oracle11EventTableFactoryTest.java", "diffHunk": "@@ -18,32 +18,43 @@\n \n import org.axonframework.eventsourcing.eventstore.jdbc.EventSchema;\n import org.axonframework.eventsourcing.eventstore.jdbc.Oracle11EventTableFactory;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.opentest4j.TestAbortedException;\n+import org.junit.jupiter.api.*;\n+import org.testcontainers.containers.OracleContainer;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n \n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.SQLException;\n \n import static org.axonframework.common.io.IOUtils.closeQuietly;\n \n+/**\n+ * Integration test class validating the {@link Oracle11EventTableFactory}.\n+ *\n+ * @author Joris van der Kallen\n+ */\n+@SuppressWarnings({\"SqlDialectInspection\", \"SqlNoDataSourceInspection\"})\n+@Testcontainers\n class Oracle11EventTableFactoryTest {\n \n+    private static final String USERNAME = \"system\";\n+    private static final String PASSWORD = \"oracle\";\n+\n+    @Container\n+    private static final OracleContainer ORACLE_CONTAINER = new OracleContainer(\"gautamsaggar/oracle11g:v2\")\n+            //Disable oracle.jdbc.timezoneAsRegion as when on true GHA fails to run this test due to missing region-info\n+            .withEnv(\"oracle.jdbc.timezoneAsRegion\", \"false\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwOTIwNw=="}, "originalCommit": {"oid": "08b7d53192afce227f9b615c5c08ea78f22b2a2e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgyMjczNw==", "bodyText": "It seems you were, bravo", "url": "https://github.com/AxonFramework/AxonFramework/pull/1650#discussion_r547822737", "createdAt": "2020-12-23T08:53:45Z", "author": {"login": "smcvb"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/eventsourcing/eventstore/jdbc/Oracle11EventTableFactoryTest.java", "diffHunk": "@@ -18,32 +18,43 @@\n \n import org.axonframework.eventsourcing.eventstore.jdbc.EventSchema;\n import org.axonframework.eventsourcing.eventstore.jdbc.Oracle11EventTableFactory;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.opentest4j.TestAbortedException;\n+import org.junit.jupiter.api.*;\n+import org.testcontainers.containers.OracleContainer;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n \n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.SQLException;\n \n import static org.axonframework.common.io.IOUtils.closeQuietly;\n \n+/**\n+ * Integration test class validating the {@link Oracle11EventTableFactory}.\n+ *\n+ * @author Joris van der Kallen\n+ */\n+@SuppressWarnings({\"SqlDialectInspection\", \"SqlNoDataSourceInspection\"})\n+@Testcontainers\n class Oracle11EventTableFactoryTest {\n \n+    private static final String USERNAME = \"system\";\n+    private static final String PASSWORD = \"oracle\";\n+\n+    @Container\n+    private static final OracleContainer ORACLE_CONTAINER = new OracleContainer(\"gautamsaggar/oracle11g:v2\")\n+            //Disable oracle.jdbc.timezoneAsRegion as when on true GHA fails to run this test due to missing region-info\n+            .withEnv(\"oracle.jdbc.timezoneAsRegion\", \"false\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwOTIwNw=="}, "originalCommit": {"oid": "08b7d53192afce227f9b615c5c08ea78f22b2a2e"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3176, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}