{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NDcxNDg5", "number": 1307, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMTozNzoyOVrODWrR5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMTozODo1MFrODWrTSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTA0MzU4OnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/axonframework/test/saga/FixtureConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMTozNzoyOVrOFbkl2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMjo1OToyNFrOFb1BrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1NTM4NA==", "bodyText": "Not sure I understand this. If the custom injector comes second, doesn't that give it the opportunity to override certain dependencies? If we want to force our own, the default injector should come last.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1307#discussion_r364455384", "createdAt": "2020-01-08T21:37:29Z", "author": {"login": "abuijze"}, "path": "test/src/main/java/org/axonframework/test/saga/FixtureConfiguration.java", "diffHunk": "@@ -211,6 +212,22 @@ FixtureConfiguration registerDeadlineHandlerInterceptor(\n     FixtureConfiguration registerListenerInvocationErrorHandler(\n             ListenerInvocationErrorHandler listenerInvocationErrorHandler);\n \n+    /**\n+     * Registers a {@link ResourceInjector} within this fixture. This approach can be used if a custom {@code\n+     * ResourceInjector} has been built for a project which the user wants to take into account when testing it's\n+     * sagas.\n+     * <p>\n+     * The provided {@code resourceInjector} will be paired with the fixture's default {@code ResourceInjector} to keep\n+     * supporting the {@link #registerResource(Object)} and {@link #withTransienceCheckDisabled()} methods. Note that\n+     * <b>first</b> the default injector is called, and after that the given {@code resourceInjector}. This approach\n+     * ensures the fixture's correct workings for default provided resources, like the {@link EventBus} and {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38599e6a66d72105e87671062d563f6bc7c3b20c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY4NTc2MQ==", "bodyText": "My train of thought was to keep support for the registerResource(Object) and withTransienceCheckDisabled() methods workable, but allow the users to override the entirety of resource injections or to append to it.\nTo achieve both complete override and appending, I felt the custom implementation should come second.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1307#discussion_r364685761", "createdAt": "2020-01-09T11:19:29Z", "author": {"login": "smcvb"}, "path": "test/src/main/java/org/axonframework/test/saga/FixtureConfiguration.java", "diffHunk": "@@ -211,6 +212,22 @@ FixtureConfiguration registerDeadlineHandlerInterceptor(\n     FixtureConfiguration registerListenerInvocationErrorHandler(\n             ListenerInvocationErrorHandler listenerInvocationErrorHandler);\n \n+    /**\n+     * Registers a {@link ResourceInjector} within this fixture. This approach can be used if a custom {@code\n+     * ResourceInjector} has been built for a project which the user wants to take into account when testing it's\n+     * sagas.\n+     * <p>\n+     * The provided {@code resourceInjector} will be paired with the fixture's default {@code ResourceInjector} to keep\n+     * supporting the {@link #registerResource(Object)} and {@link #withTransienceCheckDisabled()} methods. Note that\n+     * <b>first</b> the default injector is called, and after that the given {@code resourceInjector}. This approach\n+     * ensures the fixture's correct workings for default provided resources, like the {@link EventBus} and {@link", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1NTM4NA=="}, "originalCommit": {"oid": "38599e6a66d72105e87671062d563f6bc7c3b20c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyNDY1Mg==", "bodyText": "Discussed offline that the current approach is fair, but that a more direct caution sign should be given in the javadoc to describe what happens if a custom all overriding ResourceInjector is provided.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1307#discussion_r364724652", "createdAt": "2020-01-09T12:59:24Z", "author": {"login": "smcvb"}, "path": "test/src/main/java/org/axonframework/test/saga/FixtureConfiguration.java", "diffHunk": "@@ -211,6 +212,22 @@ FixtureConfiguration registerDeadlineHandlerInterceptor(\n     FixtureConfiguration registerListenerInvocationErrorHandler(\n             ListenerInvocationErrorHandler listenerInvocationErrorHandler);\n \n+    /**\n+     * Registers a {@link ResourceInjector} within this fixture. This approach can be used if a custom {@code\n+     * ResourceInjector} has been built for a project which the user wants to take into account when testing it's\n+     * sagas.\n+     * <p>\n+     * The provided {@code resourceInjector} will be paired with the fixture's default {@code ResourceInjector} to keep\n+     * supporting the {@link #registerResource(Object)} and {@link #withTransienceCheckDisabled()} methods. Note that\n+     * <b>first</b> the default injector is called, and after that the given {@code resourceInjector}. This approach\n+     * ensures the fixture's correct workings for default provided resources, like the {@link EventBus} and {@link", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1NTM4NA=="}, "originalCommit": {"oid": "38599e6a66d72105e87671062d563f6bc7c3b20c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTA0NzEzOnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/axonframework/test/saga/SagaTestFixture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMTozODo1MFrOFbkoIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMToxNDo0OFrOFbyjCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1NTk2OQ==", "bodyText": "Class looks like it could be static", "url": "https://github.com/AxonFramework/AxonFramework/pull/1307#discussion_r364455969", "createdAt": "2020-01-08T21:38:50Z", "author": {"login": "abuijze"}, "path": "test/src/main/java/org/axonframework/test/saga/SagaTestFixture.java", "diffHunk": "@@ -585,15 +600,44 @@ public void injectResources(Object saga) {\n                              .filter(f -> registeredResources.contains(ReflectionUtils.getFieldValue(f, saga)))\n                              .findFirst()\n                              .ifPresent(field -> {\n-                                 throw new AssertionError(format(\"Field %s.%s is injected with a resource, \" +\n-                                                                         \"but it doesn't have the 'transient' modifier.\\n\"\n-                                                                         +\n-                                                                         \"Mark field as 'transient' or disable this check using:\\n\"\n-                                                                         +\n-                                                                         \"fixture.withTransienceCheckDisabled()\",\n-                                                                 field.getDeclaringClass(), field.getName()));\n+                                 throw new AssertionError(format(\n+                                         \"Field %s.%s is injected with a resource,\"\n+                                                 + \" but it doesn't have the 'transient' modifier.\"\n+                                                 + \"\\nMark field as 'transient' or disable this check using:\"\n+                                                 + \"\\nfixture.withTransienceCheckDisabled()\",\n+                                         field.getDeclaringClass(),\n+                                         field.getName()\n+                                 ));\n                              });\n             }\n         }\n     }\n+\n+    /**\n+     * Wrapping {@link ResourceInjector} instance. Will first call the {@link TransienceValidatingResourceInjector}, to\n+     * ensure the fixture's approach of injecting the default classes (like the {@link EventBus} and {@link CommandBus}\n+     * for example) is maintained. Afterward, the custom {@code ResourceInjector} provided through the {@link\n+     * #registerResourceInjector(ResourceInjector)} is called. This will (depending on the implementation) inject more\n+     * resources, as well as potentially override resources already injected by the {@code\n+     * TransienceValidatingResourceInjector}.\n+     */\n+    private class WrappingResourceInjector implements ResourceInjector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38599e6a66d72105e87671062d563f6bc7c3b20c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY4NDA0Mw==", "bodyText": "This requires making the TransienceValidatingResourceInjector static too, but fair argument nonetheless. Will do", "url": "https://github.com/AxonFramework/AxonFramework/pull/1307#discussion_r364684043", "createdAt": "2020-01-09T11:14:48Z", "author": {"login": "smcvb"}, "path": "test/src/main/java/org/axonframework/test/saga/SagaTestFixture.java", "diffHunk": "@@ -585,15 +600,44 @@ public void injectResources(Object saga) {\n                              .filter(f -> registeredResources.contains(ReflectionUtils.getFieldValue(f, saga)))\n                              .findFirst()\n                              .ifPresent(field -> {\n-                                 throw new AssertionError(format(\"Field %s.%s is injected with a resource, \" +\n-                                                                         \"but it doesn't have the 'transient' modifier.\\n\"\n-                                                                         +\n-                                                                         \"Mark field as 'transient' or disable this check using:\\n\"\n-                                                                         +\n-                                                                         \"fixture.withTransienceCheckDisabled()\",\n-                                                                 field.getDeclaringClass(), field.getName()));\n+                                 throw new AssertionError(format(\n+                                         \"Field %s.%s is injected with a resource,\"\n+                                                 + \" but it doesn't have the 'transient' modifier.\"\n+                                                 + \"\\nMark field as 'transient' or disable this check using:\"\n+                                                 + \"\\nfixture.withTransienceCheckDisabled()\",\n+                                         field.getDeclaringClass(),\n+                                         field.getName()\n+                                 ));\n                              });\n             }\n         }\n     }\n+\n+    /**\n+     * Wrapping {@link ResourceInjector} instance. Will first call the {@link TransienceValidatingResourceInjector}, to\n+     * ensure the fixture's approach of injecting the default classes (like the {@link EventBus} and {@link CommandBus}\n+     * for example) is maintained. Afterward, the custom {@code ResourceInjector} provided through the {@link\n+     * #registerResourceInjector(ResourceInjector)} is called. This will (depending on the implementation) inject more\n+     * resources, as well as potentially override resources already injected by the {@code\n+     * TransienceValidatingResourceInjector}.\n+     */\n+    private class WrappingResourceInjector implements ResourceInjector {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1NTk2OQ=="}, "originalCommit": {"oid": "38599e6a66d72105e87671062d563f6bc7c3b20c"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3262, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}