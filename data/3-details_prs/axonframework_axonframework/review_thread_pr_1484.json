{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NjExOTk3", "number": 1484, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzozMjo1NlrOEX7l8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTowNjo1OVrOEYZU-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTI5MDczOnYy", "diffSide": "RIGHT", "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzozMjo1NlrOG__eDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOTowMDoyMlrOHACjlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1MzM1Nw==", "bodyText": "Instead of checking a field (which is set in another method), I suggest calling peek(), so that the knowledge of that field becomes more \"local\". To prevent the creation of Optional instances, we could create a private \"peekNullable\" (or any better name than that) method, which just returns null.\nThat would also allow the do ... while to be refactored to a while, which is generally considered cleaner:\nwhile (peekNullable() == null && System.currentTimeMillis() < deadline) {\n... wait for data\n}\nreturn peekNullable() != null;", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469753357", "createdAt": "2020-08-13T07:32:56Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -147,36 +147,51 @@ public void blacklist(TrackedEventMessage<?> trackedEventMessage) {\n \n     @Override\n     public boolean hasNextAvailable(int timeout, TimeUnit timeUnit) {\n+        checkExceptionState();\n         long deadline = System.currentTimeMillis() + timeUnit.toMillis(timeout);\n         try {\n             do {\n                 long waitTime = deadline - System.currentTimeMillis();\n                 waitForData(waitTime);\n-            } while (peekEvent == null && System.currentTimeMillis() < deadline && !eventStream.hasNext());\n+            } while (peekEvent == null && System.currentTimeMillis() < deadline);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzkyNg==", "bodyText": "Sweet, that's the kinda of clean up I was trying to find. Agreeing peekNullable() doesn't sound to fancy though...will give this a think on how to rename it to something better suited.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469803926", "createdAt": "2020-08-13T09:00:22Z", "author": {"login": "smcvb"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -147,36 +147,51 @@ public void blacklist(TrackedEventMessage<?> trackedEventMessage) {\n \n     @Override\n     public boolean hasNextAvailable(int timeout, TimeUnit timeUnit) {\n+        checkExceptionState();\n         long deadline = System.currentTimeMillis() + timeUnit.toMillis(timeout);\n         try {\n             do {\n                 long waitTime = deadline - System.currentTimeMillis();\n                 waitForData(waitTime);\n-            } while (peekEvent == null && System.currentTimeMillis() < deadline && !eventStream.hasNext());\n+            } while (peekEvent == null && System.currentTimeMillis() < deadline);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1MzM1Nw=="}, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTI5MDk4OnYy", "diffSide": "RIGHT", "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzozMzowMVrOG__eOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODo0Njo0NlrOHACDvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1MzQwMA==", "bodyText": "This should be MAX_AWAIT_AVAILABLE_DATA, is this is the maximum amount of time that a thread sleeps in between attempts", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469753400", "createdAt": "2020-08-13T07:33:01Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -57,14 +60,14 @@\n  */\n public class EventBuffer implements TrackingEventStream {\n \n-    private static final Logger logger = LoggerFactory.getLogger(EventBuffer.class);\n+    private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n-    private static final int DEFAULT_POLLING_TIME_MILLIS = 500;\n+    private static final int MIN_AWAIT_AVAILABLE_DATA = 500;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc5NTc3Mg==", "bodyText": "Good point, will adjust.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469795772", "createdAt": "2020-08-13T08:46:46Z", "author": {"login": "smcvb"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -57,14 +60,14 @@\n  */\n public class EventBuffer implements TrackingEventStream {\n \n-    private static final Logger logger = LoggerFactory.getLogger(EventBuffer.class);\n+    private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n-    private static final int DEFAULT_POLLING_TIME_MILLIS = 500;\n+    private static final int MIN_AWAIT_AVAILABLE_DATA = 500;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1MzQwMA=="}, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTMwNDM4OnYy", "diffSide": "RIGHT", "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzozNjo0NVrOG__l4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODo1OTo0OVrOHACigA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1NTM2MA==", "bodyText": "If the \"peekNullable\" method described above is implemented, this would also be a good place to call it.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469755360", "createdAt": "2020-08-13T07:36:45Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -147,36 +147,51 @@ public void blacklist(TrackedEventMessage<?> trackedEventMessage) {\n \n     @Override\n     public boolean hasNextAvailable(int timeout, TimeUnit timeUnit) {\n+        checkExceptionState();\n         long deadline = System.currentTimeMillis() + timeUnit.toMillis(timeout);\n         try {\n             do {\n                 long waitTime = deadline - System.currentTimeMillis();\n                 waitForData(waitTime);\n-            } while (peekEvent == null && System.currentTimeMillis() < deadline && !eventStream.hasNext());\n+            } while (peekEvent == null && System.currentTimeMillis() < deadline);\n \n-            return peekEvent != null || eventStream.hasNext();\n+            return peekEvent != null;\n         } catch (InterruptedException e) {\n-            logger.warn(\"Consumer thread was interrupted. Returning thread to event processor.\", e);\n+            logger.warn(\"Event consumer thread was interrupted. Returning thread to event processor.\", e);\n             Thread.currentThread().interrupt();\n             return false;\n         }\n     }\n \n-    private void waitForData(long timeout) throws InterruptedException {\n-        // a quick check before acquiring the lock\n-        if (delegate.peek() != null) {\n+    private void checkExceptionState() {\n+        if (delegate.isClosed()) {\n+            throw new AxonServerException(ErrorCode.OTHER.errorCode(),\n+                                          \"The Event Stream has been closed, so no further events can be retrieved\");\n+        }\n+    }\n+\n+    private void waitForData(long waitTime) throws InterruptedException {\n+        // Quick check before acquiring the lock.\n+        if (peek().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzY0OA==", "bodyText": "Exactly. And the same applies for the check in the try-catch block if you ask me. Thus I'll adjust it there too.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469803648", "createdAt": "2020-08-13T08:59:49Z", "author": {"login": "smcvb"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -147,36 +147,51 @@ public void blacklist(TrackedEventMessage<?> trackedEventMessage) {\n \n     @Override\n     public boolean hasNextAvailable(int timeout, TimeUnit timeUnit) {\n+        checkExceptionState();\n         long deadline = System.currentTimeMillis() + timeUnit.toMillis(timeout);\n         try {\n             do {\n                 long waitTime = deadline - System.currentTimeMillis();\n                 waitForData(waitTime);\n-            } while (peekEvent == null && System.currentTimeMillis() < deadline && !eventStream.hasNext());\n+            } while (peekEvent == null && System.currentTimeMillis() < deadline);\n \n-            return peekEvent != null || eventStream.hasNext();\n+            return peekEvent != null;\n         } catch (InterruptedException e) {\n-            logger.warn(\"Consumer thread was interrupted. Returning thread to event processor.\", e);\n+            logger.warn(\"Event consumer thread was interrupted. Returning thread to event processor.\", e);\n             Thread.currentThread().interrupt();\n             return false;\n         }\n     }\n \n-    private void waitForData(long timeout) throws InterruptedException {\n-        // a quick check before acquiring the lock\n-        if (delegate.peek() != null) {\n+    private void checkExceptionState() {\n+        if (delegate.isClosed()) {\n+            throw new AxonServerException(ErrorCode.OTHER.errorCode(),\n+                                          \"The Event Stream has been closed, so no further events can be retrieved\");\n+        }\n+    }\n+\n+    private void waitForData(long waitTime) throws InterruptedException {\n+        // Quick check before acquiring the lock.\n+        if (peek().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1NTM2MA=="}, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTMxMTA0OnYy", "diffSide": "RIGHT", "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzozODo1MVrOG__pvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODo1MzoxMFrOHACS6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1NjM1MA==", "bodyText": "can we merge this if with the previous one?\nif (peek().isPresent() || waitTime <= 0) { return;}", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469756350", "createdAt": "2020-08-13T07:38:51Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -147,36 +147,51 @@ public void blacklist(TrackedEventMessage<?> trackedEventMessage) {\n \n     @Override\n     public boolean hasNextAvailable(int timeout, TimeUnit timeUnit) {\n+        checkExceptionState();\n         long deadline = System.currentTimeMillis() + timeUnit.toMillis(timeout);\n         try {\n             do {\n                 long waitTime = deadline - System.currentTimeMillis();\n                 waitForData(waitTime);\n-            } while (peekEvent == null && System.currentTimeMillis() < deadline && !eventStream.hasNext());\n+            } while (peekEvent == null && System.currentTimeMillis() < deadline);\n \n-            return peekEvent != null || eventStream.hasNext();\n+            return peekEvent != null;\n         } catch (InterruptedException e) {\n-            logger.warn(\"Consumer thread was interrupted. Returning thread to event processor.\", e);\n+            logger.warn(\"Event consumer thread was interrupted. Returning thread to event processor.\", e);\n             Thread.currentThread().interrupt();\n             return false;\n         }\n     }\n \n-    private void waitForData(long timeout) throws InterruptedException {\n-        // a quick check before acquiring the lock\n-        if (delegate.peek() != null) {\n+    private void checkExceptionState() {\n+        if (delegate.isClosed()) {\n+            throw new AxonServerException(ErrorCode.OTHER.errorCode(),\n+                                          \"The Event Stream has been closed, so no further events can be retrieved\");\n+        }\n+    }\n+\n+    private void waitForData(long waitTime) throws InterruptedException {\n+        // Quick check before acquiring the lock.\n+        if (peek().isPresent()) {\n             return;\n         }\n-        if (timeout > 0) {\n-            lock.lock();\n-            try {\n-                // check again for concurrency reasons\n-                if (delegate.peek() == null) {\n-                    dataAvailable.await(Math.min(DEFAULT_POLLING_TIME_MILLIS, timeout), TimeUnit.MILLISECONDS);\n-                }\n-            } finally {\n-                lock.unlock();\n+        // No use spending lock/await work for zero wait time.\n+        if (waitTime <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc5OTY1OA==", "bodyText": "Sure, why not.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469799658", "createdAt": "2020-08-13T08:53:10Z", "author": {"login": "smcvb"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -147,36 +147,51 @@ public void blacklist(TrackedEventMessage<?> trackedEventMessage) {\n \n     @Override\n     public boolean hasNextAvailable(int timeout, TimeUnit timeUnit) {\n+        checkExceptionState();\n         long deadline = System.currentTimeMillis() + timeUnit.toMillis(timeout);\n         try {\n             do {\n                 long waitTime = deadline - System.currentTimeMillis();\n                 waitForData(waitTime);\n-            } while (peekEvent == null && System.currentTimeMillis() < deadline && !eventStream.hasNext());\n+            } while (peekEvent == null && System.currentTimeMillis() < deadline);\n \n-            return peekEvent != null || eventStream.hasNext();\n+            return peekEvent != null;\n         } catch (InterruptedException e) {\n-            logger.warn(\"Consumer thread was interrupted. Returning thread to event processor.\", e);\n+            logger.warn(\"Event consumer thread was interrupted. Returning thread to event processor.\", e);\n             Thread.currentThread().interrupt();\n             return false;\n         }\n     }\n \n-    private void waitForData(long timeout) throws InterruptedException {\n-        // a quick check before acquiring the lock\n-        if (delegate.peek() != null) {\n+    private void checkExceptionState() {\n+        if (delegate.isClosed()) {\n+            throw new AxonServerException(ErrorCode.OTHER.errorCode(),\n+                                          \"The Event Stream has been closed, so no further events can be retrieved\");\n+        }\n+    }\n+\n+    private void waitForData(long waitTime) throws InterruptedException {\n+        // Quick check before acquiring the lock.\n+        if (peek().isPresent()) {\n             return;\n         }\n-        if (timeout > 0) {\n-            lock.lock();\n-            try {\n-                // check again for concurrency reasons\n-                if (delegate.peek() == null) {\n-                    dataAvailable.await(Math.min(DEFAULT_POLLING_TIME_MILLIS, timeout), TimeUnit.MILLISECONDS);\n-                }\n-            } finally {\n-                lock.unlock();\n+        // No use spending lock/await work for zero wait time.\n+        if (waitTime <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1NjM1MA=="}, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTM3MDE2OnYy", "diffSide": "RIGHT", "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzo1NTo1NFrOHAAN-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODo0NzoxM1rOHACEwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc2NTYyNQ==", "bodyText": "I like the advertising ;-)", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469765625", "createdAt": "2020-08-13T07:55:54Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -102,14 +104,12 @@ public EventBuffer(EventStream delegate,\n                 lock.unlock();\n             }\n         });\n+        logger.debug(\"Now, with adjusted poll operation!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc5NjAzMw==", "bodyText": "Ha darn, I'll drop this as this wasn't intended to be part of the PR. Thanks for signalling it.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469796033", "createdAt": "2020-08-13T08:47:13Z", "author": {"login": "smcvb"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -102,14 +104,12 @@ public EventBuffer(EventStream delegate,\n                 lock.unlock();\n             }\n         });\n+        logger.debug(\"Now, with adjusted poll operation!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc2NTYyNQ=="}, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDE2MjQ4OnYy", "diffSide": "RIGHT", "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTowNjo1OVrOHAtVkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToyMDozNFrOHAtvsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNDg1MA==", "bodyText": "Shouldn't this be peekNullable() == null && waitTime > 0", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r470504850", "createdAt": "2020-08-14T09:06:59Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -139,44 +138,50 @@ public void blacklist(TrackedEventMessage<?> trackedEventMessage) {\n \n     @Override\n     public Optional<TrackedEventMessage<?>> peek() {\n-        if (peekEvent == null && eventStream.hasNext()) {\n-            peekEvent = eventStream.next();\n-        }\n-        return Optional.ofNullable(peekEvent);\n+        return Optional.ofNullable(peekNullable());\n     }\n \n     @Override\n     public boolean hasNextAvailable(int timeout, TimeUnit timeUnit) {\n+        checkExceptionState();\n         long deadline = System.currentTimeMillis() + timeUnit.toMillis(timeout);\n         try {\n-            do {\n-                long waitTime = deadline - System.currentTimeMillis();\n-                waitForData(waitTime);\n-            } while (peekEvent == null && System.currentTimeMillis() < deadline && !eventStream.hasNext());\n+            while (peekNullable() == null && System.currentTimeMillis() < deadline) {\n+                lock.lock();\n+                try {\n+                    long waitTime = deadline - System.currentTimeMillis();\n+                    // Check if an event has arrived or if the wait time is zero. In both cases, we don't have to wait.\n+                    if (peekNullable() == null || waitTime <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "112339f7fa44f8983b7c0792e2562567d6bcec2e"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTUzNw==", "bodyText": "Guess I was sleeping when I typed that...adjusted, thanks for calling it out.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r470511537", "createdAt": "2020-08-14T09:20:34Z", "author": {"login": "smcvb"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -139,44 +138,50 @@ public void blacklist(TrackedEventMessage<?> trackedEventMessage) {\n \n     @Override\n     public Optional<TrackedEventMessage<?>> peek() {\n-        if (peekEvent == null && eventStream.hasNext()) {\n-            peekEvent = eventStream.next();\n-        }\n-        return Optional.ofNullable(peekEvent);\n+        return Optional.ofNullable(peekNullable());\n     }\n \n     @Override\n     public boolean hasNextAvailable(int timeout, TimeUnit timeUnit) {\n+        checkExceptionState();\n         long deadline = System.currentTimeMillis() + timeUnit.toMillis(timeout);\n         try {\n-            do {\n-                long waitTime = deadline - System.currentTimeMillis();\n-                waitForData(waitTime);\n-            } while (peekEvent == null && System.currentTimeMillis() < deadline && !eventStream.hasNext());\n+            while (peekNullable() == null && System.currentTimeMillis() < deadline) {\n+                lock.lock();\n+                try {\n+                    long waitTime = deadline - System.currentTimeMillis();\n+                    // Check if an event has arrived or if the wait time is zero. In both cases, we don't have to wait.\n+                    if (peekNullable() == null || waitTime <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNDg1MA=="}, "originalCommit": {"oid": "112339f7fa44f8983b7c0792e2562567d6bcec2e"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3221, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}