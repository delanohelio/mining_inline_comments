{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3ODMwODEx", "number": 1455, "title": "[#1089] Scan both methods and fields for IDs and Aggregate Member annotations", "bodyText": "This pull request resolves #1089\nIn order to support methods as well as fields for these annotations, most of the method signatures that deal with these annotations have lowered requirement to Java reflection Member interface, since this is the closes common ancestor of both Field and Method. This is especially evident for AggregateMember annotation and it's related ChildEntityDefinition classes.\nAnnotation values must be read from a class that implements AnnotatedElement. Since AnnotatedElement and Member are not connected, some utils are different and there are some explicit casting to work around the fact that Method and Field have no common ancestor that implements both of these interfaces.\nThe requirement for Methods to be eligible for ID and AggregateMember annotations is to return a non Void value and have no method parameters.\nAnnotatedAggregateModel has been refactored in an attempt to simplify it and make it more understandable. Some parts would have gotten quite complex with both Method and Fields in play, especially since there's no common ancestor for all the required operations.", "createdAt": "2020-06-22T10:07:10Z", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455", "merged": true, "mergeCommit": {"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86"}, "closed": true, "closedAt": "2020-07-23T11:10:05Z", "author": {"login": "sandjelkovic"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchPqOmgH2gAyNDM3ODMwODExOjc5OTllMzJjZDgyYzUxM2FmY2Y5NWEyMTU5ZTZjMWQ1YTcyOWIwZWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3sGndAH2gAyNDM3ODMwODExOjk5YWVhNTNlMmRlY2RjNDRjYTg3YjUxMDczYWM4OGFiZWUwOGFjZmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7999e32cd82c513afcf95a2159e6c1d5a729b0ec", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/7999e32cd82c513afcf95a2159e6c1d5a729b0ec", "committedDate": "2020-05-14T16:00:17Z", "message": "Add support to use and annotate methods for IDs and Aggregate versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2661d85e862c549a6e2db0a6e0d4a11eb58b35d", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/a2661d85e862c549a6e2db0a6e0d4a11eb58b35d", "committedDate": "2020-06-01T10:24:19Z", "message": "Add support for AggregateMember annotation on methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fcc8b508bbf5edb7d166017a2f842fc2cad07d1", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/9fcc8b508bbf5edb7d166017a2f842fc2cad07d1", "committedDate": "2020-06-01T10:25:08Z", "message": "Merge branch 'master' into feature/1089-annotated-methods-and-fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67ed965f79f373e76a4e3cdc4718b0f2cf7c0c1f", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/67ed965f79f373e76a4e3cdc4718b0f2cf7c0c1f", "committedDate": "2020-06-02T13:40:20Z", "message": "Add tests for AggregateMember annotation on methods and verify event forwarding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c399c9d2ecbb81b926bb42a7bbad4e1d8d05172", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/1c399c9d2ecbb81b926bb42a7bbad4e1d8d05172", "committedDate": "2020-06-03T09:16:37Z", "message": "Merge branch 'master' into feature/1089-annotated-methods-and-fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0375dd02a4d6978469e46fd48f9cbdb0b270f487", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/0375dd02a4d6978469e46fd48f9cbdb0b270f487", "committedDate": "2020-06-03T12:18:42Z", "message": "Add missing JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a832bbbb5dc30bfaa4737739d178e8125bce115", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/9a832bbbb5dc30bfaa4737739d178e8125bce115", "committedDate": "2020-06-18T13:01:05Z", "message": "Refactor and add more tests for ReflectionUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bad5fb7ce8a6c5adfced70579c58584f82cf0e34", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/bad5fb7ce8a6c5adfced70579c58584f82cf0e34", "committedDate": "2020-06-19T11:41:06Z", "message": "Move Distinct list to it's own Utils class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "612736878688b7c8e0732ca07517e71df4909851", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/612736878688b7c8e0732ca07517e71df4909851", "committedDate": "2020-06-19T12:29:21Z", "message": "Merge branch 'master' into feature/1089-annotated-methods-and-fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a0574ba7468de01783049ee57819e7ba7813e72", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/2a0574ba7468de01783049ee57819e7ba7813e72", "committedDate": "2020-06-23T11:31:16Z", "message": "Adjust Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "786c2af08f24edebf338ec9bd814435907507b85", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/786c2af08f24edebf338ec9bd814435907507b85", "committedDate": "2020-06-23T11:41:46Z", "message": "Delegate deprecated Field only method to new universal implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "committedDate": "2020-06-23T11:43:34Z", "message": "Extract exception message to a single field"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDYyNzE2", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#pullrequestreview-436462716", "createdAt": "2020-06-24T09:07:47Z", "commit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTowNzo0N1rOGoJmMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxODo0MFrOGoUQjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1MzQ1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** Returns a new list containing unique elements from the given {@code list}. Original list is not modified.\n          \n          \n            \n                 * @param list Original list that will not be modified\n          \n          \n            \n                /** \n          \n          \n            \n                 * Returns a new list containing unique elements from the given {@code list}. Original list is not modified.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param list Original list that will not be modified", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444753458", "createdAt": "2020-06-24T09:07:47Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/common/ListUtils.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.axonframework.common;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility methods for operations on lists.\n+ *\n+ * @author Stefan Andjelkovic\n+ * @since 4.4\n+ */\n+public abstract class ListUtils {\n+\n+    private ListUtils() {\n+        // prevent instantiation\n+    }\n+\n+    /** Returns a new list containing unique elements from the given {@code list}. Original list is not modified.\n+     * @param list Original list that will not be modified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1NjAwMA==", "bodyText": "Shouldn't this line state something like the target object the given {@code method} is invoked on?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444756000", "createdAt": "2020-06-24T09:12:05Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/common/ReflectionUtils.java", "diffHunk": "@@ -325,6 +340,114 @@ public static boolean isTransient(Field field) {\n         return Optional.of((Class<?>) ((ParameterizedType) genericType).getActualTypeArguments()[genericTypeIndex]);\n     }\n \n+    /**\n+     * Resolve a generic type parameter from a member declaration\n+     *\n+     * @param member           The member to find generic parameters for\n+     * @param genericTypeIndex The index of the type\n+     * @return an optional that contains the resolved type, if found\n+     */\n+    public static Optional<Class<?>> resolveMemberGenericType(Member member, int genericTypeIndex) {\n+        final Type genericType = getMemberGenericType(member);\n+        if (!(genericType instanceof ParameterizedType)\n+                || ((ParameterizedType) genericType).getActualTypeArguments().length <= genericTypeIndex) {\n+            return Optional.empty();\n+        }\n+        return Optional.of((Class<?>) ((ParameterizedType) genericType).getActualTypeArguments()[genericTypeIndex]);\n+    }\n+\n+    /**\n+     * Invokes and returns the return value of the given {@code method} in the given {@code object}. If necessary, the method is\n+     * made accessible, assuming the security manager allows it.\n+     * @param method The method to invoke\n+     * @param object The target object to retrieve the field's value from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1NzE1MA==", "bodyText": "I am assuming this constant can be private. If not, it'll require some javadoc to be added.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444757150", "createdAt": "2020-06-24T09:14:04Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/common/ReflectionUtils.java", "diffHunk": "@@ -34,6 +48,7 @@\n      * A map of Primitive types to their respective wrapper types.\n      */\n     private static final Map<Type, Class<?>> primitiveWrapperTypeMap = new HashMap<>(8);\n+    public static final String UNSUPPORTED_MEMBER_TYPE_EXCEPTION_MESSAGE = \"Unsupported member type [%s]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1OTU2Mg==", "bodyText": "Missing javadoc on this method.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444759562", "createdAt": "2020-06-24T09:18:02Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java", "diffHunk": "@@ -110,6 +110,15 @@ public static boolean isAnnotationPresent(AnnotatedElement element, String annot\n         return findAnnotationAttributes(element, annotationType.getName());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<T> findAnnotationAttribute(AnnotatedElement element,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxNjE3NA==", "bodyText": "Please add by what this method is being replaced on the @deprecated line of javadoc.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444816174", "createdAt": "2020-06-24T11:04:49Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java", "diffHunk": "@@ -72,31 +76,41 @@\n      *\n      * @param field a {@link java.lang.reflect.Field} containing a Child Entity\n      * @return true if the type is as required by the implementation and false if it is not\n+     * @deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyODIwNA==", "bodyText": "I'd rename this variable to memberValue.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444828204", "createdAt": "2020-06-24T11:30:42Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityCollectionDefinition.java", "diffHunk": "@@ -86,9 +98,9 @@ protected boolean isFieldTypeSupported(Field field) {\n     @Override\n     protected <T> Stream<Object> resolveEventTargets(EventMessage message,\n                                                      T parentEntity,\n-                                                     Field field,\n+                                                     Member member,\n                                                      ForwardingMode eventForwardingMode) {\n-        Iterable<Object> fieldValue = ReflectionUtils.getFieldValue(field, parentEntity);\n+        Iterable<Object> fieldValue = ReflectionUtils.getMemberValue(member, parentEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyODQ4MQ==", "bodyText": "I'd rename this variable to memberValue.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444828481", "createdAt": "2020-06-24T11:31:15Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityMapDefinition.java", "diffHunk": "@@ -65,25 +77,24 @@ protected boolean isFieldTypeSupported(Field field) {\n     @Override\n     protected <T> Object resolveCommandTarget(CommandMessage<?> msg,\n                                               T parent,\n-                                              Field field,\n+                                              Member member,\n                                               EntityModel<Object> childEntityModel) {\n         Map<String, Property<Object>> commandHandlerRoutingKeys =\n-                extractCommandHandlerRoutingKeys(field, childEntityModel);\n+                extractCommandHandlerRoutingKeys(member, childEntityModel);\n \n         Object routingValue = commandHandlerRoutingKeys.get(msg.getCommandName())\n                                                        .getValue(msg.getPayload());\n-        Map<?, ?> fieldValue = ReflectionUtils.getFieldValue(field, parent);\n+        Map<?, ?> fieldValue = ReflectionUtils.getMemberValue(member, parent);\n \n         return fieldValue == null ? null : fieldValue.get(routingValue);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n     protected <T> Stream<Object> resolveEventTargets(EventMessage message,\n                                                      T parentEntity,\n-                                                     Field field,\n+                                                     Member member,\n                                                      ForwardingMode eventForwardingMode) {\n-        Map<?, Object> fieldValue = ReflectionUtils.getFieldValue(field, parentEntity);\n+        Map<?, Object> fieldValue = ReflectionUtils.getMemberValue(member, parentEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0MzAyNg==", "bodyText": "I think this constant should be private, or otherwise javadoc should be included.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444843026", "createdAt": "2020-06-24T12:00:46Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -188,6 +194,7 @@ public AnnotatedAggregateMetaModelFactory(ParameterResolverFactory parameterReso\n \n     private class AnnotatedAggregateModel<T> implements AggregateModel<T> {\n \n+        public static final String JAVAX_PERSISTENCE_ID = \"javax.persistence.Id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0Njg1OQ==", "bodyText": "Nit: we could move this to a private method maybe, to deduplicate the Field and Method invocations.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444846859", "createdAt": "2020-06-24T12:08:30Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -303,62 +311,99 @@ private void inspectAggregateTypes() {\n \n         private String findDeclaredType(Class<?> type) {\n             return AnnotationUtils.findAnnotationAttributes(type, AggregateRoot.class)\n-                                  .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0).orElse(type.getSimpleName());\n+                                  .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0)\n+                                  .orElse(type.getSimpleName());\n         }\n \n-        private void inspectFields() {\n+        private void inspectFieldsAndMethods() {\n             ServiceLoader<ChildEntityDefinition> childEntityDefinitions =\n                     ServiceLoader.load(ChildEntityDefinition.class, inspectedType.getClassLoader());\n-            boolean persistenceId = false;\n+            ArrayList<Member> entityIdMembers = new ArrayList<>();\n+            ArrayList<Member> persistenceIdMembers = new ArrayList<>();\n+            ArrayList<Member> aggregateVersionMembers = new ArrayList<>();\n             for (Class<?> type : handlerInspector.getAllHandlers().keySet()) {\n                 for (Field field : ReflectionUtils.fieldsOf(type)) {\n                     childEntityDefinitions.forEach(def -> def.createChildDefinition(field, this).ifPresent(child -> {\n                         children.add(child);\n-                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers,\n-                                                                              type,\n-                                                                              handler));\n+                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n                     }));\n-\n-                    if (AnnotationUtils.findAnnotationAttributes(field, EntityId.class).isPresent()) {\n-                        if (identifierField != null && !field.equals(identifierField) && !persistenceId) {\n-                            throw new AggregateModellingException(format(\n-                                    \"Aggregate [%s] has two identifier fields [%s] and [%s].\",\n-                                    inspectedType,\n-                                    identifierField,\n-                                    field));\n-                        }\n-                        persistenceId = false;\n-                        identifierField = field;\n-                        Map<String, Object> attributes =\n-                                AnnotationUtils.findAnnotationAttributes(field, EntityId.class).get();\n-                        if (!\"\".equals(attributes.get(\"routingKey\"))) {\n-                            routingKey = (String) attributes.get(\"routingKey\");\n-                        } else {\n-                            routingKey = field.getName();\n-                        }\n-                    }\n-                    if (identifierField == null\n-                            && AnnotationUtils.findAnnotationAttributes(field, \"javax.persistence.Id\")\n-                                              .isPresent()) {\n-                            persistenceId = true;\n-                            identifierField = field;\n-                            routingKey = field.getName();\n-                    }\n+                    AnnotationUtils.findAnnotationAttributes(field, EntityId.class)\n+                                   .ifPresent(attributes -> entityIdMembers.add(field));\n+                    AnnotationUtils.findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID)\n+                                   .ifPresent(attributes -> persistenceIdMembers.add(field));\n                     AnnotationUtils.findAnnotationAttributes(field, AggregateVersion.class)\n+                                   .ifPresent(attributes -> aggregateVersionMembers.add(field));\n+                }\n+                for (Method method : ReflectionUtils.methodsOf(type)) {\n+                    childEntityDefinitions.forEach(def -> def.createChildDefinition(method, this).ifPresent(child -> {\n+                        children.add(child);\n+                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n+                    }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0OTA3OQ==", "bodyText": "Nit: I'd replace the type ArrayList for List here.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444849079", "createdAt": "2020-06-24T12:13:00Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -303,62 +311,99 @@ private void inspectAggregateTypes() {\n \n         private String findDeclaredType(Class<?> type) {\n             return AnnotationUtils.findAnnotationAttributes(type, AggregateRoot.class)\n-                                  .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0).orElse(type.getSimpleName());\n+                                  .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0)\n+                                  .orElse(type.getSimpleName());\n         }\n \n-        private void inspectFields() {\n+        private void inspectFieldsAndMethods() {\n             ServiceLoader<ChildEntityDefinition> childEntityDefinitions =\n                     ServiceLoader.load(ChildEntityDefinition.class, inspectedType.getClassLoader());\n-            boolean persistenceId = false;\n+            ArrayList<Member> entityIdMembers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1NzQ5MA==", "bodyText": "I'd add something to this exception stating that no parameters are expected for an aggregate's annotated methods. Should be careful with the wording though, as a command handler is also an annotated method of an aggregate of course \ud83d\ude05", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444857490", "createdAt": "2020-06-24T12:28:46Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -303,62 +311,99 @@ private void inspectAggregateTypes() {\n \n         private String findDeclaredType(Class<?> type) {\n             return AnnotationUtils.findAnnotationAttributes(type, AggregateRoot.class)\n-                                  .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0).orElse(type.getSimpleName());\n+                                  .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0)\n+                                  .orElse(type.getSimpleName());\n         }\n \n-        private void inspectFields() {\n+        private void inspectFieldsAndMethods() {\n             ServiceLoader<ChildEntityDefinition> childEntityDefinitions =\n                     ServiceLoader.load(ChildEntityDefinition.class, inspectedType.getClassLoader());\n-            boolean persistenceId = false;\n+            ArrayList<Member> entityIdMembers = new ArrayList<>();\n+            ArrayList<Member> persistenceIdMembers = new ArrayList<>();\n+            ArrayList<Member> aggregateVersionMembers = new ArrayList<>();\n             for (Class<?> type : handlerInspector.getAllHandlers().keySet()) {\n                 for (Field field : ReflectionUtils.fieldsOf(type)) {\n                     childEntityDefinitions.forEach(def -> def.createChildDefinition(field, this).ifPresent(child -> {\n                         children.add(child);\n-                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers,\n-                                                                              type,\n-                                                                              handler));\n+                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n                     }));\n-\n-                    if (AnnotationUtils.findAnnotationAttributes(field, EntityId.class).isPresent()) {\n-                        if (identifierField != null && !field.equals(identifierField) && !persistenceId) {\n-                            throw new AggregateModellingException(format(\n-                                    \"Aggregate [%s] has two identifier fields [%s] and [%s].\",\n-                                    inspectedType,\n-                                    identifierField,\n-                                    field));\n-                        }\n-                        persistenceId = false;\n-                        identifierField = field;\n-                        Map<String, Object> attributes =\n-                                AnnotationUtils.findAnnotationAttributes(field, EntityId.class).get();\n-                        if (!\"\".equals(attributes.get(\"routingKey\"))) {\n-                            routingKey = (String) attributes.get(\"routingKey\");\n-                        } else {\n-                            routingKey = field.getName();\n-                        }\n-                    }\n-                    if (identifierField == null\n-                            && AnnotationUtils.findAnnotationAttributes(field, \"javax.persistence.Id\")\n-                                              .isPresent()) {\n-                            persistenceId = true;\n-                            identifierField = field;\n-                            routingKey = field.getName();\n-                    }\n+                    AnnotationUtils.findAnnotationAttributes(field, EntityId.class)\n+                                   .ifPresent(attributes -> entityIdMembers.add(field));\n+                    AnnotationUtils.findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID)\n+                                   .ifPresent(attributes -> persistenceIdMembers.add(field));\n                     AnnotationUtils.findAnnotationAttributes(field, AggregateVersion.class)\n+                                   .ifPresent(attributes -> aggregateVersionMembers.add(field));\n+                }\n+                for (Method method : ReflectionUtils.methodsOf(type)) {\n+                    childEntityDefinitions.forEach(def -> def.createChildDefinition(method, this).ifPresent(child -> {\n+                        children.add(child);\n+                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n+                    }));\n+                    AnnotationUtils.findAnnotationAttributes(method, EntityId.class)\n                                    .ifPresent(attributes -> {\n-                                       if (versionField != null && !field.equals(versionField)) {\n-                                           throw new AggregateModellingException(format(\n-                                                   \"Aggregate [%s] has two version fields [%s] and [%s].\",\n-                                                   inspectedType,\n-                                                   versionField,\n-                                                   field));\n-                                       }\n-                                       versionField = field;\n+                                       assertValidValueProvidingMethod(method);\n+                                       entityIdMembers.add(method);\n+                                   });\n+                    AnnotationUtils.findAnnotationAttributes(method, JAVAX_PERSISTENCE_ID)\n+                                   .ifPresent(attributes -> {\n+                                       assertValidValueProvidingMethod(method);\n+                                       persistenceIdMembers.add(method);\n+                                   });\n+                    AnnotationUtils.findAnnotationAttributes(method, AggregateVersion.class)\n+                                   .ifPresent(attributes -> {\n+                                       assertValidValueProvidingMethod(method);\n+                                       aggregateVersionMembers.add(method);\n                                    });\n                 }\n             }\n-            if (identifierField != null) {\n-                final Class<?> idClazz = identifierField.getType();\n+\n+            findIdentifierMember(distinct(entityIdMembers), distinct(persistenceIdMembers))\n+                    .ifPresent(this::setIdentifierAndRoutingKey);\n+            if (!aggregateVersionMembers.isEmpty()) {\n+                setVersionMember(aggregateVersionMembers.get(0));\n+            }\n+            assertIdentifierValidity(identifierMember);\n+        }\n+\n+        private void setIdentifierAndRoutingKey(Member identifier) {\n+            identifierMember = identifier;\n+            routingKey = findRoutingKey((AccessibleObject) identifier)\n+                    .orElseGet(identifier::getName);\n+        }\n+\n+        private Optional<Member> findIdentifierMember(List<Member> entityIdMembers,\n+                                                      List<Member> persistenceIdMembers) {\n+            if (entityIdMembers.size() > 1) {\n+                throw new AggregateModellingException(format(\n+                        \"Aggregate [%s] has more than one identifier member\",\n+                        inspectedType));\n+            }\n+            if (!entityIdMembers.isEmpty()) {\n+                return Optional.of(entityIdMembers.get(0));\n+            } else if (!persistenceIdMembers.isEmpty()) {\n+                return Optional.of(persistenceIdMembers.get(0));\n+            }\n+            return Optional.empty();\n+        }\n+\n+        private void assertValidValueProvidingMethod(Method method) {\n+            if (method.getParameterCount() != 0) {\n+                throw new AggregateModellingException(format(\n+                        \"Aggregate [%s] has an annotated method [%s] with parameters\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MTM1NQ==", "bodyText": "Somewhat of a bummer, but this isn't backwards compatible. Than again, chances are slim users have implemented this themselves...let's discuss whether we should go forward with this or deprecate the Field methods and add a Member method.\nThe latter would introduce a similar change as you did for the AbstractChildEntityDefinition#isFieldTypeSupported(Field), on all the methods where Field has been replaced by Member.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444881355", "createdAt": "2020-06-24T13:11:03Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/ForwardingMode.java", "diffHunk": "@@ -34,12 +34,12 @@\n     /**\n      * Initializes an instance of a {@link ForwardingMode}.\n      *\n-     * @param field       The {@link java.lang.reflect.Field} to apply a ForwardingMode on. Provided to be able to check\n+     * @param member      The {@link java.lang.reflect.Member} to apply a ForwardingMode on. Provided to be able to check\n      *                    for annotations attributes which might assist in the forwarding process.\n      * @param childEntity A {@link EntityModel} constructed from the\n      *                    given {@code field}.\n      */\n-    default void initialize(Field field, EntityModel childEntity) {\n+    default void initialize(Member member, EntityModel childEntity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MjYxMA==", "bodyText": "Same backwards compatibility argument we need to discuss.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444882610", "createdAt": "2020-06-24T13:13:04Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java", "diffHunk": "@@ -72,31 +76,41 @@\n      *\n      * @param field a {@link java.lang.reflect.Field} containing a Child Entity\n      * @return true if the type is as required by the implementation and false if it is not\n+     * @deprecated\n      */\n+    @Deprecated\n     protected abstract boolean isFieldTypeSupported(Field field);\n \n+    /**\n+     * Check whether the given {@link java.lang.reflect.Member} is of a type supported by this definition.\n+     *\n+     * @param member a {@link java.lang.reflect.Member} containing or returning a Child Entity\n+     * @return true if the type is as required by the implementation and false if it is not\n+     */\n+    protected abstract boolean isMemberTypeSupported(Member member);\n+\n     /**\n      * Extracts the Child Entity contained in the given {@code declaringEntity} as an {@link EntityModel}.\n      * The type of the Child Entity is defined through a key in the provided {@code attributes} or based on given\n      * {@link java.lang.reflect.Field}.\n      *\n      * @param declaringEntity the {@link EntityModel} declaring the given {@code field}\n      * @param attributes      a {@link java.util.Map} containing the {@link AggregateMember} attributes\n-     * @param field           the {@link java.lang.reflect.Field} containing the Child Entity.\n+     * @param member          the {@link java.lang.reflect.Member} containing the Child Entity.\n      * @param <T>             the type {@code T} of the given {@code declaringEntity} {@link EntityModel}\n      * @return the Child Entity contained in the {@code declaringEntity}\n      */\n     protected abstract <T> EntityModel<Object> extractChildEntityModel(EntityModel<T> declaringEntity,\n                                                                        Map<String, Object> attributes,\n-                                                                       Field field);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MjgxNA==", "bodyText": "Same backwards compatibility argument we need to discuss.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444882814", "createdAt": "2020-06-24T13:13:25Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java", "diffHunk": "@@ -113,28 +127,28 @@ private ForwardingMode instantiateForwardingMode(Field field,\n      * @param msg              the {@link org.axonframework.commandhandling.CommandMessage} which is being resolved to a\n      *                         target entity\n      * @param parent           the {@code parent} Entity of type {@code T} of this Child Entity\n-     * @param field            the {@link java.lang.reflect.Field} containing the Child Entity.\n+     * @param member           the {@link java.lang.reflect.Member} containing the Child Entity.\n      * @param childEntityModel the {@link EntityModel} for the Child Entity\n      * @param <T>              the type {@code T} of the given {@code parent} Entity\n      * @return the Child Entity which is the target of the incoming {@link org.axonframework.commandhandling.CommandMessage}.\n      */\n     protected abstract <T> Object resolveCommandTarget(CommandMessage<?> msg,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MjkyNg==", "bodyText": "Same backwards compatibility argument we need to discuss.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444882926", "createdAt": "2020-06-24T13:13:36Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java", "diffHunk": "@@ -113,28 +127,28 @@ private ForwardingMode instantiateForwardingMode(Field field,\n      * @param msg              the {@link org.axonframework.commandhandling.CommandMessage} which is being resolved to a\n      *                         target entity\n      * @param parent           the {@code parent} Entity of type {@code T} of this Child Entity\n-     * @param field            the {@link java.lang.reflect.Field} containing the Child Entity.\n+     * @param member           the {@link java.lang.reflect.Member} containing the Child Entity.\n      * @param childEntityModel the {@link EntityModel} for the Child Entity\n      * @param <T>              the type {@code T} of the given {@code parent} Entity\n      * @return the Child Entity which is the target of the incoming {@link org.axonframework.commandhandling.CommandMessage}.\n      */\n     protected abstract <T> Object resolveCommandTarget(CommandMessage<?> msg,\n                                                        T parent,\n-                                                       Field field,\n+                                                       Member member,\n                                                        EntityModel<Object> childEntityModel);\n \n     /**\n      * Retrieves the routing keys of every command handler on the given {@code childEntityModel} to be able to correctly\n      * route commands to Entities.\n      *\n-     * @param field            a {@link java.lang.reflect.Field} denoting the Child Entity upon which the\n+     * @param member           a {@link java.lang.reflect.Member} denoting the Child Entity upon which the\n      *                         {@code childEntityModel} is based\n      * @param childEntityModel a {@link EntityModel} to retrieve the routing key properties from\n      * @return a {@link java.util.Map} of key/value types {@link java.lang.String}\n      * {@link org.axonframework.common.property.Property} from Command Message name to routing key\n      */\n     @SuppressWarnings(\"WeakerAccess\")\n-    protected Map<String, Property<Object>> extractCommandHandlerRoutingKeys(Field field,\n+    protected Map<String, Property<Object>> extractCommandHandlerRoutingKeys(Member member,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MzExMQ==", "bodyText": "Same backwards compatibility argument we need to discuss.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444883111", "createdAt": "2020-06-24T13:13:54Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java", "diffHunk": "@@ -196,7 +210,7 @@ private ForwardingMode instantiateForwardingMode(Field field,\n      */\n     protected abstract <T> Stream<Object> resolveEventTargets(EventMessage message,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MzQ1Nw==", "bodyText": "Same backwards compatibility argument we need to discuss.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444883457", "createdAt": "2020-06-24T13:14:23Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/ChildEntityDefinition.java", "diffHunk": "@@ -29,14 +29,14 @@\n public interface ChildEntityDefinition {\n \n     /**\n-     * Inspect the given {@code field}, which is declared on the given {@code declaringEntity} for the presence of a\n+     * Inspect the given {@code member}, which is declared on the given {@code declaringEntity} for the presence of a\n      * Child Entity.\n      *\n-     * @param field           The field potentially containing a Child entity\n+     * @param member          The member potentially containing a Child entity\n      * @param declaringEntity The entity model declaring the field\n      * @param <T>             The type of entity on which the field is declared\n      * @return an optional that resolved to a ChildEntity if the field represents a child.\n      */\n-    <T> Optional<ChildEntity<T>> createChildDefinition(Field field, EntityModel<T> declaringEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxNzExNA==", "bodyText": "When matching the models' routing key with the routing key in the @CommandHandler, it is expected to be identical to the property name in the command. So, not the method name, as is being validated here. As such, we should remove any get prepending the routing key if it comes from a method.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444917114", "createdAt": "2020-06-24T14:02:55Z", "author": {"login": "smcvb"}, "path": "modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java", "diffHunk": "@@ -247,6 +267,26 @@ void testFindIdentifier() {\n         assertEquals(\"id\", inspector.routingKey());\n     }\n \n+    @Test\n+    void testFindGetterIdentifier() {\n+        AggregateModel<SomeGetterIdAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(SomeGetterIdAnnotatedHandlers.class);\n+\n+        assertEquals(\"SomeGetterIdAnnotatedHandlers\", inspector.type());\n+        assertEquals(\"id\", inspector.getIdentifier(new SomeGetterIdAnnotatedHandlers()));\n+        assertEquals(\"getId\", inspector.routingKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxODQ1OA==", "bodyText": "This scenario would be a valid use case where the routingKey should be set on the @EntityId/@AggregateIdentifier. Would be smart to be specific about this in the javadoc too.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444918458", "createdAt": "2020-06-24T14:04:59Z", "author": {"login": "smcvb"}, "path": "modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java", "diffHunk": "@@ -247,6 +267,26 @@ void testFindIdentifier() {\n         assertEquals(\"id\", inspector.routingKey());\n     }\n \n+    @Test\n+    void testFindGetterIdentifier() {\n+        AggregateModel<SomeGetterIdAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(SomeGetterIdAnnotatedHandlers.class);\n+\n+        assertEquals(\"SomeGetterIdAnnotatedHandlers\", inspector.type());\n+        assertEquals(\"id\", inspector.getIdentifier(new SomeGetterIdAnnotatedHandlers()));\n+        assertEquals(\"getId\", inspector.routingKey());\n+    }\n+\n+    @Test\n+    void testFindMethodIdentifier() {\n+        AggregateModel<SomeMethodIdAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(SomeMethodIdAnnotatedHandlers.class);\n+\n+        assertEquals(\"SomeMethodIdAnnotatedHandlers\", inspector.type());\n+        assertEquals(\"id\", inspector.getIdentifier(new SomeMethodIdAnnotatedHandlers()));\n+        assertEquals(\"calculatedId\", inspector.routingKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNjMxMg==", "bodyText": "This case, when users only provide an @Id field, is obviously rather problematic on a method. Not sure we can do anything about this...", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444926312", "createdAt": "2020-06-24T14:16:08Z", "author": {"login": "smcvb"}, "path": "modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java", "diffHunk": "@@ -256,6 +296,24 @@ void testFindJavaxPersistenceIdentifier() {\n         assertEquals(\"id\", inspector.routingKey());\n     }\n \n+    @Test\n+    void testFindJavaxPersistenceGetterIdentifier() {\n+        AggregateModel<JavaxPersistenceGetterAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(JavaxPersistenceGetterAnnotatedHandlers.class);\n+\n+        assertEquals(\"id\", inspector.getIdentifier(new JavaxPersistenceGetterAnnotatedHandlers()));\n+        assertEquals(\"getId\", inspector.routingKey());\n+    }\n+\n+    @Test\n+    void testFindJavaxPersistenceMethodIdentifier() {\n+        AggregateModel<JavaxPersistenceMethodIdAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(JavaxPersistenceMethodIdAnnotatedHandlers.class);\n+\n+        assertEquals(\"id\", inspector.getIdentifier(new JavaxPersistenceMethodIdAnnotatedHandlers()));\n+        assertEquals(\"calculatedId\", inspector.routingKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyODE0MA==", "bodyText": "Shouldn't GetterTypedIdentifierAggregate be used for this test instead of TypedIdentifierAggregate?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444928140", "createdAt": "2020-06-24T14:18:40Z", "author": {"login": "smcvb"}, "path": "modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java", "diffHunk": "@@ -302,6 +370,33 @@ void typedAggregateIdentifier() {\n                 () -> AnnotatedAggregateMetaModelFactory.inspectAggregate(TypedIdentifierAggregate.class));\n     }\n \n+    @Test\n+    void testGetterTypedAggregateIdentifier() {\n+        assertThrows(\n+                AxonConfigurationException.class,\n+                () -> AnnotatedAggregateMetaModelFactory.inspectAggregate(TypedIdentifierAggregate.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84d7f38a405232e8cbf6fcd9e14db6e512282487", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/84d7f38a405232e8cbf6fcd9e14db6e512282487", "committedDate": "2020-07-02T12:59:21Z", "message": "Review remarks and improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f42eec03ca30afa91a004799b7790da79b32232", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/7f42eec03ca30afa91a004799b7790da79b32232", "committedDate": "2020-07-02T14:37:24Z", "message": "Improvements based on review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11a6593f4b6d6a826f47f42c7213c3a4103b5472", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/11a6593f4b6d6a826f47f42c7213c3a4103b5472", "committedDate": "2020-07-02T14:52:04Z", "message": "Merge branch 'master' into feature/1089-annotated-methods-and-fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ebe824c5f412fafb0f0a9aef09e06b94242f583", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/5ebe824c5f412fafb0f0a9aef09e06b94242f583", "committedDate": "2020-07-06T08:47:23Z", "message": "Strip Getter names to mimic fields for routing keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "065f517477993c92ea8c7e73fcff371009d5a97d", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/065f517477993c92ea8c7e73fcff371009d5a97d", "committedDate": "2020-07-16T07:54:10Z", "message": "Update messaging/src/main/java/org/axonframework/common/ListUtils.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76802400d2edf364a9a2c1738a35f33151434448", "author": {"user": {"login": "sandjelkovic", "name": "Stefan An\u0111elkovi\u0107"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/76802400d2edf364a9a2c1738a35f33151434448", "committedDate": "2020-07-16T08:08:41Z", "message": "Merge branch 'master' into feature/1089-annotated-methods-and-fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f89594495abfe4d65bf43bdc8bc452cb5cdd9afe", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/f89594495abfe4d65bf43bdc8bc452cb5cdd9afe", "committedDate": "2020-07-20T16:21:34Z", "message": "Minor indentation and javadoc adjustments\n\nPerform some minute changes when it comes to indentation and javadoc, as\n well as the removal of unused code and unnecessary warnings\n\n#1089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e92bdc7082a4a9d8fa1027e496139c655a7b2874", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/e92bdc7082a4a9d8fa1027e496139c655a7b2874", "committedDate": "2020-07-21T11:53:40Z", "message": "Javadoc adjustments\n\nPerform several javadoc adjustments to clarify the intent of the\nmethod/class, or to simply clean up the documentation.\n\n#1089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4f1fe73d136d894141205d89f8bc83df8ffa825", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/c4f1fe73d136d894141205d89f8bc83df8ffa825", "committedDate": "2020-07-21T11:54:10Z", "message": "Include method target\n\nInclude this annotation to be allowed on methods\n\n#1089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c113bfe6d0733a020975a937d33faad322179b59", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/c113bfe6d0733a020975a937d33faad322179b59", "committedDate": "2020-07-21T11:54:38Z", "message": "Simple renames and indentation changes\n\nSimple renames and indentation changes\n\n#1089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08c3e18e75bb28e33875eea63a395747f2d324a5", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/08c3e18e75bb28e33875eea63a395747f2d324a5", "committedDate": "2020-07-21T12:10:41Z", "message": "Fine tune overall inspectFieldsAndMethods process\n\n- Add static import for AnnotationUtils.findAnnotationAttributes\n- Rename \"type\" to \"handlerType\" to be more specific\n- Adjust indentation for readability\n- Add some comments, whenever applicable, for clarification\n- Reorder methods to follow regular invoke ordering\n- Add annotation name to assertValidValueProvidingMethod() method to\nimprove exception message\n- Add javadoc to private getMemberIdentifierName to clarify intent\n\n- Adjust setVersionMember to validate if more than one is provided and\nif so, throw an exception\n- Add logger to note version member settings\n- Add tests to validate aggregate version member logic\n- Use tertiary operators\n\n#1089"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMzkzNzM5", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#pullrequestreview-452393739", "createdAt": "2020-07-21T12:14:31Z", "commit": {"oid": "08c3e18e75bb28e33875eea63a395747f2d324a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d28efdfda546b9470c8734ad9ce14ce192d0717a", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/d28efdfda546b9470c8734ad9ce14ce192d0717a", "committedDate": "2020-07-21T14:06:30Z", "message": "Fix sonarqube issues\n\n- Add some missing deprecation javadoc\n- Adjust complexity of some tests\n\n#1089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3e7fd4e39613e5a6bd01eb60f9870f6d9fc1912", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/e3e7fd4e39613e5a6bd01eb60f9870f6d9fc1912", "committedDate": "2020-07-21T15:12:47Z", "message": "Merge remote-tracking branch 'origin/master' into feature/1089-annotated-methods-and-fields"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzOTQ1NjQz", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#pullrequestreview-453945643", "createdAt": "2020-07-23T08:54:34Z", "commit": {"oid": "e3e7fd4e39613e5a6bd01eb60f9870f6d9fc1912"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODo1NDozNFrOG2BzSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODo1NDozNFrOG2BzSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMwNTgwMg==", "bodyText": "Why not remove abstract from this method and invoke isMemberTypeSupported. Having it this way, you could remove \"dummy\" impls from children of this class.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r459305802", "createdAt": "2020-07-23T08:54:34Z", "author": {"login": "m1l4n54v1c"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java", "diffHunk": "@@ -47,56 +50,68 @@\n \n     @SuppressWarnings(\"unchecked\")  // Suppresses cast to Class of ForwardingMode\n     @Override\n-    public <T> Optional<ChildEntity<T>> createChildDefinition(Field field, EntityModel<T> declaringEntity) {\n-        Map<String, Object> attributes = findAnnotationAttributes(field, AggregateMember.class).orElse(null);\n-        if (attributes == null || !isFieldTypeSupported(field)) {\n+    public <T> Optional<ChildEntity<T>> createChildDefinition(Member member, EntityModel<T> declaringEntity) {\n+        Map<String, Object> attributes =\n+                findAnnotationAttributes((AnnotatedElement) member, AggregateMember.class).orElse(null);\n+        if (attributes == null || !isMemberTypeSupported(member)) {\n             return Optional.empty();\n         }\n \n-        EntityModel<Object> childEntityModel = extractChildEntityModel(declaringEntity, attributes, field);\n+        EntityModel<Object> childEntityModel = extractChildEntityModel(declaringEntity, attributes, member);\n \n-        ForwardingMode eventForwardingMode = instantiateForwardingMode(\n-                field, childEntityModel, (Class<? extends ForwardingMode>) attributes.get(\"eventForwardingMode\")\n+        ForwardingMode<EventMessage<?>> eventForwardingMode = instantiateForwardingMode(\n+                member,\n+                childEntityModel,\n+                (Class<? extends ForwardingMode<EventMessage<?>>>) attributes.get(\"eventForwardingMode\")\n         );\n \n         return Optional.of(new AnnotatedChildEntity<>(\n                 childEntityModel,\n                 (Boolean) attributes.get(\"forwardCommands\"),\n-                (msg, parent) -> resolveCommandTarget(msg, parent, field, childEntityModel),\n-                (msg, parent) -> resolveEventTargets(msg, parent, field, eventForwardingMode)\n+                (msg, parent) -> resolveCommandTarget(msg, parent, member, childEntityModel),\n+                (msg, parent) -> resolveEventTargets(msg, parent, member, eventForwardingMode)\n         ));\n     }\n \n     /**\n-     * Check whether the given {@link java.lang.reflect.Field} is of a type supported by this definition.\n+     * Check whether the given {@link Field} is of a type supported by this definition.\n      *\n-     * @param field a {@link java.lang.reflect.Field} containing a Child Entity\n+     * @param field a {@link Field} containing a Child Entity\n      * @return true if the type is as required by the implementation and false if it is not\n+     * @deprecated in favour of {@link #isMemberTypeSupported(Member)}\n      */\n+    @Deprecated\n     protected abstract boolean isFieldTypeSupported(Field field);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e7fd4e39613e5a6bd01eb60f9870f6d9fc1912"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99aea53e2decdc44ca87b51073ac88abee08acfc", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/99aea53e2decdc44ca87b51073ac88abee08acfc", "committedDate": "2020-07-23T09:34:58Z", "message": "Replace abstract deprecated method for implementation\n\nBy implementing the isFieldTypeSupported(Field) method, we can remove\nthe deprecated implementations on the implementations of the\nAbstractChildEntityDefinition, thus cleaning up more in one go.\n\n#1089"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1764, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}