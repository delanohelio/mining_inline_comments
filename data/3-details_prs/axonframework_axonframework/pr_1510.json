{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NjQ4NzEz", "number": 1510, "title": "Snapshotter optimization", "bodyText": "In a single UOW we should schedule at most one snapshot to be created.\nSince all Axon components use UOW to process a message and since Axon holds a lock on the aggregate we assume that scheduling a snapshot outside of UOW or from several distinct UOWs is less probable so we don't have a guard against those situations.", "createdAt": "2020-09-17T12:56:35Z", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510", "merged": true, "mergeCommit": {"oid": "32779e6c7e50a8ef6e8cd625b1b4f3797aa61ec2"}, "closed": true, "closedAt": "2020-09-22T14:05:51Z", "author": {"login": "m1l4n54v1c"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJda7mgH2gAyNDg4NjQ4NzEzOmJjYmJhMmExN2RkMGMwOTJiMDA1ODM5NzJhNzM1ZDIzYTg1MTM2OGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLX3khgFqTQ5MzQ0OTQwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bcbba2a17dd0c092b00583972a735d23a851368d", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/bcbba2a17dd0c092b00583972a735d23a851368d", "committedDate": "2020-09-16T14:39:13Z", "message": "As a snapshot trigger definition I want to count Domain Event Messages only."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73167745a36832f1716d35ea06a35ec1e0104b9c", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/73167745a36832f1716d35ea06a35ec1e0104b9c", "committedDate": "2020-09-17T12:53:31Z", "message": "Schedule at most one snapshot per aggregate type id per UOW."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNTY4NDU2", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#pullrequestreview-490568456", "createdAt": "2020-09-17T13:03:10Z", "commit": {"oid": "73167745a36832f1716d35ea06a35ec1e0104b9c"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzowMzoxMFrOHThAqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzowNDo1OVrOHThFYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNTgzMg==", "bodyText": "I would change this testcase and include 2 variants.\nMove the \"verify\" code outside of the onCommit. It's unreliable to put assertions there. If the UoW is rolled back, the test passes.\nOne variant should do a UOW Commit, and the other a rollback. In case of the commit there is an invocation, in case of rollback, there isn't", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r490225832", "createdAt": "2020-09-17T13:03:10Z", "author": {"login": "abuijze"}, "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/EventCountSnapshotTriggerDefinitionTest.java", "diffHunk": "@@ -70,24 +70,45 @@ void tearDown() {\n     }\n \n     @Test\n-    void testSnapshotterTriggeredOnUnitOfWorkCommit() {\n+    void testSnapshotterTriggeredOnUnitOfWorkCleanup() {\n         SnapshotTrigger trigger = testSubject.prepareTrigger(aggregate.rootType());\n-        GenericDomainEventMessage<String> msg = new GenericDomainEventMessage<>(\"type\", aggregateIdentifier, (long) 0,\n+        GenericDomainEventMessage<String> msg = new GenericDomainEventMessage<>(\"type\", aggregateIdentifier, 0,\n                                                                                 \"Mock contents\", MetaData.emptyInstance());\n         trigger.eventHandled(msg);\n         trigger.eventHandled(msg);\n         trigger.eventHandled(msg);\n         trigger.eventHandled(msg);\n \n         verify(mockSnapshotter, never()).scheduleSnapshot(aggregate.rootType(), aggregateIdentifier);\n+        CurrentUnitOfWork.get()\n+                         .onCommit(uow -> verify(mockSnapshotter, never())\n+                                 .scheduleSnapshot(aggregate.rootType(), aggregateIdentifier));\n         CurrentUnitOfWork.commit();\n         verify(mockSnapshotter).scheduleSnapshot(aggregate.rootType(), aggregateIdentifier);\n     }\n \n+    @Test\n+    void testSnapshotterTriggeredOnUnitOfWorkCommit() {\n+        SnapshotTrigger trigger = testSubject.prepareTrigger(aggregate.rootType());\n+        GenericDomainEventMessage<String> msg = new GenericDomainEventMessage<>(\"type\", aggregateIdentifier, 0,\n+                                                                                \"Mock contents\", MetaData.emptyInstance());\n+        trigger.initializationFinished();\n+        trigger.eventHandled(msg);\n+        trigger.eventHandled(msg);\n+        trigger.eventHandled(msg);\n+        trigger.eventHandled(msg);\n+\n+        verify(mockSnapshotter, never()).scheduleSnapshot(aggregate.rootType(), aggregateIdentifier);\n+        CurrentUnitOfWork.get()\n+                         .onCommit(uow -> verify(mockSnapshotter)\n+                                 .scheduleSnapshot(aggregate.rootType(), aggregateIdentifier));\n+        CurrentUnitOfWork.commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73167745a36832f1716d35ea06a35ec1e0104b9c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNzA0Mg==", "bodyText": "This blocks multiple invocations from the same unit of work, but will not prevent different UoW to trigger the creation of a snapshot....", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r490227042", "createdAt": "2020-09-17T13:04:59Z", "author": {"login": "abuijze"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/AbstractSnapshotter.java", "diffHunk": "@@ -64,14 +70,23 @@ protected AbstractSnapshotter(Builder builder) {\n \n     @Override\n     public void scheduleSnapshot(Class<?> aggregateType, String aggregateIdentifier) {\n-        if (CurrentUnitOfWork.isStarted()) {\n+        if (CurrentUnitOfWork.isStarted() && CurrentUnitOfWork.get().phase().isBefore(UnitOfWork.Phase.COMMIT)) {\n             CurrentUnitOfWork.get().afterCommit(u -> doScheduleSnapshot(aggregateType, aggregateIdentifier));\n         } else {\n             doScheduleSnapshot(aggregateType, aggregateIdentifier);\n         }\n     }\n \n     private void doScheduleSnapshot(Class<?> aggregateType, String aggregateIdentifier) {\n+        if (CurrentUnitOfWork.isStarted()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73167745a36832f1716d35ea06a35ec1e0104b9c"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "209f9053c35c623d3ad3cdae8ed391036ed6c94f", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/209f9053c35c623d3ad3cdae8ed391036ed6c94f", "committedDate": "2020-09-17T13:47:36Z", "message": "Added a test for rolling back a UoW."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "481f7fb76c67110d8b35f9ebf421ce1211c5c26f", "author": {"user": {"login": "abuijze", "name": "Allard Buijze"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/481f7fb76c67110d8b35f9ebf421ce1211c5c26f", "committedDate": "2020-09-17T14:28:59Z", "message": "Implemented concurrent snapshot prevention"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMzkxMTcy", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#pullrequestreview-491391172", "createdAt": "2020-09-18T11:44:30Z", "commit": {"oid": "481f7fb76c67110d8b35f9ebf421ce1211c5c26f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo0NDozMFrOHUJv-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo1NzowM1rOHUKHuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5MzMwNw==", "bodyText": "I think this method should be private.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r490893307", "createdAt": "2020-09-18T11:44:30Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/AbstractSnapshotter.java", "diffHunk": "@@ -205,6 +264,32 @@ public void run() {\n                 }\n             }\n         }\n+\n+        public Runnable andFinally(Runnable r) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "481f7fb76c67110d8b35f9ebf421ce1211c5c26f"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5NTM1NA==", "bodyText": "Nit: wouldn't hurt to adjust the class level javadoc to specify both angles when a snapshot can be created.\nThus, firstly because during applying the threshold is reached, and secondly when the threshold is reached during initialization.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r490895354", "createdAt": "2020-09-18T11:48:53Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/EventCountSnapshotTriggerDefinition.java", "diffHunk": "@@ -76,24 +78,30 @@ public EventCountSnapshotTrigger(Snapshotter snapshotter, Class<?> aggregateType\n \n         @Override\n         public void eventHandled(EventMessage<?> msg) {\n-            if (++counter >= threshold && msg instanceof DomainEventMessage) {\n+            if (msg instanceof DomainEventMessage && ++counter >= threshold) {\n                 if (CurrentUnitOfWork.isStarted()) {\n-                    CurrentUnitOfWork.get().onPrepareCommit(\n-                            u -> scheduleSnapshot((DomainEventMessage) msg));\n+                    if (initialized) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "481f7fb76c67110d8b35f9ebf421ce1211c5c26f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5ODI1OQ==", "bodyText": "Nit: wouldn't it be beneficial to state this should only occur if the snapshot is triggered in the pre-apply phase? Thus, prior before the aggregate has been initialized? Because, only then will we we invoke this onCleanUp", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r490898259", "createdAt": "2020-09-18T11:54:49Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/EventCountSnapshotTriggerDefinitionTest.java", "diffHunk": "@@ -84,10 +103,26 @@ void testSnapshotterTriggeredOnUnitOfWorkCommit() {\n         verify(mockSnapshotter).scheduleSnapshot(aggregate.rootType(), aggregateIdentifier);\n     }\n \n+    @Test\n+    void testSnapshotterTriggeredOnUnitOfWorkRollback() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "481f7fb76c67110d8b35f9ebf421ce1211c5c26f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5OTM4NQ==", "bodyText": "Does make the trigger.initializationFinished(); weird for me right now...so might be have a misconception here. Please tell me if I am wrong on the matter.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#discussion_r490899385", "createdAt": "2020-09-18T11:57:03Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/EventCountSnapshotTriggerDefinitionTest.java", "diffHunk": "@@ -84,10 +103,26 @@ void testSnapshotterTriggeredOnUnitOfWorkCommit() {\n         verify(mockSnapshotter).scheduleSnapshot(aggregate.rootType(), aggregateIdentifier);\n     }\n \n+    @Test\n+    void testSnapshotterTriggeredOnUnitOfWorkRollback() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5ODI1OQ=="}, "originalCommit": {"oid": "481f7fb76c67110d8b35f9ebf421ce1211c5c26f"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0a9cfb33b4ed3cd0e79ddb77cd257d7cd08e2bd", "author": {"user": {"login": "abuijze", "name": "Allard Buijze"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/a0a9cfb33b4ed3cd0e79ddb77cd257d7cd08e2bd", "committedDate": "2020-09-22T12:01:09Z", "message": "Disregard staged events for a rolled-back unit of work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fcd375858097b6e918be92520a0293ebb509084", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/9fcd375858097b6e918be92520a0293ebb509084", "committedDate": "2020-09-22T13:09:17Z", "message": "Expand javadoc\n\nExpand the javadoc to include specifics about when a snapshot will be\ntriggered in case initialization of the aggregate hasn't completely yet\n\n#1510"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1410c3c434e2c285262d5920d6018283eff2a42", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/f1410c3c434e2c285262d5920d6018283eff2a42", "committedDate": "2020-09-22T13:18:24Z", "message": "Rename and add test case\n\nRename the rollback test case to specify it'll never occur.\nAdditionally, add another test which switches to scenario, albeit quite\nsimilar to the testSnapshotterTriggeredOnUnitOfWorkCleanup() test case\n\n#1510"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNDQ5NDA3", "url": "https://github.com/AxonFramework/AxonFramework/pull/1510#pullrequestreview-493449407", "createdAt": "2020-09-22T13:18:55Z", "commit": {"oid": "f1410c3c434e2c285262d5920d6018283eff2a42"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1782, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}