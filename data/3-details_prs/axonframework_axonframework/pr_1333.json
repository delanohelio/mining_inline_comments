{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDQ0Mzk1", "number": 1333, "title": "[#1210] Throws AxonException for concurrent Aggregate creation", "bodyText": "This PRs adds a check on the PersistenceException to check if this is the first sequence number (the creation of an Aggregate) or not.\nIf yes, we throw an AxonException (AggregateStreamCreationException) instead of a TransientException (ConcurrencyException).\nThis PR resolves #1210.", "createdAt": "2020-01-30T12:22:36Z", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333", "merged": true, "mergeCommit": {"oid": "ba20004972f0c498984a323748e5b643843e6f4a"}, "closed": true, "closedAt": "2020-02-03T15:34:04Z", "author": {"login": "lfgcampos"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_ZiQUAH2gAyMzY5MDQ0Mzk1OmQ1NDE1MDJlMzNkNTRkZDIyYzAxMDc5M2M2NmM4YTM5YzdlMjVmZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAuvr2AFqTM1MjM0MzcwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5", "author": {"user": {"login": "lfgcampos", "name": "Lucas Campos"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/d541502e33d54dd22c010793c66c8a39c7e25fd5", "committedDate": "2020-01-30T12:17:12Z", "message": "Throws AggregateAlreadyExistsException when an Aggregate is created with an ID for which there is already an Aggregate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwODI0OTMy", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#pullrequestreview-350824932", "createdAt": "2020-01-30T13:36:02Z", "commit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzozNjowM1rOFjrDpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzozNjowM1rOFjrDpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk0OTkyNA==", "bodyText": "Awww, this is so nice, javadoc on private method. But you're missing doc for parameter :P", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r372949924", "createdAt": "2020-01-30T13:36:03Z", "author": {"login": "m1l4n54v1c"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "diffHunk": "@@ -106,20 +112,51 @@ public void storeSnapshot(DomainEventMessage<?> snapshot) {\n      * @param failedEvent The EventMessage that could not be persisted\n      */\n     protected void handlePersistenceException(Exception exception, EventMessage<?> failedEvent) {\n-        String eventDescription;\n-        if (failedEvent instanceof DomainEventMessage<?>) {\n-            DomainEventMessage<?> failedDomainEvent = (DomainEventMessage<?>) failedEvent;\n-            eventDescription =\n-                    format(\"An event for aggregate [%s] at sequence [%d]\", failedDomainEvent.getAggregateIdentifier(),\n-                           failedDomainEvent.getSequenceNumber());\n-        } else {\n-            eventDescription = format(\"An event with identifier [%s]\", failedEvent.getIdentifier());\n-        }\n+        String eventDescription = buildExceptionMessage(failedEvent);\n         if (persistenceExceptionResolver != null && persistenceExceptionResolver.isDuplicateKeyViolation(exception)) {\n-            throw new ConcurrencyException(eventDescription + \" was already inserted\", exception);\n+            if (isFirstDomainEvent(failedEvent)) {\n+                throw new AggregateAlreadyExistsException(eventDescription, exception);\n+            }\n+            throw new ConcurrencyException(eventDescription, exception);\n         } else {\n-            throw new EventStoreException(eventDescription + \" could not be persisted\", exception);\n+            throw new EventStoreException(eventDescription, exception);\n+        }\n+    }\n+\n+    /**\n+     * Check whether or not this is the first event, which means we are trying to create the aggregate.\n+     *\n+     * @param failedEvent the event to be checked\n+     * @return true in case of first event, false otherwise\n+     */\n+    private boolean isFirstDomainEvent(EventMessage failedEvent) {\n+        if (failedEvent instanceof DomainEventMessage<?>) {\n+            return ((DomainEventMessage) failedEvent).getSequenceNumber() == 0L;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Build an exception message based on an EventMessage.\n+     *\n+     * @param failedEvent\n+     * @return the created exception message\n+     */\n+    private String buildExceptionMessage(EventMessage failedEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMzcxMzMx", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#pullrequestreview-351371331", "createdAt": "2020-01-31T09:10:08Z", "commit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxMDowOFrOFkFL3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyMzoyMFrOFkFhMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3ODAxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Check whether or not this is the first event, which means we are trying to create the aggregate.\n          \n          \n            \n                 * Check whether or not this is the first event, which means we tried to create an aggregate through the given {@code failedEvent}.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373378013", "createdAt": "2020-01-31T09:10:08Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "diffHunk": "@@ -106,20 +112,51 @@ public void storeSnapshot(DomainEventMessage<?> snapshot) {\n      * @param failedEvent The EventMessage that could not be persisted\n      */\n     protected void handlePersistenceException(Exception exception, EventMessage<?> failedEvent) {\n-        String eventDescription;\n-        if (failedEvent instanceof DomainEventMessage<?>) {\n-            DomainEventMessage<?> failedDomainEvent = (DomainEventMessage<?>) failedEvent;\n-            eventDescription =\n-                    format(\"An event for aggregate [%s] at sequence [%d]\", failedDomainEvent.getAggregateIdentifier(),\n-                           failedDomainEvent.getSequenceNumber());\n-        } else {\n-            eventDescription = format(\"An event with identifier [%s]\", failedEvent.getIdentifier());\n-        }\n+        String eventDescription = buildExceptionMessage(failedEvent);\n         if (persistenceExceptionResolver != null && persistenceExceptionResolver.isDuplicateKeyViolation(exception)) {\n-            throw new ConcurrencyException(eventDescription + \" was already inserted\", exception);\n+            if (isFirstDomainEvent(failedEvent)) {\n+                throw new AggregateAlreadyExistsException(eventDescription, exception);\n+            }\n+            throw new ConcurrencyException(eventDescription, exception);\n         } else {\n-            throw new EventStoreException(eventDescription + \" could not be persisted\", exception);\n+            throw new EventStoreException(eventDescription, exception);\n+        }\n+    }\n+\n+    /**\n+     * Check whether or not this is the first event, which means we are trying to create the aggregate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3ODY2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testUniqueKeyConstraintOnFirstEventIdentifier() {\n          \n          \n            \n                public void testUniqueKeyConstraintOnFirstEventIdentifierThrowsAggregateIdentifierAlreadyExistsException() {", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373378667", "createdAt": "2020-01-31T09:11:41Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngineTest.java", "diffHunk": "@@ -44,12 +45,21 @@\n \n     private AbstractEventStorageEngine testSubject;\n \n+    @DirtiesContext\n+    @Test\n+    public void testUniqueKeyConstraintOnFirstEventIdentifier() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MTU1OQ==", "bodyText": "Darn, of course, an aggregate's  uniqueness is guaranteed through the aggregate id and sequence number, meaning that the aggregate type does not matter at all. Hence, the exception message (which I suggested...) which adds the aggregate type is incorrect since you cannot be certain the event you are inserting is for the same aggregate type.\nI'll suggest a different message in the previous file, sorry for the inconvenience.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373381559", "createdAt": "2020-01-31T09:18:33Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngineTest.java", "diffHunk": "@@ -44,12 +45,21 @@\n \n     private AbstractEventStorageEngine testSubject;\n \n+    @DirtiesContext\n+    @Test\n+    public void testUniqueKeyConstraintOnFirstEventIdentifier() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MjQ5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        eventDescription = format(\"An aggregate of type [%s] with id [%s] was already created.\",\n          \n          \n            \n                        eventDescription = format(\"Cannot reuse aggregate identifier [%s] to create aggregate [%s] since identifiers need to be unique.\",\n          \n      \n    \n    \n  \n\nThis also means the parameters to the format() method should be switched by the way.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373382493", "createdAt": "2020-01-31T09:20:54Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "diffHunk": "@@ -106,20 +112,51 @@ public void storeSnapshot(DomainEventMessage<?> snapshot) {\n      * @param failedEvent The EventMessage that could not be persisted\n      */\n     protected void handlePersistenceException(Exception exception, EventMessage<?> failedEvent) {\n-        String eventDescription;\n-        if (failedEvent instanceof DomainEventMessage<?>) {\n-            DomainEventMessage<?> failedDomainEvent = (DomainEventMessage<?>) failedEvent;\n-            eventDescription =\n-                    format(\"An event for aggregate [%s] at sequence [%d]\", failedDomainEvent.getAggregateIdentifier(),\n-                           failedDomainEvent.getSequenceNumber());\n-        } else {\n-            eventDescription = format(\"An event with identifier [%s]\", failedEvent.getIdentifier());\n-        }\n+        String eventDescription = buildExceptionMessage(failedEvent);\n         if (persistenceExceptionResolver != null && persistenceExceptionResolver.isDuplicateKeyViolation(exception)) {\n-            throw new ConcurrencyException(eventDescription + \" was already inserted\", exception);\n+            if (isFirstDomainEvent(failedEvent)) {\n+                throw new AggregateAlreadyExistsException(eventDescription, exception);\n+            }\n+            throw new ConcurrencyException(eventDescription, exception);\n         } else {\n-            throw new EventStoreException(eventDescription + \" could not be persisted\", exception);\n+            throw new EventStoreException(eventDescription, exception);\n+        }\n+    }\n+\n+    /**\n+     * Check whether or not this is the first event, which means we are trying to create the aggregate.\n+     *\n+     * @param failedEvent the event to be checked\n+     * @return true in case of first event, false otherwise\n+     */\n+    private boolean isFirstDomainEvent(EventMessage failedEvent) {\n+        if (failedEvent instanceof DomainEventMessage<?>) {\n+            return ((DomainEventMessage) failedEvent).getSequenceNumber() == 0L;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Build an exception message based on an EventMessage.\n+     *\n+     * @param failedEvent\n+     * @return the created exception message\n+     */\n+    private String buildExceptionMessage(EventMessage failedEvent) {\n+        String eventDescription = format(\"An event with identifier [%s] could not be persisted\",\n+                                         failedEvent.getIdentifier());\n+        if (isFirstDomainEvent(failedEvent)) {\n+            DomainEventMessage failedDomainEvent = (DomainEventMessage) failedEvent;\n+            eventDescription = format(\"An aggregate of type [%s] with id [%s] was already created.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MzA3OQ==", "bodyText": "This also means the exception should be named slightly different, as it's not the aggregate which already exists, it's the aggregate identifier.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373383079", "createdAt": "2020-01-31T09:22:20Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngineTest.java", "diffHunk": "@@ -44,12 +45,21 @@\n \n     private AbstractEventStorageEngine testSubject;\n \n+    @DirtiesContext\n+    @Test\n+    public void testUniqueKeyConstraintOnFirstEventIdentifier() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MTU1OQ=="}, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MzIyMA==", "bodyText": "I think we should rename the exception to AggregateIdentifierAlreadyExistsException", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373383220", "createdAt": "2020-01-31T09:22:46Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/AggregateAlreadyExistsException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.axonframework.modelling.command;\n+\n+import org.axonframework.common.AxonNonTransientException;\n+\n+/**\n+ * Exception indicating that concurrent access to a repository was detected. Most likely, two threads were creating the\n+ * same aggregate.\n+ *\n+ * @author Lucas Campos\n+ * @since 4.3\n+ */\n+public class AggregateAlreadyExistsException extends AxonNonTransientException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MzQ3NA==", "bodyText": "I'd also change the javadoc accordingly to be specific it's not about an exact aggregate type which has been duplicated, but purely the identifier which is required to be unique.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373383474", "createdAt": "2020-01-31T09:23:20Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/AggregateAlreadyExistsException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.axonframework.modelling.command;\n+\n+import org.axonframework.common.AxonNonTransientException;\n+\n+/**\n+ * Exception indicating that concurrent access to a repository was detected. Most likely, two threads were creating the\n+ * same aggregate.\n+ *\n+ * @author Lucas Campos\n+ * @since 4.3\n+ */\n+public class AggregateAlreadyExistsException extends AxonNonTransientException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MzIyMA=="}, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "664ba4a876581cd9af3c867fa4c89a6363a7a5e4", "author": {"user": {"login": "lfgcampos", "name": "Lucas Campos"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/664ba4a876581cd9af3c867fa4c89a6363a7a5e4", "committedDate": "2020-01-31T10:24:17Z", "message": "Renamed exception, added missing javadoc and other small changes based on reviews."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a04e5f0794a11a6756d26664ebc0b3012776883", "author": {"user": {"login": "lfgcampos", "name": "Lucas Campos"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/4a04e5f0794a11a6756d26664ebc0b3012776883", "committedDate": "2020-02-03T14:05:33Z", "message": "Renamed exception and made it just AxonException because of loadOrCreate use case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzQzNzA3", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#pullrequestreview-352343707", "createdAt": "2020-02-03T15:33:48Z", "commit": {"oid": "4a04e5f0794a11a6756d26664ebc0b3012776883"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1830, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}