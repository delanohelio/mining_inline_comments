{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NjExOTk3", "number": 1484, "title": "[#1481] Update peekEvent accordingly", "bodyText": "This pull request updates the EventBuffer, to ensure it no longer loops for the defined 500ms \"wait time\" in the hasNextAvailable method. This loop was performed as the while-loop validated whether the peekEvent == null, thus the event of the constructed Iterator<TrackedEventMessage<?>> eventStream. However the waitForData method calls the delegate EventStream#peek method. The latter returns true, causing the lock to be released, but the while-loop kept on going as it didn't change the peekEvent.\nThe javadoc adjustments of the SequencingPolicy were added unintentionally, but don't hurt this PR.\nThis PR resolves #1481", "createdAt": "2020-08-07T13:40:59Z", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484", "merged": true, "mergeCommit": {"oid": "bbae673080ae56b99be7e2c23bea0071f79bb438"}, "closed": true, "closedAt": "2020-08-14T10:42:26Z", "author": {"login": "smcvb"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7huqdgH2gAyNDY0NjExOTk3OjRjNDgyMjhjODgxNWQxY2M5NmVlODI3NGZlNjI1ZTVjYmEwMTc2Yjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-yQG3AFqTQ2NzQ4MDA3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4c48228c8815d1cc96ee8274fe625e5cba0176b9", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/4c48228c8815d1cc96ee8274fe625e5cba0176b9", "committedDate": "2020-08-04T07:45:27Z", "message": "Fix javadoc discrepancy\n\nFix javadoc discrepancy stating that the SequentialPolicy is the default\n policy, whilst the SequentialPerAggregatePolicy is the defautl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ede450a972a846c18d49156635aaeea0852146d2", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/ede450a972a846c18d49156635aaeea0852146d2", "committedDate": "2020-08-07T13:35:13Z", "message": "Fix 500ms blocking loop\n\nThe EventBuffer used by the AxonServerConnector as the\nTrackingEventStream currently contains a blocking loop, taking up to\n500ms to exit. This so happens to correspond to the minimum wait time\nused by the hasNextAvailable method. This occurs because the peakEvent,\nvalidated in a do-while-loop, isn't updated when the lock's Condition is\n signaled. Subsequently, adjust the test to timeout if it takes longer\n dan 450ms, as that's a signal the loop occurs again whilst it shouldn't\n\n#1481"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc8188a43864e74a5c9e5fe0d75ada1e0401731c", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/dc8188a43864e74a5c9e5fe0d75ada1e0401731c", "committedDate": "2020-08-07T14:11:20Z", "message": "Add short trace logging\n\nAdd short trace logging showing whether we were signaled or waited 500ms\n\n#1481"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5395f05b3ebad83152624edb0876a0ba348364e", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/d5395f05b3ebad83152624edb0876a0ba348364e", "committedDate": "2020-08-10T12:26:24Z", "message": "Adjust reaction to hasNextAvailable slightly\n\nThe current solution introduces a form of side effect _why_ it no longer\n loops in the do-while-loop. Namely, subsequent invocations of the\n hasNextAvailable method currently introduce the scenario that the next\n entry from the Iterator is retrieved. This means, the following entry\n is removed from the delegate EventStream. Although this make sure an\n early return occurs, it still does an additional unnecessary loop.\nInstead, we should consistently use one way to validate an event is\npresent, and omit the side effect inducing operation. As this means\nwe'll no longer perform direct invocations of the EventStream which\ncould lead to an exception, we should validate whether the stream is\nclosed prior to proceeding.\n\n#1481"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MjE1NDIw", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#pullrequestreview-464215420", "createdAt": "2020-08-10T13:14:17Z", "commit": {"oid": "d5395f05b3ebad83152624edb0876a0ba348364e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/e36a9284caf876a9693cec920a8580f1327edae3", "committedDate": "2020-08-10T13:58:42Z", "message": "Change createEventData method to static object\n\nFor some, the createEventData method was to slow, hence causing the\ntestDataUpcastAndDeserialized with the timeout to fail. Making the\nresult a static field will resolve this\n\n#1481"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NTExNTMw", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#pullrequestreview-466511530", "createdAt": "2020-08-13T07:32:55Z", "commit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzozMjo1NlrOG__eDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzozODo1MVrOG__pvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1MzM1Nw==", "bodyText": "Instead of checking a field (which is set in another method), I suggest calling peek(), so that the knowledge of that field becomes more \"local\". To prevent the creation of Optional instances, we could create a private \"peekNullable\" (or any better name than that) method, which just returns null.\nThat would also allow the do ... while to be refactored to a while, which is generally considered cleaner:\nwhile (peekNullable() == null && System.currentTimeMillis() < deadline) {\n... wait for data\n}\nreturn peekNullable() != null;", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469753357", "createdAt": "2020-08-13T07:32:56Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -147,36 +147,51 @@ public void blacklist(TrackedEventMessage<?> trackedEventMessage) {\n \n     @Override\n     public boolean hasNextAvailable(int timeout, TimeUnit timeUnit) {\n+        checkExceptionState();\n         long deadline = System.currentTimeMillis() + timeUnit.toMillis(timeout);\n         try {\n             do {\n                 long waitTime = deadline - System.currentTimeMillis();\n                 waitForData(waitTime);\n-            } while (peekEvent == null && System.currentTimeMillis() < deadline && !eventStream.hasNext());\n+            } while (peekEvent == null && System.currentTimeMillis() < deadline);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1MzQwMA==", "bodyText": "This should be MAX_AWAIT_AVAILABLE_DATA, is this is the maximum amount of time that a thread sleeps in between attempts", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469753400", "createdAt": "2020-08-13T07:33:01Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -57,14 +60,14 @@\n  */\n public class EventBuffer implements TrackingEventStream {\n \n-    private static final Logger logger = LoggerFactory.getLogger(EventBuffer.class);\n+    private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n-    private static final int DEFAULT_POLLING_TIME_MILLIS = 500;\n+    private static final int MIN_AWAIT_AVAILABLE_DATA = 500;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1NTM2MA==", "bodyText": "If the \"peekNullable\" method described above is implemented, this would also be a good place to call it.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469755360", "createdAt": "2020-08-13T07:36:45Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -147,36 +147,51 @@ public void blacklist(TrackedEventMessage<?> trackedEventMessage) {\n \n     @Override\n     public boolean hasNextAvailable(int timeout, TimeUnit timeUnit) {\n+        checkExceptionState();\n         long deadline = System.currentTimeMillis() + timeUnit.toMillis(timeout);\n         try {\n             do {\n                 long waitTime = deadline - System.currentTimeMillis();\n                 waitForData(waitTime);\n-            } while (peekEvent == null && System.currentTimeMillis() < deadline && !eventStream.hasNext());\n+            } while (peekEvent == null && System.currentTimeMillis() < deadline);\n \n-            return peekEvent != null || eventStream.hasNext();\n+            return peekEvent != null;\n         } catch (InterruptedException e) {\n-            logger.warn(\"Consumer thread was interrupted. Returning thread to event processor.\", e);\n+            logger.warn(\"Event consumer thread was interrupted. Returning thread to event processor.\", e);\n             Thread.currentThread().interrupt();\n             return false;\n         }\n     }\n \n-    private void waitForData(long timeout) throws InterruptedException {\n-        // a quick check before acquiring the lock\n-        if (delegate.peek() != null) {\n+    private void checkExceptionState() {\n+        if (delegate.isClosed()) {\n+            throw new AxonServerException(ErrorCode.OTHER.errorCode(),\n+                                          \"The Event Stream has been closed, so no further events can be retrieved\");\n+        }\n+    }\n+\n+    private void waitForData(long waitTime) throws InterruptedException {\n+        // Quick check before acquiring the lock.\n+        if (peek().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1NjM1MA==", "bodyText": "can we merge this if with the previous one?\nif (peek().isPresent() || waitTime <= 0) { return;}", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469756350", "createdAt": "2020-08-13T07:38:51Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -147,36 +147,51 @@ public void blacklist(TrackedEventMessage<?> trackedEventMessage) {\n \n     @Override\n     public boolean hasNextAvailable(int timeout, TimeUnit timeUnit) {\n+        checkExceptionState();\n         long deadline = System.currentTimeMillis() + timeUnit.toMillis(timeout);\n         try {\n             do {\n                 long waitTime = deadline - System.currentTimeMillis();\n                 waitForData(waitTime);\n-            } while (peekEvent == null && System.currentTimeMillis() < deadline && !eventStream.hasNext());\n+            } while (peekEvent == null && System.currentTimeMillis() < deadline);\n \n-            return peekEvent != null || eventStream.hasNext();\n+            return peekEvent != null;\n         } catch (InterruptedException e) {\n-            logger.warn(\"Consumer thread was interrupted. Returning thread to event processor.\", e);\n+            logger.warn(\"Event consumer thread was interrupted. Returning thread to event processor.\", e);\n             Thread.currentThread().interrupt();\n             return false;\n         }\n     }\n \n-    private void waitForData(long timeout) throws InterruptedException {\n-        // a quick check before acquiring the lock\n-        if (delegate.peek() != null) {\n+    private void checkExceptionState() {\n+        if (delegate.isClosed()) {\n+            throw new AxonServerException(ErrorCode.OTHER.errorCode(),\n+                                          \"The Event Stream has been closed, so no further events can be retrieved\");\n+        }\n+    }\n+\n+    private void waitForData(long waitTime) throws InterruptedException {\n+        // Quick check before acquiring the lock.\n+        if (peek().isPresent()) {\n             return;\n         }\n-        if (timeout > 0) {\n-            lock.lock();\n-            try {\n-                // check again for concurrency reasons\n-                if (delegate.peek() == null) {\n-                    dataAvailable.await(Math.min(DEFAULT_POLLING_TIME_MILLIS, timeout), TimeUnit.MILLISECONDS);\n-                }\n-            } finally {\n-                lock.unlock();\n+        // No use spending lock/await work for zero wait time.\n+        if (waitTime <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NTI2NDk3", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#pullrequestreview-466526497", "createdAt": "2020-08-13T07:55:54Z", "commit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzo1NTo1NFrOHAAN-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzo1NTo1NFrOHAAN-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc2NTYyNQ==", "bodyText": "I like the advertising ;-)", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r469765625", "createdAt": "2020-08-13T07:55:54Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -102,14 +104,12 @@ public EventBuffer(EventStream delegate,\n                 lock.unlock();\n             }\n         });\n+        logger.debug(\"Now, with adjusted poll operation!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36a9284caf876a9693cec920a8580f1327edae3"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b87d212a9f149cf517db3e687c4a01751ae15cc0", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/b87d212a9f149cf517db3e687c4a01751ae15cc0", "committedDate": "2020-08-13T12:10:24Z", "message": "Process review comments\n\n- Rename the constant\n- Add private peekNullable method and use instead of peek() / peekEvent\n== null\n- Pair two if-breaks\n- Switch do-while-loop to while-loop\n- Inline waitForData\n- Remove unintended debug log line\n\n#1481"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "112339f7fa44f8983b7c0792e2562567d6bcec2e", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/112339f7fa44f8983b7c0792e2562567d6bcec2e", "committedDate": "2020-08-14T08:17:36Z", "message": "Further simplify hasNextAvailable\n\n- Reorder field assignment in constructor\n- Drop if-continue check, as it's no longer needed through the switch\nfrom a do-while-loop to the while-loop\n- Move waitTime creation and validation to occur just before the await\ninvocation\n\n#1481"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NDIyOTk0", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#pullrequestreview-467422994", "createdAt": "2020-08-14T09:06:59Z", "commit": {"oid": "112339f7fa44f8983b7c0792e2562567d6bcec2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTowNjo1OVrOHAtVkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTowNjo1OVrOHAtVkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNDg1MA==", "bodyText": "Shouldn't this be peekNullable() == null && waitTime > 0", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#discussion_r470504850", "createdAt": "2020-08-14T09:06:59Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/EventBuffer.java", "diffHunk": "@@ -139,44 +138,50 @@ public void blacklist(TrackedEventMessage<?> trackedEventMessage) {\n \n     @Override\n     public Optional<TrackedEventMessage<?>> peek() {\n-        if (peekEvent == null && eventStream.hasNext()) {\n-            peekEvent = eventStream.next();\n-        }\n-        return Optional.ofNullable(peekEvent);\n+        return Optional.ofNullable(peekNullable());\n     }\n \n     @Override\n     public boolean hasNextAvailable(int timeout, TimeUnit timeUnit) {\n+        checkExceptionState();\n         long deadline = System.currentTimeMillis() + timeUnit.toMillis(timeout);\n         try {\n-            do {\n-                long waitTime = deadline - System.currentTimeMillis();\n-                waitForData(waitTime);\n-            } while (peekEvent == null && System.currentTimeMillis() < deadline && !eventStream.hasNext());\n+            while (peekNullable() == null && System.currentTimeMillis() < deadline) {\n+                lock.lock();\n+                try {\n+                    long waitTime = deadline - System.currentTimeMillis();\n+                    // Check if an event has arrived or if the wait time is zero. In both cases, we don't have to wait.\n+                    if (peekNullable() == null || waitTime <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "112339f7fa44f8983b7c0792e2562567d6bcec2e"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "530529065c4a5bee82736961e1d330c886f3a82e", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/530529065c4a5bee82736961e1d330c886f3a82e", "committedDate": "2020-08-14T09:20:42Z", "message": "Fix if check before waiting\n\nWaiting on events should happen if there is no event AND the wait time\nis bigger than zero.\n\n#1481"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "894f450d017ea1e97471604102649bce353cc422", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/894f450d017ea1e97471604102649bce353cc422", "committedDate": "2020-08-14T09:22:02Z", "message": "Further reordering\n\nFurther reordering, for a different kind of OCD\n\n#1481"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25f8a47c24ae0d3326a9ff3882099f75a56c1d4c", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/25f8a47c24ae0d3326a9ff3882099f75a56c1d4c", "committedDate": "2020-08-14T10:04:11Z", "message": "Move closed check\n\nMove the EventStream#isClosed check to the peekNullable method. That way\n we can ensure we validate this operation everytime we try to retrieve a\n new event from the delegate stream.\n\n#1481"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NDgwMDc5", "url": "https://github.com/AxonFramework/AxonFramework/pull/1484#pullrequestreview-467480079", "createdAt": "2020-08-14T10:42:14Z", "commit": {"oid": "25f8a47c24ae0d3326a9ff3882099f75a56c1d4c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1774, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}