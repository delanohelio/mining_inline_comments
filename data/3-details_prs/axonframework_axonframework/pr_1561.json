{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2OTMzODAx", "number": 1561, "title": "[#1560] Feature/intermediate representation data format", "bodyText": "This pull request fixes #1560 and provides the ability to ask the IntermediateEventRepresentation for the Serializer and if its data can be converted to a target format.\nThis is useful if you want to detect if the Upcaster can upcast an event which is serialized in a certain way.\nSee https://discuss.axoniq.io/t/upcasters-for-json-and-xml/2799 for more details.", "createdAt": "2020-10-20T16:13:34Z", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561", "merged": true, "mergeCommit": {"oid": "11429f924a47d51c428b080081b41bf0de5c9b2c"}, "closed": true, "closedAt": "2020-11-09T12:02:26Z", "author": {"login": "zambrovski"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUXPPXgH2gAyNTA2OTMzODAxOjg4ZmFjNDdhZGQzYjZjZWE3YTA5OWVmZDc1MjBkNmJhMjM3N2NiZjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABday3YwgFqTUyNjE1MDc5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "88fac47add3b6cea7a099efd7520d6ba2377cbf2", "author": {"user": {"login": "zambrovski", "name": "Simon Zambrovski"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/88fac47add3b6cea7a099efd7520d6ba2377cbf2", "committedDate": "2020-10-20T11:40:11Z", "message": "Merge pull request #1 from AxonFramework/master\n\nMerge current master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f222bf0280c134c9cbd76f3bd2afbec80180fc49", "author": {"user": {"login": "zambrovski", "name": "Simon Zambrovski"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/f222bf0280c134c9cbd76f3bd2afbec80180fc49", "committedDate": "2020-10-20T16:10:37Z", "message": "feature: implement intermediate representation extension to access serializer and detect converter capabilities, fix #1560"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNDUyMzM2", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#pullrequestreview-513452336", "createdAt": "2020-10-21T08:54:55Z", "commit": {"oid": "f222bf0280c134c9cbd76f3bd2afbec80180fc49"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODo1NDo1NlrOHlhYDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTowMjo1MlrOHlhu3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwNjE5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Checks if the data can be converted to required type.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param requiredType the type to convert to\n          \n          \n            \n                 * @return true, if the intermediate representation can be converted to desired type.\n          \n          \n            \n                 * Checks if the data can be converted to the given {@code requiredType}.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param requiredType the type to validate if the contained data can be converted to\n          \n          \n            \n                 * @return true, if the intermediate representation's data can be converted to desired type, false otherwise", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509106190", "createdAt": "2020-10-21T08:54:56Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java", "diffHunk": "@@ -139,4 +140,18 @@\n      * @return the MetaData of the message wrapping the object to upcast, if available\n      */\n     LazyDeserializingObject<MetaData> getMetaData();\n+\n+    /**\n+     * Checks if the data can be converted to required type.\n+     *\n+     * @param requiredType the type to convert to\n+     * @return true, if the intermediate representation can be converted to desired type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f222bf0280c134c9cbd76f3bd2afbec80180fc49"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwOTA1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieves the serializer used to retrieve data.\n          \n          \n            \n                 * @return serializer configured for event serialization.\n          \n          \n            \n                 * Retrieve the {@link Serializer} used to convert the contained {@link #getData()} and to deserialize the contained {@link #getMetaData()}.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @return serializer used to convert and deserialize the the contained {@link #getData()} and  {@link #getMetaData()} respectively", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509109055", "createdAt": "2020-10-21T08:58:43Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java", "diffHunk": "@@ -139,4 +140,18 @@\n      * @return the MetaData of the message wrapping the object to upcast, if available\n      */\n     LazyDeserializingObject<MetaData> getMetaData();\n+\n+    /**\n+     * Checks if the data can be converted to required type.\n+     *\n+     * @param requiredType the type to convert to\n+     * @return true, if the intermediate representation can be converted to desired type.\n+     */\n+    <D> Boolean canConvertDataTo(Class<D> requiredType);\n+\n+    /**\n+     * Retrieves the serializer used to retrieve data.\n+     * @return serializer configured for event serialization.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f222bf0280c134c9cbd76f3bd2afbec80180fc49"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExMDA5NQ==", "bodyText": "Missing a javadoc description for @param D here.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509110095", "createdAt": "2020-10-21T09:00:06Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java", "diffHunk": "@@ -139,4 +140,18 @@\n      * @return the MetaData of the message wrapping the object to upcast, if available\n      */\n     LazyDeserializingObject<MetaData> getMetaData();\n+\n+    /**\n+     * Checks if the data can be converted to required type.\n+     *\n+     * @param requiredType the type to convert to\n+     * @return true, if the intermediate representation can be converted to desired type.\n+     */\n+    <D> Boolean canConvertDataTo(Class<D> requiredType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f222bf0280c134c9cbd76f3bd2afbec80180fc49"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExMDY2Mw==", "bodyText": "As we're on JUnit 5, you can remove the use of public on the class and methods.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509110663", "createdAt": "2020-10-21T09:00:51Z", "author": {"login": "smcvb"}, "path": "messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.serialization.upcasting.event;\n+\n+import org.axonframework.eventhandling.EventData;\n+import org.axonframework.eventhandling.GenericDomainEventMessage;\n+import org.axonframework.serialization.Converter;\n+import org.axonframework.serialization.Serializer;\n+import org.axonframework.serialization.xml.XStreamSerializer;\n+import org.axonframework.utils.TestDomainEventEntry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Test for intermediate representation.\n+ *\n+ * @author Simon Zambrovski\n+ */\n+public class IntermediateRepresentationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f222bf0280c134c9cbd76f3bd2afbec80180fc49"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExMTUwOA==", "bodyText": "Nit: To remove the XStream warning of not having set the security context, you can use the org.axonframework.serialization.TestSerializer.XSTREAM instance.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509111508", "createdAt": "2020-10-21T09:02:04Z", "author": {"login": "smcvb"}, "path": "messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.serialization.upcasting.event;\n+\n+import org.axonframework.eventhandling.EventData;\n+import org.axonframework.eventhandling.GenericDomainEventMessage;\n+import org.axonframework.serialization.Converter;\n+import org.axonframework.serialization.Serializer;\n+import org.axonframework.serialization.xml.XStreamSerializer;\n+import org.axonframework.utils.TestDomainEventEntry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Test for intermediate representation.\n+ *\n+ * @author Simon Zambrovski\n+ */\n+public class IntermediateRepresentationTest {\n+\n+    private final static Serializer serializer = XStreamSerializer.defaultSerializer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f222bf0280c134c9cbd76f3bd2afbec80180fc49"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExMjAzMA==", "bodyText": "We typically don't use the underscore test naming format, although to be honest I am not overly religious about it. Regard this more as a note, not something I think you should change.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509112030", "createdAt": "2020-10-21T09:02:52Z", "author": {"login": "smcvb"}, "path": "messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.serialization.upcasting.event;\n+\n+import org.axonframework.eventhandling.EventData;\n+import org.axonframework.eventhandling.GenericDomainEventMessage;\n+import org.axonframework.serialization.Converter;\n+import org.axonframework.serialization.Serializer;\n+import org.axonframework.serialization.xml.XStreamSerializer;\n+import org.axonframework.utils.TestDomainEventEntry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Test for intermediate representation.\n+ *\n+ * @author Simon Zambrovski\n+ */\n+public class IntermediateRepresentationTest {\n+\n+    private final static Serializer serializer = XStreamSerializer.defaultSerializer();\n+\n+    @Test\n+    public void should_deliver_serializer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f222bf0280c134c9cbd76f3bd2afbec80180fc49"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69ced8e7b409a7f606854b2f8065e1c728745b78", "author": {"user": {"login": "zambrovski", "name": "Simon Zambrovski"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/69ced8e7b409a7f606854b2f8065e1c728745b78", "committedDate": "2020-10-21T12:27:05Z", "message": "Update messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1acaf17ff55d5e54dfa901fb4739cabdc77a7cb1", "author": {"user": {"login": "zambrovski", "name": "Simon Zambrovski"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/1acaf17ff55d5e54dfa901fb4739cabdc77a7cb1", "committedDate": "2020-10-21T12:27:12Z", "message": "Update messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "204a1b37596e471c5f30c6c4150778be63a84b88", "author": {"user": {"login": "zambrovski", "name": "Simon Zambrovski"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/204a1b37596e471c5f30c6c4150778be63a84b88", "committedDate": "2020-10-21T12:33:00Z", "message": "chore: work in comments of @smbcvb"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNzU0NjY4", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#pullrequestreview-513754668", "createdAt": "2020-10-21T14:31:36Z", "commit": {"oid": "204a1b37596e471c5f30c6c4150778be63a84b88"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNjMxNjAx", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#pullrequestreview-513631601", "createdAt": "2020-10-21T12:41:43Z", "commit": {"oid": "f222bf0280c134c9cbd76f3bd2afbec80180fc49"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjo0MTo0NFrOHlpy1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTozNDoxNVrOHlyu2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI0NDExNw==", "bodyText": "I to prevent unnecessary (un)boxing, please use a boolean as return type", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509244117", "createdAt": "2020-10-21T12:41:44Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java", "diffHunk": "@@ -148,4 +148,14 @@ public Instant getTimestamp() {\n     public LazyDeserializingObject<MetaData> getMetaData() {\n         return metaData;\n     }\n+\n+    @Override\n+    public <D> Boolean canConvertDataTo(Class<D> requiredType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f222bf0280c134c9cbd76f3bd2afbec80180fc49"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI0NTQ0NQ==", "bodyText": "As I mentioned in the discussion (https://discuss.axoniq.io/t/upcasters-for-json-and-xml/2799/4), it might be tricky to share the serializer. There is not much you can do with the serializer that makes sense at this stage. The only thing would be to access the converters, which is basically already taken care of by the other method.\nWhat do you think?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509245445", "createdAt": "2020-10-21T12:43:48Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java", "diffHunk": "@@ -148,4 +148,14 @@ public Instant getTimestamp() {\n     public LazyDeserializingObject<MetaData> getMetaData() {\n         return metaData;\n     }\n+\n+    @Override\n+    public <D> Boolean canConvertDataTo(Class<D> requiredType) {\n+        return serializer.getConverter().canConvert(data.getContentType(), requiredType);\n+    }\n+\n+    @Override\n+    public Serializer getSerializer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f222bf0280c134c9cbd76f3bd2afbec80180fc49"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM5MDU1Mg==", "bodyText": "see above. Please use boolean instead.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509390552", "createdAt": "2020-10-21T15:34:15Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java", "diffHunk": "@@ -139,4 +140,18 @@\n      * @return the MetaData of the message wrapping the object to upcast, if available\n      */\n     LazyDeserializingObject<MetaData> getMetaData();\n+\n+    /**\n+     * Checks if the data can be converted to required type.\n+     *\n+     * @param requiredType the type to convert to\n+     * @return true, if the intermediate representation can be converted to desired type.\n+     */\n+    <D> Boolean canConvertDataTo(Class<D> requiredType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f222bf0280c134c9cbd76f3bd2afbec80180fc49"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64b00fd50f3aac8de0261bfc718c44e919abcd43", "author": {"user": {"login": "zambrovski", "name": "Simon Zambrovski"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/64b00fd50f3aac8de0261bfc718c44e919abcd43", "committedDate": "2020-10-21T17:21:23Z", "message": "feature: remove serializer access method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MDYyMDcy", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#pullrequestreview-514062072", "createdAt": "2020-10-21T18:30:13Z", "commit": {"oid": "64b00fd50f3aac8de0261bfc718c44e919abcd43"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozMDoxM1rOHl80TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozMDoxM1rOHl80TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1NTc4OA==", "bodyText": "This is getting really nitty gritty (sorry for that), but the explicit generic parameter (<D> doesn't seem to add much value. Perhaps just using Class<?> expectedType is enough?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r509555788", "createdAt": "2020-10-21T18:30:13Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/InitialEventRepresentation.java", "diffHunk": "@@ -148,4 +148,9 @@ public Instant getTimestamp() {\n     public LazyDeserializingObject<MetaData> getMetaData() {\n         return metaData;\n     }\n+\n+    @Override\n+    public <D> boolean canConvertDataTo(Class<D> requiredType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64b00fd50f3aac8de0261bfc718c44e919abcd43"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d52a16b66fe31753fb1df36889b728bf186b6adb", "author": {"user": {"login": "zambrovski", "name": "Simon Zambrovski"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/d52a16b66fe31753fb1df36889b728bf186b6adb", "committedDate": "2020-10-21T19:03:53Z", "message": "corrected parameter type comment of @abuijze"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0ODIwNzkz", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#pullrequestreview-514820793", "createdAt": "2020-10-22T14:56:02Z", "commit": {"oid": "d52a16b66fe31753fb1df36889b728bf186b6adb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDo1NjowMlrOHml_Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDo1NzoxNVrOHmmDCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMDMzMQ==", "bodyText": "Given the changes which have occurred, we should remove this import statement too.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r510230331", "createdAt": "2020-10-22T14:56:02Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/IntermediateEventRepresentation.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.axonframework.serialization.LazyDeserializingObject;\n import org.axonframework.serialization.SerializedObject;\n import org.axonframework.serialization.SerializedType;\n+import org.axonframework.serialization.Serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52a16b66fe31753fb1df36889b728bf186b6adb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMTMwNw==", "bodyText": "Don't think this was intended? Currently the test cases invoke this private method which doesn't really do an assertion. I would expect Assertions#assertTrue(...) to be invoked instead.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#discussion_r510231307", "createdAt": "2020-10-22T14:57:15Z", "author": {"login": "smcvb"}, "path": "messaging/src/test/java/org/axonframework/serialization/upcasting/event/IntermediateRepresentationTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.serialization.upcasting.event;\n+\n+import org.axonframework.eventhandling.EventData;\n+import org.axonframework.eventhandling.GenericDomainEventMessage;\n+import org.axonframework.serialization.Converter;\n+import org.axonframework.serialization.Serializer;\n+import org.axonframework.serialization.TestSerializer;\n+import org.axonframework.utils.TestDomainEventEntry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Test for intermediate representation.\n+ *\n+ * @author Simon Zambrovski\n+ */\n+class IntermediateRepresentationTest {\n+\n+    private final static Serializer serializer = TestSerializer.XSTREAM.getSerializer();\n+\n+    @Test\n+    public void canConvertDataTo() {\n+        EventData<?> eventData = new TestDomainEventEntry(\n+            new GenericDomainEventMessage<>(\"test\", \"aggregateId\", 0, \"someString\"), serializer\n+        );\n+        Serializer serializer = mock(Serializer.class);\n+        Converter converter = mock(Converter.class);\n+        when(serializer.getConverter()).thenReturn(converter);\n+        when(converter.canConvert(any(), eq(String.class))).thenReturn(true);\n+\n+        IntermediateEventRepresentation input = new InitialEventRepresentation(eventData, serializer);\n+        EventUpcasterChain eventUpcasterChain = new EventUpcasterChain(\n+            new IntermediateRepresentationTest.MyEventUpcaster()\n+        );\n+        List<IntermediateEventRepresentation> result = eventUpcasterChain.upcast(Stream.of(input)).collect(toList());\n+        assertEquals(1, result.size());\n+\n+\n+        assertTrue(input.canConvertDataTo(String.class));\n+        assertTrue(result.get(0).canConvertDataTo(String.class));\n+\n+        verify(converter, atMostOnce()).canConvert(String.class, String.class);\n+    }\n+\n+    private void assertTrue(boolean canConvertDataTo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52a16b66fe31753fb1df36889b728bf186b6adb"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f17b80c847b1a9841b53a9785d96fe744527ce8", "author": {"user": {"login": "zambrovski", "name": "Simon Zambrovski"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/0f17b80c847b1a9841b53a9785d96fe744527ce8", "committedDate": "2020-10-22T17:36:30Z", "message": "fixing changes from review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NDA4MTg1", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#pullrequestreview-515408185", "createdAt": "2020-10-23T07:27:04Z", "commit": {"oid": "0f17b80c847b1a9841b53a9785d96fe744527ce8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MTUwNzk5", "url": "https://github.com/AxonFramework/AxonFramework/pull/1561#pullrequestreview-526150799", "createdAt": "2020-11-09T11:15:01Z", "commit": {"oid": "0f17b80c847b1a9841b53a9785d96fe744527ce8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1802, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}