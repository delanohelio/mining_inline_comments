{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNzcxNzUy", "number": 1514, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToyODoyOFrOEmCgcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToyODoyOFrOEmCgcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzIyNDE3OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/GenericSubscriptionQueryUpdateMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToyODoyOFrOHV1lSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDowNTowNVrOHV7yhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2MDA0MQ==", "bodyText": "Just for my understanding here. This method is purely here to more easily test the GrpcBackedQueryUpdateMessageTest, right?\nBut, next to that it can be used by users to not return a normal update through the QueryUpdateEmitter, but actually to emit an exceptional update. Something which currently can only be achieved if thy use the GenericSubscriptionQueryUpdateMessage#asUpdateMessage(Object) method wherein they provide a ResultMessage implementation which itself is exceptional. Correct?\nSo, it's not purely the fix you're doing here, but providing a simplified form to emit exceptional updates. If I follow correctly that is.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1514#discussion_r492660041", "createdAt": "2020-09-22T11:28:28Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/GenericSubscriptionQueryUpdateMessage.java", "diffHunk": "@@ -63,6 +63,19 @@\n         return new GenericSubscriptionQueryUpdateMessage<>((T) payload);\n     }\n \n+    /**\n+     * Creates a {@link GenericSubscriptionQueryUpdateMessage} with the given {@code declaredType} and {@code exception}\n+     * result.\n+     *\n+     * @param declaredType The declared type of the Subscription Query Update Message to be created\n+     * @param exception    The exception describing the cause of an error\n+     * @param <T>          type of the {@link GenericSubscriptionQueryUpdateMessage}\n+     * @return a message containing exception result\n+     */\n+    public static <T> SubscriptionQueryUpdateMessage<T> asUpdateMessage(Class<T> declaredType, Throwable exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3c85a869e6f0b75f2079b4c646017c60249e140"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc2MTczMg==", "bodyText": "This is correct. I've added this method for easier instantiation of exceptional query update messages. And it was pretty handy for test as well :P It goes in line with <R> QueryResponseMessage#asResponseMessage(Class<R>, Throwable).", "url": "https://github.com/AxonFramework/AxonFramework/pull/1514#discussion_r492761732", "createdAt": "2020-09-22T14:05:05Z", "author": {"login": "m1l4n54v1c"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/GenericSubscriptionQueryUpdateMessage.java", "diffHunk": "@@ -63,6 +63,19 @@\n         return new GenericSubscriptionQueryUpdateMessage<>((T) payload);\n     }\n \n+    /**\n+     * Creates a {@link GenericSubscriptionQueryUpdateMessage} with the given {@code declaredType} and {@code exception}\n+     * result.\n+     *\n+     * @param declaredType The declared type of the Subscription Query Update Message to be created\n+     * @param exception    The exception describing the cause of an error\n+     * @param <T>          type of the {@link GenericSubscriptionQueryUpdateMessage}\n+     * @return a message containing exception result\n+     */\n+    public static <T> SubscriptionQueryUpdateMessage<T> asUpdateMessage(Class<T> declaredType, Throwable exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2MDA0MQ=="}, "originalCommit": {"oid": "e3c85a869e6f0b75f2079b4c646017c60249e140"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3239, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}