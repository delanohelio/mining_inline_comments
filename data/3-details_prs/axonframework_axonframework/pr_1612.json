{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MDY2MTA0", "number": 1612, "title": "[#1611] MetaData deserilization and Ignoring Snapshots on readEvents for seqNo = 0", "bodyText": "This pull request is a resolution for two issues discovered in the AxonServerEventStore:\n\nMetaData could no be serialized, because the used Serializer wasn't of type GrpcMetaDataAwareSerializer.\nSnapshots are provided when invoking AxonServerEventStore#readEvents with a sequence number of 0.\n\n\nIssue 1\nIssue one has been trailed back to the invocation of AxonIQEventStorageEngine#readEventData(String, long), since this operation does no ensure the event/snapshot Serializer which has been wrapped in a GrpcMetaDataAwareSerializer has been used. Due to this, the original Jackson/XStream/Custom Serializer would be invoked directly, which does not assume the event data to come in the form of a gRPC event.\nThe problem occurred because of the introduction of the SnapshotFilter. Pre Axon 4.4.x, this component wasn't used, similarly snapshot filtering in general, which enforced the optimization of retrieving both the snapshots and events in a single operation. Thus, AxonIQEventStorageEngine#readEventData(String, long) was never invoked directly by the AbstractEventStorageEngine, but only through the AxonServerEventStore itself and in doing so ensuring the GrpcMetaDataAwareSerializer was wrapped around the serializer.\nIssue 1 was resolved by overriding the getEventSerializer() and getSnapshotSerializer() methods in the AxonIQEventStorageEngine and consistently using these methods in the AbstractEventStorageEngine.\n\nIssue 2\nIssue two boiled down to a wrong if-check in the AxonIQEventStorageEngine#readEvents(String, long), which expected a sequence number higher than zero. This PR fixes this, and as such resolves #1611.", "createdAt": "2020-11-19T16:12:32Z", "url": "https://github.com/AxonFramework/AxonFramework/pull/1612", "merged": true, "mergeCommit": {"oid": "0dbcb589d69e908c94fe92a442a1953b02dae10e"}, "closed": true, "closedAt": "2020-11-20T12:39:12Z", "author": {"login": "smcvb"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeEVIiAH2gAyNTI0MDY2MTA0OmMzMGRhZWI4ZWU0NWE1NTA3ODAzZjQzYjEyOGRkYmJjODA1Mjg5ZTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeVa5ggFqTUzNTMzNjk3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c30daeb8ee45a5507803f43b128ddbbc805289e2", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/c30daeb8ee45a5507803f43b128ddbbc805289e2", "committedDate": "2020-11-19T15:17:40Z", "message": "Ensure usage of gRPC aware Serializer\n\nWhen retrieving an Aggregate stream, there is a window of opportunity\nthat the default snapshot/event serializer is used, instead of the\nGrpcMetaDataAwareSerializer version. As a result, MetaData might be\nmissed out on. This should be resolved by overriding the\ngetSnapshotSerializer/getEventSerializer methods in the\nAxonServerEventStore and by using these methods in the\nAbstractEventStorageEngine consistently. This issue only comes to light\nif snapshotFilters are used, since only then will AxonServer be\nrequested for snapshots and events separately. The latter caused a call\nwhich doesn't use this specific serializer\n\n#1611"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "306fa819cb42f391ef1d755264147f822f87e986", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/306fa819cb42f391ef1d755264147f822f87e986", "committedDate": "2020-11-19T15:19:12Z", "message": "Ignore snapshots for readEventData invocation with seqNo 0\n\nThe validation to take snapshots into account when retrieving events\nfrom Axon Server check for a seqNo > 0. This should be >= instead.\n\n#1611"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NjMwNTY4", "url": "https://github.com/AxonFramework/AxonFramework/pull/1612#pullrequestreview-534630568", "createdAt": "2020-11-19T16:33:26Z", "commit": {"oid": "306fa819cb42f391ef1d755264147f822f87e986"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozMzoyNlrOH2nMYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozMzoyNlrOH2nMYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyNzI5OQ==", "bodyText": "The third if calls   eventChannel.openAggregateStream(aggregateIdentifier)  wich also calls\n.openAggregateStream(aggregateIdentifier,true)  , so what's the use of this branche ?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1612#discussion_r527027299", "createdAt": "2020-11-19T16:33:26Z", "author": {"login": "kad-hesseg"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/AxonServerEventStore.java", "diffHunk": "@@ -475,7 +475,7 @@ protected void storeSnapshot(DomainEventMessage<?> snapshot, Serializer serializ\n             EventChannel eventChannel = connectionManager.getConnection(context).eventChannel();\n \n             AggregateEventStream aggregateStream;\n-            if (firstSequenceNumber > 0) {\n+            if (firstSequenceNumber >= 0) {\n                 aggregateStream = eventChannel.openAggregateStream(aggregateIdentifier, firstSequenceNumber);\n             } else if (firstSequenceNumber == ALLOW_SNAPSHOTS_MAGIC_VALUE && !snapshotFilterSet) {\n                 aggregateStream = eventChannel.openAggregateStream(aggregateIdentifier, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306fa819cb42f391ef1d755264147f822f87e986"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53f5aa9516486475a8fd5f56c5953202cef43713", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/53f5aa9516486475a8fd5f56c5953202cef43713", "committedDate": "2020-11-20T09:27:16Z", "message": "Don't allow snapshots if snapshot filter is set\n\nSnapshots shouldn't be taken into account when retrieving events if a\nsnapshot filter has been set. Add test cases consciously validating all\nthree options in readEventData(String, long)\n\n#1611"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjkzMzg5", "url": "https://github.com/AxonFramework/AxonFramework/pull/1612#pullrequestreview-535293389", "createdAt": "2020-11-20T10:11:24Z", "commit": {"oid": "53f5aa9516486475a8fd5f56c5953202cef43713"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MzM2OTc3", "url": "https://github.com/AxonFramework/AxonFramework/pull/1612#pullrequestreview-535336977", "createdAt": "2020-11-20T11:12:22Z", "commit": {"oid": "53f5aa9516486475a8fd5f56c5953202cef43713"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2034, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}