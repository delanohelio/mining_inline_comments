{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzQ5ODU1", "number": 1621, "title": "Deprecating MessageHandlingMember annotation specific methods", "bodyText": "This pull request aims to make the MessageHandlingMember interface less focused on annotations. This means the MessageHandlingMember#hasAnnotation(Class<? extends Annotation>) and MessageHandlingMember#annotationAttributes(Class<? extends Annotation>) methods have been deprecated. Obviously replacements are introduced, which come in the form of:\n\nMessageHandlingMember#isA(String)\nMessageHandlingMember#attributes(String)\n\nThis will allow non-annotation focused MessageHandlingMember implementations to provide similar behavior to validate if the member is of a given handler type (the String to provide to the aforementioned methods) and if so to retrieve that handler type's attributes.\nNext to this API adjustment, the current AnnotatedMessageHandlingMember should implement these methods too, disregarding the direct usages of annotation classes. To that end, all message handling member annotations are, directly or indirectly, annotated with a new annotation: @HasHandlerAttributes. This allows the framework to based on this meta-annotation find all attributes on each level of an annotation, so that this collection can be used by the AnnotatedMessageHandlingMember to support he new methods.\nThe find all these attributes, the AnnotationUtils class has been adjusted and appended upon. Adjustment in the form of being able to only retrieve attributes of the target annotation, with potential overridden attributes from higher level annotations which are meta-annotated with the target.\nFurthermore a method is included which allows to validate whether a given Annotation Class is meta-annotated with another annotation. This operation is used to check whether an AnnotatedElement like the Executable given to the AnnotatedMessageHandlingMember has annotations which are meta-annotated with HasHandlerAttributes. The two of these AnnotationUtils methods are used to collect all the attributes into a HandlerAttributes object (collected by a HandlerAttributesUtils class). It is this HandlerAttributes which provides the support needed by the AnnotatedMessageHandlingMember to correctly implement the isA(String) and attributes(String) methods.\nThis pull request should be considered as a form of preparation towards a non-annotation driven MessageHandlingMember.\nNote that for any files which have been touched, IDE warnings have been resolved, including some method reordering and JavaDoc uptes.", "createdAt": "2020-12-01T14:37:24Z", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621", "merged": true, "mergeCommit": {"oid": "41e4c2f8bb332cd1d273254707bcd25295fdae3f"}, "closed": true, "closedAt": "2021-03-15T09:15:03Z", "author": {"login": "smcvb"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdh5wykgH2gAyNTMwMzQ5ODU1Ojk4MmRkM2RiN2ZmOGM0OGVkMThmZGQ0NTk0YmNlZmE0YWZkMDFmOWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeDUVWdgH2gAyNTMwMzQ5ODU1OjkzYWNlZTEzOWZkYzRiOGNhOTBiZDAyYTdhZWU1Mjk4ZGYwNTkwYTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "982dd3db7ff8c48ed18fdd4594bcefa4afd01f9a", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/982dd3db7ff8c48ed18fdd4594bcefa4afd01f9a", "committedDate": "2020-12-01T13:14:37Z", "message": "Introduce HandlerAttributes and HasHandlerAttributes\n\nIntroduce the handler attributes container HandlerAttributes alongside\nthe meta-annotation HasHandlerAttributes. The annotation can be used to\nmeta-annotate all annotations which contain attributes of importance for\n message handling members. The HandlerAttributes will be used to store\n the attributes in, per annotation/handlerType found\n\n#annotation-api-deprecation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b76db79c7471b8eb9a2b545cd5896056de3fa10a", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/b76db79c7471b8eb9a2b545cd5896056de3fa10a", "committedDate": "2020-12-01T13:18:49Z", "message": "Multitude of adjustments in the util classes\n\n- Move the null or empty string check from BuilderUtils to ObjectUtils\n- Adjust AnnotationUtils#findAnnotationAttributes to specify whether all\n attributes on any level of the meta-annotations should be included, or\n if only attributes of the target annotation and overrides on other\n levels should be included\n- Add a methods to AnnotationUtils which validates whether a given\nAnnotation is meta-annotated with another annotation. In doing so, it\nshould collect all annotations which are, directly or indirectly,\nannotated with the subject annotation\n\n#annotation-api-deprecation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "611b6e6915f518c71c39493c80772365db293d6b", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/611b6e6915f518c71c39493c80772365db293d6b", "committedDate": "2020-12-01T13:30:01Z", "message": "Meta-annotate handler annotation with HasHandlerAttributes\n\nMeta-annotated all message handling member annotations with\nHasHandlerAttributes so that we can inspect all handlers for the\npresence of this annotation\n\n#annotation-api-deprecation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be922ed189abff2bbf784b4364083037930f284b", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/be922ed189abff2bbf784b4364083037930f284b", "committedDate": "2020-12-01T13:35:08Z", "message": "Introduce HandlerAttributesUtils\n\nIntroduce a static method which can construct a HandlerAttributes object\n by using the new AnnotationUtils functionality to retrieve attributes\n with potential overridden attributes from indirectly annotated\n annotations, combined with the new functionality to validate whether a\n given annotation is meta-annotated with HasHandlerAttributes.\n\n#annotation-api-deprecation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c7f4adb9e936f872e3e54b6b729e86359c4f6ed", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/6c7f4adb9e936f872e3e54b6b729e86359c4f6ed", "committedDate": "2020-12-01T14:07:08Z", "message": "Adjust the MessageHandlingMember\n\nAdjust the MessageHandlingMember by deprecating the annotation focused\nmethods in favor of generic methods based on handler type. The\nAnnotatedMessageHandlingMember will use the HandlerAttributes to return\nsimilar results as were previously provided through the annotation\nfocused methods. On top of that, resolve some warnings\n\n#annotation-api-deprecation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c98aa7039f693a68e466460eec47741f53ee70df", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/c98aa7039f693a68e466460eec47741f53ee70df", "committedDate": "2020-12-01T16:34:38Z", "message": "Rename field\n\nRename field to attributes\n\n#annotation-api-deprecation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbfd5a163736a9db664372a2bf1ad6d4d8addcde", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/dbfd5a163736a9db664372a2bf1ad6d4d8addcde", "committedDate": "2020-12-02T08:46:24Z", "message": "Fine tune tests\n\n- Remove private classes in favor of public methods\n- Make local annotations protected\n- Add test case for non HasHandlerAttributes annotated handling member\n\n#annotation-api-deprecation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MjUzMjc4", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#pullrequestreview-548253278", "createdAt": "2020-12-09T14:43:26Z", "commit": {"oid": "dbfd5a163736a9db664372a2bf1ad6d4d8addcde"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NzgzNDUy", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#pullrequestreview-557783452", "createdAt": "2020-12-23T10:33:15Z", "commit": {"oid": "dbfd5a163736a9db664372a2bf1ad6d4d8addcde"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMDozMzoxNVrOIKgkzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMToyMjozN1rOIKhzSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5MDM4MQ==", "bodyText": "Nit: This looks like it belongs more to StringUtils instead of ObjectUtils", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r547890381", "createdAt": "2020-12-23T10:33:15Z", "author": {"login": "sandjelkovic"}, "path": "messaging/src/main/java/org/axonframework/common/ObjectUtils.java", "diffHunk": "@@ -121,4 +124,16 @@ public static long getRemainingOfDeadline(long deadline) {\n         leftTimeout = leftTimeout < 0 ? 0 : leftTimeout;\n         return leftTimeout;\n     }\n+\n+    /**\n+     * Validate whether the given {@link String} {@code s} is not {@code null} and not empty (where empty is defined as\n+     * {@code \"\"}.\n+     *\n+     * @param s the {@link String} to validate whether it is not {@code null} and not empty\n+     * @return {@code true} if the given {@link String} {@code s} is not {@code null} and not empty, {@code false}\n+     * otherwise\n+     */\n+    public static boolean nonEmptyOrNull(String s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbfd5a163736a9db664372a2bf1ad6d4d8addcde"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NzcxMA==", "bodyText": "If returning unmodifiable maps, inner maps should be unmodifiable as well. Or at least copied", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r547897710", "createdAt": "2020-12-23T10:51:10Z", "author": {"login": "sandjelkovic"}, "path": "messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.axonframework.messaging.annotation;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Container for message handler attributes. Can store several {@link Map}s of {@link String} to {@link Object} under\n+ * their own key, resembling a message handling method which serves several handling functions.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.5\n+ */\n+public class HandlerAttributes {\n+\n+    private final Map<String, Map<String, Object>> attributes;\n+\n+    /**\n+     * Constructs an empty handler attributes object.\n+     */\n+    public HandlerAttributes() {\n+        this(new HashMap<>());\n+    }\n+\n+    /**\n+     * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n+     *\n+     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link\n+     *                          HandlerAttributes} on\n+     */\n+    public HandlerAttributes(Map<String, Map<String, Object>> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    /**\n+     * Put new {@code attributes} for the given {@code handlerType}.\n+     *\n+     * @param handlerType the type of handler to add {@code attributes} for\n+     * @param attributes  the {@link Map} of attribute information to add for the given {@code handlerType}\n+     */\n+    public void put(String handlerType, Map<String, Object> attributes) {\n+        this.attributes.put(handlerType, attributes);\n+    }\n+\n+    /**\n+     * Retrieve the attributes for the given {@code handlerType}. Might be {@code null} if there are no attributes\n+     * present for the specified type.\n+     *\n+     * @param handlerType the type of handler to retrieve attributes for\n+     * @return the attributes for the given {@code handlerType}\n+     */\n+    public Map<String, Object> get(String handlerType) {\n+        return Collections.unmodifiableMap(attributes.get(handlerType));\n+    }\n+\n+    /**\n+     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object. The returned\n+     * {@link Map} contains a {@link Map} of attribute name to attribute value, per handler type present.\n+     *\n+     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object\n+     */\n+    public Map<String, Map<String, Object>> getAll() {\n+        return Collections.unmodifiableMap(attributes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbfd5a163736a9db664372a2bf1ad6d4d8addcde"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkxMDQ3Mg==", "bodyText": "Might be worth splitting this method into 2 or 3 specialised methods.\n\nLooking up and gathering of targets annotated with the subject can be a separate method. As this is a recursive method with state passed trough, it might be better to hide this fact (visited and annotatedWithSubject parameters) from the outside.\nisAnnotatedWith implies a boolean return value to answer if the target is annotated with the subject. This can use the method that will gather all targets annotated with the subject from the above point to do the complex work. If performance is critical, it can have its own search but short-circuit the moment the annotation is found", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r547910472", "createdAt": "2020-12-23T11:22:37Z", "author": {"login": "sandjelkovic"}, "path": "messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java", "diffHunk": "@@ -179,8 +270,51 @@ private static String resolveName(Method method) {\n         return method.getName();\n     }\n \n-    private AnnotationUtils() {\n-        // utility class\n+    /**\n+     * Validate whether the given {@code target} annotation {@link Class} is meta-annotated with the given {@code\n+     * subject}. If this is the case for the {@code target} itself or any meta-annotation on any level of the {@code\n+     * target}, {@code true} will be returned.\n+     * <p>\n+     * Any {@link Annotation} classes which are directly annotated or meta-annotated with the given {@code subject} will\n+     * be stored in the {@code annotatedWithSubject} {@link Set}. The {@code visited} {@code Set} is used to ignore\n+     * annotations which have already been validated.\n+     *\n+     * @param target               the annotation {@link Class} to validate if it is annotated with the given {@code\n+     *                             subject}\n+     * @param subject              the annotation {@link Class} to check whether it is present on the given {@code\n+     *                             target}, directly or through meta-annotations\n+     * @param annotatedWithSubject a {@link Set} to store all class' in which are annotated with the {@code subject},\n+     *                             either directly or through meta-annotations\n+     * @param visited              a {@link Set} containing all annotation class' which have been visited in the process\n+     *                             to overcome an endless validation loop\n+     * @return {@code true} if the {@code target} or any meta-annotations of the {@code target} are annotated with the\n+     * {@code subject}, {@code false} otherwise\n+     */\n+    public static boolean isAnnotatedWith(Class<? extends Annotation> target,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbfd5a163736a9db664372a2bf1ad6d4d8addcde"}, "originalPosition": 252}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28655240497a30bbe42b9c7b440d82e2970b4496", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/28655240497a30bbe42b9c7b440d82e2970b4496", "committedDate": "2020-12-31T10:02:41Z", "message": "Move string specific method to a StringUtils class\n\nMove string specific method to a StringUtils class\n\n#1621"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "227c86ae177e1ff651e6d20324a4f912d1652528", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/227c86ae177e1ff651e6d20324a4f912d1652528", "committedDate": "2020-12-31T10:20:47Z", "message": "Enforce deep unmodifiable map\n\nEnforce deep unmodifiable map by moving through all entries and making\neach value unmodifiable too.\n\n#1621"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1MzgyNDg4", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#pullrequestreview-565382488", "createdAt": "2021-01-11T14:05:44Z", "commit": {"oid": "227c86ae177e1ff651e6d20324a4f912d1652528"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfc2eb11dfc1f89cf8e44d99bf271562a8628ccd", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/cfc2eb11dfc1f89cf8e44d99bf271562a8628ccd", "committedDate": "2021-02-16T12:42:11Z", "message": "Merge remote-tracking branch 'origin/master' into feature/annotation-api-deprecation\n\n# Conflicts:\n#\tmessaging/src/main/java/org/axonframework/messaging/annotation/AnnotatedMessageHandlingMember.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a23b0e46fd7021e44b0b636e56d7493453ec5e19", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/a23b0e46fd7021e44b0b636e56d7493453ec5e19", "committedDate": "2021-02-18T11:53:39Z", "message": "Merge remote-tracking branch 'origin/master' into feature/annotation-api-deprecation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5f2c819f4dc884d185097c590c16feb52a937ef", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/e5f2c819f4dc884d185097c590c16feb52a937ef", "committedDate": "2021-02-18T12:36:22Z", "message": "Introduce MessageHandlingMember#attribute method\n\nInstead of claiming the entire set of attributes, allowing to retrieve a\n single attribute would be helpful too. Add a dictionary to simplify the\n retrieval of Axon specific attributes\n\n#1621"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzMzE4NTM2", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#pullrequestreview-593318536", "createdAt": "2021-02-18T15:10:36Z", "commit": {"oid": "e5f2c819f4dc884d185097c590c16feb52a937ef"}, "state": "DISMISSED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQxNToxMDozNlrOInspug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQwNzo1MzowNVrOIoKwXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQ5Njk1NA==", "bodyText": "I suggest adding these to the HandlerAttributes class, as that's where these keys are expected to be used.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r578496954", "createdAt": "2021-02-18T15:10:36Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributeDictionary.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.axonframework.messaging.annotation;\n+\n+/**\n+ * Dictionary containing the possible attributes a {@link MessageHandlingMember} can have. Can be used as input for\n+ * {@link MessageHandlingMember#attribute(String)}.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.5\n+ */\n+public abstract class HandlerAttributeDictionary {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5f2c819f4dc884d185097c590c16feb52a937ef"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQ5OTkyMQ==", "bodyText": "Shouldn't we just create a subclass of HandlerAttributes (called AnnotatedHandlerAttributes) that takes an AnnotatedElement as a constructor and populates its internal Map?\nOr otherwise, maybe HandlerAttributes should be an interface with different implementations.... \ud83e\udd37\u200d\u2642\ufe0f", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r578499921", "createdAt": "2021-02-18T15:14:29Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributesUtils.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.axonframework.messaging.annotation;\n+\n+import org.axonframework.common.annotation.AnnotationUtils;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.axonframework.common.annotation.AnnotationUtils.findAnnotationAttributes;\n+import static org.axonframework.common.annotation.AnnotationUtils.isAnnotatedWith;\n+\n+/**\n+ * Utility class which can generate a {@link HandlerAttributes} object for a given {@link AnnotatedElement}. It does so\n+ * by validating all (meta-)annotations of the given element for the presence of the {@link HasHandlerAttributes}\n+ * annotation. Each found (meta-)annotation's attributes will be included in the {@code HandlerAttributes}.\n+ * <p>\n+ * This utility can be used to support annotation driven {@link MessageHandlingMember} implementations to automatically\n+ * generate the attributes collection.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.5\n+ */\n+public abstract class HandlerAttributesUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5f2c819f4dc884d185097c590c16feb52a937ef"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk4NzA0OA==", "bodyText": "Should this just be key->value mapping, instead of key->key->value?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r578987048", "createdAt": "2021-02-19T07:46:14Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package org.axonframework.messaging.annotation;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Container for message handler attributes. Can store several {@link Map}s of {@link String} to {@link Object} under\n+ * their own key, resembling a message handling method which serves several handling functions.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.5\n+ */\n+public class HandlerAttributes {\n+\n+    private final Map<String, Map<String, Object>> attributes;\n+\n+    /**\n+     * Constructs an empty handler attributes object.\n+     */\n+    public HandlerAttributes() {\n+        this(new HashMap<>());\n+    }\n+\n+    /**\n+     * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n+     *\n+     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link HandlerAttributes}\n+     *                   on\n+     */\n+    public HandlerAttributes(Map<String, Map<String, Object>> attributes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5f2c819f4dc884d185097c590c16feb52a937ef"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk4NzgyOQ==", "bodyText": "This sentence doesn't make things much clearer. Let's remove it. It's just a bunch of key->value tuples, where we get all the tuples whose key starts with the given prefix.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r578987829", "createdAt": "2021-02-19T07:47:54Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package org.axonframework.messaging.annotation;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Container for message handler attributes. Can store several {@link Map}s of {@link String} to {@link Object} under\n+ * their own key, resembling a message handling method which serves several handling functions.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.5\n+ */\n+public class HandlerAttributes {\n+\n+    private final Map<String, Map<String, Object>> attributes;\n+\n+    /**\n+     * Constructs an empty handler attributes object.\n+     */\n+    public HandlerAttributes() {\n+        this(new HashMap<>());\n+    }\n+\n+    /**\n+     * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n+     *\n+     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link HandlerAttributes}\n+     *                   on\n+     */\n+    public HandlerAttributes(Map<String, Map<String, Object>> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    /**\n+     * Put new {@code attributes} for the given {@code handlerType}.\n+     *\n+     * @param handlerType the type of handler to add {@code attributes} for\n+     * @param attributes  the {@link Map} of attribute information to add for the given {@code handlerType}\n+     */\n+    public void put(String handlerType, Map<String, Object> attributes) {\n+        this.attributes.put(handlerType, attributes);\n+    }\n+\n+    /**\n+     * Retrieve the attributes for the given {@code handlerType}. Might be {@code null} if there are no attributes\n+     * present for the specified type.\n+     *\n+     * @param handlerType the type of handler to retrieve attributes for\n+     * @return the attributes for the given {@code handlerType}\n+     */\n+    public Map<String, Object> get(String handlerType) {\n+        return Collections.unmodifiableMap(attributes.get(handlerType));\n+    }\n+\n+    /**\n+     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object. The returned\n+     * {@link Map} contains a {@link Map} of attribute name to attribute value, per handler type present.\n+     *\n+     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object\n+     */\n+    public Map<String, Map<String, Object>> getAll() {\n+        return Collections.unmodifiableMap(\n+                attributes.entrySet().stream()\n+                          .collect(Collectors.toMap(\n+                                  Map.Entry::getKey,\n+                                  entry -> Collections.unmodifiableMap(entry.getValue())\n+                          ))\n+        );\n+    }\n+\n+    /**\n+     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed\n+     * format. The returned {@link Map} contains keys representing a format of {@code \"[handlerType].[attributeName]\"}\n+     * with the respective attribute value corresponding to the attribute name.\n+     * <p>\n+     * Serves the purpose a of providing a {@code Map} containing a property file like structure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5f2c819f4dc884d185097c590c16feb52a937ef"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk4ODA3Mw==", "bodyText": "We should abstract this logic away into whatever component inspects the attributes. This still seems quite specific to the annotation approach.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r578988073", "createdAt": "2021-02-19T07:48:30Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package org.axonframework.messaging.annotation;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Container for message handler attributes. Can store several {@link Map}s of {@link String} to {@link Object} under\n+ * their own key, resembling a message handling method which serves several handling functions.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.5\n+ */\n+public class HandlerAttributes {\n+\n+    private final Map<String, Map<String, Object>> attributes;\n+\n+    /**\n+     * Constructs an empty handler attributes object.\n+     */\n+    public HandlerAttributes() {\n+        this(new HashMap<>());\n+    }\n+\n+    /**\n+     * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n+     *\n+     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link HandlerAttributes}\n+     *                   on\n+     */\n+    public HandlerAttributes(Map<String, Map<String, Object>> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    /**\n+     * Put new {@code attributes} for the given {@code handlerType}.\n+     *\n+     * @param handlerType the type of handler to add {@code attributes} for\n+     * @param attributes  the {@link Map} of attribute information to add for the given {@code handlerType}\n+     */\n+    public void put(String handlerType, Map<String, Object> attributes) {\n+        this.attributes.put(handlerType, attributes);\n+    }\n+\n+    /**\n+     * Retrieve the attributes for the given {@code handlerType}. Might be {@code null} if there are no attributes\n+     * present for the specified type.\n+     *\n+     * @param handlerType the type of handler to retrieve attributes for\n+     * @return the attributes for the given {@code handlerType}\n+     */\n+    public Map<String, Object> get(String handlerType) {\n+        return Collections.unmodifiableMap(attributes.get(handlerType));\n+    }\n+\n+    /**\n+     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object. The returned\n+     * {@link Map} contains a {@link Map} of attribute name to attribute value, per handler type present.\n+     *\n+     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object\n+     */\n+    public Map<String, Map<String, Object>> getAll() {\n+        return Collections.unmodifiableMap(\n+                attributes.entrySet().stream()\n+                          .collect(Collectors.toMap(\n+                                  Map.Entry::getKey,\n+                                  entry -> Collections.unmodifiableMap(entry.getValue())\n+                          ))\n+        );\n+    }\n+\n+    /**\n+     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed\n+     * format. The returned {@link Map} contains keys representing a format of {@code \"[handlerType].[attributeName]\"}\n+     * with the respective attribute value corresponding to the attribute name.\n+     * <p>\n+     * Serves the purpose a of providing a {@code Map} containing a property file like structure.\n+     *\n+     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed format\n+     */\n+    public Map<String, Object> getAllPrefixed() {\n+        Map<String, Object> allPrefixedAttributes = new HashMap<>();\n+        for (Map.Entry<String, Map<String, Object>> attributeEntry : attributes.entrySet()) {\n+            String handlerType = attributeEntry.getKey();\n+            Map<String, Object> prefixedAttributes =\n+                    attributeEntry.getValue().entrySet().stream()\n+                                  .collect(Collectors.toMap(\n+                                          entry -> prefixedKey(handlerType, entry.getKey()),\n+                                          Map.Entry::getValue\n+                                  ));\n+            allPrefixedAttributes.putAll(prefixedAttributes);\n+        }\n+        return Collections.unmodifiableMap(allPrefixedAttributes);\n+    }\n+\n+    private String prefixedKey(String handlerType, String attributeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5f2c819f4dc884d185097c590c16feb52a937ef"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk4OTUyMw==", "bodyText": "We should be clear about whether this method does a simple \"string prefix\" approach, or whether the prefix approach is \"dot-aware\".\nFor example, given a key \"SomeAttribute.value\", will the prefix \"Some\" match, or not?\nAlso, I wonder what the value of this method is. HandlerWrappers will generally know what keys they need to interact with. If not, they can get all the attributes and simply iterate over those, ignoring whatever they don't care about. Right?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r578989523", "createdAt": "2021-02-19T07:51:43Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/messaging/annotation/HandlerAttributes.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package org.axonframework.messaging.annotation;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Container for message handler attributes. Can store several {@link Map}s of {@link String} to {@link Object} under\n+ * their own key, resembling a message handling method which serves several handling functions.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.5\n+ */\n+public class HandlerAttributes {\n+\n+    private final Map<String, Map<String, Object>> attributes;\n+\n+    /**\n+     * Constructs an empty handler attributes object.\n+     */\n+    public HandlerAttributes() {\n+        this(new HashMap<>());\n+    }\n+\n+    /**\n+     * Construct a handler attributes object based on the given {@code handlerAttributes} {@link Map}.\n+     *\n+     * @param attributes a {@link Map} from handler type to attributes {@code Map} to base a {@link HandlerAttributes}\n+     *                   on\n+     */\n+    public HandlerAttributes(Map<String, Map<String, Object>> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    /**\n+     * Put new {@code attributes} for the given {@code handlerType}.\n+     *\n+     * @param handlerType the type of handler to add {@code attributes} for\n+     * @param attributes  the {@link Map} of attribute information to add for the given {@code handlerType}\n+     */\n+    public void put(String handlerType, Map<String, Object> attributes) {\n+        this.attributes.put(handlerType, attributes);\n+    }\n+\n+    /**\n+     * Retrieve the attributes for the given {@code handlerType}. Might be {@code null} if there are no attributes\n+     * present for the specified type.\n+     *\n+     * @param handlerType the type of handler to retrieve attributes for\n+     * @return the attributes for the given {@code handlerType}\n+     */\n+    public Map<String, Object> get(String handlerType) {\n+        return Collections.unmodifiableMap(attributes.get(handlerType));\n+    }\n+\n+    /**\n+     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object. The returned\n+     * {@link Map} contains a {@link Map} of attribute name to attribute value, per handler type present.\n+     *\n+     * @return all attributes for all handler types stored in this {@link HandlerAttributes} object\n+     */\n+    public Map<String, Map<String, Object>> getAll() {\n+        return Collections.unmodifiableMap(\n+                attributes.entrySet().stream()\n+                          .collect(Collectors.toMap(\n+                                  Map.Entry::getKey,\n+                                  entry -> Collections.unmodifiableMap(entry.getValue())\n+                          ))\n+        );\n+    }\n+\n+    /**\n+     * Retrieve all attributes for all handler types stored in this {@link HandlerAttributes} object in a prefixed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5f2c819f4dc884d185097c590c16feb52a937ef"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk5MDE3NA==", "bodyText": "Not sure about this method. Isn't this a question of checking whether expected attributes are present?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1621#discussion_r578990174", "createdAt": "2021-02-19T07:53:05Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/messaging/annotation/MessageHandlingMember.java", "diffHunk": "@@ -140,9 +140,26 @@ default String signature() {\n      *\n      * @param annotationType Annotation to check for on the target method\n      * @return {@code true} if the annotation is present on the target method, {@code false} otherwise\n+     * @deprecated in favor of {@link #isA(String)}\n      */\n+    @Deprecated\n     boolean hasAnnotation(Class<? extends Annotation> annotationType);\n \n+    /**\n+     * Validates whether this {@link MessageHandlingMember} is an implementation of the given {@code handlerType}.\n+     * <p>\n+     * Note that a given message handling member can be several handler types at once. For example an Event Handler is\n+     * also a Message Handler of type Event Message.\n+     *\n+     * @param handlerType the {@link MessageHandlingMember} type to validate whether this handler is an implementation\n+     *                    of\n+     * @return {@code true} if this {@link MessageHandlingMember} is an implementation of the given {@code handlerType},\n+     * {@code false} otherwise\n+     */\n+    default boolean isA(String handlerType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5f2c819f4dc884d185097c590c16feb52a937ef"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e1ea6725ed82196caf1a1f364ae06963d2177aa", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/5e1ea6725ed82196caf1a1f364ae06963d2177aa", "committedDate": "2021-03-02T08:57:08Z", "message": "Merge remote-tracking branch 'origin/master' into feature/annotation-api-deprecation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58e1cdea563adcf295c534b6473eebde52c7485f", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/58e1cdea563adcf295c534b6473eebde52c7485f", "committedDate": "2021-03-02T14:30:49Z", "message": "Adjust attributes storage solution\n\nInstead of having a single HandlerAttributes object, change it into an\ninterface with two implementations: an annotation based version and a\ndefault Map version. The former should be used by the\nAnnotatedMessageHandlingMember, whereas the latter serves the purpose of\n opening up custom MessageHandlingMember which decide to not use\n annotations at all. Additionally, remove the attributes() and isA()\n methods from the MessageHandlingMember, as they do not add any value.\n\n#1621"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1363ad57f0c1e466ca0f2fa6ebc4102cba9ae44d", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/1363ad57f0c1e466ca0f2fa6ebc4102cba9ae44d", "committedDate": "2021-03-02T15:57:18Z", "message": "Move HandlerAttributes and construct AbstractHandlerAttributes\n\nThe HandlerAttributes are not annotation specific, so should not reside\nin the annotation package. Furthermore, we can benefit from an\nAbstractHandlerAttributes, to deduplicate code in the Annotated- and\nGenericHandlerAttributes class'\n\n#1621"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a0a00b8369b4b2f92482817e1759a74a660a97a", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/7a0a00b8369b4b2f92482817e1759a74a660a97a", "committedDate": "2021-03-02T15:59:48Z", "message": "Fix sonar issue\n\nAdjust inspection order of fields to comply with sonar rules.\n\n#1621"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de9238d8af0a6570b28872568be110c4d35c5d0a", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/de9238d8af0a6570b28872568be110c4d35c5d0a", "committedDate": "2021-03-02T16:36:26Z", "message": "Add tests for additional coverage\n\nAdd tests for additional coverage\n\n#1621"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c1cc5f433a8a0ef466128199a901feec45c8c61", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/7c1cc5f433a8a0ef466128199a901feec45c8c61", "committedDate": "2021-03-09T09:26:27Z", "message": "Merge remote-tracking branch 'origin/master' into feature/annotation-api-deprecation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe2ab329ae3cc654b4ada05636fef32b975ad49c", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/fe2ab329ae3cc654b4ada05636fef32b975ad49c", "committedDate": "2021-03-11T10:26:24Z", "message": "Process review comments\n\n- Remove AbstractHandlerAttributes\n- Rename Generic- to SimpleHandlerAttributes\n- Let AnnotatedHandlerAttributes hold a reference to a\nSimpleHandlerAttributes\n- Delegate AnnotatedHandlerAttributes operations to the\nSimpleHandlerAttributes\n- Adjust mergeWith operation to take in a HandlerAttributes\n- Add mergeWith to HandlerAttributes interface\n- Fine tune javadoc\n\n#1621"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "279e7522a0ad619d0653f227bebb95e3183dce77", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/279e7522a0ad619d0653f227bebb95e3183dce77", "committedDate": "2021-03-11T11:09:43Z", "message": "Add tests for higher coverage\n\nAdd tests for higher coverage\n\n#1621"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbab02c6d8346e2fe12a2cfe0fb362ed49f37333", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/dbab02c6d8346e2fe12a2cfe0fb362ed49f37333", "committedDate": "2021-03-15T08:51:07Z", "message": "Process review comments\n\n- Rename mergeWith to mergedWith, as it returns a new object instead of\nadjusting the existing object\n- Drop default constructor for the SimpleHandlerAttributes, as it\ndoesn't add any direct value\n- Add comment specifying attributes map changes are not reflected by a\nconstructed SimpleHandlerAttributes\n\n#1621"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93acee139fdc4b8ca90bd02a7aee5298df0590a8", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/93acee139fdc4b8ca90bd02a7aee5298df0590a8", "committedDate": "2021-03-15T08:51:35Z", "message": "Merge remote-tracking branch 'origin/master' into feature/annotation-api-deprecation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2036, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}