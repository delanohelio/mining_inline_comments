{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NjYyMTA5", "number": 1435, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOToxMjowMlrOD9Tt0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo1NjoyNlrOEF0w1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjEyNzU0OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/eventhandling/EventHandlerInvoker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOToxMjowMlrOGWuUoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOTo0Njo0OVrOGmO0Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4MDgwMQ==", "bodyText": "resetResourse instead resetInfo?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1435#discussion_r426480801", "createdAt": "2020-05-18T09:12:02Z", "author": {"login": "schananas"}, "path": "messaging/src/main/java/org/axonframework/eventhandling/EventHandlerInvoker.java", "diffHunk": "@@ -70,5 +73,15 @@ default boolean supportsReset() {\n      * Performs any activities that are required to reset the state managed by handlers assigned to this invoker.\n      */\n     default void performReset() {\n+        performReset(NO_RESET_PAYLOAD);\n+    }\n+\n+    /**\n+     * Performs any activities that are required to reset the state managed by handlers assigned to this invoker.\n+     *\n+     * @param resetInfo a {@code R} used to support the reset operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3083e1b407050c2b84e48a09e7e06603e17265d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0MTc5MQ==", "bodyText": "I ended up with resetContext. What do you think?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1435#discussion_r442741791", "createdAt": "2020-06-19T09:46:49Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/eventhandling/EventHandlerInvoker.java", "diffHunk": "@@ -70,5 +73,15 @@ default boolean supportsReset() {\n      * Performs any activities that are required to reset the state managed by handlers assigned to this invoker.\n      */\n     default void performReset() {\n+        performReset(NO_RESET_PAYLOAD);\n+    }\n+\n+    /**\n+     * Performs any activities that are required to reset the state managed by handlers assigned to this invoker.\n+     *\n+     * @param resetInfo a {@code R} used to support the reset operation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4MDgwMQ=="}, "originalCommit": {"oid": "c3083e1b407050c2b84e48a09e7e06603e17265d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTMyOTUzOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/eventhandling/replay/GenericResetMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzoyOToxNVrOGkOpHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTowMzo1NVrOGm79UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0MTgyMw==", "bodyText": "It would be beneficial to check whether messageOrPayload is an instance of Message as well.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1435#discussion_r440641823", "createdAt": "2020-06-16T07:29:15Z", "author": {"login": "m1l4n54v1c"}, "path": "messaging/src/main/java/org/axonframework/eventhandling/replay/GenericResetMessage.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.eventhandling.replay;\n+\n+import org.axonframework.messaging.GenericMessage;\n+import org.axonframework.messaging.Message;\n+import org.axonframework.messaging.MessageDecorator;\n+import org.axonframework.messaging.MetaData;\n+\n+import java.util.Map;\n+\n+/**\n+ * Generic implementation of the {@link ResetMessage}.\n+ *\n+ * @param <T> the type of payload contained in the message\n+ * @author Steven van Beelen\n+ * @since 4.4\n+ */\n+public class GenericResetMessage<T> extends MessageDecorator<T> implements ResetMessage<T> {\n+\n+    private static final long serialVersionUID = -6872386525166762225L;\n+\n+    /**\n+     * Returns the given {@code messageOrPayload} as a {@link ResetMessage}. If {@code messageOrPayload} already\n+     * implements {@code ResetMessage}, it is returned as-is. Otherwise, the given {@code messageOrPayload} is wrapped\n+     * into a {@link GenericResetMessage} as its payload.\n+     *\n+     * @param messageOrPayload the payload to wrap as {@link ResetMessage}\n+     * @param <T>              the type of payload contained in the message\n+     * @return a {@link ResetMessage} containing given {@code messageOrPayload} as payload, or the {@code\n+     * messageOrPayload} if it already implements {@code ResetMessage}.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> ResetMessage<T> asResetMessage(Object messageOrPayload) {\n+        return messageOrPayload instanceof ResetMessage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4129adc8600d48e81eee7e89c7ac554e87f130e4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4MTQyNQ==", "bodyText": "Good point, will adjust.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1435#discussion_r443481425", "createdAt": "2020-06-22T11:03:55Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/eventhandling/replay/GenericResetMessage.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.eventhandling.replay;\n+\n+import org.axonframework.messaging.GenericMessage;\n+import org.axonframework.messaging.Message;\n+import org.axonframework.messaging.MessageDecorator;\n+import org.axonframework.messaging.MetaData;\n+\n+import java.util.Map;\n+\n+/**\n+ * Generic implementation of the {@link ResetMessage}.\n+ *\n+ * @param <T> the type of payload contained in the message\n+ * @author Steven van Beelen\n+ * @since 4.4\n+ */\n+public class GenericResetMessage<T> extends MessageDecorator<T> implements ResetMessage<T> {\n+\n+    private static final long serialVersionUID = -6872386525166762225L;\n+\n+    /**\n+     * Returns the given {@code messageOrPayload} as a {@link ResetMessage}. If {@code messageOrPayload} already\n+     * implements {@code ResetMessage}, it is returned as-is. Otherwise, the given {@code messageOrPayload} is wrapped\n+     * into a {@link GenericResetMessage} as its payload.\n+     *\n+     * @param messageOrPayload the payload to wrap as {@link ResetMessage}\n+     * @param <T>              the type of payload contained in the message\n+     * @return a {@link ResetMessage} containing given {@code messageOrPayload} as payload, or the {@code\n+     * messageOrPayload} if it already implements {@code ResetMessage}.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> ResetMessage<T> asResetMessage(Object messageOrPayload) {\n+        return messageOrPayload instanceof ResetMessage", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0MTgyMw=="}, "originalCommit": {"oid": "4129adc8600d48e81eee7e89c7ac554e87f130e4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTM0OTgwOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/eventhandling/replay/ResetMessage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzozNTowN1rOGkO1tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoyMToyMFrOGnAT8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0NTA0NQ==", "bodyText": "Did you consider extending EventMessage? This approach could resolve a backwards compatibility issue with @ResetHandler annotation.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1435#discussion_r440645045", "createdAt": "2020-06-16T07:35:07Z", "author": {"login": "m1l4n54v1c"}, "path": "messaging/src/main/java/org/axonframework/eventhandling/replay/ResetMessage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.eventhandling.replay;\n+\n+import org.axonframework.messaging.Message;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a Message initiating the reset of an Event Handling Component. A payload of {@code T} can be provided to\n+ * support the reset operation handling this message.\n+ *\n+ * @param <T> the type of payload contained in the message\n+ * @author Steven van Beelen\n+ * @since 4.4\n+ */\n+public interface ResetMessage<T> extends Message<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4129adc8600d48e81eee7e89c7ac554e87f130e4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4ODI4NQ==", "bodyText": "Unsure why I didn't do this, as I am pretty sure I had this at the start. Gonna re-evaluate this, thanks for pointing it out.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1435#discussion_r443488285", "createdAt": "2020-06-22T11:18:33Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/eventhandling/replay/ResetMessage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.eventhandling.replay;\n+\n+import org.axonframework.messaging.Message;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a Message initiating the reset of an Event Handling Component. A payload of {@code T} can be provided to\n+ * support the reset operation handling this message.\n+ *\n+ * @param <T> the type of payload contained in the message\n+ * @author Steven van Beelen\n+ * @since 4.4\n+ */\n+public interface ResetMessage<T> extends Message<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0NTA0NQ=="}, "originalCommit": {"oid": "4129adc8600d48e81eee7e89c7ac554e87f130e4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1Mjc1NQ==", "bodyText": "Adjusted, as this imposes a stronger contract and indeed resolves potential backwards compatibility issues for those having the @ResetHandler as a meta-annotation.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1435#discussion_r443552755", "createdAt": "2020-06-22T13:21:20Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/eventhandling/replay/ResetMessage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.eventhandling.replay;\n+\n+import org.axonframework.messaging.Message;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a Message initiating the reset of an Event Handling Component. A payload of {@code T} can be provided to\n+ * support the reset operation handling this message.\n+ *\n+ * @param <T> the type of payload contained in the message\n+ * @author Steven van Beelen\n+ * @since 4.4\n+ */\n+public interface ResetMessage<T> extends Message<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0NTA0NQ=="}, "originalCommit": {"oid": "4129adc8600d48e81eee7e89c7ac554e87f130e4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTQyODA0OnYy", "diffSide": "RIGHT", "path": "modelling/src/main/java/org/axonframework/modelling/saga/AbstractSagaManager.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo1NjoyNlrOGkPmUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoyMzoxOFrOGnAZQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NzQ4OQ==", "bodyText": "Hmmmm... Even if Saga @Allows replaying?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1435#discussion_r440657489", "createdAt": "2020-06-16T07:56:26Z", "author": {"login": "m1l4n54v1c"}, "path": "modelling/src/main/java/org/axonframework/modelling/saga/AbstractSagaManager.java", "diffHunk": "@@ -191,7 +191,7 @@ public boolean supportsReset() {\n     }\n \n     @Override\n-    public void performReset() {\n+    public void performReset(Object resetInfo) {\n         throw new ResetNotSupportedException(\"Sagas do no support resetting tokens\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4129adc8600d48e81eee7e89c7ac554e87f130e4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MjY4MQ==", "bodyText": "Yes, that is the stance, as that would mean you are reintroducing side effects which is an unlikely scenario.\nAlthough it's true that several EventHandlerInvokers can be paired under a MultiEventHandlerInvoker, thus potentially combining Sagas (which you do not want to replay) and regular Event Handling Components (EHCs), the canHandle method would still make certain the AbstractSagaManager (which is an EventHandlingInvoker implementation), would not be called:\n@Override\npublic boolean canHandle(EventMessage<?> eventMessage, Segment segment) {\n    return delegates.stream().anyMatch(i -> canHandle(i, eventMessage, segment));\n}\nprivate boolean canHandle(EventHandlerInvoker invoker, EventMessage<?> eventMessage, Segment segment) {\n    return (invoker.supportsReset() || !ReplayToken.isReplay(eventMessage)) && invoker.canHandle(eventMessage, segment);\n}\nHence, I still believe we're covered here.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1435#discussion_r443492681", "createdAt": "2020-06-22T11:28:10Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/saga/AbstractSagaManager.java", "diffHunk": "@@ -191,7 +191,7 @@ public boolean supportsReset() {\n     }\n \n     @Override\n-    public void performReset() {\n+    public void performReset(Object resetInfo) {\n         throw new ResetNotSupportedException(\"Sagas do no support resetting tokens\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NzQ4OQ=="}, "originalCommit": {"oid": "4129adc8600d48e81eee7e89c7ac554e87f130e4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwMjY3Mw==", "bodyText": "You are right! It's actually not possible to @AllowReplay on a saga which is a discussion on its own and shouldn't block this PR anyway. Thanks for the detailed explanation @smcvb!", "url": "https://github.com/AxonFramework/AxonFramework/pull/1435#discussion_r443502673", "createdAt": "2020-06-22T11:49:44Z", "author": {"login": "m1l4n54v1c"}, "path": "modelling/src/main/java/org/axonframework/modelling/saga/AbstractSagaManager.java", "diffHunk": "@@ -191,7 +191,7 @@ public boolean supportsReset() {\n     }\n \n     @Override\n-    public void performReset() {\n+    public void performReset(Object resetInfo) {\n         throw new ResetNotSupportedException(\"Sagas do no support resetting tokens\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NzQ4OQ=="}, "originalCommit": {"oid": "4129adc8600d48e81eee7e89c7ac554e87f130e4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1MzYzNg==", "bodyText": "As discussed, I should've included the handle method in my previous description as well, as the canHandle does an anyMatch.\nThus for clarity:\n@Override\npublic void handle(EventMessage<?> message, Segment segment) throws Exception {\n    for (EventHandlerInvoker i : delegates) {\n        if (canHandle(i, message, segment)) {\n            i.handle(message, segment);\n        }\n    }\n}\nYou can see the private boolean canHandle(...) is called there, effectively assuring a Saga will not handle events upon a reset.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1435#discussion_r443553636", "createdAt": "2020-06-22T13:22:40Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/saga/AbstractSagaManager.java", "diffHunk": "@@ -191,7 +191,7 @@ public boolean supportsReset() {\n     }\n \n     @Override\n-    public void performReset() {\n+    public void performReset(Object resetInfo) {\n         throw new ResetNotSupportedException(\"Sagas do no support resetting tokens\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NzQ4OQ=="}, "originalCommit": {"oid": "4129adc8600d48e81eee7e89c7ac554e87f130e4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1NDExMg==", "bodyText": "Created an issue to support replay on sagas: #1458", "url": "https://github.com/AxonFramework/AxonFramework/pull/1435#discussion_r443554112", "createdAt": "2020-06-22T13:23:18Z", "author": {"login": "m1l4n54v1c"}, "path": "modelling/src/main/java/org/axonframework/modelling/saga/AbstractSagaManager.java", "diffHunk": "@@ -191,7 +191,7 @@ public boolean supportsReset() {\n     }\n \n     @Override\n-    public void performReset() {\n+    public void performReset(Object resetInfo) {\n         throw new ResetNotSupportedException(\"Sagas do no support resetting tokens\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NzQ4OQ=="}, "originalCommit": {"oid": "4129adc8600d48e81eee7e89c7ac554e87f130e4"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3196, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}