{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDEzMjc2", "number": 1310, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMToyMToyNVrODWrCFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMToyMToyNVrODWrCFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTAwMzExOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/EventTypeUpcaster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMToyMToyNVrOFbkMmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMDoxMToxM1rOFbwyUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0ODkyMw==", "bodyText": "Curious, why an abstract class and not a class where the expectedPayloadType, expectedRevision and their upcast countertypes are passed as constructor parameters?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1310#discussion_r364448923", "createdAt": "2020-01-08T21:21:25Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/EventTypeUpcaster.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.serialization.upcasting.event;\n+\n+import org.axonframework.serialization.SerializedType;\n+import org.axonframework.serialization.SimpleSerializedType;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * A {@link SingleEventUpcaster} implementation which allows for type upcasting only. This could be used if the event's\n+ * class name did not follow the desired naming convention or if an event's package name has been adjusted.\n+ * <p>\n+ * Note that this upcaster <b>should not</b> be used to change the semantic meaning of an event. Such a requirement\n+ * points towards a new event type instead of adjusting an existing one.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.3\n+ */\n+public abstract class EventTypeUpcaster extends SingleEventUpcaster {\n+\n+    /**\n+     * Retrieve the expected event payload type this upcaster should react on.\n+     *\n+     * @return the expected event payload type this upcaster should react on\n+     */\n+    public abstract String expectedPayloadType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aa0977f3a82bd1d162055728843477f2f3ad57"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1NTE4NA==", "bodyText": "That's,,, a good question. Guess I felt like making an abstract class with abstract methods?\nRegardless, I feel a constructor is more sensible too, as it'll require less work from our users. Hence, I'll change this around.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1310#discussion_r364655184", "createdAt": "2020-01-09T10:11:13Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/EventTypeUpcaster.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.serialization.upcasting.event;\n+\n+import org.axonframework.serialization.SerializedType;\n+import org.axonframework.serialization.SimpleSerializedType;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * A {@link SingleEventUpcaster} implementation which allows for type upcasting only. This could be used if the event's\n+ * class name did not follow the desired naming convention or if an event's package name has been adjusted.\n+ * <p>\n+ * Note that this upcaster <b>should not</b> be used to change the semantic meaning of an event. Such a requirement\n+ * points towards a new event type instead of adjusting an existing one.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.3\n+ */\n+public abstract class EventTypeUpcaster extends SingleEventUpcaster {\n+\n+    /**\n+     * Retrieve the expected event payload type this upcaster should react on.\n+     *\n+     * @return the expected event payload type this upcaster should react on\n+     */\n+    public abstract String expectedPayloadType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0ODkyMw=="}, "originalCommit": {"oid": "63aa0977f3a82bd1d162055728843477f2f3ad57"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3269, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}