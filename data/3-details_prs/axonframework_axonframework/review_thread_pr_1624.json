{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNzIxMTcy", "number": 1624, "reviewThreads": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxMzowOFrOFArYag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoyNzozMlrOFK1rBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU1MDgyOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryBus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxMzowOFrOH_FdJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxMzowOFrOH_FdJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMTcxNw==", "bodyText": "The JavaDoc should reference why it's deprecated. In that line of documentation, it should refer to the method/approach which should be used instead of this function.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535911717", "createdAt": "2020-12-04T08:13:08Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryBus.java", "diffHunk": "@@ -147,8 +146,39 @@\n      * @param <U>              the incremental response types of the query\n      * @return query result containing initial result and incremental updates\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU1NTkwOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryGateway.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNDoxM1rOH_FfuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNDoxM1rOH_FfuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMjM3Nw==", "bodyText": "The JavaDoc should reference why it's deprecated. In that line of documentation, it should refer to the method/approach which should be used instead of this function.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535912377", "createdAt": "2020-12-04T08:14:13Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryGateway.java", "diffHunk": "@@ -240,6 +238,7 @@\n      * @see QueryBus#subscriptionQuery(SubscriptionQueryMessage)\n      * @see QueryBus#subscriptionQuery(SubscriptionQueryMessage, SubscriptionQueryBackpressure, int)\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU1NzYxOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryGateway.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNDozNVrOH_Fglw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNDozNVrOH_Fglw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMjU5OQ==", "bodyText": "The JavaDoc should reference why it's deprecated. In that line of documentation, it should refer to the method/approach which should be used instead of this function.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535912599", "createdAt": "2020-12-04T08:14:35Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryGateway.java", "diffHunk": "@@ -275,9 +303,37 @@\n      * @see QueryBus#subscriptionQuery(SubscriptionQueryMessage)\n      * @see QueryBus#subscriptionQuery(SubscriptionQueryMessage, SubscriptionQueryBackpressure, int)\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU1ODM5OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryUpdateEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNDo1MlrOH_FhEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNDo1MlrOH_FhEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMjcyMQ==", "bodyText": "The JavaDoc should reference why it's deprecated. In that line of documentation, it should refer to the method/approach which should be used instead of this function.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535912721", "createdAt": "2020-12-04T08:14:52Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryUpdateEmitter.java", "diffHunk": "@@ -162,10 +162,24 @@\n      * @param <U>              the incremental response types of the query\n      * @return the object which contains updates and a registration which can be used to cancel them\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU2MDkxOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryUpdateEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNTozNlrOH_Ficg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNTozNlrOH_Ficg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMzA3NA==", "bodyText": "backpressure is no longer present in this method, so should be removed from the Javadoc too.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535913074", "createdAt": "2020-12-04T08:15:36Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryUpdateEmitter.java", "diffHunk": "@@ -162,10 +162,24 @@\n      * @param <U>              the incremental response types of the query\n      * @return the object which contains updates and a registration which can be used to cancel them\n      */\n+    @Deprecated\n     <U> UpdateHandlerRegistration<U> registerUpdateHandler(SubscriptionQueryMessage<?, ?, ?> query,\n                                                            SubscriptionQueryBackpressure backpressure,\n                                                            int updateBufferSize);\n \n+    /**\n+     * Registers an Update Handler for given {@code query} with given {@code backpressure} and {@code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU2MzU1OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryGateway.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNjoyMFrOH_Fj3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNjoyMFrOH_Fj3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMzQzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <b>Note</b>: Any {@code null} results, on the initial result or the updates, wil lbe filtered out by the\n          \n          \n            \n                 * <b>Note</b>: Any {@code null} results, on the initial result or the updates, will be filtered out by the", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535913439", "createdAt": "2020-12-04T08:16:20Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryGateway.java", "diffHunk": "@@ -248,10 +247,39 @@\n                                  query,\n                                  initialResponseType,\n                                  updateResponseType,\n-                                 backpressure,\n                                  Queues.SMALL_BUFFER_SIZE);\n     }\n \n+    /**\n+     * Sends given {@code query} over the {@link QueryBus} and returns result containing initial response and\n+     * incremental updates (received at the moment the query is sent, until it is cancelled by the caller or closed by\n+     * the emitting side).\n+     * <p>\n+     * <b>Note</b>: Any {@code null} results, on the initial result or the updates, wil lbe filtered out by the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU2NjE0OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryGateway.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNjo1OVrOH_FlSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxNjo1OVrOH_FlSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMzgwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param updateBufferSize    The size of buffer which accumulates updates before subscription to the {@code} flux\n          \n          \n            \n                 * @param updateBufferSize    The size of buffer which accumulates updates before subscription to the flux", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535913801", "createdAt": "2020-12-04T08:16:59Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryGateway.java", "diffHunk": "@@ -275,9 +303,37 @@\n      * @see QueryBus#subscriptionQuery(SubscriptionQueryMessage)\n      * @see QueryBus#subscriptionQuery(SubscriptionQueryMessage, SubscriptionQueryBackpressure, int)\n      */\n+    @Deprecated\n     <Q, I, U> SubscriptionQueryResult<I, U> subscriptionQuery(String queryName, Q query,\n                                                               ResponseType<I> initialResponseType,\n                                                               ResponseType<U> updateResponseType,\n                                                               SubscriptionQueryBackpressure backpressure,\n                                                               int updateBufferSize);\n+\n+    /**\n+     * Sends given {@code query} over the {@link QueryBus} and returns result containing initial response and\n+     * incremental updates (received at the moment the query is sent, until it is cancelled by the caller or closed by\n+     * the emitting side).\n+     * <p>\n+     * <b>Note</b>: Any {@code null} results, on the initial result or the updates, wil lbe filtered out by the\n+     * QueryGateway. If you require the {@code null} to be returned for the initial and update results, we suggest using\n+     * the {@link QueryBus} instead.\n+     *\n+     * @param queryName           A {@link String} describing query to be executed\n+     * @param query               The {@code query} to be sent\n+     * @param initialResponseType The initial response type used for this query\n+     * @param updateResponseType  The update response type used for this query\n+     * @param updateBufferSize    The size of buffer which accumulates updates before subscription to the {@code} flux", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU3MTE4OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryBus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxODoyNVrOH_FoNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxODoyNVrOH_FoNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxNDU1MA==", "bodyText": "Think we can remove some of the paragraph markers here.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535914550", "createdAt": "2020-12-04T08:18:25Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryBus.java", "diffHunk": "@@ -147,8 +146,39 @@\n      * @param <U>              the incremental response types of the query\n      * @return query result containing initial result and incremental updates\n      */\n+    @Deprecated\n     default <Q, I, U> SubscriptionQueryResult<QueryResponseMessage<I>, SubscriptionQueryUpdateMessage<U>> subscriptionQuery(\n             SubscriptionQueryMessage<Q, I, U> query, SubscriptionQueryBackpressure backpressure, int updateBufferSize) {\n+        return subscriptionQuery(query,updateBufferSize);\n+    }\n+\n+    /**\n+     * Dispatch the given {@code query} to a single QueryHandler subscribed to the given {@code query}'s\n+     * queryName/initialResponseType/updateResponseType. The result is lazily created and there will be no execution of\n+     * the query handler before there is a subscription to the initial result. In order not to miss updates, the query\n+     * bus will queue all updates which happen after the subscription query is done and once the subscription to the\n+     * flux is made, these updates will be emitted.\n+     * <p>\n+     * If there is an error during retrieving or consuming initial result, stream for incremental updates is NOT\n+     * interrupted.\n+     * </p>\n+     * <p>\n+     * If there is an error during emitting an update, subscription is cancelled causing further emits not reaching the\n+     * destination.\n+     * </p>\n+     * <p>\n+     * </p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU3NzE4OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryBus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxOTo1NlrOH_FrhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoxOTo1NlrOH_FrhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxNTM5Nw==", "bodyText": "From these changes, I am guessing you might not have set the style guide present in this project. Would you mind using the axon_code_style.xml file and set it as the style for this project?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535915397", "createdAt": "2020-12-04T08:19:56Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryBus.java", "diffHunk": "@@ -229,17 +236,17 @@ private boolean unsubscribe(String queryName,\n                 .thenAccept(monoSink::success)\n                 .exceptionally(t -> {\n                     logger.error(format(\"An error happened while trying to report an initial result. Query: %s\", query),\n-                                 t);\n+                            t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU3ODc1OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryBus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoyMDoyMVrOH_FsXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoyMDoyMVrOH_FsXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxNTYxNQ==", "bodyText": "Similarly assuming that this indentation will be changed back if the style guide is being used.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535915615", "createdAt": "2020-12-04T08:20:21Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryBus.java", "diffHunk": "@@ -229,17 +236,17 @@ private boolean unsubscribe(String queryName,\n                 .thenAccept(monoSink::success)\n                 .exceptionally(t -> {\n                     logger.error(format(\"An error happened while trying to report an initial result. Query: %s\", query),\n-                                 t);\n+                            t);\n                     monoSink.error(t.getCause());\n                     return null;\n                 }));\n \n         UpdateHandlerRegistration<U> updateHandlerRegistration = queryUpdateEmitter\n-                .registerUpdateHandler(query, backpressure, updateBufferSize);\n+                .registerUpdateHandler(query, updateBufferSize);\n \n         return new DefaultSubscriptionQueryResult<>(initialResult.getMono(),\n-                                                    updateHandlerRegistration.getUpdates(),\n-                                                    updateHandlerRegistration.getRegistration());\n+                updateHandlerRegistration.getUpdates(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU4NDg0OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SubscriptionQueryBackpressure.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoyMTo1NlrOH_Fv2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoyMTo1NlrOH_Fv2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxNjUwNg==", "bodyText": "The JavaDoc should describe why something is deprecated and what it has been replaced for, if by any. Please add that to the class level here.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535916506", "createdAt": "2020-12-04T08:21:56Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SubscriptionQueryBackpressure.java", "diffHunk": "@@ -25,6 +25,7 @@\n  * @author Milan Savic\n  * @since 3.3\n  */\n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU4OTc3OnYy", "diffSide": "RIGHT", "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/query/AxonServerQueryBus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoyMzoyMVrOH_FypA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoyMzoyMVrOH_FypA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxNzIyMA==", "bodyText": "Guessing that after setting the axon_code_style.xml, these changes would be reverted.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535917220", "createdAt": "2020-12-04T08:23:21Z", "author": {"login": "smcvb"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/query/AxonServerQueryBus.java", "diffHunk": "@@ -326,13 +333,13 @@ public void handle(QueryRequest query,\n \n         io.axoniq.axonserver.connector.query.SubscriptionQueryResult result =\n                 axonServerConnectionManager.getConnection(targetContext)\n-                                           .queryChannel()\n-                                           .subscriptionQuery(\n-                                                   subscriptionSerializer.serializeQuery(interceptedQuery),\n-                                                   subscriptionSerializer.serializeUpdateType(interceptedQuery),\n-                                                   configuration.getQueryFlowControl().getInitialNrOfPermits(),\n-                                                   configuration.getQueryFlowControl().getNrOfNewPermits()\n-                                           );\n+                        .queryChannel()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU5MDMxOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/DefaultQueryGateway.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoyMzozMlrOH_Fy8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoyMzozMlrOH_Fy8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxNzI5OA==", "bodyText": "Guessing that after setting the axon_code_style.xml, these changes would be reverted.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535917298", "createdAt": "2020-12-04T08:23:32Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/DefaultQueryGateway.java", "diffHunk": "@@ -104,27 +104,37 @@ public static Builder builder() {\n                        .map(QueryResponseMessage::getPayload);\n     }\n \n+    @Deprecated\n     @Override\n     public <Q, I, U> SubscriptionQueryResult<I, U> subscriptionQuery(String queryName,\n                                                                      Q query,\n                                                                      ResponseType<I> initialResponseType,\n                                                                      ResponseType<U> updateResponseType,\n                                                                      SubscriptionQueryBackpressure backpressure,\n                                                                      int updateBufferSize) {\n+       return subscriptionQuery(queryName,query,initialResponseType,updateResponseType,updateBufferSize);\n+    }\n+\n+    @Override\n+    public <Q, I, U> SubscriptionQueryResult<I, U> subscriptionQuery(String queryName,\n+                                                                     Q query,\n+                                                                     ResponseType<I> initialResponseType,\n+                                                                     ResponseType<U> updateResponseType,\n+                                                                     int updateBufferSize) {\n         SubscriptionQueryMessage<?, I, U> subscriptionQueryMessage = new GenericSubscriptionQueryMessage<>(\n                 asMessage(query), queryName, initialResponseType, updateResponseType\n         );\n         SubscriptionQueryMessage<?, I, U> interceptedQuery = processInterceptors(subscriptionQueryMessage);\n         SubscriptionQueryResult<QueryResponseMessage<I>, SubscriptionQueryUpdateMessage<U>> result =\n-                queryBus.subscriptionQuery(interceptedQuery, backpressure, updateBufferSize);\n+                queryBus.subscriptionQuery(interceptedQuery, updateBufferSize);\n         return new DefaultSubscriptionQueryResult<>(\n                 result.initialResult()\n-                      .filter(initialResult -> Objects.nonNull(initialResult.getPayload()))\n-                      .map(Message::getPayload)\n-                      .onErrorMap(e -> e instanceof IllegalPayloadAccessException ? e.getCause() : e),\n+                        .filter(initialResult -> Objects.nonNull(initialResult.getPayload()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU5OTgwOnYy", "diffSide": "LEFT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryUpdateEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoyNTo1OFrOH_F4LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoyNTo1OFrOH_F4LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxODYzNg==", "bodyText": "Guessing that after setting the axon_code_style.xml, these changes would be reverted.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535918636", "createdAt": "2020-12-04T08:25:58Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryUpdateEmitter.java", "diffHunk": "@@ -105,7 +118,7 @@ public boolean queryUpdateHandlerRegistered(SubscriptionQueryMessage<?, ?, ?> qu\n         };\n \n         return new UpdateHandlerRegistration<>(registration,\n-                                               processor.replay(updateBufferSize).autoConnect());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjY0NzIzOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/FluxSinkWrapper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODozODoxMVrOH_GTEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTozMTozOFrOIBU9Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNTUyMA==", "bodyText": "Nit: I would even rename the class and parameter here. It's all package-private, so free game to more closely resemble what's being wrapped.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535925520", "createdAt": "2020-12-04T08:38:11Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/FluxSinkWrapper.java", "diffHunk": "@@ -18,59 +18,53 @@\n \n import reactor.core.Disposable;\n import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Sinks;\n \n /**\n- * Wrapper around {@link FluxSink}. Since project-reactor is not a required dependency in this Axon version, we need\n+ * Wrapper around {@link Sinks.Many}. Since project-reactor is not a required dependency in this Axon version, we need\n  * wrappers for backwards compatibility. As soon as dependency is no longer optional, this wrapper should be removed.\n  *\n  * @param <T> The value type\n  * @author Milan Savic\n+ * @author Stefan Dragisic\n  * @since 3.3\n  */\n class FluxSinkWrapper<T> {\n \n-    private final FluxSink<T> fluxSink;\n+    private final Sinks.Many<T> fluxSink;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYxNDA4Mg==", "bodyText": "I was thinking about that but found FluxSink more descriptive than some other name (like SinksManyWrapper)", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r537614082", "createdAt": "2020-12-07T15:50:58Z", "author": {"login": "schananas"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/FluxSinkWrapper.java", "diffHunk": "@@ -18,59 +18,53 @@\n \n import reactor.core.Disposable;\n import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Sinks;\n \n /**\n- * Wrapper around {@link FluxSink}. Since project-reactor is not a required dependency in this Axon version, we need\n+ * Wrapper around {@link Sinks.Many}. Since project-reactor is not a required dependency in this Axon version, we need\n  * wrappers for backwards compatibility. As soon as dependency is no longer optional, this wrapper should be removed.\n  *\n  * @param <T> The value type\n  * @author Milan Savic\n+ * @author Stefan Dragisic\n  * @since 3.3\n  */\n class FluxSinkWrapper<T> {\n \n-    private final FluxSink<T> fluxSink;\n+    private final Sinks.Many<T> fluxSink;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNTUyMA=="}, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE1MTY3MA==", "bodyText": "True, true, it's a \"sink of many results\", essentially a flux sink. Guessing they removed the notion of flux as it's project-reactor specific?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r538151670", "createdAt": "2020-12-08T08:56:04Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/FluxSinkWrapper.java", "diffHunk": "@@ -18,59 +18,53 @@\n \n import reactor.core.Disposable;\n import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Sinks;\n \n /**\n- * Wrapper around {@link FluxSink}. Since project-reactor is not a required dependency in this Axon version, we need\n+ * Wrapper around {@link Sinks.Many}. Since project-reactor is not a required dependency in this Axon version, we need\n  * wrappers for backwards compatibility. As soon as dependency is no longer optional, this wrapper should be removed.\n  *\n  * @param <T> The value type\n  * @author Milan Savic\n+ * @author Stefan Dragisic\n  * @since 3.3\n  */\n class FluxSinkWrapper<T> {\n \n-    private final FluxSink<T> fluxSink;\n+    private final Sinks.Many<T> fluxSink;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNTUyMA=="}, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI2Mjg3NQ==", "bodyText": "not sure, but I don't think that's the reason", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r538262875", "createdAt": "2020-12-08T11:31:38Z", "author": {"login": "schananas"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/FluxSinkWrapper.java", "diffHunk": "@@ -18,59 +18,53 @@\n \n import reactor.core.Disposable;\n import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Sinks;\n \n /**\n- * Wrapper around {@link FluxSink}. Since project-reactor is not a required dependency in this Axon version, we need\n+ * Wrapper around {@link Sinks.Many}. Since project-reactor is not a required dependency in this Axon version, we need\n  * wrappers for backwards compatibility. As soon as dependency is no longer optional, this wrapper should be removed.\n  *\n  * @param <T> The value type\n  * @author Milan Savic\n+ * @author Stefan Dragisic\n  * @since 3.3\n  */\n class FluxSinkWrapper<T> {\n \n-    private final FluxSink<T> fluxSink;\n+    private final Sinks.Many<T> fluxSink;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNTUyMA=="}, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjY1OTkzOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/FluxSinkWrapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo0MToyNlrOH_GaaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODo1ODoxOVrOIBORpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNzQwMA==", "bodyText": "Did the documentation of Project Reactor state that FluxSink#next should be replaced by Sinks.Many#tryEmitNext()#orThrow()? Specifically, the orThrow() invocation should be validated, as we'd otherwise be changing behaviour.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r535927400", "createdAt": "2020-12-04T08:41:26Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/FluxSinkWrapper.java", "diffHunk": "@@ -18,59 +18,53 @@\n \n import reactor.core.Disposable;\n import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Sinks;\n \n /**\n- * Wrapper around {@link FluxSink}. Since project-reactor is not a required dependency in this Axon version, we need\n+ * Wrapper around {@link Sinks.Many}. Since project-reactor is not a required dependency in this Axon version, we need\n  * wrappers for backwards compatibility. As soon as dependency is no longer optional, this wrapper should be removed.\n  *\n  * @param <T> The value type\n  * @author Milan Savic\n+ * @author Stefan Dragisic\n  * @since 3.3\n  */\n class FluxSinkWrapper<T> {\n \n-    private final FluxSink<T> fluxSink;\n+    private final Sinks.Many<T> fluxSink;\n \n     /**\n      * Initializes this wrapper with delegate sink.\n      *\n      * @param fluxSink Delegate sink\n      */\n-    FluxSinkWrapper(FluxSink<T> fluxSink) {\n+    FluxSinkWrapper(Sinks.Many<T> fluxSink) {\n         this.fluxSink = fluxSink;\n     }\n \n     /**\n      * Wrapper around {@link FluxSink#complete()}.\n      */\n     public void complete() {\n-        fluxSink.complete();\n+        fluxSink.tryEmitComplete();\n     }\n \n     /**\n-     * Wrapper around {@link FluxSink#next(Object)}.\n+     * Wrapper around {@link Sinks.Many#tryEmitNext(Object)}\n      *\n      * @param value to be passed to the delegate sink\n      */\n     public void next(T value) {\n-        fluxSink.next(value);\n+        fluxSink.tryEmitNext(value).orThrow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYwNDAwMA==", "bodyText": "Unfortunately, there are no migration guidelines... Had to compare documentation of code that we previously used and to find matching new API.\nOld FluxSink#next that we used before:\n     * Try emitting, might throw an unchecked exception.\n     * @see Subscriber#onNext(Object)\n     * @param t the value to emit, not null\n     */\n    FluxSink<T> next(T t);\n\nNew API:\n\t\t/**\n\t\t * Try emitting a non-null element, generating an {@link Subscriber#onNext(Object) onNext} signal.\n\t\t * The result of the attempt is represented as an {@link EmitResult}, which possibly indicates error cases.\n\t\t * <p>\n\t\t * See the list of failure {@link EmitResult} in {@link #emitNext(Object, EmitFailureHandler)} javadoc for an\n\t\t * example of how each of these can be dealt with, to decide if the emit API would be a good enough fit instead.\n\t\t * <p>\n\t\t * Might throw an unchecked exception as a last resort (eg. in case of a fatal error downstream which cannot\n\t\t * be propagated to any asynchronous handler, a bubbling exception, ...).\n\t\t *\n\t\t * @param t the value to emit, not null\n\t\t * @return an {@link EmitResult}, which should be checked to distinguish different possible failures\n\t\t * @see Subscriber#onNext(Object)\n\t\t */\n\t\tEmitResult tryEmitNext(T t);\n\n\t\t/**\n\t\t * Easily convert from an {@link EmitResult} to throwing an exception on {@link #isFailure() failure cases}.\n\t\t * This is useful if throwing is the most relevant way of dealing with a failed emission attempt.\n\t\t * Note however that generally Reactor code doesn't favor throwing exceptions but rather propagating\n\t\t * them through onError signals.\n\t\t * See also {@link #orThrowWithCause(Throwable)} in case of an {@link One#tryEmitError(Throwable) emitError}\n\t\t * failure for which you want to attach the originally pushed {@link Exception}.\n\t\t *\n\t\t * @see #orThrowWithCause(Throwable)\n\t\t */\n\t\tpublic void orThrow() {\n\t\t\tif (this == OK) return;\n\n\t\t\tthrow new EmissionException(this);\n\t\t}\n\nThe main difference is that the previous API did blocking (busy loop) when EmitterProcessor could not emit next element when the sink does not have buffering capacity left. In the new API Sink returns EmitResult instead and user decides what to do with it. (there is FAIL_OVERFLOW type of EmitResult).\nNew API documentation says this:\nFor instance, the EmitterProcessor used to sleep when its configured buffer was full and users continued trying to emit, effectively busy-looping until the internal queue would accept the pushed valued. This is effectively blocking, and can be problematic (#2049).\n\n->>> Note that to get the old behavior, one can manually loop on the emitNext attempt until it returns Emission.OK, sleeping for a few nanoseconds when it returns FAIL_OVERFLOW. But caller could also decide to fail after a number of retries rather than an infinite loop for instance...\n\nLuckily we changed connector recently. We read a number of downstream requests and forward that request to the axon server thus we do not really on this blocking approach while emitting new elements...\nTo summarize, since we didn't have specific logic (like retries) before how to handle sink failures, and we rely on exceptions see (SimpleQueryUpdateEmitter#doEmit) I added orThrow() on top of tryEmittingNext() to mimic the same behavior...", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r537604000", "createdAt": "2020-12-07T15:38:04Z", "author": {"login": "schananas"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/FluxSinkWrapper.java", "diffHunk": "@@ -18,59 +18,53 @@\n \n import reactor.core.Disposable;\n import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Sinks;\n \n /**\n- * Wrapper around {@link FluxSink}. Since project-reactor is not a required dependency in this Axon version, we need\n+ * Wrapper around {@link Sinks.Many}. Since project-reactor is not a required dependency in this Axon version, we need\n  * wrappers for backwards compatibility. As soon as dependency is no longer optional, this wrapper should be removed.\n  *\n  * @param <T> The value type\n  * @author Milan Savic\n+ * @author Stefan Dragisic\n  * @since 3.3\n  */\n class FluxSinkWrapper<T> {\n \n-    private final FluxSink<T> fluxSink;\n+    private final Sinks.Many<T> fluxSink;\n \n     /**\n      * Initializes this wrapper with delegate sink.\n      *\n      * @param fluxSink Delegate sink\n      */\n-    FluxSinkWrapper(FluxSink<T> fluxSink) {\n+    FluxSinkWrapper(Sinks.Many<T> fluxSink) {\n         this.fluxSink = fluxSink;\n     }\n \n     /**\n      * Wrapper around {@link FluxSink#complete()}.\n      */\n     public void complete() {\n-        fluxSink.complete();\n+        fluxSink.tryEmitComplete();\n     }\n \n     /**\n-     * Wrapper around {@link FluxSink#next(Object)}.\n+     * Wrapper around {@link Sinks.Many#tryEmitNext(Object)}\n      *\n      * @param value to be passed to the delegate sink\n      */\n     public void next(T value) {\n-        fluxSink.next(value);\n+        fluxSink.tryEmitNext(value).orThrow();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNzQwMA=="}, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE1MzM4Mg==", "bodyText": "Sound judgement here @stefanvozd, thanks for elaborating \ud83d\udc4d", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r538153382", "createdAt": "2020-12-08T08:58:19Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/FluxSinkWrapper.java", "diffHunk": "@@ -18,59 +18,53 @@\n \n import reactor.core.Disposable;\n import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Sinks;\n \n /**\n- * Wrapper around {@link FluxSink}. Since project-reactor is not a required dependency in this Axon version, we need\n+ * Wrapper around {@link Sinks.Many}. Since project-reactor is not a required dependency in this Axon version, we need\n  * wrappers for backwards compatibility. As soon as dependency is no longer optional, this wrapper should be removed.\n  *\n  * @param <T> The value type\n  * @author Milan Savic\n+ * @author Stefan Dragisic\n  * @since 3.3\n  */\n class FluxSinkWrapper<T> {\n \n-    private final FluxSink<T> fluxSink;\n+    private final Sinks.Many<T> fluxSink;\n \n     /**\n      * Initializes this wrapper with delegate sink.\n      *\n      * @param fluxSink Delegate sink\n      */\n-    FluxSinkWrapper(FluxSink<T> fluxSink) {\n+    FluxSinkWrapper(Sinks.Many<T> fluxSink) {\n         this.fluxSink = fluxSink;\n     }\n \n     /**\n      * Wrapper around {@link FluxSink#complete()}.\n      */\n     public void complete() {\n-        fluxSink.complete();\n+        fluxSink.tryEmitComplete();\n     }\n \n     /**\n-     * Wrapper around {@link FluxSink#next(Object)}.\n+     * Wrapper around {@link Sinks.Many#tryEmitNext(Object)}\n      *\n      * @param value to be passed to the delegate sink\n      */\n     public void next(T value) {\n-        fluxSink.next(value);\n+        fluxSink.tryEmitNext(value).orThrow();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNzQwMA=="}, "originalCommit": {"oid": "722f92c26f65bd21eb779cda1e5b9562a2e3d017"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDY1NTM0OnYy", "diffSide": "LEFT", "path": "integrationtests/src/test/java/org/axonframework/integrationtests/queryhandling/AbstractSubscriptionQueryTestSuite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODo0OToxNlrOIC95SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODo0OToxNlrOIC95SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MjE1Mw==", "bodyText": "This change is not backwards compatible. With deprecated method an error was expected. Right now, execution is successful. We should support new and old version of API fully.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r539982153", "createdAt": "2020-12-10T08:49:16Z", "author": {"login": "m1l4n54v1c"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/queryhandling/AbstractSubscriptionQueryTestSuite.java", "diffHunk": "@@ -532,21 +517,61 @@ void testBufferOverflow() {\n \n         SubscriptionQueryResult<QueryResponseMessage<List<String>>, SubscriptionQueryUpdateMessage<String>> result =\n                 queryBus.subscriptionQuery(queryMessage,\n-                                           new SubscriptionQueryBackpressure(FluxSink.OverflowStrategy.ERROR),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679e00762928d45c26fe0cbdc10b679632cf733b"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzcxODQ0OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/DefaultQueryGateway.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoxNjo0M1rOIGIAZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoxNjo0M1rOIGIAZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5MzU0MQ==", "bodyText": "This recursive invocation never ends.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r543293541", "createdAt": "2020-12-15T12:16:43Z", "author": {"login": "m1l4n54v1c"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/DefaultQueryGateway.java", "diffHunk": "@@ -104,19 +104,32 @@ public static Builder builder() {\n                        .map(QueryResponseMessage::getPayload);\n     }\n \n+    /**\n+     * @deprecated in through use of the {{@link #subscriptionQuery(String, Object, ResponseType, ResponseType, int)}}\n+     */\n+    @Deprecated\n     @Override\n     public <Q, I, U> SubscriptionQueryResult<I, U> subscriptionQuery(String queryName,\n                                                                      Q query,\n                                                                      ResponseType<I> initialResponseType,\n                                                                      ResponseType<U> updateResponseType,\n                                                                      SubscriptionQueryBackpressure backpressure,\n                                                                      int updateBufferSize) {\n+        return subscriptionQuery(queryName, query, initialResponseType, updateResponseType, backpressure, updateBufferSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0ddde6e858927aa9e0ab1e4f88315976b827b2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzcyMTAwOnYy", "diffSide": "RIGHT", "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/query/AxonServerQueryBus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoxNzoxN1rOIGIB0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoxNzoxN1rOIGIB0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5MzkwNw==", "bodyText": "This recursive invocation never ends.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r543293907", "createdAt": "2020-12-15T12:17:17Z", "author": {"login": "m1l4n54v1c"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/query/AxonServerQueryBus.java", "diffHunk": "@@ -308,11 +306,23 @@ public void handle(QueryRequest query,\n         }\n     }\n \n+    /**\n+     * @deprecated in through use of {{@link #subscriptionQuery(SubscriptionQueryMessage,int)}}\n+     */\n+    @Deprecated\n     @Override\n     public <Q, I, U> SubscriptionQueryResult<QueryResponseMessage<I>, SubscriptionQueryUpdateMessage<U>> subscriptionQuery(\n             SubscriptionQueryMessage<Q, I, U> query,\n             SubscriptionQueryBackpressure backPressure,\n             int updateBufferSize\n+    ) {\n+        return subscriptionQuery(query, backPressure, updateBufferSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0ddde6e858927aa9e0ab1e4f88315976b827b2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzcyMzM0OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SinksManyWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoxNzo0OFrOIGIDLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoxNzo0OFrOIGIDLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5NDI1Mw==", "bodyText": "Copy paste error?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r543294253", "createdAt": "2020-12-15T12:17:48Z", "author": {"login": "m1l4n54v1c"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SinksManyWrapper.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2010-2018. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.queryhandling;\n+\n+import reactor.core.Disposable;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Sinks;\n+\n+/**\n+ * Wrapper around {@link Sinks.Many}. Since project-reactor is not a required dependency in this Axon version, we need\n+ * wrappers for backwards compatibility. As soon as dependency is no longer optional, this wrapper should be removed.\n+ *\n+ * @param <T> The value type\n+ * @author Stefan Dragisic\n+ * @since 3.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0ddde6e858927aa9e0ab1e4f88315976b827b2"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzczNDQ4OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryUpdateEmitter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoyMDozOFrOIGIJ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowNzo0N1rOIGMq1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5NTk2MQ==", "bodyText": "The underlying Sinks.Many.complete returns completion results. We should check on those and decide when cancelling the registration succeeds and when not.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r543295961", "createdAt": "2020-12-15T12:20:38Z", "author": {"login": "m1l4n54v1c"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryUpdateEmitter.java", "diffHunk": "@@ -108,6 +115,30 @@ public boolean queryUpdateHandlerRegistered(SubscriptionQueryMessage<?, ?, ?> qu\n                                                processor.replay(updateBufferSize).autoConnect());\n     }\n \n+    @Override\n+    public <U> UpdateHandlerRegistration<U> registerUpdateHandler(\n+            SubscriptionQueryMessage<?, ?, ?> query,\n+            int updateBufferSize) {\n+        Sinks.Many<SubscriptionQueryUpdateMessage<U>> sink = Sinks.many().replay().limit(updateBufferSize);\n+\n+        Runnable removeHandler = () -> updateHandlers.remove(query);\n+        Flux<SubscriptionQueryUpdateMessage<U>> updateMessageFlux = sink.asFlux()\n+                                                                        .doOnCancel(removeHandler)\n+                                                                        .doOnTerminate(removeHandler);\n+\n+        SinksManyWrapper<SubscriptionQueryUpdateMessage<U>> sinksManyWrapper = new SinksManyWrapper<>(sink);\n+\n+        updateHandlers.put(query, sinksManyWrapper);\n+\n+        Registration registration = () -> {\n+            sinksManyWrapper.complete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0ddde6e858927aa9e0ab1e4f88315976b827b2"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2OTk0Mg==", "bodyText": "added fluxSink.tryEmitComplete().orThrow(), we use exceptions in current code", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r543369942", "createdAt": "2020-12-15T14:07:47Z", "author": {"login": "schananas"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryUpdateEmitter.java", "diffHunk": "@@ -108,6 +115,30 @@ public boolean queryUpdateHandlerRegistered(SubscriptionQueryMessage<?, ?, ?> qu\n                                                processor.replay(updateBufferSize).autoConnect());\n     }\n \n+    @Override\n+    public <U> UpdateHandlerRegistration<U> registerUpdateHandler(\n+            SubscriptionQueryMessage<?, ?, ?> query,\n+            int updateBufferSize) {\n+        Sinks.Many<SubscriptionQueryUpdateMessage<U>> sink = Sinks.many().replay().limit(updateBufferSize);\n+\n+        Runnable removeHandler = () -> updateHandlers.remove(query);\n+        Flux<SubscriptionQueryUpdateMessage<U>> updateMessageFlux = sink.asFlux()\n+                                                                        .doOnCancel(removeHandler)\n+                                                                        .doOnTerminate(removeHandler);\n+\n+        SinksManyWrapper<SubscriptionQueryUpdateMessage<U>> sinksManyWrapper = new SinksManyWrapper<>(sink);\n+\n+        updateHandlers.put(query, sinksManyWrapper);\n+\n+        Registration registration = () -> {\n+            sinksManyWrapper.complete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5NTk2MQ=="}, "originalCommit": {"oid": "fd0ddde6e858927aa9e0ab1e4f88315976b827b2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzc0ODY5OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryBus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoyNDowMVrOIGISCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowNTo1N1rOIGMkjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5ODA1OQ==", "bodyText": "Since the only difference between this and deprecated method is invocation on queryUpdateEmitter we could extract common parts into a private method and parameterize it with this specific invocation...", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r543298059", "createdAt": "2020-12-15T12:24:01Z", "author": {"login": "m1l4n54v1c"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryBus.java", "diffHunk": "@@ -242,6 +246,31 @@ private boolean unsubscribe(String queryName,\n                                                     updateHandlerRegistration.getRegistration());\n     }\n \n+    public <Q, I, U> SubscriptionQueryResult<QueryResponseMessage<I>, SubscriptionQueryUpdateMessage<U>> subscriptionQuery(\n+            SubscriptionQueryMessage<Q, I, U> query,\n+            int updateBufferSize) {\n+\n+        if (queryUpdateEmitter.queryUpdateHandlerRegistered(query)) {\n+            throw new IllegalArgumentException(\"There is already a subscription with the given message identifier\");\n+        }\n+\n+        MonoWrapper<QueryResponseMessage<I>> initialResult = MonoWrapper.create(monoSink -> query(query)\n+                .thenAccept(monoSink::success)\n+                .exceptionally(t -> {\n+                    logger.error(format(\"An error happened while trying to report an initial result. Query: %s\", query),\n+                                 t);\n+                    monoSink.error(t.getCause());\n+                    return null;\n+                }));\n+\n+        UpdateHandlerRegistration<U> updateHandlerRegistration = queryUpdateEmitter\n+                .registerUpdateHandler(query, updateBufferSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0ddde6e858927aa9e0ab1e4f88315976b827b2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2ODMzMg==", "bodyText": "we can, but I was hopping that we will just remove deprecated method in next release, so extraction might not be needed in this case...", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r543368332", "createdAt": "2020-12-15T14:05:57Z", "author": {"login": "schananas"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryBus.java", "diffHunk": "@@ -242,6 +246,31 @@ private boolean unsubscribe(String queryName,\n                                                     updateHandlerRegistration.getRegistration());\n     }\n \n+    public <Q, I, U> SubscriptionQueryResult<QueryResponseMessage<I>, SubscriptionQueryUpdateMessage<U>> subscriptionQuery(\n+            SubscriptionQueryMessage<Q, I, U> query,\n+            int updateBufferSize) {\n+\n+        if (queryUpdateEmitter.queryUpdateHandlerRegistered(query)) {\n+            throw new IllegalArgumentException(\"There is already a subscription with the given message identifier\");\n+        }\n+\n+        MonoWrapper<QueryResponseMessage<I>> initialResult = MonoWrapper.create(monoSink -> query(query)\n+                .thenAccept(monoSink::success)\n+                .exceptionally(t -> {\n+                    logger.error(format(\"An error happened while trying to report an initial result. Query: %s\", query),\n+                                 t);\n+                    monoSink.error(t.getCause());\n+                    return null;\n+                }));\n+\n+        UpdateHandlerRegistration<U> updateHandlerRegistration = queryUpdateEmitter\n+                .registerUpdateHandler(query, updateBufferSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5ODA1OQ=="}, "originalCommit": {"oid": "fd0ddde6e858927aa9e0ab1e4f88315976b827b2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzc1MTYwOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SinkWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoyNDozOVrOIGITpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoyNDozOVrOIGITpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5ODQ2OQ==", "bodyText": "Missing actual purpose of this class and @since.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r543298469", "createdAt": "2020-12-15T12:24:39Z", "author": {"login": "m1l4n54v1c"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SinkWrapper.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.axonframework.queryhandling;\n+\n+/**\n+ * @author Stefan Dragisic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0ddde6e858927aa9e0ab1e4f88315976b827b2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzc1ODgwOnYy", "diffSide": "RIGHT", "path": "integrationtests/src/test/java/org/axonframework/integrationtests/queryhandling/AbstractSubscriptionQueryTestSuite.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoyNjozN1rOIGIYEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowMzowOFrOIGMbcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5OTYwMA==", "bodyText": "We should add new tests for leave tests for deprecated methods until those methods are removed.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r543299600", "createdAt": "2020-12-15T12:26:37Z", "author": {"login": "m1l4n54v1c"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/queryhandling/AbstractSubscriptionQueryTestSuite.java", "diffHunk": "@@ -227,7 +215,6 @@ void testCompletingSubscriptionQueryExceptionally() {\n         // when\n         SubscriptionQueryResult<QueryResponseMessage<List<String>>, SubscriptionQueryUpdateMessage<String>> result =\n                 queryBus.subscriptionQuery(queryMessage,\n-                                           new SubscriptionQueryBackpressure(FluxSink.OverflowStrategy.IGNORE),\n                                            Queues.SMALL_BUFFER_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0ddde6e858927aa9e0ab1e4f88315976b827b2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2NjAwMA==", "bodyText": "I can copy paste all old tests that used Backpressure strategy?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r543366000", "createdAt": "2020-12-15T14:03:08Z", "author": {"login": "schananas"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/queryhandling/AbstractSubscriptionQueryTestSuite.java", "diffHunk": "@@ -227,7 +215,6 @@ void testCompletingSubscriptionQueryExceptionally() {\n         // when\n         SubscriptionQueryResult<QueryResponseMessage<List<String>>, SubscriptionQueryUpdateMessage<String>> result =\n                 queryBus.subscriptionQuery(queryMessage,\n-                                           new SubscriptionQueryBackpressure(FluxSink.OverflowStrategy.IGNORE),\n                                            Queues.SMALL_BUFFER_SIZE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5OTYwMA=="}, "originalCommit": {"oid": "fd0ddde6e858927aa9e0ab1e4f88315976b827b2"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODkzMTMyOnYy", "diffSide": "RIGHT", "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/query/AxonServerQueryBus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo0MTo0NFrOINrD-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo0MTo0NFrOINrD-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIwNzkzMA==", "bodyText": "Right now the JavaDoc which is normally attached through the @Override annotation is completely replaced in favor of the deprecated line. Although not entirely wrong, I'd favour the addition of {@inheritDoc}, so that you append the deprecation line instead of making it a replacement.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @deprecated in through use of {{@link #subscriptionQuery(SubscriptionQueryMessage,int)}}\n          \n          \n            \n                 * {@inheritDoc}\n          \n          \n            \n                 * <p>\n          \n          \n            \n                 * @deprecated in through use of {{@link #subscriptionQuery(SubscriptionQueryMessage,int)}}", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r551207930", "createdAt": "2021-01-04T09:41:44Z", "author": {"login": "smcvb"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/query/AxonServerQueryBus.java", "diffHunk": "@@ -308,11 +306,23 @@ public void handle(QueryRequest query,\n         }\n     }\n \n+    /**\n+     * @deprecated in through use of {{@link #subscriptionQuery(SubscriptionQueryMessage,int)}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODk0MzI3OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/FluxSinkWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo0NTowNlrOINrKmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo0NTowNlrOINrKmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIwOTYyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @deprecated in through use of the {{@link SinksManyWrapper}}\n          \n          \n            \n             * @deprecated in favour of using the {{@link SinksManyWrapper}}", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r551209627", "createdAt": "2021-01-04T09:45:06Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/FluxSinkWrapper.java", "diffHunk": "@@ -26,8 +26,10 @@\n  * @param <T> The value type\n  * @author Milan Savic\n  * @since 3.3\n+ * @deprecated in through use of the {{@link SinksManyWrapper}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODk0NzAyOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryBus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo0NjowMlrOINrMqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo0NjowMlrOINrMqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxMDE1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @deprecated in through use of {{@link #subscriptionQuery(SubscriptionQueryMessage,int)}}\n          \n          \n            \n                 * @deprecated in favour of using {{@link #subscriptionQuery(SubscriptionQueryMessage,int)}}", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r551210155", "createdAt": "2021-01-04T09:46:02Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryBus.java", "diffHunk": "@@ -145,10 +144,40 @@\n      * @param <Q>              the payload type of the query\n      * @param <I>              the response type of the query\n      * @param <U>              the incremental response types of the query\n+     * @deprecated in through use of {{@link #subscriptionQuery(SubscriptionQueryMessage,int)}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODk1Mzk0OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryGateway.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo0ODowNVrOINrQoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo0ODowNVrOINrQoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxMTE2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @deprecated in through use of {{@link #subscriptionQuery(String, Object, ResponseType, ResponseType)}}\n          \n          \n            \n                 * To set backpressure strategy, use some of {@code onBackpressure..} operators directly on updates flux\n          \n          \n            \n                 * @deprecated in favour of using {{@link #subscriptionQuery(String, Object, ResponseType, ResponseType)}}.\n          \n          \n            \n                 * To set a backpressure strategy, use one of the {@code onBackpressure..} operators on the updates flux directly.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r551211169", "createdAt": "2021-01-04T09:48:05Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryGateway.java", "diffHunk": "@@ -239,7 +237,11 @@\n      * @return registration which can be used to cancel receiving updates\n      * @see QueryBus#subscriptionQuery(SubscriptionQueryMessage)\n      * @see QueryBus#subscriptionQuery(SubscriptionQueryMessage, SubscriptionQueryBackpressure, int)\n+     * @deprecated in through use of {{@link #subscriptionQuery(String, Object, ResponseType, ResponseType)}}\n+     * To set backpressure strategy, use some of {@code onBackpressure..} operators directly on updates flux", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODk2MzQzOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryGateway.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo1MDozMVrOINrV6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo1MDozMVrOINrV6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxMjUyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @deprecated in through use of {{@link #subscriptionQuery(String, Object, ResponseType, ResponseType, int)}}\n          \n          \n            \n                 * To set backpressure strategy, use some of {@code onBackpressure..} operators directly on updates flux\n          \n          \n            \n                 * @deprecated in favour of using {{@link #subscriptionQuery(String, Object, ResponseType, ResponseType, int)}}.\n          \n          \n            \n                 * To set a backpressure strategy, use one of the {@code onBackpressure..} operators on the updates flux directly.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r551212523", "createdAt": "2021-01-04T09:50:31Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryGateway.java", "diffHunk": "@@ -274,10 +306,41 @@\n      * @return registration which can be used to cancel receiving updates\n      * @see QueryBus#subscriptionQuery(SubscriptionQueryMessage)\n      * @see QueryBus#subscriptionQuery(SubscriptionQueryMessage, SubscriptionQueryBackpressure, int)\n+     * @deprecated in through use of {{@link #subscriptionQuery(String, Object, ResponseType, ResponseType, int)}}\n+     * To set backpressure strategy, use some of {@code onBackpressure..} operators directly on updates flux", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODk2NjI4OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryUpdateEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo1MToyOFrOINrXoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo1MToyOFrOINrXoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxMjk2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @deprecated deprecated in through use of {{@link #registerUpdateHandler(SubscriptionQueryMessage, int)}}\n          \n          \n            \n                 * @deprecated in favour of using {{@link #registerUpdateHandler(SubscriptionQueryMessage, int)}}", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r551212961", "createdAt": "2021-01-04T09:51:28Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/QueryUpdateEmitter.java", "diffHunk": "@@ -161,11 +161,26 @@\n      *                         made\n      * @param <U>              the incremental response types of the query\n      * @return the object which contains updates and a registration which can be used to cancel them\n+     * @deprecated deprecated in through use of {{@link #registerUpdateHandler(SubscriptionQueryMessage, int)}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODk2OTY2OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryBus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo1MjoyN1rOINrZgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo1MjoyN1rOINrZgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxMzQ0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /***\n          \n          \n            \n                 * @deprecated in through use of {{@link #subscriptionQuery(SubscriptionQueryMessage, int)}\n          \n          \n            \n                 */\n          \n          \n            \n                /**\n          \n          \n            \n                 * {@inheritDoc}\n          \n          \n            \n                 * <p>\n          \n          \n            \n                 * @deprecated in through use of {{@link #subscriptionQuery(SubscriptionQueryMessage, int)}\n          \n          \n            \n                 */", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r551213440", "createdAt": "2021-01-04T09:52:27Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryBus.java", "diffHunk": "@@ -214,7 +214,11 @@ private boolean unsubscribe(String queryName,\n                        }).filter(Objects::nonNull);\n     }\n \n+    /***\n+     * @deprecated in through use of {{@link #subscriptionQuery(SubscriptionQueryMessage, int)}\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODk3MTE2OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryBus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo1Mjo1M1rOINraUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo1Mjo1M1rOINraUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxMzY1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                @Override", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r551213651", "createdAt": "2021-01-04T09:52:53Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryBus.java", "diffHunk": "@@ -225,18 +229,46 @@ private boolean unsubscribe(String queryName,\n             throw new IllegalArgumentException(\"There is already a subscription with the given message identifier\");\n         }\n \n-        MonoWrapper<QueryResponseMessage<I>> initialResult = MonoWrapper.create(monoSink -> query(query)\n+        MonoWrapper<QueryResponseMessage<I>> initialResult = getInitialResultMono(query);\n+\n+        UpdateHandlerRegistration<U> updateHandlerRegistration = queryUpdateEmitter\n+                .registerUpdateHandler(query, backpressure, updateBufferSize);\n+\n+        return getSubscriptionQueryResult(initialResult, updateHandlerRegistration);\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTA0OTY2OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryUpdateEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoxNTozM1rOINsIEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoxNTozM1rOINsIEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNTM2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * @deprecated in through use of the {{@link #registerUpdateHandler(SubscriptionQueryMessage, int)}}\n          \n          \n            \n                 */\n          \n          \n            \n                /**\n          \n          \n            \n                 * {@inheritDoc}\n          \n          \n            \n                 * <p>\n          \n          \n            \n                 * @deprecated in favour of using {{@link #registerUpdateHandler(SubscriptionQueryMessage, int)}}\n          \n          \n            \n                 */", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r551225360", "createdAt": "2021-01-04T10:15:33Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SimpleQueryUpdateEmitter.java", "diffHunk": "@@ -88,6 +91,10 @@ public boolean queryUpdateHandlerRegistered(SubscriptionQueryMessage<?, ?, ?> qu\n                              .anyMatch(m -> m.getIdentifier().equals(query.getIdentifier()));\n     }\n \n+    /**\n+     * @deprecated in through use of the {{@link #registerUpdateHandler(SubscriptionQueryMessage, int)}}\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTA3NDAyOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SinkWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoyMTo1OFrOINsVsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoyMTo1OFrOINsVsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyODg0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Abstraction interface to bridge old FluxSink and SinksMany API\n          \n          \n            \n             * with common API..\n          \n          \n            \n             * Abstraction interface to bridge old {@code FluxSink} and {@link SinksMany} API\n          \n          \n            \n             * with a common API.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r551228849", "createdAt": "2021-01-04T10:21:58Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SinkWrapper.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.axonframework.queryhandling;\n+\n+/**\n+ * Abstraction interface to bridge old FluxSink and SinksMany API\n+ * with common API..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTA4NDc2OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SinksManyWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoyNTowMFrOINsb0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoyNTowMFrOINsb0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzMDQxOA==", "bodyText": "Unsure whether the second link actually works, but I do think it gets my point across.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Wrapper around {@link Sinks.Many#tryEmitComplete()} ()}.\n          \n          \n            \n                 * Wrapper around {@link Sinks.Many#tryEmitComplete()}, followed by {@link Sinks.Many#orThrow()}.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r551230418", "createdAt": "2021-01-04T10:25:00Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SinksManyWrapper.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2010-2018. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.queryhandling;\n+\n+import reactor.core.publisher.Sinks;\n+\n+/**\n+ * Wrapper around {@link Sinks.Many}. Since project-reactor is not a required dependency in this Axon version, we need\n+ * wrappers for backwards compatibility. As soon as dependency is no longer optional, this wrapper should be removed.\n+ *\n+ * @param <T> The value type\n+ * @author Stefan Dragisic\n+ * @since 4.5\n+ */\n+class SinksManyWrapper<T> implements SinkWrapper<T> {\n+\n+    private final Sinks.Many<T> fluxSink;\n+\n+    /**\n+     * Initializes this wrapper with delegate sink.\n+     *\n+     * @param fluxSink Delegate sink\n+     */\n+    SinksManyWrapper(Sinks.Many<T> fluxSink) {\n+        this.fluxSink = fluxSink;\n+    }\n+\n+    /**\n+     * Wrapper around {@link Sinks.Many#tryEmitComplete()} ()}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTA4Nzk0OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SinksManyWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoyNTo0OFrOINsdqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoyNTo0OFrOINsdqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzMDg4OQ==", "bodyText": "Would this piece of JavaDoc also benefit from noting the orThrow invocation? Or is that a regular thing to do?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Wrapper around {@link Sinks.Many#tryEmitNext(Object)}\n          \n          \n            \n                 * Wrapper around {@link Sinks.Many#tryEmitNext(Object)}.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r551230889", "createdAt": "2021-01-04T10:25:48Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SinksManyWrapper.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2010-2018. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.queryhandling;\n+\n+import reactor.core.publisher.Sinks;\n+\n+/**\n+ * Wrapper around {@link Sinks.Many}. Since project-reactor is not a required dependency in this Axon version, we need\n+ * wrappers for backwards compatibility. As soon as dependency is no longer optional, this wrapper should be removed.\n+ *\n+ * @param <T> The value type\n+ * @author Stefan Dragisic\n+ * @since 4.5\n+ */\n+class SinksManyWrapper<T> implements SinkWrapper<T> {\n+\n+    private final Sinks.Many<T> fluxSink;\n+\n+    /**\n+     * Initializes this wrapper with delegate sink.\n+     *\n+     * @param fluxSink Delegate sink\n+     */\n+    SinksManyWrapper(Sinks.Many<T> fluxSink) {\n+        this.fluxSink = fluxSink;\n+    }\n+\n+    /**\n+     * Wrapper around {@link Sinks.Many#tryEmitComplete()} ()}.\n+     */\n+    @Override\n+    public void complete() {\n+        fluxSink.tryEmitComplete().orThrow();\n+    }\n+\n+    /**\n+     * Wrapper around {@link Sinks.Many#tryEmitNext(Object)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTA4OTcyOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/SinksManyWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoyNjoxNVrOINseow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxNjo0MDo0MVrOIWXL3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzMTEzOQ==", "bodyText": "Some orThrow note as with the previous two methods: should it be described in the JavaDoc yes/no?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r551231139", "createdAt": "2021-01-04T10:26:15Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SinksManyWrapper.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2010-2018. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.queryhandling;\n+\n+import reactor.core.publisher.Sinks;\n+\n+/**\n+ * Wrapper around {@link Sinks.Many}. Since project-reactor is not a required dependency in this Axon version, we need\n+ * wrappers for backwards compatibility. As soon as dependency is no longer optional, this wrapper should be removed.\n+ *\n+ * @param <T> The value type\n+ * @author Stefan Dragisic\n+ * @since 4.5\n+ */\n+class SinksManyWrapper<T> implements SinkWrapper<T> {\n+\n+    private final Sinks.Many<T> fluxSink;\n+\n+    /**\n+     * Initializes this wrapper with delegate sink.\n+     *\n+     * @param fluxSink Delegate sink\n+     */\n+    SinksManyWrapper(Sinks.Many<T> fluxSink) {\n+        this.fluxSink = fluxSink;\n+    }\n+\n+    /**\n+     * Wrapper around {@link Sinks.Many#tryEmitComplete()} ()}.\n+     */\n+    @Override\n+    public void complete() {\n+        fluxSink.tryEmitComplete().orThrow();\n+    }\n+\n+    /**\n+     * Wrapper around {@link Sinks.Many#tryEmitNext(Object)}\n+     *\n+     * @param value to be passed to the delegate sink\n+     */\n+    @Override\n+    public void next(T value) {\n+        fluxSink.tryEmitNext(value).orThrow();\n+    }\n+\n+    /**\n+     * Wrapper around {@link Sinks.Many#tryEmitError(Throwable)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMxOTQ1Mg==", "bodyText": "added:\nThrows exception on failure cases.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r560319452", "createdAt": "2021-01-19T16:40:41Z", "author": {"login": "schananas"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/SinksManyWrapper.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2010-2018. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.queryhandling;\n+\n+import reactor.core.publisher.Sinks;\n+\n+/**\n+ * Wrapper around {@link Sinks.Many}. Since project-reactor is not a required dependency in this Axon version, we need\n+ * wrappers for backwards compatibility. As soon as dependency is no longer optional, this wrapper should be removed.\n+ *\n+ * @param <T> The value type\n+ * @author Stefan Dragisic\n+ * @since 4.5\n+ */\n+class SinksManyWrapper<T> implements SinkWrapper<T> {\n+\n+    private final Sinks.Many<T> fluxSink;\n+\n+    /**\n+     * Initializes this wrapper with delegate sink.\n+     *\n+     * @param fluxSink Delegate sink\n+     */\n+    SinksManyWrapper(Sinks.Many<T> fluxSink) {\n+        this.fluxSink = fluxSink;\n+    }\n+\n+    /**\n+     * Wrapper around {@link Sinks.Many#tryEmitComplete()} ()}.\n+     */\n+    @Override\n+    public void complete() {\n+        fluxSink.tryEmitComplete().orThrow();\n+    }\n+\n+    /**\n+     * Wrapper around {@link Sinks.Many#tryEmitNext(Object)}\n+     *\n+     * @param value to be passed to the delegate sink\n+     */\n+    @Override\n+    public void next(T value) {\n+        fluxSink.tryEmitNext(value).orThrow();\n+    }\n+\n+    /**\n+     * Wrapper around {@link Sinks.Many#tryEmitError(Throwable)}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzMTEzOQ=="}, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTA5NDQ2OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/queryhandling/DefaultQueryGateway.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoyNzozMlrOINshYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoyNzozMlrOINshYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzMTg0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @deprecated in through use of the {{@link #subscriptionQuery(String, Object, ResponseType, ResponseType, int)}}\n          \n          \n            \n                 * @deprecated in favour of using {{@link #subscriptionQuery(String, Object, ResponseType, ResponseType, int)}}", "url": "https://github.com/AxonFramework/AxonFramework/pull/1624#discussion_r551231840", "createdAt": "2021-01-04T10:27:32Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/queryhandling/DefaultQueryGateway.java", "diffHunk": "@@ -104,19 +104,53 @@ public static Builder builder() {\n                        .map(QueryResponseMessage::getPayload);\n     }\n \n+    /**\n+     * @deprecated in through use of the {{@link #subscriptionQuery(String, Object, ResponseType, ResponseType, int)}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074e8118eb250912de86cd2722fa247d0e20769d"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3164, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}