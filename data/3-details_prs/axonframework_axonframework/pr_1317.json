{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMjMyOTEx", "number": 1317, "title": "[#1216] Aggregate polymorphism", "bodyText": "Adds the possibility for aggregate polymorphism. It's required to specify children of an aggregate in order to have them as members of one polymorphic hierarchy. It is required that only leaf aggregates are registered as subtypes, all other in between will be detected automatically. In the case of using Spring, those aggregates in between must be valid Spring components.\nNotes for reviewers: there are a lot of changed files, so I'd suggest going through commit by commit. The commit for Spring support contains also optimization for annotation scanning.\nResolves #1216", "createdAt": "2020-01-13T17:21:35Z", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317", "merged": true, "mergeCommit": {"oid": "8e035fdc059905cfbc23521da07c9017283fcad3"}, "closed": true, "closedAt": "2020-02-14T13:28:06Z", "author": {"login": "m1l4n54v1c"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4lwm0AH2gAyMzYyMjMyOTExOjY0ZDJiNjM0Mzc4MGY1ZWQxNzk2MzVjNTU5OTBiM2Q2YTIyYmY1ZTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFJf8AAFqTM1OTU3MzEwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "64d2b6343780f5ed179635c55990b3d6a22bf5e7", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/64d2b6343780f5ed179635c55990b3d6a22bf5e7", "committedDate": "2020-01-09T08:34:16Z", "message": "AggregatePolymorphism - messaging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a355efc88f838af06ec3c3109c14563801383784", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/a355efc88f838af06ec3c3109c14563801383784", "committedDate": "2020-01-09T08:39:32Z", "message": "AggregatePolymorphism - modelling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bb185f183780adb74be08a2f1d591c636bf86e8", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/4bb185f183780adb74be08a2f1d591c636bf86e8", "committedDate": "2020-01-09T08:41:52Z", "message": "AggregatePolymorphism - event sourcing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d93dafa237fe17811cf338d94f1baabd0fcd04ef", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/d93dafa237fe17811cf338d94f1baabd0fcd04ef", "committedDate": "2020-01-09T08:43:15Z", "message": "AggregatePolymorphism - disruptor tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b65af477d55b5ee10b1e2fba849a0f7bb67546d", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/9b65af477d55b5ee10b1e2fba849a0f7bb67546d", "committedDate": "2020-01-09T08:44:36Z", "message": "AggregatePolymorphism - config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4fc00b91478bb02b3e3ed74590290055fac029f", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/d4fc00b91478bb02b3e3ed74590290055fac029f", "committedDate": "2020-01-09T08:45:46Z", "message": "AggregatePolymorphism - integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cf152a83496527ddd9670d3be3d9f005710e845", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/4cf152a83496527ddd9670d3be3d9f005710e845", "committedDate": "2020-01-13T17:00:53Z", "message": "AggregatePolymorphism - optimized annotation scanning\nAggregatePolymorphism - spring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18684ea0ade70d52937c45f9270c774bb2a6eee8", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/18684ea0ade70d52937c45f9270c774bb2a6eee8", "committedDate": "2020-01-13T17:02:30Z", "message": "Merge branch 'master' into aggregate-polymorphism"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecd18cf8d05aeb566080888a67a371be5491858f", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/ecd18cf8d05aeb566080888a67a371be5491858f", "committedDate": "2020-01-13T17:28:00Z", "message": "Aggregates in between do not have to be annotated with @Aggregate, but they have to be valid Spring components."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNTI4NzY2", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#pullrequestreview-342528766", "createdAt": "2020-01-14T13:27:23Z", "commit": {"oid": "a355efc88f838af06ec3c3109c14563801383784"}, "state": "COMMENTED", "comments": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzoyNzoyM1rOFdXX_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzo0NzowOFrOFd4vhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzNTk5Nw==", "bodyText": "Curious: are the default implementation there for backwards compatibility?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366335997", "createdAt": "2020-01-14T13:27:23Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/EntityModel.java", "diffHunk": "@@ -54,19 +58,74 @@\n     void publish(EventMessage<?> message, T target);\n \n     /**\n-     * Get a mapping of {@link MessageHandlingMember} to command name (obtained via {@link\n-     * org.axonframework.commandhandling.CommandMessage#getCommandName()}).\n+     * Gets a mapping of {@link MessageHandlingMember} to command name (obtained via {@link\n+     * org.axonframework.commandhandling.CommandMessage#getCommandName()}) for this {@link #entityClass()}.\n      *\n-     * @return Map of message handler to command name\n+     * @return a map of message handler to command name\n+     * @deprecated use {@link #allCommandHandlers()} or {@link #commandHandlers(Class)} instead\n      */\n-    List<MessageHandlingMember<? super T>> commandHandlers();\n+    @Deprecated\n+    default List<MessageHandlingMember<? super T>> commandHandlers() {\n+        return commandHandlers(entityClass()).collect(Collectors.toList());\n+    }\n \n     /**\n-     * Gets a list of command handler interceptors for this entity.\n+     * Gets all command handlers per type in this aggregate hierarchy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a355efc88f838af06ec3c3109c14563801383784"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzNzE5OQ==", "bodyText": "Nit: I think renaming typeHandlers to handlersPerType is slightly clearer. Might be a taste thing though, hence marked as a nit.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366337199", "createdAt": "2020-01-14T13:29:57Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -174,17 +178,76 @@ private void initialize() {\n \n         @SuppressWarnings(\"unchecked\")\n         private void prepareHandlers() {\n-            for (MessageHandlingMember<? super T> handler : handlerInspector.getHandlers()) {\n-                if (handler.unwrap(CommandMessageHandlingMember.class).isPresent()) {\n-                    commandHandlers.add(handler);\n-                } else if (handler.unwrap(CommandHandlerInterceptorHandlingMember.class).isPresent()) {\n-                    commandHandlerInterceptors.add(handler);\n+            for (Map.Entry<Class<?>, SortedSet<MessageHandlingMember<? super T>>> typeHandlers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a355efc88f838af06ec3c3109c14563801383784"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzNzc0NQ==", "bodyText": "Isn't it smarter to perform this check on line 183, thus prior to entering the for-loop of the typeHandlers.getValue()? Or, does the typeHandlers.getKey() outcome differ per handler you're dealing with?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366337745", "createdAt": "2020-01-14T13:30:59Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -174,17 +178,76 @@ private void initialize() {\n \n         @SuppressWarnings(\"unchecked\")\n         private void prepareHandlers() {\n-            for (MessageHandlingMember<? super T> handler : handlerInspector.getHandlers()) {\n-                if (handler.unwrap(CommandMessageHandlingMember.class).isPresent()) {\n-                    commandHandlers.add(handler);\n-                } else if (handler.unwrap(CommandHandlerInterceptorHandlingMember.class).isPresent()) {\n-                    commandHandlerInterceptors.add(handler);\n+            for (Map.Entry<Class<?>, SortedSet<MessageHandlingMember<? super T>>> typeHandlers\n+                    : handlerInspector.getAllHandlers().entrySet()) {\n+                for (MessageHandlingMember<? super T> handler : typeHandlers.getValue()) {\n+                    Class<?> type = typeHandlers.getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a355efc88f838af06ec3c3109c14563801383784"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0MDgyNg==", "bodyText": "Is this TODO still present in subsequent commits? If so, think it would be best to resolve this prior to merging.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366340826", "createdAt": "2020-01-14T13:37:14Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -174,17 +178,76 @@ private void initialize() {\n \n         @SuppressWarnings(\"unchecked\")\n         private void prepareHandlers() {\n-            for (MessageHandlingMember<? super T> handler : handlerInspector.getHandlers()) {\n-                if (handler.unwrap(CommandMessageHandlingMember.class).isPresent()) {\n-                    commandHandlers.add(handler);\n-                } else if (handler.unwrap(CommandHandlerInterceptorHandlingMember.class).isPresent()) {\n-                    commandHandlerInterceptors.add(handler);\n+            for (Map.Entry<Class<?>, SortedSet<MessageHandlingMember<? super T>>> typeHandlers\n+                    : handlerInspector.getAllHandlers().entrySet()) {\n+                for (MessageHandlingMember<? super T> handler : typeHandlers.getValue()) {\n+                    Class<?> type = typeHandlers.getKey();\n+                    if (handler.unwrap(CommandMessageHandlingMember.class).isPresent()) {\n+                        if (Modifier.isAbstract(type.getModifiers()) && handler.unwrap(Constructor.class).isPresent()) {\n+                            throw new AggregateModellingException(format(\n+                                    \"An abstract aggregate %s cannot have @CommandHandler on constructor.\",\n+                                    type));\n+                        }\n+                        addHandler(allCommandHandlers, type, handler);\n+                    } else if (handler.unwrap(CommandHandlerInterceptorHandlingMember.class).isPresent()) {\n+                        addHandler(allCommandHandlerInterceptors, type, handler);\n+                    } else {\n+                        addHandler(allEventHandlers, type, handler);\n+                    }\n+                }\n+            }\n+            validateCommandHandlers();\n+        }\n+\n+        private void addHandler(Map<Class<?>, List<MessageHandlingMember<? super T>>> handlers, Class<?> type,\n+                                MessageHandlingMember<? super T> handler) {\n+            handlers.compute(type, (key, value) -> {\n+                if (value == null) {\n+                    List<MessageHandlingMember<? super T>> hs = new ArrayList<>();\n+                    hs.add(handler);\n+                    return hs;\n                 } else {\n-                    eventHandlers.add(handler);\n+                    value.add(handler);\n+                    return value;\n+                }\n+            });\n+        }\n+\n+        private void validateCommandHandlers() {\n+            List<List<MessageHandlingMember<? super T>>> handlers = new ArrayList<>(allCommandHandlers.values());\n+            for (int i = 0; i < handlers.size() - 1; i++) {\n+                List<CommandMessageHandlingMember<? super T>> factoryCommands1 = factoryCommands(handlers.get(i));\n+                List<CommandMessageHandlingMember<? super T>> factoryCommands2 = factoryCommands(handlers.get(i + 1));\n+                for (CommandMessageHandlingMember<? super T> handler1 : factoryCommands1) {\n+                    for (CommandMessageHandlingMember<? super T> handler2 : factoryCommands2) {\n+                        Class<?> declaringClass1 = handler1.unwrap(Executable.class).get().getDeclaringClass(); // TODO: 1/6/2020 move this logic to MessageHandlingMember?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a355efc88f838af06ec3c3109c14563801383784"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0MTE0OQ==", "bodyText": "Just to clarify this method a bit more, a slight portion of javadoc would be helpful I think.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366341149", "createdAt": "2020-01-14T13:37:52Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -174,17 +178,76 @@ private void initialize() {\n \n         @SuppressWarnings(\"unchecked\")\n         private void prepareHandlers() {\n-            for (MessageHandlingMember<? super T> handler : handlerInspector.getHandlers()) {\n-                if (handler.unwrap(CommandMessageHandlingMember.class).isPresent()) {\n-                    commandHandlers.add(handler);\n-                } else if (handler.unwrap(CommandHandlerInterceptorHandlingMember.class).isPresent()) {\n-                    commandHandlerInterceptors.add(handler);\n+            for (Map.Entry<Class<?>, SortedSet<MessageHandlingMember<? super T>>> typeHandlers\n+                    : handlerInspector.getAllHandlers().entrySet()) {\n+                for (MessageHandlingMember<? super T> handler : typeHandlers.getValue()) {\n+                    Class<?> type = typeHandlers.getKey();\n+                    if (handler.unwrap(CommandMessageHandlingMember.class).isPresent()) {\n+                        if (Modifier.isAbstract(type.getModifiers()) && handler.unwrap(Constructor.class).isPresent()) {\n+                            throw new AggregateModellingException(format(\n+                                    \"An abstract aggregate %s cannot have @CommandHandler on constructor.\",\n+                                    type));\n+                        }\n+                        addHandler(allCommandHandlers, type, handler);\n+                    } else if (handler.unwrap(CommandHandlerInterceptorHandlingMember.class).isPresent()) {\n+                        addHandler(allCommandHandlerInterceptors, type, handler);\n+                    } else {\n+                        addHandler(allEventHandlers, type, handler);\n+                    }\n+                }\n+            }\n+            validateCommandHandlers();\n+        }\n+\n+        private void addHandler(Map<Class<?>, List<MessageHandlingMember<? super T>>> handlers, Class<?> type,\n+                                MessageHandlingMember<? super T> handler) {\n+            handlers.compute(type, (key, value) -> {\n+                if (value == null) {\n+                    List<MessageHandlingMember<? super T>> hs = new ArrayList<>();\n+                    hs.add(handler);\n+                    return hs;\n                 } else {\n-                    eventHandlers.add(handler);\n+                    value.add(handler);\n+                    return value;\n+                }\n+            });\n+        }\n+\n+        private void validateCommandHandlers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a355efc88f838af06ec3c3109c14563801383784"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0MTYyMg==", "bodyText": "More for maintenance then for framework users of course.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366341622", "createdAt": "2020-01-14T13:38:50Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -174,17 +178,76 @@ private void initialize() {\n \n         @SuppressWarnings(\"unchecked\")\n         private void prepareHandlers() {\n-            for (MessageHandlingMember<? super T> handler : handlerInspector.getHandlers()) {\n-                if (handler.unwrap(CommandMessageHandlingMember.class).isPresent()) {\n-                    commandHandlers.add(handler);\n-                } else if (handler.unwrap(CommandHandlerInterceptorHandlingMember.class).isPresent()) {\n-                    commandHandlerInterceptors.add(handler);\n+            for (Map.Entry<Class<?>, SortedSet<MessageHandlingMember<? super T>>> typeHandlers\n+                    : handlerInspector.getAllHandlers().entrySet()) {\n+                for (MessageHandlingMember<? super T> handler : typeHandlers.getValue()) {\n+                    Class<?> type = typeHandlers.getKey();\n+                    if (handler.unwrap(CommandMessageHandlingMember.class).isPresent()) {\n+                        if (Modifier.isAbstract(type.getModifiers()) && handler.unwrap(Constructor.class).isPresent()) {\n+                            throw new AggregateModellingException(format(\n+                                    \"An abstract aggregate %s cannot have @CommandHandler on constructor.\",\n+                                    type));\n+                        }\n+                        addHandler(allCommandHandlers, type, handler);\n+                    } else if (handler.unwrap(CommandHandlerInterceptorHandlingMember.class).isPresent()) {\n+                        addHandler(allCommandHandlerInterceptors, type, handler);\n+                    } else {\n+                        addHandler(allEventHandlers, type, handler);\n+                    }\n+                }\n+            }\n+            validateCommandHandlers();\n+        }\n+\n+        private void addHandler(Map<Class<?>, List<MessageHandlingMember<? super T>>> handlers, Class<?> type,\n+                                MessageHandlingMember<? super T> handler) {\n+            handlers.compute(type, (key, value) -> {\n+                if (value == null) {\n+                    List<MessageHandlingMember<? super T>> hs = new ArrayList<>();\n+                    hs.add(handler);\n+                    return hs;\n                 } else {\n-                    eventHandlers.add(handler);\n+                    value.add(handler);\n+                    return value;\n+                }\n+            });\n+        }\n+\n+        private void validateCommandHandlers() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0MTE0OQ=="}, "originalCommit": {"oid": "a355efc88f838af06ec3c3109c14563801383784"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0NzkzOQ==", "bodyText": "Why provide the entire target if you're only using the target its class?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366347939", "createdAt": "2020-01-14T13:51:23Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -252,7 +327,7 @@ public void publish(EventMessage<?> message, T target) {\n         }\n \n         private void doPublish(EventMessage<?> message, T target) {\n-            getHandler(message).ifPresent(h -> {\n+            getHandler(message, target).ifPresent(h -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a355efc88f838af06ec3c3109c14563801383784"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0ODk0Mg==", "bodyText": "Had to check the interface to make this clearer to me. What would help to point out that this method is about creating models for an aggregate's entity, is to change the parameter from entityType to childEntityType (as it's defined in the interface apparently).", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366348942", "createdAt": "2020-01-14T13:53:20Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -193,50 +256,62 @@ private void inspectAggregateType() {\n         private void inspectFields() {\n             ServiceLoader<ChildEntityDefinition> childEntityDefinitions =\n                     ServiceLoader.load(ChildEntityDefinition.class, inspectedType.getClassLoader());\n-            for (Field field : ReflectionUtils.fieldsOf(inspectedType)) {\n-                childEntityDefinitions.forEach(def -> def.createChildDefinition(field, this).ifPresent(child -> {\n-                    children.add(child);\n-                    commandHandlers.addAll(child.commandHandlers());\n-                }));\n-\n-                AnnotationUtils.findAnnotationAttributes(field, EntityId.class).ifPresent(attributes -> {\n-                    identifierField = field;\n-                    if (!\"\".equals(attributes.get(\"routingKey\"))) {\n-                        routingKey = (String) attributes.get(\"routingKey\");\n-                    } else {\n-                        routingKey = field.getName();\n-                    }\n-                });\n-                if (identifierField == null) {\n-                    AnnotationUtils.findAnnotationAttributes(field, \"javax.persistence.Id\").ifPresent(a -> {\n+            for (Class<?> type : handlerInspector.getAllHandlers().keySet()) {\n+                for (Field field : ReflectionUtils.fieldsOf(type)) {\n+                    childEntityDefinitions.forEach(def -> def.createChildDefinition(field, this).ifPresent(child -> {\n+                        children.add(child);\n+                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers,\n+                                                                              type,\n+                                                                              handler));\n+                    }));\n+\n+                    AnnotationUtils.findAnnotationAttributes(field, EntityId.class).ifPresent(attributes -> {\n                         identifierField = field;\n-                        routingKey = field.getName();\n+                        if (!\"\".equals(attributes.get(\"routingKey\"))) {\n+                            routingKey = (String) attributes.get(\"routingKey\");\n+                        } else {\n+                            routingKey = field.getName();\n+                        }\n                     });\n-                }\n-                if (identifierField != null) {\n-                    final Class<?> idClazz = identifierField.getType();\n-                    if (!IdentifierValidator.getInstance().isValidIdentifier(idClazz)) {\n-                        throw new AxonConfigurationException(format(\"Aggregate identifier type [%s] should override Object.toString()\", idClazz.getName()));\n+                    if (identifierField == null) {\n+                        AnnotationUtils.findAnnotationAttributes(field, \"javax.persistence.Id\").ifPresent(a -> {\n+                            identifierField = field;\n+                            routingKey = field.getName();\n+                        });\n                     }\n+                    if (identifierField != null) {\n+                        final Class<?> idClazz = identifierField.getType();\n+                        if (!IdentifierValidator.getInstance().isValidIdentifier(idClazz)) {\n+                            throw new AxonConfigurationException(format(\n+                                    \"Aggregate identifier type [%s] should override Object.toString()\",\n+                                    idClazz.getName()));\n+                        }\n+                    }\n+                    AnnotationUtils.findAnnotationAttributes(field, AggregateVersion.class)\n+                                   .ifPresent(attributes -> versionField = field);\n                 }\n-                AnnotationUtils.findAnnotationAttributes(field, AggregateVersion.class)\n-                               .ifPresent(attributes -> versionField = field);\n             }\n         }\n \n         @SuppressWarnings(\"unchecked\")\n         private AnnotatedAggregateModel<T> runtimeModelOf(T target) {\n-            return modelOf((Class<T>) target.getClass());\n+            return modelOf((Class<? extends T>) target.getClass());\n+        }\n+\n+        @Override\n+        public Map<Class<?>, List<MessageHandlingMember<? super T>>> allCommandHandlers() {\n+            return Collections.unmodifiableMap(allCommandHandlers);\n         }\n \n         @Override\n-        public List<MessageHandlingMember<? super T>> commandHandlers() {\n-            return Collections.unmodifiableList(commandHandlers);\n+        public Stream<MessageHandlingMember<? super T>> commandHandlers(Class<? extends T> subtype) {\n+            return handlers(allCommandHandlers, subtype);\n         }\n \n         @Override\n         public <C> AnnotatedAggregateModel<C> modelOf(Class<? extends C> entityType) {\n-            return AnnotatedAggregateMetaModelFactory.this.createModel(entityType);\n+            // using empty list subtypes because this model is already in the registry, so it doesn't matter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a355efc88f838af06ec3c3109c14563801383784"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0OTg3Nw==", "bodyText": "Doesn't the double for-loop now introduce the possibility that an EntityId/AggregateIdentifier annotated field, which was set through the first type of the handlerInspector.getAllHandlers().keySet() set, is overwritten by a second? Or is this dealt with through a predefined ordering in the handlerInspector.getAllHandlers()?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366349877", "createdAt": "2020-01-14T13:55:07Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -193,50 +256,62 @@ private void inspectAggregateType() {\n         private void inspectFields() {\n             ServiceLoader<ChildEntityDefinition> childEntityDefinitions =\n                     ServiceLoader.load(ChildEntityDefinition.class, inspectedType.getClassLoader());\n-            for (Field field : ReflectionUtils.fieldsOf(inspectedType)) {\n-                childEntityDefinitions.forEach(def -> def.createChildDefinition(field, this).ifPresent(child -> {\n-                    children.add(child);\n-                    commandHandlers.addAll(child.commandHandlers());\n-                }));\n-\n-                AnnotationUtils.findAnnotationAttributes(field, EntityId.class).ifPresent(attributes -> {\n-                    identifierField = field;\n-                    if (!\"\".equals(attributes.get(\"routingKey\"))) {\n-                        routingKey = (String) attributes.get(\"routingKey\");\n-                    } else {\n-                        routingKey = field.getName();\n-                    }\n-                });\n-                if (identifierField == null) {\n-                    AnnotationUtils.findAnnotationAttributes(field, \"javax.persistence.Id\").ifPresent(a -> {\n+            for (Class<?> type : handlerInspector.getAllHandlers().keySet()) {\n+                for (Field field : ReflectionUtils.fieldsOf(type)) {\n+                    childEntityDefinitions.forEach(def -> def.createChildDefinition(field, this).ifPresent(child -> {\n+                        children.add(child);\n+                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers,\n+                                                                              type,\n+                                                                              handler));\n+                    }));\n+\n+                    AnnotationUtils.findAnnotationAttributes(field, EntityId.class).ifPresent(attributes -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a355efc88f838af06ec3c3109c14563801383784"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM1MDA5OQ==", "bodyText": "Is this TODO still present in subsequent commits? If so, think it would be best to resolve this prior to merging.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366350099", "createdAt": "2020-01-14T13:55:31Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -277,20 +352,46 @@ public Long getVersion(T target) {\n         }\n \n         @Override\n-        public List<MessageHandlingMember<? super T>> commandHandlerInterceptors() {\n-            return Collections.unmodifiableList(commandHandlerInterceptors);\n+        public Map<Class<?>, List<MessageHandlingMember<? super T>>> allCommandHandlerInterceptors() {\n+            return Collections.unmodifiableMap(allCommandHandlerInterceptors);\n+        }\n+\n+        @Override\n+        public Stream<MessageHandlingMember<? super T>> commandHandlerInterceptors(Class<? extends T> subtype) {\n+            return handlers(allCommandHandlerInterceptors, subtype);\n         }\n \n         /**\n          * Returns the {@link MessageHandlingMember} that is capable of handling the given {@code message}. If no member is\n          * found an empty optional is returned.\n          *\n          * @param message the message to find a handler for\n+         * @param target  the target that handler should be executed on\n          * @return the handler of the message if present on the model\n          */\n         @SuppressWarnings(\"unchecked\")\n-        protected Optional<MessageHandlingMember<? super T>> getHandler(Message<?> message) {\n-            return eventHandlers.stream().filter(handler -> handler.canHandle(message)).findAny();\n+        protected Optional<MessageHandlingMember<? super T>> getHandler(Message<?> message, T target) {\n+            return handlers(allEventHandlers, target.getClass())\n+                    .filter(handler -> handler.canHandle(message))\n+                    .findAny();\n+        }\n+\n+        @Override\n+        public Map<Class<?>, List<MessageHandlingMember<? super T>>> allEventHandlers() {\n+            return Collections.unmodifiableMap(allEventHandlers);\n+        }\n+\n+        //backwards compatibility - if you don't specify a designated child,\n+        //you should at least get handlers of its first registered parent (if any)\n+        // TODO: 12/25/2019 maybe move to Inspector???", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a355efc88f838af06ec3c3109c14563801383784"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM1MDk0NA==", "bodyText": "No description? \ud83d\ude22", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366350944", "createdAt": "2020-01-14T13:57:07Z", "author": {"login": "smcvb"}, "path": "modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedPolymorphicAggregateMetaModelFactoryTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.modelling.command.inspection;\n+\n+import org.axonframework.commandhandling.CommandHandler;\n+import org.axonframework.eventhandling.EventHandler;\n+import org.axonframework.messaging.annotation.DefaultParameterResolverFactory;\n+import org.axonframework.messaging.annotation.MessageHandlingMember;\n+import org.axonframework.messaging.annotation.ParameterResolverFactory;\n+import org.axonframework.modelling.command.CommandHandlerInterceptor;\n+import org.junit.jupiter.api.*;\n+\n+import java.lang.reflect.Executable;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a355efc88f838af06ec3c3109c14563801383784"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM1OTk2Ng==", "bodyText": "Mega nit: the indentation is slightly messy in this method.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366359966", "createdAt": "2020-01-14T14:13:36Z", "author": {"login": "smcvb"}, "path": "messaging/src/test/java/org/axonframework/messaging/annotation/AnnotatedHandlerInspectorTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.messaging.annotation;\n+\n+import org.axonframework.commandhandling.CommandHandler;\n+import org.axonframework.commandhandling.CommandMessage;\n+import org.axonframework.eventhandling.EventHandler;\n+import org.axonframework.eventhandling.EventMessage;\n+import org.junit.jupiter.api.*;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.SortedSet;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * Tests for {@link AnnotatedHandlerInspector}.\n+ *\n+ * @author Milan Savic\n+ */\n+public class AnnotatedHandlerInspectorTest {\n+\n+    @Test\n+    public void testComplexHandlerHierarchy() throws NoSuchMethodException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64d2b6343780f5ed179635c55990b3d6a22bf5e7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgxOTAwNw==", "bodyText": "Wouldn't a Set make more sense? \ud83e\udd14", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366819007", "createdAt": "2020-01-15T11:09:33Z", "author": {"login": "smcvb"}, "path": "config/src/main/java/org/axonframework/config/AggregateConfigurer.java", "diffHunk": "@@ -69,6 +69,7 @@\n     private final Component<AggregateModel<A>> metaModel;\n     private final Component<Predicate<? super DomainEventMessage<?>>> eventStreamFilter;\n     private final Component<Boolean> filterEventsByType;\n+    private final List<Class<? extends A>> subtypes = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b65af477d55b5ee10b1e2fba849a0f7bb67546d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgxOTY3Nw==", "bodyText": "Instead of:\nRegisters a subtype of this aggregate. Supports aggregate polymorphism.\n\nI'd write:\nRegisters a subtype of this aggregate to support aggregate polymorphism.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366819677", "createdAt": "2020-01-15T11:11:16Z", "author": {"login": "smcvb"}, "path": "config/src/main/java/org/axonframework/config/AggregateConfigurer.java", "diffHunk": "@@ -386,4 +388,14 @@ public void shutdown() {\n     public Class<A> aggregateType() {\n         return aggregate;\n     }\n+\n+    /**\n+     * Registers a subtype of this aggregate. Supports aggregate polymorphism. This aggregate will be able to handle", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b65af477d55b5ee10b1e2fba849a0f7bb67546d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgyMDMyMA==", "bodyText": "Nit: not so much with the actual test, but more so a comment on JUnit 5 usage: you can omit public from all @Test annotated methods. Not sure why it's still there on the other test functions to be honest...", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366820320", "createdAt": "2020-01-15T11:12:43Z", "author": {"login": "smcvb"}, "path": "config/src/test/java/org/axonframework/config/AggregateConfigurerTest.java", "diffHunk": "@@ -102,10 +115,140 @@ public void testConfiguredDisruptorCommandBusAsLocalSegmentCreatesTheRepository(\n         );\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b65af477d55b5ee10b1e2fba849a0f7bb67546d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgyMTI1OA==", "bodyText": "No documentation? \ud83d\ude22", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366821258", "createdAt": "2020-01-15T11:14:59Z", "author": {"login": "smcvb"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/polymorphic/AbstractCommandHandlerCommand.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.integrationtests.polymorphic;\n+\n+import org.axonframework.modelling.command.TargetAggregateIdentifier;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4fc00b91478bb02b3e3ed74590290055fac029f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgyNDM0MQ==", "bodyText": "Nit: I would be a little more verbose in the description myself", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366824341", "createdAt": "2020-01-15T11:22:35Z", "author": {"login": "smcvb"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/polymorphic/Child1Aggregate.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.integrationtests.polymorphic;\n+\n+import org.axonframework.commandhandling.CommandHandler;\n+import org.axonframework.eventhandling.EventHandler;\n+import org.axonframework.eventsourcing.EventSourcingHandler;\n+import org.axonframework.modelling.command.CommandHandlerInterceptor;\n+\n+import javax.persistence.Entity;\n+\n+import static org.axonframework.modelling.command.AggregateLifecycle.apply;\n+\n+/**\n+ * Test aggregate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4fc00b91478bb02b3e3ed74590290055fac029f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgyNDM3Ng==", "bodyText": "Nit: I would be a little more verbose in the description myself", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366824376", "createdAt": "2020-01-15T11:22:41Z", "author": {"login": "smcvb"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/polymorphic/Child1OnlyCommand.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.integrationtests.polymorphic;\n+\n+import org.axonframework.modelling.command.TargetAggregateIdentifier;\n+\n+/**\n+ * Test command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4fc00b91478bb02b3e3ed74590290055fac029f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgyNDQxMw==", "bodyText": "Nit: I would be a little more verbose in the description myself", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366824413", "createdAt": "2020-01-15T11:22:47Z", "author": {"login": "smcvb"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/polymorphic/Child2Aggregate.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.integrationtests.polymorphic;\n+\n+import org.axonframework.commandhandling.CommandHandler;\n+import org.axonframework.eventhandling.EventHandler;\n+import org.axonframework.eventsourcing.EventSourcingHandler;\n+import org.axonframework.modelling.command.CommandHandlerInterceptor;\n+\n+import javax.persistence.Entity;\n+\n+import static org.axonframework.modelling.command.AggregateLifecycle.apply;\n+\n+/**\n+ * Test aggregate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4fc00b91478bb02b3e3ed74590290055fac029f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgyNDU4MA==", "bodyText": "Nit: I would be a little more verbose in the description myself", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366824580", "createdAt": "2020-01-15T11:23:15Z", "author": {"login": "smcvb"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/polymorphic/ChildEvent.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.integrationtests.polymorphic;\n+\n+/**\n+ * Test event.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4fc00b91478bb02b3e3ed74590290055fac029f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgyNDYxOQ==", "bodyText": "Nit: I would be a little more verbose in the description myself", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366824619", "createdAt": "2020-01-15T11:23:22Z", "author": {"login": "smcvb"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/polymorphic/CommonCommand.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.integrationtests.polymorphic;\n+\n+import org.axonframework.modelling.command.TargetAggregateIdentifier;\n+\n+/**\n+ * Test command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4fc00b91478bb02b3e3ed74590290055fac029f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgyNDY3NQ==", "bodyText": "Nit: I would be a little more verbose in the description myself", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366824675", "createdAt": "2020-01-15T11:23:29Z", "author": {"login": "smcvb"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/polymorphic/CreateChild1Command.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.integrationtests.polymorphic;\n+\n+/**\n+ * Test command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4fc00b91478bb02b3e3ed74590290055fac029f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgyNDg1Mg==", "bodyText": "Nit: think my opinion on this 2-word descriptions is clear \ud83d\ude05", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366824852", "createdAt": "2020-01-15T11:23:54Z", "author": {"login": "smcvb"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/polymorphic/CreateChild2Command.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.integrationtests.polymorphic;\n+\n+/**\n+ * Test command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4fc00b91478bb02b3e3ed74590290055fac029f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg2NDc2OQ==", "bodyText": "Awesome \ud83d\udc4d\nAlso very much liked the abstract DeadlineManager test class you introduced sometime ago; this is pretty similar and also great.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366864769", "createdAt": "2020-01-15T13:07:13Z", "author": {"login": "smcvb"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/polymorphic/PolymorphicESAggregateAnnotationCommandHandlerTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.integrationtests.polymorphic;\n+\n+import org.axonframework.eventsourcing.EventSourcingRepository;\n+import org.axonframework.eventsourcing.eventstore.EmbeddedEventStore;\n+import org.axonframework.eventsourcing.eventstore.inmemory.InMemoryEventStorageEngine;\n+import org.axonframework.modelling.command.Repository;\n+import org.axonframework.modelling.command.inspection.AggregateModel;\n+\n+import javax.persistence.EntityManager;\n+\n+/**\n+ * Tests for ES aggregate polymorphism.\n+ *\n+ * @author Milan Savic\n+ */\n+public class PolymorphicESAggregateAnnotationCommandHandlerTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4fc00b91478bb02b3e3ed74590290055fac029f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg2ODYyNg==", "bodyText": "Mostly out of curiosity, but why didn't you introduce a inspectAggregate(Class, ParameterResolverFactory, List<Class>) static method mirroring the constructors of the AnnotatedAggregateMetaModelFactory? Can imagine why like wouldn't be using it ourselves though.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366868626", "createdAt": "2020-01-15T13:16:08Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -91,6 +103,26 @@\n                 .createModel(aggregateType);\n     }\n \n+    /**\n+     * Shorthand to create a factory instance and inspect the model for the given {@code aggregateType} and its {@code\n+     * subytpes}, using given {@code parameterResolverFactory} to resolve parameter values for annotated handlers and\n+     * {@code handlerDefinition} to create concrete handlers.\n+     *\n+     * @param aggregateType            The class of the aggregate to create the model for\n+     * @param parameterResolverFactory to resolve parameter values of annotated handlers with\n+     * @param handlerDefinition        The handler definition used to create concrete handlers\n+     * @param subtypes                 Subtypes of this aggregate class\n+     * @param <T>                      The type of aggregate described in the model\n+     * @return The model describing the structure of the aggregate\n+     */\n+    public static <T> AggregateModel<T> inspectAggregate(Class<T> aggregateType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cf152a83496527ddd9670d3be3d9f005710e845"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg4MjY5Mg==", "bodyText": "Or(!), am I missing something obvious? ;-p", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r366882692", "createdAt": "2020-01-15T13:47:08Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -193,50 +256,62 @@ private void inspectAggregateType() {\n         private void inspectFields() {\n             ServiceLoader<ChildEntityDefinition> childEntityDefinitions =\n                     ServiceLoader.load(ChildEntityDefinition.class, inspectedType.getClassLoader());\n-            for (Field field : ReflectionUtils.fieldsOf(inspectedType)) {\n-                childEntityDefinitions.forEach(def -> def.createChildDefinition(field, this).ifPresent(child -> {\n-                    children.add(child);\n-                    commandHandlers.addAll(child.commandHandlers());\n-                }));\n-\n-                AnnotationUtils.findAnnotationAttributes(field, EntityId.class).ifPresent(attributes -> {\n-                    identifierField = field;\n-                    if (!\"\".equals(attributes.get(\"routingKey\"))) {\n-                        routingKey = (String) attributes.get(\"routingKey\");\n-                    } else {\n-                        routingKey = field.getName();\n-                    }\n-                });\n-                if (identifierField == null) {\n-                    AnnotationUtils.findAnnotationAttributes(field, \"javax.persistence.Id\").ifPresent(a -> {\n+            for (Class<?> type : handlerInspector.getAllHandlers().keySet()) {\n+                for (Field field : ReflectionUtils.fieldsOf(type)) {\n+                    childEntityDefinitions.forEach(def -> def.createChildDefinition(field, this).ifPresent(child -> {\n+                        children.add(child);\n+                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers,\n+                                                                              type,\n+                                                                              handler));\n+                    }));\n+\n+                    AnnotationUtils.findAnnotationAttributes(field, EntityId.class).ifPresent(attributes -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0OTg3Nw=="}, "originalCommit": {"oid": "a355efc88f838af06ec3c3109c14563801383784"}, "originalPosition": 179}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e99e41d02496a0a2b1bbba750ec3e99720916e3", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/7e99e41d02496a0a2b1bbba750ec3e99720916e3", "committedDate": "2020-01-16T08:14:35Z", "message": "Review remarks."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzOTA2MjA0", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#pullrequestreview-343906204", "createdAt": "2020-01-16T13:23:31Z", "commit": {"oid": "7e99e41d02496a0a2b1bbba750ec3e99720916e3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ee1984b38594037ac261bd357b41048fafb3eee", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/9ee1984b38594037ac261bd357b41048fafb3eee", "committedDate": "2020-01-16T13:32:40Z", "message": "Optimized aggregate validation.\nChanged ancestor of AggregateModellingException."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f77a2874c436bd300bb4deef31b9d7671a40155", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/3f77a2874c436bd300bb4deef31b9d7671a40155", "committedDate": "2020-01-16T14:47:26Z", "message": "There should be only one aggregate identifier in the polymorphic aggregate structure."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0a6bed7aab0c2762e9fd735a36af453c20631d0", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/a0a6bed7aab0c2762e9fd735a36af453c20631d0", "committedDate": "2020-01-16T15:03:32Z", "message": "Merge branch 'master' into aggregate-polymorphism"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/bba39dc0b3a2ecbd2314afd88d63e56f2a846481", "committedDate": "2020-01-16T15:36:43Z", "message": "Added a way to figure out a declaring class of MessageHandlingMember."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MDM2MDEx", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#pullrequestreview-346036011", "createdAt": "2020-01-21T16:55:53Z", "commit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo1NTo1NFrOFgBdtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODoyOTozN1rOFgEUbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMjc0Mg==", "bodyText": "ambiguous description \"commands of provided subtype\". I suggest describing it as \"Command Handlers defined on this subtype will be considered part of this aggregate's handlers.\"", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369122742", "createdAt": "2020-01-21T16:55:54Z", "author": {"login": "abuijze"}, "path": "config/src/main/java/org/axonframework/config/AggregateConfigurer.java", "diffHunk": "@@ -386,4 +390,14 @@ public void shutdown() {\n     public Class<A> aggregateType() {\n         return aggregate;\n     }\n+\n+    /**\n+     * Registers a subtype of this aggregate to support aggregate polymorphism. This aggregate will be able to handle\n+     * commands of provided {@code subtype} as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMzgwMQ==", "bodyText": "Consider changing to public AgggregateConfigurer withSubtype(...) to allow for easier configuration.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369123801", "createdAt": "2020-01-21T16:57:32Z", "author": {"login": "abuijze"}, "path": "config/src/main/java/org/axonframework/config/AggregateConfigurer.java", "diffHunk": "@@ -386,4 +390,14 @@ public void shutdown() {\n     public Class<A> aggregateType() {\n         return aggregate;\n     }\n+\n+    /**\n+     * Registers a subtype of this aggregate to support aggregate polymorphism. This aggregate will be able to handle\n+     * commands of provided {@code subtype} as well.\n+     *\n+     * @param subtype a subtype in this polymorphic hierarchy\n+     */\n+    public void registerSubtype(Class<? extends A> subtype) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyNDgyMA==", "bodyText": "This is where you notice fluent interfacing could simplify configuration:\nAggregateConfigurer<A> aggregateConfigurer = AggregateConfigurer.defaultConfiguration(A.class)\n                                                                .withSubtype(B.class);", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369124820", "createdAt": "2020-01-21T16:59:14Z", "author": {"login": "abuijze"}, "path": "config/src/test/java/org/axonframework/config/AggregateConfigurerTest.java", "diffHunk": "@@ -102,10 +115,140 @@ public void testConfiguredDisruptorCommandBusAsLocalSegmentCreatesTheRepository(\n         );\n     }\n \n+    @Test\n+    void testPolymorphicConfig() {\n+        AggregateConfigurer<A> aggregateConfigurer = AggregateConfigurer.defaultConfiguration(A.class);\n+        aggregateConfigurer.registerSubtype(B.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0Mzc3Mg==", "bodyText": "Is this change necessary? It would be nice for the test to show API compatibility hasn't changed. The GenericAggregateFactory seems to still have the overloaded method.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369143772", "createdAt": "2020-01-21T17:36:27Z", "author": {"login": "abuijze"}, "path": "disruptor/src/test/java/org/axonframework/disruptor/commandhandling/DisruptorCommandBusTest.java", "diffHunk": "@@ -195,9 +196,11 @@ void testEventStreamsDecoratedOnReadAndWrite() throws InterruptedException {\n         SnapshotTrigger snapshotTrigger = mock(SnapshotTrigger.class);\n         when(snapshotTriggerDefinition.prepareTrigger(any())).thenReturn(snapshotTrigger);\n \n-        stubHandler.setRepository(\n-                testSubject.createRepository(eventStore, new GenericAggregateFactory<>(StubAggregate.class),\n-                                             snapshotTriggerDefinition));\n+        stubHandler.setRepository(testSubject.createRepository(eventStore,\n+                                                               new GenericAggregateFactory<>(\n+                                                                       AnnotatedAggregateMetaModelFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0NDQzOQ==", "bodyText": "I'd prefer a protected accessor method (aggregateModel()) over a protected field.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369144439", "createdAt": "2020-01-21T17:37:53Z", "author": {"login": "abuijze"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/AbstractAggregateFactory.java", "diffHunk": "@@ -29,28 +33,47 @@\n public abstract class AbstractAggregateFactory<T> implements AggregateFactory<T> {\n \n     private final Class<T> aggregateBaseType;\n+    protected final AggregateModel<T> aggregateModel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0NjY2Mw==", "bodyText": "Not sure why this needs to be deprecated. It's just a quicker way of creating a factory that just creates instances of the given aggregate type, without supporting any subtypes.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369146663", "createdAt": "2020-01-21T17:42:40Z", "author": {"login": "abuijze"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/GenericAggregateFactory.java", "diffHunk": "@@ -39,27 +39,36 @@\n  */\n public class GenericAggregateFactory<T> extends AbstractAggregateFactory<T> {\n \n-    private final Constructor<T> constructor;\n-\n     /**\n      * Initialize the AggregateFactory for creating instances of the given {@code aggregateType}.\n      *\n      * @param aggregateType The type of aggregate this factory creates instances of.\n      * @throws IncompatibleAggregateException if the aggregate constructor throws an exception, or if the JVM security\n      *                                        settings prevent the GenericAggregateFactory from calling the\n      *                                        constructor.\n+     * @deprecated use {@link #GenericAggregateFactory(AggregateModel)} instead\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0ODU2Mg==", "bodyText": "This may cause a breaking change. Until now, the \"type\" of a DomainEventMessage wasn't used.\nI suggest accepting unmatched types when the aggregateModel doesn't define any polymorphic types. In that case, we can silently accept \"mistypes\". If the model does define multiple polymorphic types, then we should throw an exception.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369148562", "createdAt": "2020-01-21T17:46:30Z", "author": {"login": "abuijze"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/GenericAggregateFactory.java", "diffHunk": "@@ -71,21 +80,33 @@ public GenericAggregateFactory(Class<T> aggregateType) {\n     @SuppressWarnings({\"unchecked\"})\n     @Override\n     protected T doCreateAggregate(String aggregateIdentifier, DomainEventMessage firstEvent) {\n+        return aggregateModel.type(firstEvent.getType())\n+                             .map(this::newInstance)\n+                             .orElseThrow(() -> new IncompatibleAggregateException(format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0OTUwMA==", "bodyText": "This is inspection at runtime. Favor inspection at startup time instead, simply calling the constructors that have been \"discovered\" in that phase.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369149500", "createdAt": "2020-01-21T17:48:41Z", "author": {"login": "abuijze"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/GenericAggregateFactory.java", "diffHunk": "@@ -71,21 +80,33 @@ public GenericAggregateFactory(Class<T> aggregateType) {\n     @SuppressWarnings({\"unchecked\"})\n     @Override\n     protected T doCreateAggregate(String aggregateIdentifier, DomainEventMessage firstEvent) {\n+        return aggregateModel.type(firstEvent.getType())\n+                             .map(this::newInstance)\n+                             .orElseThrow(() -> new IncompatibleAggregateException(format(\n+                                     \"The [%s] aggregate does not exist.\",\n+                                     firstEvent.getType())));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private T newInstance(Class<?> type) {\n         try {\n-            return constructor.newInstance();\n+            return (T) ensureAccessible(type.getDeclaredConstructor()).newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1MDI5Mg==", "bodyText": "Ideally, this test wouldn't require any change to pass. The aggregateType wasn't used in the past, and unless polymorphism is used, the type shouldn't really matter.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369150292", "createdAt": "2020-01-21T17:50:20Z", "author": {"login": "abuijze"}, "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/GenericAggregateFactoryTest.java", "diffHunk": "@@ -51,7 +51,7 @@ void testInitializeRepository_ConstructorNotCallable() {\n     @Test\n     void testInitializeFromAggregateSnapshot() {\n         StubAggregate aggregate = new StubAggregate(\"stubId\");\n-        DomainEventMessage<StubAggregate> snapshotMessage = new GenericDomainEventMessage<>(\"type\", aggregate.getIdentifier(),\n+        DomainEventMessage<StubAggregate> snapshotMessage = new GenericDomainEventMessage<>(\"StubAggregate\", aggregate.getIdentifier(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1MTEyNA==", "bodyText": "Not sure why this is required. The test seems to want to create a new book instance, which means that the Aggregate (wrapper class) should be initialized with an instance at first.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369151124", "createdAt": "2020-01-21T17:52:00Z", "author": {"login": "abuijze"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/modelling/command/ComplexAggregateStructureTest.java", "diffHunk": "@@ -45,7 +45,7 @@ void testCommandsAreRoutedToCorrectEntity() throws Exception {\n         AggregateModel<Book> bookAggregateModel = AnnotatedAggregateMetaModelFactory.inspectAggregate(Book.class);\n         EventBus mockEventBus = SimpleEventBus.builder().build();\n         mockEventBus.subscribe(m -> m.forEach(i -> System.out.println(i.getPayloadType().getName())));\n-        AnnotatedAggregate<Book> bookAggregate = AnnotatedAggregate.initialize((Book) null,\n+        AnnotatedAggregate<Book> bookAggregate = AnnotatedAggregate.initialize(new Book(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1MTU2OQ==", "bodyText": "\"Interesting\" class name ;-)", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369151569", "createdAt": "2020-01-21T17:53:00Z", "author": {"login": "abuijze"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/polymorphic/AbstractCommandHandlerCommand.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.integrationtests.polymorphic;\n+\n+import org.axonframework.modelling.command.TargetAggregateIdentifier;\n+\n+/**\n+ * The command sent to the abstract command handler of parent aggregate in polymorphic aggregate hierarchy.\n+ *\n+ * @author Milan Savic\n+ */\n+public class AbstractCommandHandlerCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1MzM2Ng==", "bodyText": "How does this list differ from the entries in the \"registry\" field?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369153366", "createdAt": "2020-01-21T17:56:27Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/messaging/annotation/AnnotatedHandlerInspector.java", "diffHunk": "@@ -32,20 +34,23 @@\n     private final ParameterResolverFactory parameterResolverFactory;\n     private final Map<Class<?>, AnnotatedHandlerInspector> registry;\n     private final List<AnnotatedHandlerInspector<? super T>> superClassInspectors;\n-    private final List<MessageHandlingMember<? super T>> handlers;\n+    private final List<AnnotatedHandlerInspector<? extends T>> subClassInspectors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1Mzg2MQ==", "bodyText": "\"designated\" or \"declared\"?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369153861", "createdAt": "2020-01-21T17:57:28Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/messaging/annotation/AnnotatedHandlerInspector.java", "diffHunk": "@@ -89,23 +94,43 @@ private AnnotatedHandlerInspector(Class<T> inspectedType,\n     public static <T> AnnotatedHandlerInspector<T> inspectType(Class<? extends T> handlerType,\n                                                                ParameterResolverFactory parameterResolverFactory,\n                                                                HandlerDefinition handlerDefinition) {\n+        return inspectType(handlerType, parameterResolverFactory, handlerDefinition, Collections.emptySet());\n+    }\n+\n+    /**\n+     * Create an inspector for given {@code handlerType} and its {@code designatedSubtypes} that uses given {@code\n+     * parameterResolverFactory} to resolve method parameters and given {@code handlerDefinition} to create handlers.\n+     *\n+     * @param handlerType              the target handler type\n+     * @param parameterResolverFactory the resolver factory to use during detection\n+     * @param handlerDefinition        the handler definition used to create concrete handlers\n+     * @param designatedSubtypes       the designated subtypes of this {@code handlerType}\n+     * @param <T>                      the handler's type\n+     * @return a new inspector instance for the inspected class\n+     */\n+    public static <T> AnnotatedHandlerInspector<T> inspectType(Class<? extends T> handlerType,\n+                                                               ParameterResolverFactory parameterResolverFactory,\n+                                                               HandlerDefinition handlerDefinition,\n+                                                               Set<Class<? extends T>> designatedSubtypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1NTU5NQ==", "bodyText": "Looks like you're returning an empty TreeSet, but don't register that as the value of handlers (as would be the case in computeIfAbsent). If you just want to return an empty stream, it's better to use getOrDefault(type, emptySet()).", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369155595", "createdAt": "2020-01-21T18:01:03Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/messaging/annotation/AnnotatedHandlerInspector.java", "diffHunk": "@@ -168,15 +222,38 @@ private void registerHandler(MessageHandlingMember<T> handler) {\n         return AnnotatedHandlerInspector.createInspector(entityType,\n                                                          parameterResolverFactory,\n                                                          handlerDefinition,\n-                                                         registry);\n+                                                         registry,\n+                                                         Collections.emptySet());\n     }\n \n     /**\n      * Returns a list of detected members of the inspected entity that are capable of handling certain messages.\n      *\n      * @return a list of detected message handlers\n+     * @deprecated use {@link #getAllHandlers()} or {@link #getHandlers(Class)} instead\n      */\n+    @Deprecated\n     public List<MessageHandlingMember<? super T>> getHandlers() {\n-        return handlers;\n+        return getHandlers(inspectedType).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Returns a list of detected members of given {@code type} that are capable of handling certain messages.\n+     *\n+     * @param type a type of inspected entity\n+     * @return a stream of detected message handlers for given {@code type}\n+     */\n+    public Stream<MessageHandlingMember<? super T>> getHandlers(Class<?> type) {\n+        return handlers.getOrDefault(type, new TreeSet<>(HandlerComparator.instance()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1Nzg5OA==", "bodyText": "I suggest throwing an UnsupportedOperationException instead.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369157898", "createdAt": "2020-01-21T18:05:57Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/messaging/annotation/MessageHandlingMember.java", "diffHunk": "@@ -94,6 +95,19 @@ default boolean canHandleType(Class<?> payloadType) {\n      */\n     <HT> Optional<HT> unwrap(Class<HT> handlerType);\n \n+    /**\n+     * Gets the declaring class of this Message Handling Member.\n+     *\n+     * @return the declaring class of this Message Handling Member\n+     */\n+    default Class<?> declaringClass() {\n+        return unwrap(Member.class).map(Member::getDeclaringClass)\n+                                   .orElseThrow(() -> new IllegalStateException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MDg3Mw==", "bodyText": "Multiple usages of the term \"type\". It would help to make it clear that one of the \"aggregate type\" as used in the DomainEventMessage, while the other is the actual class of the aggregate.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369160873", "createdAt": "2020-01-21T18:12:28Z", "author": {"login": "abuijze"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateModel.java", "diffHunk": "@@ -39,4 +41,24 @@\n      * @return The current version of the aggregate\n      */\n     Long getVersion(T target);\n+\n+    /**\n+     * Gets the aggregate class based on given {@code declaredType}.\n+     *\n+     * @param declaredType the declared type of aggregate represented by {@link String}\n+     * @return the concrete aggregate class based on {@code declaredType}, if exists\n+     */\n+    default Optional<Class<?>> type(String declaredType) {\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Gets the declared type based on given {@code type}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MTYxNw==", "bodyText": "How could this not exist? Or is this only if the aggregate explicitly declares a \"type\", causing defaults to be used when the Optional is empty?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369161617", "createdAt": "2020-01-21T18:14:04Z", "author": {"login": "abuijze"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateModel.java", "diffHunk": "@@ -39,4 +41,24 @@\n      * @return The current version of the aggregate\n      */\n     Long getVersion(T target);\n+\n+    /**\n+     * Gets the aggregate class based on given {@code declaredType}.\n+     *\n+     * @param declaredType the declared type of aggregate represented by {@link String}\n+     * @return the concrete aggregate class based on {@code declaredType}, if exists\n+     */\n+    default Optional<Class<?>> type(String declaredType) {\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Gets the declared type based on given {@code type}.\n+     *\n+     * @param type the type of the aggregate\n+     * @return the declared aggregate type represented by {@link String}, if exists\n+     */\n+    default Optional<String> declaredType(Class<?> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2ODc2Mw==", "bodyText": "Confusing parameter name. The type is that of the aggregate, not the event. The fact that it's the type derived from the first event, it not relevant in this scope anymore. I suggest using \"aggregateType\" instead.\nAlso, the method should allow inexistent types if no substypes are declared in the aggregate, to ensure compatibility with 4.2, where aggregate type wasn't used to initialize an aggregate.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369168763", "createdAt": "2020-01-21T18:28:09Z", "author": {"login": "abuijze"}, "path": "spring/src/main/java/org/axonframework/spring/eventsourcing/SpringPrototypeAggregateFactory.java", "diffHunk": "@@ -88,15 +111,36 @@ public void afterPropertiesSet() {\n                                    + \"The bean with name '%s' does not have the 'prototype' scope.\",\n                            beanName, prototypeBeanName));\n         }\n-        this.delegate = new AbstractAggregateFactory<T>(getAggregateType()) {\n+        AggregateModel<T> model;\n+        if (applicationContext.getBeanNamesForType(Configuration.class).length > 0) {\n+            Configuration configuration = applicationContext.getBean(Configuration.class);\n+            model = AnnotatedAggregateMetaModelFactory.inspectAggregate(getAggregateType(),\n+                                                                        configuration.parameterResolverFactory(),\n+                                                                        configuration\n+                                                                                .handlerDefinition(getAggregateType()),\n+                                                                        subtypes.keySet());\n+        } else {\n+            model = AnnotatedAggregateMetaModelFactory.inspectAggregate(getAggregateType(),\n+                                                                        subtypes.keySet());\n+        }\n+        this.delegate = new AbstractAggregateFactory<T>(model) {\n             @Override\n             protected T doCreateAggregate(String aggregateIdentifier, DomainEventMessage firstEvent) {\n-                return (T) applicationContext.getBean(prototypeBeanName);\n+                return (T) applicationContext.getBean(prototype(firstEvent.getType()));\n+            }\n+\n+            private String prototype(String firstEventType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2OTUxNw==", "bodyText": "Would be nice for the test to pass without modifications, to show backwards compatibility.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r369169517", "createdAt": "2020-01-21T18:29:37Z", "author": {"login": "abuijze"}, "path": "spring/src/test/java/org/axonframework/spring/eventsourcing/SpringAggregateSnapshotterFactoryBeanTest.java", "diffHunk": "@@ -76,7 +76,7 @@ public StubAggregate doCreateAggregate(String aggregateIdentifier,\n         mockTransactionManager = mock(PlatformTransactionManager.class);\n         aggregateIdentifier = UUID.randomUUID().toString();\n \n-        String type = \"testAggregate\";\n+        String type = \"StubAggregate\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d763847790e39d3a1d76d5618a9cb01e5100c84b", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/d763847790e39d3a1d76d5618a9cb01e5100c84b", "committedDate": "2020-01-22T16:40:41Z", "message": "Review remarks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c98bb254179a21e37dce8d9a715578d819dad1fa", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/c98bb254179a21e37dce8d9a715578d819dad1fa", "committedDate": "2020-01-27T13:17:49Z", "message": "Aggregate Polymorphism (test fixtures)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45fb829933f20b1a1a808c86861b806a3b176b1c", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/45fb829933f20b1a1a808c86861b806a3b176b1c", "committedDate": "2020-01-27T16:14:44Z", "message": "Added tests for AggregateLifecycle.createNew(PolymorphicAggregate)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aec172c443d3cfc643f2e4ade1b81629b78442d8", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/aec172c443d3cfc643f2e4ade1b81629b78442d8", "committedDate": "2020-01-27T16:16:08Z", "message": "Merge branch 'master' into aggregate-polymorphism"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MjA3OTg1", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#pullrequestreview-349207985", "createdAt": "2020-01-28T08:54:01Z", "commit": {"oid": "aec172c443d3cfc643f2e4ade1b81629b78442d8"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODo1NDowMVrOFidESw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTowMToyNlrOFig_Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3MjEzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Thrown if Aggregate model is not valid.\n          \n          \n            \n             * Thrown if an aggregate model is invalid.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r371672139", "createdAt": "2020-01-28T08:54:01Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateModellingException.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.modelling.command.inspection;\n+\n+import org.axonframework.common.AxonConfigurationException;\n+\n+/**\n+ * Thrown if Aggregate model is not valid.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec172c443d3cfc643f2e4ade1b81629b78442d8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczNDk4Mw==", "bodyText": "Suggestion: why not add a constructor for the AggregateTestFixture which contains a Class<?>... parameter for the subtypes?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r371734983", "createdAt": "2020-01-28T10:58:36Z", "author": {"login": "smcvb"}, "path": "test/src/test/java/org/axonframework/test/aggregate/FixtureTest_Polymorphism.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.test.aggregate;\n+\n+import org.axonframework.commandhandling.CommandHandler;\n+import org.axonframework.eventhandling.DomainEventMessage;\n+import org.axonframework.eventhandling.GenericDomainEventMessage;\n+import org.axonframework.eventsourcing.EventSourcingHandler;\n+import org.axonframework.modelling.command.AggregateIdentifier;\n+import org.axonframework.modelling.command.TargetAggregateIdentifier;\n+import org.axonframework.test.matchers.PredicateMatcher;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.params.*;\n+import org.junit.jupiter.params.provider.*;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static org.axonframework.modelling.command.AggregateLifecycle.apply;\n+\n+/**\n+ * Tests {@link AggregateTestFixture} in polymorphic scenarios.\n+ *\n+ * @author Milan Savic\n+ */\n+class FixtureTest_Polymorphism {\n+\n+    private FixtureConfiguration<AggregateA> fixture;\n+\n+    @BeforeEach\n+    void setUp() {\n+        fixture = new AggregateTestFixture<>(AggregateA.class).registerSubtype(AggregateB.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98bb254179a21e37dce8d9a715578d819dad1fa"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczNjMyMw==", "bodyText": "Nit: you could use the Matchers#predicate method to create the PredicateMatcher.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r371736323", "createdAt": "2020-01-28T11:01:26Z", "author": {"login": "smcvb"}, "path": "test/src/test/java/org/axonframework/test/aggregate/FixtureTest_Polymorphism.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.test.aggregate;\n+\n+import org.axonframework.commandhandling.CommandHandler;\n+import org.axonframework.eventhandling.DomainEventMessage;\n+import org.axonframework.eventhandling.GenericDomainEventMessage;\n+import org.axonframework.eventsourcing.EventSourcingHandler;\n+import org.axonframework.modelling.command.AggregateIdentifier;\n+import org.axonframework.modelling.command.TargetAggregateIdentifier;\n+import org.axonframework.test.matchers.PredicateMatcher;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.params.*;\n+import org.junit.jupiter.params.provider.*;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static org.axonframework.modelling.command.AggregateLifecycle.apply;\n+\n+/**\n+ * Tests {@link AggregateTestFixture} in polymorphic scenarios.\n+ *\n+ * @author Milan Savic\n+ */\n+class FixtureTest_Polymorphism {\n+\n+    private FixtureConfiguration<AggregateA> fixture;\n+\n+    @BeforeEach\n+    void setUp() {\n+        fixture = new AggregateTestFixture<>(AggregateA.class).registerSubtype(AggregateB.class)\n+                                                              .registerSubtype(AggregateC.class);\n+    }\n+\n+    private static Stream<Arguments> provideForCreationalTest() {\n+        return Stream.of(\n+                Arguments.of((Function<String, Object>) CreateBCommand::new, \"AggregateB\"),\n+                Arguments.of((Function<String, Object>) CreateCCommand::new, \"AggregateC\")\n+        );\n+    }\n+\n+    @ParameterizedTest(name = \"[{index}] {1}\")\n+    @MethodSource(\"provideForCreationalTest\")\n+    void testCreationOfAggregate(Function<String, Object> commandBuilder, String aggregateType) {\n+        String id = \"id\";\n+        fixture.givenNoPriorActivity()\n+               .when(commandBuilder.apply(id))\n+               .expectEventsMatching(new PredicateMatcher<>(events -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98bb254179a21e37dce8d9a715578d819dad1fa"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzg4NTEz", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#pullrequestreview-350388513", "createdAt": "2020-01-29T20:04:02Z", "commit": {"oid": "aec172c443d3cfc643f2e4ade1b81629b78442d8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowNDowM1rOFjV3Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDo0Mzo0M1rOFjW5mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMjYzMA==", "bodyText": "Don't forget the @return in the javadoc", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r372602630", "createdAt": "2020-01-29T20:04:03Z", "author": {"login": "abuijze"}, "path": "config/src/main/java/org/axonframework/config/AggregateConfigurer.java", "diffHunk": "@@ -392,12 +392,13 @@ public void shutdown() {\n     }\n \n     /**\n-     * Registers a subtype of this aggregate to support aggregate polymorphism. This aggregate will be able to handle\n-     * commands of provided {@code subtype} as well.\n+     * Registers a subtype of this aggregate to support aggregate polymorphism. Command Handlers defined on this subtype\n+     * will be considered part of this aggregate's handlers.\n      *\n      * @param subtype a subtype in this polymorphic hierarchy\n      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec172c443d3cfc643f2e4ade1b81629b78442d8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYxMDQ0Ng==", "bodyText": "There seem to be 2 different \"levels of expectation\" in the API. The model returns a Type based on the type from the event, and if that is not found, it asks for the default constructor from the AggregateModel. The latter seems a bit out of place: the Model assumes default constructors are used to instantiate empty aggregates. That assumption belongs in the GenericAggregateFactory.\nI suggest something along the lines of:\nnewInstance(aggregateModel().type(firstEvent.getType())\n                             .orElse(getAggregateType));\n\nIn that case, AggregateModel doesn't need to expose any default constructors. Just types.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r372610446", "createdAt": "2020-01-29T20:21:44Z", "author": {"login": "abuijze"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/GenericAggregateFactory.java", "diffHunk": "@@ -80,17 +84,21 @@ public GenericAggregateFactory(AggregateModel<T> aggregateModel) {\n     @SuppressWarnings({\"unchecked\"})\n     @Override\n     protected T doCreateAggregate(String aggregateIdentifier, DomainEventMessage firstEvent) {\n-        return aggregateModel.type(firstEvent.getType())\n-                             .map(this::newInstance)\n-                             .orElseThrow(() -> new IncompatibleAggregateException(format(\n-                                     \"The [%s] aggregate does not exist.\",\n-                                     firstEvent.getType())));\n+        return aggregateModel().type(firstEvent.getType())\n+                               .map(this::newInstance)\n+                               // backwards compatibility in cases firstEvent does not contain the aggregate type\n+                               .orElseGet(() -> aggregateModel().defaultConstructor(getAggregateType())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec172c443d3cfc643f2e4ade1b81629b78442d8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYxMjUzNw==", "bodyText": "Does subTypes strictly need to be a Set? The API would be friendlier is it's just a Collection or Iterable.\nOr perhaps have the static method defined as:\npublic static <T> AggregateModel<T> inspectAggregate(Class<T> aggregateType, Class<? extends T>... subtypes) \n\nInside that static method, you could add them to a set to have that set used throughout the rest of the inspector.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r372612537", "createdAt": "2020-01-29T20:26:25Z", "author": {"login": "abuijze"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/polymorphic/AbstractPolymorphicAggregateAnnotationCommandHandlerTestSuite.java", "diffHunk": "@@ -67,28 +69,30 @@ void setUp() {\n \n         transactionManager = new EntityManagerTransactionManager(entityManager);\n \n-        CommandBus commandBus = SimpleCommandBus.builder()\n-                                                .transactionManager(transactionManager)\n-                                                .build();\n+        commandBus = SimpleCommandBus.builder()\n+                                     .transactionManager(transactionManager)\n+                                     .build();\n         commandGateway = DefaultCommandGateway.builder()\n                                               .commandBus(commandBus)\n                                               .build();\n \n         AggregateModel<ParentAggregate> model = new AnnotatedAggregateMetaModelFactory()\n-                .createModel(ParentAggregate.class, new HashSet<>(asList(Child1Aggregate.class, Child2Aggregate.class)));\n+                .createModel(ParentAggregate.class,\n+                             new HashSet<>(asList(Child1Aggregate.class, Child2Aggregate.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec172c443d3cfc643f2e4ade1b81629b78442d8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYxNTA1Mg==", "bodyText": "As stated in another comment, I don't think the model should expose constructors. It forces implementation to use default constructors, instead of allowing AggregateFactory implementations to creates instances otherwise (e.g. using prototype Spring beans)", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r372615052", "createdAt": "2020-01-29T20:32:22Z", "author": {"login": "abuijze"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateModel.java", "diffHunk": "@@ -53,12 +54,32 @@\n     }\n \n     /**\n-     * Gets the declared type based on given {@code type}.\n+     * Gets the declared aggregate type based on given class {@code type}.\n      *\n      * @param type the type of the aggregate\n      * @return the declared aggregate type represented by {@link String}, if exists\n      */\n     default Optional<String> declaredType(Class<?> type) {\n         return Optional.empty();\n     }\n+\n+    /**\n+     * Gets a default constructor for a given class {@code type}.\n+     *\n+     * @param type the type of the aggregate\n+     * @return the default constructor of this {@code type}, if exists\n+     */\n+    default Optional<Constructor<?>> defaultConstructor(Class<?> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec172c443d3cfc643f2e4ade1b81629b78442d8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYxNTYzMQ==", "bodyText": "Same as above. If an AggregateFactory assumes default constructor, the Model should expose all the types declared in this Model, and the AggregateFactory should check for the presence of default constructors, where relevant.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r372615631", "createdAt": "2020-01-29T20:33:44Z", "author": {"login": "abuijze"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateModel.java", "diffHunk": "@@ -53,12 +54,32 @@\n     }\n \n     /**\n-     * Gets the declared type based on given {@code type}.\n+     * Gets the declared aggregate type based on given class {@code type}.\n      *\n      * @param type the type of the aggregate\n      * @return the declared aggregate type represented by {@link String}, if exists\n      */\n     default Optional<String> declaredType(Class<?> type) {\n         return Optional.empty();\n     }\n+\n+    /**\n+     * Gets a default constructor for a given class {@code type}.\n+     *\n+     * @param type the type of the aggregate\n+     * @return the default constructor of this {@code type}, if exists\n+     */\n+    default Optional<Constructor<?>> defaultConstructor(Class<?> type) {\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Checks whether all types in this aggregate have a default constructor (aggregate types defined by an interface\n+     * are excluded from this check).\n+     *\n+     * @return whether all types in this aggregate have a default constructor\n+     */\n+    default boolean allTypesHaveDefaultConstructor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec172c443d3cfc643f2e4ade1b81629b78442d8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYxNTg0Mg==", "bodyText": "Default constructor knowledge in model.... see other comments.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r372615842", "createdAt": "2020-01-29T20:34:21Z", "author": {"login": "abuijze"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -363,6 +365,18 @@ private void inspectFields() {\n             }\n         }\n \n+        private void initializeDefaultConstructors() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec172c443d3cfc643f2e4ade1b81629b78442d8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYxNzAzOA==", "bodyText": "If withSubtypes would accept a Collection of vararg, then the aggregate.getValue().getKeySet() could be added immediately, and it wouldn't break the fluent interface.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r372617038", "createdAt": "2020-01-29T20:37:17Z", "author": {"login": "abuijze"}, "path": "spring/src/main/java/org/axonframework/spring/config/SpringAxonAutoConfigurer.java", "diffHunk": "@@ -350,7 +350,7 @@ private void registerSagaBeanDefinitions(EventProcessingConfigurer configurer) {\n             Class<A> aggregateType = (Class<A>) aggregate.getKey();\n             Aggregate aggregateAnnotation = aggregateType.getAnnotation(Aggregate.class);\n             AggregateConfigurer<A> aggregateConf = AggregateConfigurer.defaultConfiguration(aggregateType);\n-            aggregate.getValue().keySet().forEach(aggregateConf::registerSubtype);\n+            aggregate.getValue().keySet().forEach(aggregateConf::withSubtype);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec172c443d3cfc643f2e4ade1b81629b78442d8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYxODE1Mw==", "bodyText": "If a model is provided, is registering the aggregateType still necessary?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r372618153", "createdAt": "2020-01-29T20:40:05Z", "author": {"login": "abuijze"}, "path": "test/src/main/java/org/axonframework/test/aggregate/AggregateTestFixture.java", "diffHunk": "@@ -480,6 +492,7 @@ private void registerAggregateCommandHandlers() {\n         if (!explicitCommandHandlersSet) {\n             AggregateAnnotationCommandHandler.Builder<T> builder = AggregateAnnotationCommandHandler.<T>builder()\n                     .aggregateType(aggregateType)\n+                    .aggregateModel(aggregateModel())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec172c443d3cfc643f2e4ade1b81629b78442d8"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYxOTA0NA==", "bodyText": "aggregateModel() is invoked twice. Consider invoking it once and passing the result twice to both methods.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r372619044", "createdAt": "2020-01-29T20:42:10Z", "author": {"login": "abuijze"}, "path": "test/src/main/java/org/axonframework/test/aggregate/AggregateTestFixture.java", "diffHunk": "@@ -495,7 +508,8 @@ private void registerAggregateCommandHandlers() {\n     private void ensureRepositoryConfiguration() {\n         if (repository == null) {\n             registerRepository(EventSourcingRepository.builder(aggregateType)\n-                                                      .aggregateFactory(new GenericAggregateFactory<>(aggregateType))\n+                                                      .aggregateModel(aggregateModel())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec172c443d3cfc643f2e4ade1b81629b78442d8"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYxOTY3NA==", "bodyText": "Class<? extends T>..., to be exact ;-)", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r372619674", "createdAt": "2020-01-29T20:43:43Z", "author": {"login": "abuijze"}, "path": "test/src/test/java/org/axonframework/test/aggregate/FixtureTest_Polymorphism.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.test.aggregate;\n+\n+import org.axonframework.commandhandling.CommandHandler;\n+import org.axonframework.eventhandling.DomainEventMessage;\n+import org.axonframework.eventhandling.GenericDomainEventMessage;\n+import org.axonframework.eventsourcing.EventSourcingHandler;\n+import org.axonframework.modelling.command.AggregateIdentifier;\n+import org.axonframework.modelling.command.TargetAggregateIdentifier;\n+import org.axonframework.test.matchers.PredicateMatcher;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.params.*;\n+import org.junit.jupiter.params.provider.*;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static org.axonframework.modelling.command.AggregateLifecycle.apply;\n+\n+/**\n+ * Tests {@link AggregateTestFixture} in polymorphic scenarios.\n+ *\n+ * @author Milan Savic\n+ */\n+class FixtureTest_Polymorphism {\n+\n+    private FixtureConfiguration<AggregateA> fixture;\n+\n+    @BeforeEach\n+    void setUp() {\n+        fixture = new AggregateTestFixture<>(AggregateA.class).registerSubtype(AggregateB.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczNDk4Mw=="}, "originalCommit": {"oid": "c98bb254179a21e37dce8d9a715578d819dad1fa"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ca2397f0d90462d9f0c452885f76bc12ea6bd90", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/8ca2397f0d90462d9f0c452885f76bc12ea6bd90", "committedDate": "2020-01-30T08:20:10Z", "message": "Update modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateModellingException.java\n\nCo-Authored-By: Steven van Beelen <steven.vanbeelen@axoniq.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d5a97f24b1c145bf338d16a4887369e8514abe1", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/7d5a97f24b1c145bf338d16a4887369e8514abe1", "committedDate": "2020-01-31T11:24:30Z", "message": "Review remarks."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4ODQ3NzQ2", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#pullrequestreview-358847746", "createdAt": "2020-02-14T10:31:18Z", "commit": {"oid": "7d5a97f24b1c145bf338d16a4887369e8514abe1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDozMToxOVrOFpyMZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDo0NTo0MVrOFpyl9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM1ODMxMA==", "bodyText": "It is somewhat nitty-gritty, but shouldn't this method be called withSubtypes (plural)?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r379358310", "createdAt": "2020-02-14T10:31:19Z", "author": {"login": "abuijze"}, "path": "config/src/main/java/org/axonframework/config/AggregateConfigurer.java", "diffHunk": "@@ -386,4 +392,28 @@ public void shutdown() {\n     public Class<A> aggregateType() {\n         return aggregate;\n     }\n+\n+    /**\n+     * Registers subtypes of this aggregate to support aggregate polymorphism. Command Handlers defined on this\n+     * subtypes will be considered part of this aggregate's handlers.\n+     *\n+     * @param subtypes subtypes in this polymorphic hierarchy\n+     * @return this configurer for fluent interfacing\n+     */\n+    @SafeVarargs\n+    public final AggregateConfigurer<A> withSubtype(Class<? extends A>... subtypes) {\n+        return withSubtype(Arrays.asList(subtypes));\n+    }\n+\n+    /**\n+     * Registers subtypes of this aggregate to support aggregate polymorphism. Command Handlers defined on this\n+     * subtypes will be considered part of this aggregate's handlers.\n+     *\n+     * @param subtypes subtypes in this polymorphic hierarchy\n+     * @return this configurer for fluent interfacing\n+     */\n+    public AggregateConfigurer<A> withSubtype(Collection<Class<? extends A>> subtypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5a97f24b1c145bf338d16a4887369e8514abe1"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM1OTAyMg==", "bodyText": "Can't we mention the actual type where the No-Arg Constructor couldn't be found? That would help the developer.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r379359022", "createdAt": "2020-02-14T10:32:51Z", "author": {"login": "abuijze"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/GenericAggregateFactory.java", "diffHunk": "@@ -50,14 +54,30 @@\n      *                                        constructor.\n      */\n     public GenericAggregateFactory(Class<T> aggregateType) {\n-        super(aggregateType);\n+        this(AnnotatedAggregateMetaModelFactory.inspectAggregate(aggregateType));\n         Assert.isFalse(Modifier.isAbstract(aggregateType.getModifiers()), () -> \"Given aggregateType may not be abstract\");\n-        try {\n-            this.constructor = ensureAccessible(aggregateType.getDeclaredConstructor());\n-        } catch (NoSuchMethodException e) {\n-            throw new IncompatibleAggregateException(format(\"The aggregate [%s] doesn't provide a no-arg constructor.\",\n-                                                            aggregateType.getSimpleName()), e);\n-        }\n+    }\n+\n+    /**\n+     * Initialize the AggregateFactory for creating instances of the given {@code aggregateModel}.\n+     *\n+     * @param aggregateModel the model of aggregate this factory creates instances of\n+     */\n+    public GenericAggregateFactory(AggregateModel<T> aggregateModel) {\n+        super(aggregateModel);\n+        aggregateModel.types()\n+                      .filter(type -> !Modifier.isInterface(type.getModifiers()))\n+                      .filter(type -> !Modifier.isAbstract(type.getModifiers()))\n+                      .forEach(type -> {\n+            try {\n+                Constructor<?> constructor = ensureAccessible(type.getDeclaredConstructor());\n+                constructors.put(type, constructor);\n+            } catch (NoSuchMethodException e) {\n+                throw new IncompatibleAggregateException(format(\n+                        \"The aggregate (or some of its subtypes) [%s] doesn't provide a no-arg constructor.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5a97f24b1c145bf338d16a4887369e8514abe1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM1OTc4NA==", "bodyText": "Does this test work without these changes? If so, I suggest not doing this change. If not, we probably have a backward compatibility issue.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r379359784", "createdAt": "2020-02-14T10:34:39Z", "author": {"login": "abuijze"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/commandhandling/EventPublicationOrderTest.java", "diffHunk": "@@ -63,7 +63,7 @@ void setUp() {\n     void testPublicationOrderIsMaintained_AggregateAdded() {\n         String aggregateId = UUID.randomUUID().toString();\n         GenericDomainEventMessage<StubAggregateCreatedEvent> event =\n-                new GenericDomainEventMessage<>(\"test\", aggregateId, 0, new StubAggregateCreatedEvent(aggregateId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5a97f24b1c145bf338d16a4887369e8514abe1"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM1OTg2MQ==", "bodyText": "Does this test work without these changes? If so, I suggest not doing this change. If not, we probably have a backward compatibility issue.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r379359861", "createdAt": "2020-02-14T10:34:48Z", "author": {"login": "abuijze"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/loopbacktest/synchronous/SynchronousLoopbackTest.java", "diffHunk": "@@ -62,7 +62,7 @@ void setUp() {\n         aggregateIdentifier = UUID.randomUUID().toString();\n         commandBus = SimpleCommandBus.builder().build();\n         eventStore = spy(EmbeddedEventStore.builder().storageEngine(new InMemoryEventStorageEngine()).build());\n-        eventStore.publish(new GenericDomainEventMessage<>(\"test\", aggregateIdentifier, 0,\n+        eventStore.publish(new GenericDomainEventMessage<>(CountingAggregate.class.getSimpleName(), aggregateIdentifier, 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5a97f24b1c145bf338d16a4887369e8514abe1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM2NDg1Mg==", "bodyText": "The AnnotatedAggregate class will only initialize the aggregate once. So if you initialize it with a Book instance, the test will actually have a second instance created, but that instance is then not part of the AnnotatedAggregate. It does look like all events are applied on the correct instance, but it's not really the way the AnnotatedAggregate should be used.\nInstead of passing an empty Book instance, use:\nAnnotatedAggregate<Book> bookAggregate = AnnotatedAggregate.initialize((Callable<Book>) () ->\n                                                                                       new Book(new CreateBookCommand(\"book1\")),\n                                                                               bookAggregateModel,\n                                                                               mockEventBus);", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r379364852", "createdAt": "2020-02-14T10:45:41Z", "author": {"login": "abuijze"}, "path": "integrationtests/src/test/java/org/axonframework/integrationtests/modelling/command/ComplexAggregateStructureTest.java", "diffHunk": "@@ -45,7 +45,7 @@ void testCommandsAreRoutedToCorrectEntity() throws Exception {\n         AggregateModel<Book> bookAggregateModel = AnnotatedAggregateMetaModelFactory.inspectAggregate(Book.class);\n         EventBus mockEventBus = SimpleEventBus.builder().build();\n         mockEventBus.subscribe(m -> m.forEach(i -> System.out.println(i.getPayloadType().getName())));\n-        AnnotatedAggregate<Book> bookAggregate = AnnotatedAggregate.initialize((Book) null,\n+        AnnotatedAggregate<Book> bookAggregate = AnnotatedAggregate.initialize(new Book(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1MTEyNA=="}, "originalCommit": {"oid": "bba39dc0b3a2ecbd2314afd88d63e56f2a846481"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c262ea2b6262d123b487261cc7c506507edec0d7", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/c262ea2b6262d123b487261cc7c506507edec0d7", "committedDate": "2020-02-14T13:05:31Z", "message": "Merge branch 'master' into aggregate-polymorphism"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1951383710708b7512ea2aeac93b68e5c768fc9", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/a1951383710708b7512ea2aeac93b68e5c768fc9", "committedDate": "2020-02-14T13:23:52Z", "message": "Review remarks."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NTczMTA2", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#pullrequestreview-359573106", "createdAt": "2020-02-17T08:59:43Z", "commit": {"oid": "a1951383710708b7512ea2aeac93b68e5c768fc9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODo1OTo0NFrOFqcnQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODo1OTo0NFrOFqcnQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1MzMxMg==", "bodyText": "I think this line should reference it's about several subtypes rather than a single one.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1317#discussion_r380053312", "createdAt": "2020-02-17T08:59:44Z", "author": {"login": "smcvb"}, "path": "test/src/main/java/org/axonframework/test/aggregate/FixtureConfiguration.java", "diffHunk": "@@ -96,6 +96,15 @@\n  */\n public interface FixtureConfiguration<T> {\n \n+    /**\n+     * Registers a subtype of this aggregate to support aggregate polymorphism. Command Handlers defined on this subtype", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1951383710708b7512ea2aeac93b68e5c768fc9"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1820, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}