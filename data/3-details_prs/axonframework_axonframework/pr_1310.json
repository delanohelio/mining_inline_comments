{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDEzMjc2", "number": 1310, "title": "Introduce an EventTypeUpcaster", "bodyText": "On the user group a request came in for insights into an upcaster which purely allowed for upcasting the event type. From the pseudo code I provided in, I went further and drafted an actual implementation.\nThus, this pull request introduced the EventTypeUpcaster. This is an implementation of the\nSingleEventUpcaster, which in the constructor requires the expected and upcasted payload type / revision.\nThe SingleEventUpcaster#canUpcast(IntermediateEventRepresentation) and SingleEventUpcaster#doUpcast(IntermediateEventRepresentation) call protected methods, which allow for more fine grained control by the end user.", "createdAt": "2020-01-07T14:24:29Z", "url": "https://github.com/AxonFramework/AxonFramework/pull/1310", "merged": true, "mergeCommit": {"oid": "cb324c2927e596600e95a961b81de07d15f02d9b"}, "closed": true, "closedAt": "2020-01-09T14:42:20Z", "author": {"login": "smcvb"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4BeasgH2gAyMzYwMDEzMjc2OmYwMjQ3OWY3YzkyNTE2N2QxN2Y4NDZkOTk1ZTI0NDhkODlhMDE4Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4pyZ1gFqTM0MDUxMDY5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f02479f7c925167d17f846d995e2448d89a01867", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/f02479f7c925167d17f846d995e2448d89a01867", "committedDate": "2020-01-07T14:17:49Z", "message": "Introduce an EventTypeUpcaster\n\nOn the user group somebody asked for my insights into an upcaster which\nwould only allow for upcasting the event type. As I already had the\nrough pseudo code available, I figured an actual implementation wouldn't\n hurt too. To this end an abstract implementation of the\n SingleEventUpcaster should be provided, with abstract function to\n retrieve the expected and upcasted payload type / revision. Other\n methods used during canUpcast and doUpcast should be made protected to\n allow overriding by the user\n\n#event-type-upcaster"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63aa0977f3a82bd1d162055728843477f2f3ad57", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/63aa0977f3a82bd1d162055728843477f2f3ad57", "committedDate": "2020-01-07T14:25:15Z", "message": "Use interface instead of concrete type\n\nThe test should utilize IntermediateEventRepresentation objects instead\nof InitialEventRepresentation for consistency\n\n#1310"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMTUyNjYy", "url": "https://github.com/AxonFramework/AxonFramework/pull/1310#pullrequestreview-340152662", "createdAt": "2020-01-08T21:21:25Z", "commit": {"oid": "63aa0977f3a82bd1d162055728843477f2f3ad57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMToyMToyNVrOFbkMmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMToyMToyNVrOFbkMmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0ODkyMw==", "bodyText": "Curious, why an abstract class and not a class where the expectedPayloadType, expectedRevision and their upcast countertypes are passed as constructor parameters?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1310#discussion_r364448923", "createdAt": "2020-01-08T21:21:25Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/serialization/upcasting/event/EventTypeUpcaster.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.serialization.upcasting.event;\n+\n+import org.axonframework.serialization.SerializedType;\n+import org.axonframework.serialization.SimpleSerializedType;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * A {@link SingleEventUpcaster} implementation which allows for type upcasting only. This could be used if the event's\n+ * class name did not follow the desired naming convention or if an event's package name has been adjusted.\n+ * <p>\n+ * Note that this upcaster <b>should not</b> be used to change the semantic meaning of an event. Such a requirement\n+ * points towards a new event type instead of adjusting an existing one.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.3\n+ */\n+public abstract class EventTypeUpcaster extends SingleEventUpcaster {\n+\n+    /**\n+     * Retrieve the expected event payload type this upcaster should react on.\n+     *\n+     * @return the expected event payload type this upcaster should react on\n+     */\n+    public abstract String expectedPayloadType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aa0977f3a82bd1d162055728843477f2f3ad57"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b686be691dfecb501637a415178e0ddb23f72b5d", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/b686be691dfecb501637a415178e0ddb23f72b5d", "committedDate": "2020-01-09T10:45:55Z", "message": "Use a constructor instead of abstract methods\n\nThe EventTypeUpcaster can be greatly simplified by having a constructor\nwith the required fields instead of making it an abstract class.\n\n#1310"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNTEwNjkz", "url": "https://github.com/AxonFramework/AxonFramework/pull/1310#pullrequestreview-340510693", "createdAt": "2020-01-09T13:15:52Z", "commit": {"oid": "b686be691dfecb501637a415178e0ddb23f72b5d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1816, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}