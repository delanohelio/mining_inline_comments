{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDQ0Mzk1", "number": 1333, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzozNjowM1rODb6lyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyMjo0NlrODcLTKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTk4MDkwOnYy", "diffSide": "RIGHT", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzozNjowM1rOFjrDpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzozNjowM1rOFjrDpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk0OTkyNA==", "bodyText": "Awww, this is so nice, javadoc on private method. But you're missing doc for parameter :P", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r372949924", "createdAt": "2020-01-30T13:36:03Z", "author": {"login": "m1l4n54v1c"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "diffHunk": "@@ -106,20 +112,51 @@ public void storeSnapshot(DomainEventMessage<?> snapshot) {\n      * @param failedEvent The EventMessage that could not be persisted\n      */\n     protected void handlePersistenceException(Exception exception, EventMessage<?> failedEvent) {\n-        String eventDescription;\n-        if (failedEvent instanceof DomainEventMessage<?>) {\n-            DomainEventMessage<?> failedDomainEvent = (DomainEventMessage<?>) failedEvent;\n-            eventDescription =\n-                    format(\"An event for aggregate [%s] at sequence [%d]\", failedDomainEvent.getAggregateIdentifier(),\n-                           failedDomainEvent.getSequenceNumber());\n-        } else {\n-            eventDescription = format(\"An event with identifier [%s]\", failedEvent.getIdentifier());\n-        }\n+        String eventDescription = buildExceptionMessage(failedEvent);\n         if (persistenceExceptionResolver != null && persistenceExceptionResolver.isDuplicateKeyViolation(exception)) {\n-            throw new ConcurrencyException(eventDescription + \" was already inserted\", exception);\n+            if (isFirstDomainEvent(failedEvent)) {\n+                throw new AggregateAlreadyExistsException(eventDescription, exception);\n+            }\n+            throw new ConcurrencyException(eventDescription, exception);\n         } else {\n-            throw new EventStoreException(eventDescription + \" could not be persisted\", exception);\n+            throw new EventStoreException(eventDescription, exception);\n+        }\n+    }\n+\n+    /**\n+     * Check whether or not this is the first event, which means we are trying to create the aggregate.\n+     *\n+     * @param failedEvent the event to be checked\n+     * @return true in case of first event, false otherwise\n+     */\n+    private boolean isFirstDomainEvent(EventMessage failedEvent) {\n+        if (failedEvent instanceof DomainEventMessage<?>) {\n+            return ((DomainEventMessage) failedEvent).getSequenceNumber() == 0L;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Build an exception message based on an EventMessage.\n+     *\n+     * @param failedEvent\n+     * @return the created exception message\n+     */\n+    private String buildExceptionMessage(EventMessage failedEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODY4NTgwOnYy", "diffSide": "RIGHT", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxMDowOFrOFkFL3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxMDowOFrOFkFL3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3ODAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Check whether or not this is the first event, which means we are trying to create the aggregate.\n          \n          \n            \n                 * Check whether or not this is the first event, which means we tried to create an aggregate through the given {@code failedEvent}.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373378013", "createdAt": "2020-01-31T09:10:08Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "diffHunk": "@@ -106,20 +112,51 @@ public void storeSnapshot(DomainEventMessage<?> snapshot) {\n      * @param failedEvent The EventMessage that could not be persisted\n      */\n     protected void handlePersistenceException(Exception exception, EventMessage<?> failedEvent) {\n-        String eventDescription;\n-        if (failedEvent instanceof DomainEventMessage<?>) {\n-            DomainEventMessage<?> failedDomainEvent = (DomainEventMessage<?>) failedEvent;\n-            eventDescription =\n-                    format(\"An event for aggregate [%s] at sequence [%d]\", failedDomainEvent.getAggregateIdentifier(),\n-                           failedDomainEvent.getSequenceNumber());\n-        } else {\n-            eventDescription = format(\"An event with identifier [%s]\", failedEvent.getIdentifier());\n-        }\n+        String eventDescription = buildExceptionMessage(failedEvent);\n         if (persistenceExceptionResolver != null && persistenceExceptionResolver.isDuplicateKeyViolation(exception)) {\n-            throw new ConcurrencyException(eventDescription + \" was already inserted\", exception);\n+            if (isFirstDomainEvent(failedEvent)) {\n+                throw new AggregateAlreadyExistsException(eventDescription, exception);\n+            }\n+            throw new ConcurrencyException(eventDescription, exception);\n         } else {\n-            throw new EventStoreException(eventDescription + \" could not be persisted\", exception);\n+            throw new EventStoreException(eventDescription, exception);\n+        }\n+    }\n+\n+    /**\n+     * Check whether or not this is the first event, which means we are trying to create the aggregate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODY4OTgyOnYy", "diffSide": "RIGHT", "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngineTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxMTo0MVrOFkFOaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxMTo0MVrOFkFOaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3ODY2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testUniqueKeyConstraintOnFirstEventIdentifier() {\n          \n          \n            \n                public void testUniqueKeyConstraintOnFirstEventIdentifierThrowsAggregateIdentifierAlreadyExistsException() {", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373378667", "createdAt": "2020-01-31T09:11:41Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngineTest.java", "diffHunk": "@@ -44,12 +45,21 @@\n \n     private AbstractEventStorageEngine testSubject;\n \n+    @DirtiesContext\n+    @Test\n+    public void testUniqueKeyConstraintOnFirstEventIdentifier() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODcwODE3OnYy", "diffSide": "RIGHT", "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngineTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxODozM1rOFkFZtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyMjoyMFrOFkFfpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MTU1OQ==", "bodyText": "Darn, of course, an aggregate's  uniqueness is guaranteed through the aggregate id and sequence number, meaning that the aggregate type does not matter at all. Hence, the exception message (which I suggested...) which adds the aggregate type is incorrect since you cannot be certain the event you are inserting is for the same aggregate type.\nI'll suggest a different message in the previous file, sorry for the inconvenience.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373381559", "createdAt": "2020-01-31T09:18:33Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngineTest.java", "diffHunk": "@@ -44,12 +45,21 @@\n \n     private AbstractEventStorageEngine testSubject;\n \n+    @DirtiesContext\n+    @Test\n+    public void testUniqueKeyConstraintOnFirstEventIdentifier() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MzA3OQ==", "bodyText": "This also means the exception should be named slightly different, as it's not the aggregate which already exists, it's the aggregate identifier.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373383079", "createdAt": "2020-01-31T09:22:20Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/test/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngineTest.java", "diffHunk": "@@ -44,12 +45,21 @@\n \n     private AbstractEventStorageEngine testSubject;\n \n+    @DirtiesContext\n+    @Test\n+    public void testUniqueKeyConstraintOnFirstEventIdentifier() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MTU1OQ=="}, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODcxMzg3OnYy", "diffSide": "RIGHT", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyMDo1NFrOFkFdXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyMDo1NFrOFkFdXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MjQ5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        eventDescription = format(\"An aggregate of type [%s] with id [%s] was already created.\",\n          \n          \n            \n                        eventDescription = format(\"Cannot reuse aggregate identifier [%s] to create aggregate [%s] since identifiers need to be unique.\",\n          \n      \n    \n    \n  \n\nThis also means the parameters to the format() method should be switched by the way.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373382493", "createdAt": "2020-01-31T09:20:54Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "diffHunk": "@@ -106,20 +112,51 @@ public void storeSnapshot(DomainEventMessage<?> snapshot) {\n      * @param failedEvent The EventMessage that could not be persisted\n      */\n     protected void handlePersistenceException(Exception exception, EventMessage<?> failedEvent) {\n-        String eventDescription;\n-        if (failedEvent instanceof DomainEventMessage<?>) {\n-            DomainEventMessage<?> failedDomainEvent = (DomainEventMessage<?>) failedEvent;\n-            eventDescription =\n-                    format(\"An event for aggregate [%s] at sequence [%d]\", failedDomainEvent.getAggregateIdentifier(),\n-                           failedDomainEvent.getSequenceNumber());\n-        } else {\n-            eventDescription = format(\"An event with identifier [%s]\", failedEvent.getIdentifier());\n-        }\n+        String eventDescription = buildExceptionMessage(failedEvent);\n         if (persistenceExceptionResolver != null && persistenceExceptionResolver.isDuplicateKeyViolation(exception)) {\n-            throw new ConcurrencyException(eventDescription + \" was already inserted\", exception);\n+            if (isFirstDomainEvent(failedEvent)) {\n+                throw new AggregateAlreadyExistsException(eventDescription, exception);\n+            }\n+            throw new ConcurrencyException(eventDescription, exception);\n         } else {\n-            throw new EventStoreException(eventDescription + \" could not be persisted\", exception);\n+            throw new EventStoreException(eventDescription, exception);\n+        }\n+    }\n+\n+    /**\n+     * Check whether or not this is the first event, which means we are trying to create the aggregate.\n+     *\n+     * @param failedEvent the event to be checked\n+     * @return true in case of first event, false otherwise\n+     */\n+    private boolean isFirstDomainEvent(EventMessage failedEvent) {\n+        if (failedEvent instanceof DomainEventMessage<?>) {\n+            return ((DomainEventMessage) failedEvent).getSequenceNumber() == 0L;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Build an exception message based on an EventMessage.\n+     *\n+     * @param failedEvent\n+     * @return the created exception message\n+     */\n+    private String buildExceptionMessage(EventMessage failedEvent) {\n+        String eventDescription = format(\"An event with identifier [%s] could not be persisted\",\n+                                         failedEvent.getIdentifier());\n+        if (isFirstDomainEvent(failedEvent)) {\n+            DomainEventMessage failedDomainEvent = (DomainEventMessage) failedEvent;\n+            eventDescription = format(\"An aggregate of type [%s] with id [%s] was already created.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODcxODQ4OnYy", "diffSide": "RIGHT", "path": "modelling/src/main/java/org/axonframework/modelling/command/AggregateAlreadyExistsException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyMjo0NlrOFkFgNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyMzoyMFrOFkFhMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MzIyMA==", "bodyText": "I think we should rename the exception to AggregateIdentifierAlreadyExistsException", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373383220", "createdAt": "2020-01-31T09:22:46Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/AggregateAlreadyExistsException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.axonframework.modelling.command;\n+\n+import org.axonframework.common.AxonNonTransientException;\n+\n+/**\n+ * Exception indicating that concurrent access to a repository was detected. Most likely, two threads were creating the\n+ * same aggregate.\n+ *\n+ * @author Lucas Campos\n+ * @since 4.3\n+ */\n+public class AggregateAlreadyExistsException extends AxonNonTransientException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MzQ3NA==", "bodyText": "I'd also change the javadoc accordingly to be specific it's not about an exact aggregate type which has been duplicated, but purely the identifier which is required to be unique.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1333#discussion_r373383474", "createdAt": "2020-01-31T09:23:20Z", "author": {"login": "smcvb"}, "path": "modelling/src/main/java/org/axonframework/modelling/command/AggregateAlreadyExistsException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.axonframework.modelling.command;\n+\n+import org.axonframework.common.AxonNonTransientException;\n+\n+/**\n+ * Exception indicating that concurrent access to a repository was detected. Most likely, two threads were creating the\n+ * same aggregate.\n+ *\n+ * @author Lucas Campos\n+ * @since 4.3\n+ */\n+public class AggregateAlreadyExistsException extends AxonNonTransientException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MzIyMA=="}, "originalCommit": {"oid": "d541502e33d54dd22c010793c66c8a39c7e25fd5"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3288, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}