{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MzkxNzMw", "number": 1345, "title": "[#891] Graceful Start up and Shutdown API", "bodyText": "This pull request introduces an API to support graceful start up and shutdown of an Axon application. This requires a phased approach for bot starting up and shutting down, where a single component might need to perform operations in several phases during either.\nTo that end, a @StartHandler and @ShutdownHandler annotation have been introduced to the axon-messaging module. When such an annotation is used, it's required to specify the phase (through for example the Phase utility class) in which the lifecycle handler should be called.\nBy default, start and shutdown handler annotated methods will be inspected when a Component registered to the Configurer is created. The inspection is performed by the LifecycleHandlerInspector, which registers the lifecycle methods to the Configuration.\nTo support this registration more clearly, the Configuration interface has been expanded with the onStart(int phase, LifecycleHandler startHandler) and onShutdown(int phase, LifecycleHandler shutdownHandler).\nAlong side providing the API, the annotation have also been used throughout Axon's infrastructure components. The following classes will through this PR participate in an orderly manor:\n\nAxonServerConnectionManager\nAxonServerCommandBus\nAxonServerEventStore\nAxonServerQueryBus\n@CommandHandler annotated methods on singletons, through the MessageHandlerRegistrar\n@CommandHandler annotated methods on Aggregates, through the AggregateConfigurer\nDistributedCommandBus\nEventProcessorControlService\nHeartbeatMonitor\n@QueryHandler annotated methods on singletons, through the MessageHandlerRegistrar\nQuartzEventScheduler\nQuartzDeadlineManager\nScheduledEventProcessorInfoSource\nSimpleEventScheduler\nSimpleDeadlineManager\nSubscribingEventProcessor\nTrackingEventProcessor\n\nNote that this change will also require adjustments in the JGroups and SpringCloud extension repositories.\nThis pull request resolves #891", "createdAt": "2020-02-12T16:05:21Z", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345", "merged": true, "mergeCommit": {"oid": "5af07ae5bf3a3f658885490db0e41f6f8a4aa8f6"}, "closed": true, "closedAt": "2020-02-19T13:46:33Z", "author": {"login": "smcvb"}, "timelineItems": {"totalCount": 63, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBBN0GAH2gAyMzc0MzkxNzMwOjg4MzY1NzI4ZTE4MWVhNTA4MTM3YTU2M2VkYzAxMDRiNjNjNDYzMGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcF17ZcgH2gAyMzc0MzkxNzMwOjI4Y2I5ODdmYmNkZTU3ZTQ4OWUwNTAzMDlhMDE0NTg2YWU4NDRiMmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "88365728e181ea508137a563edc0104b63c4630f", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/88365728e181ea508137a563edc0104b63c4630f", "committedDate": "2020-02-04T13:05:00Z", "message": "Introduce the lifecycle package\n\nIntroduce the lifecycle package, containing a StartHandler and\nShutdownHandler annotation. A utility class should be provided to\ncontain some phases, as well as an exception dedicated to a failing\nlifecycle handler method.\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23ddfe193889754242dc10d1b02d15484a597db7", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/23ddfe193889754242dc10d1b02d15484a597db7", "committedDate": "2020-02-04T13:36:09Z", "message": "Add the LifecycleHandler, it's registration and invocation\n\nAdjust the Configuration API to introduce an onStart/onShutdown which\ntakes in the LifecycleHandler functional interface. The collections of\nstart and shutdown handlers should become TreeMaps taking in the phase\nas the ordering parameter. A failure during start should result in\nthrowing a LifecycleHandlerInvocationException and initiations of the\nshutdown process. During shutdown the failure should be logged.\nLastly, init handlers no longer need to be phased, and start/shutdown\nhandlers added out of order should be given precedence.\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ac02f93144ef3c9f3d81fce100099aadbba26b1", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/2ac02f93144ef3c9f3d81fce100099aadbba26b1", "committedDate": "2020-02-04T13:38:30Z", "message": "Introduce the LifecycleHandlerInspector\n\nThe LifecycleHandlerInspector will inspect the instances created in the\nComponent for StartHandler/ShutdownHandler annotated methods without\nparameters. If those are present, they'll be registered to the\nConfiguration's onStart/onShutdown methods.\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fc92c92868392b9797ba4d468156fe5f62d0e84", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/3fc92c92868392b9797ba4d468156fe5f62d0e84", "committedDate": "2020-02-04T14:14:26Z", "message": "Drop phasing logic for registering command/query handlers\n\nThe Configurer should no longer allow phased registration of a\ncommand/query handler, as the phase is now defined on a\nStartHandler/ShutdownHandler.\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc8d15ec63b60d51d426321d2f07802703d93d45", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/bc8d15ec63b60d51d426321d2f07802703d93d45", "committedDate": "2020-02-04T14:18:00Z", "message": "Deprecate several methods from the ModuleConfiguration\n\nThe ModuleConfiguration currently partakes in the start/shutdown cycle\nentirely, by providing a start(), shutdown() and phase() method. All\nimpls of the ModuleConfiguration should however add LifecycleHandlers in\n the initialize method instead, to keep the Component +\n LifecycleHandlerInspector in charge of this task\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ccbf1dfee2778f2799f26a236b8e3289b115efd", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/4ccbf1dfee2778f2799f26a236b8e3289b115efd", "committedDate": "2020-02-04T14:20:43Z", "message": "Adjust AggregateConfigurer according to deprecated methods\n\nAs an implementation of the ModuleConfiguration, the AggregateConfigurer\n should no longer have a start/shutdown method, but instead register the\n aggregates command handlers as lifecycle handlers to the configuration\n directly. Also, the configureAggregate method can be delegated through\n to the registerModule method, since the DefaultConfigurer has no need\n to keep both a modules and aggregateConfigurers collection\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb302fb7efcf8d836018443a9f6d025a1725648a", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/eb302fb7efcf8d836018443a9f6d025a1725648a", "committedDate": "2020-02-04T14:23:30Z", "message": "Remove start/shutdown methods from the EventProcessingModule\n\nAs a ModuleConfiguration implementation, the EventProcessingModule\nshould register start/shutdown handlers in the initialize method. Due to\n a discrepancy with Axon's Spring config, we add a start handler to\n create the EventProcessors in the earliest phase.\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be5b9f03e17a6378c998dc21528cc835885506ae", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/be5b9f03e17a6378c998dc21528cc835885506ae", "committedDate": "2020-02-04T14:25:45Z", "message": "Remove remaining impls of deprecated ModuleConfiguration methods\n\nRemove all remaining implementations of ModuleConfiguration#start() and\nModuleConfiguration#shutdown() in favor of adding lifecycle handlers to\nthe Configuration upon initialization of the module\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36a768f03069ae3fd8dc5b96dedb597a326d82cd", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/36a768f03069ae3fd8dc5b96dedb597a326d82cd", "committedDate": "2020-02-04T14:26:22Z", "message": "Align AxonConfiguration with the new API\n\nAlign the AxonConfiguration with the new LifecycleHandler API\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b10c56512c7dcb97202d72b16691b453ec0bf646", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/b10c56512c7dcb97202d72b16691b453ec0bf646", "committedDate": "2020-02-04T14:29:27Z", "message": "Add tests, adjust tests and fix some ParameterResolver logic\n\nAll the API changes should not have any impact on the existing tests.\nHowever, Spring's wiring logic combined with the\nSpringBeanParameterResolverFactory caused for issues. Additionally,\ntests should be introduced to cover the changed lifecycle logic in the\nDefaultConfigurer, as well as the removal of init-ordering tests in the\nDefaultConfigurerTest class\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d55f22666fa20e2b90d40c1d10375b5637ada4a9", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/d55f22666fa20e2b90d40c1d10375b5637ada4a9", "committedDate": "2020-02-04T14:35:35Z", "message": "Add start/shutdown handlers to AS-Connector ModuleConfiguration comp's\n\nAdd StartHandler/ShutdownHandler annotations to AxonServerConnector\ncomponents build through ModuleConfigurations. Since this is additional\nlogic, they start last and shutdown first by using phase\nINBOUND_EVENT_CONNECTORS + 1\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b478d6284f91ee5a493479d7deae8418e3d2708", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/1b478d6284f91ee5a493479d7deae8418e3d2708", "committedDate": "2020-02-04T14:40:05Z", "message": "Add lifecycle handlers to deadline managers and event schedulers\n\nAdd lifecycle handlers to deadline managers and event schedulers in the\nINBOUND_EVENT_CONNECTORS phase\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f56db8079bbaf31f3171555b1b2f0e8ea1716d3e", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/f56db8079bbaf31f3171555b1b2f0e8ea1716d3e", "committedDate": "2020-02-04T15:52:01Z", "message": "Add lifecycle handlers to the EventProcessor implementations\n\nAdd lifecycle handler annotations to the start/shutdown of the\nSubscribingEventProcessor and TrackingEventProcessor. As the\nSubscribingEventProcessor technically belongs to the\n\"LOCAL_COMMAND_OR_QUERY_REGISTRATIONS\", rename that constant to general\nmessage handler registration\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f22b93b5237265cc5922f10c30179f8ecf8e497", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/3f22b93b5237265cc5922f10c30179f8ecf8e497", "committedDate": "2020-02-06T09:42:29Z", "message": "Maintain lifecycle state in the DefaultConfigurer\n\nThe DefaultConfigurer should maintain the lifecycle state, as otherwise\nwe cannot deduce whether a startHandler or shutdownHandler should be\ncalled immediately instead of just added to the map\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ee7961453248a5c891bdaaba36001e01da38bea", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/5ee7961453248a5c891bdaaba36001e01da38bea", "committedDate": "2020-02-06T09:42:42Z", "message": "Merge remote-tracking branch 'origin/master' into feature/891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bc406d53dccdf38f404639777ef76320436edb2", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/5bc406d53dccdf38f404639777ef76320436edb2", "committedDate": "2020-02-06T09:53:11Z", "message": "Change phase numbering\n\nChange the Phase numbers\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6f03a306dd1ebd03318a34e829de99471177aed", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/e6f03a306dd1ebd03318a34e829de99471177aed", "committedDate": "2020-02-06T10:17:16Z", "message": "Change LifecycleState from Life to Up\n\nChange LifecycleState from Life to Up\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf31629839fd86a97ed23823b8af9d601e3f0e8b", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/bf31629839fd86a97ed23823b8af9d601e3f0e8b", "committedDate": "2020-02-07T11:07:47Z", "message": "Merge remote-tracking branch 'origin/master' into feature/891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db5575c27173caba393907b9cbef035c8a035bd8", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/db5575c27173caba393907b9cbef035c8a035bd8", "committedDate": "2020-02-07T16:45:29Z", "message": "Added shutdown handlers to AxonServerEventStore."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd7c74a021212ff64a1c245a60ac7e676a542c4e", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/cd7c74a021212ff64a1c245a60ac7e676a542c4e", "committedDate": "2020-02-07T16:45:50Z", "message": "Merge remote-tracking branch 'origin/feature/891' into feature/891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "835180f9ba3816058f524ccc2cd3fe20429d0a50", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/835180f9ba3816058f524ccc2cd3fe20429d0a50", "committedDate": "2020-02-11T08:52:54Z", "message": "Graceful shutdown - unregister pending transactions and listening stream observer once they are completed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9febc7797528c8a57090a95fc6f82e16195c66fe", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/9febc7797528c8a57090a95fc6f82e16195c66fe", "committedDate": "2020-02-11T11:17:44Z", "message": "Graceful shutdown - DistributedCommandBus."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "614b274e1daf6774a132df2f13b09741d250955c", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/614b274e1daf6774a132df2f13b09741d250955c", "committedDate": "2020-02-11T13:03:17Z", "message": "Remove destroy handlers for AS Command and Query bus\n\nThe lifecycle operations will be added through the Start/ShutdownHandler\n annotations. Thus, the bean destroyMethod references and the disconnect\n calls no longer have to be added manually\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "971da59eec92d17dfc8879c47ee13c68a090c44e", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/971da59eec92d17dfc8879c47ee13c68a090c44e", "committedDate": "2020-02-11T14:16:50Z", "message": "Merge remote-tracking branch 'origin/master' into feature/891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5db1b544cd3946c191405ba9d2c939facc6878c9", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/5db1b544cd3946c191405ba9d2c939facc6878c9", "committedDate": "2020-02-12T14:34:11Z", "message": "Added a handler to CommandCallbackRepository to be invoked once a callback has been removed from the repository."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e784c7f933847517e7ad5749bf96d7443ef81dab", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/e784c7f933847517e7ad5749bf96d7443ef81dab", "committedDate": "2020-02-12T14:39:24Z", "message": "Introduce shutdown handlers\n\nIntroduce shutdown handlers in the AxonServerCommandBus. Firstly,\ncommand receiving from the outside world should be closed off, by\nunsubscribing all handlers and disconnecting the receiving end. In a\nfollow up phase, the sending of commands should be closed, being\nmindful of commands which are still in transit\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54bb2e4c06071a3fc1d25ccfec10f70b7a3c50fe", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/54bb2e4c06071a3fc1d25ccfec10f70b7a3c50fe", "committedDate": "2020-02-12T14:40:43Z", "message": "Introduce shutdown handlers\n\nIntroduce shutdown handlers in the AxonServerQueryBus. Firstly,\nquery receiving from the outside world should be closed off, by\nunsubscribing all handlers and disconnecting the receiving end. In a\nfollow up phase, the sending of queries should be closed, being\nmindful of queries which are still in transit\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d98eb3abc7c6c0bd0dd4dad270d4f57e02b5af0", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/7d98eb3abc7c6c0bd0dd4dad270d4f57e02b5af0", "committedDate": "2020-02-12T14:40:53Z", "message": "Merge remote-tracking branch 'origin/feature/891' into feature/891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26a2a0c6d60d468f30e2e12202dbedb123d1f125", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/26a2a0c6d60d468f30e2e12202dbedb123d1f125", "committedDate": "2020-02-12T14:44:23Z", "message": "Merge remote-tracking branch 'origin/master' into feature/891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41bd1422a22637018226baba4c1530c147003afa", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/41bd1422a22637018226baba4c1530c147003afa", "committedDate": "2020-02-12T14:47:34Z", "message": "Merge remote-tracking branch 'origin/master' into feature/891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d984819518ed796aefedbded6a13fa50e0234f32", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/d984819518ed796aefedbded6a13fa50e0234f32", "committedDate": "2020-02-12T16:08:22Z", "message": "Test fix\n\nThe tests might be fast, meaning that the command/query was already\nhandled since the shutdown was already resolved. Guard for this in the\ntests\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87d2f21799216859f6d3b46251ff805f15abe397", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/87d2f21799216859f6d3b46251ff805f15abe397", "committedDate": "2020-02-13T08:58:51Z", "message": "Add shutdown tests\n\nAdd shutdown tests cases\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c61363f349918fff089ea4647b4bbd629289730", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/8c61363f349918fff089ea4647b4bbd629289730", "committedDate": "2020-02-13T10:20:34Z", "message": "Removed a handler to CommandCallbackRepository to be invoked once a callback has been removed from the repository.\nAdded a return value to cancelling callbacks for a channel."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29eaa93b873df27ace981f3b6da418f620160e94", "author": {"user": {"login": "m1l4n54v1c", "name": "Milan Savic"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/29eaa93b873df27ace981f3b6da418f620160e94", "committedDate": "2020-02-13T10:20:53Z", "message": "Merge remote-tracking branch 'origin/feature/891' into feature/891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "778db2406b43c4ec4df729e96ded6ed69ece98ff", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/778db2406b43c4ec4df729e96ded6ed69ece98ff", "committedDate": "2020-02-13T13:54:28Z", "message": "Merge remote-tracking branch 'origin/master' into feature/891\n\n# Conflicts:\n#\taxon-server-connector/src/main/java/org/axonframework/axonserver/connector/query/AxonServerQueryBus.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0834d2ab67497ad7987112546c5e1dc7fa74daeb", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/0834d2ab67497ad7987112546c5e1dc7fa74daeb", "committedDate": "2020-02-13T14:58:45Z", "message": "Add some additional logging\n\nAs is suggested in issue #713, it would be beneficial to have some\nadditional debug logging during configuration, start up and shutdown. As\n the lifecycle handler approach is being revised in #891, adding logging\n along the way is relatively trivial. Hence, debug statements should be\n added when a component is created and configured, when a module\n configuration is configured, when start/shutdown handlers are being\n  called and in which phase of the cycle we are.\n\n#891 & #713"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dfa3b11e1824f932ecd6ac8cbf8f471b2e4efb3", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/2dfa3b11e1824f932ecd6ac8cbf8f471b2e4efb3", "committedDate": "2020-02-13T16:09:18Z", "message": "Slight logging improvements\n\nSlight logging improvements\n\n#891"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4ODYwMTMw", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#pullrequestreview-358860130", "createdAt": "2020-02-14T10:52:46Z", "commit": {"oid": "2dfa3b11e1824f932ecd6ac8cbf8f471b2e4efb3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb3388934ab774e306ca374e506623a209d19475", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/bb3388934ab774e306ca374e506623a209d19475", "committedDate": "2020-02-14T15:46:05Z", "message": "Introduce instruction component phase\n\nIntroduce a phase which is dedicated for starting up and shutting down\ncomponents which deal with instructions of components\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdaec2cba51b92411027b6b4c031b51e431a80f6", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/cdaec2cba51b92411027b6b4c031b51e431a80f6", "committedDate": "2020-02-14T15:47:01Z", "message": "Change shutdown phase\n\nChange the shutdown phase of the AxonServerConnectionManager to be the\nlast. Introduce a dedicated phase for this to be overly specific about\nit's use case\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c9bca1ef700a248a24719d046a0fea41f1835e1", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/6c9bca1ef700a248a24719d046a0fea41f1835e1", "committedDate": "2020-02-14T15:48:04Z", "message": "Introduce the ShutdownLatch\n\nIntroduce the ShutdownLatch class to be used to wait until a defined set\n of operations has completed\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7566c222c13c933738d2d4f1170e4c619bfa5b43", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/7566c222c13c933738d2d4f1170e4c619bfa5b43", "committedDate": "2020-02-14T15:55:32Z", "message": "Drop shutdown logic from the Axon Server Event Store\n\nDrop shutdown logic from the Axon Server Event Store, as this will stop\non it's own once all incoming channels for commands and queries have\nbeen closed off\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2be21d37af5cff71eaf60fd488c5faaa2b51d013", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/2be21d37af5cff71eaf60fd488c5faaa2b51d013", "committedDate": "2020-02-14T15:57:41Z", "message": "Streamline shutdown process\n\nThe shutdown process within the AxonServerCommandBus can be streamlined:\n-Use the ShutdownLatch i.o. the boolean shuttingDown and the list of\ncompletable futures. This is should be cleaner and more efficient\n-Drop the disconnectAsync call entirely, as the disconnect operation\nwill be pretty quick\n-Change the wait period on the CommandProcessor to first wait 5 seconds,\n and after that only 30 seconds more\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "020652e3db2c75909843c4e53fa12ae34771cec0", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/020652e3db2c75909843c4e53fa12ae34771cec0", "committedDate": "2020-02-14T15:58:17Z", "message": "Streamline shutdown process\n\nThe shutdown process within the AxonServerQueryBus can be streamlined:\n-Use the ShutdownLatch i.o. the boolean shuttingDown and the list of\ncompletable futures. This is should be cleaner and more efficient\n-Drop the disconnectAsync call entirely, as the disconnect operation\nwill be pretty quick\n-Change the wait period on the QueryProcessor to first wait 5 seconds,\n and after that only 30 seconds more\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/2ef829cce30a13105fe9c1d1398f2e0141393a13", "committedDate": "2020-02-14T15:58:56Z", "message": "Remove manual shutdown hook introduction\n\nRemove manual shutdown hook introduction of the\nAxonServerConnectionManager as this is now dealt with through the\nLifecycleHandlerInspector\n\n#891"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzYyOTQ4", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#pullrequestreview-359362948", "createdAt": "2020-02-15T19:45:56Z", "commit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "state": "DISMISSED", "comments": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxOTo0NTo1N1rOFqQU0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQyMToyNzoxN1rOFqQpNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTk4Nw==", "bodyText": "Suggestion: rename to ifShuttingDown, similar to Optional's ifPresent(...) method.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379851987", "createdAt": "2020-02-15T19:45:57Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/command/AxonServerCommandBus.java", "diffHunk": "@@ -276,6 +283,10 @@ private void unsubscribe() {\n \n     private <C, R> void doDispatch(CommandMessage<C> commandMessage,\n                                    CommandCallback<? super C, ? super R> commandCallback) {\n+        shutdownLatch.isShuttingDown(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjE3MA==", "bodyText": "the names increment and decrement don't seem to make much sense when reading the code. What about names like registerActivityStart, and finishActivityEnd? They're not perfect (open to better suggestions), but make more sense in the context of a shutdown latch.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379852170", "createdAt": "2020-02-15T19:49:43Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/command/AxonServerCommandBus.java", "diffHunk": "@@ -325,9 +337,11 @@ public void onCompleted() {\n                                                   ErrorCode.COMMAND_DISPATCH_ERROR.convert(errorMessage))\n                                           );\n                                       }\n+                                      shutdownLatch.decrement();\n                                   }\n                               }\n                     );\n+            shutdownLatch.increment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjI5Nw==", "bodyText": "Also, the increment may possibly be invoked before the decrement in this setup. Make sure increment is called before. The thing above that could cause trouble is acquiring the channel. I suggest moving that to a separate line, 'increment' therafter and then call the stub.\nTo be really safe (even without moving the channel acquisition), you can wrap the code in a try-catch, and have the catch decrement and rethrow.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379852297", "createdAt": "2020-02-15T19:52:10Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/command/AxonServerCommandBus.java", "diffHunk": "@@ -325,9 +337,11 @@ public void onCompleted() {\n                                                   ErrorCode.COMMAND_DISPATCH_ERROR.convert(errorMessage))\n                                           );\n                                       }\n+                                      shutdownLatch.decrement();\n                                   }\n                               }\n                     );\n+            shutdownLatch.increment();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjE3MA=="}, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjQyMw==", "bodyText": "Rename suggestion: 'initiateShutdown'. await is misleading, because it doesn't really wait (which is a good thing).", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379852423", "createdAt": "2020-02-15T19:54:21Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/command/AxonServerCommandBus.java", "diffHunk": "@@ -359,19 +373,33 @@ public Registration registerHandlerInterceptor(\n         return localSegment.registerHandlerInterceptor(handlerInterceptor);\n     }\n \n+    @Override\n+    public Registration registerDispatchInterceptor(\n+            MessageDispatchInterceptor<? super CommandMessage<?>> dispatchInterceptor) {\n+        return dispatchInterceptors.registerDispatchInterceptor(dispatchInterceptor);\n+    }\n+\n     /**\n-     * Disconnect the command bus from the Axon Server.\n+     * Disconnect the command bus for receiving commands from Axon Server, by unsubscribing all registered command\n+     * handlers. After this the connection will be closed, waiting until all command processing tasks have been\n+     * resolved. This shutdown operation is performed in the {@link Phase#INBOUND_COMMAND_OR_QUERY_CONNECTOR} phase.\n      */\n+    @ShutdownHandler(phase = Phase.INBOUND_COMMAND_OR_QUERY_CONNECTOR)\n     public void disconnect() {\n-        if (commandProcessor != null) {\n-            commandProcessor.disconnect();\n-        }\n+        commandProcessor.unsubscribeAndRemoveAll();\n+        commandProcessor.disconnect();\n     }\n \n-    @Override\n-    public Registration registerDispatchInterceptor(\n-            MessageDispatchInterceptor<? super CommandMessage<?>> dispatchInterceptor) {\n-        return dispatchInterceptors.registerDispatchInterceptor(dispatchInterceptor);\n+    /**\n+     * Shutdown the command bus asynchronously for dispatching commands to Axon Server. This process will wait for\n+     * dispatched commands which have not received a response yet. This shutdown operation is performed in the {@link\n+     * Phase#OUTBOUND_COMMAND_OR_QUERY_CONNECTORS} phase.\n+     *\n+     * @return a completable future which is resolved once all command dispatching activities are completed\n+     */\n+    @ShutdownHandler(phase = Phase.OUTBOUND_COMMAND_OR_QUERY_CONNECTORS)\n+    public CompletableFuture<Void> shutdownDispatching() {\n+        return shutdownLatch.await();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjcwNQ==", "bodyText": "I suppose this is where only an unsubscribe should happen, just disconnecting the remote source, but leaving the internal state intact. The actual \"removal\" (=local unsubscription) can actually wait till the next phase (OUTBOUND_COMMAND_OR_QUERY_CONNECTORS in this case). This would allow for commands already in transit to still be processed, rather than cutting those off.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379852705", "createdAt": "2020-02-15T19:59:21Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/command/AxonServerCommandBus.java", "diffHunk": "@@ -359,19 +373,33 @@ public Registration registerHandlerInterceptor(\n         return localSegment.registerHandlerInterceptor(handlerInterceptor);\n     }\n \n+    @Override\n+    public Registration registerDispatchInterceptor(\n+            MessageDispatchInterceptor<? super CommandMessage<?>> dispatchInterceptor) {\n+        return dispatchInterceptors.registerDispatchInterceptor(dispatchInterceptor);\n+    }\n+\n     /**\n-     * Disconnect the command bus from the Axon Server.\n+     * Disconnect the command bus for receiving commands from Axon Server, by unsubscribing all registered command\n+     * handlers. After this the connection will be closed, waiting until all command processing tasks have been\n+     * resolved. This shutdown operation is performed in the {@link Phase#INBOUND_COMMAND_OR_QUERY_CONNECTOR} phase.\n      */\n+    @ShutdownHandler(phase = Phase.INBOUND_COMMAND_OR_QUERY_CONNECTOR)\n     public void disconnect() {\n-        if (commandProcessor != null) {\n-            commandProcessor.disconnect();\n-        }\n+        commandProcessor.unsubscribeAndRemoveAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MjgwOQ==", "bodyText": "Might be my math skills, but 5 + 20 != 35 ;-)", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379852809", "createdAt": "2020-02-15T20:01:23Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/command/AxonServerCommandBus.java", "diffHunk": "@@ -832,8 +859,22 @@ void disconnect() {\n             if (subscriberStreamObserver != null) {\n                 subscriberStreamObserver.onCompleted();\n             }\n-            running = false;\n+\n             commandExecutor.shutdown();\n+            try {\n+                if (!commandExecutor.awaitTermination(5, TimeUnit.SECONDS)) {\n+                    logger.warn(\"Awaited Command Bus termination for 5 seconds. Wait period extended by 30 seconds.\");\n+                }\n+                if (!commandExecutor.awaitTermination(20, TimeUnit.SECONDS)) {\n+                    logger.warn(\"Awaited Command Bus termination for 35 seconds. Will shutdown forcefully.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MzQ5Nw==", "bodyText": "Make sure increment is guaranteed to be invoked before decrement.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379853497", "createdAt": "2020-02-15T20:14:03Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/query/AxonServerQueryBus.java", "diffHunk": "@@ -324,48 +328,53 @@ private void onApplicationDisconnected(String context) {\n                                @Override\n                                public void onNext(QueryResponse queryResponse) {\n                                    logger.debug(\"Received query response [{}]\", queryResponse);\n-                                   completableFuture.complete(serializer.deserializeResponse(queryResponse, queryMessage.getResponseType()));\n+                                   queryTransaction.complete(\n+                                           serializer.deserializeResponse(queryResponse, queryMessage.getResponseType())\n+                                   );\n                                }\n \n                                @Override\n                                public void onError(Throwable throwable) {\n-                                   if (logger.isDebugEnabled()) {\n-                                       logger.debug(\"Received error while waiting for first response\", throwable);\n-                                   }\n-                                   completableFuture.completeExceptionally(\n+                                   logger.debug(\"Received error while waiting for first response\", throwable);\n+                                   queryTransaction.completeExceptionally(\n                                            ErrorCode.QUERY_DISPATCH_ERROR.convert(\n                                                    configuration.getClientId(), throwable\n                                            )\n                                    );\n+                                   shutdownLatch.decrement();\n                                }\n \n                                @Override\n                                public void onCompleted() {\n-                                   if (completableFuture.isDone()) {\n-                                       return;\n+                                   if (!queryTransaction.isDone()) {\n+                                       queryTransaction.completeExceptionally(\n+                                               ErrorCode.QUERY_DISPATCH_ERROR.convert(\n+                                                       ErrorMessage.newBuilder()\n+                                                                   .setMessage(\"No result from query executor\")\n+                                                                   .build()\n+                                               )\n+                                       );\n                                    }\n-\n-                                   completableFuture.completeExceptionally(\n-                                           ErrorCode.QUERY_DISPATCH_ERROR.convert(\n-                                                   ErrorMessage.newBuilder()\n-                                                               .setMessage(\"No result from query executor\")\n-                                                               .build()\n-                                           ));\n+                                   shutdownLatch.decrement();\n                                }\n                            });\n+            shutdownLatch.increment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MzUyNA==", "bodyText": "Suggestion: assertRunning or assertNotShuttingDown", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379853524", "createdAt": "2020-02-15T20:14:56Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/query/AxonServerQueryBus.java", "diffHunk": "@@ -324,48 +328,53 @@ private void onApplicationDisconnected(String context) {\n                                @Override\n                                public void onNext(QueryResponse queryResponse) {\n                                    logger.debug(\"Received query response [{}]\", queryResponse);\n-                                   completableFuture.complete(serializer.deserializeResponse(queryResponse, queryMessage.getResponseType()));\n+                                   queryTransaction.complete(\n+                                           serializer.deserializeResponse(queryResponse, queryMessage.getResponseType())\n+                                   );\n                                }\n \n                                @Override\n                                public void onError(Throwable throwable) {\n-                                   if (logger.isDebugEnabled()) {\n-                                       logger.debug(\"Received error while waiting for first response\", throwable);\n-                                   }\n-                                   completableFuture.completeExceptionally(\n+                                   logger.debug(\"Received error while waiting for first response\", throwable);\n+                                   queryTransaction.completeExceptionally(\n                                            ErrorCode.QUERY_DISPATCH_ERROR.convert(\n                                                    configuration.getClientId(), throwable\n                                            )\n                                    );\n+                                   shutdownLatch.decrement();\n                                }\n \n                                @Override\n                                public void onCompleted() {\n-                                   if (completableFuture.isDone()) {\n-                                       return;\n+                                   if (!queryTransaction.isDone()) {\n+                                       queryTransaction.completeExceptionally(\n+                                               ErrorCode.QUERY_DISPATCH_ERROR.convert(\n+                                                       ErrorMessage.newBuilder()\n+                                                                   .setMessage(\"No result from query executor\")\n+                                                                   .build()\n+                                               )\n+                                       );\n                                    }\n-\n-                                   completableFuture.completeExceptionally(\n-                                           ErrorCode.QUERY_DISPATCH_ERROR.convert(\n-                                                   ErrorMessage.newBuilder()\n-                                                               .setMessage(\"No result from query executor\")\n-                                                               .build()\n-                                           ));\n+                                   shutdownLatch.decrement();\n                                }\n                            });\n+            shutdownLatch.increment();\n         } catch (Exception e) {\n             logger.debug(\"There was a problem issuing a query {}.\", interceptedQuery, e);\n-            completableFuture.completeExceptionally(\n+            queryTransaction.completeExceptionally(\n                     ErrorCode.QUERY_DISPATCH_ERROR.convert(configuration.getClientId(), e)\n             );\n         }\n-        return completableFuture;\n+\n+        return queryTransaction;\n     }\n \n     @Override\n     public <Q, R> Stream<QueryResponseMessage<R>> scatterGather(QueryMessage<Q, R> queryMessage,\n                                                                 long timeout,\n                                                                 TimeUnit timeUnit) {\n+        validateShutdown(\"scatter-gather queries\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MzU1Mg==", "bodyText": "Same: ensure incrementing before decrementing", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379853552", "createdAt": "2020-02-15T20:15:40Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/query/AxonServerQueryBus.java", "diffHunk": "@@ -395,17 +406,19 @@ public void onNext(QueryResponse queryResponse) {\n                            @Override\n                            public void onError(Throwable throwable) {\n                                if (!isDeadlineExceeded(throwable)) {\n-                                   logger.info(\"Received error while waiting for responses\",\n-                                               throwable);\n+                                   logger.info(\"Received error while waiting for responses\", throwable);\n                                }\n                                resultSpliterator.cancel(throwable);\n+                               shutdownLatch.decrement();\n                            }\n \n                            @Override\n                            public void onCompleted() {\n                                resultSpliterator.cancel(null);\n+                               shutdownLatch.decrement();\n                            }\n                        });\n+        shutdownLatch.increment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MzU5Mw==", "bodyText": "25 or 35?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379853593", "createdAt": "2020-02-15T20:16:31Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/query/AxonServerQueryBus.java", "diffHunk": "@@ -720,33 +783,24 @@ public void unsubscribe(String queryName, Type responseType, String componentNam\n             }\n         }\n \n-        private void clearOutboundStream() {\n-            StreamObserver<QueryProviderOutbound> out = outboundStreamObserver;\n-            if (out != null) {\n-                outboundStreamObserver = null;\n-                try {\n-                    subscribedQueries.forEach((queryDefinition, handlerSet) -> out.onNext(\n-                            QueryProviderOutbound.newBuilder()\n-                                                 .setUnsubscribe(buildQuerySubscription(queryDefinition, 1))\n-                                                 .build()\n-                    ));\n-                    out.onCompleted();\n-                } catch (Exception e) {\n-                    // This exception is ignored\n-                }\n-            }\n-        }\n-\n         void disconnect() {\n             running = false;\n-            clearOutboundStream();\n+\n             queryExecutor.shutdown();\n             try {\n-                queryExecutor.awaitTermination(5, TimeUnit.SECONDS);\n+                if (!queryExecutor.awaitTermination(5, TimeUnit.SECONDS)) {\n+                    logger.warn(\"Awaited Query Bus termination for 5 seconds. Wait period extended by 30 seconds.\");\n+                }\n+                if (!queryExecutor.awaitTermination(20, TimeUnit.SECONDS)) {\n+                    logger.warn(\"Awaited Query Bus termination for 35 seconds. Will shutdown forcefully.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 313}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MzYyMA==", "bodyText": "30 or 20?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379853620", "createdAt": "2020-02-15T20:16:41Z", "author": {"login": "abuijze"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/query/AxonServerQueryBus.java", "diffHunk": "@@ -720,33 +783,24 @@ public void unsubscribe(String queryName, Type responseType, String componentNam\n             }\n         }\n \n-        private void clearOutboundStream() {\n-            StreamObserver<QueryProviderOutbound> out = outboundStreamObserver;\n-            if (out != null) {\n-                outboundStreamObserver = null;\n-                try {\n-                    subscribedQueries.forEach((queryDefinition, handlerSet) -> out.onNext(\n-                            QueryProviderOutbound.newBuilder()\n-                                                 .setUnsubscribe(buildQuerySubscription(queryDefinition, 1))\n-                                                 .build()\n-                    ));\n-                    out.onCompleted();\n-                } catch (Exception e) {\n-                    // This exception is ignored\n-                }\n-            }\n-        }\n-\n         void disconnect() {\n             running = false;\n-            clearOutboundStream();\n+\n             queryExecutor.shutdown();\n             try {\n-                queryExecutor.awaitTermination(5, TimeUnit.SECONDS);\n+                if (!queryExecutor.awaitTermination(5, TimeUnit.SECONDS)) {\n+                    logger.warn(\"Awaited Query Bus termination for 5 seconds. Wait period extended by 30 seconds.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 310}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NTM3OA==", "bodyText": "Consider renaming this method. Something like disconnect, initiateShutdown", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379855378", "createdAt": "2020-02-15T20:51:49Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/commandhandling/distributed/CommandBusConnector.java", "diffHunk": "@@ -96,4 +97,13 @@\n     default Optional<CommandBus> localSegment() {\n         return Optional.empty();\n     }\n+\n+    /**\n+     * Stops sending new commands.\n+     *\n+     * @return a Completable Future indicating that all previously sent commands are completed\n+     */\n+    default CompletableFuture<Void> stopSendingCommands() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NTY0MQ==", "bodyText": "Suggest renaming to disconnect. Why is a \"stopSending\" (= outbound) annotated with a phase for INBOUND?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379855641", "createdAt": "2020-02-15T20:57:44Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/commandhandling/distributed/DistributedCommandBus.java", "diffHunk": "@@ -101,6 +104,24 @@ protected DistributedCommandBus(Builder builder) {\n         this.defaultCommandCallback = builder.defaultCommandCallback;\n     }\n \n+    /**\n+     * Shutdown handler that unsubscribes all command handlers subscribed via this Distributed Command Bus.\n+     */\n+    @ShutdownHandler(phase = Phase.OUTBOUND_COMMAND_OR_QUERY_CONNECTORS)\n+    public void unsubscribeCommandHandlers() {\n+        commandRouter.updateMembership(loadFactor, DenyAll.INSTANCE);\n+    }\n+\n+    /**\n+     * Shutdown handler that stops sending new commands.\n+     *\n+     * @return a Completable Future indicating that all previously sent commands are completed\n+     */\n+    @ShutdownHandler(phase = Phase.INBOUND_COMMAND_OR_QUERY_CONNECTOR)\n+    public CompletableFuture<Void> stopSendingCommands() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjAzNQ==", "bodyText": "I suggest creating two different fields for Commands and Queries, even though they have the same value.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379856035", "createdAt": "2020-02-15T21:05:35Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/lifecycle/Phase.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.lifecycle;\n+\n+/**\n+ * Utility class containing constants which can be used as input for the {@link StartHandler} and {@link\n+ * ShutdownHandler} annotations.\n+ *\n+ * @author Steven van Beelen\n+ * @see StartHandler\n+ * @see ShutdownHandler\n+ * @since 4.3\n+ */\n+public abstract class Phase {\n+\n+    private Phase() {\n+        // Utility class\n+    }\n+\n+    /**\n+     * Phase to start or shutdown all external connections.\n+     */\n+    public static final int EXTERNAL_CONNECTIONS = Integer.MIN_VALUE >> 4;\n+    /**\n+     * Phase to register or cancel the registration of any local message handler.\n+     */\n+    public static final int LOCAL_MESSAGE_HANDLER_REGISTRATIONS = 0;\n+    /**\n+     * Phase to start or shutdown inbound command and/or query connectors. It is targeted towards connectors which\n+     * receive commands and/or queries from external applications.\n+     */\n+    public static final int INBOUND_COMMAND_OR_QUERY_CONNECTOR = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjIzOA==", "bodyText": "This field needs to be volatile, to be thread-safe", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379856238", "createdAt": "2020-02-15T21:09:09Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/lifecycle/ShutdownLatch.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.axonframework.lifecycle;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A latch implementation to be used in shutdown scenarios. Operations to wait for can be added by invoking {@link\n+ * #increment()}. An added operation should always be removed through {@link #decrement()} once it has completed, as\n+ * {@link #await()} will otherwise block indefinitely. If the latch is waited on through {@link #await()}, new\n+ * operations can no longer be added.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.3\n+ */\n+public class ShutdownLatch {\n+\n+    private final AtomicInteger operationCounter = new AtomicInteger(0);\n+    private CompletableFuture<Void> latch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjM4MA==", "bodyText": "To make this method completely safe in its usage, it's best if this method returns a \"handle\" that can be closed to indicate that a certain workload has been finished. The method signature could look like:\npublic ActivityHandle registerActivity(). ActivityHandler would have a single method: void end().\nThis implementation of ActivtyHandle.end() could also verify that it wasn't invoked more than once. Decrementing the counter more than incrementing it can be problematic.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379856380", "createdAt": "2020-02-15T21:12:05Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/lifecycle/ShutdownLatch.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.axonframework.lifecycle;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A latch implementation to be used in shutdown scenarios. Operations to wait for can be added by invoking {@link\n+ * #increment()}. An added operation should always be removed through {@link #decrement()} once it has completed, as\n+ * {@link #await()} will otherwise block indefinitely. If the latch is waited on through {@link #await()}, new\n+ * operations can no longer be added.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.3\n+ */\n+public class ShutdownLatch {\n+\n+    private final AtomicInteger operationCounter = new AtomicInteger(0);\n+    private CompletableFuture<Void> latch;\n+\n+    /**\n+     * Add an operation this latch should wait on before opening up. If this operation is called whilst {@link #await()}\n+     * is already called an {@link IllegalStateException} will be thrown.\n+     *\n+     * @throws IllegalStateException if {@link #await()} has been called prior to invoking this method\n+     */\n+    public void increment() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjQ2OA==", "bodyText": "This message won't mean much to people who are not familiar with the implementation details. Consider throwing a \"ShutdownInProgressException\" and/or change the message to \"Cannot start activity. Shutdown in progress.\"", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379856468", "createdAt": "2020-02-15T21:13:48Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/lifecycle/ShutdownLatch.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.axonframework.lifecycle;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A latch implementation to be used in shutdown scenarios. Operations to wait for can be added by invoking {@link\n+ * #increment()}. An added operation should always be removed through {@link #decrement()} once it has completed, as\n+ * {@link #await()} will otherwise block indefinitely. If the latch is waited on through {@link #await()}, new\n+ * operations can no longer be added.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.3\n+ */\n+public class ShutdownLatch {\n+\n+    private final AtomicInteger operationCounter = new AtomicInteger(0);\n+    private CompletableFuture<Void> latch;\n+\n+    /**\n+     * Add an operation this latch should wait on before opening up. If this operation is called whilst {@link #await()}\n+     * is already called an {@link IllegalStateException} will be thrown.\n+     *\n+     * @throws IllegalStateException if {@link #await()} has been called prior to invoking this method\n+     */\n+    public void increment() {\n+        if (isShuttingDown()) {\n+            throw new IllegalStateException(\"No new operations can be added, since this latched is waited for.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjUwNQ==", "bodyText": "See above. Consider moving this method to a \"Handle\".", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379856505", "createdAt": "2020-02-15T21:14:28Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/lifecycle/ShutdownLatch.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.axonframework.lifecycle;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A latch implementation to be used in shutdown scenarios. Operations to wait for can be added by invoking {@link\n+ * #increment()}. An added operation should always be removed through {@link #decrement()} once it has completed, as\n+ * {@link #await()} will otherwise block indefinitely. If the latch is waited on through {@link #await()}, new\n+ * operations can no longer be added.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.3\n+ */\n+public class ShutdownLatch {\n+\n+    private final AtomicInteger operationCounter = new AtomicInteger(0);\n+    private CompletableFuture<Void> latch;\n+\n+    /**\n+     * Add an operation this latch should wait on before opening up. If this operation is called whilst {@link #await()}\n+     * is already called an {@link IllegalStateException} will be thrown.\n+     *\n+     * @throws IllegalStateException if {@link #await()} has been called prior to invoking this method\n+     */\n+    public void increment() {\n+        if (isShuttingDown()) {\n+            throw new IllegalStateException(\"No new operations can be added, since this latched is waited for.\");\n+        }\n+        operationCounter.incrementAndGet();\n+    }\n+\n+    /**\n+     * Remove an operation this latch waits on. This method should be invoked once the added operations has ended. This\n+     * method will complete the latch if {@link #await()} has been invoked abd all operations are removed.\n+     */\n+    public void decrement() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjU4NA==", "bodyText": "This effectively initiates the shutdown process. Consider renaming to initiateShutdown", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379856584", "createdAt": "2020-02-15T21:15:53Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/lifecycle/ShutdownLatch.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.axonframework.lifecycle;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A latch implementation to be used in shutdown scenarios. Operations to wait for can be added by invoking {@link\n+ * #increment()}. An added operation should always be removed through {@link #decrement()} once it has completed, as\n+ * {@link #await()} will otherwise block indefinitely. If the latch is waited on through {@link #await()}, new\n+ * operations can no longer be added.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.3\n+ */\n+public class ShutdownLatch {\n+\n+    private final AtomicInteger operationCounter = new AtomicInteger(0);\n+    private CompletableFuture<Void> latch;\n+\n+    /**\n+     * Add an operation this latch should wait on before opening up. If this operation is called whilst {@link #await()}\n+     * is already called an {@link IllegalStateException} will be thrown.\n+     *\n+     * @throws IllegalStateException if {@link #await()} has been called prior to invoking this method\n+     */\n+    public void increment() {\n+        if (isShuttingDown()) {\n+            throw new IllegalStateException(\"No new operations can be added, since this latched is waited for.\");\n+        }\n+        operationCounter.incrementAndGet();\n+    }\n+\n+    /**\n+     * Remove an operation this latch waits on. This method should be invoked once the added operations has ended. This\n+     * method will complete the latch if {@link #await()} has been invoked abd all operations are removed.\n+     */\n+    public void decrement() {\n+        if (operationCounter.decrementAndGet() <= 0 && isShuttingDown()) {\n+            latch.complete(null);\n+        }\n+    }\n+\n+    /**\n+     * Check whether this {@link ShutdownLatch} is waited on. The exception retrieved from the {@code exceptionSupplier}\n+     * will be thrown if this latch is shutting down.\n+     *\n+     * @param exceptionSupplier a {@link Supplier} of a {@link RuntimeException} to throw if this latch is waited on\n+     */\n+    public void isShuttingDown(Supplier<RuntimeException> exceptionSupplier) {\n+        if (isShuttingDown()) {\n+            throw exceptionSupplier.get();\n+        }\n+    }\n+\n+    /**\n+     * Check whether this {@link ShutdownLatch} is waited on.\n+     *\n+     * @return {@code true} if the latch is waited on, {@code false} otherwise\n+     */\n+    public boolean isShuttingDown() {\n+        return latch != null;\n+    }\n+\n+    /**\n+     * Wait for this latch to complete all the operations given to it through {@link #increment()}.\n+     *\n+     * @return a {@link CompletableFuture} which completes once all operations are done\n+     */\n+    public CompletableFuture<Void> await() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjY3Mw==", "bodyText": "Why is this necessary? Components already have the \"freedom\" to wait for the CompletableFuture to complete with a timeout.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379856673", "createdAt": "2020-02-15T21:17:14Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/lifecycle/ShutdownLatch.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.axonframework.lifecycle;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A latch implementation to be used in shutdown scenarios. Operations to wait for can be added by invoking {@link\n+ * #increment()}. An added operation should always be removed through {@link #decrement()} once it has completed, as\n+ * {@link #await()} will otherwise block indefinitely. If the latch is waited on through {@link #await()}, new\n+ * operations can no longer be added.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.3\n+ */\n+public class ShutdownLatch {\n+\n+    private final AtomicInteger operationCounter = new AtomicInteger(0);\n+    private CompletableFuture<Void> latch;\n+\n+    /**\n+     * Add an operation this latch should wait on before opening up. If this operation is called whilst {@link #await()}\n+     * is already called an {@link IllegalStateException} will be thrown.\n+     *\n+     * @throws IllegalStateException if {@link #await()} has been called prior to invoking this method\n+     */\n+    public void increment() {\n+        if (isShuttingDown()) {\n+            throw new IllegalStateException(\"No new operations can be added, since this latched is waited for.\");\n+        }\n+        operationCounter.incrementAndGet();\n+    }\n+\n+    /**\n+     * Remove an operation this latch waits on. This method should be invoked once the added operations has ended. This\n+     * method will complete the latch if {@link #await()} has been invoked abd all operations are removed.\n+     */\n+    public void decrement() {\n+        if (operationCounter.decrementAndGet() <= 0 && isShuttingDown()) {\n+            latch.complete(null);\n+        }\n+    }\n+\n+    /**\n+     * Check whether this {@link ShutdownLatch} is waited on. The exception retrieved from the {@code exceptionSupplier}\n+     * will be thrown if this latch is shutting down.\n+     *\n+     * @param exceptionSupplier a {@link Supplier} of a {@link RuntimeException} to throw if this latch is waited on\n+     */\n+    public void isShuttingDown(Supplier<RuntimeException> exceptionSupplier) {\n+        if (isShuttingDown()) {\n+            throw exceptionSupplier.get();\n+        }\n+    }\n+\n+    /**\n+     * Check whether this {@link ShutdownLatch} is waited on.\n+     *\n+     * @return {@code true} if the latch is waited on, {@code false} otherwise\n+     */\n+    public boolean isShuttingDown() {\n+        return latch != null;\n+    }\n+\n+    /**\n+     * Wait for this latch to complete all the operations given to it through {@link #increment()}.\n+     *\n+     * @return a {@link CompletableFuture} which completes once all operations are done\n+     */\n+    public CompletableFuture<Void> await() {\n+        latch = new CompletableFuture<>();\n+        return latch;\n+    }\n+\n+    /**\n+     * Wait for this latch to complete all the operations given to it through {@link #increment()}. If the given {@code\n+     * duration} has passed the returned {@link CompletableFuture} will be completed exceptionally.\n+     *\n+     * @param duration the time to wait for this latch to complete\n+     * @return a {@link CompletableFuture} which completes successfully once all operations are done or exceptionally\n+     * after the given {@code duration}\n+     */\n+    public CompletableFuture<Void> await(Duration duration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1Njc5OQ==", "bodyText": "Strictly speaking, this is a backward-incompatible change...", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379856799", "createdAt": "2020-02-15T21:19:48Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/messaging/annotation/ParameterResolverFactory.java", "diffHunk": "@@ -52,5 +52,5 @@\n      * @param parameterIndex The index of the parameter to return a ParameterResolver for\n      * @return a suitable ParameterResolver, or {@code null} if none is found\n      */\n-    ParameterResolver createInstance(Executable executable, Parameter[] parameters, int parameterIndex);\n+    ParameterResolver<?> createInstance(Executable executable, Parameter[] parameters, int parameterIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NzIwNw==", "bodyText": "These methods were the reason this class implements SmartLifecycle. If this isn't necessary anymore, the SmartLifecycle methods can also be removed.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1345#discussion_r379857207", "createdAt": "2020-02-15T21:27:17Z", "author": {"login": "abuijze"}, "path": "spring/src/main/java/org/axonframework/spring/config/EventHandlerRegistrar.java", "diffHunk": "@@ -84,13 +87,11 @@ public void stop(Runnable callback) {\n \n     @Override\n     public void start() {\n-        eventProcessingConfiguration.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef829cce30a13105fe9c1d1398f2e0141393a13"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c96544fe0f7e20e26a4ebd5eb7a43490355a89e", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/0c96544fe0f7e20e26a4ebd5eb7a43490355a89e", "committedDate": "2020-02-17T09:03:39Z", "message": "Merge remote-tracking branch 'origin/master' into feature/891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96d60d235b78329cd2d6719cd3140f7eb59f32c2", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/96d60d235b78329cd2d6719cd3140f7eb59f32c2", "committedDate": "2020-02-17T13:18:11Z", "message": "Process review comments\n\n-Remove generic wildcard mention on ParameterResolverFactory for\nbackwards compatibility\n-Rename shutdown handlers on the DistributedCommandBus and\nCommandBusConnector, as well as adjusting the phasing.\n-Update the ShutdownLatch to use an ActivityHandle to end a registered\nactivity. Rename methods and the adjust the javadoc accordingly\n-Create a dedicated ShutdownInProgressException to be thrown by the\nShutdownLatch in case registerActivity is called on a closing latch\n-Add distinct command and query outbound/inbound phases\n-Ensure the \"activity\" is registered prior to any possibility of\nderegistering. Adjust this behaviour for both the AxonServerCommandBus\nand AxonServerQueryBus\n-Remove all subscriptions in the shutdownDispatching phase instead of\nthe disconnect phase for the AxonServerCommandBus and AxonServerQueryBus\n-Fix await termination time in the AxonServerCommandBus and\nAxonServerQueryBus\n-Remove the SmartLifecycle implementation of the EventHandlerRegistrar\nentirely\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28b580fbf0e159add3cc30e199b9cc63c8173bc1", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/28b580fbf0e159add3cc30e199b9cc63c8173bc1", "committedDate": "2020-02-18T08:58:57Z", "message": "Last ShutdownLatch improvements\n\n-Be more precise in the Javadoc\n-Add ifShuttingDown(String) method to overload the ifShuttingDown\n(Supplier<Exception) method\n-Make ActivityHandle#end idempotent\n-Fix bug in ActivityHandle#end method; firstInvocation check wasn't used\n-Change usage of ifShuttingDown in the AxonServer command and query bus\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d1fa004fdd715658294fcc7f926dd0075bca207", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/0d1fa004fdd715658294fcc7f926dd0075bca207", "committedDate": "2020-02-18T12:34:10Z", "message": "Introduce timeout for the phased lifecycle process\n\nThe invocation of start/shutdown handlers will now wait indefinitely.\nIntroducing a time out is thus necessary to ensure start/shutdown does\nno become an never ending process\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e8f3a50c3d2ce30858f7c159c116c9006ce5397", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/0e8f3a50c3d2ce30858f7c159c116c9006ce5397", "committedDate": "2020-02-18T12:35:32Z", "message": "Even further ShutdownLatch improvements\n\n-Introduce an initialize method, so that the latch can be started again\n-Use an atomic reference of a CompletableFuture as the latch to be\nthread safe\n-Make sure that initiateShutdown can complete the latch immediately in\ncase no activities are present\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbe2814478820573c09961a4ac068e019106bc1c", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/fbe2814478820573c09961a4ac068e019106bc1c", "committedDate": "2020-02-18T12:36:27Z", "message": "Add start handlers\n\nAdd StartHandler annotated methods to initialize the ShutdownLatch\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86323a03967a51c208e7e1a303defc049163780d", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/86323a03967a51c208e7e1a303defc049163780d", "committedDate": "2020-02-18T12:55:57Z", "message": "Merge remote-tracking branch 'origin/master' into feature/891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ae9bd42c108d49e91a5882aa9b34500c852667e", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/1ae9bd42c108d49e91a5882aa9b34500c852667e", "committedDate": "2020-02-18T14:55:29Z", "message": "Merge remote-tracking branch 'origin/master' into feature/891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8a9528494d05994da038613080e10a76303f4ff", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/c8a9528494d05994da038613080e10a76303f4ff", "committedDate": "2020-02-18T15:59:20Z", "message": "Ensure the stream observers are completed\n\nEnsure the stream observers are completed upon a disconnect and\nunsubscribeAll\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82cc572872dd850e55f08f3e4374020ea8681a2a", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/82cc572872dd850e55f08f3e4374020ea8681a2a", "committedDate": "2020-02-18T16:54:05Z", "message": "Introduce cleaner shutdown approach\n\nUse the shutdownNow method as is for existing cases. On a disconnect, we\n can do a shutdown + await termination process. Thus ensure we do not\n harshly close the stream(s) when the ShutdownHandler is called\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebb59e2644b5a28c3c9fa267aa1bff94f9d37c8d", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/ebb59e2644b5a28c3c9fa267aa1bff94f9d37c8d", "committedDate": "2020-02-18T16:55:26Z", "message": "Use a thead safe list\n\nUse a thead safe list to start lifecycle handlers in, as handlers can be\n registered in the phase being active at that point in time\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40cb0dcfd1dd60b6e09d1de95531fa37e6283791", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/40cb0dcfd1dd60b6e09d1de95531fa37e6283791", "committedDate": "2020-02-18T16:56:18Z", "message": "Introduce onInit method\n\nAdd an onInit method through which users can add handlers which should\nbe called prior to starting the start-phase\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7a407fe82cf556607197f5f70e1e41fa880bd75", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/d7a407fe82cf556607197f5f70e1e41fa880bd75", "committedDate": "2020-02-19T10:36:08Z", "message": "Slight logging expansion\n\nSlight logging expansion on the Component to state the actual instance\nbeing instantiated\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7559600bcea6f4691e9d333a703471ee99ff33e3", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/7559600bcea6f4691e9d333a703471ee99ff33e3", "committedDate": "2020-02-19T10:39:18Z", "message": "Adjust bean-as-component registration\n\nThrough Spring wiring we aren't always ensured the components are\ninstantiated through the Component class. Thus, no certainty the\nLifecycleHandlerInspector is invoked. Hence we should ensure that for\nsome of the component in a Spring environment we enforce an init-handler\n to be added in the earliest phase possible, which simply pulls the\n object from the Configuration\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc114f1af787477db64b94abdcd037c46439f0b6", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/fc114f1af787477db64b94abdcd037c46439f0b6", "committedDate": "2020-02-19T10:45:34Z", "message": "Rename onInit to onInitialize\n\nRename onInit to onInitialize\n\n#891"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58d82931577eb561d7139e173b5b223607742f8e", "author": {"user": {"login": "abuijze", "name": "Allard Buijze"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/58d82931577eb561d7139e173b5b223607742f8e", "committedDate": "2020-02-19T11:50:26Z", "message": "Fixed issue in loading repository for Aggregate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28cb987fbcde57e489e050309a014586ae844b2b", "author": {"user": {"login": "abuijze", "name": "Allard Buijze"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/28cb987fbcde57e489e050309a014586ae844b2b", "committedDate": "2020-02-19T12:45:33Z", "message": "Removed race conditions from AxonServer Command and QueryBus tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1868, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}