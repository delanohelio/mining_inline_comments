{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyOTkzMTE2", "number": 1383, "title": "Scheduled events", "bodyText": "This pull request provides an EventScheduler implementation which uses Axon Server. As such, this is a partial solution for #1106.", "createdAt": "2020-03-24T13:32:24Z", "url": "https://github.com/AxonFramework/AxonFramework/pull/1383", "merged": true, "mergeCommit": {"oid": "b6a29f92c7aa4585969a20b75bcc032698d60edb"}, "closed": true, "closedAt": "2020-04-28T08:33:50Z", "author": {"login": "MGathier"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQgBVAgH2gAyMzkyOTkzMTE2OmE0ZWQ0NzZlMTdhYzQ3NWY5MzFlMjcwYjdjNDRkODM2ZWIxM2YxMjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaefU-gFqTM5OTIwNzY2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a4ed476e17ac475f931e270b7c44d836eb13f123", "author": {"user": {"login": "MGathier", "name": "Marc Gathier"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/a4ed476e17ac475f931e270b7c44d836eb13f123", "committedDate": "2020-03-23T15:27:17Z", "message": "AxonServer implementation of EventScheduler."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "289466f5534ec3186ec722b2b00c319179d0767f", "author": {"user": {"login": "MGathier", "name": "Marc Gathier"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/289466f5534ec3186ec722b2b00c319179d0767f", "committedDate": "2020-03-23T15:38:06Z", "message": "AxonServer implementation of EventScheduler."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6eebe7774572469e0007eda5b1ba8c24faea5fb", "author": {"user": {"login": "MGathier", "name": "Marc Gathier"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/a6eebe7774572469e0007eda5b1ba8c24faea5fb", "committedDate": "2020-03-24T13:26:45Z", "message": "Added testcase for AxonServerEventScheduler. Updated javadoc."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwOTYzODMz", "url": "https://github.com/AxonFramework/AxonFramework/pull/1383#pullrequestreview-380963833", "createdAt": "2020-03-25T09:08:06Z", "commit": {"oid": "a6eebe7774572469e0007eda5b1ba8c24faea5fb"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTowODowNlrOF7RtBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoxMzowNFrOF7c_xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwMDM1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private AxonServerEventScheduler(Builder builder) {\n          \n          \n            \n                protected AxonServerEventScheduler(Builder builder) {", "url": "https://github.com/AxonFramework/AxonFramework/pull/1383#discussion_r397700358", "createdAt": "2020-03-25T09:08:06Z", "author": {"login": "smcvb"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/AxonServerEventScheduler.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.axonserver.connector.event.axon;\n+\n+import com.google.protobuf.ByteString;\n+import io.axoniq.axonserver.grpc.InstructionAck;\n+import io.axoniq.axonserver.grpc.event.CancelScheduledEventRequest;\n+import io.axoniq.axonserver.grpc.event.Event;\n+import io.axoniq.axonserver.grpc.event.EventSchedulerGrpc;\n+import io.axoniq.axonserver.grpc.event.RescheduleEventRequest;\n+import io.axoniq.axonserver.grpc.event.ScheduleEventRequest;\n+import io.grpc.Channel;\n+import org.axonframework.axonserver.connector.AxonServerConfiguration;\n+import org.axonframework.axonserver.connector.AxonServerConnectionManager;\n+import org.axonframework.axonserver.connector.ErrorCode;\n+import org.axonframework.axonserver.connector.event.util.GrpcExceptionParser;\n+import org.axonframework.axonserver.connector.util.GrpcMetaDataConverter;\n+import org.axonframework.common.Assert;\n+import org.axonframework.common.AxonConfigurationException;\n+import org.axonframework.common.IdentifierFactory;\n+import org.axonframework.eventhandling.EventMessage;\n+import org.axonframework.eventhandling.scheduling.EventScheduler;\n+import org.axonframework.eventhandling.scheduling.ScheduleToken;\n+import org.axonframework.eventhandling.scheduling.java.SimpleScheduleToken;\n+import org.axonframework.lifecycle.Phase;\n+import org.axonframework.lifecycle.ShutdownHandler;\n+import org.axonframework.lifecycle.ShutdownLatch;\n+import org.axonframework.lifecycle.StartHandler;\n+import org.axonframework.messaging.MetaData;\n+import org.axonframework.serialization.SerializedObject;\n+import org.axonframework.serialization.Serializer;\n+import org.axonframework.serialization.xml.XStreamSerializer;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Supplier;\n+\n+import static org.axonframework.common.BuilderUtils.assertNonNull;\n+import static org.axonframework.common.ObjectUtils.getOrDefault;\n+\n+/**\n+ * Implementation of the {@link EventScheduler} that uses Axon Server to schedule the events.\n+ *\n+ * @author Marc Gathier\n+ * @since 4.4\n+ */\n+public class AxonServerEventScheduler implements EventScheduler {\n+\n+    private final AxonServerConnectionManager axonServerConnectionManager;\n+    private final AxonServerConfiguration axonServerConfiguration;\n+    private final Serializer serializer;\n+    private final GrpcMetaDataConverter converter;\n+    private final ShutdownLatch shutdownLatch = new ShutdownLatch();\n+\n+    /**\n+     * Instantiates an {@link AxonServerEventScheduler} using the given {@link Builder}.\n+     *\n+     * @param builder the {@link Builder} used.\n+     */\n+    private AxonServerEventScheduler(Builder builder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6eebe7774572469e0007eda5b1ba8c24faea5fb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMjQyNw==", "bodyText": "You've potentially missed using the ShutdownLatch#registerActivity method. It's that method which makes it so that the latch will be waited upon during a shutdown.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1383#discussion_r397722427", "createdAt": "2020-03-25T09:44:00Z", "author": {"login": "smcvb"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/AxonServerEventScheduler.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.axonserver.connector.event.axon;\n+\n+import com.google.protobuf.ByteString;\n+import io.axoniq.axonserver.grpc.InstructionAck;\n+import io.axoniq.axonserver.grpc.event.CancelScheduledEventRequest;\n+import io.axoniq.axonserver.grpc.event.Event;\n+import io.axoniq.axonserver.grpc.event.EventSchedulerGrpc;\n+import io.axoniq.axonserver.grpc.event.RescheduleEventRequest;\n+import io.axoniq.axonserver.grpc.event.ScheduleEventRequest;\n+import io.grpc.Channel;\n+import org.axonframework.axonserver.connector.AxonServerConfiguration;\n+import org.axonframework.axonserver.connector.AxonServerConnectionManager;\n+import org.axonframework.axonserver.connector.ErrorCode;\n+import org.axonframework.axonserver.connector.event.util.GrpcExceptionParser;\n+import org.axonframework.axonserver.connector.util.GrpcMetaDataConverter;\n+import org.axonframework.common.Assert;\n+import org.axonframework.common.AxonConfigurationException;\n+import org.axonframework.common.IdentifierFactory;\n+import org.axonframework.eventhandling.EventMessage;\n+import org.axonframework.eventhandling.scheduling.EventScheduler;\n+import org.axonframework.eventhandling.scheduling.ScheduleToken;\n+import org.axonframework.eventhandling.scheduling.java.SimpleScheduleToken;\n+import org.axonframework.lifecycle.Phase;\n+import org.axonframework.lifecycle.ShutdownHandler;\n+import org.axonframework.lifecycle.ShutdownLatch;\n+import org.axonframework.lifecycle.StartHandler;\n+import org.axonframework.messaging.MetaData;\n+import org.axonframework.serialization.SerializedObject;\n+import org.axonframework.serialization.Serializer;\n+import org.axonframework.serialization.xml.XStreamSerializer;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Supplier;\n+\n+import static org.axonframework.common.BuilderUtils.assertNonNull;\n+import static org.axonframework.common.ObjectUtils.getOrDefault;\n+\n+/**\n+ * Implementation of the {@link EventScheduler} that uses Axon Server to schedule the events.\n+ *\n+ * @author Marc Gathier\n+ * @since 4.4\n+ */\n+public class AxonServerEventScheduler implements EventScheduler {\n+\n+    private final AxonServerConnectionManager axonServerConnectionManager;\n+    private final AxonServerConfiguration axonServerConfiguration;\n+    private final Serializer serializer;\n+    private final GrpcMetaDataConverter converter;\n+    private final ShutdownLatch shutdownLatch = new ShutdownLatch();\n+\n+    /**\n+     * Instantiates an {@link AxonServerEventScheduler} using the given {@link Builder}.\n+     *\n+     * @param builder the {@link Builder} used.\n+     */\n+    private AxonServerEventScheduler(Builder builder) {\n+        this.axonServerConnectionManager = builder.axonServerConnectionManager;\n+        this.axonServerConfiguration = builder.axonServerConfiguration;\n+        this.serializer = builder.eventSerializer.get();\n+        this.converter = new GrpcMetaDataConverter(serializer);\n+    }\n+\n+    /**\n+     * Creates a builder to instantiate an {@link AxonServerEventScheduler}.\n+     *\n+     * @return a builder\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Start the Axon Server {@link EventScheduler} implementation.\n+     */\n+    @StartHandler(phase = Phase.OUTBOUND_EVENT_CONNECTORS)\n+    public void start() {\n+        shutdownLatch.initialize();\n+    }\n+\n+    @ShutdownHandler(phase = Phase.OUTBOUND_EVENT_CONNECTORS)\n+    public CompletableFuture<Void> shutdownDispatching() {\n+        return shutdownLatch.initiateShutdown();\n+    }\n+\n+    /**\n+     * Schedules an event to be published at a given moment.  The event is published in the application's default\n+     * context.\n+     *\n+     * @param triggerDateTime The moment to trigger publication of the event\n+     * @param event           The event to publish\n+     * @return a token used to manage the schedule later\n+     */\n+    @Override\n+    public ScheduleToken schedule(Instant triggerDateTime, Object event) {\n+        shutdownLatch.ifShuttingDown(\"Cannot dispatch new events as this scheduler is being shutdown\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6eebe7774572469e0007eda5b1ba8c24faea5fb"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNTk0NA==", "bodyText": "Curious: we do not have to close the channels/stubs ourselves after usage?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1383#discussion_r397725944", "createdAt": "2020-03-25T09:49:33Z", "author": {"login": "smcvb"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/AxonServerEventScheduler.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.axonserver.connector.event.axon;\n+\n+import com.google.protobuf.ByteString;\n+import io.axoniq.axonserver.grpc.InstructionAck;\n+import io.axoniq.axonserver.grpc.event.CancelScheduledEventRequest;\n+import io.axoniq.axonserver.grpc.event.Event;\n+import io.axoniq.axonserver.grpc.event.EventSchedulerGrpc;\n+import io.axoniq.axonserver.grpc.event.RescheduleEventRequest;\n+import io.axoniq.axonserver.grpc.event.ScheduleEventRequest;\n+import io.grpc.Channel;\n+import org.axonframework.axonserver.connector.AxonServerConfiguration;\n+import org.axonframework.axonserver.connector.AxonServerConnectionManager;\n+import org.axonframework.axonserver.connector.ErrorCode;\n+import org.axonframework.axonserver.connector.event.util.GrpcExceptionParser;\n+import org.axonframework.axonserver.connector.util.GrpcMetaDataConverter;\n+import org.axonframework.common.Assert;\n+import org.axonframework.common.AxonConfigurationException;\n+import org.axonframework.common.IdentifierFactory;\n+import org.axonframework.eventhandling.EventMessage;\n+import org.axonframework.eventhandling.scheduling.EventScheduler;\n+import org.axonframework.eventhandling.scheduling.ScheduleToken;\n+import org.axonframework.eventhandling.scheduling.java.SimpleScheduleToken;\n+import org.axonframework.lifecycle.Phase;\n+import org.axonframework.lifecycle.ShutdownHandler;\n+import org.axonframework.lifecycle.ShutdownLatch;\n+import org.axonframework.lifecycle.StartHandler;\n+import org.axonframework.messaging.MetaData;\n+import org.axonframework.serialization.SerializedObject;\n+import org.axonframework.serialization.Serializer;\n+import org.axonframework.serialization.xml.XStreamSerializer;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Supplier;\n+\n+import static org.axonframework.common.BuilderUtils.assertNonNull;\n+import static org.axonframework.common.ObjectUtils.getOrDefault;\n+\n+/**\n+ * Implementation of the {@link EventScheduler} that uses Axon Server to schedule the events.\n+ *\n+ * @author Marc Gathier\n+ * @since 4.4\n+ */\n+public class AxonServerEventScheduler implements EventScheduler {\n+\n+    private final AxonServerConnectionManager axonServerConnectionManager;\n+    private final AxonServerConfiguration axonServerConfiguration;\n+    private final Serializer serializer;\n+    private final GrpcMetaDataConverter converter;\n+    private final ShutdownLatch shutdownLatch = new ShutdownLatch();\n+\n+    /**\n+     * Instantiates an {@link AxonServerEventScheduler} using the given {@link Builder}.\n+     *\n+     * @param builder the {@link Builder} used.\n+     */\n+    private AxonServerEventScheduler(Builder builder) {\n+        this.axonServerConnectionManager = builder.axonServerConnectionManager;\n+        this.axonServerConfiguration = builder.axonServerConfiguration;\n+        this.serializer = builder.eventSerializer.get();\n+        this.converter = new GrpcMetaDataConverter(serializer);\n+    }\n+\n+    /**\n+     * Creates a builder to instantiate an {@link AxonServerEventScheduler}.\n+     *\n+     * @return a builder\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Start the Axon Server {@link EventScheduler} implementation.\n+     */\n+    @StartHandler(phase = Phase.OUTBOUND_EVENT_CONNECTORS)\n+    public void start() {\n+        shutdownLatch.initialize();\n+    }\n+\n+    @ShutdownHandler(phase = Phase.OUTBOUND_EVENT_CONNECTORS)\n+    public CompletableFuture<Void> shutdownDispatching() {\n+        return shutdownLatch.initiateShutdown();\n+    }\n+\n+    /**\n+     * Schedules an event to be published at a given moment.  The event is published in the application's default\n+     * context.\n+     *\n+     * @param triggerDateTime The moment to trigger publication of the event\n+     * @param event           The event to publish\n+     * @return a token used to manage the schedule later\n+     */\n+    @Override\n+    public ScheduleToken schedule(Instant triggerDateTime, Object event) {\n+        shutdownLatch.ifShuttingDown(\"Cannot dispatch new events as this scheduler is being shutdown\");\n+        Channel channel = axonServerConnectionManager.getChannel(axonServerConfiguration.getContext());\n+        EventSchedulerGrpc.EventSchedulerFutureStub scheduleStub = EventSchedulerGrpc.newFutureStub(channel);\n+        io.axoniq.axonserver.grpc.event.ScheduleToken response = null;\n+        try {\n+            response = scheduleStub.scheduleEvent(ScheduleEventRequest\n+                                                          .newBuilder()\n+                                                          .setInstant(triggerDateTime.toEpochMilli())\n+                                                          .setEvent(toEvent(event))\n+                                                          .build())\n+                                   .get();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw GrpcExceptionParser.parse(e);\n+        } catch (ExecutionException e) {\n+            throw GrpcExceptionParser.parse(e.getCause());\n+        }\n+        return new SimpleScheduleToken(response.getToken());\n+    }\n+\n+    /**\n+     * Schedules an event to be published after a specified amount of time.\n+     *\n+     * @param triggerDuration The amount of time to wait before publishing the event\n+     * @param event           The event to publish\n+     * @return a token used to manage the schedule later\n+     */\n+    @Override\n+    public ScheduleToken schedule(Duration triggerDuration, Object event) {\n+        return schedule(Instant.now().plus(triggerDuration), event);\n+    }\n+\n+    /**\n+     * Cancel a scheduled event.\n+     *\n+     * @param scheduleToken the token returned when the event was scheduled\n+     */\n+    @Override\n+    public void cancelSchedule(ScheduleToken scheduleToken) {\n+        shutdownLatch.ifShuttingDown(\"Cannot dispatch new events as this scheduler is being shutdown\");\n+        Assert.isTrue(scheduleToken instanceof SimpleScheduleToken,\n+                      () -> \"Invalid tracking token type. Must be SimpleScheduleToken.\");\n+        String token = ((SimpleScheduleToken) scheduleToken).getTokenId();\n+        Channel channel = axonServerConnectionManager.getChannel(axonServerConfiguration.getContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6eebe7774572469e0007eda5b1ba8c24faea5fb"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MTk1Ng==", "bodyText": "Framework's on JUnit 5, meaning all the use of public can be removed. Thus from the class, the setup, teardown and all test methods.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1383#discussion_r397791956", "createdAt": "2020-03-25T11:43:46Z", "author": {"login": "smcvb"}, "path": "axon-server-connector/src/test/java/org/axonframework/axonserver/connector/event/axon/AxonServerEventSchedulerTest.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ *  Copyright (c) 2010-2020. Axon Framework\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *\n+ */\n+\n+package org.axonframework.axonserver.connector.event.axon;\n+\n+import io.axoniq.axonserver.grpc.ErrorMessage;\n+import io.axoniq.axonserver.grpc.InstructionAck;\n+import io.axoniq.axonserver.grpc.control.ClientIdentification;\n+import io.axoniq.axonserver.grpc.control.PlatformInboundInstruction;\n+import io.axoniq.axonserver.grpc.control.PlatformInfo;\n+import io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction;\n+import io.axoniq.axonserver.grpc.control.PlatformServiceGrpc;\n+import io.axoniq.axonserver.grpc.event.CancelScheduledEventRequest;\n+import io.axoniq.axonserver.grpc.event.Event;\n+import io.axoniq.axonserver.grpc.event.EventSchedulerGrpc;\n+import io.axoniq.axonserver.grpc.event.RescheduleEventRequest;\n+import io.axoniq.axonserver.grpc.event.ScheduleEventRequest;\n+import io.axoniq.axonserver.grpc.event.ScheduleToken;\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.stub.StreamObserver;\n+import org.axonframework.axonserver.connector.AxonServerConfiguration;\n+import org.axonframework.axonserver.connector.AxonServerConnectionManager;\n+import org.axonframework.eventhandling.GenericEventMessage;\n+import org.axonframework.eventhandling.scheduling.java.SimpleScheduleToken;\n+import org.axonframework.eventhandling.scheduling.quartz.QuartzScheduleToken;\n+import org.axonframework.lifecycle.ShutdownInProgressException;\n+import org.axonframework.messaging.MetaData;\n+import org.junit.jupiter.api.*;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author Marc Gathier\n+ */\n+public class AxonServerEventSchedulerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6eebe7774572469e0007eda5b1ba8c24faea5fb"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NTM4MQ==", "bodyText": "Nit: I'd personally prefer a private static inner class over an anonymous one.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1383#discussion_r397885381", "createdAt": "2020-03-25T14:13:04Z", "author": {"login": "smcvb"}, "path": "axon-server-connector/src/test/java/org/axonframework/axonserver/connector/event/axon/AxonServerEventSchedulerTest.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ *  Copyright (c) 2010-2020. Axon Framework\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *\n+ */\n+\n+package org.axonframework.axonserver.connector.event.axon;\n+\n+import io.axoniq.axonserver.grpc.ErrorMessage;\n+import io.axoniq.axonserver.grpc.InstructionAck;\n+import io.axoniq.axonserver.grpc.control.ClientIdentification;\n+import io.axoniq.axonserver.grpc.control.PlatformInboundInstruction;\n+import io.axoniq.axonserver.grpc.control.PlatformInfo;\n+import io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction;\n+import io.axoniq.axonserver.grpc.control.PlatformServiceGrpc;\n+import io.axoniq.axonserver.grpc.event.CancelScheduledEventRequest;\n+import io.axoniq.axonserver.grpc.event.Event;\n+import io.axoniq.axonserver.grpc.event.EventSchedulerGrpc;\n+import io.axoniq.axonserver.grpc.event.RescheduleEventRequest;\n+import io.axoniq.axonserver.grpc.event.ScheduleEventRequest;\n+import io.axoniq.axonserver.grpc.event.ScheduleToken;\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.stub.StreamObserver;\n+import org.axonframework.axonserver.connector.AxonServerConfiguration;\n+import org.axonframework.axonserver.connector.AxonServerConnectionManager;\n+import org.axonframework.eventhandling.GenericEventMessage;\n+import org.axonframework.eventhandling.scheduling.java.SimpleScheduleToken;\n+import org.axonframework.eventhandling.scheduling.quartz.QuartzScheduleToken;\n+import org.axonframework.lifecycle.ShutdownInProgressException;\n+import org.axonframework.messaging.MetaData;\n+import org.junit.jupiter.api.*;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author Marc Gathier\n+ */\n+public class AxonServerEventSchedulerTest {\n+\n+    private static Server server;\n+    private static Map<String, Event> scheduled = new ConcurrentHashMap<>();\n+    private AxonServerEventScheduler testSubject;\n+\n+    @BeforeAll\n+    public static void startServer() throws Exception {\n+        server = ServerBuilder.forPort(18024)\n+                              .addService(new PlatformServiceGrpc.PlatformServiceImplBase() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6eebe7774572469e0007eda5b1ba8c24faea5fb"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ea0b2c0ad269d328476813efa018cf86f3b9485", "author": {"user": {"login": "MGathier", "name": "Marc Gathier"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/3ea0b2c0ad269d328476813efa018cf86f3b9485", "committedDate": "2020-04-23T08:43:25Z", "message": "processed review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MjA3NjYw", "url": "https://github.com/AxonFramework/AxonFramework/pull/1383#pullrequestreview-399207660", "createdAt": "2020-04-23T15:19:29Z", "commit": {"oid": "3ea0b2c0ad269d328476813efa018cf86f3b9485"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1893, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}