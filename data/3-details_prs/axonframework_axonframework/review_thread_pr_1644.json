{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxODE5NTc1", "number": 1644, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDozOTo0N1rOFHIU9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzowMjoyMlrOFIOtWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDIwNzkxOnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/serialization/AbstractXStreamSerializer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDozOTo0N1rOIIdwpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzo1MjoyMFrOIJxq6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc0NzEwOQ==", "bodyText": "Small pointer, but I feel it would be nicer to perform this validation and check in the build() method on the XStreamSerializer. Mainly because the classLoader doesn't mean anything from the perspective of this constructor, it's purely there to define what the XStream instance would look like.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1644#discussion_r545747109", "createdAt": "2020-12-18T10:39:47Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/serialization/AbstractXStreamSerializer.java", "diffHunk": "@@ -65,6 +65,10 @@ protected AbstractXStreamSerializer(Builder builder) {\n         this.converter = builder.converter;\n         this.revisionResolver = builder.revisionResolver;\n \n+        if (builder.classLoader != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35b80cba328778fadccc50f166610949aba81932"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2MzQwNQ==", "bodyText": "Probably this if block better move to AbstractXStreamSerializer.Builder#validate method close to this XStream configuration code:\n            if (lenientDeserialization) {\n                xStream.ignoreUnknownElements();\n            }\nWhat do you think @smcvb ?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1644#discussion_r545763405", "createdAt": "2020-12-18T11:10:45Z", "author": {"login": "aupodogov"}, "path": "messaging/src/main/java/org/axonframework/serialization/AbstractXStreamSerializer.java", "diffHunk": "@@ -65,6 +65,10 @@ protected AbstractXStreamSerializer(Builder builder) {\n         this.converter = builder.converter;\n         this.revisionResolver = builder.revisionResolver;\n \n+        if (builder.classLoader != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc0NzEwOQ=="}, "originalCommit": {"oid": "35b80cba328778fadccc50f166610949aba81932"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5ODE2MQ==", "bodyText": "Good call @aupodogov, sounds reasonable to place it there to me too!", "url": "https://github.com/AxonFramework/AxonFramework/pull/1644#discussion_r546598161", "createdAt": "2020-12-21T09:28:02Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/serialization/AbstractXStreamSerializer.java", "diffHunk": "@@ -65,6 +65,10 @@ protected AbstractXStreamSerializer(Builder builder) {\n         this.converter = builder.converter;\n         this.revisionResolver = builder.revisionResolver;\n \n+        if (builder.classLoader != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc0NzEwOQ=="}, "originalCommit": {"oid": "35b80cba328778fadccc50f166610949aba81932"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyMTg5OQ==", "bodyText": "OK, done", "url": "https://github.com/AxonFramework/AxonFramework/pull/1644#discussion_r547121899", "createdAt": "2020-12-22T07:52:20Z", "author": {"login": "aupodogov"}, "path": "messaging/src/main/java/org/axonframework/serialization/AbstractXStreamSerializer.java", "diffHunk": "@@ -65,6 +65,10 @@ protected AbstractXStreamSerializer(Builder builder) {\n         this.converter = builder.converter;\n         this.revisionResolver = builder.revisionResolver;\n \n+        if (builder.classLoader != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc0NzEwOQ=="}, "originalCommit": {"oid": "35b80cba328778fadccc50f166610949aba81932"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDIxOTc0OnYy", "diffSide": "RIGHT", "path": "messaging/src/main/java/org/axonframework/serialization/AbstractXStreamSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDo0Mjo1N1rOIId3gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDo0Mjo1N1rOIId3gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc0ODg2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Sets the {@link ClassLoader} used as an override for default class loader in {@link XStream}.\n          \n          \n            \n                     * Sets the {@link ClassLoader} used as an override for default {@code ClassLoader} used in the {@link XStream}.\n          \n          \n            \n                     * The same solution could thus be achieved by configuring the `XStream` instance directly.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1644#discussion_r545748867", "createdAt": "2020-12-18T10:42:57Z", "author": {"login": "smcvb"}, "path": "messaging/src/main/java/org/axonframework/serialization/AbstractXStreamSerializer.java", "diffHunk": "@@ -328,6 +333,18 @@ public Builder converter(Converter converter) {\n             return this;\n         }\n \n+        /**\n+         * Sets the {@link ClassLoader} used as an override for default class loader in {@link XStream}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35b80cba328778fadccc50f166610949aba81932"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTczOTE0OnYy", "diffSide": "RIGHT", "path": "spring-boot-autoconfigure/src/main/java/org/axonframework/springboot/autoconfig/AxonAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzowMjoyMlrOIKCKjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODoyMDowNVrOIKasdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5MjE0MQ==", "bodyText": "Shouldn't this be done for the JacksonSerializer too?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1644#discussion_r547392141", "createdAt": "2020-12-22T17:02:22Z", "author": {"login": "smcvb"}, "path": "spring-boot-autoconfigure/src/main/java/org/axonframework/springboot/autoconfig/AxonAutoConfiguration.java", "diffHunk": "@@ -165,11 +165,10 @@ private Serializer buildSerializer(RevisionResolver revisionResolver,\n             case XSTREAM:\n             case DEFAULT:\n             default:\n-                XStreamSerializer xStreamSerializer = XStreamSerializer.builder()\n-                                                                       .revisionResolver(revisionResolver)\n-                                                                       .build();\n-                xStreamSerializer.getXStream().setClassLoader(beanClassLoader);\n-                return xStreamSerializer;\n+                return XStreamSerializer.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bcb25a762f172182ea3d9b1d2ead0933dc6c9be"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MjM0Mg==", "bodyText": "This might lead to override class loader in Spring Boot auto configured ObjectMapper (configured in JacksonAutoConfiguration). I think it's not good.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1644#discussion_r547452342", "createdAt": "2020-12-22T19:03:21Z", "author": {"login": "aupodogov"}, "path": "spring-boot-autoconfigure/src/main/java/org/axonframework/springboot/autoconfig/AxonAutoConfiguration.java", "diffHunk": "@@ -165,11 +165,10 @@ private Serializer buildSerializer(RevisionResolver revisionResolver,\n             case XSTREAM:\n             case DEFAULT:\n             default:\n-                XStreamSerializer xStreamSerializer = XStreamSerializer.builder()\n-                                                                       .revisionResolver(revisionResolver)\n-                                                                       .build();\n-                xStreamSerializer.getXStream().setClassLoader(beanClassLoader);\n-                return xStreamSerializer;\n+                return XStreamSerializer.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5MjE0MQ=="}, "originalCommit": {"oid": "1bcb25a762f172182ea3d9b1d2ead0933dc6c9be"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc5NDAzOQ==", "bodyText": "Fair point. That makes it something we simply cannot do in the auto configuration on the JacksonSerializer directly.\nWe could take control of the defaultAxonObjectMapper bean, as that's already being searched for any how, but that's not really the scope of this issue.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1644#discussion_r547794039", "createdAt": "2020-12-23T08:20:05Z", "author": {"login": "smcvb"}, "path": "spring-boot-autoconfigure/src/main/java/org/axonframework/springboot/autoconfig/AxonAutoConfiguration.java", "diffHunk": "@@ -165,11 +165,10 @@ private Serializer buildSerializer(RevisionResolver revisionResolver,\n             case XSTREAM:\n             case DEFAULT:\n             default:\n-                XStreamSerializer xStreamSerializer = XStreamSerializer.builder()\n-                                                                       .revisionResolver(revisionResolver)\n-                                                                       .build();\n-                xStreamSerializer.getXStream().setClassLoader(beanClassLoader);\n-                return xStreamSerializer;\n+                return XStreamSerializer.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5MjE0MQ=="}, "originalCommit": {"oid": "1bcb25a762f172182ea3d9b1d2ead0933dc6c9be"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3172, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}