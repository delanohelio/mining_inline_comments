{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4OTg4MTU0", "number": 1306, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDoxNzo1NVrODV72hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDozMjo0MVrODV8E9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MzI3MzAyOnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/axonframework/test/aggregate/ResultValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDoxNzo1NVrOFaaA5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDoxNjoyOVrOFaeuvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIzMzUxMA==", "bodyText": "Should be @code scheduledTime\nAlso the wording for it might change a bit since this is the expected time for the deadline and not the duration anymore.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1306#discussion_r363233510", "createdAt": "2020-01-06T10:17:55Z", "author": {"login": "lfgcampos"}, "path": "test/src/main/java/org/axonframework/test/aggregate/ResultValidator.java", "diffHunk": "@@ -249,6 +256,15 @@\n      */\n     ResultValidator<T> expectScheduledDeadlineOfType(Instant scheduledTime, Class<?> deadlineType);\n \n+    /**\n+     * Asserts that a deadline with the given {@code deadlineName} has been scheduled after the given {@code duration}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76dc02f53deec40d19a1c3fe3d77e42ea9aac3ac"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxMDc4Mg==", "bodyText": "Good catch, thanks for that! Will update this line of javadoc accordingly.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1306#discussion_r363310782", "createdAt": "2020-01-06T14:16:29Z", "author": {"login": "smcvb"}, "path": "test/src/main/java/org/axonframework/test/aggregate/ResultValidator.java", "diffHunk": "@@ -249,6 +256,15 @@\n      */\n     ResultValidator<T> expectScheduledDeadlineOfType(Instant scheduledTime, Class<?> deadlineType);\n \n+    /**\n+     * Asserts that a deadline with the given {@code deadlineName} has been scheduled after the given {@code duration}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIzMzUxMA=="}, "originalCommit": {"oid": "76dc02f53deec40d19a1c3fe3d77e42ea9aac3ac"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MzI3ODY3OnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/axonframework/test/saga/FixtureExecutionResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDoyMDowNFrOFaaEKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDoxODoxMVrOFaexcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIzNDM0NA==", "bodyText": "Should be @code scheduledTime\nAlso the wording for it might change a bit since this is the expected time for the deadline and not the duration anymore.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1306#discussion_r363234344", "createdAt": "2020-01-06T10:20:04Z", "author": {"login": "lfgcampos"}, "path": "test/src/main/java/org/axonframework/test/saga/FixtureExecutionResult.java", "diffHunk": "@@ -209,6 +218,15 @@ FixtureExecutionResult expectScheduledDeadlineMatching(Instant scheduledTime,\n      */\n     FixtureExecutionResult expectScheduledDeadlineOfType(Instant scheduledTime, Class<?> deadlineType);\n \n+    /**\n+     * Asserts that a deadline with the given {@code deadlineName} has been scheduled after the given {@code duration}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76dc02f53deec40d19a1c3fe3d77e42ea9aac3ac"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxMTQ3Mg==", "bodyText": "Good catch, thanks for that! Will update this line of javadoc accordingly.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1306#discussion_r363311472", "createdAt": "2020-01-06T14:18:11Z", "author": {"login": "smcvb"}, "path": "test/src/main/java/org/axonframework/test/saga/FixtureExecutionResult.java", "diffHunk": "@@ -209,6 +218,15 @@ FixtureExecutionResult expectScheduledDeadlineMatching(Instant scheduledTime,\n      */\n     FixtureExecutionResult expectScheduledDeadlineOfType(Instant scheduledTime, Class<?> deadlineType);\n \n+    /**\n+     * Asserts that a deadline with the given {@code deadlineName} has been scheduled after the given {@code duration}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIzNDM0NA=="}, "originalCommit": {"oid": "76dc02f53deec40d19a1c3fe3d77e42ea9aac3ac"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MzMwODgwOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/axonframework/test/aggregate/FixtureTest_Deadlines.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDozMjowNVrOFaaVug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDoyMjowMVrOFae1rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIzODg0Mg==", "bodyText": "Tests for the Instant scheduledTime option are needed as well?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1306#discussion_r363238842", "createdAt": "2020-01-06T10:32:05Z", "author": {"login": "lfgcampos"}, "path": "test/src/test/java/org/axonframework/test/aggregate/FixtureTest_Deadlines.java", "diffHunk": "@@ -44,61 +50,68 @@ void setUp() {\n     @Test\n     void testDeadlineScheduling() {\n         fixture.givenNoPriorActivity()\n-               .when(new CreateMyAggregateCommand(\"id\"))\n+               .when(CREATE_COMMAND)\n                .expectScheduledDeadline(Duration.ofMinutes(TRIGGER_DURATION_MINUTES), \"deadlineDetails\");\n     }\n \n     @Test\n     void testDeadlineSchedulingTypeMatching() {\n         fixture.givenNoPriorActivity()\n-               .when(new CreateMyAggregateCommand(\"id\"))\n+               .when(CREATE_COMMAND)\n                .expectScheduledDeadlineOfType(Duration.ofMinutes(TRIGGER_DURATION_MINUTES), String.class);\n     }\n \n+    @Test\n+    void testDeadlineSchedulingNameMatching() {\n+        fixture.given(new MyAggregateCreatedEvent(AGGREGATE_ID, \"deadlineName\", \"deadlineId\"))\n+               .when(new SetPayloadlessDeadlineCommand(AGGREGATE_ID))\n+               .expectScheduledDeadlineWithName(Duration.ofMinutes(TRIGGER_DURATION_MINUTES), \"payloadless-deadline\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76dc02f53deec40d19a1c3fe3d77e42ea9aac3ac"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxMjU1Ng==", "bodyText": "Good argument! Something I was initially thinking about as well, but decided against because the DeadlineManagerValidator class (used under the hood to actually perform the expectScheduledDeadline... methods) calls the DeadlineManagerValidator#assertScheduledDeadlineMatching(Instant, Matcher<?>) in the DeadlineManagerValidator#assertScheduledDeadlineMatching(Duration, Matcher<?>) method.\nThus, tests which validate the expect methods using Duration, will always end up doing a validation with Instant.\nI am assuming this was @m1l4n54v1c initial take on only providing tests for the expect methods using Duration too, hence why I stuck with it too.\nFine with adding the other set though, shouldn't be that big a deal.\nOr, maybe @m1l4n54v1c has a changed opinion on this part at the moment, justifying tests for the expect-with-instant methods too.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1306#discussion_r363312556", "createdAt": "2020-01-06T14:22:01Z", "author": {"login": "smcvb"}, "path": "test/src/test/java/org/axonframework/test/aggregate/FixtureTest_Deadlines.java", "diffHunk": "@@ -44,61 +50,68 @@ void setUp() {\n     @Test\n     void testDeadlineScheduling() {\n         fixture.givenNoPriorActivity()\n-               .when(new CreateMyAggregateCommand(\"id\"))\n+               .when(CREATE_COMMAND)\n                .expectScheduledDeadline(Duration.ofMinutes(TRIGGER_DURATION_MINUTES), \"deadlineDetails\");\n     }\n \n     @Test\n     void testDeadlineSchedulingTypeMatching() {\n         fixture.givenNoPriorActivity()\n-               .when(new CreateMyAggregateCommand(\"id\"))\n+               .when(CREATE_COMMAND)\n                .expectScheduledDeadlineOfType(Duration.ofMinutes(TRIGGER_DURATION_MINUTES), String.class);\n     }\n \n+    @Test\n+    void testDeadlineSchedulingNameMatching() {\n+        fixture.given(new MyAggregateCreatedEvent(AGGREGATE_ID, \"deadlineName\", \"deadlineId\"))\n+               .when(new SetPayloadlessDeadlineCommand(AGGREGATE_ID))\n+               .expectScheduledDeadlineWithName(Duration.ofMinutes(TRIGGER_DURATION_MINUTES), \"payloadless-deadline\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIzODg0Mg=="}, "originalCommit": {"oid": "76dc02f53deec40d19a1c3fe3d77e42ea9aac3ac"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MzMwOTk5OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/axonframework/test/saga/FixtureTest_Deadlines.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDozMjo0MVrOFaaWeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDoyMjoxNVrOFae2Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIzOTAzMw==", "bodyText": "Tests for the Instant scheduledTime option are needed as well?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1306#discussion_r363239033", "createdAt": "2020-01-06T10:32:41Z", "author": {"login": "lfgcampos"}, "path": "test/src/test/java/org/axonframework/test/saga/FixtureTest_Deadlines.java", "diffHunk": "@@ -57,15 +60,26 @@ void testDeadlineScheduling() {\n     @Test\n     void testDeadlineSchedulingTypeMatching() {\n         fixture.givenNoPriorActivity()\n-               .whenAggregate(\"id\").publishes(new TriggerSagaStartEvent(\"id\"))\n+               .whenAggregate(AGGREGATE_ID)\n+               .publishes(START_SAGA_EVENT)\n                .expectActiveSagas(1)\n                .expectScheduledDeadlineOfType(Duration.ofMinutes(TRIGGER_DURATION_MINUTES), String.class)\n                .expectNoScheduledEvents();\n     }\n \n+    @Test\n+    void testDeadlineSchedulingNameMatching() {\n+        fixture.givenAggregate(AGGREGATE_ID)\n+               .published(START_SAGA_EVENT)\n+               .whenAggregate(AGGREGATE_ID)\n+               .publishes(new PayloadlessDeadlineShouldBeSetEvent(AGGREGATE_ID))\n+               .expectScheduledDeadlineWithName(Duration.ofMinutes(TRIGGER_DURATION_MINUTES), \"payloadless-deadline\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76dc02f53deec40d19a1c3fe3d77e42ea9aac3ac"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxMjY3NA==", "bodyText": "Good argument! Something I was initially thinking about as well, but decided against because the DeadlineManagerValidator class (used under the hood to actually perform the expectScheduledDeadline... methods) calls the DeadlineManagerValidator#assertScheduledDeadlineMatching(Instant, Matcher<?>) in the DeadlineManagerValidator#assertScheduledDeadlineMatching(Duration, Matcher<?>) method.\nThus, tests which validate the expect methods using Duration, will always end up doing a validation with Instant.\nI am assuming this was @m1l4n54v1c initial take on only providing tests for the expect methods using Duration too, hence why I stuck with it too.\nFine with adding the other set though, shouldn't be that big a deal.\nOr, maybe @m1l4n54v1c has a changed opinion on this part at the moment, justifying tests for the expect-with-instant methods too.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1306#discussion_r363312674", "createdAt": "2020-01-06T14:22:15Z", "author": {"login": "smcvb"}, "path": "test/src/test/java/org/axonframework/test/saga/FixtureTest_Deadlines.java", "diffHunk": "@@ -57,15 +60,26 @@ void testDeadlineScheduling() {\n     @Test\n     void testDeadlineSchedulingTypeMatching() {\n         fixture.givenNoPriorActivity()\n-               .whenAggregate(\"id\").publishes(new TriggerSagaStartEvent(\"id\"))\n+               .whenAggregate(AGGREGATE_ID)\n+               .publishes(START_SAGA_EVENT)\n                .expectActiveSagas(1)\n                .expectScheduledDeadlineOfType(Duration.ofMinutes(TRIGGER_DURATION_MINUTES), String.class)\n                .expectNoScheduledEvents();\n     }\n \n+    @Test\n+    void testDeadlineSchedulingNameMatching() {\n+        fixture.givenAggregate(AGGREGATE_ID)\n+               .published(START_SAGA_EVENT)\n+               .whenAggregate(AGGREGATE_ID)\n+               .publishes(new PayloadlessDeadlineShouldBeSetEvent(AGGREGATE_ID))\n+               .expectScheduledDeadlineWithName(Duration.ofMinutes(TRIGGER_DURATION_MINUTES), \"payloadless-deadline\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIzOTAzMw=="}, "originalCommit": {"oid": "76dc02f53deec40d19a1c3fe3d77e42ea9aac3ac"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3259, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}