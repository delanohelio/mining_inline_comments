{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1OTQ5NjA0", "number": 1634, "title": "Routing Strategy Implementation Adjustments", "bodyText": "This pull request makes a couple of arguably minor adjustments around the RoutingStrategy implementations provided:\n\nThe UnresolvedRoutingKeyPolicy has been changed to a RoutingStrategy. As such, the ERROR, RANDOM_KEY and STATIC_KEY implementations from this enumeration are currently an actual RoutingStrategy implementation. This thus removes the switch-case logic present in the AbstractRoutingStrategy.\nThe unresolvedRoutingKeyPolicy is adjusted towards a fallbackRoutingStrategy, as that's how it acted in the first place.\nThe old default fallbackRoutingStrategy used to be ERROR but is adjusted towards RANDOM_KEY. ERROR made sense for applications using a single JVM CommandBus implementation. As the bias has switched to a distributed CommandBus (e.g. the AxonServerCommandBus), erroring isn't favourable when an aggregate-creation-command (which typically doesn't contain any routing key) is dispatched.\nOn top of the above, the constructor creation of the AbstractRoutingStrategy has been deprecated in favour of a builder pattern (similarly as all other infrastructure components). To that end, adjustments have been made in the AbstractRoutingStrategy, and it's implementations the AnnotationRoutingStrategy and MetaDataRoutingStrategy.\nTest cases have been expanded an added.\nThe JavaDoc has been adjusted accordingly with the above changes.\nWhen present, IDE warnings have been removed.", "createdAt": "2020-12-10T13:48:20Z", "url": "https://github.com/AxonFramework/AxonFramework/pull/1634", "merged": true, "mergeCommit": {"oid": "4dc26f29ab2985a12507d8e3793a7a0f9650ea5a"}, "closed": true, "closedAt": "2020-12-17T11:10:00Z", "author": {"login": "smcvb"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkzd98AH2gAyNTM1OTQ5NjA0OjhjYjRiZTIzYzczZTYwZWFhZTcyMGM3YTRmMGNkMjI4ZDUzMGM4NDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmGo0DAH2gAyNTM1OTQ5NjA0OjMwNzcwYWJhN2RkODlkZjUxNTA4ODllMWI4NDQyNTllN2Q3NzA2NDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8cb4be23c73e60eaae720c7a4f0cd228d530c846", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/8cb4be23c73e60eaae720c7a4f0cd228d530c846", "committedDate": "2020-12-10T13:36:24Z", "message": "Several adjustments around the RoutingStrategy implementations\n\n- Adjust the UnresolvedRoutingKeyPolicy to be a RoutingStrategy\nimplementation, hence implementing getRoutingKey for ERROR, RANDOM_KEY\nand STATIC_KEY\n- Use the UnresolvedRoutingKeyPolicy / fallbackRoutingStrategy instead\nof the switch case\n- Introduce a builder paradigm starting from the\nAbstractRoutingStrategy, using it for annotation and metadata\nimplementation\n- Deprecate constructors in favor of builder paradigm\n- Adjust default of UnresolvedRoutingKeyPolicy#ERROR to\nUnresolvedRoutingKeyPolicy#RANDOM_KEY\n- Adjust the javadoc when applicable\n- Provide (missing) test cases\n\n#routing-strategy-fine-tuning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "303c6ad88e68de395ed1aff32f4bccc18b395013", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/303c6ad88e68de395ed1aff32f4bccc18b395013", "committedDate": "2020-12-10T13:47:48Z", "message": "Remove deprecated constructor usage\n\nRemove deprecated constructor usage of the AnnotationRoutingStrategy\n\n#routing-strategy-fine-tuning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MjE4Mjky", "url": "https://github.com/AxonFramework/AxonFramework/pull/1634#pullrequestreview-549218292", "createdAt": "2020-12-10T13:55:37Z", "commit": {"oid": "303c6ad88e68de395ed1aff32f4bccc18b395013"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1NTozN1rOIDKafA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1NzoyMFrOIDKffw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4NzI2MA==", "bodyText": "Why is the generic parameter here? It doesn't seem to be used anywhere.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1634#discussion_r540187260", "createdAt": "2020-12-10T13:55:37Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/commandhandling/distributed/AbstractRoutingStrategy.java", "diffHunk": "@@ -17,62 +17,99 @@\n package org.axonframework.commandhandling.distributed;\n \n import org.axonframework.commandhandling.CommandMessage;\n-import org.axonframework.common.Assert;\n+import org.axonframework.common.AxonConfigurationException;\n \n-import java.util.concurrent.atomic.AtomicLong;\n-\n-import static java.lang.String.format;\n+import static org.axonframework.common.BuilderUtils.assertNonNull;\n \n /**\n- * Abstract implementation of the RoutingStrategy interface that uses a policy to prescribe what happens when a routing\n- * cannot be resolved.\n+ * Abstract implementation of the {@link RoutingStrategy} interface that includes a fallback {@code RoutingStrategy}\n+ * which prescribes what happens when routing cannot be resolved by this implementation.\n  *\n  * @author Allard Buijze\n  * @since 2.0\n  */\n-public abstract class AbstractRoutingStrategy implements RoutingStrategy {\n+public abstract class AbstractRoutingStrategy<B extends RoutingStrategy> implements RoutingStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "303c6ad88e68de395ed1aff32f4bccc18b395013"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4ODU0Mw==", "bodyText": "Since this is an abstract class, I doubt whether using the builder pattern here simplifies things.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1634#discussion_r540188543", "createdAt": "2020-12-10T13:57:20Z", "author": {"login": "abuijze"}, "path": "messaging/src/main/java/org/axonframework/commandhandling/distributed/AbstractRoutingStrategy.java", "diffHunk": "@@ -17,62 +17,99 @@\n package org.axonframework.commandhandling.distributed;\n \n import org.axonframework.commandhandling.CommandMessage;\n-import org.axonframework.common.Assert;\n+import org.axonframework.common.AxonConfigurationException;\n \n-import java.util.concurrent.atomic.AtomicLong;\n-\n-import static java.lang.String.format;\n+import static org.axonframework.common.BuilderUtils.assertNonNull;\n \n /**\n- * Abstract implementation of the RoutingStrategy interface that uses a policy to prescribe what happens when a routing\n- * cannot be resolved.\n+ * Abstract implementation of the {@link RoutingStrategy} interface that includes a fallback {@code RoutingStrategy}\n+ * which prescribes what happens when routing cannot be resolved by this implementation.\n  *\n  * @author Allard Buijze\n  * @since 2.0\n  */\n-public abstract class AbstractRoutingStrategy implements RoutingStrategy {\n+public abstract class AbstractRoutingStrategy<B extends RoutingStrategy> implements RoutingStrategy {\n \n-    private static final String STATIC_ROUTING_KEY = \"unresolved\";\n+    private final RoutingStrategy fallbackRoutingStrategy;\n \n-    private final UnresolvedRoutingKeyPolicy unresolvedRoutingKeyPolicy;\n-    private final AtomicLong counter = new AtomicLong(0);\n+    /**\n+     * Instantiate a {@link AbstractRoutingStrategy} based on the fields contained in the given {@code builder}\n+     *\n+     * @param builder the {@link Builder} used to instantiate a {@link AbstractRoutingStrategy} instance\n+     */\n+    protected AbstractRoutingStrategy(Builder<B> builder) {\n+        builder.validate();\n+        this.fallbackRoutingStrategy = builder.fallbackRoutingStrategy;\n+    }\n \n     /**\n-     * Initializes the strategy using given {@code unresolvedRoutingKeyPolicy} prescribing what happens when a\n-     * routing key cannot be resolved.\n+     * Initializes the strategy using given {@link UnresolvedRoutingKeyPolicy} prescribing the fallback approach when\n+     * this implementation cannot resolve a routing key.\n      *\n-     * @param unresolvedRoutingKeyPolicy The policy for unresolved routing keys.\n+     * @param fallbackRoutingStrategy the fallback routing to use whenever this {@link RoutingStrategy} doesn't succeed\n+     * @deprecated in favor of the {@link #AbstractRoutingStrategy(Builder)}\n      */\n-    public AbstractRoutingStrategy(UnresolvedRoutingKeyPolicy unresolvedRoutingKeyPolicy) {\n-        Assert.notNull(unresolvedRoutingKeyPolicy, () -> \"unresolvedRoutingKeyPolicy may not be null\");\n-        this.unresolvedRoutingKeyPolicy = unresolvedRoutingKeyPolicy;\n+    @Deprecated\n+    public AbstractRoutingStrategy(UnresolvedRoutingKeyPolicy fallbackRoutingStrategy) {\n+        assertNonNull(fallbackRoutingStrategy, \"Fallback RoutingStrategy may not be null\");\n+        this.fallbackRoutingStrategy = fallbackRoutingStrategy;\n     }\n \n     @Override\n     public String getRoutingKey(CommandMessage<?> command) {\n         String routingKey = doResolveRoutingKey(command);\n         if (routingKey == null) {\n-            switch (unresolvedRoutingKeyPolicy) {\n-                case ERROR:\n-                    throw new CommandDispatchException(format(\"The command [%s] does not contain a routing key.\",\n-                                                              command.getCommandName()));\n-                case RANDOM_KEY:\n-                    return Long.toHexString(counter.getAndIncrement());\n-                case STATIC_KEY:\n-                    return STATIC_ROUTING_KEY;\n-                default:\n-                    throw new IllegalStateException(\"The configured UnresolvedRoutingPolicy of \"\n-                                                            + unresolvedRoutingKeyPolicy.name() + \" is not supported.\");\n-            }\n+            routingKey = fallbackRoutingStrategy.getRoutingKey(command);\n         }\n         return routingKey;\n     }\n \n     /**\n      * Resolve the Routing Key for the given {@code command}.\n      *\n-     * @param command The command to resolve the routing key for\n-     * @return the String representing the Routing Key, or {@code null} if unresolved.\n+     * @param command the command to resolve the routing key for\n+     * @return the String representing the Routing Key, or {@code null} if unresolved\n      */\n     protected abstract String doResolveRoutingKey(CommandMessage<?> command);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "303c6ad88e68de395ed1aff32f4bccc18b395013"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMDYyMDkz", "url": "https://github.com/AxonFramework/AxonFramework/pull/1634#pullrequestreview-550062093", "createdAt": "2020-12-11T12:38:29Z", "commit": {"oid": "303c6ad88e68de395ed1aff32f4bccc18b395013"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f23a6b4dacd99d346cd1a8a215dfe61d0d1b640a", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/f23a6b4dacd99d346cd1a8a215dfe61d0d1b640a", "committedDate": "2020-12-14T10:35:37Z", "message": "Drop abstract Builder\n\nDrop the builder from the AbstractRoutingStrategy in favor of placing\nthis logic directly in the implementations. Thus simplifying the\nAbstractRoutingStrategy\n\n#1634"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30770aba7dd89df5150889e1b844259e7d770649", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/30770aba7dd89df5150889e1b844259e7d770649", "committedDate": "2020-12-14T14:30:22Z", "message": "Simplify tests\n\nSimplify tests by extracting the builder as the testee\n\n#1634"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2045, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}