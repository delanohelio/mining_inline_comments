{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyOTc5NjM2", "number": 1443, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo0OToyN1rOEF0mxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDozNDo1OFrOEF95_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTQwMjI4OnYy", "diffSide": "RIGHT", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/snapshotting/SnapshotFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo0OToyN1rOGkPWNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDo0ODoxMlrOGkVzWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1MzM2NQ==", "bodyText": "Why not extending a Predicate here?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1443#discussion_r440653365", "createdAt": "2020-06-16T07:49:27Z", "author": {"login": "m1l4n54v1c"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/snapshotting/SnapshotFilter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.eventsourcing.snapshotting;\n+\n+import org.axonframework.eventhandling.DomainEventData;\n+\n+/**\n+ * Functional interface defining a filter of snapshot data in the form of {@link DomainEventData}. When providing an\n+ * instance of this, take the following into account:\n+ * <ol>\n+ *     <li> Only return {@code false} if the snapshot data belongs to the corresponding aggregate <b>and</b> it does no conform to the desired format.</li>\n+ *     <li> Return {@code true} if the snapshot data belongs to the corresponding aggregate and conforms to the desired format.</li>\n+ *     <li> Return {@code true} if the snapshot data <b>does not</b> correspond to the desired aggregate.</li>\n+ * </ol>\n+ * <p>\n+ * Whether the {@code DomainEventData} corresponds to the right aggregate and is of the desired format, is dependent on\n+ * the {@link org.axonframework.eventsourcing.Snapshotter} instance being used. By default, the {@link\n+ * org.axonframework.eventsourcing.AggregateSnapshotter} instances would be used.\n+ * <p>\n+ * In such a default set up, {@code DomainEventData} <i>corresponding to the right aggregate</i> means that the {@link\n+ * DomainEventData#getType()} matches the aggregate's type. If {@code DomainEventData} is of the <i>desired format</i>\n+ * should be based on the {@link DomainEventData#getPayload()}, which contains the entire aggregate state.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.4\n+ */\n+@FunctionalInterface\n+public interface SnapshotFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74401ccb7ec335f0593fe5ad8c7eabf39327176a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc1OTEzMA==", "bodyText": "Sure thing. Means I can drop the casts in the builders too.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1443#discussion_r440759130", "createdAt": "2020-06-16T10:48:12Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/snapshotting/SnapshotFilter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.eventsourcing.snapshotting;\n+\n+import org.axonframework.eventhandling.DomainEventData;\n+\n+/**\n+ * Functional interface defining a filter of snapshot data in the form of {@link DomainEventData}. When providing an\n+ * instance of this, take the following into account:\n+ * <ol>\n+ *     <li> Only return {@code false} if the snapshot data belongs to the corresponding aggregate <b>and</b> it does no conform to the desired format.</li>\n+ *     <li> Return {@code true} if the snapshot data belongs to the corresponding aggregate and conforms to the desired format.</li>\n+ *     <li> Return {@code true} if the snapshot data <b>does not</b> correspond to the desired aggregate.</li>\n+ * </ol>\n+ * <p>\n+ * Whether the {@code DomainEventData} corresponds to the right aggregate and is of the desired format, is dependent on\n+ * the {@link org.axonframework.eventsourcing.Snapshotter} instance being used. By default, the {@link\n+ * org.axonframework.eventsourcing.AggregateSnapshotter} instances would be used.\n+ * <p>\n+ * In such a default set up, {@code DomainEventData} <i>corresponding to the right aggregate</i> means that the {@link\n+ * DomainEventData#getType()} matches the aggregate's type. If {@code DomainEventData} is of the <i>desired format</i>\n+ * should be based on the {@link DomainEventData#getPayload()}, which contains the entire aggregate state.\n+ *\n+ * @author Steven van Beelen\n+ * @since 4.4\n+ */\n+@FunctionalInterface\n+public interface SnapshotFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1MzM2NQ=="}, "originalCommit": {"oid": "74401ccb7ec335f0593fe5ad8c7eabf39327176a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjUxNTUyOnYy", "diffSide": "RIGHT", "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/AxonServerEventStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzowNToyNFrOGkaUow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo0MDoxM1rOGk7tgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzMzE4Nw==", "bodyText": "We had an assertNonNull before, should we keep it?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1443#discussion_r440833187", "createdAt": "2020-06-16T13:05:24Z", "author": {"login": "lfgcampos"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/AxonServerEventStore.java", "diffHunk": "@@ -240,8 +265,25 @@ public Builder eventSerializer(Serializer eventSerializer) {\n          *\n          * @param snapshotFilter The snapshot filter predicate\n          * @return the current Builder instance, for fluent interfacing\n+         * @deprecated in favor of {@link #snapshotFilter(SnapshotFilter)}\n          */\n+        @Deprecated\n         public Builder snapshotFilter(Predicate<? super DomainEventData<?>> snapshotFilter) {\n+            snapshotFilter(snapshotFilter::test);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2668c949027b18e6ed51788d8f55e4c9cb5f73d2"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4MDIyNA==", "bodyText": "Well, this method delegates to the snapshotFilter(SnapshotFilter) method, which does have the assertNonNull. So, we should be covered on the matter.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1443#discussion_r441380224", "createdAt": "2020-06-17T08:40:13Z", "author": {"login": "smcvb"}, "path": "axon-server-connector/src/main/java/org/axonframework/axonserver/connector/event/axon/AxonServerEventStore.java", "diffHunk": "@@ -240,8 +265,25 @@ public Builder eventSerializer(Serializer eventSerializer) {\n          *\n          * @param snapshotFilter The snapshot filter predicate\n          * @return the current Builder instance, for fluent interfacing\n+         * @deprecated in favor of {@link #snapshotFilter(SnapshotFilter)}\n          */\n+        @Deprecated\n         public Builder snapshotFilter(Predicate<? super DomainEventData<?>> snapshotFilter) {\n+            snapshotFilter(snapshotFilter::test);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzMzE4Nw=="}, "originalCommit": {"oid": "2668c949027b18e6ed51788d8f55e4c9cb5f73d2"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU3NzkwOnYy", "diffSide": "RIGHT", "path": "spring-boot-autoconfigure/src/test/java/org/axonframework/springboot/JpaEventStoreAutoConfigurationWithSnapshotting.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoyMDozNVrOGka8Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo0MDo0M1rOGk7uvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0MzI3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            class JpaEventStoreAutoConfigurationWithSnapshotting {\n          \n          \n            \n            class JpaEventStoreAutoConfigurationWithSnapshottingTest {", "url": "https://github.com/AxonFramework/AxonFramework/pull/1443#discussion_r440843274", "createdAt": "2020-06-16T13:20:35Z", "author": {"login": "lfgcampos"}, "path": "spring-boot-autoconfigure/src/test/java/org/axonframework/springboot/JpaEventStoreAutoConfigurationWithSnapshotting.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.springboot;\n+\n+import org.axonframework.commandhandling.CommandHandler;\n+import org.axonframework.commandhandling.gateway.CommandGateway;\n+import org.axonframework.eventhandling.EventHandler;\n+import org.axonframework.eventsourcing.AggregateSnapshotter;\n+import org.axonframework.eventsourcing.EventCountSnapshotTriggerDefinition;\n+import org.axonframework.eventsourcing.GenericAggregateFactory;\n+import org.axonframework.eventsourcing.SnapshotTriggerDefinition;\n+import org.axonframework.eventsourcing.Snapshotter;\n+import org.axonframework.eventsourcing.eventstore.EventStore;\n+import org.axonframework.eventsourcing.eventstore.jpa.JpaEventStorageEngine;\n+import org.axonframework.eventsourcing.snapshotting.SnapshotFilter;\n+import org.axonframework.modelling.command.AggregateIdentifier;\n+import org.axonframework.modelling.command.AggregateLifecycle;\n+import org.axonframework.modelling.command.TargetAggregateIdentifier;\n+import org.axonframework.spring.stereotype.Aggregate;\n+import org.axonframework.springboot.autoconfig.AxonServerAutoConfiguration;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.extension.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.EnableMBeanExport;\n+import org.springframework.jmx.support.RegistrationPolicy;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Test class validating auto configured snapshotting logic.\n+ *\n+ * @author Steven van Beelen\n+ */\n+@ContextConfiguration(classes = JpaEventStoreAutoConfigurationWithSnapshotting.TestContext.class)\n+@ExtendWith(SpringExtension.class)\n+@EnableAutoConfiguration(exclude = {AxonServerAutoConfiguration.class})\n+@EnableMBeanExport(registration = RegistrationPolicy.IGNORE_EXISTING)\n+class JpaEventStoreAutoConfigurationWithSnapshotting {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2668c949027b18e6ed51788d8f55e4c9cb5f73d2"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4MDU0Mw==", "bodyText": "Darn, good point...adjusted!", "url": "https://github.com/AxonFramework/AxonFramework/pull/1443#discussion_r441380543", "createdAt": "2020-06-17T08:40:43Z", "author": {"login": "smcvb"}, "path": "spring-boot-autoconfigure/src/test/java/org/axonframework/springboot/JpaEventStoreAutoConfigurationWithSnapshotting.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright (c) 2010-2020. Axon Framework\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.axonframework.springboot;\n+\n+import org.axonframework.commandhandling.CommandHandler;\n+import org.axonframework.commandhandling.gateway.CommandGateway;\n+import org.axonframework.eventhandling.EventHandler;\n+import org.axonframework.eventsourcing.AggregateSnapshotter;\n+import org.axonframework.eventsourcing.EventCountSnapshotTriggerDefinition;\n+import org.axonframework.eventsourcing.GenericAggregateFactory;\n+import org.axonframework.eventsourcing.SnapshotTriggerDefinition;\n+import org.axonframework.eventsourcing.Snapshotter;\n+import org.axonframework.eventsourcing.eventstore.EventStore;\n+import org.axonframework.eventsourcing.eventstore.jpa.JpaEventStorageEngine;\n+import org.axonframework.eventsourcing.snapshotting.SnapshotFilter;\n+import org.axonframework.modelling.command.AggregateIdentifier;\n+import org.axonframework.modelling.command.AggregateLifecycle;\n+import org.axonframework.modelling.command.TargetAggregateIdentifier;\n+import org.axonframework.spring.stereotype.Aggregate;\n+import org.axonframework.springboot.autoconfig.AxonServerAutoConfiguration;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.extension.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.EnableMBeanExport;\n+import org.springframework.jmx.support.RegistrationPolicy;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Test class validating auto configured snapshotting logic.\n+ *\n+ * @author Steven van Beelen\n+ */\n+@ContextConfiguration(classes = JpaEventStoreAutoConfigurationWithSnapshotting.TestContext.class)\n+@ExtendWith(SpringExtension.class)\n+@EnableAutoConfiguration(exclude = {AxonServerAutoConfiguration.class})\n+@EnableMBeanExport(registration = RegistrationPolicy.IGNORE_EXISTING)\n+class JpaEventStoreAutoConfigurationWithSnapshotting {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0MzI3NA=="}, "originalCommit": {"oid": "2668c949027b18e6ed51788d8f55e4c9cb5f73d2"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjkyNjA0OnYy", "diffSide": "RIGHT", "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDozNDo1OFrOGkeZcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo0MToxMVrOGk7v7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5OTk1NQ==", "bodyText": "We had an assertNonNull before, should we keep it?", "url": "https://github.com/AxonFramework/AxonFramework/pull/1443#discussion_r440899955", "createdAt": "2020-06-16T14:34:58Z", "author": {"login": "lfgcampos"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "diffHunk": "@@ -314,8 +315,24 @@ public Builder eventSerializer(Serializer eventSerializer) {\n          *\n          * @param snapshotFilter a {@link Predicate} which decides whether to take a snapshot into account\n          * @return the current Builder instance, for fluent interfacing\n+         * @deprecated in favor of {@link #snapshotFilter(SnapshotFilter)}\n          */\n+        @Deprecated\n         public Builder snapshotFilter(Predicate<? super DomainEventData<?>> snapshotFilter) {\n+            return snapshotFilter(snapshotFilter::test);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2668c949027b18e6ed51788d8f55e4c9cb5f73d2"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4MDg0Nw==", "bodyText": "Well, this method delegates to the snapshotFilter(SnapshotFilter) method, which does have the assertNonNull. So, we should be covered on the matter.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1443#discussion_r441380847", "createdAt": "2020-06-17T08:41:11Z", "author": {"login": "smcvb"}, "path": "eventsourcing/src/main/java/org/axonframework/eventsourcing/eventstore/AbstractEventStorageEngine.java", "diffHunk": "@@ -314,8 +315,24 @@ public Builder eventSerializer(Serializer eventSerializer) {\n          *\n          * @param snapshotFilter a {@link Predicate} which decides whether to take a snapshot into account\n          * @return the current Builder instance, for fluent interfacing\n+         * @deprecated in favor of {@link #snapshotFilter(SnapshotFilter)}\n          */\n+        @Deprecated\n         public Builder snapshotFilter(Predicate<? super DomainEventData<?>> snapshotFilter) {\n+            return snapshotFilter(snapshotFilter::test);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5OTk1NQ=="}, "originalCommit": {"oid": "2668c949027b18e6ed51788d8f55e4c9cb5f73d2"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3199, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}