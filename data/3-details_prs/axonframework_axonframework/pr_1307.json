{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NDcxNDg5", "number": 1307, "title": "[#894] Add registerResourceInjector method to SagaTestFixture", "bodyText": "This pull request introduces the SagaTestFixture#registerResourceInjector(ResourceInjector) method, which allows the registration of custom ResourceInjector instances a user might have defined in their application.\nTo keep supporting the fixtures SagaTestFixture#registerResource(Object) and SagaTestFixture#withTransienceCheckDisabled methods, we have decided that the registerResourceInjector(ResourceInjector) does not replace the fixtures default ResourceInjector. Instead, the registered custom injector is paired with the default provided in the fixture. Firstly, the default will be called for resource injection and secondly the custom one.\nThrough this approach we ensure that registerResource and withTransienceCheckDisabled work as intended, whilst the registerResourceInjector can be appended in saga test fixtures to include the custom injector (which for example injects additional values on @Value annotated fields).\nAdditionally, this pull request deprecates the AutowiredResourceInjector, as it's a duplicate of the SimpleResourceInjector, with the additional drawback it's only available in the axon-test module.\nThis pull request resolves #894", "createdAt": "2020-01-06T09:56:45Z", "url": "https://github.com/AxonFramework/AxonFramework/pull/1307", "merged": true, "mergeCommit": {"oid": "6d5f85ebc7118c2d7a7f7ccf96ddbcc7c48802be"}, "closed": true, "closedAt": "2020-01-09T12:59:40Z", "author": {"login": "smcvb"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb2vI9lAH2gAyMzU5NDcxNDg5OjQzZGRjNWViYzU5NzhjMzJjZjdjMTNlM2NkM2IwMGQwYWNmYTY0OGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4piSlgH2gAyMzU5NDcxNDg5OjE1YjMxOTI0ZGFiNzZkYmVjMzE1ZDQyMmIxZjE1NTlkZDU2OGIyZGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "43ddc5ebc5978c32cf7c13e3cd3b00d0acfa648d", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/43ddc5ebc5978c32cf7c13e3cd3b00d0acfa648d", "committedDate": "2020-01-03T14:22:10Z", "message": "Deprecate AutowiredResourceInjector\n\nDeprecate the AutowiredResourceInjector in favor of the\nSimpleResourceInjector. Both implementation do exactly the same, with\nthe difference that the AutowiredResourceInjector can only be used with\nthe axon-test module\n\n#894"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2d5aaecfe9d0299b5574e27b6b707ea55ebe1a2", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/d2d5aaecfe9d0299b5574e27b6b707ea55ebe1a2", "committedDate": "2020-01-03T15:14:48Z", "message": "Merge branch 'feature/680' into feature/894"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da47d0619cd5259979b0d5dffcf3b0e44acaf331", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/da47d0619cd5259979b0d5dffcf3b0e44acaf331", "committedDate": "2020-01-03T15:36:07Z", "message": "Implement registerResourceInjector\n\nImplement a registerResourceInjector. This should introduce a custom\nResourceInjector which is called along side the fixture's default\ninjector. Both should be called in this scenario to keep ensuring the\ncorrect injection of default components like the CommandBus and EventBus\nThe custom version can in turn, if implemented as such, override the\ndefault's injected resources\n\n#894"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8df6e7e5cce1b9f5c3f803361d958598076fdc4e", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/8df6e7e5cce1b9f5c3f803361d958598076fdc4e", "committedDate": "2020-01-06T09:33:59Z", "message": "Test registerResourceInjector\n\nAdd a test case which registers a custom resource injector. This should\nvalidate that the custom injector is called once the first message is\npassed through the fixture, as that will initialize a saga for testing\nwhich includes resource injection.\n\n#894"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NTczNzg5", "url": "https://github.com/AxonFramework/AxonFramework/pull/1307#pullrequestreview-338573789", "createdAt": "2020-01-06T10:37:52Z", "commit": {"oid": "8df6e7e5cce1b9f5c3f803361d958598076fdc4e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38599e6a66d72105e87671062d563f6bc7c3b20c", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/38599e6a66d72105e87671062d563f6bc7c3b20c", "committedDate": "2020-01-06T14:26:23Z", "message": "Merge branch 'feature/680' into feature/894"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMTYxMDEy", "url": "https://github.com/AxonFramework/AxonFramework/pull/1307#pullrequestreview-340161012", "createdAt": "2020-01-08T21:37:28Z", "commit": {"oid": "38599e6a66d72105e87671062d563f6bc7c3b20c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMTozNzoyOVrOFbkl2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMTozODo1MFrOFbkoIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1NTM4NA==", "bodyText": "Not sure I understand this. If the custom injector comes second, doesn't that give it the opportunity to override certain dependencies? If we want to force our own, the default injector should come last.", "url": "https://github.com/AxonFramework/AxonFramework/pull/1307#discussion_r364455384", "createdAt": "2020-01-08T21:37:29Z", "author": {"login": "abuijze"}, "path": "test/src/main/java/org/axonframework/test/saga/FixtureConfiguration.java", "diffHunk": "@@ -211,6 +212,22 @@ FixtureConfiguration registerDeadlineHandlerInterceptor(\n     FixtureConfiguration registerListenerInvocationErrorHandler(\n             ListenerInvocationErrorHandler listenerInvocationErrorHandler);\n \n+    /**\n+     * Registers a {@link ResourceInjector} within this fixture. This approach can be used if a custom {@code\n+     * ResourceInjector} has been built for a project which the user wants to take into account when testing it's\n+     * sagas.\n+     * <p>\n+     * The provided {@code resourceInjector} will be paired with the fixture's default {@code ResourceInjector} to keep\n+     * supporting the {@link #registerResource(Object)} and {@link #withTransienceCheckDisabled()} methods. Note that\n+     * <b>first</b> the default injector is called, and after that the given {@code resourceInjector}. This approach\n+     * ensures the fixture's correct workings for default provided resources, like the {@link EventBus} and {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38599e6a66d72105e87671062d563f6bc7c3b20c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1NTk2OQ==", "bodyText": "Class looks like it could be static", "url": "https://github.com/AxonFramework/AxonFramework/pull/1307#discussion_r364455969", "createdAt": "2020-01-08T21:38:50Z", "author": {"login": "abuijze"}, "path": "test/src/main/java/org/axonframework/test/saga/SagaTestFixture.java", "diffHunk": "@@ -585,15 +600,44 @@ public void injectResources(Object saga) {\n                              .filter(f -> registeredResources.contains(ReflectionUtils.getFieldValue(f, saga)))\n                              .findFirst()\n                              .ifPresent(field -> {\n-                                 throw new AssertionError(format(\"Field %s.%s is injected with a resource, \" +\n-                                                                         \"but it doesn't have the 'transient' modifier.\\n\"\n-                                                                         +\n-                                                                         \"Mark field as 'transient' or disable this check using:\\n\"\n-                                                                         +\n-                                                                         \"fixture.withTransienceCheckDisabled()\",\n-                                                                 field.getDeclaringClass(), field.getName()));\n+                                 throw new AssertionError(format(\n+                                         \"Field %s.%s is injected with a resource,\"\n+                                                 + \" but it doesn't have the 'transient' modifier.\"\n+                                                 + \"\\nMark field as 'transient' or disable this check using:\"\n+                                                 + \"\\nfixture.withTransienceCheckDisabled()\",\n+                                         field.getDeclaringClass(),\n+                                         field.getName()\n+                                 ));\n                              });\n             }\n         }\n     }\n+\n+    /**\n+     * Wrapping {@link ResourceInjector} instance. Will first call the {@link TransienceValidatingResourceInjector}, to\n+     * ensure the fixture's approach of injecting the default classes (like the {@link EventBus} and {@link CommandBus}\n+     * for example) is maintained. Afterward, the custom {@code ResourceInjector} provided through the {@link\n+     * #registerResourceInjector(ResourceInjector)} is called. This will (depending on the implementation) inject more\n+     * resources, as well as potentially override resources already injected by the {@code\n+     * TransienceValidatingResourceInjector}.\n+     */\n+    private class WrappingResourceInjector implements ResourceInjector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38599e6a66d72105e87671062d563f6bc7c3b20c"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39a54c1dd648462e31fe5f601fc187818b1b821e", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/39a54c1dd648462e31fe5f601fc187818b1b821e", "committedDate": "2020-01-09T11:15:53Z", "message": "Making test injectors static\n\nThe TransienceValidatingResourceInjector and WrappingResourceInjector\ncan be made static\n\n#894"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d600ed608826488a1367ae624271de0655ac2b6d", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/d600ed608826488a1367ae624271de0655ac2b6d", "committedDate": "2020-01-09T11:16:31Z", "message": "Merge remote-tracking branch 'origin/master' into feature/894"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2b6ffe21a06135e6afb775cd0340a2b74c6970c", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/c2b6ffe21a06135e6afb775cd0340a2b74c6970c", "committedDate": "2020-01-09T12:57:39Z", "message": "Provide more thorough documentation\n\nThe registration of a custom ResourceInjector implies several things\nwhich should be taken into account by the users. The javadoc should\nstate all of these clearly\n\n#894"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15b31924dab76dbec315d422b1f1559dd568b2de", "author": {"user": {"login": "smcvb", "name": "Steven van Beelen"}}, "url": "https://github.com/AxonFramework/AxonFramework/commit/15b31924dab76dbec315d422b1f1559dd568b2de", "committedDate": "2020-01-09T12:58:15Z", "message": "Update indentation\n\nUpdate the indentation according to the style guide\n\n#894"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1808, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}