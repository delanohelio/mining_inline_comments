{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwODgzODg2", "number": 3021, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowNjozNlrOEPdTpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDoxMDo0OVrOEPembA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ0MjYwOnYy", "diffSide": "RIGHT", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowNjozNlrOGzLdHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxODoyMlrOGzL03Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxODIzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"An error occurred while rolling back transactions. \", e1);\n          \n          \n            \n                        log.error(\"An error occurred while rolling back transactions.\", e1);", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456318237", "createdAt": "2020-07-17T09:06:36Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "diffHunk": "@@ -69,4 +75,69 @@ private void initDatasource() {\n             log.error(\"Error while retrieving user management data source\", e);\n         }\n     }\n+\n+    /**\n+     * Returns an database connection for UM data source.\n+     *\n+     * @param shouldApplyTransaction apply transaction or not\n+     * @return Database connection.\n+     * @throws IdentityRuntimeException Exception occurred when getting the data source.\n+     */\n+    public Connection getDBConnection(boolean shouldApplyTransaction) throws IdentityRuntimeException {\n+\n+        try {\n+            Connection dbConnection = dataSource.getConnection();\n+            if (shouldApplyTransaction) {\n+                dbConnection.setAutoCommit(false);\n+                try {\n+                    dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                } catch (SQLException e) {\n+                    // Handling startup error for postgresql Ref: https://github.com/wso2/product-is/issues/3545\n+                    // Active SQL Transaction means that connection is not committed.\n+                    // Need to commit before setting isolation property.\n+                    if (dbConnection.getMetaData().getDriverName().contains(POSTGRESQL_DATABASE)\n+                            && PG_ACTIVE_SQL_TRANSACTION_STATE.equals(e.getSQLState())) {\n+                        dbConnection.commit();\n+                        dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                    }\n+                }\n+            }\n+            return dbConnection;\n+        } catch (SQLException e) {\n+            String errMsg = \"Error when getting a database connection object from the UM data source.\";\n+            throw IdentityRuntimeException.error(errMsg, e);\n+        }\n+    }\n+\n+    /**\n+     * Revoke the transaction when catch then sql transaction errors.\n+     *\n+     * @param dbConnection database connection.\n+     */\n+    public void rollbackTransaction(Connection dbConnection) {\n+\n+        try {\n+            if (dbConnection != null) {\n+                dbConnection.rollback();\n+            }\n+        } catch (SQLException e1) {\n+            log.error(\"An error occurred while rolling back transactions. \", e1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNDMxNw==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456324317", "createdAt": "2020-07-17T09:18:22Z", "author": {"login": "ashensw"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "diffHunk": "@@ -69,4 +75,69 @@ private void initDatasource() {\n             log.error(\"Error while retrieving user management data source\", e);\n         }\n     }\n+\n+    /**\n+     * Returns an database connection for UM data source.\n+     *\n+     * @param shouldApplyTransaction apply transaction or not\n+     * @return Database connection.\n+     * @throws IdentityRuntimeException Exception occurred when getting the data source.\n+     */\n+    public Connection getDBConnection(boolean shouldApplyTransaction) throws IdentityRuntimeException {\n+\n+        try {\n+            Connection dbConnection = dataSource.getConnection();\n+            if (shouldApplyTransaction) {\n+                dbConnection.setAutoCommit(false);\n+                try {\n+                    dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                } catch (SQLException e) {\n+                    // Handling startup error for postgresql Ref: https://github.com/wso2/product-is/issues/3545\n+                    // Active SQL Transaction means that connection is not committed.\n+                    // Need to commit before setting isolation property.\n+                    if (dbConnection.getMetaData().getDriverName().contains(POSTGRESQL_DATABASE)\n+                            && PG_ACTIVE_SQL_TRANSACTION_STATE.equals(e.getSQLState())) {\n+                        dbConnection.commit();\n+                        dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                    }\n+                }\n+            }\n+            return dbConnection;\n+        } catch (SQLException e) {\n+            String errMsg = \"Error when getting a database connection object from the UM data source.\";\n+            throw IdentityRuntimeException.error(errMsg, e);\n+        }\n+    }\n+\n+    /**\n+     * Revoke the transaction when catch then sql transaction errors.\n+     *\n+     * @param dbConnection database connection.\n+     */\n+    public void rollbackTransaction(Connection dbConnection) {\n+\n+        try {\n+            if (dbConnection != null) {\n+                dbConnection.rollback();\n+            }\n+        } catch (SQLException e1) {\n+            log.error(\"An error occurred while rolling back transactions. \", e1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxODIzNw=="}, "originalCommit": {"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ0MjkxOnYy", "diffSide": "RIGHT", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowNjo0M1rOGzLdVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxODoyNlrOGzL1Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxODI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"An error occurred while commit transactions. \", e1);\n          \n          \n            \n                        log.error(\"An error occurred while commit transactions.\", e1);", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456318292", "createdAt": "2020-07-17T09:06:43Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "diffHunk": "@@ -69,4 +75,69 @@ private void initDatasource() {\n             log.error(\"Error while retrieving user management data source\", e);\n         }\n     }\n+\n+    /**\n+     * Returns an database connection for UM data source.\n+     *\n+     * @param shouldApplyTransaction apply transaction or not\n+     * @return Database connection.\n+     * @throws IdentityRuntimeException Exception occurred when getting the data source.\n+     */\n+    public Connection getDBConnection(boolean shouldApplyTransaction) throws IdentityRuntimeException {\n+\n+        try {\n+            Connection dbConnection = dataSource.getConnection();\n+            if (shouldApplyTransaction) {\n+                dbConnection.setAutoCommit(false);\n+                try {\n+                    dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                } catch (SQLException e) {\n+                    // Handling startup error for postgresql Ref: https://github.com/wso2/product-is/issues/3545\n+                    // Active SQL Transaction means that connection is not committed.\n+                    // Need to commit before setting isolation property.\n+                    if (dbConnection.getMetaData().getDriverName().contains(POSTGRESQL_DATABASE)\n+                            && PG_ACTIVE_SQL_TRANSACTION_STATE.equals(e.getSQLState())) {\n+                        dbConnection.commit();\n+                        dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                    }\n+                }\n+            }\n+            return dbConnection;\n+        } catch (SQLException e) {\n+            String errMsg = \"Error when getting a database connection object from the UM data source.\";\n+            throw IdentityRuntimeException.error(errMsg, e);\n+        }\n+    }\n+\n+    /**\n+     * Revoke the transaction when catch then sql transaction errors.\n+     *\n+     * @param dbConnection database connection.\n+     */\n+    public void rollbackTransaction(Connection dbConnection) {\n+\n+        try {\n+            if (dbConnection != null) {\n+                dbConnection.rollback();\n+            }\n+        } catch (SQLException e1) {\n+            log.error(\"An error occurred while rolling back transactions. \", e1);\n+        }\n+    }\n+\n+    /**\n+     * Commit the transaction.\n+     *\n+     * @param dbConnection database connection.\n+     */\n+    public void commitTransaction(Connection dbConnection) {\n+\n+        try {\n+            if (dbConnection != null) {\n+                dbConnection.commit();\n+            }\n+        } catch (SQLException e1) {\n+            log.error(\"An error occurred while commit transactions. \", e1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNDM2Mw==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456324363", "createdAt": "2020-07-17T09:18:26Z", "author": {"login": "ashensw"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "diffHunk": "@@ -69,4 +75,69 @@ private void initDatasource() {\n             log.error(\"Error while retrieving user management data source\", e);\n         }\n     }\n+\n+    /**\n+     * Returns an database connection for UM data source.\n+     *\n+     * @param shouldApplyTransaction apply transaction or not\n+     * @return Database connection.\n+     * @throws IdentityRuntimeException Exception occurred when getting the data source.\n+     */\n+    public Connection getDBConnection(boolean shouldApplyTransaction) throws IdentityRuntimeException {\n+\n+        try {\n+            Connection dbConnection = dataSource.getConnection();\n+            if (shouldApplyTransaction) {\n+                dbConnection.setAutoCommit(false);\n+                try {\n+                    dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                } catch (SQLException e) {\n+                    // Handling startup error for postgresql Ref: https://github.com/wso2/product-is/issues/3545\n+                    // Active SQL Transaction means that connection is not committed.\n+                    // Need to commit before setting isolation property.\n+                    if (dbConnection.getMetaData().getDriverName().contains(POSTGRESQL_DATABASE)\n+                            && PG_ACTIVE_SQL_TRANSACTION_STATE.equals(e.getSQLState())) {\n+                        dbConnection.commit();\n+                        dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                    }\n+                }\n+            }\n+            return dbConnection;\n+        } catch (SQLException e) {\n+            String errMsg = \"Error when getting a database connection object from the UM data source.\";\n+            throw IdentityRuntimeException.error(errMsg, e);\n+        }\n+    }\n+\n+    /**\n+     * Revoke the transaction when catch then sql transaction errors.\n+     *\n+     * @param dbConnection database connection.\n+     */\n+    public void rollbackTransaction(Connection dbConnection) {\n+\n+        try {\n+            if (dbConnection != null) {\n+                dbConnection.rollback();\n+            }\n+        } catch (SQLException e1) {\n+            log.error(\"An error occurred while rolling back transactions. \", e1);\n+        }\n+    }\n+\n+    /**\n+     * Commit the transaction.\n+     *\n+     * @param dbConnection database connection.\n+     */\n+    public void commitTransaction(Connection dbConnection) {\n+\n+        try {\n+            if (dbConnection != null) {\n+                dbConnection.commit();\n+            }\n+        } catch (SQLException e1) {\n+            log.error(\"An error occurred while commit transactions. \", e1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxODI5Mg=="}, "originalCommit": {"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ0NzYyOnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/internal/RoleManagementServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowODoxNlrOGzLgOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzoyNFrOGzLyxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxOTAzMg==", "bodyText": "any reason why we can't have primitives here?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456319032", "createdAt": "2020-07-17T09:08:16Z", "author": {"login": "mefarazath"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/internal/RoleManagementServiceImpl.java", "diffHunk": "@@ -47,14 +47,14 @@ public RoleBasicInfo addRole(String roleName, List<String> userList, List<String\n     }\n \n     @Override\n-    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n-            throws IdentityRoleManagementException {\n+    public List<RoleBasicInfo> getRoles(Integer limit, Integer offset, String sortBy, String sortOrder,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMzc4MA==", "bodyText": "There can be null values passed from the SCIM side if the user does not provide those values. So we validate it here and assign default values.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456323780", "createdAt": "2020-07-17T09:17:24Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/internal/RoleManagementServiceImpl.java", "diffHunk": "@@ -47,14 +47,14 @@ public RoleBasicInfo addRole(String roleName, List<String> userList, List<String\n     }\n \n     @Override\n-    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n-            throws IdentityRoleManagementException {\n+    public List<RoleBasicInfo> getRoles(Integer limit, Integer offset, String sortBy, String sortOrder,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxOTAzMg=="}, "originalCommit": {"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjUyMDcwOnYy", "diffSide": "RIGHT", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToyOTo0N1rOGzMMoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDozMjo1N1rOGzOFqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzMDQwMQ==", "bodyText": "shall we use multi-line comments?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456330401", "createdAt": "2020-07-17T09:29:47Z", "author": {"login": "emswbandara"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "diffHunk": "@@ -69,4 +75,69 @@ private void initDatasource() {\n             log.error(\"Error while retrieving user management data source\", e);\n         }\n     }\n+\n+    /**\n+     * Returns an database connection for UM data source.\n+     *\n+     * @param shouldApplyTransaction apply transaction or not\n+     * @return Database connection.\n+     * @throws IdentityRuntimeException Exception occurred when getting the data source.\n+     */\n+    public Connection getDBConnection(boolean shouldApplyTransaction) throws IdentityRuntimeException {\n+\n+        try {\n+            Connection dbConnection = dataSource.getConnection();\n+            if (shouldApplyTransaction) {\n+                dbConnection.setAutoCommit(false);\n+                try {\n+                    dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                } catch (SQLException e) {\n+                    // Handling startup error for postgresql Ref: https://github.com/wso2/product-is/issues/3545", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2MTM4NQ==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456361385", "createdAt": "2020-07-17T10:32:57Z", "author": {"login": "ashensw"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "diffHunk": "@@ -69,4 +75,69 @@ private void initDatasource() {\n             log.error(\"Error while retrieving user management data source\", e);\n         }\n     }\n+\n+    /**\n+     * Returns an database connection for UM data source.\n+     *\n+     * @param shouldApplyTransaction apply transaction or not\n+     * @return Database connection.\n+     * @throws IdentityRuntimeException Exception occurred when getting the data source.\n+     */\n+    public Connection getDBConnection(boolean shouldApplyTransaction) throws IdentityRuntimeException {\n+\n+        try {\n+            Connection dbConnection = dataSource.getConnection();\n+            if (shouldApplyTransaction) {\n+                dbConnection.setAutoCommit(false);\n+                try {\n+                    dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                } catch (SQLException e) {\n+                    // Handling startup error for postgresql Ref: https://github.com/wso2/product-is/issues/3545", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzMDQwMQ=="}, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjY0MTg1OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDowNjoyOVrOGzNV_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDozMjo1M1rOGzOFkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTE4Mw==", "bodyText": "shall we add a debug log here", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456349183", "createdAt": "2020-07-17T10:06:29Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -310,20 +342,41 @@ public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManag\n             throws SQLException, IdentityRoleManagementException {\n \n         List<RoleBasicInfo> roles = new ArrayList<>();\n+        List<String> roleNames = new ArrayList<>();\n+        UserRealm userRealm = CarbonContext.getThreadLocalCarbonContext().getUserRealm();\n         try (ResultSet resultSet = statement.executeQuery()) {\n             while (resultSet.next()) {\n-                String name = resultSet.getString(1);\n-                // Append the internal domain.\n-                if (!name.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n-                    name = UserCoreConstants.INTERNAL_DOMAIN + CarbonConstants.DOMAIN_SEPARATOR + name;\n-                }\n+                String roleName = resultSet.getString(1);\n \n-                roles.add(new RoleBasicInfo(getRoleIDByName(name, tenantDomain), name));\n+                // Skip the Internal/everyone role.\n+                if (isInternalEveryoneRole(roleName, userRealm)) {\n+                    continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2MTM2Mw==", "bodyText": "Added and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456361363", "createdAt": "2020-07-17T10:32:53Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -310,20 +342,41 @@ public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManag\n             throws SQLException, IdentityRoleManagementException {\n \n         List<RoleBasicInfo> roles = new ArrayList<>();\n+        List<String> roleNames = new ArrayList<>();\n+        UserRealm userRealm = CarbonContext.getThreadLocalCarbonContext().getUserRealm();\n         try (ResultSet resultSet = statement.executeQuery()) {\n             while (resultSet.next()) {\n-                String name = resultSet.getString(1);\n-                // Append the internal domain.\n-                if (!name.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n-                    name = UserCoreConstants.INTERNAL_DOMAIN + CarbonConstants.DOMAIN_SEPARATOR + name;\n-                }\n+                String roleName = resultSet.getString(1);\n \n-                roles.add(new RoleBasicInfo(getRoleIDByName(name, tenantDomain), name));\n+                // Skip the Internal/everyone role.\n+                if (isInternalEveryoneRole(roleName, userRealm)) {\n+                    continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTE4Mw=="}, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjY0MzM0OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDowNjo1NlrOGzNW2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDozMjo0NlrOGzOFYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTQwMQ==", "bodyText": "let's add context info.. e.g. tenant", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456349401", "createdAt": "2020-07-17T10:06:56Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -310,20 +342,41 @@ public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManag\n             throws SQLException, IdentityRoleManagementException {\n \n         List<RoleBasicInfo> roles = new ArrayList<>();\n+        List<String> roleNames = new ArrayList<>();\n+        UserRealm userRealm = CarbonContext.getThreadLocalCarbonContext().getUserRealm();\n         try (ResultSet resultSet = statement.executeQuery()) {\n             while (resultSet.next()) {\n-                String name = resultSet.getString(1);\n-                // Append the internal domain.\n-                if (!name.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n-                    name = UserCoreConstants.INTERNAL_DOMAIN + CarbonConstants.DOMAIN_SEPARATOR + name;\n-                }\n+                String roleName = resultSet.getString(1);\n \n-                roles.add(new RoleBasicInfo(getRoleIDByName(name, tenantDomain), name));\n+                // Skip the Internal/everyone role.\n+                if (isInternalEveryoneRole(roleName, userRealm)) {\n+                    continue;\n+                }\n+                roleNames.add(appendInternalDomain(roleName));\n             }\n+        } catch (UserStoreException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2MTMxNQ==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456361315", "createdAt": "2020-07-17T10:32:46Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -310,20 +342,41 @@ public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManag\n             throws SQLException, IdentityRoleManagementException {\n \n         List<RoleBasicInfo> roles = new ArrayList<>();\n+        List<String> roleNames = new ArrayList<>();\n+        UserRealm userRealm = CarbonContext.getThreadLocalCarbonContext().getUserRealm();\n         try (ResultSet resultSet = statement.executeQuery()) {\n             while (resultSet.next()) {\n-                String name = resultSet.getString(1);\n-                // Append the internal domain.\n-                if (!name.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n-                    name = UserCoreConstants.INTERNAL_DOMAIN + CarbonConstants.DOMAIN_SEPARATOR + name;\n-                }\n+                String roleName = resultSet.getString(1);\n \n-                roles.add(new RoleBasicInfo(getRoleIDByName(name, tenantDomain), name));\n+                // Skip the Internal/everyone role.\n+                if (isInternalEveryoneRole(roleName, userRealm)) {\n+                    continue;\n+                }\n+                roleNames.add(appendInternalDomain(roleName));\n             }\n+        } catch (UserStoreException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTQwMQ=="}, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjY0Njc5OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDowODoxMFrOGzNY5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDozMjozN1rOGzOFIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTkyNg==", "bodyText": "let's use multi-line comments", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456349926", "createdAt": "2020-07-17T10:08:10Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -664,55 +754,73 @@ public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleMa\n                 throw new IdentityRoleManagementClientException(OPERATION_FORBIDDEN.getCode(),\n                         \"Invalid operation. Role: \" + roleName + \" Cannot be deleted.\");\n             }\n-        } catch (org.wso2.carbon.user.api.UserStoreException e) {\n+        } catch (UserStoreException e) {\n             throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n                     \"Error while getting the realmConfiguration.\", e);\n         }\n \n-        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n-            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, DELETE_ROLE_SQL)) {\n-                statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n-                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n-                statement.executeUpdate();\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection(true)) {\n+            try {\n+                try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, DELETE_ROLE_SQL)) {\n+                    statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                    statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                    statement.executeUpdate();\n+                }\n+\n+                // Delete the role from IDN_SCIM_GROUP table.\n+                deleteSCIMRole(roleName, tenantDomain);\n+\n+                // UM_ROLE_PERMISSION Table, roles are associated with Domain ID.\n+                // At this moment Role name doesn't contain the Domain prefix.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 458}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2MTI0OQ==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456361249", "createdAt": "2020-07-17T10:32:37Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -664,55 +754,73 @@ public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleMa\n                 throw new IdentityRoleManagementClientException(OPERATION_FORBIDDEN.getCode(),\n                         \"Invalid operation. Role: \" + roleName + \" Cannot be deleted.\");\n             }\n-        } catch (org.wso2.carbon.user.api.UserStoreException e) {\n+        } catch (UserStoreException e) {\n             throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n                     \"Error while getting the realmConfiguration.\", e);\n         }\n \n-        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n-            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, DELETE_ROLE_SQL)) {\n-                statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n-                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n-                statement.executeUpdate();\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection(true)) {\n+            try {\n+                try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, DELETE_ROLE_SQL)) {\n+                    statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                    statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                    statement.executeUpdate();\n+                }\n+\n+                // Delete the role from IDN_SCIM_GROUP table.\n+                deleteSCIMRole(roleName, tenantDomain);\n+\n+                // UM_ROLE_PERMISSION Table, roles are associated with Domain ID.\n+                // At this moment Role name doesn't contain the Domain prefix.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTkyNg=="}, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 458}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjY1MTUyOnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDowOTo1MFrOGzNb5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDoyMToxOVrOGzNwzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MDY5Mg==", "bodyText": "why do we set autocommit to false?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456350692", "createdAt": "2020-07-17T10:09:50Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -794,14 +902,14 @@ public boolean isExistingRoleID(String roleID, String tenantDomain) throws Ident\n                     userList.add(new UserBasicInfo(user.getUserID(), user.getDomainQualifiedUsername()));\n                 }\n             }\n-        } catch (org.wso2.carbon.user.api.UserStoreException e) {\n+        } catch (UserStoreException e) {\n             throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n                     \"Error while getting the realmConfiguration.\", e);\n         }\n \n         List<String> disabledDomainName = getDisabledDomainNames();\n \n-        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection(false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 555}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1NjA0Ng==", "bodyText": "This will not set autocommit false.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456356046", "createdAt": "2020-07-17T10:21:19Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -794,14 +902,14 @@ public boolean isExistingRoleID(String roleID, String tenantDomain) throws Ident\n                     userList.add(new UserBasicInfo(user.getUserID(), user.getDomainQualifiedUsername()));\n                 }\n             }\n-        } catch (org.wso2.carbon.user.api.UserStoreException e) {\n+        } catch (UserStoreException e) {\n             throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n                     \"Error while getting the realmConfiguration.\", e);\n         }\n \n         List<String> disabledDomainName = getDisabledDomainNames();\n \n-        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection(false)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MDY5Mg=="}, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 555}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjY1NDUyOnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDoxMDo0OVrOGzNdog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDozMjozMlrOGzOE7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MTEzOA==", "bodyText": "StringUtils.isNotEmpty(domain) is redundant here", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456351138", "createdAt": "2020-07-17T10:10:49Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -855,8 +969,10 @@ protected String getUserIDByName(String name, String tenantDomain) throws Identi\n                         String name = resultSet.getString(1);\n                         String domain = resultSet.getString(2);\n                         if (!disabledDomainName.contains(domain)) {\n-                            if (StringUtils.isNotEmpty(domain)) {\n+                            if (StringUtils.isNotEmpty(domain) && !StringUtils.equals(primaryDomainName, domain)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 579}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM2MTE5OA==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456361198", "createdAt": "2020-07-17T10:32:32Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -855,8 +969,10 @@ protected String getUserIDByName(String name, String tenantDomain) throws Identi\n                         String name = resultSet.getString(1);\n                         String domain = resultSet.getString(2);\n                         if (!disabledDomainName.contains(domain)) {\n-                            if (StringUtils.isNotEmpty(domain)) {\n+                            if (StringUtils.isNotEmpty(domain) && !StringUtils.equals(primaryDomainName, domain)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MTEzOA=="}, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 579}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2621, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}