{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNTQ2NjM5", "number": 2994, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTowNDoxNFrOEKbXoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTowNDoxNFrOEKbXoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzY5NjMyOnYy", "diffSide": "RIGHT", "path": "components/claim-mgt/org.wso2.carbon.identity.claim.metadata.mgt/src/main/java/org/wso2/carbon/identity/claim/metadata/mgt/dao/ExternalClaimDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTowNDoxNFrOGrdY0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTowNDoxNFrOGrdY0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMzQ0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/wso2/carbon-identity-framework/pull/2994#discussion_r448223440", "createdAt": "2020-07-01T09:04:14Z", "author": {"login": "tharindu-bandara"}, "path": "components/claim-mgt/org.wso2.carbon.identity.claim.metadata.mgt/src/main/java/org/wso2/carbon/identity/claim/metadata/mgt/dao/ExternalClaimDAO.java", "diffHunk": "@@ -259,10 +243,61 @@ private String getClaimMapping(Connection connection, int externalClaimId, int t\n         if (StringUtils.isBlank(mappedLocalClaimURI)) {\n             throw new ClaimMetadataException(\"Invalid external claim URI. Claim mapping cannot be empty.\");\n         }\n-\n         return mappedLocalClaimURI;\n     }\n \n+    /**\n+     * This method retrieve the external claim, mapped URI,claim properties of the given claimDialectURI\n+     *\n+     * @param connection connection to the DB\n+     * @param claimDialectURI claimDialectURI to retrieve external claims\n+     * @param tenantId  tenantID of the claims to be retrieved\n+     * @return  List of External claims\n+     * @throws ClaimMetadataException\n+     */\n+    private List<ExternalClaim> getExternalClaimsFromDB(Connection connection, String claimDialectURI, int tenantId)\n+            throws ClaimMetadataException {\n+\n+        Map<Integer, ExternalClaim> claimMap = new HashMap<>();\n+        Map<String, String> propmap;\n+\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        String query = SQLConstants.GET_CLAIMS;\n+\n+        try {\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, claimDialectURI);\n+            prepStmt.setInt(2, tenantId);\n+            prepStmt.setInt(3, tenantId);\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+                String claimPropertyName = rs.getString(SQLConstants.PROPERTY_NAME_COLUMN);\n+                String claimPropertyValue = rs.getString(SQLConstants.PROPERTY_VALUE_COLUMN);\n+                int localId = rs.getInt(SQLConstants.ID_COLUMN);\n+                if (claimMap.get(localId) == null) {\n+                    String mappedURI = rs.getString(SQLConstants.MAPPED_URI_COLUMN);\n+                    String claimURI = rs.getString(SQLConstants.CLAIM_URI_COLUMN);\n+                    propmap = new HashMap<>();\n+                    propmap.put(claimPropertyName, claimPropertyValue);\n+                    ExternalClaim temp = new ExternalClaim(claimDialectURI, claimURI, mappedURI, propmap);\n+                    claimMap.put(localId, temp);\n+                } else {\n+                    claimMap.get(localId).getClaimProperties().put(claimPropertyName, claimPropertyValue);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            throw new ClaimMetadataException(\"Error while listing claims for dialect \" + claimDialectURI, e);\n+        } finally {\n+            IdentityDatabaseUtil.closeResultSet(rs);\n+            IdentityDatabaseUtil.closeStatement(prepStmt);\n+        }\n+        return new ArrayList<ExternalClaim>(claimMap.values());\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c68125edc35c06cdbe9a2208821c46ea4cc4cfea"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2590, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}