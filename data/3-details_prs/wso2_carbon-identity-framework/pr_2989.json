{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNzc4OTQ2", "number": 2989, "title": "Introduce CORS configurations for the CORS Management OSGi service", "bodyText": "Description:\nThis feature will extend the existing CORS management service in order to implement CORS Configurations. This allows the CORS configurations to be set at the deployment stage of the IS.\nRelated: wso2/product-is#8337", "createdAt": "2020-06-30T04:44:08Z", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989", "merged": true, "mergeCommit": {"oid": "63265fd4fb631a0793c0da5cdb934de6084e4946"}, "closed": true, "closedAt": "2020-07-10T12:44:53Z", "author": {"login": "ivantha"}, "timelineItems": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwPVeogFqTQzOTY5NDc4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABczibAAgBqjM1MzM2MDM1NzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Njk0Nzgy", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-439694782", "createdAt": "2020-06-30T06:06:29Z", "commit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjowNjoyOVrOGqtA-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjowNjoyOVrOGqtA-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMDkwNw==", "bodyText": "same error code as: ERROR_CODE_CORS_RETRIEVE", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447430907", "createdAt": "2020-06-30T06:06:29Z", "author": {"login": "dewniMW"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -24,55 +24,144 @@\n  */\n public enum ErrorMessages {\n \n+    /**\n+     * Unable to retrieve CORS.\n+     */\n     ERROR_CODE_CORS_RETRIEVE(\"CMS-65001\",\n             \"Unable to retrieve CORS Origins.\",\n             \"Server encountered an error while retrieving the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to set CORS.\n+     */\n     ERROR_CODE_CORS_SET(\"CMS-65002\",\n             \"Unable to set CORS Origins.\",\n             \"Server encountered an error while setting the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to add CORS.\n+     */\n     ERROR_CODE_CORS_ADD(\"CMS-65003\",\n             \"Unable to add CORS Origins.\",\n             \"Server encountered an error while adding the CORS Origins to %s.\"),\n+\n+    /**\n+     * Unable to delete CORS.\n+     */\n     ERROR_CODE_CORS_DELETE(\"CMS-65004\",\n             \"Unable to delete CORS Origins.\",\n             \"Server encountered an error while deleting the CORS Origins of %s.\"),\n-    ERROR_CODE_INVALID_TENANT_DOMAIN(\"CMS-60001\",\n+\n+    /**\n+     * Unable to retrieve CORS configuration.\n+     */\n+    ERROR_CODE_CORS_CONFIG_RETRIEVE(\"CMS-65001\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Njk0OTg3", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-439694987", "createdAt": "2020-06-30T06:06:58Z", "commit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjowNjo1OFrOGqtBlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjowNjo1OFrOGqtBlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMTA2Mw==", "bodyText": "same error code as: ERROR_CODE_CORS_SET", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447431063", "createdAt": "2020-06-30T06:06:58Z", "author": {"login": "dewniMW"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -24,55 +24,144 @@\n  */\n public enum ErrorMessages {\n \n+    /**\n+     * Unable to retrieve CORS.\n+     */\n     ERROR_CODE_CORS_RETRIEVE(\"CMS-65001\",\n             \"Unable to retrieve CORS Origins.\",\n             \"Server encountered an error while retrieving the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to set CORS.\n+     */\n     ERROR_CODE_CORS_SET(\"CMS-65002\",\n             \"Unable to set CORS Origins.\",\n             \"Server encountered an error while setting the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to add CORS.\n+     */\n     ERROR_CODE_CORS_ADD(\"CMS-65003\",\n             \"Unable to add CORS Origins.\",\n             \"Server encountered an error while adding the CORS Origins to %s.\"),\n+\n+    /**\n+     * Unable to delete CORS.\n+     */\n     ERROR_CODE_CORS_DELETE(\"CMS-65004\",\n             \"Unable to delete CORS Origins.\",\n             \"Server encountered an error while deleting the CORS Origins of %s.\"),\n-    ERROR_CODE_INVALID_TENANT_DOMAIN(\"CMS-60001\",\n+\n+    /**\n+     * Unable to retrieve CORS configuration.\n+     */\n+    ERROR_CODE_CORS_CONFIG_RETRIEVE(\"CMS-65001\",\n+            \"Unable to retrieve CORS configuration.\",\n+            \"Server encountered an error while retrieving the CORS configuration of %s.\"),\n+\n+    /**\n+     * Unable to set CORS configuration.\n+     */\n+    ERROR_CODE_CORS_CONFIG_SET(\"CMS-65002\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Njk2NjQ4", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-439696648", "createdAt": "2020-06-30T06:11:00Z", "commit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoxMTowMFrOGqtG8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoxMTowMFrOGqtG8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMjQzMg==", "bodyText": "missing license header", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447432432", "createdAt": "2020-06-30T06:11:00Z", "author": {"login": "dewniMW"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/CORSConfigurationToResourceAdd.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Njk3MjQ5", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-439697249", "createdAt": "2020-06-30T06:12:16Z", "commit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoxMjoxNlrOGqtI4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoxMjoxNlrOGqtI4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMjkyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (value != null) {\n          \n          \n            \n                    if (StringUtils.isNotBlank(value)) {", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447432929", "createdAt": "2020-06-30T06:12:16Z", "author": {"login": "dewniMW"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/CORSConfigurationToResourceAdd.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;\n+\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSConfiguration;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.ALLOW_ANY_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.ALLOW_GENERIC_HTTP_REQUESTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.ALLOW_SUBDOMAINS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.EXPOSED_HEADERS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.MAX_AGE;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.SUPPORTED_HEADERS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.SUPPORTED_METHODS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.SUPPORTS_CREDENTIALS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.SUPPORT_ANY_HEADER;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.TAG_REQUESTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_CONFIGURATION_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.util.SerializationUtils.serializeStringSet;\n+\n+/**\n+ * Converts a CORSConfiguration object to a ConfigurationManagement Resource.\n+ */\n+public class CORSConfigurationToResourceAdd implements Function<CORSConfiguration, ResourceAdd> {\n+\n+    @Override\n+    public ResourceAdd apply(CORSConfiguration corsConfiguration) {\n+\n+        ResourceAdd resourceAdd = new ResourceAdd();\n+        resourceAdd.setName(CORS_CONFIGURATION_RESOURCE_NAME);\n+\n+        List<Attribute> attributes = new ArrayList<>();\n+        addAttribute(attributes, ALLOW_GENERIC_HTTP_REQUESTS,\n+                String.valueOf(corsConfiguration.isAllowGenericHttpRequests()));\n+        addAttribute(attributes, ALLOW_ANY_ORIGIN, String.valueOf(corsConfiguration.isAllowAnyOrigin()));\n+        addAttribute(attributes, ALLOW_SUBDOMAINS, String.valueOf(corsConfiguration.isAllowSubdomains()));\n+        addAttribute(attributes, SUPPORTED_METHODS, serializeStringSet(corsConfiguration.getSupportedMethods()));\n+        addAttribute(attributes, SUPPORT_ANY_HEADER, String.valueOf(corsConfiguration.isSupportAnyHeader()));\n+        addAttribute(attributes, SUPPORTED_HEADERS, serializeStringSet(corsConfiguration.getSupportedHeaders()));\n+        addAttribute(attributes, EXPOSED_HEADERS, serializeStringSet(corsConfiguration.getExposedHeaders()));\n+        addAttribute(attributes, SUPPORTS_CREDENTIALS, String.valueOf(corsConfiguration.isSupportsCredentials()));\n+        addAttribute(attributes, MAX_AGE, String.valueOf(corsConfiguration.getMaxAge()));\n+        addAttribute(attributes, TAG_REQUESTS, String.valueOf(corsConfiguration.isTagRequests()));\n+\n+        resourceAdd.setAttributes(attributes);\n+        return resourceAdd;\n+    }\n+\n+    private void addAttribute(List<Attribute> attributeList, String key, String value) {\n+\n+        if (value != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Njk3NTc1", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-439697575", "createdAt": "2020-06-30T06:13:01Z", "commit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoxMzowMVrOGqtJ-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoxMzowMVrOGqtJ-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMzIwOQ==", "bodyText": "missing license header", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447433209", "createdAt": "2020-06-30T06:13:01Z", "author": {"login": "dewniMW"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ResourceToCORSConfiguration.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Njk4NDAx", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-439698401", "createdAt": "2020-06-30T06:14:52Z", "commit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoxNDo1MlrOGqtMkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoxNDo1MlrOGqtMkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMzg3NA==", "bodyText": "Is it expected to log and ignore the IOException?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447433874", "createdAt": "2020-06-30T06:14:52Z", "author": {"login": "dewniMW"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ResourceToValidatedOrigin.java", "diffHunk": "@@ -23,32 +23,40 @@\n import org.apache.commons.logging.LogFactory;\n import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n-import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n \n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.function.Function;\n \n /**\n- * Converts a ConfigurationManagement Resource to a list of CORSOrigins.\n+ * Converts a ConfigurationManagement Resource to a list of ValidatedOrigins.\n  */\n-public class ResourceToCORSOrigin implements CheckedFunction<Resource, List<CORSOrigin>> {\n+public class ResourceToValidatedOrigin implements Function<Resource, List<ValidatedOrigin>> {\n \n-    private static final Log log = LogFactory.getLog(ResourceToCORSOrigin.class);\n+    private static final Log log = LogFactory.getLog(ResourceToValidatedOrigin.class);\n \n     @Override\n-    public List<CORSOrigin> apply(Resource resource) throws IOException {\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-\n-        ArrayList<CORSOrigin> corsOrigins = new ArrayList<>();\n-        if (resource.isHasAttribute()) {\n-            List<Attribute> attributes = resource.getAttributes();\n-            for (Attribute attribute : attributes) {\n-                CORSOrigin corsOrigin = mapper.readValue(attribute.getValue(), CORSOrigin.class);\n-                corsOrigins.add(corsOrigin);\n+    public List<ValidatedOrigin> apply(Resource resource) {\n+\n+        try {\n+            ObjectMapper mapper = new ObjectMapper();\n+\n+            ArrayList<ValidatedOrigin> corsOrigins = new ArrayList<>();\n+            if (resource.isHasAttribute()) {\n+                List<Attribute> attributes = resource.getAttributes();\n+                for (Attribute attribute : attributes) {\n+                    ValidatedOrigin corsOrigin = mapper.readValue(attribute.getValue(), ValidatedOrigin.class);\n+                    corsOrigins.add(corsOrigin);\n+                }\n+            }\n+            return corsOrigins;\n+        } catch (IOException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Njk4OTUw", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-439698950", "createdAt": "2020-06-30T06:16:03Z", "commit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoxNjowM1rOGqtOmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoxNjowM1rOGqtOmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNDM5Mg==", "bodyText": "Is it expected to log and ignore the JsonProcessingException?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447434392", "createdAt": "2020-06-30T06:16:03Z", "author": {"login": "dewniMW"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ValidatedOriginToAttribute.java", "diffHunk": "@@ -23,24 +23,33 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n-import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n+\n+import java.util.function.Function;\n \n /**\n- * Converts a CORSOrigin to a ConfigurationManagement Resource attribute.\n+ * Converts a ValidatedOrigin to a ConfigurationManagement Resource attribute.\n  */\n-public class CORSOriginToAttribute implements CheckedFunction<CORSOrigin, Attribute> {\n+public class ValidatedOriginToAttribute implements Function<ValidatedOrigin, Attribute> {\n \n-    private static final Log log = LogFactory.getLog(CORSOriginToAttribute.class);\n+    private static final Log log = LogFactory.getLog(ValidatedOriginToAttribute.class);\n \n     @Override\n-    public Attribute apply(CORSOrigin corsOrigin) throws JsonProcessingException {\n+    public Attribute apply(ValidatedOrigin corsOrigin) {\n \n-        ObjectMapper mapper = new ObjectMapper();\n+        try {\n+            ObjectMapper mapper = new ObjectMapper();\n \n-        Attribute attribute = new Attribute();\n-        attribute.setKey(String.valueOf(corsOrigin.hashCode()));\n-        String corsOriginString = mapper.writeValueAsString(corsOrigin);\n-        attribute.setValue(corsOriginString);\n-        return attribute;\n+            Attribute attribute = new Attribute();\n+            attribute.setKey(String.valueOf(corsOrigin.hashCode()));\n+            String corsOriginString = mapper.writeValueAsString(corsOrigin);\n+            attribute.setValue(corsOriginString);\n+            return attribute;\n+        } catch (JsonProcessingException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(e);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzAxNDg4", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-439701488", "createdAt": "2020-06-30T06:21:31Z", "commit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoyMTozMlrOGqtXPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoyMTozMlrOGqtXPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNjYwNg==", "bodyText": "can't we inline line 66 to 69?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447436606", "createdAt": "2020-06-30T06:21:32Z", "author": {"login": "dewniMW"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/CORSConfigurationUtil.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;\n+\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.base.IdentityConstants;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSConfiguration;\n+import org.wso2.carbon.identity.cors.mgt.core.model.Origin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility class for CORS configuration operations.\n+ */\n+public class CORSConfigurationUtil {\n+\n+    private static final Log log = LogFactory.getLog(CORSConfigurationUtil.class);\n+\n+    /**\n+     * Read the default CORS configuration properties in the identity.xml.\n+     *\n+     * @return Server default {@code CORSConfiguration} object.\n+     */\n+    public static CORSConfiguration getDefaultCORSConfiguration() {\n+\n+        CORSConfiguration corsConfiguration = new CORSConfiguration();\n+\n+        corsConfiguration.setAllowGenericHttpRequests(\n+                Boolean.parseBoolean(IdentityUtil.getProperty(IdentityConstants.CORS.ALLOW_GENERIC_HTTP_REQUESTS)));\n+\n+        String allowedOrigins = IdentityUtil.getProperty(IdentityConstants.CORS.ALLOWED_ORIGINS).trim();\n+        if (allowedOrigins.equals(\"*\")) {\n+            corsConfiguration.setAllowAnyOrigin(true);\n+        } else {\n+            corsConfiguration.setAllowAnyOrigin(false);\n+\n+            List<Origin> origins = parseWords(allowedOrigins)\n+                    .stream()\n+                    .map(Origin::new)\n+                    .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzAzMDYy", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-439703062", "createdAt": "2020-06-30T06:24:48Z", "commit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoyNDo0OFrOGqtcaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoyNDo0OFrOGqtcaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNzkzMQ==", "bodyText": "end the exception message with a full stop. Do in all applicable places.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447437931", "createdAt": "2020-06-30T06:24:48Z", "author": {"login": "dewniMW"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/Origin.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.model;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Resource request origin (not validated), as defined in The Web Origin Concept (RFC 6454).\n+ */\n+public class Origin {\n+\n+    /**\n+     * A random UUID.\n+     */\n+    String id;\n+\n+    /**\n+     * The original origin value, used in hash code generation and equality checking.\n+     */\n+    String value;\n+\n+    /**\n+     * Creates a new origin from the specified URI string. Note that the syntax is not validated.\n+     *\n+     * @param value The URI string for the origin. Must not be {@code null}.\n+     */\n+    public Origin(final String value) {\n+\n+        this.id = UUID.randomUUID().toString();\n+\n+        if (value == null) {\n+            throw new IllegalArgumentException(\"The origin value must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzA0MTU3", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-439704157", "createdAt": "2020-06-30T06:27:06Z", "commit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoyNzowNlrOGqtgRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoyNzowNlrOGqtgRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzODkxOQ==", "bodyText": "better to use StringUtil.isNotBlank method. do this in all applicable places.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447438919", "createdAt": "2020-06-30T06:27:06Z", "author": {"login": "dewniMW"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/Origin.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.model;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Resource request origin (not validated), as defined in The Web Origin Concept (RFC 6454).\n+ */\n+public class Origin {\n+\n+    /**\n+     * A random UUID.\n+     */\n+    String id;\n+\n+    /**\n+     * The original origin value, used in hash code generation and equality checking.\n+     */\n+    String value;\n+\n+    /**\n+     * Creates a new origin from the specified URI string. Note that the syntax is not validated.\n+     *\n+     * @param value The URI string for the origin. Must not be {@code null}.\n+     */\n+    public Origin(final String value) {\n+\n+        this.id = UUID.randomUUID().toString();\n+\n+        if (value == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzA1MDU5", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-439705059", "createdAt": "2020-06-30T06:28:57Z", "commit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoyODo1N1rOGqtjMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoyODo1N1rOGqtjMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzOTY2NA==", "bodyText": "why is this test case commented out?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447439664", "createdAt": "2020-06-30T06:28:57Z", "author": {"login": "dewniMW"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementServiceTest.java", "diffHunk": "@@ -177,18 +190,18 @@ public void testAddCORSOrigins() throws ConfigurationManagementException, CORSMa\n                 SAMPLE_ORIGIN_LIST_2.stream()).collect(Collectors.toList()), corsOrigins);\n     }\n \n-    @Test(priority = 4)\n+    @Test(priority = 5)\n     public void testDeleteCORSOrigins() throws CORSManagementServiceException, ConfigurationManagementException {\n \n-        corsManagementService.setCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_1);\n-        corsManagementService.deleteCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_1.subList(0, 2));\n-        List<CORSOrigin> corsOrigins = configurationManager.getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n-                CORS_ORIGIN_RESOURCE_NAME)\n-                .getAttributes()\n-                .stream()\n-                .map(CORSServiceTestHelper::attributeToCORSOrigin)\n-                .collect(Collectors.toList());\n-\n-        assertEquals(SAMPLE_ORIGIN_LIST_1.subList(2, SAMPLE_ORIGIN_LIST_1.size()), corsOrigins);\n+//        corsManagementService.setCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzA2MTIz", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-439706123", "createdAt": "2020-06-30T06:31:01Z", "commit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjozMTowMVrOGqtmww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjozMTowMVrOGqtmww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0MDU3OQ==", "bodyText": "shouldn't we allow these values to be configurable via the deployment.toml?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447440579", "createdAt": "2020-06-30T06:31:01Z", "author": {"login": "dewniMW"}, "path": "features/identity-core/org.wso2.carbon.identity.core.server.feature/resources/identity.xml.j2", "diffHunk": "@@ -2155,4 +2155,16 @@\n \n     <!-- Configuration for allowing an uninterrupted token building flow upon facing claim handling errors. -->\n     <ContinueOnClaimHandlingError>{{continue_on_claim_handling_error}}</ContinueOnClaimHandlingError>\n+\n+    <!-- CORS -->\n+    <CORS>\n+        <AllowGenericHttpRequests>true</AllowGenericHttpRequests>\n+        <AllowSubdomains>false</AllowSubdomains>\n+        <SupportedMethods>GET, POST, HEAD, OPTIONS</SupportedMethods>\n+        <SupportedHeaders>*</SupportedHeaders>\n+        <ExposedHeaders></ExposedHeaders>\n+        <SupportsCredentials>true</SupportsCredentials>\n+        <MaxAge>-1</MaxAge>\n+        <TagRequests>false</TagRequests>\n+    </CORS>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/57c1c7e82b9a11d579fa6786185be699138a413e", "committedDate": "2020-06-30T04:39:57Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "7738611bb8164b7ec35433a066c7baa7ea771668", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/7738611bb8164b7ec35433a066c7baa7ea771668", "committedDate": "2020-06-30T07:07:01Z", "message": "Add tenant CORS configurations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzIwMzg0", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-439720384", "createdAt": "2020-06-30T06:56:59Z", "commit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjo1NzowMFrOGquU6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzowMTo1MFrOGqueDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MjM5NQ==", "bodyText": "Shall we change the return type.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447452395", "createdAt": "2020-06-30T06:57:00Z", "author": {"login": "GANGANI"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementService.java", "diffHunk": "@@ -35,7 +36,7 @@\n      * @return List<CORSOrigins> Returns a list of CORS Origins configured by the tenant as CORSOrigin objects.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MzM2MQ==", "bodyText": "Shall we change the param type.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447453361", "createdAt": "2020-06-30T06:58:56Z", "author": {"login": "GANGANI"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementService.java", "diffHunk": "@@ -44,7 +45,7 @@\n      * @param corsOrigins  A list of CORS Origins to be set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1NDMxOA==", "bodyText": "Since you have changed a parameter type of an already existing method, won't this break the existing implementations?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447454318", "createdAt": "2020-06-30T07:00:52Z", "author": {"login": "GANGANI"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementService.java", "diffHunk": "@@ -53,14 +54,33 @@\n      * @param corsOrigins  A list of CORS Origins to be added.\n      * @throws CORSManagementServiceException\n      */\n-    void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void addCORSOrigins(String tenantDomain, List<Origin> corsOrigins) throws CORSManagementServiceException;\n \n     /**\n      * Delete the CORS Origin(s) from the existing CORS Origin list of the tenant.\n      *\n      * @param tenantDomain The tenant domain.\n-     * @param corsOrigins  A list of CORS Origins to be deleted.\n+     * @param ids          A list of CORS Origin IDs to be deleted.\n      * @throws CORSManagementServiceException\n      */\n-    void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void deleteCORSOrigins(String tenantDomain, List<String> ids) throws CORSManagementServiceException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1NDczMg==", "bodyText": "Shall we change the param type? Check other places as well.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447454732", "createdAt": "2020-06-30T07:01:50Z", "author": {"login": "GANGANI"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementService.java", "diffHunk": "@@ -53,14 +54,33 @@\n      * @param corsOrigins  A list of CORS Origins to be added.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c1c7e82b9a11d579fa6786185be699138a413e"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7738611bb8164b7ec35433a066c7baa7ea771668", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/7738611bb8164b7ec35433a066c7baa7ea771668", "committedDate": "2020-06-30T07:07:01Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "711ec5ada1a6b7a19489705c5ede54976b567ccb", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/711ec5ada1a6b7a19489705c5ede54976b567ccb", "committedDate": "2020-06-30T07:28:09Z", "message": "Add tenant CORS configurations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "711ec5ada1a6b7a19489705c5ede54976b567ccb", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/711ec5ada1a6b7a19489705c5ede54976b567ccb", "committedDate": "2020-06-30T07:28:09Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "ca3c740c8af152cee11ca335bc881e37ea406c87", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/ca3c740c8af152cee11ca335bc881e37ea406c87", "committedDate": "2020-06-30T09:19:44Z", "message": "Add tenant CORS configurations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca3c740c8af152cee11ca335bc881e37ea406c87", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/ca3c740c8af152cee11ca335bc881e37ea406c87", "committedDate": "2020-06-30T09:19:44Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "16b5fc87a83ed313cdb46b0a930a5c8dc50c0a7b", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/16b5fc87a83ed313cdb46b0a930a5c8dc50c0a7b", "committedDate": "2020-06-30T16:00:38Z", "message": "Add tenant CORS configurations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16b5fc87a83ed313cdb46b0a930a5c8dc50c0a7b", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/16b5fc87a83ed313cdb46b0a930a5c8dc50c0a7b", "committedDate": "2020-06-30T16:00:38Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "051184785c3258fddd36ea72c0d5a9d5e3ad4ed7", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/051184785c3258fddd36ea72c0d5a9d5e3ad4ed7", "committedDate": "2020-07-06T08:37:32Z", "message": "Add tenant CORS configurations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMDU0MTcw", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-443054170", "createdAt": "2020-07-06T13:02:52Z", "commit": {"oid": "051184785c3258fddd36ea72c0d5a9d5e3ad4ed7"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzowMjo1MlrOGtWUng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzowNjozMFrOGtWcSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNDgzMA==", "bodyText": "remove unncessary new line", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r450204830", "createdAt": "2020-07-06T13:02:52Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/Constants.java", "diffHunk": "@@ -23,12 +23,38 @@\n  */\n public class Constants {\n \n-    public static final String CORS_ORIGIN_RESOURCE_TYPE_NAME = \"CORS\";\n-    public static final String CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION = \"A resource type to keep the tenant \" +\n-            \"CORS Origins\";\n-    public static final String CORS_ORIGIN_RESOURCE_NAME = \"CORS_ORIGINS\";\n+    public static final String CORS_ORIGIN_RESOURCE_TYPE_NAME = \"CORS_ORIGIN\";\n+    public static final String CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION = \"A resource type to keep a tenant \" +\n+            \"CORS origin.\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051184785c3258fddd36ea72c0d5a9d5e3ad4ed7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNDk5Mw==", "bodyText": "can't we inline 27 and 28", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r450204993", "createdAt": "2020-07-06T13:03:08Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/Constants.java", "diffHunk": "@@ -23,12 +23,38 @@\n  */\n public class Constants {\n \n-    public static final String CORS_ORIGIN_RESOURCE_TYPE_NAME = \"CORS\";\n-    public static final String CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION = \"A resource type to keep the tenant \" +\n-            \"CORS Origins\";\n-    public static final String CORS_ORIGIN_RESOURCE_NAME = \"CORS_ORIGINS\";\n+    public static final String CORS_ORIGIN_RESOURCE_TYPE_NAME = \"CORS_ORIGIN\";\n+    public static final String CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION = \"A resource type to keep a tenant \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051184785c3258fddd36ea72c0d5a9d5e3ad4ed7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNTYzNg==", "bodyText": "add license", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r450205636", "createdAt": "2020-07-06T13:04:22Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ResourcesToOrigins.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051184785c3258fddd36ea72c0d5a9d5e3ad4ed7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNjc5NA==", "bodyText": "use meaningful variable names", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r450206794", "createdAt": "2020-07-06T13:06:30Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/ValidatedOrigin.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.model;\n+\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+\n+import java.net.IDN;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Locale;\n+\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_URI;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_MISSING_HOST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_MISSING_SCHEME;\n+\n+/**\n+ * Validated resource request origin, as defined in The Web Origin Concept (RFC 6454). Supported schemes are {@code\n+ * http} and {@code https}.\n+ */\n+public class ValidatedOrigin extends Origin {\n+\n+    /**\n+     * The origin scheme.\n+     */\n+    private String scheme;\n+\n+    /**\n+     * The origin host.\n+     */\n+    private String host;\n+\n+    /**\n+     * The parsed origin port, -1 for default port.\n+     */\n+    private int port = -1;\n+\n+    /**\n+     * Creates a new validated origin.\n+     *\n+     * @param origin The origin to validate. Must not be {@code null}.\n+     * @throws CORSManagementServiceClientException If the value doesn't represent a valid URI and a supported origin.\n+     */\n+    public ValidatedOrigin(final String origin) throws CORSManagementServiceClientException {\n+\n+        super(origin);\n+\n+        // Parse URI value.\n+        URI uri;\n+        try {\n+            uri = new URI(origin);\n+        } catch (URISyntaxException e) {\n+            throw new CORSManagementServiceClientException(\n+                    String.format(ERROR_CODE_INVALID_URI.getMessage(), origin),\n+                    ERROR_CODE_INVALID_URI.getCode());\n+        }\n+\n+        scheme = uri.getScheme();\n+        host = uri.getHost();\n+        port = uri.getPort();\n+\n+        if (scheme == null) {\n+            throw new CORSManagementServiceClientException(\n+                    String.format(ERROR_CODE_MISSING_SCHEME.getMessage(), origin),\n+                    ERROR_CODE_MISSING_SCHEME.getCode());\n+        }\n+\n+        // Canonicalise scheme and host.\n+        scheme = scheme.toLowerCase(Locale.ENGLISH);\n+\n+        if (host == null) {\n+            throw new CORSManagementServiceClientException(\n+                    String.format(ERROR_CODE_MISSING_HOST.getMessage(), origin),\n+                    ERROR_CODE_MISSING_HOST.getCode());\n+        }\n+\n+        // Apply the IDNA to ASCII algorithm [RFC3490] to /host/.\n+        host = IDN.toASCII(host, IDN.ALLOW_UNASSIGNED | IDN.USE_STD3_ASCII_RULES);\n+\n+        // Convert to lower case.\n+        host = host.toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Overrides {@code Object.hashCode}.\n+     *\n+     * @return The object hash code.\n+     */\n+    @Override\n+    public int hashCode() {\n+\n+        return value.hashCode();\n+    }\n+\n+    /**\n+     * Overrides {@code Object.equals()}.\n+     *\n+     * @param object The object to compare to.\n+     * @return {@code true} if the objects are both origins with the same value, else {@code false}.\n+     */\n+    @Override\n+    public boolean equals(Object object) {\n+\n+        return object != null && object.getClass() == this.getClass() && this.toString().equals(object.toString());\n+    }\n+\n+    /**\n+     * Returns the scheme.\n+     *\n+     * @return The scheme.\n+     */\n+    public String getScheme() {\n+\n+        return scheme;\n+    }\n+\n+    /**\n+     * Returns the host (name or IP address).\n+     *\n+     * @return The host name or IP address.\n+     */\n+    public String getHost() {\n+\n+        return host;\n+    }\n+\n+    /**\n+     * Returns the port number.\n+     *\n+     * @return The port number, -1 for default port.\n+     */\n+    public int getPort() {\n+\n+        return port;\n+    }\n+\n+    /**\n+     * Returns the suffix which is made up of the host name / IP address\n+     * and port (if a non-default port is specified).\n+     *\n+     * @return The suffix.\n+     */\n+    public String getSuffix() {\n+\n+        String s = host;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051184785c3258fddd36ea72c0d5a9d5e3ad4ed7"}, "originalPosition": 163}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "051184785c3258fddd36ea72c0d5a9d5e3ad4ed7", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/051184785c3258fddd36ea72c0d5a9d5e3ad4ed7", "committedDate": "2020-07-06T08:37:32Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "f9fca2664c1965479a88708d8d16b233875c2b8d", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/f9fca2664c1965479a88708d8d16b233875c2b8d", "committedDate": "2020-07-06T16:10:32Z", "message": "Add tenant CORS configurations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9fca2664c1965479a88708d8d16b233875c2b8d", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/f9fca2664c1965479a88708d8d16b233875c2b8d", "committedDate": "2020-07-06T16:10:32Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "26532700419b78be009906fe15652fe414b5617e", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/26532700419b78be009906fe15652fe414b5617e", "committedDate": "2020-07-07T07:53:03Z", "message": "Add tenant CORS configurations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26532700419b78be009906fe15652fe414b5617e", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/26532700419b78be009906fe15652fe414b5617e", "committedDate": "2020-07-07T07:53:03Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "b8fcbbfb74d3cf806f0a9ab59078212d1dd1e88d", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/b8fcbbfb74d3cf806f0a9ab59078212d1dd1e88d", "committedDate": "2020-07-07T19:37:21Z", "message": "Add tenant CORS configurations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0Mjk3MzM0", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-444297334", "createdAt": "2020-07-07T22:37:26Z", "commit": {"oid": "b8fcbbfb74d3cf806f0a9ab59078212d1dd1e88d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8fcbbfb74d3cf806f0a9ab59078212d1dd1e88d", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/b8fcbbfb74d3cf806f0a9ab59078212d1dd1e88d", "committedDate": "2020-07-07T19:37:21Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "012c2b8feef3fc42ee5aa16fa151a73fee4afa41", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/012c2b8feef3fc42ee5aa16fa151a73fee4afa41", "committedDate": "2020-07-08T01:27:03Z", "message": "Add tenant CORS configurations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NDA2NTU3", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-444406557", "createdAt": "2020-07-08T04:35:52Z", "commit": {"oid": "012c2b8feef3fc42ee5aa16fa151a73fee4afa41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDozNTo1MlrOGuXy4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDozNTo1MlrOGuXy4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI3NzUzNw==", "bodyText": "Shouldn't this be a list of origin IDs?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451277537", "createdAt": "2020-07-08T04:35:52Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementService.java", "diffHunk": "@@ -41,26 +42,52 @@\n      * Set the CORS Origins for a tenant. This method replaces any existing Origins.\n      *\n      * @param tenantDomain The tenant domain.\n-     * @param corsOrigins  A list of CORS Origins to be set.\n+     * @param appId        The  application ID that the CORS origin(s) belongs to. Should be {@code null} if the CORS\n+     *                     origin(s) belong to the tenant level.\n+     * @param origins      A list of CORS origins to be set.\n      * @throws CORSManagementServiceException\n      */\n-    void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void setCORSOrigins(String tenantDomain, String appId, List<String> origins) throws CORSManagementServiceException;\n \n     /**\n      * Add the CORS Origin(s) to the existing CORS Origin list of the tenant.\n      *\n      * @param tenantDomain The tenant domain.\n-     * @param corsOrigins  A list of CORS Origins to be added.\n+     * @param appId        The  application ID that the CORS origin(s) belongs to. Should be {@code null} if the CORS\n+     *                     origin(s) belong to the tenant level.\n+     * @param origins      A list of CORS origins to be added.\n      * @throws CORSManagementServiceException\n      */\n-    void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void addCORSOrigins(String tenantDomain, String appId, List<String> origins) throws CORSManagementServiceException;\n \n     /**\n      * Delete the CORS Origin(s) from the existing CORS Origin list of the tenant.\n      *\n      * @param tenantDomain The tenant domain.\n-     * @param corsOrigins  A list of CORS Origins to be deleted.\n+     * @param appId        The  application ID that the CORS origin(s) belongs to. Should be {@code null} if the CORS\n+     *                     origin(s) belong to the tenant level.\n+     * @param origins      A list of CORS origins to be deleted.\n      * @throws CORSManagementServiceException\n      */\n-    void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void deleteCORSOrigins(String tenantDomain, String appId, List<String> origins)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012c2b8feef3fc42ee5aa16fa151a73fee4afa41"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "012c2b8feef3fc42ee5aa16fa151a73fee4afa41", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/012c2b8feef3fc42ee5aa16fa151a73fee4afa41", "committedDate": "2020-07-08T01:27:03Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "0f892bf193808d429683cb677c185e1f1bdc3f56", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/0f892bf193808d429683cb677c185e1f1bdc3f56", "committedDate": "2020-07-08T04:42:12Z", "message": "Add tenant CORS configurations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NDM0Nzg0", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-444434784", "createdAt": "2020-07-08T06:01:45Z", "commit": {"oid": "0f892bf193808d429683cb677c185e1f1bdc3f56"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjowMTo0NVrOGuZSDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjowNzo1OVrOGuZaOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTkwMA==", "bodyText": "why was this commented?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451301900", "createdAt": "2020-07-08T06:01:45Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "diffHunk": "@@ -157,7 +162,7 @@\n                                         <limit implementation=\"org.jacoco.report.check.Limit\">\n                                             <counter>COMPLEXITY</counter>\n                                             <value>COVEREDRATIO</value>\n-<!--                                            <minimum>0.50</minimum>-->\n+                                            <!--<minimum>0.50</minimum>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f892bf193808d429683cb677c185e1f1bdc3f56"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMjI1NA==", "bodyText": "add license header", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451302254", "createdAt": "2020-07-08T06:02:54Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ResourcesToValidatedOrigins.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f892bf193808d429683cb677c185e1f1bdc3f56"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMjQwNg==", "bodyText": "use multi-line comments", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451302406", "createdAt": "2020-07-08T06:03:24Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ResourcesToValidatedOrigins.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resources;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Converts a ConfigurationManagement Resources to a list of ValidatedOrigins.\n+ */\n+public class ResourcesToValidatedOrigins implements Function<Resources, List<ValidatedOrigin>> {\n+\n+    private static final Log log = LogFactory.getLog(ResourcesToValidatedOrigins.class);\n+\n+    @Override\n+    public List<ValidatedOrigin> apply(Resources resources) {\n+\n+        ArrayList<ValidatedOrigin> validatedOrigins = new ArrayList<>();\n+        for (Resource resource : resources.getResources()) {\n+            try {\n+                ValidatedOrigin validatedOrigin = new ValidatedOrigin(resource.getResourceName());\n+                validatedOrigins.add(validatedOrigin);\n+            } catch (CORSManagementServiceClientException e) {\n+                if (log.isDebugEnabled()) {\n+                    // The program should never reach here as all the origins in the configuration management store", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f892bf193808d429683cb677c185e1f1bdc3f56"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMjU0NQ==", "bodyText": "let's add an informative error message as well", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451302545", "createdAt": "2020-07-08T06:03:51Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ResourcesToValidatedOrigins.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resources;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Converts a ConfigurationManagement Resources to a list of ValidatedOrigins.\n+ */\n+public class ResourcesToValidatedOrigins implements Function<Resources, List<ValidatedOrigin>> {\n+\n+    private static final Log log = LogFactory.getLog(ResourcesToValidatedOrigins.class);\n+\n+    @Override\n+    public List<ValidatedOrigin> apply(Resources resources) {\n+\n+        ArrayList<ValidatedOrigin> validatedOrigins = new ArrayList<>();\n+        for (Resource resource : resources.getResources()) {\n+            try {\n+                ValidatedOrigin validatedOrigin = new ValidatedOrigin(resource.getResourceName());\n+                validatedOrigins.add(validatedOrigin);\n+            } catch (CORSManagementServiceClientException e) {\n+                if (log.isDebugEnabled()) {\n+                    // The program should never reach here as all the origins in the configuration management store\n+                    // are properly validated.\n+                    log.debug(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f892bf193808d429683cb677c185e1f1bdc3f56"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMzEzMA==", "bodyText": "use a defined constant", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451303130", "createdAt": "2020-07-08T06:05:23Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -183,26 +306,60 @@ private ConfigurationManager getConfigurationManager() {\n     }\n \n     /**\n-     * Returns true if the tenant already has a particular CORS Origin.\n+     * Configuration Management API returns a ConfigurationManagementException with the error code CONFIGM_00017 when\n+     * resource is not found. This method wraps the original method and returns null if the resource is not found.\n      *\n-     * @param origin The Origin to be checked against the existing Origins.\n-     * @return {@code true} if the tenant already have the particular CORS Origin, {@code false} otherwise.\n+     * @param resourceTypeName Resource type name.\n+     * @param resourceName     Resource name.\n+     * @return Retrieved resource from the configuration store. Returns {@code null} if the resource is not found.\n      * @throws ConfigurationManagementException\n      */\n-    private boolean isDefinedCORSOriginResource(CORSOrigin origin) throws ConfigurationManagementException,\n-            IOException {\n+    private Resource getResource(String resourceTypeName, String resourceName) throws ConfigurationManagementException {\n \n-        Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n-                CORS_ORIGIN_RESOURCE_NAME);\n-        if (resource != null) {\n-            List<CORSOrigin> currentCORSOrigins = new ResourceToCORSOrigin().apply(resource);\n+        try {\n+            return getConfigurationManager().getResource(resourceTypeName, resourceName);\n+        } catch (ConfigurationManagementException e) {\n+            if (e.getErrorCode().equals(\"CONFIGM_00017\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f892bf193808d429683cb677c185e1f1bdc3f56"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMzM5NQ==", "bodyText": "add error message with contextual information", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451303395", "createdAt": "2020-07-08T06:06:12Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -217,44 +374,31 @@ private void validateTenantDomain(String tenantDomain) throws CORSManagementServ\n     }\n \n     /**\n-     * Validate the CORSOrigin list.\n+     * Validate the application ID.\n      *\n-     * @param corsOrigins List of CORSOrigin instances.\n-     * @throws CORSManagementServiceClientException\n+     * @param tenantDomain The tenant domain.\n+     * @param appId        The application ID.\n      */\n-    private void validateOrigins(List<CORSOrigin> corsOrigins) throws CORSManagementServiceClientException {\n+    private void validateApplicationId(String tenantDomain, String appId) throws CORSManagementServiceClientException {\n \n-        if (corsOrigins == null) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(ERROR_CODE_EMPTY_LIST.getMessage());\n-            }\n-            throw handleClientException(ERROR_CODE_EMPTY_LIST);\n+        // If the appId is blank then the CORS origins that should be set/add/delete belong in the tenant level.\n+        if (StringUtils.isBlank(appId)) {\n+            return;\n         }\n \n-        for (CORSOrigin corsOrigin : corsOrigins) {\n-            if (isInvalidOrigin(corsOrigin)) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(String.format(ERROR_CODE_INVALID_ORIGIN.getMessage(), corsOrigin.getUrl()));\n-                }\n-                throw handleClientException(ERROR_CODE_INVALID_ORIGIN, corsOrigin.getUrl());\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Check if the format of the Origin is valid.\n-     *\n-     * @param origin Origin to be checked for validity.\n-     * @return {@code true} if the origin is valid, {@code false} otherwise.\n-     */\n-    private boolean isInvalidOrigin(CORSOrigin origin) {\n-\n+        // Check whether the appId belongs to the tenant with the tenantDomain.\n         try {\n-            new URL(origin.getUrl()).toURI();\n-        } catch (MalformedURLException | URISyntaxException e) {\n-            return true;\n+            ApplicationBasicInfo applicationBasicInfo = ApplicationManagementService.getInstance()\n+                    .getApplicationBasicInfoByResourceId(appId, tenantDomain);\n+            if (applicationBasicInfo == null) {\n+                throw handleClientException(ErrorMessages.ERROR_CODE_INVALID_APP_ID, appId);\n+            }\n+        } catch (IdentityApplicationManagementException e) {\n+            // Something else happened.\n+            if (log.isDebugEnabled()) {\n+                log.debug(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f892bf193808d429683cb677c185e1f1bdc3f56"}, "originalPosition": 453}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMzUzNA==", "bodyText": "make the constructor private", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451303534", "createdAt": "2020-07-08T06:06:40Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/CORSConfigurationUtil.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;\n+\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.base.IdentityConstants;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSConfiguration;\n+import org.wso2.carbon.identity.cors.mgt.core.model.Origin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility class for CORS configuration operations.\n+ */\n+public class CORSConfigurationUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f892bf193808d429683cb677c185e1f1bdc3f56"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMzc1NQ==", "bodyText": "use meaningful variable name instead of 's'", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451303755", "createdAt": "2020-07-08T06:07:14Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/CORSConfigurationUtil.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;\n+\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.base.IdentityConstants;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSConfiguration;\n+import org.wso2.carbon.identity.cors.mgt.core.model.Origin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility class for CORS configuration operations.\n+ */\n+public class CORSConfigurationUtil {\n+\n+    private static final Log log = LogFactory.getLog(CORSConfigurationUtil.class);\n+\n+    /**\n+     * Read the default CORS configuration properties in the identity.xml.\n+     *\n+     * @return Server default {@code CORSConfiguration} object.\n+     */\n+    public static CORSConfiguration getDefaultCORSConfiguration() {\n+\n+        CORSConfiguration corsConfiguration = new CORSConfiguration();\n+\n+        // Set allowGenericHttpRequests.\n+        corsConfiguration.setAllowGenericHttpRequests(Boolean.parseBoolean(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.ALLOW_GENERIC_HTTP_REQUESTS)));\n+\n+        // Set allowAnyOrigin and allowedOrigins.\n+        String allowedOriginsProperty = Objects.requireNonNull(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.ALLOWED_ORIGINS)).trim();\n+        if (allowedOriginsProperty.equals(\"*\")) {\n+            corsConfiguration.setAllowAnyOrigin(true);\n+        } else {\n+            corsConfiguration.setAllowAnyOrigin(false);\n+\n+            Set<ValidatedOrigin> allowedOrigins = new HashSet<>();\n+            for (Origin origin : parseWords(allowedOriginsProperty).stream().map(Origin::new)\n+                    .collect(Collectors.toList())) {\n+                try {\n+                    allowedOrigins.add(new ValidatedOrigin(origin.getValue()));\n+                } catch (CORSManagementServiceClientException e) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(e);\n+                    }\n+                }\n+            }\n+            corsConfiguration.setAllowedOrigins(allowedOrigins);\n+        }\n+\n+        // Set allowSubdomains.\n+        corsConfiguration.setAllowSubdomains(Boolean.parseBoolean(Objects.requireNonNull(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.ALLOW_SUBDOMAINS))));\n+\n+        // Set supportedMethods.\n+        Set<String> supportedMethods = new HashSet<>(parseWords(\n+                Objects.requireNonNull(IdentityUtil.getProperty(IdentityConstants.CORS.SUPPORTED_METHODS))));\n+        corsConfiguration.setSupportedMethods(supportedMethods);\n+\n+        // Set supportAnyHeader and supportedHeaders.\n+        String supportedHeadersProperty = Objects.requireNonNull(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.SUPPORTED_HEADERS)).trim();\n+        if (supportedHeadersProperty.equals(\"*\")) {\n+            corsConfiguration.setSupportAnyHeader(true);\n+        } else {\n+            corsConfiguration.setSupportAnyHeader(false);\n+\n+            Set<String> supportedHeaders = new HashSet<>();\n+            for (String header : parseWords(supportedHeadersProperty)) {\n+                try {\n+                    supportedHeaders.add(HeaderUtils.formatCanonical(header));\n+                } catch (IllegalArgumentException e) {\n+                    throw new IllegalArgumentException(String.format(\n+                            ErrorMessages.ERROR_CODE_BAD_HEADER.getDescription(), header));\n+                }\n+            }\n+            corsConfiguration.setSupportedHeaders(supportedHeaders);\n+        }\n+\n+        // Set exposedHeaders.\n+        Set<String> exposedHeaders = new HashSet<>();\n+        String exposedHeadersProperty = Objects.requireNonNull(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.EXPOSED_HEADERS));\n+        for (String header : parseWords(exposedHeadersProperty)) {\n+            try {\n+                exposedHeaders.add(HeaderUtils.formatCanonical(header));\n+            } catch (IllegalArgumentException e) {\n+                throw new IllegalArgumentException(String.format(\n+                        ErrorMessages.ERROR_CODE_BAD_HEADER.getDescription(), header));\n+            }\n+        }\n+        corsConfiguration.setExposedHeaders(exposedHeaders);\n+\n+        // Set supportsCredentials.\n+        corsConfiguration.setSupportsCredentials(Boolean.parseBoolean(Objects.requireNonNull(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.SUPPORTS_CREDENTIALS))));\n+\n+        // Set maxAge.\n+        corsConfiguration.setMaxAge(Integer.parseInt(Objects.requireNonNull(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.MAX_AGE))));\n+\n+        // Set tagRequests.\n+        corsConfiguration.setTagRequests(Boolean.parseBoolean(Objects.requireNonNull(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.TAG_REQUESTS))));\n+\n+        return corsConfiguration;\n+    }\n+\n+    /**\n+     * Parses a string containing words separated by space and/or comma.\n+     *\n+     * @param s The string to parse. Must not be {@code null}.\n+     * @return An array of the parsed words, empty if none were found.\n+     */\n+    protected static List<String> parseWords(final String s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f892bf193808d429683cb677c185e1f1bdc3f56"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMzk5Mw==", "bodyText": "why was this removed", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451303993", "createdAt": "2020-07-08T06:07:59Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/CORSOrigin.java", "diffHunk": "@@ -1,117 +1,91 @@\n-/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f892bf193808d429683cb677c185e1f1bdc3f56"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f892bf193808d429683cb677c185e1f1bdc3f56", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/0f892bf193808d429683cb677c185e1f1bdc3f56", "committedDate": "2020-07-08T04:42:12Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "d393b431f8f582c8e4ff379ec85b96c3076f2eb9", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/d393b431f8f582c8e4ff379ec85b96c3076f2eb9", "committedDate": "2020-07-08T14:02:17Z", "message": "Add tenant CORS configurations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d393b431f8f582c8e4ff379ec85b96c3076f2eb9", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/d393b431f8f582c8e4ff379ec85b96c3076f2eb9", "committedDate": "2020-07-08T14:02:17Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "2cec639325b8c89430f5972125fbe857f99d80c7", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/2cec639325b8c89430f5972125fbe857f99d80c7", "committedDate": "2020-07-09T07:39:45Z", "message": "Add tenant CORS configurations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1Mzg4ODE2", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-445388816", "createdAt": "2020-07-09T08:15:38Z", "commit": {"oid": "2cec639325b8c89430f5972125fbe857f99d80c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoxNTozOVrOGvGj3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoxNTozOVrOGvGj3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0Mzc0MA==", "bodyText": "let's change this to an error log. WDYT", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452043740", "createdAt": "2020-07-09T08:15:39Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ResourcesToValidatedOrigins.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resources;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Converts a ConfigurationManagement Resources to a list of ValidatedOrigins.\n+ */\n+public class ResourcesToValidatedOrigins implements Function<Resources, List<ValidatedOrigin>> {\n+\n+    private static final Log log = LogFactory.getLog(ResourcesToValidatedOrigins.class);\n+\n+    @Override\n+    public List<ValidatedOrigin> apply(Resources resources) {\n+\n+        ArrayList<ValidatedOrigin> validatedOrigins = new ArrayList<>();\n+        for (Resource resource : resources.getResources()) {\n+            try {\n+                ValidatedOrigin validatedOrigin = new ValidatedOrigin(resource.getResourceName());\n+                validatedOrigins.add(validatedOrigin);\n+            } catch (CORSManagementServiceClientException e) {\n+                if (log.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cec639325b8c89430f5972125fbe857f99d80c7"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2cec639325b8c89430f5972125fbe857f99d80c7", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/2cec639325b8c89430f5972125fbe857f99d80c7", "committedDate": "2020-07-09T07:39:45Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "728fa09f81a14c1ec4283061f6715a1800cb8eaa", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/728fa09f81a14c1ec4283061f6715a1800cb8eaa", "committedDate": "2020-07-09T08:16:34Z", "message": "Add tenant CORS configurations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "728fa09f81a14c1ec4283061f6715a1800cb8eaa", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/728fa09f81a14c1ec4283061f6715a1800cb8eaa", "committedDate": "2020-07-09T08:16:34Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "7604960608e34eb140f1ad72e76680b9bf17c503", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/7604960608e34eb140f1ad72e76680b9bf17c503", "committedDate": "2020-07-09T08:30:35Z", "message": "Add tenant CORS configurations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NDE5Mzg2", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-445419386", "createdAt": "2020-07-09T08:55:53Z", "commit": {"oid": "7604960608e34eb140f1ad72e76680b9bf17c503"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1NTo1M1rOGvIAzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1NTo1M1rOGvIAzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2NzUzMg==", "bodyText": "make the constructor private in all util classes", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452067532", "createdAt": "2020-07-09T08:55:53Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/util/FileUtils.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import java.nio.file.Paths;\n+\n+/**\n+ * Utility class for file functions.\n+ */\n+public class FileUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7604960608e34eb140f1ad72e76680b9bf17c503"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NDIwNzgw", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-445420780", "createdAt": "2020-07-09T08:57:34Z", "commit": {"oid": "7604960608e34eb140f1ad72e76680b9bf17c503"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1NzozNFrOGvIEzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1NzozNFrOGvIEzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2ODU1Nw==", "bodyText": "shall we make this private?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452068557", "createdAt": "2020-07-09T08:57:34Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/Origin.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.model;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+\n+/**\n+ * Resource request origin (not validated), as defined in The Web Origin Concept (RFC 6454).\n+ */\n+public class Origin {\n+\n+    /**\n+     * The original origin value, used in hash code generation and equality checking.\n+     */\n+    String value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7604960608e34eb140f1ad72e76680b9bf17c503"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NDIxNDUy", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-445421452", "createdAt": "2020-07-09T08:58:25Z", "commit": {"oid": "7604960608e34eb140f1ad72e76680b9bf17c503"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1ODoyNVrOGvIGwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1ODoyNVrOGvIGwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2OTA1Ng==", "bodyText": "use standard comment format", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452069056", "createdAt": "2020-07-09T08:58:25Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/SerializationUtils.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+/**\n+ * Utility class for serialization operations.\n+ */\n+public class SerializationUtils {\n+\n+    /**\n+     * Serialises the items of a set into a string. Each item must have a meaningful {@code toString()} method.\n+     *\n+     * @param set The set to serialise. Must not be {@code null}.\n+     * @return The serialised set as string.\n+     */\n+    public static String serializeStringSet(final Set<String> set) {\n+\n+        StringBuilder sb = new StringBuilder();\n+        Iterator<String> it = set.iterator();\n+        while (it.hasNext()) {\n+            sb.append(it.next());\n+            if (it.hasNext()) {\n+                sb.append(\";\");\n+            }\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Deserialize a string into a Set.\n+     *\n+     * @param serializedString The string to deserialize. Must not be {@code null}.\n+     * @return The deserialized Set<String>.\n+     */\n+    public static Set<String> deserializeStringSet(String serializedString) {\n+\n+        if (serializedString == null) {\n+            return new HashSet<>(); // empty set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7604960608e34eb140f1ad72e76680b9bf17c503"}, "originalPosition": 63}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7604960608e34eb140f1ad72e76680b9bf17c503", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/7604960608e34eb140f1ad72e76680b9bf17c503", "committedDate": "2020-07-09T08:30:35Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "886d732e7d4bb835ccc8347e5b5493ce2c36fa99", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/886d732e7d4bb835ccc8347e5b5493ce2c36fa99", "committedDate": "2020-07-09T10:07:28Z", "message": "Add tenant CORS configurations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "886d732e7d4bb835ccc8347e5b5493ce2c36fa99", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/886d732e7d4bb835ccc8347e5b5493ce2c36fa99", "committedDate": "2020-07-09T10:07:28Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "59a96836b742eda126ffdd18ff446f1ab3387313", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/59a96836b742eda126ffdd18ff446f1ab3387313", "committedDate": "2020-07-09T11:09:39Z", "message": "Add tenant CORS configurations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59a96836b742eda126ffdd18ff446f1ab3387313", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/59a96836b742eda126ffdd18ff446f1ab3387313", "committedDate": "2020-07-09T11:09:39Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "2b6401a8587ab67d014583f6c1ccfce1df0c5d14", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/2b6401a8587ab67d014583f6c1ccfce1df0c5d14", "committedDate": "2020-07-09T12:12:05Z", "message": "Add tenant CORS configurations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTMyMjg0", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-446132284", "createdAt": "2020-07-10T05:36:44Z", "commit": {"oid": "2b6401a8587ab67d014583f6c1ccfce1df0c5d14"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b6401a8587ab67d014583f6c1ccfce1df0c5d14", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/2b6401a8587ab67d014583f6c1ccfce1df0c5d14", "committedDate": "2020-07-09T12:12:05Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "committedDate": "2020-07-10T07:55:04Z", "message": "Add tenant CORS configurations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjM5NzEz", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-446239713", "createdAt": "2020-07-10T09:00:31Z", "commit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowMDozMVrOGvvrIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowMDozMVrOGvvrIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxNzM0NA==", "bodyText": "Any reasons why we went with IDs instead of the origin itself here?\nTo me, it might be a bit confusing when we compare the addCORSOrigins() and deleteCORSOrigins() method.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452717344", "createdAt": "2020-07-10T09:00:31Z", "author": {"login": "mefarazath"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementService.java", "diffHunk": "@@ -41,26 +42,52 @@\n      * Set the CORS Origins for a tenant. This method replaces any existing Origins.\n      *\n      * @param tenantDomain The tenant domain.\n-     * @param corsOrigins  A list of CORS Origins to be set.\n+     * @param appId        The  application ID that the CORS origin(s) belongs to. Should be {@code null} if the CORS\n+     *                     origin(s) belong to the tenant level.\n+     * @param origins      A list of CORS origins to be set.\n      * @throws CORSManagementServiceException\n      */\n-    void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void setCORSOrigins(String tenantDomain, String appId, List<String> origins) throws CORSManagementServiceException;\n \n     /**\n      * Add the CORS Origin(s) to the existing CORS Origin list of the tenant.\n      *\n      * @param tenantDomain The tenant domain.\n-     * @param corsOrigins  A list of CORS Origins to be added.\n+     * @param appId        The  application ID that the CORS origin(s) belongs to. Should be {@code null} if the CORS\n+     *                     origin(s) belong to the tenant level.\n+     * @param origins      A list of CORS origins to be added.\n      * @throws CORSManagementServiceException\n      */\n-    void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void addCORSOrigins(String tenantDomain, String appId, List<String> origins) throws CORSManagementServiceException;\n \n     /**\n      * Delete the CORS Origin(s) from the existing CORS Origin list of the tenant.\n      *\n      * @param tenantDomain The tenant domain.\n-     * @param corsOrigins  A list of CORS Origins to be deleted.\n+     * @param appId        The  application ID that the CORS origin(s) belongs to. Should be {@code null} if the CORS\n+     *                     origin(s) belong to the tenant level.\n+     * @param originIds    A list of CORS origin IDs to be deleted.\n      * @throws CORSManagementServiceException\n      */\n-    void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void deleteCORSOrigins(String tenantDomain, String appId, List<String> originIds)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjQwMzQx", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-446240341", "createdAt": "2020-07-10T09:01:23Z", "commit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowMToyNFrOGvvtAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowMToyNFrOGvvtAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxNzgyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Unable to retrieve CORS.\n          \n          \n            \n                 * Unable to retrieve CORS origins.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452717825", "createdAt": "2020-07-10T09:01:24Z", "author": {"login": "mefarazath"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -24,55 +24,179 @@\n  */\n public enum ErrorMessages {\n \n+    /**\n+     * Unable to retrieve CORS.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjQwNDY2", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-446240466", "createdAt": "2020-07-10T09:01:34Z", "commit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowMTozNFrOGvvtXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowMTozNFrOGvvtXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxNzkxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Unable to set CORS.\n          \n          \n            \n                 * Unable to set CORS origins.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452717919", "createdAt": "2020-07-10T09:01:34Z", "author": {"login": "mefarazath"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -24,55 +24,179 @@\n  */\n public enum ErrorMessages {\n \n+    /**\n+     * Unable to retrieve CORS.\n+     */\n     ERROR_CODE_CORS_RETRIEVE(\"CMS-65001\",\n             \"Unable to retrieve CORS Origins.\",\n             \"Server encountered an error while retrieving the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to set CORS.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjQwNjEx", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-446240611", "createdAt": "2020-07-10T09:01:46Z", "commit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowMTo0NlrOGvvt0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowMTo0NlrOGvvt0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxODAzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Unable to add CORS.\n          \n          \n            \n                 * Unable to add CORS origins.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452718034", "createdAt": "2020-07-10T09:01:46Z", "author": {"login": "mefarazath"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -24,55 +24,179 @@\n  */\n public enum ErrorMessages {\n \n+    /**\n+     * Unable to retrieve CORS.\n+     */\n     ERROR_CODE_CORS_RETRIEVE(\"CMS-65001\",\n             \"Unable to retrieve CORS Origins.\",\n             \"Server encountered an error while retrieving the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to set CORS.\n+     */\n     ERROR_CODE_CORS_SET(\"CMS-65002\",\n             \"Unable to set CORS Origins.\",\n             \"Server encountered an error while setting the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to add CORS.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjQwNzU2", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-446240756", "createdAt": "2020-07-10T09:01:56Z", "commit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowMTo1N1rOGvvuPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowMTo1N1rOGvvuPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxODE0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Unable to delete CORS.\n          \n          \n            \n                 * Unable to delete CORS origins.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452718143", "createdAt": "2020-07-10T09:01:57Z", "author": {"login": "mefarazath"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -24,55 +24,179 @@\n  */\n public enum ErrorMessages {\n \n+    /**\n+     * Unable to retrieve CORS.\n+     */\n     ERROR_CODE_CORS_RETRIEVE(\"CMS-65001\",\n             \"Unable to retrieve CORS Origins.\",\n             \"Server encountered an error while retrieving the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to set CORS.\n+     */\n     ERROR_CODE_CORS_SET(\"CMS-65002\",\n             \"Unable to set CORS Origins.\",\n             \"Server encountered an error while setting the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to add CORS.\n+     */\n     ERROR_CODE_CORS_ADD(\"CMS-65003\",\n             \"Unable to add CORS Origins.\",\n             \"Server encountered an error while adding the CORS Origins to %s.\"),\n+\n+    /**\n+     * Unable to delete CORS.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjQ0MzQ3", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-446244347", "createdAt": "2020-07-10T09:06:55Z", "commit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowNjo1NVrOGvv5bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowNjo1NVrOGvv5bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyMTAwNA==", "bodyText": "Since all the attributes of this configuration are read from the identity.xml, shouldn't this be a one time task?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452721004", "createdAt": "2020-07-10T09:06:55Z", "author": {"login": "mefarazath"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/CORSConfigurationUtil.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.base.IdentityConstants;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSConfiguration;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Utility class for CORS configuration operations.\n+ */\n+public class CORSConfigurationUtil {\n+\n+    /**\n+     * Private constructor of CORSConfigurationUtil.\n+     */\n+    private CORSConfigurationUtil() {\n+\n+    }\n+\n+    /**\n+     * Read the default CORS configuration properties in the identity.xml.\n+     *\n+     * @return Server default {@code CORSConfiguration} object.\n+     */\n+    public static CORSConfiguration getServerCORSConfiguration() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjQ2MzU0", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-446246354", "createdAt": "2020-07-10T09:09:56Z", "commit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowOTo1NlrOGvv_XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTowOTo1NlrOGvv_XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyMjUyNQ==", "bodyText": "Can we have some unit tests covering the utility methods?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452722525", "createdAt": "2020-07-10T09:09:56Z", "author": {"login": "mefarazath"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/SerializationUtils.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+/**\n+ * Utility class for serialization operations.\n+ */\n+public class SerializationUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjQ2NDEx", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-446246411", "createdAt": "2020-07-10T09:10:01Z", "commit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOToxMDowMVrOGvv_hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOToxMDowMVrOGvv_hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyMjU2Nw==", "bodyText": "Can we have some unit tests covering the utility methods?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452722567", "createdAt": "2020-07-10T09:10:01Z", "author": {"login": "mefarazath"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/HeaderUtils.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;\n+\n+import java.util.Locale;\n+import java.util.regex.Pattern;\n+\n+import static java.util.regex.Pattern.compile;\n+\n+/**\n+ * Header utilities.\n+ */\n+public class HeaderUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjQ5ODU0", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-446249854", "createdAt": "2020-07-10T09:15:21Z", "commit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOToxNToyMVrOGvwKDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOToxNToyMVrOGvwKDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyNTI2MQ==", "bodyText": "Can't we move this line within the try block?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452725261", "createdAt": "2020-07-10T09:15:21Z", "author": {"login": "mefarazath"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -70,108 +78,222 @@\n     public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n \n         validateTenantDomain(tenantDomain);\n+\n+        List<CORSOrigin> corsOrigins;\n         try {\n             FrameworkUtils.startTenantFlow(tenantDomain);\n \n-            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n-                    CORS_ORIGIN_RESOURCE_NAME);\n-            List<CORSOrigin> corsOrigins;\n-            if (resource == null) {\n-                corsOrigins = new ArrayList<>();\n-            } else {\n-                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n-            }\n-\n-            return Collections.unmodifiableList(corsOrigins);\n-        } catch (ConfigurationManagementException | IOException e) {\n+            Resources resources = getResources(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+            corsOrigins = resources.getResources().stream().map(new ResourceToCORSOrigin())\n+                    .collect(Collectors.toList());\n+        } catch (ConfigurationManagementException e) {\n             throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n         } finally {\n             FrameworkUtils.endTenantFlow();\n         }\n+\n+        return Collections.unmodifiableList(corsOrigins);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzE1ODgx", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#pullrequestreview-446315881", "createdAt": "2020-07-10T11:06:00Z", "commit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eed54a6168add4dce20320479690045d8f53b39b", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/eed54a6168add4dce20320479690045d8f53b39b", "committedDate": "2020-07-10T12:01:21Z", "message": "Add tenant CORS configurations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "committedDate": "2020-07-10T07:55:04Z", "message": "Add tenant CORS configurations"}, "afterCommit": {"oid": "eed54a6168add4dce20320479690045d8f53b39b", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/eed54a6168add4dce20320479690045d8f53b39b", "committedDate": "2020-07-10T12:01:21Z", "message": "Add tenant CORS configurations"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2211, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}