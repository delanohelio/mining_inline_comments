{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwODgzODg2", "number": 3021, "title": "Improvements and fixes to the Role management service", "bodyText": "Relates to wso2/product-is#8373", "createdAt": "2020-07-17T07:54:45Z", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021", "merged": true, "mergeCommit": {"oid": "d84a69e3fddd2d091f13447476c5c2855d88402d"}, "closed": true, "closedAt": "2020-07-17T10:57:59Z", "author": {"login": "ashensw"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1vuD3gBqjM1NTcwNDQ2MzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1xaCBgFqTQ1MDU1NDI1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cabe8d5cb86d60b23a58658ea2a8b5360f071290", "author": {"user": {"login": "ashensw", "name": "Ashen Weerathunga"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/cabe8d5cb86d60b23a58658ea2a8b5360f071290", "committedDate": "2020-07-17T07:50:22Z", "message": "Improvements and fixes to the Role management service"}, "afterCommit": {"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774", "author": {"user": {"login": "ashensw", "name": "Ashen Weerathunga"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/bcdc2396857d181baa8a40b3a26ac003a2d29774", "committedDate": "2020-07-17T08:39:35Z", "message": "Improvements and fixes to the Role management service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDk2MDAw", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#pullrequestreview-450496000", "createdAt": "2020-07-17T09:06:36Z", "commit": {"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowNjozNlrOGzLdHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowNjozNlrOGzLdHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxODIzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"An error occurred while rolling back transactions. \", e1);\n          \n          \n            \n                        log.error(\"An error occurred while rolling back transactions.\", e1);", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456318237", "createdAt": "2020-07-17T09:06:36Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "diffHunk": "@@ -69,4 +75,69 @@ private void initDatasource() {\n             log.error(\"Error while retrieving user management data source\", e);\n         }\n     }\n+\n+    /**\n+     * Returns an database connection for UM data source.\n+     *\n+     * @param shouldApplyTransaction apply transaction or not\n+     * @return Database connection.\n+     * @throws IdentityRuntimeException Exception occurred when getting the data source.\n+     */\n+    public Connection getDBConnection(boolean shouldApplyTransaction) throws IdentityRuntimeException {\n+\n+        try {\n+            Connection dbConnection = dataSource.getConnection();\n+            if (shouldApplyTransaction) {\n+                dbConnection.setAutoCommit(false);\n+                try {\n+                    dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                } catch (SQLException e) {\n+                    // Handling startup error for postgresql Ref: https://github.com/wso2/product-is/issues/3545\n+                    // Active SQL Transaction means that connection is not committed.\n+                    // Need to commit before setting isolation property.\n+                    if (dbConnection.getMetaData().getDriverName().contains(POSTGRESQL_DATABASE)\n+                            && PG_ACTIVE_SQL_TRANSACTION_STATE.equals(e.getSQLState())) {\n+                        dbConnection.commit();\n+                        dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                    }\n+                }\n+            }\n+            return dbConnection;\n+        } catch (SQLException e) {\n+            String errMsg = \"Error when getting a database connection object from the UM data source.\";\n+            throw IdentityRuntimeException.error(errMsg, e);\n+        }\n+    }\n+\n+    /**\n+     * Revoke the transaction when catch then sql transaction errors.\n+     *\n+     * @param dbConnection database connection.\n+     */\n+    public void rollbackTransaction(Connection dbConnection) {\n+\n+        try {\n+            if (dbConnection != null) {\n+                dbConnection.rollback();\n+            }\n+        } catch (SQLException e1) {\n+            log.error(\"An error occurred while rolling back transactions. \", e1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDk2MDk3", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#pullrequestreview-450496097", "createdAt": "2020-07-17T09:06:43Z", "commit": {"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowNjo0M1rOGzLdVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowNjo0M1rOGzLdVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxODI5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"An error occurred while commit transactions. \", e1);\n          \n          \n            \n                        log.error(\"An error occurred while commit transactions.\", e1);", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456318292", "createdAt": "2020-07-17T09:06:43Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "diffHunk": "@@ -69,4 +75,69 @@ private void initDatasource() {\n             log.error(\"Error while retrieving user management data source\", e);\n         }\n     }\n+\n+    /**\n+     * Returns an database connection for UM data source.\n+     *\n+     * @param shouldApplyTransaction apply transaction or not\n+     * @return Database connection.\n+     * @throws IdentityRuntimeException Exception occurred when getting the data source.\n+     */\n+    public Connection getDBConnection(boolean shouldApplyTransaction) throws IdentityRuntimeException {\n+\n+        try {\n+            Connection dbConnection = dataSource.getConnection();\n+            if (shouldApplyTransaction) {\n+                dbConnection.setAutoCommit(false);\n+                try {\n+                    dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                } catch (SQLException e) {\n+                    // Handling startup error for postgresql Ref: https://github.com/wso2/product-is/issues/3545\n+                    // Active SQL Transaction means that connection is not committed.\n+                    // Need to commit before setting isolation property.\n+                    if (dbConnection.getMetaData().getDriverName().contains(POSTGRESQL_DATABASE)\n+                            && PG_ACTIVE_SQL_TRANSACTION_STATE.equals(e.getSQLState())) {\n+                        dbConnection.commit();\n+                        dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                    }\n+                }\n+            }\n+            return dbConnection;\n+        } catch (SQLException e) {\n+            String errMsg = \"Error when getting a database connection object from the UM data source.\";\n+            throw IdentityRuntimeException.error(errMsg, e);\n+        }\n+    }\n+\n+    /**\n+     * Revoke the transaction when catch then sql transaction errors.\n+     *\n+     * @param dbConnection database connection.\n+     */\n+    public void rollbackTransaction(Connection dbConnection) {\n+\n+        try {\n+            if (dbConnection != null) {\n+                dbConnection.rollback();\n+            }\n+        } catch (SQLException e1) {\n+            log.error(\"An error occurred while rolling back transactions. \", e1);\n+        }\n+    }\n+\n+    /**\n+     * Commit the transaction.\n+     *\n+     * @param dbConnection database connection.\n+     */\n+    public void commitTransaction(Connection dbConnection) {\n+\n+        try {\n+            if (dbConnection != null) {\n+                dbConnection.commit();\n+            }\n+        } catch (SQLException e1) {\n+            log.error(\"An error occurred while commit transactions. \", e1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDk3MTQ5", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#pullrequestreview-450497149", "createdAt": "2020-07-17T09:08:16Z", "commit": {"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowODoxNlrOGzLgOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowODoxNlrOGzLgOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxOTAzMg==", "bodyText": "any reason why we can't have primitives here?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456319032", "createdAt": "2020-07-17T09:08:16Z", "author": {"login": "mefarazath"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/internal/RoleManagementServiceImpl.java", "diffHunk": "@@ -47,14 +47,14 @@ public RoleBasicInfo addRole(String roleName, List<String> userList, List<String\n     }\n \n     @Override\n-    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n-            throws IdentityRoleManagementException {\n+    public List<RoleBasicInfo> getRoles(Integer limit, Integer offset, String sortBy, String sortOrder,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bcdc2396857d181baa8a40b3a26ac003a2d29774", "author": {"user": {"login": "ashensw", "name": "Ashen Weerathunga"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/bcdc2396857d181baa8a40b3a26ac003a2d29774", "committedDate": "2020-07-17T08:39:35Z", "message": "Improvements and fixes to the Role management service"}, "afterCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d", "author": {"user": {"login": "ashensw", "name": "Ashen Weerathunga"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d", "committedDate": "2020-07-17T09:17:51Z", "message": "Improvements and fixes to the Role management service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNTExNTcx", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#pullrequestreview-450511571", "createdAt": "2020-07-17T09:29:46Z", "commit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToyOTo0N1rOGzMMoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDoxMDo0OVrOGzNdog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzMDQwMQ==", "bodyText": "shall we use multi-line comments?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456330401", "createdAt": "2020-07-17T09:29:47Z", "author": {"login": "emswbandara"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/persistence/UmPersistenceManager.java", "diffHunk": "@@ -69,4 +75,69 @@ private void initDatasource() {\n             log.error(\"Error while retrieving user management data source\", e);\n         }\n     }\n+\n+    /**\n+     * Returns an database connection for UM data source.\n+     *\n+     * @param shouldApplyTransaction apply transaction or not\n+     * @return Database connection.\n+     * @throws IdentityRuntimeException Exception occurred when getting the data source.\n+     */\n+    public Connection getDBConnection(boolean shouldApplyTransaction) throws IdentityRuntimeException {\n+\n+        try {\n+            Connection dbConnection = dataSource.getConnection();\n+            if (shouldApplyTransaction) {\n+                dbConnection.setAutoCommit(false);\n+                try {\n+                    dbConnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n+                } catch (SQLException e) {\n+                    // Handling startup error for postgresql Ref: https://github.com/wso2/product-is/issues/3545", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTE4Mw==", "bodyText": "shall we add a debug log here", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456349183", "createdAt": "2020-07-17T10:06:29Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -310,20 +342,41 @@ public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManag\n             throws SQLException, IdentityRoleManagementException {\n \n         List<RoleBasicInfo> roles = new ArrayList<>();\n+        List<String> roleNames = new ArrayList<>();\n+        UserRealm userRealm = CarbonContext.getThreadLocalCarbonContext().getUserRealm();\n         try (ResultSet resultSet = statement.executeQuery()) {\n             while (resultSet.next()) {\n-                String name = resultSet.getString(1);\n-                // Append the internal domain.\n-                if (!name.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n-                    name = UserCoreConstants.INTERNAL_DOMAIN + CarbonConstants.DOMAIN_SEPARATOR + name;\n-                }\n+                String roleName = resultSet.getString(1);\n \n-                roles.add(new RoleBasicInfo(getRoleIDByName(name, tenantDomain), name));\n+                // Skip the Internal/everyone role.\n+                if (isInternalEveryoneRole(roleName, userRealm)) {\n+                    continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTQwMQ==", "bodyText": "let's add context info.. e.g. tenant", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456349401", "createdAt": "2020-07-17T10:06:56Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -310,20 +342,41 @@ public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManag\n             throws SQLException, IdentityRoleManagementException {\n \n         List<RoleBasicInfo> roles = new ArrayList<>();\n+        List<String> roleNames = new ArrayList<>();\n+        UserRealm userRealm = CarbonContext.getThreadLocalCarbonContext().getUserRealm();\n         try (ResultSet resultSet = statement.executeQuery()) {\n             while (resultSet.next()) {\n-                String name = resultSet.getString(1);\n-                // Append the internal domain.\n-                if (!name.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n-                    name = UserCoreConstants.INTERNAL_DOMAIN + CarbonConstants.DOMAIN_SEPARATOR + name;\n-                }\n+                String roleName = resultSet.getString(1);\n \n-                roles.add(new RoleBasicInfo(getRoleIDByName(name, tenantDomain), name));\n+                // Skip the Internal/everyone role.\n+                if (isInternalEveryoneRole(roleName, userRealm)) {\n+                    continue;\n+                }\n+                roleNames.add(appendInternalDomain(roleName));\n             }\n+        } catch (UserStoreException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTkyNg==", "bodyText": "let's use multi-line comments", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456349926", "createdAt": "2020-07-17T10:08:10Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -664,55 +754,73 @@ public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleMa\n                 throw new IdentityRoleManagementClientException(OPERATION_FORBIDDEN.getCode(),\n                         \"Invalid operation. Role: \" + roleName + \" Cannot be deleted.\");\n             }\n-        } catch (org.wso2.carbon.user.api.UserStoreException e) {\n+        } catch (UserStoreException e) {\n             throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n                     \"Error while getting the realmConfiguration.\", e);\n         }\n \n-        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n-            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, DELETE_ROLE_SQL)) {\n-                statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n-                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n-                statement.executeUpdate();\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection(true)) {\n+            try {\n+                try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, DELETE_ROLE_SQL)) {\n+                    statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                    statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                    statement.executeUpdate();\n+                }\n+\n+                // Delete the role from IDN_SCIM_GROUP table.\n+                deleteSCIMRole(roleName, tenantDomain);\n+\n+                // UM_ROLE_PERMISSION Table, roles are associated with Domain ID.\n+                // At this moment Role name doesn't contain the Domain prefix.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 458}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MDY5Mg==", "bodyText": "why do we set autocommit to false?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456350692", "createdAt": "2020-07-17T10:09:50Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -794,14 +902,14 @@ public boolean isExistingRoleID(String roleID, String tenantDomain) throws Ident\n                     userList.add(new UserBasicInfo(user.getUserID(), user.getDomainQualifiedUsername()));\n                 }\n             }\n-        } catch (org.wso2.carbon.user.api.UserStoreException e) {\n+        } catch (UserStoreException e) {\n             throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n                     \"Error while getting the realmConfiguration.\", e);\n         }\n \n         List<String> disabledDomainName = getDisabledDomainNames();\n \n-        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection(false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 555}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM1MTEzOA==", "bodyText": "StringUtils.isNotEmpty(domain) is redundant here", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#discussion_r456351138", "createdAt": "2020-07-17T10:10:49Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -855,8 +969,10 @@ protected String getUserIDByName(String name, String tenantDomain) throws Identi\n                         String name = resultSet.getString(1);\n                         String domain = resultSet.getString(2);\n                         if (!disabledDomainName.contains(domain)) {\n-                            if (StringUtils.isNotEmpty(domain)) {\n+                            if (StringUtils.isNotEmpty(domain) && !StringUtils.equals(primaryDomainName, domain)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d"}, "originalPosition": 579}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd899b9f109df8f871db7ad13922e4b9c29b59ec", "author": {"user": {"login": "ashensw", "name": "Ashen Weerathunga"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/bd899b9f109df8f871db7ad13922e4b9c29b59ec", "committedDate": "2020-07-17T10:32:02Z", "message": "Improvements and fixes to the Role management service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d", "author": {"user": {"login": "ashensw", "name": "Ashen Weerathunga"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/0f05d7919e0a3e3bcefcbc7391a8eb1bd429bc8d", "committedDate": "2020-07-17T09:17:51Z", "message": "Improvements and fixes to the Role management service"}, "afterCommit": {"oid": "bd899b9f109df8f871db7ad13922e4b9c29b59ec", "author": {"user": {"login": "ashensw", "name": "Ashen Weerathunga"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/bd899b9f109df8f871db7ad13922e4b9c29b59ec", "committedDate": "2020-07-17T10:32:02Z", "message": "Improvements and fixes to the Role management service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNTU0MjUz", "url": "https://github.com/wso2/carbon-identity-framework/pull/3021#pullrequestreview-450554253", "createdAt": "2020-07-17T10:37:52Z", "commit": {"oid": "bd899b9f109df8f871db7ad13922e4b9c29b59ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2235, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}