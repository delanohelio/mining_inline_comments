{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5Nzg0NDk5", "number": 2828, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo1ODoxNVrODotZnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzo0NzoxMlrODo_9Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDEzNDY4OnYy", "diffSide": "RIGHT", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo1ODoxNVrOF3bCnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo1ODoxNVrOF3bCnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1OTAzNw==", "bodyText": "Shall we remove the new line? WDYT?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393659037", "createdAt": "2020-03-17T12:58:15Z", "author": {"login": "somindatommy"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantURLSupportEnabled;\n+\n+/**\n+ * URL Resolver service implementation.\n+ */\n+public class DefaultURLResolverService implements URLResolverService {\n+\n+    @Override\n+    public String resolveUrl(String url, boolean addProxyContextPath, boolean addWebContextRoot,\n+                             Map<String, Object> properties) throws URLResolverException {\n+\n+        try {\n+            URL parsedUrl = new URL(url);\n+            StringBuilder urlBuilder = new StringBuilder(parsedUrl.getProtocol())\n+                    .append(\"://\")\n+                    .append(parsedUrl.getHost())\n+                    .append(\":\")\n+                    .append(parsedUrl.getPort());\n+            appendContextToUri(parsedUrl.getPath(), addProxyContextPath, addWebContextRoot, urlBuilder,\n+                    false);\n+            return urlBuilder.toString();\n+\n+        } catch (MalformedURLException e) {\n+            throw new URLResolverException(\"Error while parsing the URL: \" + url, e);\n+        }\n+    }\n+\n+    @Override\n+    public String resolveUrlContext(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                    boolean addTenantQueryParamInLegacyMode, Map<String, Object> properties)\n+            throws URLResolverException {\n+\n+        String hostName = getHostName();\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        int mgtTransportPort = getMgtTransportPort(mgtTransport);\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        StringBuilder serverUrl = new StringBuilder(mgtTransport).append(\"://\").append(hostName.toLowerCase());\n+        // If it's well known HTTPS port, skip adding port.\n+        if (mgtTransportPort != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            serverUrl.append(\":\").append(mgtTransportPort);\n+        }\n+\n+        appendContextToUri(urlContext, addProxyContextPath, addWebContextRoot, serverUrl, addTenantQueryParamInLegacyMode);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDEzODMwOnYy", "diffSide": "RIGHT", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo1OTowOVrOF3bE1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoxOToyNVrOF3mRxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1OTYwNA==", "bodyText": "Can we make this contant variable?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393659604", "createdAt": "2020-03-17T12:59:09Z", "author": {"login": "somindatommy"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantURLSupportEnabled;\n+\n+/**\n+ * URL Resolver service implementation.\n+ */\n+public class DefaultURLResolverService implements URLResolverService {\n+\n+    @Override\n+    public String resolveUrl(String url, boolean addProxyContextPath, boolean addWebContextRoot,\n+                             Map<String, Object> properties) throws URLResolverException {\n+\n+        try {\n+            URL parsedUrl = new URL(url);\n+            StringBuilder urlBuilder = new StringBuilder(parsedUrl.getProtocol())\n+                    .append(\"://\")\n+                    .append(parsedUrl.getHost())\n+                    .append(\":\")\n+                    .append(parsedUrl.getPort());\n+            appendContextToUri(parsedUrl.getPath(), addProxyContextPath, addWebContextRoot, urlBuilder,\n+                    false);\n+            return urlBuilder.toString();\n+\n+        } catch (MalformedURLException e) {\n+            throw new URLResolverException(\"Error while parsing the URL: \" + url, e);\n+        }\n+    }\n+\n+    @Override\n+    public String resolveUrlContext(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                    boolean addTenantQueryParamInLegacyMode, Map<String, Object> properties)\n+            throws URLResolverException {\n+\n+        String hostName = getHostName();\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        int mgtTransportPort = getMgtTransportPort(mgtTransport);\n+\n+        if (hostName.endsWith(\"/\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MzE0Mg==", "bodyText": "It's not extensively used. I don't think it's required", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393843142", "createdAt": "2020-03-17T17:19:25Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantURLSupportEnabled;\n+\n+/**\n+ * URL Resolver service implementation.\n+ */\n+public class DefaultURLResolverService implements URLResolverService {\n+\n+    @Override\n+    public String resolveUrl(String url, boolean addProxyContextPath, boolean addWebContextRoot,\n+                             Map<String, Object> properties) throws URLResolverException {\n+\n+        try {\n+            URL parsedUrl = new URL(url);\n+            StringBuilder urlBuilder = new StringBuilder(parsedUrl.getProtocol())\n+                    .append(\"://\")\n+                    .append(parsedUrl.getHost())\n+                    .append(\":\")\n+                    .append(parsedUrl.getPort());\n+            appendContextToUri(parsedUrl.getPath(), addProxyContextPath, addWebContextRoot, urlBuilder,\n+                    false);\n+            return urlBuilder.toString();\n+\n+        } catch (MalformedURLException e) {\n+            throw new URLResolverException(\"Error while parsing the URL: \" + url, e);\n+        }\n+    }\n+\n+    @Override\n+    public String resolveUrlContext(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                    boolean addTenantQueryParamInLegacyMode, Map<String, Object> properties)\n+            throws URLResolverException {\n+\n+        String hostName = getHostName();\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        int mgtTransportPort = getMgtTransportPort(mgtTransport);\n+\n+        if (hostName.endsWith(\"/\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1OTYwNA=="}, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDE0NTQyOnYy", "diffSide": "RIGHT", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzowMToxM1rOF3bJZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzowMToxM1rOF3bJZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MDc3NA==", "bodyText": "Shall we remove the extra new line?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393660774", "createdAt": "2020-03-17T13:01:13Z", "author": {"login": "somindatommy"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantURLSupportEnabled;\n+\n+/**\n+ * URL Resolver service implementation.\n+ */\n+public class DefaultURLResolverService implements URLResolverService {\n+\n+    @Override\n+    public String resolveUrl(String url, boolean addProxyContextPath, boolean addWebContextRoot,\n+                             Map<String, Object> properties) throws URLResolverException {\n+\n+        try {\n+            URL parsedUrl = new URL(url);\n+            StringBuilder urlBuilder = new StringBuilder(parsedUrl.getProtocol())\n+                    .append(\"://\")\n+                    .append(parsedUrl.getHost())\n+                    .append(\":\")\n+                    .append(parsedUrl.getPort());\n+            appendContextToUri(parsedUrl.getPath(), addProxyContextPath, addWebContextRoot, urlBuilder,\n+                    false);\n+            return urlBuilder.toString();\n+\n+        } catch (MalformedURLException e) {\n+            throw new URLResolverException(\"Error while parsing the URL: \" + url, e);\n+        }\n+    }\n+\n+    @Override\n+    public String resolveUrlContext(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                    boolean addTenantQueryParamInLegacyMode, Map<String, Object> properties)\n+            throws URLResolverException {\n+\n+        String hostName = getHostName();\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        int mgtTransportPort = getMgtTransportPort(mgtTransport);\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        StringBuilder serverUrl = new StringBuilder(mgtTransport).append(\"://\").append(hostName.toLowerCase());\n+        // If it's well known HTTPS port, skip adding port.\n+        if (mgtTransportPort != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            serverUrl.append(\":\").append(mgtTransportPort);\n+        }\n+\n+        appendContextToUri(urlContext, addProxyContextPath, addWebContextRoot, serverUrl, addTenantQueryParamInLegacyMode);\n+\n+        return serverUrl.toString();\n+    }\n+\n+    private int getMgtTransportPort(String mgtTransport) {\n+\n+        AxisConfiguration axisConfiguration = IdentityCoreServiceComponent.getConfigurationContextService().\n+                getServerConfigContext().getAxisConfiguration();\n+        int mgtTransportPort = CarbonUtils.getTransportProxyPort(axisConfiguration, mgtTransport);\n+        if (mgtTransportPort <= 0) {\n+            mgtTransportPort = CarbonUtils.getTransportPort(axisConfiguration, mgtTransport);\n+        }\n+        return mgtTransportPort;\n+    }\n+\n+    private String getHostName() throws URLResolverException {\n+\n+        String hostName = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.HOST_NAME);\n+        try {\n+            if (hostName == null) {\n+                hostName = NetworkUtils.getLocalHostname();\n+            }\n+        } catch (SocketException e) {\n+            throw new URLResolverException(\"Error while trying to read hostname.\", e);\n+        }\n+        return hostName;\n+    }\n+\n+    private void appendWebContextRoot(StringBuilder serverUrl) {\n+\n+        String webContextRoot = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants\n+                .WEB_CONTEXT_ROOT);\n+        // If webContextRoot is defined then append it.\n+        if (StringUtils.isNotBlank(webContextRoot)) {\n+            if (webContextRoot.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(webContextRoot.trim());\n+            } else {\n+                serverUrl.append(webContextRoot.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendProxyContextPath(StringBuilder serverUrl) {\n+\n+        String proxyContextPath = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants\n+                .PROXY_CONTEXT_PATH);\n+        // If ProxyContextPath is defined then append it.\n+        if (StringUtils.isNotBlank(proxyContextPath)) {\n+            if (proxyContextPath.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(proxyContextPath.trim());\n+            } else {\n+                serverUrl.append(proxyContextPath.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendTenantAsPathParam(StringBuilder serverUrl) {\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }\n+        if (tenantDomain != null) {\n+            if (serverUrl.toString().endsWith(\"/\")) {\n+                serverUrl.append(\"t/\").append(tenantDomain);\n+            } else {\n+                serverUrl.append(\"/t/\").append(tenantDomain);\n+            }\n+        }\n+    }\n+\n+    private void appendTenantAsQueryParam(StringBuilder serverUrl) {\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (!StringUtils.isBlank(tenantDomain)) {\n+            if (!MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equalsIgnoreCase(tenantDomain)) {\n+                serverUrl.append(\"?\").append(MultitenantConstants.TENANT_DOMAIN).append(\"=\").append(tenantDomain);\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDE1Mzk1OnYy", "diffSide": "RIGHT", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/URLResolverService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzowMzozM1rOF3bO0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzowNDo0MFrOF3bRag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MjE2MA==", "bodyText": "Shall we format the method comment?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393662160", "createdAt": "2020-03-17T13:03:33Z", "author": {"login": "somindatommy"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/URLResolverService.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import java.util.Map;\n+\n+/**\n+ * This interface is defined to resolve a provided URL or a URL context by adding a proxy context path, web context\n+ * root, and the tenant domain as specified. The URL would be resolved for the tenant domain by either adding the tenant\n+ * context to the path or adding a tenant parameter (legacy mode).\n+ */\n+public interface URLResolverService {\n+\n+    /**\n+     * This method is used to return a URL with a proxy context path, a web context root and the tenant domain (If", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MjgyNg==", "bodyText": "Shall we format other comments as well in other methods?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393662826", "createdAt": "2020-03-17T13:04:40Z", "author": {"login": "somindatommy"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/URLResolverService.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import java.util.Map;\n+\n+/**\n+ * This interface is defined to resolve a provided URL or a URL context by adding a proxy context path, web context\n+ * root, and the tenant domain as specified. The URL would be resolved for the tenant domain by either adding the tenant\n+ * context to the path or adding a tenant parameter (legacy mode).\n+ */\n+public interface URLResolverService {\n+\n+    /**\n+     * This method is used to return a URL with a proxy context path, a web context root and the tenant domain (If", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MjE2MA=="}, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTI0ODEyOnYy", "diffSide": "RIGHT", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoyMToxN1rOF3mWQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoyMToxN1rOF3mWQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NDI5MA==", "bodyText": "Shall we check for an empty hostname rather than just checking null", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393844290", "createdAt": "2020-03-17T17:21:17Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantURLSupportEnabled;\n+\n+/**\n+ * URL Resolver service implementation.\n+ */\n+public class DefaultURLResolverService implements URLResolverService {\n+\n+    @Override\n+    public String resolveUrl(String url, boolean addProxyContextPath, boolean addWebContextRoot,\n+                             Map<String, Object> properties) throws URLResolverException {\n+\n+        try {\n+            URL parsedUrl = new URL(url);\n+            StringBuilder urlBuilder = new StringBuilder(parsedUrl.getProtocol())\n+                    .append(\"://\")\n+                    .append(parsedUrl.getHost())\n+                    .append(\":\")\n+                    .append(parsedUrl.getPort());\n+            appendContextToUri(parsedUrl.getPath(), addProxyContextPath, addWebContextRoot, urlBuilder,\n+                    false);\n+            return urlBuilder.toString();\n+\n+        } catch (MalformedURLException e) {\n+            throw new URLResolverException(\"Error while parsing the URL: \" + url, e);\n+        }\n+    }\n+\n+    @Override\n+    public String resolveUrlContext(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                    boolean addTenantQueryParamInLegacyMode, Map<String, Object> properties)\n+            throws URLResolverException {\n+\n+        String hostName = getHostName();\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        int mgtTransportPort = getMgtTransportPort(mgtTransport);\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        StringBuilder serverUrl = new StringBuilder(mgtTransport).append(\"://\").append(hostName.toLowerCase());\n+        // If it's well known HTTPS port, skip adding port.\n+        if (mgtTransportPort != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            serverUrl.append(\":\").append(mgtTransportPort);\n+        }\n+\n+        appendContextToUri(urlContext, addProxyContextPath, addWebContextRoot, serverUrl, addTenantQueryParamInLegacyMode);\n+\n+        return serverUrl.toString();\n+    }\n+\n+    private int getMgtTransportPort(String mgtTransport) {\n+\n+        AxisConfiguration axisConfiguration = IdentityCoreServiceComponent.getConfigurationContextService().\n+                getServerConfigContext().getAxisConfiguration();\n+        int mgtTransportPort = CarbonUtils.getTransportProxyPort(axisConfiguration, mgtTransport);\n+        if (mgtTransportPort <= 0) {\n+            mgtTransportPort = CarbonUtils.getTransportPort(axisConfiguration, mgtTransport);\n+        }\n+        return mgtTransportPort;\n+    }\n+\n+    private String getHostName() throws URLResolverException {\n+\n+        String hostName = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.HOST_NAME);\n+        try {\n+            if (hostName == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTI1MzYxOnYy", "diffSide": "RIGHT", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoyMjo0NlrOF3mZ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoyMjo0NlrOF3mZ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NTIyMA==", "bodyText": "Is it reading hostname. This should denote that trying to resolve hostname from system", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393845220", "createdAt": "2020-03-17T17:22:46Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantURLSupportEnabled;\n+\n+/**\n+ * URL Resolver service implementation.\n+ */\n+public class DefaultURLResolverService implements URLResolverService {\n+\n+    @Override\n+    public String resolveUrl(String url, boolean addProxyContextPath, boolean addWebContextRoot,\n+                             Map<String, Object> properties) throws URLResolverException {\n+\n+        try {\n+            URL parsedUrl = new URL(url);\n+            StringBuilder urlBuilder = new StringBuilder(parsedUrl.getProtocol())\n+                    .append(\"://\")\n+                    .append(parsedUrl.getHost())\n+                    .append(\":\")\n+                    .append(parsedUrl.getPort());\n+            appendContextToUri(parsedUrl.getPath(), addProxyContextPath, addWebContextRoot, urlBuilder,\n+                    false);\n+            return urlBuilder.toString();\n+\n+        } catch (MalformedURLException e) {\n+            throw new URLResolverException(\"Error while parsing the URL: \" + url, e);\n+        }\n+    }\n+\n+    @Override\n+    public String resolveUrlContext(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                    boolean addTenantQueryParamInLegacyMode, Map<String, Object> properties)\n+            throws URLResolverException {\n+\n+        String hostName = getHostName();\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        int mgtTransportPort = getMgtTransportPort(mgtTransport);\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        StringBuilder serverUrl = new StringBuilder(mgtTransport).append(\"://\").append(hostName.toLowerCase());\n+        // If it's well known HTTPS port, skip adding port.\n+        if (mgtTransportPort != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            serverUrl.append(\":\").append(mgtTransportPort);\n+        }\n+\n+        appendContextToUri(urlContext, addProxyContextPath, addWebContextRoot, serverUrl, addTenantQueryParamInLegacyMode);\n+\n+        return serverUrl.toString();\n+    }\n+\n+    private int getMgtTransportPort(String mgtTransport) {\n+\n+        AxisConfiguration axisConfiguration = IdentityCoreServiceComponent.getConfigurationContextService().\n+                getServerConfigContext().getAxisConfiguration();\n+        int mgtTransportPort = CarbonUtils.getTransportProxyPort(axisConfiguration, mgtTransport);\n+        if (mgtTransportPort <= 0) {\n+            mgtTransportPort = CarbonUtils.getTransportPort(axisConfiguration, mgtTransport);\n+        }\n+        return mgtTransportPort;\n+    }\n+\n+    private String getHostName() throws URLResolverException {\n+\n+        String hostName = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.HOST_NAME);\n+        try {\n+            if (hostName == null) {\n+                hostName = NetworkUtils.getLocalHostname();\n+            }\n+        } catch (SocketException e) {\n+            throw new URLResolverException(\"Error while trying to read hostname.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTI2NTMzOnYy", "diffSide": "RIGHT", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoyNTo1OFrOF3mhwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzo0MDozN1rOF35OFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NzIzMg==", "bodyText": "We will be having this empty check everywhere right. What if we move this to the same util.\n@mefarazath WDYT?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393847232", "createdAt": "2020-03-17T17:25:58Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantURLSupportEnabled;\n+\n+/**\n+ * URL Resolver service implementation.\n+ */\n+public class DefaultURLResolverService implements URLResolverService {\n+\n+    @Override\n+    public String resolveUrl(String url, boolean addProxyContextPath, boolean addWebContextRoot,\n+                             Map<String, Object> properties) throws URLResolverException {\n+\n+        try {\n+            URL parsedUrl = new URL(url);\n+            StringBuilder urlBuilder = new StringBuilder(parsedUrl.getProtocol())\n+                    .append(\"://\")\n+                    .append(parsedUrl.getHost())\n+                    .append(\":\")\n+                    .append(parsedUrl.getPort());\n+            appendContextToUri(parsedUrl.getPath(), addProxyContextPath, addWebContextRoot, urlBuilder,\n+                    false);\n+            return urlBuilder.toString();\n+\n+        } catch (MalformedURLException e) {\n+            throw new URLResolverException(\"Error while parsing the URL: \" + url, e);\n+        }\n+    }\n+\n+    @Override\n+    public String resolveUrlContext(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                    boolean addTenantQueryParamInLegacyMode, Map<String, Object> properties)\n+            throws URLResolverException {\n+\n+        String hostName = getHostName();\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        int mgtTransportPort = getMgtTransportPort(mgtTransport);\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        StringBuilder serverUrl = new StringBuilder(mgtTransport).append(\"://\").append(hostName.toLowerCase());\n+        // If it's well known HTTPS port, skip adding port.\n+        if (mgtTransportPort != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            serverUrl.append(\":\").append(mgtTransportPort);\n+        }\n+\n+        appendContextToUri(urlContext, addProxyContextPath, addWebContextRoot, serverUrl, addTenantQueryParamInLegacyMode);\n+\n+        return serverUrl.toString();\n+    }\n+\n+    private int getMgtTransportPort(String mgtTransport) {\n+\n+        AxisConfiguration axisConfiguration = IdentityCoreServiceComponent.getConfigurationContextService().\n+                getServerConfigContext().getAxisConfiguration();\n+        int mgtTransportPort = CarbonUtils.getTransportProxyPort(axisConfiguration, mgtTransport);\n+        if (mgtTransportPort <= 0) {\n+            mgtTransportPort = CarbonUtils.getTransportPort(axisConfiguration, mgtTransport);\n+        }\n+        return mgtTransportPort;\n+    }\n+\n+    private String getHostName() throws URLResolverException {\n+\n+        String hostName = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.HOST_NAME);\n+        try {\n+            if (hostName == null) {\n+                hostName = NetworkUtils.getLocalHostname();\n+            }\n+        } catch (SocketException e) {\n+            throw new URLResolverException(\"Error while trying to read hostname.\", e);\n+        }\n+        return hostName;\n+    }\n+\n+    private void appendWebContextRoot(StringBuilder serverUrl) {\n+\n+        String webContextRoot = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants\n+                .WEB_CONTEXT_ROOT);\n+        // If webContextRoot is defined then append it.\n+        if (StringUtils.isNotBlank(webContextRoot)) {\n+            if (webContextRoot.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(webContextRoot.trim());\n+            } else {\n+                serverUrl.append(webContextRoot.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendProxyContextPath(StringBuilder serverUrl) {\n+\n+        String proxyContextPath = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants\n+                .PROXY_CONTEXT_PATH);\n+        // If ProxyContextPath is defined then append it.\n+        if (StringUtils.isNotBlank(proxyContextPath)) {\n+            if (proxyContextPath.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(proxyContextPath.trim());\n+            } else {\n+                serverUrl.append(proxyContextPath.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendTenantAsPathParam(StringBuilder serverUrl) {\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MzQ5NA==", "bodyText": "Thinking again I think this is the way we should proceed as there can be ways tenant will be available based on context", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r394153494", "createdAt": "2020-03-18T07:40:37Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantURLSupportEnabled;\n+\n+/**\n+ * URL Resolver service implementation.\n+ */\n+public class DefaultURLResolverService implements URLResolverService {\n+\n+    @Override\n+    public String resolveUrl(String url, boolean addProxyContextPath, boolean addWebContextRoot,\n+                             Map<String, Object> properties) throws URLResolverException {\n+\n+        try {\n+            URL parsedUrl = new URL(url);\n+            StringBuilder urlBuilder = new StringBuilder(parsedUrl.getProtocol())\n+                    .append(\"://\")\n+                    .append(parsedUrl.getHost())\n+                    .append(\":\")\n+                    .append(parsedUrl.getPort());\n+            appendContextToUri(parsedUrl.getPath(), addProxyContextPath, addWebContextRoot, urlBuilder,\n+                    false);\n+            return urlBuilder.toString();\n+\n+        } catch (MalformedURLException e) {\n+            throw new URLResolverException(\"Error while parsing the URL: \" + url, e);\n+        }\n+    }\n+\n+    @Override\n+    public String resolveUrlContext(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                    boolean addTenantQueryParamInLegacyMode, Map<String, Object> properties)\n+            throws URLResolverException {\n+\n+        String hostName = getHostName();\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        int mgtTransportPort = getMgtTransportPort(mgtTransport);\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        StringBuilder serverUrl = new StringBuilder(mgtTransport).append(\"://\").append(hostName.toLowerCase());\n+        // If it's well known HTTPS port, skip adding port.\n+        if (mgtTransportPort != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            serverUrl.append(\":\").append(mgtTransportPort);\n+        }\n+\n+        appendContextToUri(urlContext, addProxyContextPath, addWebContextRoot, serverUrl, addTenantQueryParamInLegacyMode);\n+\n+        return serverUrl.toString();\n+    }\n+\n+    private int getMgtTransportPort(String mgtTransport) {\n+\n+        AxisConfiguration axisConfiguration = IdentityCoreServiceComponent.getConfigurationContextService().\n+                getServerConfigContext().getAxisConfiguration();\n+        int mgtTransportPort = CarbonUtils.getTransportProxyPort(axisConfiguration, mgtTransport);\n+        if (mgtTransportPort <= 0) {\n+            mgtTransportPort = CarbonUtils.getTransportPort(axisConfiguration, mgtTransport);\n+        }\n+        return mgtTransportPort;\n+    }\n+\n+    private String getHostName() throws URLResolverException {\n+\n+        String hostName = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.HOST_NAME);\n+        try {\n+            if (hostName == null) {\n+                hostName = NetworkUtils.getLocalHostname();\n+            }\n+        } catch (SocketException e) {\n+            throw new URLResolverException(\"Error while trying to read hostname.\", e);\n+        }\n+        return hostName;\n+    }\n+\n+    private void appendWebContextRoot(StringBuilder serverUrl) {\n+\n+        String webContextRoot = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants\n+                .WEB_CONTEXT_ROOT);\n+        // If webContextRoot is defined then append it.\n+        if (StringUtils.isNotBlank(webContextRoot)) {\n+            if (webContextRoot.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(webContextRoot.trim());\n+            } else {\n+                serverUrl.append(webContextRoot.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendProxyContextPath(StringBuilder serverUrl) {\n+\n+        String proxyContextPath = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants\n+                .PROXY_CONTEXT_PATH);\n+        // If ProxyContextPath is defined then append it.\n+        if (StringUtils.isNotBlank(proxyContextPath)) {\n+            if (proxyContextPath.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(proxyContextPath.trim());\n+            } else {\n+                serverUrl.append(proxyContextPath.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendTenantAsPathParam(StringBuilder serverUrl) {\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NzIzMg=="}, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTI5MTYxOnYy", "diffSide": "RIGHT", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityCoreConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzozMjo1NFrOF3mzfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzozMjo1NFrOF3mzfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1MTc3Mg==", "bodyText": "Better to rename the reference name accordingly", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393851772", "createdAt": "2020-03-17T17:32:54Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityCoreConstants.java", "diffHunk": "@@ -28,6 +28,8 @@\n     public static final String FILE_NAME_REGEX = \"FileNameRegEx\";\n     public static final String PORTS_OFFSET = \"Ports.Offset\";\n \n+    public static final String TENANT_NAME_FROM_CONTEXT = \"TenantNameFromContext\";\n+    public static final String ENABLE_TENANT_QUALIFIED_URL_SUPPORT = \"EnableTenantQualifiedUrls\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTI5NDYwOnYy", "diffSide": "RIGHT", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityTenantUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzozMzo0MFrOF3m1iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzozMzo0MFrOF3m1iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1MjI5OQ==", "bodyText": "What if we rename the method to match with the config", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393852299", "createdAt": "2020-03-17T17:33:40Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityTenantUtil.java", "diffHunk": "@@ -320,4 +320,25 @@ public static int getTenantIdOfUser(String username) throws IdentityRuntimeExcep\n             return tenantId;\n         }\n     }\n+\n+    /**\n+     * Get the tenant name from the thread local properties.\n+     *\n+     * @return Tenant name from the context.\n+     */\n+    public static String getTenantDomainFromContext() {\n+        String tenantDomain = (String) IdentityUtil.threadLocalProperties.get().get\n+                (IdentityCoreConstants.TENANT_NAME_FROM_CONTEXT);\n+        return tenantDomain;\n+    }\n+\n+    /**\n+     * Checks whether the tenant URL support is enabled.\n+     *\n+     * @return true if the config is set to true, false otherwise.\n+     */\n+    public static boolean isTenantURLSupportEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTMxNjgzOnYy", "diffSide": "RIGHT", "path": "features/identity-core/org.wso2.carbon.identity.core.server.feature/resources/identity.xml.j2", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzozOTo0MFrOF3nERw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOTo0NTowN1rOF39Lnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjA3MQ==", "bodyText": "I think this config should change. Can we check with @pulasthi7", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393856071", "createdAt": "2020-03-17T17:39:40Z", "author": {"login": "malithie"}, "path": "features/identity-core/org.wso2.carbon.identity.core.server.feature/resources/identity.xml.j2", "diffHunk": "@@ -1913,6 +1913,8 @@\n     -->\n     <EnableFederatedUserAssociation>{{user.association.enable_for_federated_users}}</EnableFederatedUserAssociation>\n \n+    <EnableTenantQualifiedUrls>{{tenant.url_support_enable}}</EnableTenantQualifiedUrls>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNTk0Nw==", "bodyText": "@pulasthi7 suggested {{tenant_context.qualify_urls}} for the config. WDYT?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r394105947", "createdAt": "2020-03-18T04:53:21Z", "author": {"login": "chamathns"}, "path": "features/identity-core/org.wso2.carbon.identity.core.server.feature/resources/identity.xml.j2", "diffHunk": "@@ -1913,6 +1913,8 @@\n     -->\n     <EnableFederatedUserAssociation>{{user.association.enable_for_federated_users}}</EnableFederatedUserAssociation>\n \n+    <EnableTenantQualifiedUrls>{{tenant.url_support_enable}}</EnableTenantQualifiedUrls>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjA3MQ=="}, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NzYzMA==", "bodyText": "But it's still missing with which we qualify the URL right. Shouldn't we have that info", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r394157630", "createdAt": "2020-03-18T07:50:23Z", "author": {"login": "malithie"}, "path": "features/identity-core/org.wso2.carbon.identity.core.server.feature/resources/identity.xml.j2", "diffHunk": "@@ -1913,6 +1913,8 @@\n     -->\n     <EnableFederatedUserAssociation>{{user.association.enable_for_federated_users}}</EnableFederatedUserAssociation>\n \n+    <EnableTenantQualifiedUrls>{{tenant.url_support_enable}}</EnableTenantQualifiedUrls>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjA3MQ=="}, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODYyNg==", "bodyText": "How about {{tenant_context.enable_tenant_qualified_urls}} ?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r394168626", "createdAt": "2020-03-18T08:14:45Z", "author": {"login": "chamathns"}, "path": "features/identity-core/org.wso2.carbon.identity.core.server.feature/resources/identity.xml.j2", "diffHunk": "@@ -1913,6 +1913,8 @@\n     -->\n     <EnableFederatedUserAssociation>{{user.association.enable_for_federated_users}}</EnableFederatedUserAssociation>\n \n+    <EnableTenantQualifiedUrls>{{tenant.url_support_enable}}</EnableTenantQualifiedUrls>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjA3MQ=="}, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxODM5OQ==", "bodyText": "+1", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r394218399", "createdAt": "2020-03-18T09:45:07Z", "author": {"login": "malithie"}, "path": "features/identity-core/org.wso2.carbon.identity.core.server.feature/resources/identity.xml.j2", "diffHunk": "@@ -1913,6 +1913,8 @@\n     -->\n     <EnableFederatedUserAssociation>{{user.association.enable_for_federated_users}}</EnableFederatedUserAssociation>\n \n+    <EnableTenantQualifiedUrls>{{tenant.url_support_enable}}</EnableTenantQualifiedUrls>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjA3MQ=="}, "originalCommit": {"oid": "ed31b860296306d089c9a6efdbc725329d59973b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzE3NTMwOnYy", "diffSide": "RIGHT", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityTenantUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzo0NzoxMlrOF35YxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzo0NzoxMlrOF35YxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NjIyOA==", "bodyText": "isTenantQualifiedUrlsEnabled\nOtherwise the method defines an action but it should denote it's a check", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r394156228", "createdAt": "2020-03-18T07:47:12Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityTenantUtil.java", "diffHunk": "@@ -320,4 +320,26 @@ public static int getTenantIdOfUser(String username) throws IdentityRuntimeExcep\n             return tenantId;\n         }\n     }\n+\n+    /**\n+     * Get the tenant name from the thread local properties.\n+     *\n+     * @return Tenant name from the context.\n+     */\n+    public static String getTenantDomainFromContext() {\n+\n+        String tenantDomain = (String) IdentityUtil.threadLocalProperties.get().get\n+                (IdentityCoreConstants.TENANT_NAME_FROM_CONTEXT);\n+        return tenantDomain;\n+    }\n+\n+    /**\n+     * Checks whether the tenant URL support is enabled.\n+     *\n+     * @return true if the config is set to true, false otherwise.\n+     */\n+    public static boolean enableTenantQualifiedUrls() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f6342ef09b98348a076679ea6921b3af02019d0"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2241, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}