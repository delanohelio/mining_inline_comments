{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNTIzMzYx", "number": 2947, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozOToyOFrOEFAz4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1Mzo1MFrOEKbJLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjkxNjE4OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozOToyOFrOGi_Wdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDozOToyOFrOGi_Wdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0MjcxMQ==", "bodyText": "define dependency versions in the parent pom", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439342711", "createdAt": "2020-06-12T10:39:28Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,187 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~ WSO2 Inc. licenses this file to you under the Apache License,\n+  ~ Version 2.0 (the \"License\"); you may not use this file except\n+  ~ in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied. See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>role-mgt</artifactId>\n+        <version>5.17.107-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.role.mgt.core</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>WSO2 Carbon - Role management</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.carbon.utils</groupId>\n+            <artifactId>org.wso2.carbon.database.utils</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-core</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-lang.wso2</groupId>\n+            <artifactId>commons-lang</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.user.mgt</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.eclipse.osgi</groupId>\n+            <artifactId>org.eclipse.osgi.services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.testutil</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.guava</groupId>\n+            <artifactId>guava</artifactId>\n+            <version>22.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae99469b5be7536b70baa6e7c2b3bd291ab4669b"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjkyMzc4OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0MjoyNVrOGi_bTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo1MToyMFrOGjObIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0Mzk0OA==", "bodyText": "shouldn't we pass userstore domain here?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439343948", "createdAt": "2020-06-12T10:42:25Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import java.util.List;\n+\n+/**\n+ * OSGi service interface which use to manage roles.\n+ */\n+public interface RoleManagementService {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users.\n+     * @param groupList    List of groups.\n+     * @param permissions  List of permissions.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    void addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae99469b5be7536b70baa6e7c2b3bd291ab4669b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4OTY2NA==", "bodyText": "According to the new concept, roles are stored internally. Only groups are specified under user stores.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439589664", "createdAt": "2020-06-12T18:51:20Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import java.util.List;\n+\n+/**\n+ * OSGi service interface which use to manage roles.\n+ */\n+public interface RoleManagementService {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users.\n+     * @param groupList    List of groups.\n+     * @param permissions  List of permissions.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    void addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0Mzk0OA=="}, "originalCommit": {"oid": "ae99469b5be7536b70baa6e7c2b3bd291ab4669b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjkzMjY0OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0NTozM1rOGi_g0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo1NDo1OVrOGjOhXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NTM2Mw==", "bodyText": "since role has an 'id' shall we add a method to retrieve roles by id?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439345363", "createdAt": "2020-06-12T10:45:33Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import java.util.List;\n+\n+/**\n+ * OSGi service interface which use to manage roles.\n+ */\n+public interface RoleManagementService {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users.\n+     * @param groupList    List of groups.\n+     * @param permissions  List of permissions.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    void addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param tenantDomain Tenant domain.\n+     * @return List of role names.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<String> getRoles(String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of role names.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<String> getRoles(int limit, int offset, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param filter       Filter for the role name.\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of role names.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<String> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve the given role.\n+     *\n+     * @param roleName     Role name.\n+     * @param tenantDomain Tenant domain.\n+     * @return The role object.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    Role getRole(String roleName, String tenantDomain) throws IdentityRoleManagementException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae99469b5be7536b70baa6e7c2b3bd291ab4669b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5MTI2MQ==", "bodyText": "Role ID is generated in the SCIM layer and stored in SCIM tables. In this level, the role does not have an ID as we use the existing UM_HYBRID_ROLE table to store roles.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439591261", "createdAt": "2020-06-12T18:54:59Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import java.util.List;\n+\n+/**\n+ * OSGi service interface which use to manage roles.\n+ */\n+public interface RoleManagementService {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users.\n+     * @param groupList    List of groups.\n+     * @param permissions  List of permissions.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    void addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param tenantDomain Tenant domain.\n+     * @return List of role names.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<String> getRoles(String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of role names.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<String> getRoles(int limit, int offset, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param filter       Filter for the role name.\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of role names.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<String> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve the given role.\n+     *\n+     * @param roleName     Role name.\n+     * @param tenantDomain Tenant domain.\n+     * @return The role object.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    Role getRole(String roleName, String tenantDomain) throws IdentityRoleManagementException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NTM2Mw=="}, "originalCommit": {"oid": "ae99469b5be7536b70baa6e7c2b3bd291ab4669b"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjkzODAxOnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0NzoyMFrOGi_j8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwNTozNTozMFrOGjV3Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NjE2MA==", "bodyText": "its better if we can pass error codes as well.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439346160", "createdAt": "2020-06-12T10:47:20Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public void addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementException(\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getRoles(String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getRoles(int limit, int offset, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleName, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleName, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public void updateRoleName(String roleName, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.updateRoleName(roleName, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getUserListOfRole(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void updateUserListOfRole(String roleName, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleName, newUserList, tenantDomain);\n+        roleDAO.removeUsersFromRole(roleName, deletedUserList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getGroupListOfRole(String roleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getGroupListOfRole(roleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void updateGroupListOfRole(String roleName, List<String> newGroupNamesList,\n+            List<String> deletedGroupNamesList, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addGroupsToRole(roleName, newGroupNamesList, tenantDomain);\n+        roleDAO.removeGroupsFromRole(roleName, newGroupNamesList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getPermissionListOfRole(String roleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        try {\n+            return getSelectedPermissions(getUserAdminProxy().getRolePermissions(roleName, tenantId));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementException(\n+                    \"An error occurred when retrieving permissions of role : \" + roleName, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae99469b5be7536b70baa6e7c2b3bd291ab4669b"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxMTQ5MA==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439711490", "createdAt": "2020-06-13T05:35:30Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public void addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementException(\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getRoles(String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getRoles(int limit, int offset, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleName, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleName, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public void updateRoleName(String roleName, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.updateRoleName(roleName, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getUserListOfRole(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void updateUserListOfRole(String roleName, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleName, newUserList, tenantDomain);\n+        roleDAO.removeUsersFromRole(roleName, deletedUserList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getGroupListOfRole(String roleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getGroupListOfRole(roleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void updateGroupListOfRole(String roleName, List<String> newGroupNamesList,\n+            List<String> deletedGroupNamesList, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addGroupsToRole(roleName, newGroupNamesList, tenantDomain);\n+        roleDAO.removeGroupsFromRole(roleName, newGroupNamesList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getPermissionListOfRole(String roleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        try {\n+            return getSelectedPermissions(getUserAdminProxy().getRolePermissions(roleName, tenantId));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementException(\n+                    \"An error occurred when retrieving permissions of role : \" + roleName, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NjE2MA=="}, "originalCommit": {"oid": "ae99469b5be7536b70baa6e7c2b3bd291ab4669b"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjk0MTg0OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0ODozN1rOGi_mKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwNTozNTozM1rOGjV3DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NjczMQ==", "bodyText": "remove redundant + in from \" + \"DB", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439346731", "createdAt": "2020-06-12T10:48:37Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -0,0 +1,779 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.CarbonConstants;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants.RoleTableColumns;\n+import org.wso2.carbon.user.api.RealmConfiguration;\n+import org.wso2.carbon.user.api.UserRealm;\n+import org.wso2.carbon.user.api.UserStoreException;\n+import org.wso2.carbon.user.core.UserCoreConstants;\n+import org.wso2.carbon.user.core.UserStoreConfigConstants;\n+import org.wso2.carbon.user.core.util.UserCoreUtil;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_LIMIT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_OFFSET;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.OPERATION_FORBIDDEN;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_ALREADY_EXISTS;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.SORTING_NOT_IMPLEMENTED;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.H2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MICROSOFT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MY_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.POSTGRE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_GROUP_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_USER_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_USER_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_GROUP_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_USER_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_GROUP_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_USER_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_ROLE_NAME_SQL;\n+\n+/**\n+ * Implementation of the {@link RoleDAO} interface.\n+ */\n+public class RoleDAOImpl implements RoleDAO {\n+\n+    private Log log = LogFactory.getLog(RoleDAOImpl.class);\n+    private static volatile RoleDAOImpl instance;\n+\n+    private RoleDAOImpl() {\n+\n+    }\n+\n+    public static RoleDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new RoleDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    @Override\n+    public void addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Creating the role: \" + roleName + \" in the tenantDomain: \" + tenantDomain);\n+        }\n+\n+        if (!this.isExistingRole(roleName, tenantDomain)) {\n+            try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+                try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_ROLE_SQL)) {\n+                    statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                    statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                    statement.executeUpdate();\n+                }\n+            } catch (SQLException e) {\n+                String errorMessage = \"Error while creating the role: %s in the tenantDomain: %s\";\n+                throw new IdentityRoleManagementException(String.format(errorMessage, roleName, tenantDomain), e);\n+            }\n+        } else {\n+            throw new IdentityRoleManagementException(ROLE_ALREADY_EXISTS.getCode(),\n+                    \"Role already exist for the role name: \" + roleName);\n+        }\n+\n+        // Assign users to the role.\n+        addUsersToRole(roleName, userList, tenantDomain);\n+        // Assign groups to the role.\n+        addGroupsToRole(roleName, groupList, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        Role role = new Role();\n+        role.setName(roleName);\n+        role.setTenantDomain(tenantDomain);\n+        role.setUsers(this.getUserListOfRole(roleName, tenantDomain));\n+        role.setGroups(this.getGroupListOfRole(roleName, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public List<String> getRoles(String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        List<String> roles;\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, GET_ROLES)) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                roles = buildRolesList(statement);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementException(\"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    @Override\n+    public List<String> getRoles(int limit, int offset, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        validateAttributesForPagination(limit, offset);\n+        List<String> roles;\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQuery(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                roles = processListRolesQuery(limit, offset, statement);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementException(\"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    @Override\n+    public List<String> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (StringUtils.isBlank(filter) || \"*\".equals(filter)) {\n+            return getRoles(limit, offset, tenantDomain);\n+        }\n+        validateAttributesForPagination(limit, offset, sortBy, sortOrder);\n+        String filterResolvedForSQL = resolveSQLFilter(filter);\n+        List<String> roles;\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQueryByRoleName(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.UM_ROLE_NAME, filterResolvedForSQL);\n+                roles = processListRolesQuery(limit, offset, statement);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementException(\"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    private List<String> processListRolesQuery(int limit, int offset, NamedPreparedStatement statement)\n+            throws SQLException {\n+\n+        statement.setInt(RoleConstants.OFFSET, offset);\n+        statement.setInt(RoleConstants.LIMIT, limit);\n+        statement.setInt(RoleConstants.ZERO_BASED_START_INDEX, offset);\n+        statement.setInt(RoleConstants.ONE_BASED_START_INDEX, offset + 1);\n+        statement.setInt(RoleConstants.END_INDEX, offset + limit);\n+        return buildRolesList(statement);\n+    }\n+\n+    private List<String> buildRolesList(NamedPreparedStatement statement) throws SQLException {\n+\n+        List<String> roles = new ArrayList<>();\n+        try (ResultSet resultSet = statement.executeQuery()) {\n+            while (resultSet.next()) {\n+                String name = resultSet.getString(1);\n+                // Append the internal domain.\n+                if (!name.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n+                    name = UserCoreConstants.INTERNAL_DOMAIN + CarbonConstants.DOMAIN_SEPARATOR + name;\n+                }\n+                roles.add(name);\n+            }\n+        }\n+        return roles;\n+    }\n+\n+    private String resolveSQLFilter(String filter) {\n+\n+        // To avoid any issues when the filter string is blank or null, assigning \"%\" to SQLFilter.\n+        String sqlfilter = \"%\";\n+        if (StringUtils.isNotBlank(filter)) {\n+            sqlfilter = filter.trim().replace(\"*\", \"%\").replace(\"?\", \"_\");\n+        }\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Input filter: \" + filter + \" resolved for SQL filter: \" + sqlfilter);\n+        }\n+        return sqlfilter;\n+    }\n+\n+    private String getDBTypeSpecificRolesRetrievalQueryByRoleName(String databaseProductName)\n+            throws IdentityRoleManagementException {\n+\n+        if (MY_SQL.equals(databaseProductName) || H2.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+        } else if (ORACLE.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+        } else if (MICROSOFT.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+        } else if (POSTGRE_SQL.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+        } else if (databaseProductName != null && databaseProductName.contains(DB2)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+        } else if (INFORMIX.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+        }\n+\n+        throw new IdentityRoleManagementException(\n+                \"Error while listing roles from \" + \"DB. Database driver for \" + databaseProductName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae99469b5be7536b70baa6e7c2b3bd291ab4669b"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxMTUwMA==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r439711500", "createdAt": "2020-06-13T05:35:33Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -0,0 +1,779 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.CarbonConstants;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants.RoleTableColumns;\n+import org.wso2.carbon.user.api.RealmConfiguration;\n+import org.wso2.carbon.user.api.UserRealm;\n+import org.wso2.carbon.user.api.UserStoreException;\n+import org.wso2.carbon.user.core.UserCoreConstants;\n+import org.wso2.carbon.user.core.UserStoreConfigConstants;\n+import org.wso2.carbon.user.core.util.UserCoreUtil;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_LIMIT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_OFFSET;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.OPERATION_FORBIDDEN;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_ALREADY_EXISTS;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.SORTING_NOT_IMPLEMENTED;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.H2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MICROSOFT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MY_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.POSTGRE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_GROUP_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_USER_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_USER_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_GROUP_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_USER_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_GROUP_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_USER_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_ROLE_NAME_SQL;\n+\n+/**\n+ * Implementation of the {@link RoleDAO} interface.\n+ */\n+public class RoleDAOImpl implements RoleDAO {\n+\n+    private Log log = LogFactory.getLog(RoleDAOImpl.class);\n+    private static volatile RoleDAOImpl instance;\n+\n+    private RoleDAOImpl() {\n+\n+    }\n+\n+    public static RoleDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new RoleDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    @Override\n+    public void addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Creating the role: \" + roleName + \" in the tenantDomain: \" + tenantDomain);\n+        }\n+\n+        if (!this.isExistingRole(roleName, tenantDomain)) {\n+            try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+                try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_ROLE_SQL)) {\n+                    statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                    statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                    statement.executeUpdate();\n+                }\n+            } catch (SQLException e) {\n+                String errorMessage = \"Error while creating the role: %s in the tenantDomain: %s\";\n+                throw new IdentityRoleManagementException(String.format(errorMessage, roleName, tenantDomain), e);\n+            }\n+        } else {\n+            throw new IdentityRoleManagementException(ROLE_ALREADY_EXISTS.getCode(),\n+                    \"Role already exist for the role name: \" + roleName);\n+        }\n+\n+        // Assign users to the role.\n+        addUsersToRole(roleName, userList, tenantDomain);\n+        // Assign groups to the role.\n+        addGroupsToRole(roleName, groupList, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        Role role = new Role();\n+        role.setName(roleName);\n+        role.setTenantDomain(tenantDomain);\n+        role.setUsers(this.getUserListOfRole(roleName, tenantDomain));\n+        role.setGroups(this.getGroupListOfRole(roleName, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public List<String> getRoles(String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        List<String> roles;\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, GET_ROLES)) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                roles = buildRolesList(statement);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementException(\"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    @Override\n+    public List<String> getRoles(int limit, int offset, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        validateAttributesForPagination(limit, offset);\n+        List<String> roles;\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQuery(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                roles = processListRolesQuery(limit, offset, statement);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementException(\"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    @Override\n+    public List<String> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (StringUtils.isBlank(filter) || \"*\".equals(filter)) {\n+            return getRoles(limit, offset, tenantDomain);\n+        }\n+        validateAttributesForPagination(limit, offset, sortBy, sortOrder);\n+        String filterResolvedForSQL = resolveSQLFilter(filter);\n+        List<String> roles;\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQueryByRoleName(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.UM_ROLE_NAME, filterResolvedForSQL);\n+                roles = processListRolesQuery(limit, offset, statement);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementException(\"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    private List<String> processListRolesQuery(int limit, int offset, NamedPreparedStatement statement)\n+            throws SQLException {\n+\n+        statement.setInt(RoleConstants.OFFSET, offset);\n+        statement.setInt(RoleConstants.LIMIT, limit);\n+        statement.setInt(RoleConstants.ZERO_BASED_START_INDEX, offset);\n+        statement.setInt(RoleConstants.ONE_BASED_START_INDEX, offset + 1);\n+        statement.setInt(RoleConstants.END_INDEX, offset + limit);\n+        return buildRolesList(statement);\n+    }\n+\n+    private List<String> buildRolesList(NamedPreparedStatement statement) throws SQLException {\n+\n+        List<String> roles = new ArrayList<>();\n+        try (ResultSet resultSet = statement.executeQuery()) {\n+            while (resultSet.next()) {\n+                String name = resultSet.getString(1);\n+                // Append the internal domain.\n+                if (!name.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n+                    name = UserCoreConstants.INTERNAL_DOMAIN + CarbonConstants.DOMAIN_SEPARATOR + name;\n+                }\n+                roles.add(name);\n+            }\n+        }\n+        return roles;\n+    }\n+\n+    private String resolveSQLFilter(String filter) {\n+\n+        // To avoid any issues when the filter string is blank or null, assigning \"%\" to SQLFilter.\n+        String sqlfilter = \"%\";\n+        if (StringUtils.isNotBlank(filter)) {\n+            sqlfilter = filter.trim().replace(\"*\", \"%\").replace(\"?\", \"_\");\n+        }\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Input filter: \" + filter + \" resolved for SQL filter: \" + sqlfilter);\n+        }\n+        return sqlfilter;\n+    }\n+\n+    private String getDBTypeSpecificRolesRetrievalQueryByRoleName(String databaseProductName)\n+            throws IdentityRoleManagementException {\n+\n+        if (MY_SQL.equals(databaseProductName) || H2.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+        } else if (ORACLE.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+        } else if (MICROSOFT.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+        } else if (POSTGRE_SQL.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+        } else if (databaseProductName != null && databaseProductName.contains(DB2)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+        } else if (INFORMIX.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+        }\n+\n+        throw new IdentityRoleManagementException(\n+                \"Error while listing roles from \" + \"DB. Database driver for \" + databaseProductName", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NjczMQ=="}, "originalCommit": {"oid": "ae99469b5be7536b70baa6e7c2b3bd291ab4669b"}, "originalPosition": 278}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODg1NzUxOnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNTo1OToyMlrOGpUo1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNDoxNTozNVrOGqEOdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4MjkzMg==", "bodyText": "Shall we set the current coverage as minimum?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r445982932", "createdAt": "2020-06-26T05:59:22Z", "author": {"login": "mefarazath"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,184 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~ WSO2 Inc. licenses this file to you under the Apache License,\n+  ~ Version 2.0 (the \"License\"); you may not use this file except\n+  ~ in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied. See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>role-mgt</artifactId>\n+        <version>5.17.117-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.role.mgt.core</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>WSO2 Carbon - Role management</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.carbon.utils</groupId>\n+            <artifactId>org.wso2.carbon.database.utils</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-lang.wso2</groupId>\n+            <artifactId>commons-lang</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.user.mgt</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.eclipse.osgi</groupId>\n+            <artifactId>org.eclipse.osgi.services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-core</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.testutil</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.felix</groupId>\n+                <artifactId>maven-bundle-plugin</artifactId>\n+                <extensions>true</extensions>\n+                <configuration>\n+                    <instructions>\n+                        <Bundle-SymbolicName>\n+                            ${project.artifactId}\n+                        </Bundle-SymbolicName>\n+                        <Import-Package>\n+                            org.apache.commons.logging; version=\"${import.package.version.commons.logging}\",\n+                            org.osgi.framework; version=\"${osgi.framework.imp.pkg.version.range}\",\n+                            org.osgi.service.component; version=\"${osgi.service.component.imp.pkg.version.range}\"\n+                            org.wso2.carbon.user.core.*; version=\"${carbon.kernel.package.import.version.range}\",\n+                            org.wso2.carbon.utils.*; version=\"${carbon.kernel.package.import.version.range}\",\n+                            org.wso2.carbon.database.utils.*;version=\"${org.wso2.carbon.database.utils.version.range}\"\n+                        </Import-Package>\n+                        <Private-Package>\n+                            org.wso2.carbon.identity.role.mgt.core.internal,\n+                        </Private-Package>\n+                        <Export-Package>\n+                            !org.wso2.carbon.identity.role.mgt.core.internal\n+                            org.wso2.carbon.identity.role.mgt.core.*; version=\"${carbon.identity.package.export.version}\",\n+                        </Export-Package>\n+                    </instructions>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>${maven.surefire.plugin.version}</version>\n+                <configuration>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <version>${jacoco.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>default-prepare-agent</id>\n+                        <goals>\n+                            <goal>prepare-agent</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-prepare-agent-integration</id>\n+                        <goals>\n+                            <goal>prepare-agent-integration</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report</id>\n+                        <goals>\n+                            <goal>report</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report-integration</id>\n+                        <goals>\n+                            <goal>report-integration</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-check</id>\n+                        <goals>\n+                            <goal>check</goal>\n+                        </goals>\n+                        <configuration>\n+                            <rules>\n+                                <rule implementation=\"org.jacoco.maven.RuleConfiguration\">\n+                                    <element>BUNDLE</element>\n+                                    <limits>\n+                                        <limit implementation=\"org.jacoco.report.check.Limit\">\n+                                            <counter>COMPLEXITY</counter>\n+                                            <value>COVEREDRATIO</value>\n+                                            <!--<minimum>0.60</minimum>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a9e7cb6e6c84b1481868ca414e2bfb9f1e15562"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2MjYxNA==", "bodyText": "Updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446762614", "createdAt": "2020-06-29T04:15:35Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,184 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~ WSO2 Inc. licenses this file to you under the Apache License,\n+  ~ Version 2.0 (the \"License\"); you may not use this file except\n+  ~ in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied. See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>role-mgt</artifactId>\n+        <version>5.17.117-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.role.mgt.core</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>WSO2 Carbon - Role management</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.carbon.utils</groupId>\n+            <artifactId>org.wso2.carbon.database.utils</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-lang.wso2</groupId>\n+            <artifactId>commons-lang</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.user.mgt</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.eclipse.osgi</groupId>\n+            <artifactId>org.eclipse.osgi.services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-core</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.testutil</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.felix</groupId>\n+                <artifactId>maven-bundle-plugin</artifactId>\n+                <extensions>true</extensions>\n+                <configuration>\n+                    <instructions>\n+                        <Bundle-SymbolicName>\n+                            ${project.artifactId}\n+                        </Bundle-SymbolicName>\n+                        <Import-Package>\n+                            org.apache.commons.logging; version=\"${import.package.version.commons.logging}\",\n+                            org.osgi.framework; version=\"${osgi.framework.imp.pkg.version.range}\",\n+                            org.osgi.service.component; version=\"${osgi.service.component.imp.pkg.version.range}\"\n+                            org.wso2.carbon.user.core.*; version=\"${carbon.kernel.package.import.version.range}\",\n+                            org.wso2.carbon.utils.*; version=\"${carbon.kernel.package.import.version.range}\",\n+                            org.wso2.carbon.database.utils.*;version=\"${org.wso2.carbon.database.utils.version.range}\"\n+                        </Import-Package>\n+                        <Private-Package>\n+                            org.wso2.carbon.identity.role.mgt.core.internal,\n+                        </Private-Package>\n+                        <Export-Package>\n+                            !org.wso2.carbon.identity.role.mgt.core.internal\n+                            org.wso2.carbon.identity.role.mgt.core.*; version=\"${carbon.identity.package.export.version}\",\n+                        </Export-Package>\n+                    </instructions>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>${maven.surefire.plugin.version}</version>\n+                <configuration>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <version>${jacoco.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>default-prepare-agent</id>\n+                        <goals>\n+                            <goal>prepare-agent</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-prepare-agent-integration</id>\n+                        <goals>\n+                            <goal>prepare-agent-integration</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report</id>\n+                        <goals>\n+                            <goal>report</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report-integration</id>\n+                        <goals>\n+                            <goal>report-integration</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-check</id>\n+                        <goals>\n+                            <goal>check</goal>\n+                        </goals>\n+                        <configuration>\n+                            <rules>\n+                                <rule implementation=\"org.jacoco.maven.RuleConfiguration\">\n+                                    <element>BUNDLE</element>\n+                                    <limits>\n+                                        <limit implementation=\"org.jacoco.report.check.Limit\">\n+                                            <counter>COMPLEXITY</counter>\n+                                            <value>COVEREDRATIO</value>\n+                                            <!--<minimum>0.60</minimum>-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4MjkzMg=="}, "originalCommit": {"oid": "1a9e7cb6e6c84b1481868ca414e2bfb9f1e15562"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDcxMjAwOnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzozNjoyMlrOGqIQdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODozNDoyMVrOGqdPKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyODY2Mg==", "bodyText": "So this will be a PUT updating full permission list", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446828662", "createdAt": "2020-06-29T07:36:22Z", "author": {"login": "malithie"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import java.util.List;\n+\n+/**\n+ * OSGi service interface which use to manage roles.\n+ */\n+public interface RoleManagementService {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users IDs.\n+     * @param groupList    List of groups IDs.\n+     * @param permissions  List of permissions.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of roles.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param filter       Filter for the Role ID.\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of roles.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return The role object.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update Role ID.\n+     *\n+     * @param roleID       Role ID.\n+     * @param newRoleName  New Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Delete the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get user list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of users.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update the user list of the given role.\n+     *\n+     * @param roleID          Role ID.\n+     * @param newUserList     The set of new users.\n+     * @param deletedUserList The set of deleted users.\n+     * @param tenantDomain    Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get group list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of groups.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<GroupBasicInfo> getGroupListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update the group list of the given role.\n+     *\n+     * @param roleID                Role ID.\n+     * @param newGroupNamesList     The set of new groups.\n+     * @param deletedGroupNamesList The set of deleted groups.\n+     * @param tenantDomain          Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateGroupListOfRole(String roleID, List<String> newGroupNamesList,\n+            List<String> deletedGroupNamesList, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get permission list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of permissions.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<String> getPermissionListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Set the list of permission to the given role.\n+     *\n+     * @param roleID      Role ID.\n+     * @param permissions List of permissions.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo setPermissionsForRole(String roleID, List<String> permissions, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NzY0NQ==", "bodyText": "Yes. We have used the available UserRealmProxy for mange permissions which only have the capability to set full list.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446847645", "createdAt": "2020-06-29T08:11:55Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import java.util.List;\n+\n+/**\n+ * OSGi service interface which use to manage roles.\n+ */\n+public interface RoleManagementService {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users IDs.\n+     * @param groupList    List of groups IDs.\n+     * @param permissions  List of permissions.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of roles.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param filter       Filter for the Role ID.\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of roles.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return The role object.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update Role ID.\n+     *\n+     * @param roleID       Role ID.\n+     * @param newRoleName  New Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Delete the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get user list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of users.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update the user list of the given role.\n+     *\n+     * @param roleID          Role ID.\n+     * @param newUserList     The set of new users.\n+     * @param deletedUserList The set of deleted users.\n+     * @param tenantDomain    Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get group list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of groups.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<GroupBasicInfo> getGroupListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update the group list of the given role.\n+     *\n+     * @param roleID                Role ID.\n+     * @param newGroupNamesList     The set of new groups.\n+     * @param deletedGroupNamesList The set of deleted groups.\n+     * @param tenantDomain          Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateGroupListOfRole(String roleID, List<String> newGroupNamesList,\n+            List<String> deletedGroupNamesList, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get permission list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of permissions.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<String> getPermissionListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Set the list of permission to the given role.\n+     *\n+     * @param roleID      Role ID.\n+     * @param permissions List of permissions.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo setPermissionsForRole(String roleID, List<String> permissions, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyODY2Mg=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2MDA4OA==", "bodyText": "This is the existing RolePermissionManagementServiceImpl. We have moved the same implementation to the role management service. https://github.com/wso2/carbon-identity-framework/blob/master/components/user-mgt/org.wso2.carbon.user.mgt/src/main/java/org/wso2/carbon/user/mgt/RolePermissionManagementServiceImpl.java", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446860088", "createdAt": "2020-06-29T08:33:31Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import java.util.List;\n+\n+/**\n+ * OSGi service interface which use to manage roles.\n+ */\n+public interface RoleManagementService {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users IDs.\n+     * @param groupList    List of groups IDs.\n+     * @param permissions  List of permissions.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of roles.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param filter       Filter for the Role ID.\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of roles.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return The role object.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update Role ID.\n+     *\n+     * @param roleID       Role ID.\n+     * @param newRoleName  New Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Delete the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get user list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of users.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update the user list of the given role.\n+     *\n+     * @param roleID          Role ID.\n+     * @param newUserList     The set of new users.\n+     * @param deletedUserList The set of deleted users.\n+     * @param tenantDomain    Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get group list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of groups.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<GroupBasicInfo> getGroupListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update the group list of the given role.\n+     *\n+     * @param roleID                Role ID.\n+     * @param newGroupNamesList     The set of new groups.\n+     * @param deletedGroupNamesList The set of deleted groups.\n+     * @param tenantDomain          Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateGroupListOfRole(String roleID, List<String> newGroupNamesList,\n+            List<String> deletedGroupNamesList, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get permission list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of permissions.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<String> getPermissionListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Set the list of permission to the given role.\n+     *\n+     * @param roleID      Role ID.\n+     * @param permissions List of permissions.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo setPermissionsForRole(String roleID, List<String> permissions, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyODY2Mg=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE3MjM5NQ==", "bodyText": "ok", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447172395", "createdAt": "2020-06-29T18:34:21Z", "author": {"login": "malithie"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementService.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import java.util.List;\n+\n+/**\n+ * OSGi service interface which use to manage roles.\n+ */\n+public interface RoleManagementService {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users IDs.\n+     * @param groupList    List of groups IDs.\n+     * @param permissions  List of permissions.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, List<String> permissions,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of roles.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param filter       Filter for the Role ID.\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of roles.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return The role object.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update Role ID.\n+     *\n+     * @param roleID       Role ID.\n+     * @param newRoleName  New Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Delete the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get user list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of users.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update the user list of the given role.\n+     *\n+     * @param roleID          Role ID.\n+     * @param newUserList     The set of new users.\n+     * @param deletedUserList The set of deleted users.\n+     * @param tenantDomain    Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get group list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of groups.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<GroupBasicInfo> getGroupListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Update the group list of the given role.\n+     *\n+     * @param roleID                Role ID.\n+     * @param newGroupNamesList     The set of new groups.\n+     * @param deletedGroupNamesList The set of deleted groups.\n+     * @param tenantDomain          Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo updateGroupListOfRole(String roleID, List<String> newGroupNamesList,\n+            List<String> deletedGroupNamesList, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Get permission list of the given role.\n+     *\n+     * @param roleID       Role ID.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of permissions.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<String> getPermissionListOfRole(String roleID, String tenantDomain) throws IdentityRoleManagementException;\n+\n+    /**\n+     * Set the list of permission to the given role.\n+     *\n+     * @param roleID      Role ID.\n+     * @param permissions List of permissions.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo setPermissionsForRole(String roleID, List<String> permissions, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyODY2Mg=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDcxNjM3OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzozNzozM1rOGqIS9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTowMjo1OFrOGqVKkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyOTMwMg==", "bodyText": "We can move implementation to an internal package right", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446829302", "createdAt": "2020-06-29T07:37:33Z", "author": {"login": "malithie"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0MDE0NQ==", "bodyText": "Updated the PR with the changes.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447040145", "createdAt": "2020-06-29T15:02:58Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyOTMwMg=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDcyMjY2OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzozOTozOFrOGqIW5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjo1OToxNlrOGqp13w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMDMxMA==", "bodyText": "Has this been the model we followed. Shouldn't the dao be a composite of the implementation and instantiated at the constructor.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446830310", "createdAt": "2020-06-29T07:39:38Z", "author": {"login": "malithie"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3ODkxMQ==", "bodyText": "Updated the PR with the new changes.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447378911", "createdAt": "2020-06-30T02:59:16Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMDMxMA=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDczMTgwOnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzo0MjoyNVrOGqIcNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToxODoyMlrOGrLBlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMTY3MA==", "bodyText": "Should we do two operations here. Isn't it possible to handle the set to be updated at dao layer and optimize the call from there", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446831670", "createdAt": "2020-06-29T07:42:25Z", "author": {"login": "malithie"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.updateRoleName(roleID, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleID, newUserList, tenantDomain);\n+        return roleDAO.removeUsersFromRole(roleID, deletedUserList, tenantDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNDcwOQ==", "bodyText": "Or optimize avoiding duplicated calls", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446834709", "createdAt": "2020-06-29T07:48:27Z", "author": {"login": "malithie"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.updateRoleName(roleID, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleID, newUserList, tenantDomain);\n+        return roleDAO.removeUsersFromRole(roleID, deletedUserList, tenantDomain);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMTY3MA=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NjUwMQ==", "bodyText": "We will have to do INSERT and DELETE operations to add and remove users. So don't we need two calls for that?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446846501", "createdAt": "2020-06-29T08:09:53Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.updateRoleName(roleID, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleID, newUserList, tenantDomain);\n+        return roleDAO.removeUsersFromRole(roleID, deletedUserList, tenantDomain);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMTY3MA=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3Njk5Mw==", "bodyText": "agree on that but shouldn't that be atomic. Not sure how the implementation should be. Better to reach for a db expert. Otherwise won't it have race conditions?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447376993", "createdAt": "2020-06-30T02:51:57Z", "author": {"login": "malithie"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.updateRoleName(roleID, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleID, newUserList, tenantDomain);\n+        return roleDAO.removeUsersFromRole(roleID, deletedUserList, tenantDomain);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMTY3MA=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMjU4Mg==", "bodyText": "Added a single method in the DAO layer to handle the updateUserListOfRole as discussed.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447922582", "createdAt": "2020-06-30T19:18:22Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.updateRoleName(roleID, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleID, newUserList, tenantDomain);\n+        return roleDAO.removeUsersFromRole(roleID, deletedUserList, tenantDomain);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMTY3MA=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDczNDk5OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzo0MzoyOVrOGqIeMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToxODozNVrOGrLB-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMjE3OA==", "bodyText": "same case I mentioned above", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446832178", "createdAt": "2020-06-29T07:43:29Z", "author": {"login": "malithie"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.updateRoleName(roleID, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleID, newUserList, tenantDomain);\n+        return roleDAO.removeUsersFromRole(roleID, deletedUserList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<GroupBasicInfo> getGroupListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getGroupListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateGroupListOfRole(String roleID, List<String> newGroupNamesList,\n+            List<String> deletedGroupNamesList, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addGroupsToRole(roleID, newGroupNamesList, tenantDomain);\n+        return roleDAO.removeGroupsFromRole(roleID, newGroupNamesList, tenantDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMjY4MA==", "bodyText": "Added a single method in the DAO layer to handle the updateGroupListOfRole as discussed.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447922680", "createdAt": "2020-06-30T19:18:35Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.updateRoleName(roleID, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleID, newUserList, tenantDomain);\n+        return roleDAO.removeUsersFromRole(roleID, deletedUserList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<GroupBasicInfo> getGroupListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getGroupListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateGroupListOfRole(String roleID, List<String> newGroupNamesList,\n+            List<String> deletedGroupNamesList, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addGroupsToRole(roleID, newGroupNamesList, tenantDomain);\n+        return roleDAO.removeGroupsFromRole(roleID, newGroupNamesList, tenantDomain);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMjE3OA=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDc0NTc3OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzo0Njo0OFrOGqIkuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoxNToxMFrOGqgjvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMzg0OQ==", "bodyText": "Doesn't this trigger duplicated queries\nCan't this be addressed as dao layer", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446833849", "createdAt": "2020-06-29T07:46:48Z", "author": {"login": "malithie"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0ODU0Mw==", "bodyText": "We have used the available UserRealmProxy for mange permissions. So we didn't implement a DAO for that in the role management component.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446848543", "createdAt": "2020-06-29T08:13:31Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMzg0OQ=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2MTQwNA==", "bodyText": "This is the existing RolePermissionManagementServiceImpl. We have moved the same implementation to the role management service. https://github.com/wso2/carbon-identity-framework/blob/master/components/user-mgt/org.wso2.carbon.user.mgt/src/main/java/org/wso2/carbon/user/mgt/RolePermissionManagementServiceImpl.java", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446861404", "createdAt": "2020-06-29T08:35:54Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMzg0OQ=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE3NTI3Nw==", "bodyText": "Using user realm proxy is fine, but this initiate same query to convert role name right", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447175277", "createdAt": "2020-06-29T18:39:20Z", "author": {"login": "malithie"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMzg0OQ=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyNjgxNQ==", "bodyText": "Ah yes. Got the point. Moved the setPermissions logic to DAO and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447226815", "createdAt": "2020-06-29T20:15:10Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMzg0OQ=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDc1NzA0OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzo0OTo1NlrOGqIrPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToxNjo0MFrOGrK-Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTUxOA==", "bodyText": "Shouldn't tenant domain being passed should be incorporated to pick the user realm", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446835518", "createdAt": "2020-06-29T07:49:56Z", "author": {"login": "malithie"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.updateRoleName(roleID, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleID, newUserList, tenantDomain);\n+        return roleDAO.removeUsersFromRole(roleID, deletedUserList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<GroupBasicInfo> getGroupListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getGroupListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateGroupListOfRole(String roleID, List<String> newGroupNamesList,\n+            List<String> deletedGroupNamesList, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addGroupsToRole(roleID, newGroupNamesList, tenantDomain);\n+        return roleDAO.removeGroupsFromRole(roleID, newGroupNamesList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getPermissionListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        String roleName = roleDAO.getRoleNameByID(roleID, tenantDomain);\n+        try {\n+            return getSelectedPermissions(getUserAdminProxy().getRolePermissions(roleName, tenantId));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when retrieving permissions of role : \" + roleID, e);\n+        }\n+    }\n+\n+    @Override\n+    public RoleBasicInfo setPermissionsForRole(String roleID, List<String> permissions, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        String roleName = roleDAO.getRoleNameByID(roleID, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+            return new RoleBasicInfo(roleID, roleName);\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleID, e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isExistingRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.isExistingRoleID(roleID, tenantDomain);\n+    }\n+\n+    /**\n+     * Get the UserAdmin service.\n+     *\n+     * @return UserRealmProxy of UserAdmin service.\n+     */\n+    private UserRealmProxy getUserAdminProxy() {\n+\n+        UserRealm realm = (UserRealm) CarbonContext.getThreadLocalCarbonContext().getUserRealm();\n+        return new UserRealmProxy(realm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMTczOQ==", "bodyText": "Updated the PR with the discussed changes and moved permissions related APIs also to the DAO layer.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r447921739", "createdAt": "2020-06-30T19:16:40Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAO;\n+import org.wso2.carbon.identity.role.mgt.core.dao.RoleDAOImpl;\n+import org.wso2.carbon.user.core.UserRealm;\n+import org.wso2.carbon.user.mgt.UserRealmProxy;\n+import org.wso2.carbon.user.mgt.common.UIPermissionNode;\n+import org.wso2.carbon.user.mgt.common.UserAdminException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+\n+/**\n+ * Implementation of the {@link RoleManagementService} interface.\n+ */\n+public class RoleManagementServiceImpl implements RoleManagementService {\n+\n+    private static final Log log = LogFactory.getLog(RoleManagementServiceImpl.class);\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList,\n+            List<String> permissions, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        RoleBasicInfo role = roleDAO.addRole(roleName, userList, groupList, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleName, e);\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getRoles(filter, limit, offset, sortBy, sortOrder, tenantDomain);\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        Role role = roleDAO.getRole(roleID, tenantDomain);\n+        role.setPermissions(getPermissionListOfRole(roleID, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.updateRoleName(roleID, newRoleName, tenantDomain);\n+    }\n+\n+    @Override\n+    public void deleteRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.deleteRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<UserBasicInfo> getUserListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getUserListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateUserListOfRole(String roleID, List<String> newUserList, List<String> deletedUserList,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addUsersToRole(roleID, newUserList, tenantDomain);\n+        return roleDAO.removeUsersFromRole(roleID, deletedUserList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<GroupBasicInfo> getGroupListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.getGroupListOfRole(roleID, tenantDomain);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateGroupListOfRole(String roleID, List<String> newGroupNamesList,\n+            List<String> deletedGroupNamesList, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        roleDAO.addGroupsToRole(roleID, newGroupNamesList, tenantDomain);\n+        return roleDAO.removeGroupsFromRole(roleID, newGroupNamesList, tenantDomain);\n+    }\n+\n+    @Override\n+    public List<String> getPermissionListOfRole(String roleID, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        String roleName = roleDAO.getRoleNameByID(roleID, tenantDomain);\n+        try {\n+            return getSelectedPermissions(getUserAdminProxy().getRolePermissions(roleName, tenantId));\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when retrieving permissions of role : \" + roleID, e);\n+        }\n+    }\n+\n+    @Override\n+    public RoleBasicInfo setPermissionsForRole(String roleID, List<String> permissions, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        String roleName = roleDAO.getRoleNameByID(roleID, tenantDomain);\n+        try {\n+            getUserAdminProxy().setRoleUIPermission(roleName, permissions.toArray(new String[0]));\n+            return new RoleBasicInfo(roleID, roleName);\n+        } catch (UserAdminException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"An error occurred when setting permissions for the role: \" + roleID, e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isExistingRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        RoleDAO roleDAO = RoleDAOImpl.getInstance();\n+        return roleDAO.isExistingRoleID(roleID, tenantDomain);\n+    }\n+\n+    /**\n+     * Get the UserAdmin service.\n+     *\n+     * @return UserRealmProxy of UserAdmin service.\n+     */\n+    private UserRealmProxy getUserAdminProxy() {\n+\n+        UserRealm realm = (UserRealm) CarbonContext.getThreadLocalCarbonContext().getUserRealm();\n+        return new UserRealmProxy(realm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTUxOA=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDc2MTgyOnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzo1MTowN1rOGqIt9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxNDowMFrOGqJe9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNjIxNQ==", "bodyText": "Shouldn't this be GroupDAOImpl", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446836215", "createdAt": "2020-06-29T07:51:07Z", "author": {"login": "malithie"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_NAME_BY_ID_SQL;\n+\n+/**\n+ * RoleDAO Implementation.\n+ */\n+public class GroupDAOImpl implements GroupDAO {\n+\n+    private static volatile GroupDAOImpl instance;\n+\n+    private GroupDAOImpl() {\n+\n+    }\n+\n+    public static GroupDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0ODc1OQ==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446848759", "createdAt": "2020-06-29T08:14:00Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_NAME_BY_ID_SQL;\n+\n+/**\n+ * RoleDAO Implementation.\n+ */\n+public class GroupDAOImpl implements GroupDAO {\n+\n+    private static volatile GroupDAOImpl instance;\n+\n+    private GroupDAOImpl() {\n+\n+    }\n+\n+    public static GroupDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNjIxNQ=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDc3MDc3OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzo1MzozNVrOGqIzRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODo1ODoyOFrOGqLEqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNzU3NQ==", "bodyText": "Should we have a singleton for DAOs ?\n@mefarazath @emswbandara , @JKAUSHALYA", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446837575", "createdAt": "2020-06-29T07:53:35Z", "author": {"login": "malithie"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_NAME_BY_ID_SQL;\n+\n+/**\n+ * RoleDAO Implementation.\n+ */\n+public class GroupDAOImpl implements GroupDAO {\n+\n+    private static volatile GroupDAOImpl instance;\n+\n+    private GroupDAOImpl() {\n+\n+    }\n+\n+    public static GroupDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new GroupDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1NTAwNQ==", "bodyText": "We can avoid the singleton pattern IMO.\nMove the DAO implementation to a private package and expose DAOs through a Factory class. WDYT?\nHaving a factory allows us to change the DAO implementation without impacting the consuming code.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446855005", "createdAt": "2020-06-29T08:25:06Z", "author": {"login": "mefarazath"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_NAME_BY_ID_SQL;\n+\n+/**\n+ * RoleDAO Implementation.\n+ */\n+public class GroupDAOImpl implements GroupDAO {\n+\n+    private static volatile GroupDAOImpl instance;\n+\n+    private GroupDAOImpl() {\n+\n+    }\n+\n+    public static GroupDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new GroupDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNzU3NQ=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDc5Mw==", "bodyText": "Ok. I'll add a DAO Factory and change the implementation accordingly.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446874793", "createdAt": "2020-06-29T08:58:28Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_NAME_BY_ID_SQL;\n+\n+/**\n+ * RoleDAO Implementation.\n+ */\n+public class GroupDAOImpl implements GroupDAO {\n+\n+    private static volatile GroupDAOImpl instance;\n+\n+    private GroupDAOImpl() {\n+\n+    }\n+\n+    public static GroupDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new GroupDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNzU3NQ=="}, "originalCommit": {"oid": "205bf20515692338080c2946492a9bec4c8114de"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDg1NDEyOnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/IdentityRoleManagementException.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxNjo1N1rOGqJlkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyMTowN1rOGqOR3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MDQ0OA==", "bodyText": "shall we properly format this class?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446850448", "createdAt": "2020-06-29T08:16:57Z", "author": {"login": "dewniMW"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/IdentityRoleManagementException.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+/**\n+ * IdentityRoleManagementException.\n+ */\n+public class IdentityRoleManagementException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c35a360ca7261e59f458516e362425d8607e277"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MzU3NQ==", "bodyText": "Can you please elaborate more on the issue you see in the formatting?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446853575", "createdAt": "2020-06-29T08:22:39Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/IdentityRoleManagementException.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+/**\n+ * IdentityRoleManagementException.\n+ */\n+public class IdentityRoleManagementException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MDQ0OA=="}, "originalCommit": {"oid": "9c35a360ca7261e59f458516e362425d8607e277"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNDY4Nw==", "bodyText": "adding new lines after the method declaration.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446924687", "createdAt": "2020-06-29T12:16:29Z", "author": {"login": "dewniMW"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/IdentityRoleManagementException.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+/**\n+ * IdentityRoleManagementException.\n+ */\n+public class IdentityRoleManagementException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MDQ0OA=="}, "originalCommit": {"oid": "9c35a360ca7261e59f458516e362425d8607e277"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNzMyNg==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446927326", "createdAt": "2020-06-29T12:21:07Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/IdentityRoleManagementException.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+/**\n+ * IdentityRoleManagementException.\n+ */\n+public class IdentityRoleManagementException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MDQ0OA=="}, "originalCommit": {"oid": "9c35a360ca7261e59f458516e362425d8607e277"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDg5MzQ1OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoyNzoxOFrOGqJ80g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMToyOTo0NlrOGqMiPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1NjQwMg==", "bodyText": "change Name to name", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446856402", "createdAt": "2020-06-29T08:27:18Z", "author": {"login": "dewniMW"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_NAME_BY_ID_SQL;\n+\n+/**\n+ * RoleDAO Implementation.\n+ */\n+public class GroupDAOImpl implements GroupDAO {\n+\n+    private static volatile GroupDAOImpl instance;\n+\n+    private GroupDAOImpl() {\n+\n+    }\n+\n+    public static GroupDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (GroupDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new GroupDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    @Override\n+    public String getGroupNameByID(String id, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        String groupName = null;\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, GET_GROUP_NAME_BY_ID_SQL)) {\n+                statement.setInt(RoleConstants.RoleTableColumns.TENANT_ID, tenantId);\n+                statement.setString(RoleConstants.RoleTableColumns.ATTR_NAME, RoleConstants.ID_URI);\n+                statement.setString(RoleConstants.RoleTableColumns.ATTR_VALUE, id);\n+                int count = 0;\n+                try (ResultSet resultSet = statement.executeQuery()) {\n+                    while (resultSet.next()) {\n+                        // Handle multiple matching groups.\n+                        count++;\n+                        if (count > 1) {\n+                            String errorMessage =\n+                                    \"Invalid scenario. Multiple groups found for the given group ID: \" + id + \" and \"\n+                                            + \"tenantDomain: \" + tenantDomain;\n+                            throw new IdentityRoleManagementClientException(INVALID_REQUEST.getCode(), errorMessage);\n+                        }\n+                        groupName = resultSet.getString(1);\n+                    }\n+                }\n+            }\n+        } catch (SQLException e) {\n+            String errorMessage =\n+                    \"Error while resolving the group name for the given group ID: \" + id + \" and tenantDomain: \"\n+                            + tenantDomain;\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(), errorMessage, e);\n+        }\n+        return groupName;\n+    }\n+\n+    public Map<String, String> getGroupNamesByIDs(List<String> ids, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        Map<String, String> groupIdsToNames;\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            groupIdsToNames = batchProcessGroupIDs(ids, tenantDomain, connection);\n+        } catch (SQLException e) {\n+            String errorMessage =\n+                    \"Error while resolving the group Name for the given group Ids in the tenantDomain: \" + tenantDomain;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c35a360ca7261e59f458516e362425d8607e277"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODc1MA==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446898750", "createdAt": "2020-06-29T11:29:46Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/GroupDAOImpl.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_NAME_BY_ID_SQL;\n+\n+/**\n+ * RoleDAO Implementation.\n+ */\n+public class GroupDAOImpl implements GroupDAO {\n+\n+    private static volatile GroupDAOImpl instance;\n+\n+    private GroupDAOImpl() {\n+\n+    }\n+\n+    public static GroupDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (GroupDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new GroupDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    @Override\n+    public String getGroupNameByID(String id, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        String groupName = null;\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, GET_GROUP_NAME_BY_ID_SQL)) {\n+                statement.setInt(RoleConstants.RoleTableColumns.TENANT_ID, tenantId);\n+                statement.setString(RoleConstants.RoleTableColumns.ATTR_NAME, RoleConstants.ID_URI);\n+                statement.setString(RoleConstants.RoleTableColumns.ATTR_VALUE, id);\n+                int count = 0;\n+                try (ResultSet resultSet = statement.executeQuery()) {\n+                    while (resultSet.next()) {\n+                        // Handle multiple matching groups.\n+                        count++;\n+                        if (count > 1) {\n+                            String errorMessage =\n+                                    \"Invalid scenario. Multiple groups found for the given group ID: \" + id + \" and \"\n+                                            + \"tenantDomain: \" + tenantDomain;\n+                            throw new IdentityRoleManagementClientException(INVALID_REQUEST.getCode(), errorMessage);\n+                        }\n+                        groupName = resultSet.getString(1);\n+                    }\n+                }\n+            }\n+        } catch (SQLException e) {\n+            String errorMessage =\n+                    \"Error while resolving the group name for the given group ID: \" + id + \" and tenantDomain: \"\n+                            + tenantDomain;\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(), errorMessage, e);\n+        }\n+        return groupName;\n+    }\n+\n+    public Map<String, String> getGroupNamesByIDs(List<String> ids, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        Map<String, String> groupIdsToNames;\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            groupIdsToNames = batchProcessGroupIDs(ids, tenantDomain, connection);\n+        } catch (SQLException e) {\n+            String errorMessage =\n+                    \"Error while resolving the group Name for the given group Ids in the tenantDomain: \" + tenantDomain;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1NjQwMg=="}, "originalCommit": {"oid": "9c35a360ca7261e59f458516e362425d8607e277"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDkxMTA0OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODozMTo0M1rOGqKHVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMToyOTo0M1rOGqMiGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTA5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Retrieve available roles.\n          \n          \n            \n                 * Retrieve available roles matching the provided filter.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446859093", "createdAt": "2020-06-29T08:31:43Z", "author": {"login": "dewniMW"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.identity.role.mgt.core.GroupBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.UserBasicInfo;\n+\n+import java.util.List;\n+\n+/**\n+ * RoleDAO interface.\n+ */\n+public interface RoleDAO {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users.\n+     * @param groupList    List of groups.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of role names.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c35a360ca7261e59f458516e362425d8607e277"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODcxNA==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446898714", "createdAt": "2020-06-29T11:29:43Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.identity.role.mgt.core.GroupBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.UserBasicInfo;\n+\n+import java.util.List;\n+\n+/**\n+ * RoleDAO interface.\n+ */\n+public interface RoleDAO {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users.\n+     * @param groupList    List of groups.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.\n+     *\n+     * @param limit        Limit value.\n+     * @param offset       Offset value.\n+     * @param sortBy       SortBy value.\n+     * @param sortOrder    Sort order value.\n+     * @param tenantDomain Tenant domain.\n+     * @return List of role names.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.\n+     */\n+    List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException;\n+\n+    /**\n+     * Retrieve available roles.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTA5Mw=="}, "originalCommit": {"oid": "9c35a360ca7261e59f458516e362425d8607e277"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDkxNTEzOnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODozMjo0N1rOGqKJtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMToyOTozOFrOGqMh3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTcwMQ==", "bodyText": "missing @return param. check on applicable places.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446859701", "createdAt": "2020-06-29T08:32:47Z", "author": {"login": "dewniMW"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.identity.role.mgt.core.GroupBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.UserBasicInfo;\n+\n+import java.util.List;\n+\n+/**\n+ * RoleDAO interface.\n+ */\n+public interface RoleDAO {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users.\n+     * @param groupList    List of groups.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c35a360ca7261e59f458516e362425d8607e277"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODY1Mw==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446898653", "createdAt": "2020-06-29T11:29:38Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAO.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.wso2.carbon.identity.role.mgt.core.GroupBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.UserBasicInfo;\n+\n+import java.util.List;\n+\n+/**\n+ * RoleDAO interface.\n+ */\n+public interface RoleDAO {\n+\n+    /**\n+     * Add a new role.\n+     *\n+     * @param roleName     Role name.\n+     * @param userList     List of users.\n+     * @param groupList    List of groups.\n+     * @param tenantDomain Tenant domain.\n+     * @throws IdentityRoleManagementException IdentityRoleManagementException.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTcwMQ=="}, "originalCommit": {"oid": "9c35a360ca7261e59f458516e362425d8607e277"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDk0MjUyOnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODozOTo1OVrOGqKZ0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMToyOTozM1rOGqMhnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2MzgyNQ==", "bodyText": "shall we define a constant for \"*\" as it has been used in multiple places?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446863825", "createdAt": "2020-06-29T08:39:59Z", "author": {"login": "dewniMW"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -0,0 +1,1099 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.CarbonConstants;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.role.mgt.core.GroupBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants.RoleTableColumns;\n+import org.wso2.carbon.identity.role.mgt.core.UserBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.util.GroupIDResolver;\n+import org.wso2.carbon.identity.role.mgt.core.util.UserIDResolver;\n+import org.wso2.carbon.user.api.RealmConfiguration;\n+import org.wso2.carbon.user.api.UserRealm;\n+import org.wso2.carbon.user.api.UserStoreException;\n+import org.wso2.carbon.user.core.UserCoreConstants;\n+import org.wso2.carbon.user.core.UserStoreConfigConstants;\n+import org.wso2.carbon.user.core.common.AbstractUserStoreManager;\n+import org.wso2.carbon.user.core.util.UserCoreUtil;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_LIMIT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_OFFSET;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.OPERATION_FORBIDDEN;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_ALREADY_EXISTS;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_NOT_FOUND;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.SORTING_NOT_IMPLEMENTED;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.H2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MICROSOFT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MY_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.POSTGRE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_SCIM_ROLE_ID_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_GROUP_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_SCIM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_USER_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLE_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLE_NAME_BY_ID_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_USER_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_ID_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_GROUP_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_USER_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_GROUP_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_USER_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_ROLE_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_SCIM_ROLE_NAME_SQL;\n+\n+/**\n+ * Implementation of the {@link RoleDAO} interface.\n+ */\n+public class RoleDAOImpl implements RoleDAO {\n+\n+    private Log log = LogFactory.getLog(RoleDAOImpl.class);\n+    private static volatile RoleDAOImpl instance;\n+    private GroupIDResolver groupIDResolver = new GroupIDResolver();\n+    private UserIDResolver userIDResolver = new UserIDResolver();\n+\n+    private RoleDAOImpl() {\n+\n+    }\n+\n+    public static RoleDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new RoleDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Creating the role: \" + roleName + \" in the tenantDomain: \" + tenantDomain);\n+        }\n+\n+        if (!isExistingRoleName(roleName, tenantDomain)) {\n+            try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+                try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_ROLE_SQL)) {\n+                    statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                    statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                    statement.executeUpdate();\n+                }\n+            } catch (SQLException e) {\n+                String errorMessage = \"Error while creating the role: %s in the tenantDomain: %s\";\n+                throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                        String.format(errorMessage, roleName, tenantDomain), e);\n+            }\n+        } else {\n+            throw new IdentityRoleManagementClientException(ROLE_ALREADY_EXISTS.getCode(),\n+                    \"Role already exist for the role name: \" + roleName);\n+        }\n+\n+        String roleID = addRoleID(roleName, tenantDomain);\n+        // Assign users to the role.\n+        addUsersToRole(roleID, userList, tenantDomain);\n+        // Assign groups to the role.\n+        addGroupsToRole(roleID, groupList, tenantDomain);\n+\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    protected String addRoleID(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        String id = UUID.randomUUID().toString();\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Adding the roleID: \" + id + \" for the role: \" + roleName + \" in the tenantDomain: \"\n+                    + tenantDomain);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_SCIM_ROLE_ID_SQL)) {\n+                statement.setInt(RoleTableColumns.TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.ROLE_NAME, roleName);\n+                statement.setString(RoleTableColumns.ATTR_NAME, RoleConstants.ID_URI);\n+                statement.setString(RoleTableColumns.ATTR_VALUE, id);\n+                statement.executeUpdate();\n+            }\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while adding the the roleID: %s for the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, id, roleName, tenantDomain), e);\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        Role role = new Role();\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        role.setId(roleID);\n+        role.setName(roleName);\n+        role.setTenantDomain(tenantDomain);\n+        role.setUsers(getUserListOfRole(roleName, tenantDomain));\n+        role.setGroups(getGroupListOfRole(roleName, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        limit = validateLimit(limit);\n+        offset = validateOffset(offset);\n+        validateAttributesForSorting(sortBy, sortOrder);\n+        List<RoleBasicInfo> roles;\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQuery(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                roles = processListRolesQuery(limit, offset, statement, tenantDomain);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (StringUtils.isBlank(filter) || \"*\".equals(filter)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c35a360ca7261e59f458516e362425d8607e277"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODU4OQ==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446898589", "createdAt": "2020-06-29T11:29:33Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -0,0 +1,1099 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.CarbonConstants;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.role.mgt.core.GroupBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants.RoleTableColumns;\n+import org.wso2.carbon.identity.role.mgt.core.UserBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.util.GroupIDResolver;\n+import org.wso2.carbon.identity.role.mgt.core.util.UserIDResolver;\n+import org.wso2.carbon.user.api.RealmConfiguration;\n+import org.wso2.carbon.user.api.UserRealm;\n+import org.wso2.carbon.user.api.UserStoreException;\n+import org.wso2.carbon.user.core.UserCoreConstants;\n+import org.wso2.carbon.user.core.UserStoreConfigConstants;\n+import org.wso2.carbon.user.core.common.AbstractUserStoreManager;\n+import org.wso2.carbon.user.core.util.UserCoreUtil;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_LIMIT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_OFFSET;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.OPERATION_FORBIDDEN;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_ALREADY_EXISTS;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_NOT_FOUND;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.SORTING_NOT_IMPLEMENTED;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.H2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MICROSOFT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MY_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.POSTGRE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_SCIM_ROLE_ID_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_GROUP_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_SCIM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_USER_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLE_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLE_NAME_BY_ID_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_USER_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_ID_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_GROUP_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_USER_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_GROUP_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_USER_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_ROLE_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_SCIM_ROLE_NAME_SQL;\n+\n+/**\n+ * Implementation of the {@link RoleDAO} interface.\n+ */\n+public class RoleDAOImpl implements RoleDAO {\n+\n+    private Log log = LogFactory.getLog(RoleDAOImpl.class);\n+    private static volatile RoleDAOImpl instance;\n+    private GroupIDResolver groupIDResolver = new GroupIDResolver();\n+    private UserIDResolver userIDResolver = new UserIDResolver();\n+\n+    private RoleDAOImpl() {\n+\n+    }\n+\n+    public static RoleDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new RoleDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Creating the role: \" + roleName + \" in the tenantDomain: \" + tenantDomain);\n+        }\n+\n+        if (!isExistingRoleName(roleName, tenantDomain)) {\n+            try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+                try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_ROLE_SQL)) {\n+                    statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                    statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                    statement.executeUpdate();\n+                }\n+            } catch (SQLException e) {\n+                String errorMessage = \"Error while creating the role: %s in the tenantDomain: %s\";\n+                throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                        String.format(errorMessage, roleName, tenantDomain), e);\n+            }\n+        } else {\n+            throw new IdentityRoleManagementClientException(ROLE_ALREADY_EXISTS.getCode(),\n+                    \"Role already exist for the role name: \" + roleName);\n+        }\n+\n+        String roleID = addRoleID(roleName, tenantDomain);\n+        // Assign users to the role.\n+        addUsersToRole(roleID, userList, tenantDomain);\n+        // Assign groups to the role.\n+        addGroupsToRole(roleID, groupList, tenantDomain);\n+\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    protected String addRoleID(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        String id = UUID.randomUUID().toString();\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Adding the roleID: \" + id + \" for the role: \" + roleName + \" in the tenantDomain: \"\n+                    + tenantDomain);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_SCIM_ROLE_ID_SQL)) {\n+                statement.setInt(RoleTableColumns.TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.ROLE_NAME, roleName);\n+                statement.setString(RoleTableColumns.ATTR_NAME, RoleConstants.ID_URI);\n+                statement.setString(RoleTableColumns.ATTR_VALUE, id);\n+                statement.executeUpdate();\n+            }\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while adding the the roleID: %s for the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, id, roleName, tenantDomain), e);\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        Role role = new Role();\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        role.setId(roleID);\n+        role.setName(roleName);\n+        role.setTenantDomain(tenantDomain);\n+        role.setUsers(getUserListOfRole(roleName, tenantDomain));\n+        role.setGroups(getGroupListOfRole(roleName, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        limit = validateLimit(limit);\n+        offset = validateOffset(offset);\n+        validateAttributesForSorting(sortBy, sortOrder);\n+        List<RoleBasicInfo> roles;\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQuery(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                roles = processListRolesQuery(limit, offset, statement, tenantDomain);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (StringUtils.isBlank(filter) || \"*\".equals(filter)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2MzgyNQ=="}, "originalCommit": {"oid": "9c35a360ca7261e59f458516e362425d8607e277"}, "originalPosition": 237}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTAzMzA5OnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwOTowMjo1OFrOGqLQMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMToyOToyN1rOGqMhaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3Nzc0Ng==", "bodyText": "shall we include the tenantDomain here?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446877746", "createdAt": "2020-06-29T09:02:58Z", "author": {"login": "dewniMW"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -0,0 +1,1099 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.CarbonConstants;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.role.mgt.core.GroupBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants.RoleTableColumns;\n+import org.wso2.carbon.identity.role.mgt.core.UserBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.util.GroupIDResolver;\n+import org.wso2.carbon.identity.role.mgt.core.util.UserIDResolver;\n+import org.wso2.carbon.user.api.RealmConfiguration;\n+import org.wso2.carbon.user.api.UserRealm;\n+import org.wso2.carbon.user.api.UserStoreException;\n+import org.wso2.carbon.user.core.UserCoreConstants;\n+import org.wso2.carbon.user.core.UserStoreConfigConstants;\n+import org.wso2.carbon.user.core.common.AbstractUserStoreManager;\n+import org.wso2.carbon.user.core.util.UserCoreUtil;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_LIMIT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_OFFSET;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.OPERATION_FORBIDDEN;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_ALREADY_EXISTS;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_NOT_FOUND;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.SORTING_NOT_IMPLEMENTED;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.H2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MICROSOFT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MY_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.POSTGRE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_SCIM_ROLE_ID_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_GROUP_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_SCIM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_USER_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLE_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLE_NAME_BY_ID_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_USER_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_ID_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_GROUP_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_USER_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_GROUP_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_USER_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_ROLE_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_SCIM_ROLE_NAME_SQL;\n+\n+/**\n+ * Implementation of the {@link RoleDAO} interface.\n+ */\n+public class RoleDAOImpl implements RoleDAO {\n+\n+    private Log log = LogFactory.getLog(RoleDAOImpl.class);\n+    private static volatile RoleDAOImpl instance;\n+    private GroupIDResolver groupIDResolver = new GroupIDResolver();\n+    private UserIDResolver userIDResolver = new UserIDResolver();\n+\n+    private RoleDAOImpl() {\n+\n+    }\n+\n+    public static RoleDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new RoleDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Creating the role: \" + roleName + \" in the tenantDomain: \" + tenantDomain);\n+        }\n+\n+        if (!isExistingRoleName(roleName, tenantDomain)) {\n+            try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+                try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_ROLE_SQL)) {\n+                    statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                    statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                    statement.executeUpdate();\n+                }\n+            } catch (SQLException e) {\n+                String errorMessage = \"Error while creating the role: %s in the tenantDomain: %s\";\n+                throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                        String.format(errorMessage, roleName, tenantDomain), e);\n+            }\n+        } else {\n+            throw new IdentityRoleManagementClientException(ROLE_ALREADY_EXISTS.getCode(),\n+                    \"Role already exist for the role name: \" + roleName);\n+        }\n+\n+        String roleID = addRoleID(roleName, tenantDomain);\n+        // Assign users to the role.\n+        addUsersToRole(roleID, userList, tenantDomain);\n+        // Assign groups to the role.\n+        addGroupsToRole(roleID, groupList, tenantDomain);\n+\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    protected String addRoleID(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        String id = UUID.randomUUID().toString();\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Adding the roleID: \" + id + \" for the role: \" + roleName + \" in the tenantDomain: \"\n+                    + tenantDomain);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_SCIM_ROLE_ID_SQL)) {\n+                statement.setInt(RoleTableColumns.TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.ROLE_NAME, roleName);\n+                statement.setString(RoleTableColumns.ATTR_NAME, RoleConstants.ID_URI);\n+                statement.setString(RoleTableColumns.ATTR_VALUE, id);\n+                statement.executeUpdate();\n+            }\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while adding the the roleID: %s for the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, id, roleName, tenantDomain), e);\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        Role role = new Role();\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        role.setId(roleID);\n+        role.setName(roleName);\n+        role.setTenantDomain(tenantDomain);\n+        role.setUsers(getUserListOfRole(roleName, tenantDomain));\n+        role.setGroups(getGroupListOfRole(roleName, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        limit = validateLimit(limit);\n+        offset = validateOffset(offset);\n+        validateAttributesForSorting(sortBy, sortOrder);\n+        List<RoleBasicInfo> roles;\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQuery(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                roles = processListRolesQuery(limit, offset, statement, tenantDomain);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (StringUtils.isBlank(filter) || \"*\".equals(filter)) {\n+            return getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+        }\n+        String filterResolvedForSQL = resolveSQLFilter(filter);\n+        limit = validateLimit(limit);\n+        offset = validateOffset(offset);\n+        validateAttributesForSorting(sortBy, sortOrder);\n+        List<RoleBasicInfo> roles;\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQueryByRoleName(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.UM_ROLE_NAME, filterResolvedForSQL);\n+                roles = processListRolesQuery(limit, offset, statement, tenantDomain);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    private List<RoleBasicInfo> processListRolesQuery(int limit, int offset, NamedPreparedStatement statement,\n+            String tenantDomain) throws SQLException, IdentityRoleManagementException {\n+\n+        statement.setInt(RoleConstants.OFFSET, offset);\n+        statement.setInt(RoleConstants.LIMIT, limit);\n+        statement.setInt(RoleConstants.ZERO_BASED_START_INDEX, offset);\n+        statement.setInt(RoleConstants.ONE_BASED_START_INDEX, offset + 1);\n+        statement.setInt(RoleConstants.END_INDEX, offset + limit);\n+        return buildRolesList(statement, tenantDomain);\n+    }\n+\n+    private List<RoleBasicInfo> buildRolesList(NamedPreparedStatement statement, String tenantDomain)\n+            throws SQLException, IdentityRoleManagementException {\n+\n+        List<RoleBasicInfo> roles = new ArrayList<>();\n+        try (ResultSet resultSet = statement.executeQuery()) {\n+            while (resultSet.next()) {\n+                String name = resultSet.getString(1);\n+                // Append the internal domain.\n+                if (!name.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n+                    name = UserCoreConstants.INTERNAL_DOMAIN + CarbonConstants.DOMAIN_SEPARATOR + name;\n+                }\n+\n+                roles.add(new RoleBasicInfo(getRoleIDByName(name, tenantDomain), name));\n+            }\n+        }\n+        return roles;\n+    }\n+\n+    private String resolveSQLFilter(String filter) {\n+\n+        // To avoid any issues when the filter string is blank or null, assigning \"%\" to SQLFilter.\n+        String sqlfilter = \"%\";\n+        if (StringUtils.isNotBlank(filter)) {\n+            sqlfilter = filter.trim().replace(\"*\", \"%\").replace(\"?\", \"_\");\n+        }\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Input filter: \" + filter + \" resolved for SQL filter: \" + sqlfilter);\n+        }\n+        return sqlfilter;\n+    }\n+\n+    private String getDBTypeSpecificRolesRetrievalQueryByRoleName(String databaseProductName)\n+            throws IdentityRoleManagementException {\n+\n+        if (MY_SQL.equals(databaseProductName) || H2.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+        } else if (ORACLE.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+        } else if (MICROSOFT.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+        } else if (POSTGRE_SQL.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+        } else if (databaseProductName != null && databaseProductName.contains(DB2)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+        } else if (INFORMIX.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+        }\n+\n+        throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                \"Error while listing roles from DB. Database driver for \" + databaseProductName\n+                        + \"could not be identified or not supported.\");\n+    }\n+\n+    private String getDBTypeSpecificRolesRetrievalQuery(String databaseProductName)\n+            throws IdentityRoleManagementException {\n+\n+        if (MY_SQL.equals(databaseProductName) || H2.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_MYSQL;\n+        } else if (ORACLE.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_ORACLE;\n+        } else if (MICROSOFT.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_MSSQL;\n+        } else if (POSTGRE_SQL.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_POSTGRESQL;\n+        } else if (databaseProductName != null && databaseProductName.contains(DB2)) {\n+            return GET_ROLES_BY_TENANT_DB2;\n+        } else if (INFORMIX.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_INFORMIX;\n+        }\n+\n+        throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                \"Error while listing roles from DB. Database driver for \" + databaseProductName\n+                        + \"could not be identified or not supported.\");\n+    }\n+\n+    /**\n+     * Validate offset.\n+     *\n+     * @param offset given offset value.\n+     * @return validated offset value.\n+     * @throws IdentityRoleManagementClientException IdentityRoleManagementClientException.\n+     */\n+    private int validateOffset(Integer offset) throws IdentityRoleManagementClientException {\n+\n+        if (offset == null) {\n+            // Return first page offset.\n+            offset = 0;\n+        }\n+\n+        if (offset < 0) {\n+            String errorMessage =\n+                    \"Invalid offset requested. Offset value should be zero or greater than zero. offSet: \" + offset;\n+            throw new IdentityRoleManagementClientException(INVALID_OFFSET.getCode(), errorMessage);\n+        }\n+        return offset;\n+    }\n+\n+    /**\n+     * Validate limit.\n+     *\n+     * @param limit given limit value.\n+     * @return validated limit value.\n+     * @throws IdentityRoleManagementClientException IdentityRoleManagementClientException.\n+     */\n+    private int validateLimit(Integer limit) throws IdentityRoleManagementClientException {\n+\n+        int maximumItemsPerPage = IdentityUtil.getMaximumItemPerPage();\n+        if (limit == null) {\n+            limit = IdentityUtil.getDefaultItemsPerPage();\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Given limit is null. Therefore assigning the default limit: \" + limit);\n+            }\n+        } else if (limit < 0) {\n+            String errorMessage =\n+                    \"Invalid limit requested. Limit value should be greater than or equal to zero. limit: \" + limit;\n+            throw new IdentityRoleManagementClientException(INVALID_LIMIT.getCode(), errorMessage);\n+        } else if (limit > maximumItemsPerPage) {\n+            limit = maximumItemsPerPage;\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Given limit exceed the maximum limit. Therefore assigning the maximum limit: \"\n+                        + maximumItemsPerPage);\n+            }\n+        }\n+        return limit;\n+    }\n+\n+    /**\n+     * Validates the offset and limit values for pagination.\n+     *\n+     * @param sortBy    Sort By value.\n+     * @param sortOrder Sort order value.\n+     * @throws IdentityRoleManagementClientException IdentityRoleManagementClientException.\n+     */\n+    private void validateAttributesForSorting(String sortBy, String sortOrder)\n+            throws IdentityRoleManagementClientException {\n+\n+        if (StringUtils.isNotBlank(sortBy) || StringUtils.isNotBlank(sortOrder)) {\n+            throw new IdentityRoleManagementClientException(SORTING_NOT_IMPLEMENTED.getCode(),\n+                    \"Sorting not supported.\");\n+        }\n+    }\n+\n+    public RoleBasicInfo addUsersToRole(String roleID, List<String> userIDsList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        if (!isExistingRoleID(roleID, tenantDomain)) {\n+            throw new IdentityRoleManagementClientException(ROLE_NOT_FOUND.getCode(),\n+                    \"Role id: \" + roleID + \" does not exist in the system.\");\n+        }\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        if (CollectionUtils.isEmpty(userIDsList)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"User list is empty.\");\n+            }\n+            return new RoleBasicInfo(roleID, roleName);\n+        }\n+        List<String> userNamesList = getUserNamesByIDs(userIDsList, tenantDomain);\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+\n+        // This method is always invoked by the primary user store manager.\n+        String primaryDomainName = IdentityUtil.getPrimaryDomainName();\n+        if (primaryDomainName != null) {\n+            primaryDomainName = primaryDomainName.toUpperCase(Locale.ENGLISH);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String sql = ADD_USER_TO_ROLE_SQL;\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            if (MICROSOFT.equals(databaseProductName)) {\n+                sql = ADD_USER_TO_ROLE_SQL_MSSQL;\n+            }\n+            processBatchUpdateForUsers(roleName, userNamesList, tenantId, primaryDomainName, connection, sql);\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while assigning users to the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, roleName, tenantDomain), e);\n+        }\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    public RoleBasicInfo removeUsersFromRole(String roleID, List<String> userIDsList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        List<String> userNamesList = getUserNamesByIDs(userIDsList, tenantDomain);\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (CollectionUtils.isEmpty(userIDsList)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"User list is empty.\");\n+            }\n+            return new RoleBasicInfo(roleID, roleName);\n+        }\n+        // This method is always invoked by the primary user store manager.\n+        String primaryDomainName = IdentityUtil.getPrimaryDomainName();\n+        if (primaryDomainName != null) {\n+            primaryDomainName = primaryDomainName.toUpperCase(Locale.ENGLISH);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            processBatchUpdateForUsers(roleName, userNamesList, tenantId, primaryDomainName, connection,\n+                    REMOVE_USER_FROM_ROLE_SQL);\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while removing users from the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, roleName, tenantDomain), e);\n+        }\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    private void processBatchUpdateForUsers(String roleName, List<String> userNamesList, int tenantId,\n+            String primaryDomainName, Connection connection, String removeUserFromRoleSql) throws SQLException {\n+\n+        try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, removeUserFromRoleSql)) {\n+            for (String userName : userNamesList) {\n+                // Add domain if not set.\n+                userName = UserCoreUtil.addDomainToName(userName, primaryDomainName);\n+                // Get domain from name.\n+                String domainName = UserCoreUtil.extractDomainFromName(userName);\n+                if (domainName != null) {\n+                    domainName = domainName.toUpperCase(Locale.ENGLISH);\n+                }\n+                String nameWithoutDomain = UserCoreUtil.removeDomainFromName(userName);\n+                statement.setString(RoleTableColumns.UM_USER_NAME, nameWithoutDomain);\n+                statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.UM_DOMAIN_NAME, domainName);\n+                statement.addBatch();\n+            }\n+            statement.executeBatch();\n+        }\n+    }\n+\n+    @Override\n+    public RoleBasicInfo addGroupsToRole(String roleID, List<String> groupIDsList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        if (!isExistingRoleID(roleID, tenantDomain)) {\n+            throw new IdentityRoleManagementClientException(ROLE_NOT_FOUND.getCode(),\n+                    \"Role id: \" + roleID + \" does not exist in the system.\");\n+        }\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        if (CollectionUtils.isEmpty(groupIDsList)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Group list is empty.\");\n+            }\n+            return new RoleBasicInfo(roleID, roleName);\n+        }\n+        Map<String, String> groupIdsToNames = getGroupNamesByIDs(groupIDsList, tenantDomain);\n+        List<String> groupNamesList = new ArrayList<>(groupIdsToNames.values());\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+\n+        // This method is always invoked by the primary user store manager.\n+        String primaryDomainName = IdentityUtil.getPrimaryDomainName();\n+        if (primaryDomainName != null) {\n+            primaryDomainName = primaryDomainName.toUpperCase(Locale.ENGLISH);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String sql = ADD_GROUP_TO_ROLE_SQL;\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            if (MICROSOFT.equals(databaseProductName)) {\n+                sql = ADD_GROUP_TO_ROLE_SQL_MSSQL;\n+            }\n+            processBatchUpdateForGroups(roleName, groupNamesList, tenantId, primaryDomainName, connection, sql);\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while assigning groups to the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, roleName, tenantDomain), e);\n+        }\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo removeGroupsFromRole(String roleID, List<String> groupIDsList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        Map<String, String> groupIdsToNames = getGroupNamesByIDs(groupIDsList, tenantDomain);\n+        List<String> groupNamesList = new ArrayList<>(groupIdsToNames.values());\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (CollectionUtils.isEmpty(groupIDsList)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Group list is empty.\");\n+            }\n+            return new RoleBasicInfo(roleID, roleName);\n+        }\n+\n+        // This method is always invoked by the primary user store manager.\n+        String primaryDomainName = IdentityUtil.getPrimaryDomainName();\n+        if (primaryDomainName != null) {\n+            primaryDomainName = primaryDomainName.toUpperCase(Locale.ENGLISH);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            processBatchUpdateForGroups(roleName, groupNamesList, tenantId, primaryDomainName, connection,\n+                    REMOVE_GROUP_FROM_ROLE_SQL);\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while removing groups from the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, roleName, tenantDomain), e);\n+        }\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    private void processBatchUpdateForGroups(String roleName, List<String> groupNamesList, int tenantId,\n+            String primaryDomainName, Connection connection, String removeGroupFromRoleSql) throws SQLException {\n+\n+        try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, removeGroupFromRoleSql)) {\n+            for (String groupName : groupNamesList) {\n+                // Add domain if not set.\n+                groupName = UserCoreUtil.addDomainToName(groupName, primaryDomainName);\n+                // Get domain from name.\n+                String domainName = UserCoreUtil.extractDomainFromName(groupName);\n+                if (domainName != null) {\n+                    domainName = domainName.toUpperCase(Locale.ENGLISH);\n+                }\n+                String nameWithoutDomain = UserCoreUtil.removeDomainFromName(groupName);\n+                statement.setString(RoleTableColumns.UM_GROUP_NAME, nameWithoutDomain);\n+                statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.UM_DOMAIN_NAME, domainName);\n+                statement.addBatch();\n+            }\n+            statement.executeBatch();\n+        }\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (!isExistingRoleID(roleID, tenantDomain)) {\n+            throw new IdentityRoleManagementClientException(ROLE_NOT_FOUND.getCode(),\n+                    \"Role id: \" + roleID + \" does not exist in the system.\");\n+        }\n+        if (isExistingRoleName(newRoleName, tenantDomain)) {\n+            throw new IdentityRoleManagementClientException(ROLE_ALREADY_EXISTS.getCode(),\n+                    \"Role name: \" + newRoleName + \" is already there in the system. Please pick another role name.\");\n+        }\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Updating the roleName: \" + roleName + \" to :\" + newRoleName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c35a360ca7261e59f458516e362425d8607e277"}, "originalPosition": 614}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODUzNg==", "bodyText": "Fixed and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446898536", "createdAt": "2020-06-29T11:29:27Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/dao/RoleDAOImpl.java", "diffHunk": "@@ -0,0 +1,1099 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core.dao;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.CarbonConstants;\n+import org.wso2.carbon.context.CarbonContext;\n+import org.wso2.carbon.database.utils.jdbc.NamedPreparedStatement;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.role.mgt.core.GroupBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementClientException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementException;\n+import org.wso2.carbon.identity.role.mgt.core.IdentityRoleManagementServerException;\n+import org.wso2.carbon.identity.role.mgt.core.Role;\n+import org.wso2.carbon.identity.role.mgt.core.RoleBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants;\n+import org.wso2.carbon.identity.role.mgt.core.RoleConstants.RoleTableColumns;\n+import org.wso2.carbon.identity.role.mgt.core.UserBasicInfo;\n+import org.wso2.carbon.identity.role.mgt.core.util.GroupIDResolver;\n+import org.wso2.carbon.identity.role.mgt.core.util.UserIDResolver;\n+import org.wso2.carbon.user.api.RealmConfiguration;\n+import org.wso2.carbon.user.api.UserRealm;\n+import org.wso2.carbon.user.api.UserStoreException;\n+import org.wso2.carbon.user.core.UserCoreConstants;\n+import org.wso2.carbon.user.core.UserStoreConfigConstants;\n+import org.wso2.carbon.user.core.common.AbstractUserStoreManager;\n+import org.wso2.carbon.user.core.util.UserCoreUtil;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_LIMIT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_OFFSET;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.INVALID_REQUEST;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.OPERATION_FORBIDDEN;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_ALREADY_EXISTS;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.ROLE_NOT_FOUND;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.SORTING_NOT_IMPLEMENTED;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.Error.UNEXPECTED_SERVER_ERROR;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.H2;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MICROSOFT;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.MY_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.RoleConstants.POSTGRE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_GROUP_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_SCIM_ROLE_ID_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ADD_USER_TO_ROLE_SQL_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_GROUP_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_SCIM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.DELETE_USER_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_GROUP_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_DB2;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_INFORMIX;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MSSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_MYSQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_ORACLE;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLES_BY_TENANT_POSTGRESQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLE_ID_BY_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_ROLE_NAME_BY_ID_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.GET_USER_LIST_OF_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.IS_ROLE_ID_EXIST_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_GROUP_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.ON_DELETE_ROLE_REMOVE_USER_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_GROUP_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.REMOVE_USER_FROM_ROLE_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_ROLE_NAME_SQL;\n+import static org.wso2.carbon.identity.role.mgt.core.dao.SQLQueries.UPDATE_SCIM_ROLE_NAME_SQL;\n+\n+/**\n+ * Implementation of the {@link RoleDAO} interface.\n+ */\n+public class RoleDAOImpl implements RoleDAO {\n+\n+    private Log log = LogFactory.getLog(RoleDAOImpl.class);\n+    private static volatile RoleDAOImpl instance;\n+    private GroupIDResolver groupIDResolver = new GroupIDResolver();\n+    private UserIDResolver userIDResolver = new UserIDResolver();\n+\n+    private RoleDAOImpl() {\n+\n+    }\n+\n+    public static RoleDAOImpl getInstance() {\n+\n+        if (instance == null) {\n+            synchronized (RoleDAOImpl.class) {\n+                if (instance == null) {\n+                    instance = new RoleDAOImpl();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    @Override\n+    public RoleBasicInfo addRole(String roleName, List<String> userList, List<String> groupList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Creating the role: \" + roleName + \" in the tenantDomain: \" + tenantDomain);\n+        }\n+\n+        if (!isExistingRoleName(roleName, tenantDomain)) {\n+            try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+                try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_ROLE_SQL)) {\n+                    statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                    statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                    statement.executeUpdate();\n+                }\n+            } catch (SQLException e) {\n+                String errorMessage = \"Error while creating the role: %s in the tenantDomain: %s\";\n+                throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                        String.format(errorMessage, roleName, tenantDomain), e);\n+            }\n+        } else {\n+            throw new IdentityRoleManagementClientException(ROLE_ALREADY_EXISTS.getCode(),\n+                    \"Role already exist for the role name: \" + roleName);\n+        }\n+\n+        String roleID = addRoleID(roleName, tenantDomain);\n+        // Assign users to the role.\n+        addUsersToRole(roleID, userList, tenantDomain);\n+        // Assign groups to the role.\n+        addGroupsToRole(roleID, groupList, tenantDomain);\n+\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    protected String addRoleID(String roleName, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        String id = UUID.randomUUID().toString();\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Adding the roleID: \" + id + \" for the role: \" + roleName + \" in the tenantDomain: \"\n+                    + tenantDomain);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, ADD_SCIM_ROLE_ID_SQL)) {\n+                statement.setInt(RoleTableColumns.TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.ROLE_NAME, roleName);\n+                statement.setString(RoleTableColumns.ATTR_NAME, RoleConstants.ID_URI);\n+                statement.setString(RoleTableColumns.ATTR_VALUE, id);\n+                statement.executeUpdate();\n+            }\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while adding the the roleID: %s for the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, id, roleName, tenantDomain), e);\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public Role getRole(String roleID, String tenantDomain) throws IdentityRoleManagementException {\n+\n+        Role role = new Role();\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        role.setId(roleID);\n+        role.setName(roleName);\n+        role.setTenantDomain(tenantDomain);\n+        role.setUsers(getUserListOfRole(roleName, tenantDomain));\n+        role.setGroups(getGroupListOfRole(roleName, tenantDomain));\n+        return role;\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(int limit, int offset, String sortBy, String sortOrder, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        limit = validateLimit(limit);\n+        offset = validateOffset(offset);\n+        validateAttributesForSorting(sortBy, sortOrder);\n+        List<RoleBasicInfo> roles;\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQuery(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                roles = processListRolesQuery(limit, offset, statement, tenantDomain);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    @Override\n+    public List<RoleBasicInfo> getRoles(String filter, int limit, int offset, String sortBy, String sortOrder,\n+            String tenantDomain) throws IdentityRoleManagementException {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (StringUtils.isBlank(filter) || \"*\".equals(filter)) {\n+            return getRoles(limit, offset, sortBy, sortOrder, tenantDomain);\n+        }\n+        String filterResolvedForSQL = resolveSQLFilter(filter);\n+        limit = validateLimit(limit);\n+        offset = validateOffset(offset);\n+        validateAttributesForSorting(sortBy, sortOrder);\n+        List<RoleBasicInfo> roles;\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            try (NamedPreparedStatement statement = new NamedPreparedStatement(connection,\n+                    getDBTypeSpecificRolesRetrievalQueryByRoleName(databaseProductName))) {\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.UM_ROLE_NAME, filterResolvedForSQL);\n+                roles = processListRolesQuery(limit, offset, statement, tenantDomain);\n+            }\n+        } catch (SQLException e) {\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    \"Error while listing roles in tenantDomain: \" + tenantDomain, e);\n+        }\n+        return Collections.unmodifiableList(roles);\n+    }\n+\n+    private List<RoleBasicInfo> processListRolesQuery(int limit, int offset, NamedPreparedStatement statement,\n+            String tenantDomain) throws SQLException, IdentityRoleManagementException {\n+\n+        statement.setInt(RoleConstants.OFFSET, offset);\n+        statement.setInt(RoleConstants.LIMIT, limit);\n+        statement.setInt(RoleConstants.ZERO_BASED_START_INDEX, offset);\n+        statement.setInt(RoleConstants.ONE_BASED_START_INDEX, offset + 1);\n+        statement.setInt(RoleConstants.END_INDEX, offset + limit);\n+        return buildRolesList(statement, tenantDomain);\n+    }\n+\n+    private List<RoleBasicInfo> buildRolesList(NamedPreparedStatement statement, String tenantDomain)\n+            throws SQLException, IdentityRoleManagementException {\n+\n+        List<RoleBasicInfo> roles = new ArrayList<>();\n+        try (ResultSet resultSet = statement.executeQuery()) {\n+            while (resultSet.next()) {\n+                String name = resultSet.getString(1);\n+                // Append the internal domain.\n+                if (!name.contains(UserCoreConstants.DOMAIN_SEPARATOR)) {\n+                    name = UserCoreConstants.INTERNAL_DOMAIN + CarbonConstants.DOMAIN_SEPARATOR + name;\n+                }\n+\n+                roles.add(new RoleBasicInfo(getRoleIDByName(name, tenantDomain), name));\n+            }\n+        }\n+        return roles;\n+    }\n+\n+    private String resolveSQLFilter(String filter) {\n+\n+        // To avoid any issues when the filter string is blank or null, assigning \"%\" to SQLFilter.\n+        String sqlfilter = \"%\";\n+        if (StringUtils.isNotBlank(filter)) {\n+            sqlfilter = filter.trim().replace(\"*\", \"%\").replace(\"?\", \"_\");\n+        }\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Input filter: \" + filter + \" resolved for SQL filter: \" + sqlfilter);\n+        }\n+        return sqlfilter;\n+    }\n+\n+    private String getDBTypeSpecificRolesRetrievalQueryByRoleName(String databaseProductName)\n+            throws IdentityRoleManagementException {\n+\n+        if (MY_SQL.equals(databaseProductName) || H2.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_MYSQL;\n+        } else if (ORACLE.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_ORACLE;\n+        } else if (MICROSOFT.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_MSSQL;\n+        } else if (POSTGRE_SQL.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_POSTGRESQL;\n+        } else if (databaseProductName != null && databaseProductName.contains(DB2)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_DB2;\n+        } else if (INFORMIX.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_AND_ROLE_NAME_INFORMIX;\n+        }\n+\n+        throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                \"Error while listing roles from DB. Database driver for \" + databaseProductName\n+                        + \"could not be identified or not supported.\");\n+    }\n+\n+    private String getDBTypeSpecificRolesRetrievalQuery(String databaseProductName)\n+            throws IdentityRoleManagementException {\n+\n+        if (MY_SQL.equals(databaseProductName) || H2.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_MYSQL;\n+        } else if (ORACLE.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_ORACLE;\n+        } else if (MICROSOFT.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_MSSQL;\n+        } else if (POSTGRE_SQL.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_POSTGRESQL;\n+        } else if (databaseProductName != null && databaseProductName.contains(DB2)) {\n+            return GET_ROLES_BY_TENANT_DB2;\n+        } else if (INFORMIX.equals(databaseProductName)) {\n+            return GET_ROLES_BY_TENANT_INFORMIX;\n+        }\n+\n+        throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                \"Error while listing roles from DB. Database driver for \" + databaseProductName\n+                        + \"could not be identified or not supported.\");\n+    }\n+\n+    /**\n+     * Validate offset.\n+     *\n+     * @param offset given offset value.\n+     * @return validated offset value.\n+     * @throws IdentityRoleManagementClientException IdentityRoleManagementClientException.\n+     */\n+    private int validateOffset(Integer offset) throws IdentityRoleManagementClientException {\n+\n+        if (offset == null) {\n+            // Return first page offset.\n+            offset = 0;\n+        }\n+\n+        if (offset < 0) {\n+            String errorMessage =\n+                    \"Invalid offset requested. Offset value should be zero or greater than zero. offSet: \" + offset;\n+            throw new IdentityRoleManagementClientException(INVALID_OFFSET.getCode(), errorMessage);\n+        }\n+        return offset;\n+    }\n+\n+    /**\n+     * Validate limit.\n+     *\n+     * @param limit given limit value.\n+     * @return validated limit value.\n+     * @throws IdentityRoleManagementClientException IdentityRoleManagementClientException.\n+     */\n+    private int validateLimit(Integer limit) throws IdentityRoleManagementClientException {\n+\n+        int maximumItemsPerPage = IdentityUtil.getMaximumItemPerPage();\n+        if (limit == null) {\n+            limit = IdentityUtil.getDefaultItemsPerPage();\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Given limit is null. Therefore assigning the default limit: \" + limit);\n+            }\n+        } else if (limit < 0) {\n+            String errorMessage =\n+                    \"Invalid limit requested. Limit value should be greater than or equal to zero. limit: \" + limit;\n+            throw new IdentityRoleManagementClientException(INVALID_LIMIT.getCode(), errorMessage);\n+        } else if (limit > maximumItemsPerPage) {\n+            limit = maximumItemsPerPage;\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Given limit exceed the maximum limit. Therefore assigning the maximum limit: \"\n+                        + maximumItemsPerPage);\n+            }\n+        }\n+        return limit;\n+    }\n+\n+    /**\n+     * Validates the offset and limit values for pagination.\n+     *\n+     * @param sortBy    Sort By value.\n+     * @param sortOrder Sort order value.\n+     * @throws IdentityRoleManagementClientException IdentityRoleManagementClientException.\n+     */\n+    private void validateAttributesForSorting(String sortBy, String sortOrder)\n+            throws IdentityRoleManagementClientException {\n+\n+        if (StringUtils.isNotBlank(sortBy) || StringUtils.isNotBlank(sortOrder)) {\n+            throw new IdentityRoleManagementClientException(SORTING_NOT_IMPLEMENTED.getCode(),\n+                    \"Sorting not supported.\");\n+        }\n+    }\n+\n+    public RoleBasicInfo addUsersToRole(String roleID, List<String> userIDsList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        if (!isExistingRoleID(roleID, tenantDomain)) {\n+            throw new IdentityRoleManagementClientException(ROLE_NOT_FOUND.getCode(),\n+                    \"Role id: \" + roleID + \" does not exist in the system.\");\n+        }\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        if (CollectionUtils.isEmpty(userIDsList)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"User list is empty.\");\n+            }\n+            return new RoleBasicInfo(roleID, roleName);\n+        }\n+        List<String> userNamesList = getUserNamesByIDs(userIDsList, tenantDomain);\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+\n+        // This method is always invoked by the primary user store manager.\n+        String primaryDomainName = IdentityUtil.getPrimaryDomainName();\n+        if (primaryDomainName != null) {\n+            primaryDomainName = primaryDomainName.toUpperCase(Locale.ENGLISH);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String sql = ADD_USER_TO_ROLE_SQL;\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            if (MICROSOFT.equals(databaseProductName)) {\n+                sql = ADD_USER_TO_ROLE_SQL_MSSQL;\n+            }\n+            processBatchUpdateForUsers(roleName, userNamesList, tenantId, primaryDomainName, connection, sql);\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while assigning users to the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, roleName, tenantDomain), e);\n+        }\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    public RoleBasicInfo removeUsersFromRole(String roleID, List<String> userIDsList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        List<String> userNamesList = getUserNamesByIDs(userIDsList, tenantDomain);\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (CollectionUtils.isEmpty(userIDsList)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"User list is empty.\");\n+            }\n+            return new RoleBasicInfo(roleID, roleName);\n+        }\n+        // This method is always invoked by the primary user store manager.\n+        String primaryDomainName = IdentityUtil.getPrimaryDomainName();\n+        if (primaryDomainName != null) {\n+            primaryDomainName = primaryDomainName.toUpperCase(Locale.ENGLISH);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            processBatchUpdateForUsers(roleName, userNamesList, tenantId, primaryDomainName, connection,\n+                    REMOVE_USER_FROM_ROLE_SQL);\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while removing users from the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, roleName, tenantDomain), e);\n+        }\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    private void processBatchUpdateForUsers(String roleName, List<String> userNamesList, int tenantId,\n+            String primaryDomainName, Connection connection, String removeUserFromRoleSql) throws SQLException {\n+\n+        try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, removeUserFromRoleSql)) {\n+            for (String userName : userNamesList) {\n+                // Add domain if not set.\n+                userName = UserCoreUtil.addDomainToName(userName, primaryDomainName);\n+                // Get domain from name.\n+                String domainName = UserCoreUtil.extractDomainFromName(userName);\n+                if (domainName != null) {\n+                    domainName = domainName.toUpperCase(Locale.ENGLISH);\n+                }\n+                String nameWithoutDomain = UserCoreUtil.removeDomainFromName(userName);\n+                statement.setString(RoleTableColumns.UM_USER_NAME, nameWithoutDomain);\n+                statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.UM_DOMAIN_NAME, domainName);\n+                statement.addBatch();\n+            }\n+            statement.executeBatch();\n+        }\n+    }\n+\n+    @Override\n+    public RoleBasicInfo addGroupsToRole(String roleID, List<String> groupIDsList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        if (!isExistingRoleID(roleID, tenantDomain)) {\n+            throw new IdentityRoleManagementClientException(ROLE_NOT_FOUND.getCode(),\n+                    \"Role id: \" + roleID + \" does not exist in the system.\");\n+        }\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        if (CollectionUtils.isEmpty(groupIDsList)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Group list is empty.\");\n+            }\n+            return new RoleBasicInfo(roleID, roleName);\n+        }\n+        Map<String, String> groupIdsToNames = getGroupNamesByIDs(groupIDsList, tenantDomain);\n+        List<String> groupNamesList = new ArrayList<>(groupIdsToNames.values());\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+\n+        // This method is always invoked by the primary user store manager.\n+        String primaryDomainName = IdentityUtil.getPrimaryDomainName();\n+        if (primaryDomainName != null) {\n+            primaryDomainName = primaryDomainName.toUpperCase(Locale.ENGLISH);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            String sql = ADD_GROUP_TO_ROLE_SQL;\n+            String databaseProductName = connection.getMetaData().getDatabaseProductName();\n+            if (MICROSOFT.equals(databaseProductName)) {\n+                sql = ADD_GROUP_TO_ROLE_SQL_MSSQL;\n+            }\n+            processBatchUpdateForGroups(roleName, groupNamesList, tenantId, primaryDomainName, connection, sql);\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while assigning groups to the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, roleName, tenantDomain), e);\n+        }\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    @Override\n+    public RoleBasicInfo removeGroupsFromRole(String roleID, List<String> groupIDsList, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        Map<String, String> groupIdsToNames = getGroupNamesByIDs(groupIDsList, tenantDomain);\n+        List<String> groupNamesList = new ArrayList<>(groupIdsToNames.values());\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (CollectionUtils.isEmpty(groupIDsList)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Group list is empty.\");\n+            }\n+            return new RoleBasicInfo(roleID, roleName);\n+        }\n+\n+        // This method is always invoked by the primary user store manager.\n+        String primaryDomainName = IdentityUtil.getPrimaryDomainName();\n+        if (primaryDomainName != null) {\n+            primaryDomainName = primaryDomainName.toUpperCase(Locale.ENGLISH);\n+        }\n+\n+        try (Connection connection = IdentityDatabaseUtil.getUserDBConnection()) {\n+            processBatchUpdateForGroups(roleName, groupNamesList, tenantId, primaryDomainName, connection,\n+                    REMOVE_GROUP_FROM_ROLE_SQL);\n+        } catch (SQLException e) {\n+            String errorMessage = \"Error while removing groups from the role: %s in the tenantDomain: %s\";\n+            throw new IdentityRoleManagementServerException(UNEXPECTED_SERVER_ERROR.getCode(),\n+                    String.format(errorMessage, roleName, tenantDomain), e);\n+        }\n+        return new RoleBasicInfo(roleID, roleName);\n+    }\n+\n+    private void processBatchUpdateForGroups(String roleName, List<String> groupNamesList, int tenantId,\n+            String primaryDomainName, Connection connection, String removeGroupFromRoleSql) throws SQLException {\n+\n+        try (NamedPreparedStatement statement = new NamedPreparedStatement(connection, removeGroupFromRoleSql)) {\n+            for (String groupName : groupNamesList) {\n+                // Add domain if not set.\n+                groupName = UserCoreUtil.addDomainToName(groupName, primaryDomainName);\n+                // Get domain from name.\n+                String domainName = UserCoreUtil.extractDomainFromName(groupName);\n+                if (domainName != null) {\n+                    domainName = domainName.toUpperCase(Locale.ENGLISH);\n+                }\n+                String nameWithoutDomain = UserCoreUtil.removeDomainFromName(groupName);\n+                statement.setString(RoleTableColumns.UM_GROUP_NAME, nameWithoutDomain);\n+                statement.setString(RoleTableColumns.UM_ROLE_NAME, roleName);\n+                statement.setInt(RoleTableColumns.UM_TENANT_ID, tenantId);\n+                statement.setString(RoleTableColumns.UM_DOMAIN_NAME, domainName);\n+                statement.addBatch();\n+            }\n+            statement.executeBatch();\n+        }\n+    }\n+\n+    @Override\n+    public RoleBasicInfo updateRoleName(String roleID, String newRoleName, String tenantDomain)\n+            throws IdentityRoleManagementException {\n+\n+        String roleName = getRoleNameByID(roleID, tenantDomain);\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+        if (!isExistingRoleID(roleID, tenantDomain)) {\n+            throw new IdentityRoleManagementClientException(ROLE_NOT_FOUND.getCode(),\n+                    \"Role id: \" + roleID + \" does not exist in the system.\");\n+        }\n+        if (isExistingRoleName(newRoleName, tenantDomain)) {\n+            throw new IdentityRoleManagementClientException(ROLE_ALREADY_EXISTS.getCode(),\n+                    \"Role name: \" + newRoleName + \" is already there in the system. Please pick another role name.\");\n+        }\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Updating the roleName: \" + roleName + \" to :\" + newRoleName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3Nzc0Ng=="}, "originalCommit": {"oid": "9c35a360ca7261e59f458516e362425d8607e277"}, "originalPosition": 614}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQ3NDA2OnYy", "diffSide": "RIGHT", "path": "features/role-mgt/org.wso2.carbon.identity.role.mgt.core.server.feature/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo1MDo0M1rOGqPZmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo1MDo0M1rOGqPZmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0NTY5MQ==", "bodyText": "Let's keep a note to make sure these versions are updated to the latest versions before merging.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r446945691", "createdAt": "2020-06-29T12:50:43Z", "author": {"login": "mefarazath"}, "path": "features/role-mgt/org.wso2.carbon.identity.role.mgt.core.server.feature/pom.xml", "diffHunk": "@@ -0,0 +1,101 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~ WSO2 Inc. licenses this file to you under the Apache License,\n+  ~ Version 2.0 (the \"License\"); you may not use this file except\n+  ~ in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied. See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>role-mgt-feature</artifactId>\n+        <version>5.18.4-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997efabd292a1bd734478511d0a3e2794e112417"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzY1OTMyOnYy", "diffSide": "RIGHT", "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1Mzo1MFrOGrdBOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTo1NDozMVrOGrr2QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzQwMQ==", "bodyText": "shall we follow the error code standard defined in \"[Architecture] WSO2 Identity Server REST API Error Response Standardization\" ?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r448217401", "createdAt": "2020-07-01T08:53:50Z", "author": {"login": "emswbandara"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleConstants.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+/**\n+ * Role constants.\n+ */\n+public class RoleConstants {\n+\n+    private RoleConstants() {\n+\n+    }\n+\n+    public static final String DISABLED = \"Disabled\";\n+\n+    // DB product names.\n+    public static final String H2 = \"H2\";\n+    public static final String MY_SQL = \"MySQL\";\n+    public static final String ORACLE = \"Oracle\";\n+    public static final String MICROSOFT = \"Microsoft SQL Server\";\n+    public static final String POSTGRE_SQL = \"PostgreSQL\";\n+    public static final String DB2 = \"DB2\";\n+    public static final String INFORMIX = \"INFORMIX\";\n+\n+    // Named query fields.\n+    public static final String OFFSET = \"OFFSET\";\n+    public static final String LIMIT = \"LIMIT\";\n+    public static final String ZERO_BASED_START_INDEX = \"ZERO_BASED_START_INDEX\";\n+    public static final String ONE_BASED_START_INDEX = \"ONE_BASED_START_INDEX\";\n+    public static final String END_INDEX = \"END_INDEX\";\n+    public static final String WILDCARD_CHARACTER = \"*\";\n+\n+\n+    // Group related constants.\n+    public static final String ID_URI = \"urn:ietf:params:scim:schemas:core:2.0:id\";\n+\n+    /**\n+     * Grouping of constants related to database table names.\n+     */\n+    public static class RoleTableColumns {\n+\n+        public static final String UM_ROLE_NAME = \"UM_ROLE_NAME\";\n+        public static final String UM_TENANT_ID = \"UM_TENANT_ID\";\n+        public static final String NEW_UM_ROLE_NAME = \"NEW_UM_ROLE_NAME\";\n+        public static final String UM_USER_NAME = \"UM_USER_NAME\";\n+        public static final String UM_GROUP_NAME = \"UM_GROUP_NAME\";\n+        public static final String UM_DOMAIN_NAME = \"UM_DOMAIN_NAME\";\n+\n+        public static final String TENANT_ID = \"TENANT_ID\";\n+        public static final String ATTR_NAME = \"ATTR_NAME\";\n+        public static final String ATTR_VALUE = \"ATTR_VALUE\";\n+        public static final String ROLE_NAME = \"ROLE_NAME\";\n+        public static final String NEW_ROLE_NAME = \"NEW_ROLE_NAME\";\n+\n+        private RoleTableColumns() {\n+\n+        }\n+    }\n+\n+    /**\n+     * Error message enums.\n+     * <p>\n+     * Error codes for server errors start with 75 and client errors start with 70.\n+     */\n+    public enum Error {\n+\n+        UNEXPECTED_SERVER_ERROR(\"75001\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69bfae421dd47bc67d2aa7d5ac9c4f6056dc042"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2MDM1Mg==", "bodyText": "Changed the error codes accordingly and updated the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2947#discussion_r448460352", "createdAt": "2020-07-01T15:54:31Z", "author": {"login": "ashensw"}, "path": "components/role-mgt/org.wso2.carbon.identity.role.mgt.core/src/main/java/org/wso2/carbon/identity/role/mgt/core/RoleConstants.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.role.mgt.core;\n+\n+/**\n+ * Role constants.\n+ */\n+public class RoleConstants {\n+\n+    private RoleConstants() {\n+\n+    }\n+\n+    public static final String DISABLED = \"Disabled\";\n+\n+    // DB product names.\n+    public static final String H2 = \"H2\";\n+    public static final String MY_SQL = \"MySQL\";\n+    public static final String ORACLE = \"Oracle\";\n+    public static final String MICROSOFT = \"Microsoft SQL Server\";\n+    public static final String POSTGRE_SQL = \"PostgreSQL\";\n+    public static final String DB2 = \"DB2\";\n+    public static final String INFORMIX = \"INFORMIX\";\n+\n+    // Named query fields.\n+    public static final String OFFSET = \"OFFSET\";\n+    public static final String LIMIT = \"LIMIT\";\n+    public static final String ZERO_BASED_START_INDEX = \"ZERO_BASED_START_INDEX\";\n+    public static final String ONE_BASED_START_INDEX = \"ONE_BASED_START_INDEX\";\n+    public static final String END_INDEX = \"END_INDEX\";\n+    public static final String WILDCARD_CHARACTER = \"*\";\n+\n+\n+    // Group related constants.\n+    public static final String ID_URI = \"urn:ietf:params:scim:schemas:core:2.0:id\";\n+\n+    /**\n+     * Grouping of constants related to database table names.\n+     */\n+    public static class RoleTableColumns {\n+\n+        public static final String UM_ROLE_NAME = \"UM_ROLE_NAME\";\n+        public static final String UM_TENANT_ID = \"UM_TENANT_ID\";\n+        public static final String NEW_UM_ROLE_NAME = \"NEW_UM_ROLE_NAME\";\n+        public static final String UM_USER_NAME = \"UM_USER_NAME\";\n+        public static final String UM_GROUP_NAME = \"UM_GROUP_NAME\";\n+        public static final String UM_DOMAIN_NAME = \"UM_DOMAIN_NAME\";\n+\n+        public static final String TENANT_ID = \"TENANT_ID\";\n+        public static final String ATTR_NAME = \"ATTR_NAME\";\n+        public static final String ATTR_VALUE = \"ATTR_VALUE\";\n+        public static final String ROLE_NAME = \"ROLE_NAME\";\n+        public static final String NEW_ROLE_NAME = \"NEW_ROLE_NAME\";\n+\n+        private RoleTableColumns() {\n+\n+        }\n+    }\n+\n+    /**\n+     * Error message enums.\n+     * <p>\n+     * Error codes for server errors start with 75 and client errors start with 70.\n+     */\n+    public enum Error {\n+\n+        UNEXPECTED_SERVER_ERROR(\"75001\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzQwMQ=="}, "originalCommit": {"oid": "d69bfae421dd47bc67d2aa7d5ac9c4f6056dc042"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2678, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}