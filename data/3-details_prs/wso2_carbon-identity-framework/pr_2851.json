{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MDQxMzU2", "number": 2851, "title": "Implement serverURL model", "bodyText": "Proposed changes in this pull request\nimprovement for #2828\nThis API is used to construct a tenant-qualified URL.\nIt can return the absolute URL from the constructed URL as follows,\n(tenant domain - wso2.com)\nAbsolute URL\nServiceURLBuilder.create().addPath(urlContext).build(\"samlsso\").getAbsoluteURL()  would return \"https://localhost:9443/t/wso2.com/samlsso\" for the default protocol, host name and port.", "createdAt": "2020-04-01T14:43:40Z", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851", "merged": true, "mergeCommit": {"oid": "398d82dfd77afc51611e43e378909d74851d6138"}, "closed": true, "closedAt": "2020-04-09T06:09:24Z", "author": {"login": "chamathns"}, "timelineItems": {"totalCount": 74, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTlO3VAFqTM4NjExMTUzMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcV2HR5gBqjMyMTY4NzY0NjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTExNTMy", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386111532", "createdAt": "2020-04-02T05:13:21Z", "commit": {"oid": "07a75feeab7c39d50e340c087f158efb151b6e64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToxMzoyMVrOF_bg8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToxMzoyMVrOF_bg8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1NTQxMQ==", "bodyText": "I don't think these properties are needed. Those are just builder properties.\nWe need just the basic components of the URL like host, port, protocol, path, query, fragement, parameters. May be you can have an internal URL object", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402055411", "createdAt": "2020-04-02T05:13:21Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServerURL.java", "diffHunk": "@@ -0,0 +1,411 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.URLResolverException;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.ArrayList;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Server URL representation.\n+ */\n+public class ServerURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private Integer port;\n+    private String proxyContext;\n+    private String webContext;\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a75feeab7c39d50e340c087f158efb151b6e64"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTExODk2", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386111896", "createdAt": "2020-04-02T05:14:31Z", "commit": {"oid": "07a75feeab7c39d50e340c087f158efb151b6e64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToxNDozMVrOF_biXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToxNDozMVrOF_biXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1NTc3NQ==", "bodyText": "What if we say this as ServiceURL; This actually reflects service endpoints.\n@pulasthi7 @mefarazath @omindu WDYT?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402055775", "createdAt": "2020-04-02T05:14:31Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServerURL.java", "diffHunk": "@@ -0,0 +1,411 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.URLResolverException;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.ArrayList;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Server URL representation.\n+ */\n+public class ServerURL {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a75feeab7c39d50e340c087f158efb151b6e64"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTEyMTgw", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386112180", "createdAt": "2020-04-02T05:15:29Z", "commit": {"oid": "07a75feeab7c39d50e340c087f158efb151b6e64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToxNToyOVrOF_bjVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToxNToyOVrOF_bjVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1NjAyMw==", "bodyText": "Remove  getters related to unnecessary operational properties", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402056023", "createdAt": "2020-04-02T05:15:29Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServerURL.java", "diffHunk": "@@ -0,0 +1,411 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.URLResolverException;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.ArrayList;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Server URL representation.\n+ */\n+public class ServerURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private Integer port;\n+    private String proxyContext;\n+    private String webContext;\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;\n+    private ArrayList<String> parameters;\n+    private ArrayList<String> fragments;\n+\n+    private ServerURL(ServerURLBuilder serverURLBuilder) {\n+\n+        this.protocol = serverURLBuilder.protocol;\n+        this.hostName = serverURLBuilder.hostName;\n+        this.port = serverURLBuilder.port;\n+        this.proxyContext = serverURLBuilder.proxyContext;\n+        this.webContext = serverURLBuilder.webContext;\n+        this.addProxyContext = serverURLBuilder.addProxyContext;\n+        this.addWebContext = serverURLBuilder.addWebContext;\n+        this.urlContext = serverURLBuilder.urlContext;\n+        this.appendTenantAsQueryParam = serverURLBuilder.appendTenantAsQueryParam;\n+        this.appendTenantAsPathParam = serverURLBuilder.appendTenantAsPathParam;\n+        this.parameters = serverURLBuilder.parameters;\n+        this.fragments = serverURLBuilder.fragments;\n+    }\n+\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    public String getHostName() {\n+\n+        return hostName;\n+    }\n+\n+    public Integer getPort() {\n+\n+        return port;\n+    }\n+\n+    public String getProxyContext() {\n+\n+        return proxyContext;\n+    }\n+\n+    public String getWebContext() {\n+\n+        return webContext;\n+    }\n+\n+    public String getUrlContext() {\n+\n+        return urlContext;\n+    }\n+\n+    public Boolean getAddProxyContext() {\n+\n+        return addProxyContext;\n+    }\n+\n+    public Boolean getAddWebContext() {\n+\n+        return addWebContext;\n+    }\n+\n+    public Boolean getAppendTenantAsQueryParam() {\n+\n+        return appendTenantAsQueryParam;\n+    }\n+\n+    public Boolean getAppendTenantAsPathParam() {\n+\n+        return appendTenantAsPathParam;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a75feeab7c39d50e340c087f158efb151b6e64"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTEyNTY4", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386112568", "createdAt": "2020-04-02T05:16:48Z", "commit": {"oid": "07a75feeab7c39d50e340c087f158efb151b6e64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToxNjo0OFrOF_bk1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToxNjo0OFrOF_bk1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1NjQwNw==", "bodyText": "Don't return the list which is mutable. Rather return as properties, immutable list, or better to provide the capability to get a specific parameter given a key", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402056407", "createdAt": "2020-04-02T05:16:48Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServerURL.java", "diffHunk": "@@ -0,0 +1,411 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.URLResolverException;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.ArrayList;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Server URL representation.\n+ */\n+public class ServerURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private Integer port;\n+    private String proxyContext;\n+    private String webContext;\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;\n+    private ArrayList<String> parameters;\n+    private ArrayList<String> fragments;\n+\n+    private ServerURL(ServerURLBuilder serverURLBuilder) {\n+\n+        this.protocol = serverURLBuilder.protocol;\n+        this.hostName = serverURLBuilder.hostName;\n+        this.port = serverURLBuilder.port;\n+        this.proxyContext = serverURLBuilder.proxyContext;\n+        this.webContext = serverURLBuilder.webContext;\n+        this.addProxyContext = serverURLBuilder.addProxyContext;\n+        this.addWebContext = serverURLBuilder.addWebContext;\n+        this.urlContext = serverURLBuilder.urlContext;\n+        this.appendTenantAsQueryParam = serverURLBuilder.appendTenantAsQueryParam;\n+        this.appendTenantAsPathParam = serverURLBuilder.appendTenantAsPathParam;\n+        this.parameters = serverURLBuilder.parameters;\n+        this.fragments = serverURLBuilder.fragments;\n+    }\n+\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    public String getHostName() {\n+\n+        return hostName;\n+    }\n+\n+    public Integer getPort() {\n+\n+        return port;\n+    }\n+\n+    public String getProxyContext() {\n+\n+        return proxyContext;\n+    }\n+\n+    public String getWebContext() {\n+\n+        return webContext;\n+    }\n+\n+    public String getUrlContext() {\n+\n+        return urlContext;\n+    }\n+\n+    public Boolean getAddProxyContext() {\n+\n+        return addProxyContext;\n+    }\n+\n+    public Boolean getAddWebContext() {\n+\n+        return addWebContext;\n+    }\n+\n+    public Boolean getAppendTenantAsQueryParam() {\n+\n+        return appendTenantAsQueryParam;\n+    }\n+\n+    public Boolean getAppendTenantAsPathParam() {\n+\n+        return appendTenantAsPathParam;\n+    }\n+\n+    public ArrayList<String> getParameters() {\n+\n+        return parameters;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a75feeab7c39d50e340c087f158efb151b6e64"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTEyOTA2", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386112906", "createdAt": "2020-04-02T05:17:53Z", "commit": {"oid": "07a75feeab7c39d50e340c087f158efb151b6e64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToxNzo1M1rOF_bmEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToxNzo1M1rOF_bmEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1NjcyMA==", "bodyText": "Let's not use carbon utils and fetch. This object should be created with all necessary fields populated. Don't invoke other classes utils from this POJO", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402056720", "createdAt": "2020-04-02T05:17:53Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServerURL.java", "diffHunk": "@@ -0,0 +1,411 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.URLResolverException;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.ArrayList;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Server URL representation.\n+ */\n+public class ServerURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private Integer port;\n+    private String proxyContext;\n+    private String webContext;\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;\n+    private ArrayList<String> parameters;\n+    private ArrayList<String> fragments;\n+\n+    private ServerURL(ServerURLBuilder serverURLBuilder) {\n+\n+        this.protocol = serverURLBuilder.protocol;\n+        this.hostName = serverURLBuilder.hostName;\n+        this.port = serverURLBuilder.port;\n+        this.proxyContext = serverURLBuilder.proxyContext;\n+        this.webContext = serverURLBuilder.webContext;\n+        this.addProxyContext = serverURLBuilder.addProxyContext;\n+        this.addWebContext = serverURLBuilder.addWebContext;\n+        this.urlContext = serverURLBuilder.urlContext;\n+        this.appendTenantAsQueryParam = serverURLBuilder.appendTenantAsQueryParam;\n+        this.appendTenantAsPathParam = serverURLBuilder.appendTenantAsPathParam;\n+        this.parameters = serverURLBuilder.parameters;\n+        this.fragments = serverURLBuilder.fragments;\n+    }\n+\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    public String getHostName() {\n+\n+        return hostName;\n+    }\n+\n+    public Integer getPort() {\n+\n+        return port;\n+    }\n+\n+    public String getProxyContext() {\n+\n+        return proxyContext;\n+    }\n+\n+    public String getWebContext() {\n+\n+        return webContext;\n+    }\n+\n+    public String getUrlContext() {\n+\n+        return urlContext;\n+    }\n+\n+    public Boolean getAddProxyContext() {\n+\n+        return addProxyContext;\n+    }\n+\n+    public Boolean getAddWebContext() {\n+\n+        return addWebContext;\n+    }\n+\n+    public Boolean getAppendTenantAsQueryParam() {\n+\n+        return appendTenantAsQueryParam;\n+    }\n+\n+    public Boolean getAppendTenantAsPathParam() {\n+\n+        return appendTenantAsPathParam;\n+    }\n+\n+    public ArrayList<String> getParameters() {\n+\n+        return parameters;\n+    }\n+\n+    public ArrayList<String> getFragments() {\n+\n+        return fragments;\n+    }\n+\n+    private String fetchProtocol() {\n+\n+        return CarbonUtils.getManagementTransport();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a75feeab7c39d50e340c087f158efb151b6e64"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTEzOTU2", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386113956", "createdAt": "2020-04-02T05:21:24Z", "commit": {"oid": "07a75feeab7c39d50e340c087f158efb151b6e64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToyMToyNVrOF_bpuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToyMToyNVrOF_bpuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1NzY1Ng==", "bodyText": "We need a slightly deviated version of this. Builder is the one who should process and get the POJO returned", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402057656", "createdAt": "2020-04-02T05:21:25Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServerURL.java", "diffHunk": "@@ -0,0 +1,411 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.URLResolverException;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.ArrayList;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Server URL representation.\n+ */\n+public class ServerURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private Integer port;\n+    private String proxyContext;\n+    private String webContext;\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;\n+    private ArrayList<String> parameters;\n+    private ArrayList<String> fragments;\n+\n+    private ServerURL(ServerURLBuilder serverURLBuilder) {\n+\n+        this.protocol = serverURLBuilder.protocol;\n+        this.hostName = serverURLBuilder.hostName;\n+        this.port = serverURLBuilder.port;\n+        this.proxyContext = serverURLBuilder.proxyContext;\n+        this.webContext = serverURLBuilder.webContext;\n+        this.addProxyContext = serverURLBuilder.addProxyContext;\n+        this.addWebContext = serverURLBuilder.addWebContext;\n+        this.urlContext = serverURLBuilder.urlContext;\n+        this.appendTenantAsQueryParam = serverURLBuilder.appendTenantAsQueryParam;\n+        this.appendTenantAsPathParam = serverURLBuilder.appendTenantAsPathParam;\n+        this.parameters = serverURLBuilder.parameters;\n+        this.fragments = serverURLBuilder.fragments;\n+    }\n+\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    public String getHostName() {\n+\n+        return hostName;\n+    }\n+\n+    public Integer getPort() {\n+\n+        return port;\n+    }\n+\n+    public String getProxyContext() {\n+\n+        return proxyContext;\n+    }\n+\n+    public String getWebContext() {\n+\n+        return webContext;\n+    }\n+\n+    public String getUrlContext() {\n+\n+        return urlContext;\n+    }\n+\n+    public Boolean getAddProxyContext() {\n+\n+        return addProxyContext;\n+    }\n+\n+    public Boolean getAddWebContext() {\n+\n+        return addWebContext;\n+    }\n+\n+    public Boolean getAppendTenantAsQueryParam() {\n+\n+        return appendTenantAsQueryParam;\n+    }\n+\n+    public Boolean getAppendTenantAsPathParam() {\n+\n+        return appendTenantAsPathParam;\n+    }\n+\n+    public ArrayList<String> getParameters() {\n+\n+        return parameters;\n+    }\n+\n+    public ArrayList<String> getFragments() {\n+\n+        return fragments;\n+    }\n+\n+    private String fetchProtocol() {\n+\n+        return CarbonUtils.getManagementTransport();\n+    }\n+\n+    private String fetchHostName() throws URLResolverException {\n+\n+        String hostName = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.HOST_NAME);\n+        try {\n+            if (StringUtils.isBlank(hostName)) {\n+                hostName = NetworkUtils.getLocalHostname();\n+            }\n+        } catch (SocketException e) {\n+            throw new URLResolverException(\"Error while trying to resolve the hostname from the system.\", e);\n+        }\n+        return hostName;\n+    }\n+\n+    private Integer fetchPort() {\n+\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        AxisConfiguration axisConfiguration = IdentityCoreServiceComponent.getConfigurationContextService().\n+                getServerConfigContext().getAxisConfiguration();\n+        int port = CarbonUtils.getTransportProxyPort(axisConfiguration, mgtTransport);\n+        if (port <= 0) {\n+            port = CarbonUtils.getTransportPort(axisConfiguration, mgtTransport);\n+        }\n+        return port;\n+    }\n+\n+    private String fetchProxyContextPath() {\n+\n+        return ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.PROXY_CONTEXT_PATH);\n+    }\n+\n+    private String fetchWebContextRoot() {\n+\n+        return ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.WEB_CONTEXT_ROOT);\n+    }\n+\n+    private String resolveUrlFromStandardContext(String urlContext) {\n+        /**\n+         * TODO\n+         * resolve URL context from the standard context.\n+         *\n+         */\n+        return null;\n+    }\n+\n+    private String resolveUrlFromServerConfig(String urlContext) {\n+        /**\n+         * TODO\n+         * resolve URL context from the server config.\n+         *\n+         */\n+        return null;\n+    }\n+\n+    private void appendURLContext(StringBuilder serverURL, String urlContext) {\n+\n+        if (!serverURL.toString().endsWith(\"/\") && urlContext.trim().charAt(0) != '/') {\n+            serverURL.append(\"/\").append(urlContext.trim());\n+        } else if (serverURL.toString().endsWith(\"/\") && urlContext.trim().charAt(0) == '/') {\n+            serverURL.append(urlContext.trim().substring(1));\n+        } else {\n+            serverURL.append(urlContext.trim());\n+        }\n+    }\n+\n+    public String getAbsoluteUrl() throws URLResolverException {\n+\n+        StringBuilder absoluteUrl = new StringBuilder();\n+        String protocol = this.getProtocol();\n+        if (StringUtils.isBlank(protocol)) {\n+            protocol = this.fetchProtocol();\n+        }\n+        absoluteUrl.append(protocol).append(\"://\");\n+        String hostName = this.getHostName();\n+        if (StringUtils.isBlank(hostName)) {\n+            hostName = this.fetchHostName();\n+        }\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        absoluteUrl.append(hostName.toLowerCase());\n+\n+        Integer port = this.getPort();\n+        if (port == null) {\n+            port = this.fetchPort();\n+        }\n+        if (port != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            absoluteUrl.append(\":\").append(port);\n+        }\n+        appendContext(absoluteUrl, this.getUrlContext());\n+        return absoluteUrl.toString();\n+    }\n+\n+    private void appendContext(StringBuilder serverUrl, String urlContext) {\n+\n+        if (this.getAddProxyContext()) {\n+            String proxyContextPath = this.getProxyContext();\n+            if (StringUtils.isBlank(proxyContextPath)) {\n+                proxyContextPath = fetchProxyContextPath();\n+            }\n+            if (StringUtils.isNotBlank(proxyContextPath)) {\n+                if (proxyContextPath.trim().charAt(0) != '/') {\n+                    serverUrl.append(\"/\").append(proxyContextPath.trim());\n+                } else {\n+                    serverUrl.append(proxyContextPath.trim());\n+                }\n+            }\n+        }\n+\n+        if (this.getAddWebContext()) {\n+            String webContextRoot = this.getWebContext();\n+            if (StringUtils.isBlank(webContextRoot)) {\n+                webContextRoot = fetchWebContextRoot();\n+            }\n+            if (StringUtils.isNotBlank(webContextRoot)) {\n+                if (webContextRoot.trim().charAt(0) != '/') {\n+                    serverUrl.append(\"/\").append(webContextRoot.trim());\n+                } else {\n+                    serverUrl.append(webContextRoot.trim());\n+                }\n+            }\n+        }\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }\n+        String resolvedUrlContext = null;\n+        /**\n+         *\n+         * check if tenant-qualified URL support is enabled. If true, add tenant domain to the path param.\n+         * If tenant-qualified URL support is enabled, resolve URL context from the standard context.\n+         * If the URL context is still null, resolve from the server config.\n+         * If tenant-qualified support is not enabled, resolve the URL context for params.\n+         *\n+         */\n+\n+        if (isTenantQualifiedUrlsEnabled()) {\n+            if (StringUtils.isNotBlank(tenantDomain)) {\n+                if (serverUrl.toString().endsWith(\"/\")) {\n+                    serverUrl.append(\"t/\").append(tenantDomain);\n+                } else {\n+                    serverUrl.append(\"/t/\").append(tenantDomain);\n+                }\n+            }\n+            resolvedUrlContext = resolveUrlFromStandardContext(urlContext);\n+        }\n+\n+        if (!isTenantQualifiedUrlsEnabled() && this.getAppendTenantAsPathParam()) {\n+            if (StringUtils.isNotBlank(tenantDomain) &&\n+                    !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equalsIgnoreCase(tenantDomain)) {\n+                if (serverUrl.toString().endsWith(\"/\")) {\n+                    serverUrl.append(\"t/\").append(tenantDomain);\n+                } else {\n+                    serverUrl.append(\"/t/\").append(tenantDomain);\n+                }\n+            }\n+        }\n+\n+        if (StringUtils.isBlank(resolvedUrlContext)) {\n+            resolvedUrlContext = resolveUrlFromServerConfig(urlContext);\n+        }\n+\n+        if (StringUtils.isNotBlank(resolvedUrlContext)) {\n+            appendURLContext(serverUrl, resolvedUrlContext);\n+        }\n+\n+        if (!isTenantQualifiedUrlsEnabled() && this.getAppendTenantAsQueryParam()) {\n+            if (StringUtils.isNotBlank(tenantDomain) &&\n+                    !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equalsIgnoreCase(tenantDomain)) {\n+                serverUrl.append(\"?\").append(MultitenantConstants.TENANT_DOMAIN).append(\"=\").append(tenantDomain);\n+            }\n+        }\n+\n+        if (serverUrl.toString().endsWith(\"/\")) {\n+            serverUrl.setLength(serverUrl.length() - 1);\n+        }\n+    }\n+\n+    /**\n+     * Server URL builder representation.\n+     */\n+    public static class ServerURLBuilder {\n+\n+        private String protocol;\n+        private String hostName;\n+        private Integer port;\n+        private String proxyContext;\n+        private String webContext;\n+        private Boolean addProxyContext;\n+        private Boolean addWebContext;\n+        private String urlContext;\n+        private Boolean appendTenantAsQueryParam;\n+        private Boolean appendTenantAsPathParam;\n+        private ArrayList<String> parameters;\n+        private ArrayList<String> fragments;\n+\n+        public ServerURLBuilder(String urlContext) {\n+\n+            this.urlContext = urlContext;\n+        }\n+\n+        public ServerURLBuilder protocol(String protocol) {\n+\n+            this.protocol = protocol;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder hostName(String hostName) {\n+\n+            this.hostName = hostName;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder port(Integer port) {\n+\n+            this.port = port;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder proxyContext(String proxyContext) {\n+\n+            this.proxyContext = proxyContext;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder webContext(String webContext) {\n+\n+            this.webContext = webContext;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder addProxyContext() {\n+\n+            this.addProxyContext = true;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder addWebContext() {\n+\n+            this.addWebContext = true;\n+            return this;\n+        }\n+\n+\n+        public ServerURLBuilder appendTenantAsQueryParam() {\n+\n+            this.appendTenantAsQueryParam = true;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder appendTenantAsPathParam() {\n+\n+            this.appendTenantAsPathParam = true;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder parameters(ArrayList<String> parameters) {\n+\n+            this.parameters = parameters;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder fragments(ArrayList<String> fragments) {\n+\n+            this.fragments = fragments;\n+            return this;\n+        }\n+\n+        public ServerURL build() {\n+\n+            return new ServerURL(this);\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a75feeab7c39d50e340c087f158efb151b6e64"}, "originalPosition": 410}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTE0OTM4", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386114938", "createdAt": "2020-04-02T05:24:35Z", "commit": {"oid": "07a75feeab7c39d50e340c087f158efb151b6e64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToyNDozNlrOF_btMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToyNDozNlrOF_btMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1ODU0Nw==", "bodyText": "Also would be better to have a parameter() method that allows adding params one by one.\nAlso shouldn't the input be a map?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402058547", "createdAt": "2020-04-02T05:24:36Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServerURL.java", "diffHunk": "@@ -0,0 +1,411 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.URLResolverException;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.ArrayList;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Server URL representation.\n+ */\n+public class ServerURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private Integer port;\n+    private String proxyContext;\n+    private String webContext;\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;\n+    private ArrayList<String> parameters;\n+    private ArrayList<String> fragments;\n+\n+    private ServerURL(ServerURLBuilder serverURLBuilder) {\n+\n+        this.protocol = serverURLBuilder.protocol;\n+        this.hostName = serverURLBuilder.hostName;\n+        this.port = serverURLBuilder.port;\n+        this.proxyContext = serverURLBuilder.proxyContext;\n+        this.webContext = serverURLBuilder.webContext;\n+        this.addProxyContext = serverURLBuilder.addProxyContext;\n+        this.addWebContext = serverURLBuilder.addWebContext;\n+        this.urlContext = serverURLBuilder.urlContext;\n+        this.appendTenantAsQueryParam = serverURLBuilder.appendTenantAsQueryParam;\n+        this.appendTenantAsPathParam = serverURLBuilder.appendTenantAsPathParam;\n+        this.parameters = serverURLBuilder.parameters;\n+        this.fragments = serverURLBuilder.fragments;\n+    }\n+\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    public String getHostName() {\n+\n+        return hostName;\n+    }\n+\n+    public Integer getPort() {\n+\n+        return port;\n+    }\n+\n+    public String getProxyContext() {\n+\n+        return proxyContext;\n+    }\n+\n+    public String getWebContext() {\n+\n+        return webContext;\n+    }\n+\n+    public String getUrlContext() {\n+\n+        return urlContext;\n+    }\n+\n+    public Boolean getAddProxyContext() {\n+\n+        return addProxyContext;\n+    }\n+\n+    public Boolean getAddWebContext() {\n+\n+        return addWebContext;\n+    }\n+\n+    public Boolean getAppendTenantAsQueryParam() {\n+\n+        return appendTenantAsQueryParam;\n+    }\n+\n+    public Boolean getAppendTenantAsPathParam() {\n+\n+        return appendTenantAsPathParam;\n+    }\n+\n+    public ArrayList<String> getParameters() {\n+\n+        return parameters;\n+    }\n+\n+    public ArrayList<String> getFragments() {\n+\n+        return fragments;\n+    }\n+\n+    private String fetchProtocol() {\n+\n+        return CarbonUtils.getManagementTransport();\n+    }\n+\n+    private String fetchHostName() throws URLResolverException {\n+\n+        String hostName = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.HOST_NAME);\n+        try {\n+            if (StringUtils.isBlank(hostName)) {\n+                hostName = NetworkUtils.getLocalHostname();\n+            }\n+        } catch (SocketException e) {\n+            throw new URLResolverException(\"Error while trying to resolve the hostname from the system.\", e);\n+        }\n+        return hostName;\n+    }\n+\n+    private Integer fetchPort() {\n+\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        AxisConfiguration axisConfiguration = IdentityCoreServiceComponent.getConfigurationContextService().\n+                getServerConfigContext().getAxisConfiguration();\n+        int port = CarbonUtils.getTransportProxyPort(axisConfiguration, mgtTransport);\n+        if (port <= 0) {\n+            port = CarbonUtils.getTransportPort(axisConfiguration, mgtTransport);\n+        }\n+        return port;\n+    }\n+\n+    private String fetchProxyContextPath() {\n+\n+        return ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.PROXY_CONTEXT_PATH);\n+    }\n+\n+    private String fetchWebContextRoot() {\n+\n+        return ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.WEB_CONTEXT_ROOT);\n+    }\n+\n+    private String resolveUrlFromStandardContext(String urlContext) {\n+        /**\n+         * TODO\n+         * resolve URL context from the standard context.\n+         *\n+         */\n+        return null;\n+    }\n+\n+    private String resolveUrlFromServerConfig(String urlContext) {\n+        /**\n+         * TODO\n+         * resolve URL context from the server config.\n+         *\n+         */\n+        return null;\n+    }\n+\n+    private void appendURLContext(StringBuilder serverURL, String urlContext) {\n+\n+        if (!serverURL.toString().endsWith(\"/\") && urlContext.trim().charAt(0) != '/') {\n+            serverURL.append(\"/\").append(urlContext.trim());\n+        } else if (serverURL.toString().endsWith(\"/\") && urlContext.trim().charAt(0) == '/') {\n+            serverURL.append(urlContext.trim().substring(1));\n+        } else {\n+            serverURL.append(urlContext.trim());\n+        }\n+    }\n+\n+    public String getAbsoluteUrl() throws URLResolverException {\n+\n+        StringBuilder absoluteUrl = new StringBuilder();\n+        String protocol = this.getProtocol();\n+        if (StringUtils.isBlank(protocol)) {\n+            protocol = this.fetchProtocol();\n+        }\n+        absoluteUrl.append(protocol).append(\"://\");\n+        String hostName = this.getHostName();\n+        if (StringUtils.isBlank(hostName)) {\n+            hostName = this.fetchHostName();\n+        }\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        absoluteUrl.append(hostName.toLowerCase());\n+\n+        Integer port = this.getPort();\n+        if (port == null) {\n+            port = this.fetchPort();\n+        }\n+        if (port != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            absoluteUrl.append(\":\").append(port);\n+        }\n+        appendContext(absoluteUrl, this.getUrlContext());\n+        return absoluteUrl.toString();\n+    }\n+\n+    private void appendContext(StringBuilder serverUrl, String urlContext) {\n+\n+        if (this.getAddProxyContext()) {\n+            String proxyContextPath = this.getProxyContext();\n+            if (StringUtils.isBlank(proxyContextPath)) {\n+                proxyContextPath = fetchProxyContextPath();\n+            }\n+            if (StringUtils.isNotBlank(proxyContextPath)) {\n+                if (proxyContextPath.trim().charAt(0) != '/') {\n+                    serverUrl.append(\"/\").append(proxyContextPath.trim());\n+                } else {\n+                    serverUrl.append(proxyContextPath.trim());\n+                }\n+            }\n+        }\n+\n+        if (this.getAddWebContext()) {\n+            String webContextRoot = this.getWebContext();\n+            if (StringUtils.isBlank(webContextRoot)) {\n+                webContextRoot = fetchWebContextRoot();\n+            }\n+            if (StringUtils.isNotBlank(webContextRoot)) {\n+                if (webContextRoot.trim().charAt(0) != '/') {\n+                    serverUrl.append(\"/\").append(webContextRoot.trim());\n+                } else {\n+                    serverUrl.append(webContextRoot.trim());\n+                }\n+            }\n+        }\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }\n+        String resolvedUrlContext = null;\n+        /**\n+         *\n+         * check if tenant-qualified URL support is enabled. If true, add tenant domain to the path param.\n+         * If tenant-qualified URL support is enabled, resolve URL context from the standard context.\n+         * If the URL context is still null, resolve from the server config.\n+         * If tenant-qualified support is not enabled, resolve the URL context for params.\n+         *\n+         */\n+\n+        if (isTenantQualifiedUrlsEnabled()) {\n+            if (StringUtils.isNotBlank(tenantDomain)) {\n+                if (serverUrl.toString().endsWith(\"/\")) {\n+                    serverUrl.append(\"t/\").append(tenantDomain);\n+                } else {\n+                    serverUrl.append(\"/t/\").append(tenantDomain);\n+                }\n+            }\n+            resolvedUrlContext = resolveUrlFromStandardContext(urlContext);\n+        }\n+\n+        if (!isTenantQualifiedUrlsEnabled() && this.getAppendTenantAsPathParam()) {\n+            if (StringUtils.isNotBlank(tenantDomain) &&\n+                    !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equalsIgnoreCase(tenantDomain)) {\n+                if (serverUrl.toString().endsWith(\"/\")) {\n+                    serverUrl.append(\"t/\").append(tenantDomain);\n+                } else {\n+                    serverUrl.append(\"/t/\").append(tenantDomain);\n+                }\n+            }\n+        }\n+\n+        if (StringUtils.isBlank(resolvedUrlContext)) {\n+            resolvedUrlContext = resolveUrlFromServerConfig(urlContext);\n+        }\n+\n+        if (StringUtils.isNotBlank(resolvedUrlContext)) {\n+            appendURLContext(serverUrl, resolvedUrlContext);\n+        }\n+\n+        if (!isTenantQualifiedUrlsEnabled() && this.getAppendTenantAsQueryParam()) {\n+            if (StringUtils.isNotBlank(tenantDomain) &&\n+                    !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equalsIgnoreCase(tenantDomain)) {\n+                serverUrl.append(\"?\").append(MultitenantConstants.TENANT_DOMAIN).append(\"=\").append(tenantDomain);\n+            }\n+        }\n+\n+        if (serverUrl.toString().endsWith(\"/\")) {\n+            serverUrl.setLength(serverUrl.length() - 1);\n+        }\n+    }\n+\n+    /**\n+     * Server URL builder representation.\n+     */\n+    public static class ServerURLBuilder {\n+\n+        private String protocol;\n+        private String hostName;\n+        private Integer port;\n+        private String proxyContext;\n+        private String webContext;\n+        private Boolean addProxyContext;\n+        private Boolean addWebContext;\n+        private String urlContext;\n+        private Boolean appendTenantAsQueryParam;\n+        private Boolean appendTenantAsPathParam;\n+        private ArrayList<String> parameters;\n+        private ArrayList<String> fragments;\n+\n+        public ServerURLBuilder(String urlContext) {\n+\n+            this.urlContext = urlContext;\n+        }\n+\n+        public ServerURLBuilder protocol(String protocol) {\n+\n+            this.protocol = protocol;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder hostName(String hostName) {\n+\n+            this.hostName = hostName;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder port(Integer port) {\n+\n+            this.port = port;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder proxyContext(String proxyContext) {\n+\n+            this.proxyContext = proxyContext;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder webContext(String webContext) {\n+\n+            this.webContext = webContext;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder addProxyContext() {\n+\n+            this.addProxyContext = true;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder addWebContext() {\n+\n+            this.addWebContext = true;\n+            return this;\n+        }\n+\n+\n+        public ServerURLBuilder appendTenantAsQueryParam() {\n+\n+            this.appendTenantAsQueryParam = true;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder appendTenantAsPathParam() {\n+\n+            this.appendTenantAsPathParam = true;\n+            return this;\n+        }\n+\n+        public ServerURLBuilder parameters(ArrayList<String> parameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a75feeab7c39d50e340c087f158efb151b6e64"}, "originalPosition": 393}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjM0MDYw", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386634060", "createdAt": "2020-04-02T17:18:16Z", "commit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxODoxN1rOF_1WTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxODoxN1rOF_1WTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3ODY2OQ==", "bodyText": "Why can't we have the primitive type", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402478669", "createdAt": "2020-04-02T17:18:17Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private Boolean addProxyContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjM1MDMz", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386635033", "createdAt": "2020-04-02T17:19:32Z", "commit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxOTozMlrOF_1ZiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxOTozMlrOF_1ZiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3OTQ5Ng==", "bodyText": "We can String as values right. Even if you take servlet API parameters are string isn't it", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402479496", "createdAt": "2020-04-02T17:19:32Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;\n+    private Map<String, Object> parameters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjM1NDQy", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386635442", "createdAt": "2020-04-02T17:20:02Z", "commit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoyMDowMlrOF_1a3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoyMDowMlrOF_1a3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3OTgzOA==", "bodyText": "Same case applies here. I don't think it's necessary to have an object type", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402479838", "createdAt": "2020-04-02T17:20:02Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;\n+    private Map<String, Object> parameters;\n+    private Map<String, Object> fragments;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjM2NDI3", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386636427", "createdAt": "2020-04-02T17:21:13Z", "commit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoyMToxM1rOF_1eFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoyMToxM1rOF_1eFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MDY2MQ==", "bodyText": "This is pending to implement ?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402480661", "createdAt": "2020-04-02T17:21:13Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;\n+    private Map<String, Object> parameters;\n+    private Map<String, Object> fragments;\n+\n+    @Override\n+    public ServiceURLBuilder addContext(String context) {\n+\n+        this.urlContext = context;\n+        return this;\n+    }\n+\n+    @Override\n+    public final ServiceURLBuilder addProxyContext() {\n+\n+        this.addProxyContext = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public final ServiceURLBuilder addWebContext() {\n+\n+        this.addWebContext = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder appendTenantAsQueryParam() {\n+\n+        this.appendTenantAsQueryParam = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder appendTenantAsPathParam() {\n+\n+        this.appendTenantAsPathParam = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, Object value) {\n+\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjQ3MzQx", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386647341", "createdAt": "2020-04-02T17:31:10Z", "commit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozMToxMFrOF_15Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozMToxMFrOF_15Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4NzYxNA==", "bodyText": "Shall we change the exception type", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402487614", "createdAt": "2020-04-02T17:31:10Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;\n+    private Map<String, Object> parameters;\n+    private Map<String, Object> fragments;\n+\n+    @Override\n+    public ServiceURLBuilder addContext(String context) {\n+\n+        this.urlContext = context;\n+        return this;\n+    }\n+\n+    @Override\n+    public final ServiceURLBuilder addProxyContext() {\n+\n+        this.addProxyContext = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public final ServiceURLBuilder addWebContext() {\n+\n+        this.addWebContext = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder appendTenantAsQueryParam() {\n+\n+        this.appendTenantAsQueryParam = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder appendTenantAsPathParam() {\n+\n+        this.appendTenantAsPathParam = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, Object value) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public ServiceURL build() throws URLResolverException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjQ5MTk2", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386649196", "createdAt": "2020-04-02T17:33:39Z", "commit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozMzozOVrOF_2CTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozMzozOVrOF_2CTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4OTkzNA==", "bodyText": "Should pick this up from OSGI service listening", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402489934", "createdAt": "2020-04-02T17:33:39Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+\n+/**\n+ * URL Builder service interface.\n+ */\n+public interface ServiceURLBuilder {\n+\n+    static ServiceURLBuilder create() {\n+\n+        return new DefaultServiceURLBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjUzMDc3", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386653077", "createdAt": "2020-04-02T17:39:08Z", "commit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozOTowOFrOF_2Vyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozOTowOFrOF_2Vyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5NDkyMw==", "bodyText": "I think multiple context paths can be added and you should be building the requestURI", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402494923", "createdAt": "2020-04-02T17:39:08Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+\n+/**\n+ * URL Builder service interface.\n+ */\n+public interface ServiceURLBuilder {\n+\n+    static ServiceURLBuilder create() {\n+\n+        return new DefaultServiceURLBuilder();\n+    }\n+\n+    /**\n+     * This method is called to add the URL context to the builder.\n+     *\n+     * @param context URL context.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addContext(String context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjU0NTkw", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386654590", "createdAt": "2020-04-02T17:41:08Z", "commit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0MTowOFrOF_2cPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0MTowOFrOF_2cPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5NjU3Mg==", "bodyText": "This implementation should go to internal package", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402496572", "createdAt": "2020-04-02T17:41:08Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjU2ODkw", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386656890", "createdAt": "2020-04-02T17:44:10Z", "commit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0NDoxMFrOF_2jhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0NDoxMFrOF_2jhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5ODQzNw==", "bodyText": "We might not need this. context is the path, which we will be using to construct the full URL", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402498437", "createdAt": "2020-04-02T17:44:10Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;\n+    private Map<String, Object> parameters;\n+    private Map<String, Object> fragments;\n+\n+    @Override\n+    public ServiceURLBuilder addContext(String context) {\n+\n+        this.urlContext = context;\n+        return this;\n+    }\n+\n+    @Override\n+    public final ServiceURLBuilder addProxyContext() {\n+\n+        this.addProxyContext = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public final ServiceURLBuilder addWebContext() {\n+\n+        this.addWebContext = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder appendTenantAsQueryParam() {\n+\n+        this.appendTenantAsQueryParam = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder appendTenantAsPathParam() {\n+\n+        this.appendTenantAsPathParam = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, Object value) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public ServiceURL build() throws URLResolverException {\n+\n+        String protocol = fetchProtocol();\n+        String hostName = fetchHostName();\n+        Integer port = fetchPort();\n+        String proxyContext = null;\n+        if (addProxyContext) {\n+            proxyContext = fetchProxyContextPath();\n+        }\n+        String webContext = null;\n+        if (addWebContext) {\n+            webContext = fetchWebContextRoot();\n+        }\n+\n+        String urlContext = this.urlContext;\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }\n+\n+        String resolvedUrlContext = null;\n+        StringBuilder resolvedUrlStringBuilder = new StringBuilder();\n+        if (isTenantQualifiedUrlsEnabled()) {\n+            if (StringUtils.isNotBlank(tenantDomain)) {\n+                resolvedUrlStringBuilder.append(\"/t/\").append(tenantDomain);\n+            }\n+            resolvedUrlContext = resolveUrlFromStandardContext(urlContext);\n+        }\n+\n+        if (!isTenantQualifiedUrlsEnabled() && appendTenantAsPathParam) {\n+            if (StringUtils.isNotBlank(tenantDomain) &&\n+                    !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equalsIgnoreCase(tenantDomain)) {\n+                resolvedUrlStringBuilder.append(\"/t/\").append(tenantDomain);\n+            }\n+        }\n+\n+        if (StringUtils.isBlank(resolvedUrlContext)) {\n+            resolvedUrlContext = resolveUrlFromServerConfig(urlContext);\n+        }\n+\n+        if (StringUtils.isNotBlank(resolvedUrlContext)) {\n+            resolvedUrlStringBuilder.append(resolvedUrlContext);\n+        }\n+\n+        if (!isTenantQualifiedUrlsEnabled() && appendTenantAsQueryParam) {\n+            if (StringUtils.isNotBlank(tenantDomain) &&\n+                    !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equalsIgnoreCase(tenantDomain)) {\n+                resolvedUrlStringBuilder.append(\"?\").append(MultitenantConstants.TENANT_DOMAIN).append(\"=\")\n+                        .append(tenantDomain);\n+            }\n+        }\n+\n+        Map<String, Object> parameters = this.parameters;\n+        Map<String, Object> fragments = this.fragments;\n+\n+        return new ServiceURL(protocol, hostName, port, proxyContext, webContext, resolvedUrlStringBuilder.toString(),\n+                parameters, fragments);\n+\n+    }\n+\n+    private String fetchProtocol() {\n+\n+        return CarbonUtils.getManagementTransport();\n+    }\n+\n+    private String fetchHostName() throws URLResolverException {\n+\n+        String hostName = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.HOST_NAME);\n+        try {\n+            if (StringUtils.isBlank(hostName)) {\n+                hostName = NetworkUtils.getLocalHostname();\n+            }\n+        } catch (SocketException e) {\n+            throw new URLResolverException(\"Error while trying to resolve the hostname from the system.\", e);\n+        }\n+        return hostName;\n+    }\n+\n+    private Integer fetchPort() {\n+\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        AxisConfiguration axisConfiguration = IdentityCoreServiceComponent.getConfigurationContextService().\n+                getServerConfigContext().getAxisConfiguration();\n+        int port = CarbonUtils.getTransportProxyPort(axisConfiguration, mgtTransport);\n+        if (port <= 0) {\n+            port = CarbonUtils.getTransportPort(axisConfiguration, mgtTransport);\n+        }\n+        return port;\n+    }\n+\n+    private String fetchProxyContextPath() {\n+\n+        return ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.PROXY_CONTEXT_PATH);\n+    }\n+\n+    private String fetchWebContextRoot() {\n+\n+        return ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.WEB_CONTEXT_ROOT);\n+    }\n+\n+    private String resolveUrlFromStandardContext(String urlContext) {\n+        /**\n+         * TODO\n+         * resolve URL context from the standard context.\n+         *\n+         */\n+        return urlContext;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "originalPosition": 202}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjU5ODM0", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386659834", "createdAt": "2020-04-02T17:48:16Z", "commit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0ODoxNlrOF_2s4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0ODoxNlrOF_2s4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDgzNQ==", "bodyText": "If not tenant url supported we should give precedence to load the URL from the config", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402500835", "createdAt": "2020-04-02T17:48:16Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;\n+    private Map<String, Object> parameters;\n+    private Map<String, Object> fragments;\n+\n+    @Override\n+    public ServiceURLBuilder addContext(String context) {\n+\n+        this.urlContext = context;\n+        return this;\n+    }\n+\n+    @Override\n+    public final ServiceURLBuilder addProxyContext() {\n+\n+        this.addProxyContext = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public final ServiceURLBuilder addWebContext() {\n+\n+        this.addWebContext = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder appendTenantAsQueryParam() {\n+\n+        this.appendTenantAsQueryParam = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder appendTenantAsPathParam() {\n+\n+        this.appendTenantAsPathParam = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, Object value) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public ServiceURL build() throws URLResolverException {\n+\n+        String protocol = fetchProtocol();\n+        String hostName = fetchHostName();\n+        Integer port = fetchPort();\n+        String proxyContext = null;\n+        if (addProxyContext) {\n+            proxyContext = fetchProxyContextPath();\n+        }\n+        String webContext = null;\n+        if (addWebContext) {\n+            webContext = fetchWebContextRoot();\n+        }\n+\n+        String urlContext = this.urlContext;\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }\n+\n+        String resolvedUrlContext = null;\n+        StringBuilder resolvedUrlStringBuilder = new StringBuilder();\n+        if (isTenantQualifiedUrlsEnabled()) {\n+            if (StringUtils.isNotBlank(tenantDomain)) {\n+                resolvedUrlStringBuilder.append(\"/t/\").append(tenantDomain);\n+            }\n+            resolvedUrlContext = resolveUrlFromStandardContext(urlContext);\n+        }\n+\n+        if (!isTenantQualifiedUrlsEnabled() && appendTenantAsPathParam) {\n+            if (StringUtils.isNotBlank(tenantDomain) &&\n+                    !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equalsIgnoreCase(tenantDomain)) {\n+                resolvedUrlStringBuilder.append(\"/t/\").append(tenantDomain);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "originalPosition": 129}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17c2fc9f2c39ee69833710983d258a539673d539", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/17c2fc9f2c39ee69833710983d258a539673d539", "committedDate": "2020-04-03T02:40:15Z", "message": "resolve issues"}, "afterCommit": {"oid": "901c21799fa9f595fdd38b66efde1510e974b985", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/901c21799fa9f595fdd38b66efde1510e974b985", "committedDate": "2020-04-03T04:08:13Z", "message": "resolve issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db65105743b12753639a70081fa94d9e4d0e29f1", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/db65105743b12753639a70081fa94d9e4d0e29f1", "committedDate": "2020-04-03T05:57:59Z", "message": "fix minor issues"}, "afterCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/2765d7e8d17c53e1a80172e10de4e908c447a5ac", "committedDate": "2020-04-03T05:59:48Z", "message": "implement serverURL model\n\nimplement method to get the absolute url from a url context\n\nadd URL Builder service\n\nadd methods to get absoluteURL and relativeURL\n\nadd method comments and class comments\n\nresolve issues\n\nadd API in the IdentityUtil\n\nfix minor issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDM3ODk3", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-387037897", "createdAt": "2020-04-03T08:00:41Z", "commit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowMDo0MVrOGAJV6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowMDo0MVrOGAJV6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNjI0OA==", "bodyText": "Also let's not make this append right. We can say addTenantQueryParam", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402806248", "createdAt": "2020-04-03T08:00:41Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+\n+/**\n+ * URL Builder service interface.\n+ */\n+public interface ServiceURLBuilder {\n+\n+    /**\n+     * This method is called to add the URL context to the builder.\n+     *\n+     * @param context URL context.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addContext(String context);\n+\n+    /**\n+     * This method is called when the URL needs to be appended with the tenant domain as a query parameter when\n+     * operating in legacy mode.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder appendTenantAsQueryParam();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDM4MDcx", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-387038071", "createdAt": "2020-04-03T08:00:56Z", "commit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowMDo1NlrOGAJW4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowMDo1NlrOGAJW4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNjQ5Nw==", "bodyText": "Also let's not make this append right. We can say addTenantPathParam", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402806497", "createdAt": "2020-04-03T08:00:56Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+\n+/**\n+ * URL Builder service interface.\n+ */\n+public interface ServiceURLBuilder {\n+\n+    /**\n+     * This method is called to add the URL context to the builder.\n+     *\n+     * @param context URL context.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addContext(String context);\n+\n+    /**\n+     * This method is called when the URL needs to be appended with the tenant domain as a query parameter when\n+     * operating in legacy mode.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder appendTenantAsQueryParam();\n+\n+    /**\n+     * This method is called when the URL needs to be appended with the tenant domain as a path parameter when\n+     * operating in legacy mode.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder appendTenantAsPathParam();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDQxMDQw", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-387041040", "createdAt": "2020-04-03T08:05:34Z", "commit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowNTozNFrOGAJmHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowNTozNFrOGAJmHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMDM5Ng==", "bodyText": "Fragments would not need key value pair I think", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402810396", "createdAt": "2020-04-03T08:05:34Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+\n+/**\n+ * URL Builder service interface.\n+ */\n+public interface ServiceURLBuilder {\n+\n+    /**\n+     * This method is called to add the URL context to the builder.\n+     *\n+     * @param context URL context.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addContext(String context);\n+\n+    /**\n+     * This method is called when the URL needs to be appended with the tenant domain as a query parameter when\n+     * operating in legacy mode.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder appendTenantAsQueryParam();\n+\n+    /**\n+     * This method is called when the URL needs to be appended with the tenant domain as a path parameter when\n+     * operating in legacy mode.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder appendTenantAsPathParam();\n+\n+    /**\n+     * This method is called to add the proxy context path to the URL.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addProxyContext();\n+\n+    /**\n+     * This method is called to add the web context root to the URL.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addWebContext();\n+\n+    /**\n+     * This method is called when the URL needs to be appended with other parameters. Such parameters should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addParameter(String key, String value);\n+\n+    /**\n+     * This method is called when the URL needs to be appended with fragments. Fragments should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addFragments(String key, String value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDUzODM2", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-387053836", "createdAt": "2020-04-03T08:25:01Z", "commit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoyNTowMlrOGAKn-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoyNTowMlrOGAKn-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyNzI1Ng==", "bodyText": "we would not have to resolve the context in this mode", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402827256", "createdAt": "2020-04-03T08:25:02Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private boolean addProxyContext;\n+    private boolean addWebContext;\n+    private String urlContext;\n+    private boolean appendTenantAsQueryParam;\n+    private boolean appendTenantAsPathParam;\n+    private Map<String, String> parameters;\n+    private Map<String, String> fragments;\n+\n+    /**\n+     * This method is called to add the URL context to the builder.\n+     *\n+     * @param context URL context.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addContext(String context) {\n+\n+        this.urlContext = context;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called to add the proxy context path to the URL.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public final ServiceURLBuilder addProxyContext() {\n+\n+        this.addProxyContext = true;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called to add the web context root to the URL.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public final ServiceURLBuilder addWebContext() {\n+\n+        this.addWebContext = true;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with the tenant domain as a query parameter when\n+     * operating in legacy mode.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder appendTenantAsQueryParam() {\n+\n+        this.appendTenantAsQueryParam = true;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with the tenant domain as a path parameter when\n+     * operating in legacy mode.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder appendTenantAsPathParam() {\n+\n+        this.appendTenantAsPathParam = true;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with other parameters. Such parameters should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, String value) {\n+\n+        this.parameters.put(key, value);\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with fragments. Fragments should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addFragments(String key, String value) {\n+\n+        this.fragments.put(key, value);\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURL build() throws URLBuilderException {\n+\n+        String protocol = fetchProtocol();\n+        String hostName = fetchHostName();\n+        Integer port = fetchPort();\n+        String proxyContext = null;\n+        if (addProxyContext) {\n+            proxyContext = fetchProxyContextPath();\n+        }\n+        String webContext = null;\n+        if (addWebContext) {\n+            webContext = fetchWebContextRoot();\n+        }\n+\n+        String urlContext = this.urlContext;\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }\n+\n+        String resolvedUrlContext = null;\n+        StringBuilder resolvedUrlStringBuilder = new StringBuilder();\n+        if (isTenantQualifiedUrlsEnabled()) {\n+            if (StringUtils.isNotBlank(tenantDomain)) {\n+                resolvedUrlStringBuilder.append(\"/t/\").append(tenantDomain);\n+            }\n+            resolvedUrlContext = resolveUrlFromStandardContext(urlContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "originalPosition": 174}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NDYyOTY4", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-386462968", "createdAt": "2020-04-02T14:08:54Z", "commit": {"oid": "f93ddf794afe856848adc0be642ef8651909cdba"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDowODo1NVrOF_tBIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowODowNlrOGAJurw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0MjE3Nw==", "bodyText": "Any reason for not using int?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402342177", "createdAt": "2020-04-02T14:08:55Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * <p>\n+ * Builder for {@link ServiceURL} instances.\n+ * When a particular component is not explicitly set this class will use its default implementation.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;\n+    private Map<String, Object> parameters;\n+    private Map<String, Object> fragments;\n+\n+    @Override\n+    public ServiceURLBuilder addContext(String context) {\n+\n+        this.urlContext = context;\n+        return this;\n+    }\n+\n+    @Override\n+    public final ServiceURLBuilder addProxyContext() {\n+\n+        this.addProxyContext = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public final ServiceURLBuilder addWebContext() {\n+\n+        this.addWebContext = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder appendTenantAsQueryParam() {\n+\n+        this.appendTenantAsQueryParam = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder appendTenantAsPathParam() {\n+\n+        this.appendTenantAsPathParam = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, Object value) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public ServiceURL build() throws URLResolverException {\n+\n+        String protocol = fetchProtocol();\n+        String hostName = fetchHostName();\n+        Integer port = fetchPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f93ddf794afe856848adc0be642ef8651909cdba"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0MzIzMg==", "bodyText": "Is this correct?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402343232", "createdAt": "2020-04-02T14:10:17Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * <p>\n+ * Builder for {@link ServiceURL} instances.\n+ * When a particular component is not explicitly set this class will use its default implementation.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;\n+    private Map<String, Object> parameters;\n+    private Map<String, Object> fragments;\n+\n+    @Override\n+    public ServiceURLBuilder addContext(String context) {\n+\n+        this.urlContext = context;\n+        return this;\n+    }\n+\n+    @Override\n+    public final ServiceURLBuilder addProxyContext() {\n+\n+        this.addProxyContext = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public final ServiceURLBuilder addWebContext() {\n+\n+        this.addWebContext = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder appendTenantAsQueryParam() {\n+\n+        this.appendTenantAsQueryParam = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder appendTenantAsPathParam() {\n+\n+        this.appendTenantAsPathParam = true;\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, Object value) {\n+\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f93ddf794afe856848adc0be642ef8651909cdba"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxODE2NQ==", "bodyText": "+1", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402518165", "createdAt": "2020-04-02T18:17:31Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.SocketException;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private Boolean addProxyContext;\n+    private Boolean addWebContext;\n+    private String urlContext;\n+    private Boolean appendTenantAsQueryParam;\n+    private Boolean appendTenantAsPathParam;\n+    private Map<String, Object> parameters;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3OTQ5Ng=="}, "originalCommit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNTk5OQ==", "bodyText": "I think addPath approach is better", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402805999", "createdAt": "2020-04-03T08:00:22Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+\n+/**\n+ * URL Builder service interface.\n+ */\n+public interface ServiceURLBuilder {\n+\n+    static ServiceURLBuilder create() {\n+\n+        return new DefaultServiceURLBuilder();\n+    }\n+\n+    /**\n+     * This method is called to add the URL context to the builder.\n+     *\n+     * @param context URL context.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addContext(String context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5NDkyMw=="}, "originalCommit": {"oid": "8aefd5137b5c7cd9364e63f05d32bbb9d38c8d41"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzMwMw==", "bodyText": "We need to do URL encoding here", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402807303", "createdAt": "2020-04-03T08:01:54Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServiceURL.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+\n+import java.util.Map;\n+\n+/**\n+ * Service URL representation.\n+ */\n+public class ServiceURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private Integer port;\n+    private String proxyContext;\n+    private String webContext;\n+    private String urlContext;\n+    private Map<String, String> parameters;\n+    private Map<String, String> fragments;\n+\n+    public ServiceURL(String protocol, String hostName, Integer port, String proxyContext, String webContext,\n+                      String urlContext, Map<String, String> parameters, Map<String, String> fragments) {\n+\n+        this.protocol = protocol;\n+        this.hostName = hostName;\n+        this.port = port;\n+        this.proxyContext = proxyContext;\n+        this.webContext = webContext;\n+        this.urlContext = urlContext;\n+        this.parameters = parameters;\n+        this.fragments = fragments;\n+    }\n+\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    public String getHostName() {\n+\n+        return hostName;\n+    }\n+\n+    public Integer getPort() {\n+\n+        return port;\n+    }\n+\n+    public String getProxyContext() {\n+\n+        return proxyContext;\n+    }\n+\n+    public String getWebContext() {\n+\n+        return webContext;\n+    }\n+\n+    public String getUrlContext() {\n+\n+        return urlContext;\n+    }\n+\n+    public Map<String, String> getParameters() {\n+\n+        return parameters;\n+    }\n+\n+    public Map<String, String> getFragments() {\n+\n+        return fragments;\n+    }\n+\n+    private void appendContextToUri(StringBuilder serverUrl, String contextPath) {\n+\n+        if (StringUtils.isNotBlank(contextPath)) {\n+            if (contextPath.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(contextPath.trim());\n+            } else {\n+                serverUrl.append(contextPath.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendParamsToUri(StringBuilder serverUrl, Map<String, String> parameters) {\n+\n+        if (MapUtils.isNotEmpty(parameters)) {\n+            for (Map.Entry<String, String> entry : parameters.entrySet()) {\n+                serverUrl.append(\"?\").append(entry.getKey()).append(\"=\").append(entry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzg4OQ==", "bodyText": "Shouldn't we handle fragments  here?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402807889", "createdAt": "2020-04-03T08:02:37Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServiceURL.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+\n+import java.util.Map;\n+\n+/**\n+ * Service URL representation.\n+ */\n+public class ServiceURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private Integer port;\n+    private String proxyContext;\n+    private String webContext;\n+    private String urlContext;\n+    private Map<String, String> parameters;\n+    private Map<String, String> fragments;\n+\n+    public ServiceURL(String protocol, String hostName, Integer port, String proxyContext, String webContext,\n+                      String urlContext, Map<String, String> parameters, Map<String, String> fragments) {\n+\n+        this.protocol = protocol;\n+        this.hostName = hostName;\n+        this.port = port;\n+        this.proxyContext = proxyContext;\n+        this.webContext = webContext;\n+        this.urlContext = urlContext;\n+        this.parameters = parameters;\n+        this.fragments = fragments;\n+    }\n+\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    public String getHostName() {\n+\n+        return hostName;\n+    }\n+\n+    public Integer getPort() {\n+\n+        return port;\n+    }\n+\n+    public String getProxyContext() {\n+\n+        return proxyContext;\n+    }\n+\n+    public String getWebContext() {\n+\n+        return webContext;\n+    }\n+\n+    public String getUrlContext() {\n+\n+        return urlContext;\n+    }\n+\n+    public Map<String, String> getParameters() {\n+\n+        return parameters;\n+    }\n+\n+    public Map<String, String> getFragments() {\n+\n+        return fragments;\n+    }\n+\n+    private void appendContextToUri(StringBuilder serverUrl, String contextPath) {\n+\n+        if (StringUtils.isNotBlank(contextPath)) {\n+            if (contextPath.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(contextPath.trim());\n+            } else {\n+                serverUrl.append(contextPath.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendParamsToUri(StringBuilder serverUrl, Map<String, String> parameters) {\n+\n+        if (MapUtils.isNotEmpty(parameters)) {\n+            for (Map.Entry<String, String> entry : parameters.entrySet()) {\n+                serverUrl.append(\"?\").append(entry.getKey()).append(\"=\").append(entry.getValue());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Concatenate the protocol, host name, port, proxy context path, web context root and url context to return the\n+     * absolute URL.\n+     *\n+     * @return The absolute URL from the {@link ServiceURL} instance.\n+     */\n+    public String getAbsoluteUrl() {\n+\n+        StringBuilder absoluteUrl = new StringBuilder();\n+        absoluteUrl.append(getProtocol()).append(\"://\");\n+\n+        String hostName = getHostName();\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        absoluteUrl.append(hostName.toLowerCase());\n+\n+        int port = getPort();\n+        // If it's well known HTTPS port, skip adding port.\n+        if (port != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            absoluteUrl.append(\":\").append(port);\n+        }\n+\n+        String proxyContextPath = getProxyContext();\n+        appendContextToUri(absoluteUrl, proxyContextPath);\n+\n+        String webContextRoot = getWebContext();\n+        appendContextToUri(absoluteUrl, webContextRoot);\n+\n+        String urlContext = getUrlContext();\n+        appendContextToUri(absoluteUrl, urlContext);\n+\n+        Map<String, String> parameters = getParameters();\n+        appendParamsToUri(absoluteUrl, parameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwODU4NQ==", "bodyText": "Need to handle URL fragements", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402808585", "createdAt": "2020-04-03T08:03:27Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServiceURL.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+\n+import java.util.Map;\n+\n+/**\n+ * Service URL representation.\n+ */\n+public class ServiceURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private Integer port;\n+    private String proxyContext;\n+    private String webContext;\n+    private String urlContext;\n+    private Map<String, String> parameters;\n+    private Map<String, String> fragments;\n+\n+    public ServiceURL(String protocol, String hostName, Integer port, String proxyContext, String webContext,\n+                      String urlContext, Map<String, String> parameters, Map<String, String> fragments) {\n+\n+        this.protocol = protocol;\n+        this.hostName = hostName;\n+        this.port = port;\n+        this.proxyContext = proxyContext;\n+        this.webContext = webContext;\n+        this.urlContext = urlContext;\n+        this.parameters = parameters;\n+        this.fragments = fragments;\n+    }\n+\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    public String getHostName() {\n+\n+        return hostName;\n+    }\n+\n+    public Integer getPort() {\n+\n+        return port;\n+    }\n+\n+    public String getProxyContext() {\n+\n+        return proxyContext;\n+    }\n+\n+    public String getWebContext() {\n+\n+        return webContext;\n+    }\n+\n+    public String getUrlContext() {\n+\n+        return urlContext;\n+    }\n+\n+    public Map<String, String> getParameters() {\n+\n+        return parameters;\n+    }\n+\n+    public Map<String, String> getFragments() {\n+\n+        return fragments;\n+    }\n+\n+    private void appendContextToUri(StringBuilder serverUrl, String contextPath) {\n+\n+        if (StringUtils.isNotBlank(contextPath)) {\n+            if (contextPath.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(contextPath.trim());\n+            } else {\n+                serverUrl.append(contextPath.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendParamsToUri(StringBuilder serverUrl, Map<String, String> parameters) {\n+\n+        if (MapUtils.isNotEmpty(parameters)) {\n+            for (Map.Entry<String, String> entry : parameters.entrySet()) {\n+                serverUrl.append(\"?\").append(entry.getKey()).append(\"=\").append(entry.getValue());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Concatenate the protocol, host name, port, proxy context path, web context root and url context to return the\n+     * absolute URL.\n+     *\n+     * @return The absolute URL from the {@link ServiceURL} instance.\n+     */\n+    public String getAbsoluteUrl() {\n+\n+        StringBuilder absoluteUrl = new StringBuilder();\n+        absoluteUrl.append(getProtocol()).append(\"://\");\n+\n+        String hostName = getHostName();\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        absoluteUrl.append(hostName.toLowerCase());\n+\n+        int port = getPort();\n+        // If it's well known HTTPS port, skip adding port.\n+        if (port != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            absoluteUrl.append(\":\").append(port);\n+        }\n+\n+        String proxyContextPath = getProxyContext();\n+        appendContextToUri(absoluteUrl, proxyContextPath);\n+\n+        String webContextRoot = getWebContext();\n+        appendContextToUri(absoluteUrl, webContextRoot);\n+\n+        String urlContext = getUrlContext();\n+        appendContextToUri(absoluteUrl, urlContext);\n+\n+        Map<String, String> parameters = getParameters();\n+        appendParamsToUri(absoluteUrl, parameters);\n+\n+        if (absoluteUrl.toString().endsWith(\"/\")) {\n+            absoluteUrl.setLength(absoluteUrl.length() - 1);\n+        }\n+        return absoluteUrl.toString();\n+    }\n+\n+    /**\n+     * This method is called to get the relative url from the url context.\n+     *\n+     * @return The relative URL from the {@link ServiceURL} instance.\n+     */\n+    public String getRelativeUrl() {\n+\n+        StringBuilder relativeUrl = new StringBuilder();\n+        String urlContext = getUrlContext();\n+        appendContextToUri(relativeUrl, urlContext);\n+\n+        Map<String, String> parameters = getParameters();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMjU5MQ==", "bodyText": "Can't we do this within getHostName() method", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402812591", "createdAt": "2020-04-03T08:08:06Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServiceURL.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+\n+import java.util.Map;\n+\n+/**\n+ * Service URL representation.\n+ */\n+public class ServiceURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private Integer port;\n+    private String proxyContext;\n+    private String webContext;\n+    private String urlContext;\n+    private Map<String, String> parameters;\n+    private Map<String, String> fragments;\n+\n+    public ServiceURL(String protocol, String hostName, Integer port, String proxyContext, String webContext,\n+                      String urlContext, Map<String, String> parameters, Map<String, String> fragments) {\n+\n+        this.protocol = protocol;\n+        this.hostName = hostName;\n+        this.port = port;\n+        this.proxyContext = proxyContext;\n+        this.webContext = webContext;\n+        this.urlContext = urlContext;\n+        this.parameters = parameters;\n+        this.fragments = fragments;\n+    }\n+\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    public String getHostName() {\n+\n+        return hostName;\n+    }\n+\n+    public Integer getPort() {\n+\n+        return port;\n+    }\n+\n+    public String getProxyContext() {\n+\n+        return proxyContext;\n+    }\n+\n+    public String getWebContext() {\n+\n+        return webContext;\n+    }\n+\n+    public String getUrlContext() {\n+\n+        return urlContext;\n+    }\n+\n+    public Map<String, String> getParameters() {\n+\n+        return parameters;\n+    }\n+\n+    public Map<String, String> getFragments() {\n+\n+        return fragments;\n+    }\n+\n+    private void appendContextToUri(StringBuilder serverUrl, String contextPath) {\n+\n+        if (StringUtils.isNotBlank(contextPath)) {\n+            if (contextPath.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(contextPath.trim());\n+            } else {\n+                serverUrl.append(contextPath.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendParamsToUri(StringBuilder serverUrl, Map<String, String> parameters) {\n+\n+        if (MapUtils.isNotEmpty(parameters)) {\n+            for (Map.Entry<String, String> entry : parameters.entrySet()) {\n+                serverUrl.append(\"?\").append(entry.getKey()).append(\"=\").append(entry.getValue());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Concatenate the protocol, host name, port, proxy context path, web context root and url context to return the\n+     * absolute URL.\n+     *\n+     * @return The absolute URL from the {@link ServiceURL} instance.\n+     */\n+    public String getAbsoluteUrl() {\n+\n+        StringBuilder absoluteUrl = new StringBuilder();\n+        absoluteUrl.append(getProtocol()).append(\"://\");\n+\n+        String hostName = getHostName();\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDYwMDY0", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-387060064", "createdAt": "2020-04-03T08:34:27Z", "commit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozNDoyN1rOGALIQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozNDoyN1rOGALIQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzNTUyMw==", "bodyText": "We should not return the mutable map.\nMake map unmodifiable. Also add a method get the value from the parameter key and a method to get just parameter names", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402835523", "createdAt": "2020-04-03T08:34:27Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServiceURL.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+\n+import java.util.Map;\n+\n+/**\n+ * Service URL representation.\n+ */\n+public class ServiceURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private Integer port;\n+    private String proxyContext;\n+    private String webContext;\n+    private String urlContext;\n+    private Map<String, String> parameters;\n+    private Map<String, String> fragments;\n+\n+    public ServiceURL(String protocol, String hostName, Integer port, String proxyContext, String webContext,\n+                      String urlContext, Map<String, String> parameters, Map<String, String> fragments) {\n+\n+        this.protocol = protocol;\n+        this.hostName = hostName;\n+        this.port = port;\n+        this.proxyContext = proxyContext;\n+        this.webContext = webContext;\n+        this.urlContext = urlContext;\n+        this.parameters = parameters;\n+        this.fragments = fragments;\n+    }\n+\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    public String getHostName() {\n+\n+        return hostName;\n+    }\n+\n+    public Integer getPort() {\n+\n+        return port;\n+    }\n+\n+    public String getProxyContext() {\n+\n+        return proxyContext;\n+    }\n+\n+    public String getWebContext() {\n+\n+        return webContext;\n+    }\n+\n+    public String getUrlContext() {\n+\n+        return urlContext;\n+    }\n+\n+    public Map<String, String> getParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDYwMjU0", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-387060254", "createdAt": "2020-04-03T08:34:44Z", "commit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozNDo0NFrOGALJPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozNDo0NFrOGALJPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzNTc3NQ==", "bodyText": "Same above applies here", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402835775", "createdAt": "2020-04-03T08:34:44Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServiceURL.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+\n+import java.util.Map;\n+\n+/**\n+ * Service URL representation.\n+ */\n+public class ServiceURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private Integer port;\n+    private String proxyContext;\n+    private String webContext;\n+    private String urlContext;\n+    private Map<String, String> parameters;\n+    private Map<String, String> fragments;\n+\n+    public ServiceURL(String protocol, String hostName, Integer port, String proxyContext, String webContext,\n+                      String urlContext, Map<String, String> parameters, Map<String, String> fragments) {\n+\n+        this.protocol = protocol;\n+        this.hostName = hostName;\n+        this.port = port;\n+        this.proxyContext = proxyContext;\n+        this.webContext = webContext;\n+        this.urlContext = urlContext;\n+        this.parameters = parameters;\n+        this.fragments = fragments;\n+    }\n+\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    public String getHostName() {\n+\n+        return hostName;\n+    }\n+\n+    public Integer getPort() {\n+\n+        return port;\n+    }\n+\n+    public String getProxyContext() {\n+\n+        return proxyContext;\n+    }\n+\n+    public String getWebContext() {\n+\n+        return webContext;\n+    }\n+\n+    public String getUrlContext() {\n+\n+        return urlContext;\n+    }\n+\n+    public Map<String, String> getParameters() {\n+\n+        return parameters;\n+    }\n+\n+    public Map<String, String> getFragments() {\n+\n+        return fragments;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDYyMzUy", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-387062352", "createdAt": "2020-04-03T08:37:48Z", "commit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozNzo0OFrOGALTZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozNzo0OFrOGALTZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzODM3Mw==", "bodyText": "What if we build this at once with the constructor. Or build at first invocation.\nThere's no way these fields can change later as this class is immutable", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402838373", "createdAt": "2020-04-03T08:37:48Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServiceURL.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+\n+import java.util.Map;\n+\n+/**\n+ * Service URL representation.\n+ */\n+public class ServiceURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private Integer port;\n+    private String proxyContext;\n+    private String webContext;\n+    private String urlContext;\n+    private Map<String, String> parameters;\n+    private Map<String, String> fragments;\n+\n+    public ServiceURL(String protocol, String hostName, Integer port, String proxyContext, String webContext,\n+                      String urlContext, Map<String, String> parameters, Map<String, String> fragments) {\n+\n+        this.protocol = protocol;\n+        this.hostName = hostName;\n+        this.port = port;\n+        this.proxyContext = proxyContext;\n+        this.webContext = webContext;\n+        this.urlContext = urlContext;\n+        this.parameters = parameters;\n+        this.fragments = fragments;\n+    }\n+\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    public String getHostName() {\n+\n+        return hostName;\n+    }\n+\n+    public Integer getPort() {\n+\n+        return port;\n+    }\n+\n+    public String getProxyContext() {\n+\n+        return proxyContext;\n+    }\n+\n+    public String getWebContext() {\n+\n+        return webContext;\n+    }\n+\n+    public String getUrlContext() {\n+\n+        return urlContext;\n+    }\n+\n+    public Map<String, String> getParameters() {\n+\n+        return parameters;\n+    }\n+\n+    public Map<String, String> getFragments() {\n+\n+        return fragments;\n+    }\n+\n+    private void appendContextToUri(StringBuilder serverUrl, String contextPath) {\n+\n+        if (StringUtils.isNotBlank(contextPath)) {\n+            if (contextPath.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(contextPath.trim());\n+            } else {\n+                serverUrl.append(contextPath.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendParamsToUri(StringBuilder serverUrl, Map<String, String> parameters) {\n+\n+        if (MapUtils.isNotEmpty(parameters)) {\n+            for (Map.Entry<String, String> entry : parameters.entrySet()) {\n+                serverUrl.append(\"?\").append(entry.getKey()).append(\"=\").append(entry.getValue());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Concatenate the protocol, host name, port, proxy context path, web context root and url context to return the\n+     * absolute URL.\n+     *\n+     * @return The absolute URL from the {@link ServiceURL} instance.\n+     */\n+    public String getAbsoluteUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDYyNTQw", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-387062540", "createdAt": "2020-04-03T08:38:06Z", "commit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozODowNlrOGALUWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozODowNlrOGALUWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzODYxNw==", "bodyText": "Same above applies here", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402838617", "createdAt": "2020-04-03T08:38:06Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServiceURL.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+\n+import java.util.Map;\n+\n+/**\n+ * Service URL representation.\n+ */\n+public class ServiceURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private Integer port;\n+    private String proxyContext;\n+    private String webContext;\n+    private String urlContext;\n+    private Map<String, String> parameters;\n+    private Map<String, String> fragments;\n+\n+    public ServiceURL(String protocol, String hostName, Integer port, String proxyContext, String webContext,\n+                      String urlContext, Map<String, String> parameters, Map<String, String> fragments) {\n+\n+        this.protocol = protocol;\n+        this.hostName = hostName;\n+        this.port = port;\n+        this.proxyContext = proxyContext;\n+        this.webContext = webContext;\n+        this.urlContext = urlContext;\n+        this.parameters = parameters;\n+        this.fragments = fragments;\n+    }\n+\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    public String getHostName() {\n+\n+        return hostName;\n+    }\n+\n+    public Integer getPort() {\n+\n+        return port;\n+    }\n+\n+    public String getProxyContext() {\n+\n+        return proxyContext;\n+    }\n+\n+    public String getWebContext() {\n+\n+        return webContext;\n+    }\n+\n+    public String getUrlContext() {\n+\n+        return urlContext;\n+    }\n+\n+    public Map<String, String> getParameters() {\n+\n+        return parameters;\n+    }\n+\n+    public Map<String, String> getFragments() {\n+\n+        return fragments;\n+    }\n+\n+    private void appendContextToUri(StringBuilder serverUrl, String contextPath) {\n+\n+        if (StringUtils.isNotBlank(contextPath)) {\n+            if (contextPath.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(contextPath.trim());\n+            } else {\n+                serverUrl.append(contextPath.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendParamsToUri(StringBuilder serverUrl, Map<String, String> parameters) {\n+\n+        if (MapUtils.isNotEmpty(parameters)) {\n+            for (Map.Entry<String, String> entry : parameters.entrySet()) {\n+                serverUrl.append(\"?\").append(entry.getKey()).append(\"=\").append(entry.getValue());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Concatenate the protocol, host name, port, proxy context path, web context root and url context to return the\n+     * absolute URL.\n+     *\n+     * @return The absolute URL from the {@link ServiceURL} instance.\n+     */\n+    public String getAbsoluteUrl() {\n+\n+        StringBuilder absoluteUrl = new StringBuilder();\n+        absoluteUrl.append(getProtocol()).append(\"://\");\n+\n+        String hostName = getHostName();\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        absoluteUrl.append(hostName.toLowerCase());\n+\n+        int port = getPort();\n+        // If it's well known HTTPS port, skip adding port.\n+        if (port != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            absoluteUrl.append(\":\").append(port);\n+        }\n+\n+        String proxyContextPath = getProxyContext();\n+        appendContextToUri(absoluteUrl, proxyContextPath);\n+\n+        String webContextRoot = getWebContext();\n+        appendContextToUri(absoluteUrl, webContextRoot);\n+\n+        String urlContext = getUrlContext();\n+        appendContextToUri(absoluteUrl, urlContext);\n+\n+        Map<String, String> parameters = getParameters();\n+        appendParamsToUri(absoluteUrl, parameters);\n+\n+        if (absoluteUrl.toString().endsWith(\"/\")) {\n+            absoluteUrl.setLength(absoluteUrl.length() - 1);\n+        }\n+        return absoluteUrl.toString();\n+    }\n+\n+    /**\n+     * This method is called to get the relative url from the url context.\n+     *\n+     * @return The relative URL from the {@link ServiceURL} instance.\n+     */\n+    public String getRelativeUrl() {\n+\n+        StringBuilder relativeUrl = new StringBuilder();\n+        String urlContext = getUrlContext();\n+        appendContextToUri(relativeUrl, urlContext);\n+\n+        Map<String, String> parameters = getParameters();\n+        appendParamsToUri(relativeUrl, parameters);\n+\n+        if (relativeUrl.toString().endsWith(\"/\")) {\n+            relativeUrl.setLength(relativeUrl.length() - 1);\n+        }\n+        return relativeUrl.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "originalPosition": 172}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDYyOTEx", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-387062911", "createdAt": "2020-04-03T08:38:37Z", "commit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozODozOFrOGALWGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozODozOFrOGALWGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzOTA2Nw==", "bodyText": "Let's not have this as a public methos", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402839067", "createdAt": "2020-04-03T08:38:38Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityUtil.java", "diffHunk": "@@ -451,12 +453,34 @@ public static String getServerURL(String urlContext, boolean addProxyContextPath\n                                       boolean addTenantQueryParamInLegacyMode, boolean addTenantPathParamInLegacyMode)\n             throws IdentityRuntimeException {\n \n-        URLResolverService urlResolverService = IdentityCoreServiceComponent.getURLResolverService();\n+        return getAbsoluteURL(urlContext, addProxyContextPath, addWebContextRoot, addTenantQueryParamInLegacyMode,\n+                addTenantPathParamInLegacyMode);\n+    }\n+\n+    public static String getAbsoluteURL(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDYzMzUy", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-387063352", "createdAt": "2020-04-03T08:39:16Z", "commit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozOToxNlrOGALYWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozOToxNlrOGALYWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzOTY0MA==", "bodyText": "Can't we call, ServiceURLBuilder.create()", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r402839640", "createdAt": "2020-04-03T08:39:16Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityUtil.java", "diffHunk": "@@ -451,12 +453,34 @@ public static String getServerURL(String urlContext, boolean addProxyContextPath\n                                       boolean addTenantQueryParamInLegacyMode, boolean addTenantPathParamInLegacyMode)\n             throws IdentityRuntimeException {\n \n-        URLResolverService urlResolverService = IdentityCoreServiceComponent.getURLResolverService();\n+        return getAbsoluteURL(urlContext, addProxyContextPath, addWebContextRoot, addTenantQueryParamInLegacyMode,\n+                addTenantPathParamInLegacyMode);\n+    }\n+\n+    public static String getAbsoluteURL(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                        boolean addTenantQueryParamInLegacyMode, boolean addTenantPathParamInLegacyMode)\n+            throws IdentityRuntimeException {\n+\n+        ServiceURLBuilder serviceURLBuilder = IdentityCoreServiceComponent.getServiceURLBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2765d7e8d17c53e1a80172e10de4e908c447a5ac"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1834bc81fd264678b7fff2c283abffa5a01b74cf", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/1834bc81fd264678b7fff2c283abffa5a01b74cf", "committedDate": "2020-04-03T12:55:35Z", "message": "resolve minor issues"}, "afterCommit": {"oid": "9773e58cd4100ea68f1436752c597aeef2384da5", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/9773e58cd4100ea68f1436752c597aeef2384da5", "committedDate": "2020-04-03T13:08:28Z", "message": "resolve minor issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7772295f33edfb13ef89c4905788f3013ed474a", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/f7772295f33edfb13ef89c4905788f3013ed474a", "committedDate": "2020-04-04T05:31:05Z", "message": "add ServiceURL unit tests"}, "afterCommit": {"oid": "3bf1575f8799e3bcdc0c209565f6b85fa7724732", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/3bf1575f8799e3bcdc0c209565f6b85fa7724732", "committedDate": "2020-04-04T06:31:21Z", "message": "add ServiceURL unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODk0ODU4", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-387894858", "createdAt": "2020-04-06T01:53:37Z", "commit": {"oid": "7098e37034af793273bdd1c1483dc0c75aa2b570"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMTo1MzozOFrOGBFlhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMTo1MzozOFrOGBFlhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5MzI4Nw==", "bodyText": "Accept as varargs, so you don't need to tokenize", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r403793287", "createdAt": "2020-04-06T01:53:38Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.wso2.carbon.identity.core.internal.DefaultServiceURLBuilder;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+\n+/**\n+ * URL Builder service interface.\n+ */\n+public interface ServiceURLBuilder {\n+\n+    static ServiceURLBuilder create() {\n+\n+        return new DefaultServiceURLBuilder();\n+    }\n+\n+    /**\n+     * This method is called to add the URL path to the builder.\n+     *\n+     * @param paths Context paths. Can provide multiple context paths with a comma separated string.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addPath(String paths);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7098e37034af793273bdd1c1483dc0c75aa2b570"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODk1MjAx", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-387895201", "createdAt": "2020-04-06T01:55:19Z", "commit": {"oid": "7098e37034af793273bdd1c1483dc0c75aa2b570"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMTo1NToyMFrOGBFm2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMTo1NToyMFrOGBFm2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5MzYyNQ==", "bodyText": "I'm not exactly sure if we should have key value supported as well. An overloaded method may be.\n@mefarazath we are referring to key value pairs in oauth for fragments right", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r403793625", "createdAt": "2020-04-06T01:55:20Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.wso2.carbon.identity.core.internal.DefaultServiceURLBuilder;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+\n+/**\n+ * URL Builder service interface.\n+ */\n+public interface ServiceURLBuilder {\n+\n+    static ServiceURLBuilder create() {\n+\n+        return new DefaultServiceURLBuilder();\n+    }\n+\n+    /**\n+     * This method is called to add the URL path to the builder.\n+     *\n+     * @param paths Context paths. Can provide multiple context paths with a comma separated string.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addPath(String paths);\n+\n+    /**\n+     * This method is called when the URL needs to be appended with the tenant domain as a query parameter when\n+     * operating in legacy mode.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addTenantAsQueryParam();\n+\n+    /**\n+     * This method is called when the URL needs to be appended with the tenant domain as a path parameter when\n+     * operating in legacy mode.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addTenantAsPathParam();\n+\n+    /**\n+     * This method is called to add the proxy context path to the URL.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addProxyContext();\n+\n+    /**\n+     * This method is called to add the web context root to the URL.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addWebContext();\n+\n+    /**\n+     * This method is called when the URL needs to be appended with other parameters. Such parameters should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addParameter(String key, String value);\n+\n+    /**\n+     * This method is called when the URL needs to be appended with a fragment.\n+     *\n+     * @param fragment Fragment.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addFragment(String fragment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7098e37034af793273bdd1c1483dc0c75aa2b570"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDc1ODQ4", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-388475848", "createdAt": "2020-04-06T17:41:05Z", "commit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0MTowNVrOGBi1Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0MTowNVrOGBi1Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MjQ1MQ==", "bodyText": "We can add multiple params right\nWhat if we say 'addFragmentParams'", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r404272451", "createdAt": "2020-04-06T17:41:05Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.wso2.carbon.identity.core.internal.DefaultServiceURLBuilder;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+\n+/**\n+ * URL Builder service interface.\n+ */\n+public interface ServiceURLBuilder {\n+\n+    static ServiceURLBuilder create() {\n+\n+        return new DefaultServiceURLBuilder();\n+    }\n+\n+    /**\n+     * This method is called to add the URL path to the builder.\n+     *\n+     * @param paths Context paths. Can provide multiple context paths with a comma separated string.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addPath(String ... paths);\n+\n+    /**\n+     * This method is called when the URL needs to be appended with other parameters. Such parameters should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addParameter(String key, String value);\n+\n+    /**\n+     * This method is called when the URL needs to be appended with a fragment.\n+     *\n+     * @param fragment Fragment.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder setFragment(String fragment);\n+\n+    /**\n+     * This method is called when the URL fragment needs to be appended with parameters. Such parameters should be\n+     * entered as <k,v> pairs. These parameters will get appended with an \"&\".\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addFragmentAsParams(String key, String value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDc4MzAy", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-388478302", "createdAt": "2020-04-06T17:44:26Z", "commit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0NDoyNlrOGBi9SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0NDoyNlrOGBi9SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3NDUwNQ==", "bodyText": "Well the case is if somebody extends 'ServiceURLBuilder' still its create cannot be overloaded and the interface will return an implementation of DefaultURLServiceBuilder.\nWhat if we consume the factory in ServiceURLBuilder.create() ?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r404274505", "createdAt": "2020-04-06T17:44:26Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURLBuilderFactory.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+/**\n+ * Service URL Builder Factory representation.\n+ */\n+public class ServiceURLBuilderFactory {\n+\n+    /**\n+     * This method is called to create a {@link ServiceURLBuilder} instance.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    public ServiceURLBuilder getServiceURLBuilderInstance() {\n+\n+        return ServiceURLBuilder.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDgxMjkz", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-388481293", "createdAt": "2020-04-06T17:48:37Z", "commit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0ODozN1rOGBjHEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0ODozN1rOGBjHEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3NzAxMA==", "bodyText": "Why create a new hashmap here. It should be pre-initialized.\nThis avoids invoking this method multiple times and adding several parameters", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r404277010", "createdAt": "2020-04-06T17:48:37Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private String[] urlPaths;\n+    private Map<String, String> parameters;\n+    private String fragment;\n+    private Map<String, String> fragmentParams;\n+\n+    /**\n+     * This method is called to add the URL path to the builder.\n+     *\n+     * @param paths Context path. Can provide multiple context paths with a comma separated string.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addPath(String ... paths) {\n+\n+        this.urlPaths = paths;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with other parameters. Such parameters should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, String value) {\n+\n+        parameters = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDgxNzA4", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-388481708", "createdAt": "2020-04-06T17:49:09Z", "commit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0OTowOVrOGBjIgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0OTowOVrOGBjIgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3NzM3OA==", "bodyText": "Same above applies here", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r404277378", "createdAt": "2020-04-06T17:49:09Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private String[] urlPaths;\n+    private Map<String, String> parameters;\n+    private String fragment;\n+    private Map<String, String> fragmentParams;\n+\n+    /**\n+     * This method is called to add the URL path to the builder.\n+     *\n+     * @param paths Context path. Can provide multiple context paths with a comma separated string.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addPath(String ... paths) {\n+\n+        this.urlPaths = paths;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with other parameters. Such parameters should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, String value) {\n+\n+        parameters = new HashMap<>();\n+        parameters.put(key, value);\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with a fragment.\n+     *\n+     * @param fragment Fragment.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder setFragment(String fragment) {\n+\n+        this.fragment = fragment;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL fragment needs to be appended with parameters. Such parameters should be\n+     * entered as <k,v> pairs. These parameters will get appended with an \"&\".\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addFragmentAsParams(String key, String value) {\n+\n+        fragmentParams = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDg2OTk3", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-388486997", "createdAt": "2020-04-06T17:56:04Z", "commit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo1NjowNVrOGBjY-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo1NjowNVrOGBjY-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4MTU5Mg==", "bodyText": "Is this the best way you can remove '/' from end. I think you can use charAt", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r404281592", "createdAt": "2020-04-06T17:56:05Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private String[] urlPaths;\n+    private Map<String, String> parameters;\n+    private String fragment;\n+    private Map<String, String> fragmentParams;\n+\n+    /**\n+     * This method is called to add the URL path to the builder.\n+     *\n+     * @param paths Context path. Can provide multiple context paths with a comma separated string.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addPath(String ... paths) {\n+\n+        this.urlPaths = paths;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with other parameters. Such parameters should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, String value) {\n+\n+        parameters = new HashMap<>();\n+        parameters.put(key, value);\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with a fragment.\n+     *\n+     * @param fragment Fragment.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder setFragment(String fragment) {\n+\n+        this.fragment = fragment;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL fragment needs to be appended with parameters. Such parameters should be\n+     * entered as <k,v> pairs. These parameters will get appended with an \"&\".\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addFragmentAsParams(String key, String value) {\n+\n+        fragmentParams = new HashMap<>();\n+        fragmentParams.put(key, value);\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURL build() throws URLBuilderException {\n+\n+        String protocol = fetchProtocol();\n+        String hostName = fetchHostName();\n+        int port = fetchPort();\n+        String resolvedUrlContext = resolveUrlPath(urlPaths);\n+        String tenantDomain = resolveTenantDomain();\n+\n+        StringBuilder resolvedUrlStringBuilder = new StringBuilder();\n+        if (isTenantQualifiedUrlsEnabled()) {\n+            if (StringUtils.isNotBlank(tenantDomain)) {\n+                resolvedUrlStringBuilder.append(\"/t/\").append(tenantDomain);\n+            }\n+        }\n+\n+        if (StringUtils.isNotBlank(resolvedUrlContext)) {\n+            if (resolvedUrlContext.trim().charAt(0) != '/') {\n+                resolvedUrlStringBuilder.append(\"/\").append(resolvedUrlContext.trim());\n+            } else {\n+                resolvedUrlStringBuilder.append(resolvedUrlContext.trim());\n+            }\n+        }\n+        return new ServiceURL(protocol, hostName, port, resolvedUrlStringBuilder.toString(), parameters, fragment,\n+                fragmentParams);\n+    }\n+\n+    private String resolveTenantDomain() {\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }\n+        return tenantDomain;\n+    }\n+\n+    private String resolveUrlPath(String[] urlPaths) {\n+\n+        StringBuilder urlPathBuilder = new StringBuilder();\n+        if (ArrayUtils.isNotEmpty(urlPaths)) {\n+            for (String path : urlPaths) {\n+                urlPathBuilder.append(path).append(\"/\");\n+            }\n+            if (urlPathBuilder.toString().endsWith(\"/\")) {\n+                urlPathBuilder.setLength(urlPathBuilder.length() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "originalPosition": 153}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDg3NzE0", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-388487714", "createdAt": "2020-04-06T17:56:59Z", "commit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo1Njo1OVrOGBjbRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo1Njo1OVrOGBjbRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4MjE4Mg==", "bodyText": "Better to log unresolvable host in message so that it makes the message more context aware", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r404282182", "createdAt": "2020-04-06T17:56:59Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private String[] urlPaths;\n+    private Map<String, String> parameters;\n+    private String fragment;\n+    private Map<String, String> fragmentParams;\n+\n+    /**\n+     * This method is called to add the URL path to the builder.\n+     *\n+     * @param paths Context path. Can provide multiple context paths with a comma separated string.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addPath(String ... paths) {\n+\n+        this.urlPaths = paths;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with other parameters. Such parameters should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, String value) {\n+\n+        parameters = new HashMap<>();\n+        parameters.put(key, value);\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with a fragment.\n+     *\n+     * @param fragment Fragment.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder setFragment(String fragment) {\n+\n+        this.fragment = fragment;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL fragment needs to be appended with parameters. Such parameters should be\n+     * entered as <k,v> pairs. These parameters will get appended with an \"&\".\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addFragmentAsParams(String key, String value) {\n+\n+        fragmentParams = new HashMap<>();\n+        fragmentParams.put(key, value);\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURL build() throws URLBuilderException {\n+\n+        String protocol = fetchProtocol();\n+        String hostName = fetchHostName();\n+        int port = fetchPort();\n+        String resolvedUrlContext = resolveUrlPath(urlPaths);\n+        String tenantDomain = resolveTenantDomain();\n+\n+        StringBuilder resolvedUrlStringBuilder = new StringBuilder();\n+        if (isTenantQualifiedUrlsEnabled()) {\n+            if (StringUtils.isNotBlank(tenantDomain)) {\n+                resolvedUrlStringBuilder.append(\"/t/\").append(tenantDomain);\n+            }\n+        }\n+\n+        if (StringUtils.isNotBlank(resolvedUrlContext)) {\n+            if (resolvedUrlContext.trim().charAt(0) != '/') {\n+                resolvedUrlStringBuilder.append(\"/\").append(resolvedUrlContext.trim());\n+            } else {\n+                resolvedUrlStringBuilder.append(resolvedUrlContext.trim());\n+            }\n+        }\n+        return new ServiceURL(protocol, hostName, port, resolvedUrlStringBuilder.toString(), parameters, fragment,\n+                fragmentParams);\n+    }\n+\n+    private String resolveTenantDomain() {\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }\n+        return tenantDomain;\n+    }\n+\n+    private String resolveUrlPath(String[] urlPaths) {\n+\n+        StringBuilder urlPathBuilder = new StringBuilder();\n+        if (ArrayUtils.isNotEmpty(urlPaths)) {\n+            for (String path : urlPaths) {\n+                urlPathBuilder.append(path).append(\"/\");\n+            }\n+            if (urlPathBuilder.toString().endsWith(\"/\")) {\n+                urlPathBuilder.setLength(urlPathBuilder.length() - 1);\n+            }\n+        }\n+        return urlPathBuilder.toString();\n+    }\n+\n+    private String fetchProtocol() {\n+\n+        return CarbonUtils.getManagementTransport();\n+    }\n+\n+    private String fetchHostName() throws URLBuilderException {\n+\n+        String hostName = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.HOST_NAME);\n+        try {\n+            if (StringUtils.isBlank(hostName)) {\n+                hostName = NetworkUtils.getLocalHostname();\n+            }\n+        } catch (SocketException e) {\n+            throw new URLBuilderException(\"Error while trying to resolve the hostname from the system\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "originalPosition": 172}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDkxMDAw", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-388491000", "createdAt": "2020-04-06T18:01:20Z", "commit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODowMToyMVrOGBjl6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODowMToyMVrOGBjl6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4NDkwNA==", "bodyText": "Shall we rename as 'getServiceURLBuilder'", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r404284904", "createdAt": "2020-04-06T18:01:21Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURLBuilderFactory.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+/**\n+ * Service URL Builder Factory representation.\n+ */\n+public class ServiceURLBuilderFactory {\n+\n+    /**\n+     * This method is called to create a {@link ServiceURLBuilder} instance.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    public ServiceURLBuilder getServiceURLBuilderInstance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDkyMDQ0", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-388492044", "createdAt": "2020-04-06T18:02:51Z", "commit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODowMjo1MlrOGBjpOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODowMjo1MlrOGBjpOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4NTc1Mw==", "bodyText": "return an array", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r404285753", "createdAt": "2020-04-06T18:02:52Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServiceURL.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+/**\n+ * Service URL representation.\n+ */\n+public class ServiceURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private int port;\n+    private String urlPath;\n+    private Map<String, String> parameters;\n+    private String fragment;\n+    private Map<String, String> fragmentParams;\n+    private String absoluteUrl;\n+    private String relativeUrl;\n+\n+    public ServiceURL(String protocol, String hostName, int port, String urlPath, Map<String, String> parameters,\n+                      String fragment, Map<String, String> fragmentParams) throws URLBuilderException {\n+\n+        this.protocol = protocol;\n+        this.hostName = hostName;\n+        this.port = port;\n+        this.urlPath = urlPath;\n+        this.parameters = parameters;\n+        this.fragment = fragment;\n+        this.fragmentParams = fragmentParams;\n+        this.absoluteUrl = getAbsoluteUrl();\n+        this.relativeUrl = getRelativeUrl();\n+    }\n+\n+    /**\n+     * This method is called to get the protocol of {@link ServiceURL}.\n+     *\n+     * @return String of the protocol.\n+     */\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    /**\n+     * This method is called to get the host name of {@link ServiceURL}.\n+     *\n+     * @return String of the host name.\n+     */\n+    public String getHostName() {\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        return hostName;\n+    }\n+\n+    /**\n+     * This method is called to get the port of {@link ServiceURL}.\n+     *\n+     * @return value of the port.\n+     */\n+    public int getPort() {\n+\n+        return port;\n+    }\n+\n+    /**\n+     * This method is called to get the Url path of {@link ServiceURL}.\n+     *\n+     * @return String of the url path.\n+     */\n+    public String getUrlPath() {\n+\n+        return urlPath;\n+    }\n+\n+    /**\n+     * This method is called to get the parameter value when the key is provided.\n+     *\n+     * @param key Key of the parameter.\n+     * @return The value of the parameter.\n+     */\n+    public String getParameter(String key) {\n+\n+        return parameters.get(key);\n+    }\n+\n+    /**\n+     * This method is called to get a list of the parameter names.\n+     *\n+     * @return ArrayList of parameter keys.\n+     */\n+    public ArrayList<String> getParameterKeys() {\n+\n+        ArrayList<String> parameterArrayList = new ArrayList<>();\n+\n+        for (Map.Entry<String, String> entry : this.parameters.entrySet()) {\n+            parameterArrayList.add(entry.getKey());\n+        }\n+        return parameterArrayList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDkyOTAz", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-388492903", "createdAt": "2020-04-06T18:04:01Z", "commit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODowNDowMVrOGBjruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODowNDowMVrOGBjruw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4NjM5NQ==", "bodyText": "Why build a URI. Why not return from fragment variable", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r404286395", "createdAt": "2020-04-06T18:04:01Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServiceURL.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+/**\n+ * Service URL representation.\n+ */\n+public class ServiceURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private int port;\n+    private String urlPath;\n+    private Map<String, String> parameters;\n+    private String fragment;\n+    private Map<String, String> fragmentParams;\n+    private String absoluteUrl;\n+    private String relativeUrl;\n+\n+    public ServiceURL(String protocol, String hostName, int port, String urlPath, Map<String, String> parameters,\n+                      String fragment, Map<String, String> fragmentParams) throws URLBuilderException {\n+\n+        this.protocol = protocol;\n+        this.hostName = hostName;\n+        this.port = port;\n+        this.urlPath = urlPath;\n+        this.parameters = parameters;\n+        this.fragment = fragment;\n+        this.fragmentParams = fragmentParams;\n+        this.absoluteUrl = getAbsoluteUrl();\n+        this.relativeUrl = getRelativeUrl();\n+    }\n+\n+    /**\n+     * This method is called to get the protocol of {@link ServiceURL}.\n+     *\n+     * @return String of the protocol.\n+     */\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    /**\n+     * This method is called to get the host name of {@link ServiceURL}.\n+     *\n+     * @return String of the host name.\n+     */\n+    public String getHostName() {\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        return hostName;\n+    }\n+\n+    /**\n+     * This method is called to get the port of {@link ServiceURL}.\n+     *\n+     * @return value of the port.\n+     */\n+    public int getPort() {\n+\n+        return port;\n+    }\n+\n+    /**\n+     * This method is called to get the Url path of {@link ServiceURL}.\n+     *\n+     * @return String of the url path.\n+     */\n+    public String getUrlPath() {\n+\n+        return urlPath;\n+    }\n+\n+    /**\n+     * This method is called to get the parameter value when the key is provided.\n+     *\n+     * @param key Key of the parameter.\n+     * @return The value of the parameter.\n+     */\n+    public String getParameter(String key) {\n+\n+        return parameters.get(key);\n+    }\n+\n+    /**\n+     * This method is called to get a list of the parameter names.\n+     *\n+     * @return ArrayList of parameter keys.\n+     */\n+    public ArrayList<String> getParameterKeys() {\n+\n+        ArrayList<String> parameterArrayList = new ArrayList<>();\n+\n+        for (Map.Entry<String, String> entry : this.parameters.entrySet()) {\n+            parameterArrayList.add(entry.getKey());\n+        }\n+        return parameterArrayList;\n+    }\n+\n+    /**\n+     * This method is called to get the decoded fragment from the url.\n+     *\n+     * @return The decoded fragment.\n+     * @throws URLBuilderException\n+     */\n+    public String getFragment() throws URLBuilderException {\n+\n+        URI uri;\n+        try {\n+            uri = new URI(this.getAbsoluteUrl());\n+        } catch (URISyntaxException e) {\n+            throw new URLBuilderException(\"Error while trying to build the url\", e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODk5MDE0", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-388899014", "createdAt": "2020-04-07T08:32:50Z", "commit": {"oid": "7d90cbe5e7b303b6ef5affa22aee974ed1aac8e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozMjo1MFrOGB40PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozMjo1MFrOGB40PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMjYzNw==", "bodyText": "remove unnecessary line.\nAlso, hope we checked that factory gets resolved from OSGi service level", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r404632637", "createdAt": "2020-04-07T08:32:50Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.wso2.carbon.identity.core.internal.DefaultServiceURLBuilder;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+\n+/**\n+ * URL Builder service interface.\n+ */\n+public interface ServiceURLBuilder {\n+\n+    static ServiceURLBuilder create() {\n+\n+        if (IdentityCoreServiceComponent.getServiceURLBuilderFactory() != null) {\n+            return IdentityCoreServiceComponent.getServiceURLBuilderFactory().getServiceURLBuilder();\n+        } else {\n+            return new DefaultServiceURLBuilder();\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d90cbe5e7b303b6ef5affa22aee974ed1aac8e4"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4OTAwNzY4", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-388900768", "createdAt": "2020-04-07T08:35:04Z", "commit": {"oid": "7d90cbe5e7b303b6ef5affa22aee974ed1aac8e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozNTowNFrOGB45yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozNTowNFrOGB45yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzNDA1OA==", "bodyText": "As this a factory wouldn't it be better if we say createServiceURLBuilder, else it does not denote at once that a new builder will be created", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r404634058", "createdAt": "2020-04-07T08:35:04Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURLBuilderFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.wso2.carbon.identity.core.internal.DefaultServiceURLBuilder;\n+\n+/**\n+ * Service URL Builder Factory representation.\n+ */\n+public class ServiceURLBuilderFactory {\n+\n+    /**\n+     * This method is called to create a {@link ServiceURLBuilder} instance.\n+     *\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    public ServiceURLBuilder getServiceURLBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d90cbe5e7b303b6ef5affa22aee974ed1aac8e4"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d90cbe5e7b303b6ef5affa22aee974ed1aac8e4", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/7d90cbe5e7b303b6ef5affa22aee974ed1aac8e4", "committedDate": "2020-04-07T08:05:53Z", "message": "add test cases"}, "afterCommit": {"oid": "4d5669512d85c459c670d72dfe0692fa7dddeeda", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/4d5669512d85c459c670d72dfe0692fa7dddeeda", "committedDate": "2020-04-07T08:35:43Z", "message": "add test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4OTAxODcy", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-388901872", "createdAt": "2020-04-07T08:36:28Z", "commit": {"oid": "7d90cbe5e7b303b6ef5affa22aee974ed1aac8e4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozNzowMlrOGB4-ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToxMDo0NVrOGCSNgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzNTI0Mg==", "bodyText": "move primitive types for top for readability", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r404635242", "createdAt": "2020-04-07T08:37:02Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private String[] urlPaths;\n+    private Map<String, String> parameters = new HashMap<>();\n+    private String fragment;\n+    private Map<String, String> fragmentParams = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5669512d85c459c670d72dfe0692fa7dddeeda"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzNjIyMA==", "bodyText": "This is not a resolving method. This a building URI/URL context", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r404636220", "createdAt": "2020-04-07T08:38:33Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private String[] urlPaths;\n+    private Map<String, String> parameters;\n+    private String fragment;\n+    private Map<String, String> fragmentParams;\n+\n+    /**\n+     * This method is called to add the URL path to the builder.\n+     *\n+     * @param paths Context path. Can provide multiple context paths with a comma separated string.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addPath(String ... paths) {\n+\n+        this.urlPaths = paths;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with other parameters. Such parameters should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, String value) {\n+\n+        parameters = new HashMap<>();\n+        parameters.put(key, value);\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with a fragment.\n+     *\n+     * @param fragment Fragment.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder setFragment(String fragment) {\n+\n+        this.fragment = fragment;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL fragment needs to be appended with parameters. Such parameters should be\n+     * entered as <k,v> pairs. These parameters will get appended with an \"&\".\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addFragmentAsParams(String key, String value) {\n+\n+        fragmentParams = new HashMap<>();\n+        fragmentParams.put(key, value);\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURL build() throws URLBuilderException {\n+\n+        String protocol = fetchProtocol();\n+        String hostName = fetchHostName();\n+        int port = fetchPort();\n+        String resolvedUrlContext = resolveUrlPath(urlPaths);\n+        String tenantDomain = resolveTenantDomain();\n+\n+        StringBuilder resolvedUrlStringBuilder = new StringBuilder();\n+        if (isTenantQualifiedUrlsEnabled()) {\n+            if (StringUtils.isNotBlank(tenantDomain)) {\n+                resolvedUrlStringBuilder.append(\"/t/\").append(tenantDomain);\n+            }\n+        }\n+\n+        if (StringUtils.isNotBlank(resolvedUrlContext)) {\n+            if (resolvedUrlContext.trim().charAt(0) != '/') {\n+                resolvedUrlStringBuilder.append(\"/\").append(resolvedUrlContext.trim());\n+            } else {\n+                resolvedUrlStringBuilder.append(resolvedUrlContext.trim());\n+            }\n+        }\n+        return new ServiceURL(protocol, hostName, port, resolvedUrlStringBuilder.toString(), parameters, fragment,\n+                fragmentParams);\n+    }\n+\n+    private String resolveTenantDomain() {\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }\n+        return tenantDomain;\n+    }\n+\n+    private String resolveUrlPath(String[] urlPaths) {\n+\n+        StringBuilder urlPathBuilder = new StringBuilder();\n+        if (ArrayUtils.isNotEmpty(urlPaths)) {\n+            for (String path : urlPaths) {\n+                urlPathBuilder.append(path).append(\"/\");\n+            }\n+            if (urlPathBuilder.toString().endsWith(\"/\")) {\n+                urlPathBuilder.setLength(urlPathBuilder.length() - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4MTU5Mg=="}, "originalCommit": {"oid": "a3d88d07a1d119aa10fd37fb0e240881de7e951a"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTczMA==", "bodyText": "I don't think this API should accept both fragment and fragment parameters.\nJust keep the fragment here.\nBuild the fragment from builder class", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r404641730", "createdAt": "2020-04-07T08:47:16Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServiceURL.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+/**\n+ * Service URL representation.\n+ */\n+public class ServiceURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private int port;\n+    private String urlPath;\n+    private Map<String, String> parameters;\n+    private String fragment;\n+    private Map<String, String> fragmentParams;\n+    private String resolvedFragmentString;\n+    private String resolvedParamsString;\n+    private String absoluteUrl;\n+    private String relativeUrl;\n+\n+    public ServiceURL(String protocol, String hostName, int port, String urlPath, Map<String, String> parameters,\n+                      String fragment, Map<String, String> fragmentParams) throws URLBuilderException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5669512d85c459c670d72dfe0692fa7dddeeda"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0Nzk5MQ==", "bodyText": "In each of these methods we should check if the URL is built as expected. Null check is not enough", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405047991", "createdAt": "2020-04-07T19:09:29Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/test/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilderTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.mockito.Mock;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.testng.IObjectFactory;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.ObjectFactory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.base.IdentityConstants;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.URLResolverService;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.ConfigurationContextService;\n+import org.wso2.carbon.utils.NetworkUtils;\n+\n+import java.net.SocketException;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.mockStatic;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+import static org.testng.Assert.assertNotNull;\n+\n+@PrepareForTest({ServerConfiguration.class, CarbonUtils.class, IdentityCoreServiceComponent.class, NetworkUtils.class,\n+        IdentityTenantUtil.class, URLResolverService.class, PrivilegedCarbonContext.class})\n+@PowerMockIgnore({\"javax.net.*\", \"javax.security.*\", \"javax.crypto.*\", \"javax.xml.*\", \"org.xml.sax.*\", \"org.w3c.dom\" +\n+        \".*\", \"org.apache.xerces.*\"})\n+public class DefaultServiceURLBuilderTest {\n+\n+    @Mock\n+    private ServerConfiguration mockServerConfiguration;\n+    @Mock\n+    private ConfigurationContextService mockConfigurationContextService;\n+    @Mock\n+    private ConfigurationContext mockConfigurationContext;\n+    @Mock\n+    private AxisConfiguration mockAxisConfiguration;\n+\n+    @BeforeMethod\n+    public void setUp() throws Exception {\n+\n+        mockStatic(CarbonUtils.class);\n+        mockStatic(ServerConfiguration.class);\n+        mockStatic(NetworkUtils.class);\n+        mockStatic(IdentityCoreServiceComponent.class);\n+        mockStatic(IdentityTenantUtil.class);\n+        mockStatic(PrivilegedCarbonContext.class);\n+        PrivilegedCarbonContext privilegedCarbonContext = mock(PrivilegedCarbonContext.class);\n+\n+        when(PrivilegedCarbonContext.getThreadLocalCarbonContext()).thenReturn(privilegedCarbonContext);\n+        when(ServerConfiguration.getInstance()).thenReturn(mockServerConfiguration);\n+        when(IdentityCoreServiceComponent.getConfigurationContextService()).thenReturn(mockConfigurationContextService);\n+        when(mockConfigurationContextService.getServerConfigContext()).thenReturn(mockConfigurationContext);\n+        when(mockConfigurationContext.getAxisConfiguration()).thenReturn(mockAxisConfiguration);\n+        try {\n+            when(NetworkUtils.getLocalHostname()).thenReturn(\"localhost\");\n+        } catch (SocketException e) {\n+            // Mock behaviour, hence ignored\n+        }\n+\n+        System.setProperty(IdentityConstants.CarbonPlaceholders.CARBON_PORT_HTTP_PROPERTY, \"9763\");\n+        System.setProperty(IdentityConstants.CarbonPlaceholders.CARBON_PORT_HTTPS_PROPERTY, \"9443\");\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws Exception {\n+\n+        System.clearProperty(IdentityConstants.CarbonPlaceholders.CARBON_PORT_HTTP_PROPERTY);\n+        System.clearProperty(IdentityConstants.CarbonPlaceholders.CARBON_PORT_HTTPS_PROPERTY);\n+    }\n+\n+    @Test\n+    public void testAddPath() {\n+\n+        String testPath = \"/testPath\";\n+        ServiceURL serviceURL = null;\n+        try {\n+            serviceURL = ServiceURLBuilder.create().addPath(testPath).build();\n+        } catch (URLBuilderException e) {\n+            // Mock behaviour, hence ignored\n+        }\n+\n+        assertNotNull(serviceURL.getUrlPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5669512d85c459c670d72dfe0692fa7dddeeda"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0ODcwNg==", "bodyText": "basically verify for absolute url, relative url and the respective component like fragment, parameter etc.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405048706", "createdAt": "2020-04-07T19:10:45Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/test/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilderTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.mockito.Mock;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.testng.IObjectFactory;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.ObjectFactory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.base.IdentityConstants;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.URLResolverService;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.ConfigurationContextService;\n+import org.wso2.carbon.utils.NetworkUtils;\n+\n+import java.net.SocketException;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.mockStatic;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+import static org.testng.Assert.assertNotNull;\n+\n+@PrepareForTest({ServerConfiguration.class, CarbonUtils.class, IdentityCoreServiceComponent.class, NetworkUtils.class,\n+        IdentityTenantUtil.class, URLResolverService.class, PrivilegedCarbonContext.class})\n+@PowerMockIgnore({\"javax.net.*\", \"javax.security.*\", \"javax.crypto.*\", \"javax.xml.*\", \"org.xml.sax.*\", \"org.w3c.dom\" +\n+        \".*\", \"org.apache.xerces.*\"})\n+public class DefaultServiceURLBuilderTest {\n+\n+    @Mock\n+    private ServerConfiguration mockServerConfiguration;\n+    @Mock\n+    private ConfigurationContextService mockConfigurationContextService;\n+    @Mock\n+    private ConfigurationContext mockConfigurationContext;\n+    @Mock\n+    private AxisConfiguration mockAxisConfiguration;\n+\n+    @BeforeMethod\n+    public void setUp() throws Exception {\n+\n+        mockStatic(CarbonUtils.class);\n+        mockStatic(ServerConfiguration.class);\n+        mockStatic(NetworkUtils.class);\n+        mockStatic(IdentityCoreServiceComponent.class);\n+        mockStatic(IdentityTenantUtil.class);\n+        mockStatic(PrivilegedCarbonContext.class);\n+        PrivilegedCarbonContext privilegedCarbonContext = mock(PrivilegedCarbonContext.class);\n+\n+        when(PrivilegedCarbonContext.getThreadLocalCarbonContext()).thenReturn(privilegedCarbonContext);\n+        when(ServerConfiguration.getInstance()).thenReturn(mockServerConfiguration);\n+        when(IdentityCoreServiceComponent.getConfigurationContextService()).thenReturn(mockConfigurationContextService);\n+        when(mockConfigurationContextService.getServerConfigContext()).thenReturn(mockConfigurationContext);\n+        when(mockConfigurationContext.getAxisConfiguration()).thenReturn(mockAxisConfiguration);\n+        try {\n+            when(NetworkUtils.getLocalHostname()).thenReturn(\"localhost\");\n+        } catch (SocketException e) {\n+            // Mock behaviour, hence ignored\n+        }\n+\n+        System.setProperty(IdentityConstants.CarbonPlaceholders.CARBON_PORT_HTTP_PROPERTY, \"9763\");\n+        System.setProperty(IdentityConstants.CarbonPlaceholders.CARBON_PORT_HTTPS_PROPERTY, \"9443\");\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws Exception {\n+\n+        System.clearProperty(IdentityConstants.CarbonPlaceholders.CARBON_PORT_HTTP_PROPERTY);\n+        System.clearProperty(IdentityConstants.CarbonPlaceholders.CARBON_PORT_HTTPS_PROPERTY);\n+    }\n+\n+    @Test\n+    public void testAddPath() {\n+\n+        String testPath = \"/testPath\";\n+        ServiceURL serviceURL = null;\n+        try {\n+            serviceURL = ServiceURLBuilder.create().addPath(testPath).build();\n+        } catch (URLBuilderException e) {\n+            // Mock behaviour, hence ignored\n+        }\n+\n+        assertNotNull(serviceURL.getUrlPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0Nzk5MQ=="}, "originalCommit": {"oid": "4d5669512d85c459c670d72dfe0692fa7dddeeda"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9537e11526020c2f109a77f1ecf4c2c8d2977e3", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/c9537e11526020c2f109a77f1ecf4c2c8d2977e3", "committedDate": "2020-04-08T03:59:28Z", "message": "implement serverURL model\n\nimplement the API to build URL from context/s\n\nadd the legacy getServerURL method\n\nre-structure the API to support only the tenant-qualified mode\n\nregister ServiceURLBuilderFactory as an OSGi service\n\nadd test cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57e56f36d078986c5c30d552673a9fb2741ea84e", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/57e56f36d078986c5c30d552673a9fb2741ea84e", "committedDate": "2020-04-08T02:58:07Z", "message": "fix test cases"}, "afterCommit": {"oid": "c9537e11526020c2f109a77f1ecf4c2c8d2977e3", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/c9537e11526020c2f109a77f1ecf4c2c8d2977e3", "committedDate": "2020-04-08T03:59:28Z", "message": "implement serverURL model\n\nimplement the API to build URL from context/s\n\nadd the legacy getServerURL method\n\nre-structure the API to support only the tenant-qualified mode\n\nregister ServiceURLBuilderFactory as an OSGi service\n\nadd test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NzczMTAw", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-389773100", "createdAt": "2020-04-08T08:48:26Z", "commit": {"oid": "c9537e11526020c2f109a77f1ecf4c2c8d2977e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo0ODoyNlrOGClPDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo0ODoyNlrOGClPDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2MDM5OQ==", "bodyText": "Should this check be here ?\nIdeally it hostname here should not set with '/'. It should be validated at the URL builder level", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405360399", "createdAt": "2020-04-08T08:48:26Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServiceURL.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+/**\n+ * Service URL representation.\n+ */\n+public class ServiceURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private int port;\n+    private String urlPath;\n+    private Map<String, String> parameters;\n+    private String fragment;\n+    private String resolvedParamsString;\n+    private String absoluteUrl;\n+    private String relativeUrl;\n+\n+    public ServiceURL(String protocol, String hostName, int port, String urlPath, Map<String, String> parameters,\n+                      String fragment) throws URLBuilderException {\n+\n+        this.protocol = protocol;\n+        this.hostName = hostName;\n+        this.port = port;\n+        this.urlPath = urlPath;\n+        this.parameters = parameters;\n+        this.fragment = fragment;\n+        setParamsString();\n+        this.absoluteUrl = getAbsoluteUrl();\n+        this.relativeUrl = getRelativeUrl();\n+    }\n+\n+    /**\n+     * This method is called to get the protocol of {@link ServiceURL}.\n+     *\n+     * @return String of the protocol.\n+     */\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    /**\n+     * This method is called to get the host name of {@link ServiceURL}.\n+     *\n+     * @return String of the host name.\n+     */\n+    public String getHostName() {\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9537e11526020c2f109a77f1ecf4c2c8d2977e3"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5Nzc5ODMy", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-389779832", "createdAt": "2020-04-08T08:57:05Z", "commit": {"oid": "c9537e11526020c2f109a77f1ecf4c2c8d2977e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo1NzowNlrOGClk8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo1NzowNlrOGClk8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2NjAwMQ==", "bodyText": "Having this public will be a problem. Looks like no option here though unless we move packages", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405366001", "createdAt": "2020-04-08T08:57:06Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServiceURL.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+/**\n+ * Service URL representation.\n+ */\n+public class ServiceURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private int port;\n+    private String urlPath;\n+    private Map<String, String> parameters;\n+    private String fragment;\n+    private String resolvedParamsString;\n+    private String absoluteUrl;\n+    private String relativeUrl;\n+\n+    public ServiceURL(String protocol, String hostName, int port, String urlPath, Map<String, String> parameters,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9537e11526020c2f109a77f1ecf4c2c8d2977e3"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NzgwOTU5", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-389780959", "createdAt": "2020-04-08T08:58:31Z", "commit": {"oid": "c9537e11526020c2f109a77f1ecf4c2c8d2977e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo1ODozMVrOGClolQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo1ODozMVrOGClolQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2NjkzMw==", "bodyText": "Add more context info here", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405366933", "createdAt": "2020-04-08T08:58:31Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/model/ServiceURL.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.model;\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+/**\n+ * Service URL representation.\n+ */\n+public class ServiceURL {\n+\n+    private String protocol;\n+    private String hostName;\n+    private int port;\n+    private String urlPath;\n+    private Map<String, String> parameters;\n+    private String fragment;\n+    private String resolvedParamsString;\n+    private String absoluteUrl;\n+    private String relativeUrl;\n+\n+    public ServiceURL(String protocol, String hostName, int port, String urlPath, Map<String, String> parameters,\n+                      String fragment) throws URLBuilderException {\n+\n+        this.protocol = protocol;\n+        this.hostName = hostName;\n+        this.port = port;\n+        this.urlPath = urlPath;\n+        this.parameters = parameters;\n+        this.fragment = fragment;\n+        setParamsString();\n+        this.absoluteUrl = getAbsoluteUrl();\n+        this.relativeUrl = getRelativeUrl();\n+    }\n+\n+    /**\n+     * This method is called to get the protocol of {@link ServiceURL}.\n+     *\n+     * @return String of the protocol.\n+     */\n+    public String getProtocol() {\n+\n+        return protocol;\n+    }\n+\n+    /**\n+     * This method is called to get the host name of {@link ServiceURL}.\n+     *\n+     * @return String of the host name.\n+     */\n+    public String getHostName() {\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        return hostName;\n+    }\n+\n+    /**\n+     * This method is called to get the port of {@link ServiceURL}.\n+     *\n+     * @return value of the port.\n+     */\n+    public int getPort() {\n+\n+        return port;\n+    }\n+\n+    /**\n+     * This method is called to get the Url path of {@link ServiceURL}.\n+     *\n+     * @return String of the url path.\n+     */\n+    public String getUrlPath() {\n+\n+        return urlPath;\n+    }\n+\n+    /**\n+     * This method is called to get the parameter value when the key is provided.\n+     *\n+     * @param key Key of the parameter.\n+     * @return The value of the parameter.\n+     */\n+    public String getParameter(String key) {\n+\n+        return parameters.get(key);\n+    }\n+\n+    /**\n+     * This method is called to get a list of the parameter names.\n+     *\n+     * @return ArrayList of parameter keys.\n+     */\n+    public String[] getParameterKeys() {\n+\n+        ArrayList<String> parameterArrayList = new ArrayList<>();\n+\n+        for (Map.Entry<String, String> entry : this.parameters.entrySet()) {\n+            parameterArrayList.add(entry.getKey());\n+        }\n+        return parameterArrayList.toArray(new String[0]);\n+    }\n+\n+    /**\n+     * This method is called to get the decoded fragment from the url.\n+     *\n+     * @return The decoded fragment.\n+     * @throws URLBuilderException\n+     */\n+    public String getFragment() {\n+\n+        return fragment;\n+    }\n+\n+    /**\n+     * Concatenate the protocol, host name, port, proxy context path, web context root and url context to return the\n+     * absolute URL.\n+     *\n+     * @return The absolute URL from the {@link ServiceURL} instance.\n+     */\n+    public String getAbsoluteURL() {\n+\n+        return this.absoluteUrl;\n+    }\n+\n+    /**\n+     * This method is called to get the relative url from the url context.\n+     *\n+     * @return The relative URL from the {@link ServiceURL} instance.\n+     */\n+    public String getRelativeURL() {\n+\n+        return this.relativeUrl;\n+    }\n+\n+    private void appendContextToUri(StringBuilder serverUrl, String contextPath) {\n+\n+        if (StringUtils.isNotBlank(contextPath)) {\n+            if (contextPath.endsWith(\"/\")) {\n+                contextPath = contextPath.substring(0, contextPath.length() - 1);\n+            }\n+            if (StringUtils.isNotBlank(contextPath) && contextPath.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(contextPath.trim());\n+            } else {\n+                serverUrl.append(contextPath.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendParamsToUri(StringBuilder serverUrl, String resolvedParamsString, String delimiter)\n+            throws URLBuilderException {\n+\n+        if (serverUrl.length() > 0 && serverUrl.charAt(serverUrl.length() - 1) == '/') {\n+            serverUrl.setLength(serverUrl.length() - 1);\n+        }\n+        if (StringUtils.isNotBlank(resolvedParamsString)) {\n+            try {\n+                serverUrl.append(delimiter).append(URLEncoder.encode(resolvedParamsString,\n+                        StandardCharsets.UTF_8.name()));\n+            } catch (UnsupportedEncodingException e) {\n+                throw new URLBuilderException(\"Error while trying to build the url\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9537e11526020c2f109a77f1ecf4c2c8d2977e3"}, "originalPosition": 188}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5Nzk1OTA0", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-389795904", "createdAt": "2020-04-08T09:17:34Z", "commit": {"oid": "c9537e11526020c2f109a77f1ecf4c2c8d2977e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOToxNzozNFrOGCmZkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOToxNzozNFrOGCmZkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3OTQ3NQ==", "bodyText": "Can there be a situation where we will have both the fragment string and fragment params?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405379475", "createdAt": "2020-04-08T09:17:34Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.model.ServiceURL;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+\n+import java.net.SocketException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantQualifiedUrlsEnabled;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for {@link ServiceURL} instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private String[] urlPaths;\n+    private String fragment;\n+    private Map<String, String> parameters = new HashMap<>();\n+    private Map<String, String> fragmentParams = new HashMap<>();\n+\n+    /**\n+     * This method is called to add the URL path to the builder.\n+     *\n+     * @param paths Context path. Can provide multiple context paths with a comma separated string.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addPath(String ... paths) {\n+\n+        this.urlPaths = paths;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with other parameters. Such parameters should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, String value) {\n+\n+        parameters.put(key, value);\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with a fragment.\n+     *\n+     * @param fragment Fragment.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder setFragment(String fragment) {\n+\n+        this.fragment = fragment;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL fragment needs to be appended with parameters. Such parameters should be\n+     * entered as <k,v> pairs. These parameters will get appended with an \"&\".\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addFragmentParameter(String key, String value) {\n+\n+        fragmentParams.put(key, value);\n+        return this;\n+    }\n+\n+    @Override\n+    public ServiceURL build() throws URLBuilderException {\n+\n+        String protocol = fetchProtocol();\n+        String hostName = fetchHostName();\n+        int port = fetchPort();\n+        String resolvedUrlContext = buildUrlPath(urlPaths);\n+        String resolvedFragment = buildFragment(fragment, fragmentParams);\n+        String tenantDomain = resolveTenantDomain();\n+\n+        StringBuilder resolvedUrlStringBuilder = new StringBuilder();\n+        if (isTenantQualifiedUrlsEnabled()) {\n+            if (StringUtils.isNotBlank(tenantDomain)) {\n+                resolvedUrlStringBuilder.append(\"/t/\").append(tenantDomain);\n+            }\n+        }\n+\n+        if (StringUtils.isNotBlank(resolvedUrlContext)) {\n+            if (resolvedUrlContext.trim().charAt(0) != '/') {\n+                resolvedUrlStringBuilder.append(\"/\").append(resolvedUrlContext.trim());\n+            } else {\n+                resolvedUrlStringBuilder.append(resolvedUrlContext.trim());\n+            }\n+        }\n+\n+        return new ServiceURL(protocol, hostName, port, resolvedUrlStringBuilder.toString(), parameters,\n+                resolvedFragment);\n+    }\n+\n+    private String resolveTenantDomain() {\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }\n+        return tenantDomain;\n+    }\n+\n+    private String buildFragment(String fragment, Map<String, String> fragmentParams) {\n+\n+        if (StringUtils.isNotBlank(fragment)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9537e11526020c2f109a77f1ecf4c2c8d2977e3"}, "originalPosition": 149}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f20a0f7394b0e58582cb69fc9bb892bc32d28a3", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/6f20a0f7394b0e58582cb69fc9bb892bc32d28a3", "committedDate": "2020-04-08T10:08:27Z", "message": "resolve minor issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5ODU1MTA2", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-389855106", "createdAt": "2020-04-08T10:39:32Z", "commit": {"oid": "6f20a0f7394b0e58582cb69fc9bb892bc32d28a3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48da867a3d8c32bfd82d795476da71929430c82d", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/48da867a3d8c32bfd82d795476da71929430c82d", "committedDate": "2020-04-08T13:20:46Z", "message": "Change Service URL to an interface and move its impl to the DefaultServiceURLBuilder"}, "afterCommit": {"oid": "e73fa47dbbd6344d346a51c1855078d343ae7f5d", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/e73fa47dbbd6344d346a51c1855078d343ae7f5d", "committedDate": "2020-04-08T13:24:16Z", "message": "Change Service URL to an interface and move its impl to the DefaultServiceURLBuilder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTY5Mzk2", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-389969396", "createdAt": "2020-04-08T13:23:55Z", "commit": {"oid": "48da867a3d8c32bfd82d795476da71929430c82d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzoyMzo1NVrOGCvDgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzoyNjoxM1rOGCvJ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyMTI4MA==", "bodyText": "Can we make this a list or a set?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405521280", "createdAt": "2020-04-08T13:23:55Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURL.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+/**\n+ * Service URL interface.\n+ */\n+public interface ServiceURL {\n+\n+    /**\n+     * This method is called to get the protocol of Service URL.\n+     *\n+     * @return String of the protocol.\n+     */\n+    String getProtocol();\n+\n+    /**\n+     * This method is called to get the host name of Service URL.\n+     *\n+     * @return String of the host name.\n+     */\n+    String getHostName();\n+\n+    /**\n+     * This method is called to get the port of Service URL.\n+     *\n+     * @return value of the port.\n+     */\n+    int getPort();\n+\n+    /**\n+     * This method is called to get the Url path of Service URL.\n+     *\n+     * @return String of the url path.\n+     */\n+    String getUrlPath();\n+\n+    /**\n+     * This method is called to get the parameter value when the key is provided.\n+     *\n+     * @param key Key of the parameter.\n+     * @return The value of the parameter.\n+     */\n+    String getParameter(String key);\n+\n+    /**\n+     * This method is called to get a list of the parameter names.\n+     *\n+     * @return ArrayList of parameter keys.\n+     */\n+    String[] getParameterKeys();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48da867a3d8c32bfd82d795476da71929430c82d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyMTg2Mg==", "bodyText": "Also would be useful to return all parameters as a map.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405521862", "createdAt": "2020-04-08T13:24:42Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURL.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+/**\n+ * Service URL interface.\n+ */\n+public interface ServiceURL {\n+\n+    /**\n+     * This method is called to get the protocol of Service URL.\n+     *\n+     * @return String of the protocol.\n+     */\n+    String getProtocol();\n+\n+    /**\n+     * This method is called to get the host name of Service URL.\n+     *\n+     * @return String of the host name.\n+     */\n+    String getHostName();\n+\n+    /**\n+     * This method is called to get the port of Service URL.\n+     *\n+     * @return value of the port.\n+     */\n+    int getPort();\n+\n+    /**\n+     * This method is called to get the Url path of Service URL.\n+     *\n+     * @return String of the url path.\n+     */\n+    String getUrlPath();\n+\n+    /**\n+     * This method is called to get the parameter value when the key is provided.\n+     *\n+     * @param key Key of the parameter.\n+     * @return The value of the parameter.\n+     */\n+    String getParameter(String key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48da867a3d8c32bfd82d795476da71929430c82d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyMjE5OQ==", "bodyText": "Looks like too many new lines at the end", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405522199", "createdAt": "2020-04-08T13:25:07Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURL.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+/**\n+ * Service URL interface.\n+ */\n+public interface ServiceURL {\n+\n+    /**\n+     * This method is called to get the protocol of Service URL.\n+     *\n+     * @return String of the protocol.\n+     */\n+    String getProtocol();\n+\n+    /**\n+     * This method is called to get the host name of Service URL.\n+     *\n+     * @return String of the host name.\n+     */\n+    String getHostName();\n+\n+    /**\n+     * This method is called to get the port of Service URL.\n+     *\n+     * @return value of the port.\n+     */\n+    int getPort();\n+\n+    /**\n+     * This method is called to get the Url path of Service URL.\n+     *\n+     * @return String of the url path.\n+     */\n+    String getUrlPath();\n+\n+    /**\n+     * This method is called to get the parameter value when the key is provided.\n+     *\n+     * @param key Key of the parameter.\n+     * @return The value of the parameter.\n+     */\n+    String getParameter(String key);\n+\n+    /**\n+     * This method is called to get a list of the parameter names.\n+     *\n+     * @return ArrayList of parameter keys.\n+     */\n+    String[] getParameterKeys();\n+\n+    /**\n+     * This method is called to get the decoded fragment from the url.\n+     *\n+     * @return The decoded fragment.\n+     */\n+    String getFragment();\n+\n+    /**\n+     * Concatenate the protocol, host name, port, proxy context path, web context root and url context to return the\n+     * absolute URL.\n+     *\n+     * @return The absolute URL from the Service URL instance.\n+     */\n+    String getAbsoluteURL() throws URLBuilderException;\n+\n+    /**\n+     * This method is called to get the relative url from the url context.\n+     *\n+     * @return The relative URL from the Service URL instance.\n+     */\n+    String getRelativeURL() throws URLBuilderException;\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e73fa47dbbd6344d346a51c1855078d343ae7f5d"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyMjkwMw==", "bodyText": "How about an API to get the tenant domain?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405522903", "createdAt": "2020-04-08T13:26:13Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURL.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+/**\n+ * Service URL interface.\n+ */\n+public interface ServiceURL {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e73fa47dbbd6344d346a51c1855078d343ae7f5d"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMDA1OTQ0", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-390005944", "createdAt": "2020-04-08T14:03:28Z", "commit": {"oid": "447c47842a216c029b82dd400be2523e262c2367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowMzoyOVrOGCwzkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowMzoyOVrOGCwzkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTk2OQ==", "bodyText": "Since we return the param map, just wondering whether we would have an actual requirement to return the keys. WDYT?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405549969", "createdAt": "2020-04-08T14:03:29Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURL.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Service URL interface.\n+ */\n+public interface ServiceURL {\n+\n+    /**\n+     * This method is called to get the protocol of Service URL.\n+     *\n+     * @return String of the protocol.\n+     */\n+    String getProtocol();\n+\n+    /**\n+     * This method is called to get the host name of Service URL.\n+     *\n+     * @return String of the host name.\n+     */\n+    String getHostName();\n+\n+    /**\n+     * This method is called to get the port of Service URL.\n+     *\n+     * @return value of the port.\n+     */\n+    int getPort();\n+\n+    /**\n+     * This method is called to get the Url path of Service URL.\n+     *\n+     * @return String of the url path.\n+     */\n+    String getUrlPath();\n+\n+    /**\n+     * This method is called to get the parameter value when the key is provided.\n+     *\n+     * @param key Key of the parameter.\n+     * @return The value of the parameter.\n+     */\n+    String getParameter(String key);\n+\n+    /**\n+     * This method is called to get a map of the parameters.\n+     *\n+     * @return The parameters.\n+     */\n+    Map<String, String> getParameters();\n+\n+    /**\n+     * This method is called to get a list of the parameter names.\n+     *\n+     * @return ArrayList of parameter keys.\n+     */\n+    List<String> getParameterKeys();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "447c47842a216c029b82dd400be2523e262c2367"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMDEwNTA3", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-390010507", "createdAt": "2020-04-08T14:08:31Z", "commit": {"oid": "447c47842a216c029b82dd400be2523e262c2367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowODozMVrOGCxBYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowODozMVrOGCxBYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzUwNA==", "bodyText": "Would it make sense to name this as getPath()?\ngetPath() is a commonly used https://docs.oracle.com/javase/7/docs/api/java/net/URL.html#getPath()", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405553504", "createdAt": "2020-04-08T14:08:31Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURL.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Service URL interface.\n+ */\n+public interface ServiceURL {\n+\n+    /**\n+     * This method is called to get the protocol of Service URL.\n+     *\n+     * @return String of the protocol.\n+     */\n+    String getProtocol();\n+\n+    /**\n+     * This method is called to get the host name of Service URL.\n+     *\n+     * @return String of the host name.\n+     */\n+    String getHostName();\n+\n+    /**\n+     * This method is called to get the port of Service URL.\n+     *\n+     * @return value of the port.\n+     */\n+    int getPort();\n+\n+    /**\n+     * This method is called to get the Url path of Service URL.\n+     *\n+     * @return String of the url path.\n+     */\n+    String getUrlPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "447c47842a216c029b82dd400be2523e262c2367"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMDEyNzc1", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-390012775", "createdAt": "2020-04-08T14:11:08Z", "commit": {"oid": "447c47842a216c029b82dd400be2523e262c2367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMTowOFrOGCxItg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMTowOFrOGCxItg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NTM4Mg==", "bodyText": "New line at EOF", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405555382", "createdAt": "2020-04-08T14:11:08Z", "author": {"login": "mefarazath"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/test/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilderTest.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.context.ConfigurationContext;\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.mockito.Mock;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.testng.IObjectFactory;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.ObjectFactory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.base.IdentityConstants;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.URLResolverService;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.ConfigurationContextService;\n+import org.wso2.carbon.utils.NetworkUtils;\n+\n+import java.net.SocketException;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.mockStatic;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+import static org.testng.Assert.assertEquals;\n+\n+@PrepareForTest({ServerConfiguration.class, CarbonUtils.class, IdentityCoreServiceComponent.class, NetworkUtils.class,\n+        IdentityTenantUtil.class, URLResolverService.class, PrivilegedCarbonContext.class})\n+@PowerMockIgnore({\"javax.net.*\", \"javax.security.*\", \"javax.crypto.*\", \"javax.xml.*\", \"org.xml.sax.*\", \"org.w3c.dom\" +\n+        \".*\", \"org.apache.xerces.*\"})\n+public class DefaultServiceURLBuilderTest {\n+\n+    @Mock\n+    private ServerConfiguration mockServerConfiguration;\n+    @Mock\n+    private ConfigurationContextService mockConfigurationContextService;\n+    @Mock\n+    private ConfigurationContext mockConfigurationContext;\n+    @Mock\n+    private AxisConfiguration mockAxisConfiguration;\n+\n+    @BeforeMethod\n+    public void setUp() throws Exception {\n+\n+        mockStatic(CarbonUtils.class);\n+        mockStatic(ServerConfiguration.class);\n+        mockStatic(NetworkUtils.class);\n+        mockStatic(IdentityCoreServiceComponent.class);\n+        mockStatic(IdentityTenantUtil.class);\n+        mockStatic(PrivilegedCarbonContext.class);\n+        PrivilegedCarbonContext privilegedCarbonContext = mock(PrivilegedCarbonContext.class);\n+\n+        when(PrivilegedCarbonContext.getThreadLocalCarbonContext()).thenReturn(privilegedCarbonContext);\n+        when(ServerConfiguration.getInstance()).thenReturn(mockServerConfiguration);\n+        when(IdentityCoreServiceComponent.getConfigurationContextService()).thenReturn(mockConfigurationContextService);\n+        when(mockConfigurationContextService.getServerConfigContext()).thenReturn(mockConfigurationContext);\n+        when(mockConfigurationContext.getAxisConfiguration()).thenReturn(mockAxisConfiguration);\n+        try {\n+            when(NetworkUtils.getLocalHostname()).thenReturn(\"localhost\");\n+        } catch (SocketException e) {\n+            // Mock behaviour, hence ignored\n+        }\n+\n+        System.setProperty(IdentityConstants.CarbonPlaceholders.CARBON_PORT_HTTP_PROPERTY, \"9763\");\n+        System.setProperty(IdentityConstants.CarbonPlaceholders.CARBON_PORT_HTTPS_PROPERTY, \"9443\");\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws Exception {\n+\n+        System.clearProperty(IdentityConstants.CarbonPlaceholders.CARBON_PORT_HTTP_PROPERTY);\n+        System.clearProperty(IdentityConstants.CarbonPlaceholders.CARBON_PORT_HTTPS_PROPERTY);\n+    }\n+\n+    @Test\n+    public void testAddPath() {\n+\n+        String testPath = \"/testPath\";\n+        String urlPath = null;\n+        try {\n+            urlPath = ServiceURLBuilder.create().addPath(testPath).build().getUrlPath();\n+        } catch (URLBuilderException e) {\n+            // Mock behaviour, hence ignored\n+        }\n+\n+        assertEquals(urlPath, testPath);\n+    }\n+\n+    @Test\n+    public void testAddPaths() {\n+\n+        String testPath1 = \"/testPath1\";\n+        String testPath2 = \"testPath2/\";\n+        String testPath3 = \"/testPath3/\";\n+        String urlPath = null;\n+        try {\n+            urlPath = ServiceURLBuilder.create().addPath(testPath1, testPath2, testPath3).build().getUrlPath();\n+        } catch (URLBuilderException e) {\n+            // Mock behaviour, hence ignored\n+        }\n+\n+        assertEquals(urlPath, \"/testPath1/testPath2/testPath3\");\n+    }\n+\n+    @Test\n+    public void testAddParameter() {\n+\n+        String parameterValue = null;\n+        try {\n+            parameterValue = ServiceURLBuilder.create().addParameter(\"key\", \"value\").build().getParameter(\"key\");\n+        } catch (URLBuilderException e) {\n+            // Mock behaviour, hence ignored\n+        }\n+\n+        assertEquals(parameterValue, \"value\");\n+    }\n+\n+    @Test\n+    public void testAddParameters() {\n+\n+        List<String> parameters = null;\n+        try {\n+            parameters =\n+                    ServiceURLBuilder.create().addParameter(\"key1\", \"value1\").addParameter(\"key2\", \"value2\").build().getParameterKeys();\n+        } catch (URLBuilderException e) {\n+            // Mock behaviour, hence ignored\n+        }\n+\n+        assertEquals(parameters, Arrays.asList(\"key1\", \"key2\"));\n+    }\n+\n+    @Test\n+    public void testSetFragment() {\n+\n+        when(CarbonUtils.getManagementTransport()).thenReturn(\"https\");\n+        String fragment = null;\n+        try {\n+            fragment = ServiceURLBuilder.create().setFragment(\"fragment\").build().getFragment();\n+        } catch (URLBuilderException e) {\n+            // Mock behaviour, hence ignored\n+        }\n+\n+        assertEquals(fragment, \"fragment\");\n+    }\n+\n+    @Test\n+    public void testAddFragmentParameter() {\n+\n+        String fragment = null;\n+\n+        try {\n+            fragment =\n+                    ServiceURLBuilder.create().addFragmentParameter(\"key1\", \"value1\").addFragmentParameter(\"key2\",\n+                            \"value2\").build().getFragment();\n+        } catch (URLBuilderException e) {\n+            // Mock behaviour, hence ignored\n+        }\n+\n+        assertEquals(fragment, \"key1=value1&key2=value2\");\n+    }\n+\n+    @Test\n+    public void testAddFragmentParameters() {\n+\n+        String fragment = null;\n+\n+        try {\n+            fragment =\n+                    ServiceURLBuilder.create().addFragmentParameter(\"key1\", \"value1\").addFragmentParameter(\"key2\",\n+                            \"value2\").build().getFragment();\n+        } catch (URLBuilderException e) {\n+            // Mock behaviour, hence ignored\n+        }\n+\n+        assertEquals(fragment, \"key1=value1&key2=value2\");\n+    }\n+\n+    @Test\n+    public void testBuild() {\n+\n+        String absoluteUrl = null;\n+        String testPath1 = \"/testPath1\";\n+        String testPath2 = \"testPath2/\";\n+        String testPath3 = \"/testPath3/\";\n+        String[] keysList = {\"key1\", \"key2\", \"key3\"};\n+        String[] valuesList = {\"value1\", \"value2\", \"value3\"};\n+\n+        try {\n+            absoluteUrl =\n+                    ServiceURLBuilder.create().addPath(testPath1, testPath2, testPath3).addParameter(keysList[0],\n+                            valuesList[0]).addParameter(keysList[1], valuesList[1]).addParameter(keysList[2],\n+                            valuesList[2]).addFragmentParameter(keysList[0], valuesList[0])\n+                            .addFragmentParameter(keysList[1], valuesList[1])\n+                            .addFragmentParameter(keysList[2], valuesList[2]).build().getAbsoluteURL();\n+        } catch (URLBuilderException e) {\n+            // Mock behaviour, hence ignored\n+        }\n+\n+        assertEquals(absoluteUrl,\n+                \"null://localhost:0/testPath1/testPath2/testPath3?key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3#key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3\");\n+\n+    }\n+\n+    @ObjectFactory\n+    public IObjectFactory getObjectFactory() {\n+\n+        return new org.powermock.modules.testng.PowerMockObjectFactory();\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "447c47842a216c029b82dd400be2523e262c2367"}, "originalPosition": 234}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTcyMTY2", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-390172166", "createdAt": "2020-04-08T17:13:30Z", "commit": {"oid": "447c47842a216c029b82dd400be2523e262c2367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoxMzozMFrOGC49lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoxMzozMFrOGC49lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4MzYwNg==", "bodyText": "remove redundant code", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405683606", "createdAt": "2020-04-08T17:13:30Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,426 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.ServiceURL;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.SocketException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for Service URL instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private String[] urlPaths;\n+    private String fragment;\n+    private Map<String, String> parameters = new HashMap<>();\n+    private Map<String, String> fragmentParams = new HashMap<>();\n+\n+    /**\n+     * This method is called to add the URL path to the builder.\n+     *\n+     * @param paths Context path. Can provide multiple context paths with a comma separated string.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addPath(String ... paths) {\n+\n+        this.urlPaths = paths;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with other parameters. Such parameters should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, String value) {\n+\n+        parameters.put(key, value);\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with a fragment.\n+     *\n+     * @param fragment Fragment.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder setFragment(String fragment) {\n+\n+        this.fragment = fragment;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL fragment needs to be appended with parameters. Such parameters should be\n+     * entered as <k,v> pairs. These parameters will get appended with an \"&\".\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addFragmentParameter(String key, String value) {\n+\n+        fragmentParams.put(key, value);\n+        return this;\n+    }\n+\n+    @Override\n+    public org.wso2.carbon.identity.core.ServiceURL build() throws URLBuilderException {\n+\n+        String protocol = fetchProtocol();\n+        String hostName = fetchHostName();\n+        int port = fetchPort();\n+        String resolvedUrlContext = buildUrlPath(urlPaths);\n+        String resolvedFragment = buildFragment(fragment, fragmentParams);\n+        String tenantDomain = resolveTenantDomain();\n+\n+        StringBuilder resolvedUrlStringBuilder = new StringBuilder();\n+        if (StringUtils.isNotBlank(tenantDomain)) {\n+            resolvedUrlStringBuilder.append(\"/t/\").append(tenantDomain);\n+        }\n+\n+        if (StringUtils.isNotBlank(resolvedUrlContext)) {\n+            if (resolvedUrlContext.trim().charAt(0) != '/') {\n+                resolvedUrlStringBuilder.append(\"/\").append(resolvedUrlContext.trim());\n+            } else {\n+                resolvedUrlStringBuilder.append(resolvedUrlContext.trim());\n+            }\n+        }\n+\n+//        return new ServiceURL(protocol, hostName, port, resolvedUrlStringBuilder.toString(), parameters,\n+//                resolvedFragment);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "447c47842a216c029b82dd400be2523e262c2367"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTc1NDk5", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-390175499", "createdAt": "2020-04-08T17:18:03Z", "commit": {"oid": "447c47842a216c029b82dd400be2523e262c2367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoxODowM1rOGC5IRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoxODowM1rOGC5IRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NjM0MQ==", "bodyText": "It's fine for the builder to throw URLBuilderException while building the URL. But ServiceURL POJO should not throw it when getting absolute URL or relative URL", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405686341", "createdAt": "2020-04-08T17:18:03Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,426 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.ServiceURL;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.SocketException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for Service URL instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private String[] urlPaths;\n+    private String fragment;\n+    private Map<String, String> parameters = new HashMap<>();\n+    private Map<String, String> fragmentParams = new HashMap<>();\n+\n+    /**\n+     * This method is called to add the URL path to the builder.\n+     *\n+     * @param paths Context path. Can provide multiple context paths with a comma separated string.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addPath(String ... paths) {\n+\n+        this.urlPaths = paths;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with other parameters. Such parameters should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, String value) {\n+\n+        parameters.put(key, value);\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with a fragment.\n+     *\n+     * @param fragment Fragment.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder setFragment(String fragment) {\n+\n+        this.fragment = fragment;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL fragment needs to be appended with parameters. Such parameters should be\n+     * entered as <k,v> pairs. These parameters will get appended with an \"&\".\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addFragmentParameter(String key, String value) {\n+\n+        fragmentParams.put(key, value);\n+        return this;\n+    }\n+\n+    @Override\n+    public org.wso2.carbon.identity.core.ServiceURL build() throws URLBuilderException {\n+\n+        String protocol = fetchProtocol();\n+        String hostName = fetchHostName();\n+        int port = fetchPort();\n+        String resolvedUrlContext = buildUrlPath(urlPaths);\n+        String resolvedFragment = buildFragment(fragment, fragmentParams);\n+        String tenantDomain = resolveTenantDomain();\n+\n+        StringBuilder resolvedUrlStringBuilder = new StringBuilder();\n+        if (StringUtils.isNotBlank(tenantDomain)) {\n+            resolvedUrlStringBuilder.append(\"/t/\").append(tenantDomain);\n+        }\n+\n+        if (StringUtils.isNotBlank(resolvedUrlContext)) {\n+            if (resolvedUrlContext.trim().charAt(0) != '/') {\n+                resolvedUrlStringBuilder.append(\"/\").append(resolvedUrlContext.trim());\n+            } else {\n+                resolvedUrlStringBuilder.append(resolvedUrlContext.trim());\n+            }\n+        }\n+\n+//        return new ServiceURL(protocol, hostName, port, resolvedUrlStringBuilder.toString(), parameters,\n+//                resolvedFragment);\n+\n+        return new ServiceURL() {\n+\n+            /**\n+             * This method is called to get the protocol of Service URL.\n+             *\n+             * @return String of the protocol.\n+             */\n+            @Override\n+            public String getProtocol() {\n+\n+                return protocol;\n+            }\n+\n+            /**\n+             * This method is called to get the host name of Service URL.\n+             *\n+             * @return String of the host name.\n+             */\n+            @Override\n+            public String getHostName() {\n+\n+                return hostName;\n+            }\n+\n+            /**\n+             * This method is called to get the port of Service URL.\n+             *\n+             * @return value of the port.\n+             */\n+            @Override\n+            public int getPort() {\n+\n+                return port;\n+            }\n+\n+            /**\n+             * This method is called to get the Url path of Service URL.\n+             *\n+             * @return String of the url path.\n+             */\n+            @Override\n+            public String getUrlPath() {\n+\n+                return resolvedUrlStringBuilder.toString();\n+            }\n+\n+            /**\n+             * This method is called to get the parameter value when the key is provided.\n+             *\n+             * @param key Key of the parameter.\n+             * @return The value of the parameter.\n+             */\n+            @Override\n+            public String getParameter(String key) {\n+\n+                return parameters.get(key);\n+            }\n+\n+            /**\n+             * This method is called to get a map of the parameters.\n+             *\n+             * @return The parameters.\n+             */\n+            @Override\n+            public Map<String, String> getParameters() {\n+\n+                return Collections.unmodifiableMap(parameters);\n+            }\n+\n+            /**\n+             * This method is called to get a list of the parameter names.\n+             *\n+             * @return List of parameter keys.\n+             */\n+            @Override\n+            public List<String> getParameterKeys() {\n+\n+                ArrayList<String> parameterArrayList = new ArrayList<>();\n+\n+                for (Map.Entry<String, String> entry : parameters.entrySet()) {\n+                    parameterArrayList.add(entry.getKey());\n+                }\n+                return Collections.unmodifiableList(parameterArrayList);\n+            }\n+\n+            /**\n+             * This method is called to get the decoded fragment from the url.\n+             *\n+             * @return The decoded fragment.\n+             */\n+            @Override\n+            public String getFragment() {\n+\n+                return resolvedFragment;\n+            }\n+\n+            /**\n+             * This method is called to get the tenant domain appended in the URL.\n+             *\n+             * @return The tenant domain.\n+             */\n+            @Override\n+            public String getTenantDomain() {\n+\n+                return tenantDomain;\n+            }\n+\n+            /**\n+             * Concatenate the protocol, host name, port, proxy context path, web context root and url context to\n+             * return the absolute URL.\n+             *\n+             * @return The absolute URL from the Service URL instance.\n+             */\n+            @Override\n+            public String getAbsoluteURL() throws URLBuilderException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "447c47842a216c029b82dd400be2523e262c2367"}, "originalPosition": 253}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTc2Nzk3", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-390176797", "createdAt": "2020-04-08T17:19:49Z", "commit": {"oid": "447c47842a216c029b82dd400be2523e262c2367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoxOTo0OVrOGC5Mcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoxOTo0OVrOGC5Mcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NzQxMQ==", "bodyText": "This is a long class to implement as an anonymous. Impacts readability", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405687411", "createdAt": "2020-04-08T17:19:49Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,426 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.ServiceURL;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.SocketException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for Service URL instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private String[] urlPaths;\n+    private String fragment;\n+    private Map<String, String> parameters = new HashMap<>();\n+    private Map<String, String> fragmentParams = new HashMap<>();\n+\n+    /**\n+     * This method is called to add the URL path to the builder.\n+     *\n+     * @param paths Context path. Can provide multiple context paths with a comma separated string.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addPath(String ... paths) {\n+\n+        this.urlPaths = paths;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with other parameters. Such parameters should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addParameter(String key, String value) {\n+\n+        parameters.put(key, value);\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL needs to be appended with a fragment.\n+     *\n+     * @param fragment Fragment.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder setFragment(String fragment) {\n+\n+        this.fragment = fragment;\n+        return this;\n+    }\n+\n+    /**\n+     * This method is called when the URL fragment needs to be appended with parameters. Such parameters should be\n+     * entered as <k,v> pairs. These parameters will get appended with an \"&\".\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    @Override\n+    public ServiceURLBuilder addFragmentParameter(String key, String value) {\n+\n+        fragmentParams.put(key, value);\n+        return this;\n+    }\n+\n+    @Override\n+    public org.wso2.carbon.identity.core.ServiceURL build() throws URLBuilderException {\n+\n+        String protocol = fetchProtocol();\n+        String hostName = fetchHostName();\n+        int port = fetchPort();\n+        String resolvedUrlContext = buildUrlPath(urlPaths);\n+        String resolvedFragment = buildFragment(fragment, fragmentParams);\n+        String tenantDomain = resolveTenantDomain();\n+\n+        StringBuilder resolvedUrlStringBuilder = new StringBuilder();\n+        if (StringUtils.isNotBlank(tenantDomain)) {\n+            resolvedUrlStringBuilder.append(\"/t/\").append(tenantDomain);\n+        }\n+\n+        if (StringUtils.isNotBlank(resolvedUrlContext)) {\n+            if (resolvedUrlContext.trim().charAt(0) != '/') {\n+                resolvedUrlStringBuilder.append(\"/\").append(resolvedUrlContext.trim());\n+            } else {\n+                resolvedUrlStringBuilder.append(resolvedUrlContext.trim());\n+            }\n+        }\n+\n+//        return new ServiceURL(protocol, hostName, port, resolvedUrlStringBuilder.toString(), parameters,\n+//                resolvedFragment);\n+\n+        return new ServiceURL() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "447c47842a216c029b82dd400be2523e262c2367"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTc3Njcy", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-390177672", "createdAt": "2020-04-08T17:21:00Z", "commit": {"oid": "447c47842a216c029b82dd400be2523e262c2367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoyMTowMFrOGC5PXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoyMTowMFrOGC5PXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4ODE1OQ==", "bodyText": "I don't think exceptions should be thrown from here", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405688159", "createdAt": "2020-04-08T17:21:00Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURL.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Service URL interface.\n+ */\n+public interface ServiceURL {\n+\n+    /**\n+     * This method is called to get the protocol of Service URL.\n+     *\n+     * @return String of the protocol.\n+     */\n+    String getProtocol();\n+\n+    /**\n+     * This method is called to get the host name of Service URL.\n+     *\n+     * @return String of the host name.\n+     */\n+    String getHostName();\n+\n+    /**\n+     * This method is called to get the port of Service URL.\n+     *\n+     * @return value of the port.\n+     */\n+    int getPort();\n+\n+    /**\n+     * This method is called to get the Url path of Service URL.\n+     *\n+     * @return String of the url path.\n+     */\n+    String getUrlPath();\n+\n+    /**\n+     * This method is called to get the parameter value when the key is provided.\n+     *\n+     * @param key Key of the parameter.\n+     * @return The value of the parameter.\n+     */\n+    String getParameter(String key);\n+\n+    /**\n+     * This method is called to get a map of the parameters.\n+     *\n+     * @return The parameters.\n+     */\n+    Map<String, String> getParameters();\n+\n+    /**\n+     * This method is called to get a list of the parameter names.\n+     *\n+     * @return ArrayList of parameter keys.\n+     */\n+    List<String> getParameterKeys();\n+\n+    /**\n+     * This method is called to get the decoded fragment from the url.\n+     *\n+     * @return The decoded fragment.\n+     */\n+    String getFragment();\n+\n+    /**\n+     * This method is called to get the tenant domain appended in the URL.\n+     *\n+     * @return The tenant domain.\n+     */\n+    String getTenantDomain();\n+\n+    /**\n+     * Concatenate the protocol, host name, port, proxy context path, web context root and url context to return the\n+     * absolute URL.\n+     *\n+     * @return The absolute URL from the Service URL instance.\n+     */\n+    String getAbsoluteURL() throws URLBuilderException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "447c47842a216c029b82dd400be2523e262c2367"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNDY3MzA1", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-390467305", "createdAt": "2020-04-09T03:25:20Z", "commit": {"oid": "efe76f1eb6657639329bc6935226b75850782499"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzoyNToyMFrOGDITSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzoyNToyMFrOGDITSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzNDkyMg==", "bodyText": "Let's stick to one exception type. No need to re-wrap and throw. These are not two specific types we should declare. Rather you have been wrapping the same thing.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405934922", "createdAt": "2020-04-09T03:25:20Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/ServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.wso2.carbon.identity.core.internal.DefaultServiceURLBuilder;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+\n+/**\n+ * URL Builder service interface.\n+ */\n+public interface ServiceURLBuilder {\n+\n+    static ServiceURLBuilder create() {\n+\n+        if (IdentityCoreServiceComponent.getServiceURLBuilderFactory() != null) {\n+            return IdentityCoreServiceComponent.getServiceURLBuilderFactory().createServiceURLBuilder();\n+        } else {\n+            return new DefaultServiceURLBuilder();\n+        }\n+    }\n+\n+    /**\n+     * This method is called to add the URL path to the builder.\n+     *\n+     * @param paths Context paths. Can provide multiple context paths with a comma separated string.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addPath(String ... paths);\n+\n+    /**\n+     * This method is called when the URL needs to be appended with other parameters. Such parameters should be\n+     * entered as <k,v> pairs.\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addParameter(String key, String value);\n+\n+    /**\n+     * This method is called when the URL needs to be appended with a fragment.\n+     *\n+     * @param fragment Fragment.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder setFragment(String fragment);\n+\n+    /**\n+     * This method is called when the URL fragment needs to be appended with parameters. Such parameters should be\n+     * entered as <k,v> pairs. These parameters will get appended with an \"&\".\n+     *\n+     * @param key   Key.\n+     * @param value Value.\n+     * @return {@link ServiceURLBuilder}.\n+     */\n+    ServiceURLBuilder addFragmentParameter(String key, String value);\n+\n+    /**\n+     * This method is used to return a ServiceURL with the protocol, hostname, port, proxy context path, a web context\n+     * root and the tenant domain (appended if required).\n+     *\n+     * @return {@link ServiceURL}.\n+     * @throws URLBuilderException If error occurred while constructing the URL.\n+     */\n+    ServiceURL build() throws URLBuilderException, ServiceURLException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe76f1eb6657639329bc6935226b75850782499"}, "originalPosition": 81}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "efe76f1eb6657639329bc6935226b75850782499", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/efe76f1eb6657639329bc6935226b75850782499", "committedDate": "2020-04-09T03:11:24Z", "message": "resolve issues"}, "afterCommit": {"oid": "56ef4103200bab32e0baa43d04dec0d814a9e232", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/56ef4103200bab32e0baa43d04dec0d814a9e232", "committedDate": "2020-04-09T03:54:40Z", "message": "resolve issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56ef4103200bab32e0baa43d04dec0d814a9e232", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/56ef4103200bab32e0baa43d04dec0d814a9e232", "committedDate": "2020-04-09T03:54:40Z", "message": "resolve issues"}, "afterCommit": {"oid": "c85e9609886b72e4e23750c09e04092ef73e9e60", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/c85e9609886b72e4e23750c09e04092ef73e9e60", "committedDate": "2020-04-09T03:55:33Z", "message": "Change Service URL to an interface and move its impl to the DefaultServiceURLBuilder"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c85e9609886b72e4e23750c09e04092ef73e9e60", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/c85e9609886b72e4e23750c09e04092ef73e9e60", "committedDate": "2020-04-09T03:55:33Z", "message": "Change Service URL to an interface and move its impl to the DefaultServiceURLBuilder"}, "afterCommit": {"oid": "b07d5754583ae939adb48253e370022284f3247e", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/b07d5754583ae939adb48253e370022284f3247e", "committedDate": "2020-04-09T04:00:10Z", "message": "Change Service URL to an interface and move its impl to the DefaultServiceURLBuilder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNDg4Mzc1", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-390488375", "createdAt": "2020-04-09T04:48:50Z", "commit": {"oid": "b07d5754583ae939adb48253e370022284f3247e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDo0ODo1MFrOGDJeeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDo0ODo1MFrOGDJeeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1NDE3MA==", "bodyText": "Why we need to wrap this and throw ?\nStill this relates to the same thing right. Let's throw directly one type", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#discussion_r405954170", "createdAt": "2020-04-09T04:48:50Z", "author": {"login": "malithie"}, "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/internal/DefaultServiceURLBuilder.java", "diffHunk": "@@ -0,0 +1,447 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core.internal;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.ServiceURL;\n+import org.wso2.carbon.identity.core.ServiceURLBuilder;\n+import org.wso2.carbon.identity.core.ServiceURLException;\n+import org.wso2.carbon.identity.core.URLBuilderException;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.SocketException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+/**\n+ * Implementation for {@link ServiceURLBuilder}.\n+ * Builder for Service URL instances.\n+ */\n+public class DefaultServiceURLBuilder implements ServiceURLBuilder {\n+\n+    private String fragment;\n+    private String tenantDomain;\n+    private String[] urlPaths;\n+    private Map<String, String> parameters = new HashMap<>();\n+    private Map<String, String> fragmentParams = new HashMap<>();\n+\n+    private class ServiceURLImpl implements ServiceURL {\n+\n+        private String protocol;\n+        private String hostName;\n+        private int port;\n+        private String urlPath;\n+        private Map<String, String> parameters;\n+        private String fragment;\n+        private String absoluteUrl;\n+        private String relativeUrl;\n+\n+        private ServiceURLImpl(String protocol, String hostName, int port, String urlPath,\n+                               Map<String, String> parameters, String fragment) throws ServiceURLException {\n+\n+            this.protocol = protocol;\n+            this.hostName = hostName;\n+            this.port = port;\n+            this.urlPath = urlPath;\n+            this.parameters = parameters;\n+            this.fragment = fragment;\n+            this.absoluteUrl = fetchAbsoluteUrl();\n+            this.relativeUrl = fetchRelativeUrl();\n+\n+        }\n+\n+        /**\n+         * Returns the protocol of Service URL.\n+         *\n+         * @return String of the protocol.\n+         */\n+        @Override\n+        public String getProtocol() {\n+\n+            return protocol;\n+        }\n+\n+        /**\n+         * Returns the host name of Service URL.\n+         *\n+         * @return String of the host name.\n+         */\n+        @Override\n+        public String getHostName() {\n+\n+            return hostName;\n+        }\n+\n+        /**\n+         * Returns the port of Service URL.\n+         *\n+         * @return value of the port.\n+         */\n+        @Override\n+        public int getPort() {\n+\n+            return port;\n+        }\n+\n+        /**\n+         * Returns the Url path of Service URL.\n+         *\n+         * @return String of the url path.\n+         */\n+        @Override\n+        public String getPath() {\n+\n+            return urlPath;\n+        }\n+\n+        /**\n+         * Returns the parameter value when the key is provided.\n+         *\n+         * @param key Key of the parameter.\n+         * @return The value of the parameter.\n+         */\n+        @Override\n+        public String getParameter(String key) {\n+\n+            return parameters.get(key);\n+        }\n+\n+        /**\n+         * Returns a map of the parameters.\n+         *\n+         * @return The parameters.\n+         */\n+        @Override\n+        public Map<String, String> getParameters() {\n+\n+            return Collections.unmodifiableMap(parameters);\n+        }\n+\n+        /**\n+         * Returns decoded fragment from the url.\n+         *\n+         * @return The decoded fragment.\n+         */\n+        @Override\n+        public String getFragment() {\n+\n+            return fragment;\n+        }\n+\n+        /**\n+         * Returns the tenant domain of the service URL.\n+         *\n+         * @return The tenant domain.\n+         */\n+        @Override\n+        public String getTenantDomain() {\n+\n+            return tenantDomain;\n+        }\n+\n+        /**\n+         * Concatenate the protocol, host name, port, proxy context path, web context root, url context, query params\n+         * and the fragment to return the absolute URL.\n+         *\n+         * @return The absolute URL from the Service URL instance.\n+         */\n+        @Override\n+        public String getAbsoluteURL() {\n+\n+            return absoluteUrl;\n+        }\n+\n+        /**\n+         * Concatenate the url context, query params and the fragment to return the relative URL.\n+         *\n+         * @return The relative URL from the Service URL instance.\n+         */\n+        @Override\n+        public String getRelativeURL() {\n+\n+            return relativeUrl;\n+        }\n+\n+        private String fetchAbsoluteUrl() throws ServiceURLException {\n+\n+            StringBuilder absoluteUrl = new StringBuilder();\n+            absoluteUrl.append(protocol).append(\"://\");\n+\n+            absoluteUrl.append(hostName.toLowerCase());\n+\n+            // If it's well known HTTPS port, skip adding port.\n+            if (port != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+                absoluteUrl.append(\":\").append(port);\n+            }\n+\n+            if (StringUtils.isNotBlank(urlPath)) {\n+                if (urlPath.trim().charAt(0) != '/' && urlPath.trim().charAt(0) != '?') {\n+                    absoluteUrl.append(\"/\").append(urlPath.trim());\n+                } else {\n+                    absoluteUrl.append(urlPath.trim());\n+                }\n+            }\n+            String resolvedParamsString = getResolvedParamString(parameters);\n+            try {\n+                appendParamsToUri(absoluteUrl, resolvedParamsString, \"?\");\n+                appendParamsToUri(absoluteUrl, fragment, \"#\");\n+\n+            } catch (URLBuilderException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b07d5754583ae939adb48253e370022284f3247e"}, "originalPosition": 218}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b07d5754583ae939adb48253e370022284f3247e", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/b07d5754583ae939adb48253e370022284f3247e", "committedDate": "2020-04-09T04:00:10Z", "message": "Change Service URL to an interface and move its impl to the DefaultServiceURLBuilder"}, "afterCommit": {"oid": "d43270f1da4685270257cd8306304ad1fb90166c", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/d43270f1da4685270257cd8306304ad1fb90166c", "committedDate": "2020-04-09T05:25:30Z", "message": "Change Service URL to an interface and move its impl to the DefaultServiceURLBuilder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTA0ODYw", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-390504860", "createdAt": "2020-04-09T05:45:15Z", "commit": {"oid": "d43270f1da4685270257cd8306304ad1fb90166c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTA4MDA5", "url": "https://github.com/wso2/carbon-identity-framework/pull/2851#pullrequestreview-390508009", "createdAt": "2020-04-09T05:54:51Z", "commit": {"oid": "d43270f1da4685270257cd8306304ad1fb90166c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb5ebda2ff0b2d993d5e98f831b0e7052c90fccc", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/cb5ebda2ff0b2d993d5e98f831b0e7052c90fccc", "committedDate": "2020-04-09T06:00:59Z", "message": "Change Service URL to an interface and move its impl to the DefaultServiceURLBuilder"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d43270f1da4685270257cd8306304ad1fb90166c", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/d43270f1da4685270257cd8306304ad1fb90166c", "committedDate": "2020-04-09T05:25:30Z", "message": "Change Service URL to an interface and move its impl to the DefaultServiceURLBuilder"}, "afterCommit": {"oid": "cb5ebda2ff0b2d993d5e98f831b0e7052c90fccc", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/cb5ebda2ff0b2d993d5e98f831b0e7052c90fccc", "committedDate": "2020-04-09T06:00:59Z", "message": "Change Service URL to an interface and move its impl to the DefaultServiceURLBuilder"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2325, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}