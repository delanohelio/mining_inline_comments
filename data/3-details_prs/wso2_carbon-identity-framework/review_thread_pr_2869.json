{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjM0MDY4", "number": 2869, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMjoxNzoxM1rODxAPVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTozMjoyNlrODzosjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzEwNzQzOnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/config/ConfigurationFacade.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMjoxNzoxM1rOGERijg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODozNzowN1rOGFb2_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEzNDg2Mg==", "bodyText": "There's a small concern here.\nWe should read from file only when it's not tenant url supported mode right.\nIf it's tenant url supported, context is always a path, that will be resolved to an absolute URL from the URL builder.\nIf tenant url not supported only we will have to worry about, the context read from the file is absolute or not.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2869#discussion_r407134862", "createdAt": "2020-04-12T02:17:13Z", "author": {"login": "malithie"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/config/ConfigurationFacade.java", "diffHunk": "@@ -263,28 +266,60 @@ public int getMaxLoginAttemptCount() {\n \n     private String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n \n-        String url;\n-        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n-            url = buildTenantQualifiedUrl(defaultContext);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Building url for context: \" + defaultContext);\n+        }\n+\n+        String context = defaultContext;\n+\n+        String urlFromFileBasedConfig = getValueFromFileBasedConfig.get();\n+        if (StringUtils.isNotBlank(urlFromFileBasedConfig)) {\n+            // If the file based config is set, then we have to build the URL based on that.\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"URL from file based config: \" + urlFromFileBasedConfig);\n+            }\n+            context = urlFromFileBasedConfig;\n+        }\n+\n+        if (isUrlAbsolute(context)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"URL: \" + context + \" is absolute. Returning it as the resolved URL.\");\n+            }\n+            return context;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15324511c9d1afb2713abf4f41933fb9ec0b665c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyMTkzNA==", "bodyText": "Even in the tenant qualified mode, we might have a situation where a user has defined a custom path. For example: instead of authenthenticationendpoint/login.do someone could define authenthenticationendpoint/custom_login.do\nSo when the facade returns in the tenant qualified mode, we can simply return\n\\t\\<tenant_name>\\authenthenticationendpoint\\custom_login.do", "url": "https://github.com/wso2/carbon-identity-framework/pull/2869#discussion_r408021934", "createdAt": "2020-04-14T10:10:32Z", "author": {"login": "mefarazath"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/config/ConfigurationFacade.java", "diffHunk": "@@ -263,28 +266,60 @@ public int getMaxLoginAttemptCount() {\n \n     private String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n \n-        String url;\n-        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n-            url = buildTenantQualifiedUrl(defaultContext);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Building url for context: \" + defaultContext);\n+        }\n+\n+        String context = defaultContext;\n+\n+        String urlFromFileBasedConfig = getValueFromFileBasedConfig.get();\n+        if (StringUtils.isNotBlank(urlFromFileBasedConfig)) {\n+            // If the file based config is set, then we have to build the URL based on that.\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"URL from file based config: \" + urlFromFileBasedConfig);\n+            }\n+            context = urlFromFileBasedConfig;\n+        }\n+\n+        if (isUrlAbsolute(context)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"URL: \" + context + \" is absolute. Returning it as the resolved URL.\");\n+            }\n+            return context;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEzNDg2Mg=="}, "originalCommit": {"oid": "15324511c9d1afb2713abf4f41933fb9ec0b665c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MjUwOA==", "bodyText": "I was actually thinking that should be resolved local to the tenant.\nBut, unlike other endpoints which are defined for the server, there's a case with related to authentication endpoint web app. That is, it allows to be externalized, which can mean server wide there can be an endpoint URL configured, where your above comment applies. Mode of the offering needs to be finalized then", "url": "https://github.com/wso2/carbon-identity-framework/pull/2869#discussion_r408352508", "createdAt": "2020-04-14T18:37:07Z", "author": {"login": "malithie"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/config/ConfigurationFacade.java", "diffHunk": "@@ -263,28 +266,60 @@ public int getMaxLoginAttemptCount() {\n \n     private String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n \n-        String url;\n-        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n-            url = buildTenantQualifiedUrl(defaultContext);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Building url for context: \" + defaultContext);\n+        }\n+\n+        String context = defaultContext;\n+\n+        String urlFromFileBasedConfig = getValueFromFileBasedConfig.get();\n+        if (StringUtils.isNotBlank(urlFromFileBasedConfig)) {\n+            // If the file based config is set, then we have to build the URL based on that.\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"URL from file based config: \" + urlFromFileBasedConfig);\n+            }\n+            context = urlFromFileBasedConfig;\n+        }\n+\n+        if (isUrlAbsolute(context)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"URL: \" + context + \" is absolute. Returning it as the resolved URL.\");\n+            }\n+            return context;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEzNDg2Mg=="}, "originalCommit": {"oid": "15324511c9d1afb2713abf4f41933fb9ec0b665c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDY5OTk5OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/config/ConfigurationFacade.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTozMDo0M1rOGILnCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMDoyMTowMlrOGINjDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzMjAwOQ==", "bodyText": "Should we return the default context here.\nShouldn't that be a absolute public ?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2869#discussion_r411232009", "createdAt": "2020-04-20T09:30:43Z", "author": {"login": "malithie"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/config/ConfigurationFacade.java", "diffHunk": "@@ -263,28 +263,25 @@ public int getMaxLoginAttemptCount() {\n \n     private String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n \n-        String url;\n         if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n-            url = buildTenantQualifiedUrl(defaultContext);\n+            return buildAbsoluteUrl(defaultContext);\n         } else {\n-            String authenticationEndpointURLInFile = getValueFromFileBasedConfig.get();\n-            if (StringUtils.isNotBlank(authenticationEndpointURLInFile)) {\n-                // Use the value configured in the file.\n-                url = authenticationEndpointURLInFile;\n+            String urlFromFileBasedConfig = getValueFromFileBasedConfig.get();\n+            if (StringUtils.isNotBlank(urlFromFileBasedConfig)) {\n+                // If the file based URL is set, then we have to return the file based URL.\n+                return urlFromFileBasedConfig;\n             } else {\n-                // Use the default context.\n-                url = defaultContext;\n+                return defaultContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3aa75f857ac129e829bab94d6ab433e2114a05"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI2Mzc1OQ==", "bodyText": "Though of building the absolute public at the consumer level to avoid behaviour change for code that consumes this API in the legacy mode", "url": "https://github.com/wso2/carbon-identity-framework/pull/2869#discussion_r411263759", "createdAt": "2020-04-20T10:21:02Z", "author": {"login": "mefarazath"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/config/ConfigurationFacade.java", "diffHunk": "@@ -263,28 +263,25 @@ public int getMaxLoginAttemptCount() {\n \n     private String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n \n-        String url;\n         if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n-            url = buildTenantQualifiedUrl(defaultContext);\n+            return buildAbsoluteUrl(defaultContext);\n         } else {\n-            String authenticationEndpointURLInFile = getValueFromFileBasedConfig.get();\n-            if (StringUtils.isNotBlank(authenticationEndpointURLInFile)) {\n-                // Use the value configured in the file.\n-                url = authenticationEndpointURLInFile;\n+            String urlFromFileBasedConfig = getValueFromFileBasedConfig.get();\n+            if (StringUtils.isNotBlank(urlFromFileBasedConfig)) {\n+                // If the file based URL is set, then we have to return the file based URL.\n+                return urlFromFileBasedConfig;\n             } else {\n-                // Use the default context.\n-                url = defaultContext;\n+                return defaultContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzMjAwOQ=="}, "originalCommit": {"oid": "4d3aa75f857ac129e829bab94d6ab433e2114a05"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDcwNzM1OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/config/ConfigurationFacade.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTozMjoyNlrOGILrbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTozMjoyNlrOGILrbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzMzEzNA==", "bodyText": "I would prefer if this exception can be thrown and handled at the public API layer", "url": "https://github.com/wso2/carbon-identity-framework/pull/2869#discussion_r411233134", "createdAt": "2020-04-20T09:32:26Z", "author": {"login": "malithie"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/config/ConfigurationFacade.java", "diffHunk": "@@ -263,28 +263,25 @@ public int getMaxLoginAttemptCount() {\n \n     private String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n \n-        String url;\n         if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n-            url = buildTenantQualifiedUrl(defaultContext);\n+            return buildAbsoluteUrl(defaultContext);\n         } else {\n-            String authenticationEndpointURLInFile = getValueFromFileBasedConfig.get();\n-            if (StringUtils.isNotBlank(authenticationEndpointURLInFile)) {\n-                // Use the value configured in the file.\n-                url = authenticationEndpointURLInFile;\n+            String urlFromFileBasedConfig = getValueFromFileBasedConfig.get();\n+            if (StringUtils.isNotBlank(urlFromFileBasedConfig)) {\n+                // If the file based URL is set, then we have to return the file based URL.\n+                return urlFromFileBasedConfig;\n             } else {\n-                // Use the default context.\n-                url = defaultContext;\n+                return defaultContext;\n             }\n         }\n-        return url;\n     }\n \n-    private String buildTenantQualifiedUrl(String context) {\n+    private String buildAbsoluteUrl(String context) {\n \n         try {\n             return ServiceURLBuilder.create().addPath(context).build().getAbsolutePublicURL();\n         } catch (URLBuilderException e) {\n-            throw new IdentityRuntimeException(\"Error while building url for context: \" + context);\n+            throw new IdentityRuntimeException(\"Error while building tenant qualified url for context: \" + context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3aa75f857ac129e829bab94d6ab433e2114a05"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2305, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}