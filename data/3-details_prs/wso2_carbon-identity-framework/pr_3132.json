{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzOTM4OTEy", "number": 3132, "title": "Fix postgresql and oracle issues", "bodyText": "Proposed changes in this pull request\nResolves wso2/product-is#9606\nResolves wso2/product-is#9608\nResolves wso2/product-is#9609\n\n\n\nWhen should this PR be merged\n[Please describe any preconditions that need to be addressed before we\ncan merge this pull request.]\nFollow up actions\n[List any possible follow-up actions here; for instance, testing data\nmigrations, software that we need to install on staging and production\nenvironments.]\n\n\n\nChecklist (for reviewing)\nGeneral\n\n Is this PR explained thoroughly? All code changes must be accounted for in the PR description.\n Is the PR labeled correctly?\n\nFunctionality\n\n Are all requirements met? Compare implemented functionality with the requirements specification.\n Does the UI work as expected? There should be no Javascript errors in the console; all resources should load. There should be no unexpected errors. Deliberately try to break the feature to find out if there are corner cases that are not handled.\n\nCode\n\n Do you fully understand the introduced changes to the code? If not ask for clarification, it might uncover ways to solve a problem in a more elegant and efficient way.\n Does the PR introduce any inefficient database requests? Use the debug server to check for duplicate requests.\n Are all necessary strings marked for translation? All strings that are exposed to users via the UI must be marked for translation.\n\nTests\n\n Are there sufficient test cases? Ensure that all components are tested individually; models, forms, and serializers should be tested in isolation even if a test for a view covers these components.\n If this is a bug fix, are tests for the issue in place?  There must be a test case for the bug to ensure the issue won\u2019t regress. Make sure that the tests break without the new code to fix the issue.\n If this is a new feature or a significant change to an existing feature? has the manual testing spreadsheet been updated with instructions for manual testing?\n\nSecurity\n\n Confirm this PR doesn't commit any keys, passwords, tokens, usernames, or other secrets.\n Are all UI and API inputs run through forms or serializers?\n Are all external inputs validated and sanitized appropriately?\n Does all branching logic have a default case?\n Does this solution handle outliers and edge cases gracefully?\n Are all external communications secured and restricted to SSL?\n\nDocumentation\n\n Are changes to the UI documented in the platform docs? If this PR introduces new platform site functionality or changes existing ones, the changes should be documented.\n Are changes to the API documented in the API docs? If this PR introduces new API functionality or changes existing ones, the changes must be documented.\n Are reusable components documented? If this PR introduces components that are relevant to other developers (for instance a mixin for a view or a generic form) they should be documented in the Wiki.", "createdAt": "2020-09-28T07:17:40Z", "url": "https://github.com/wso2/carbon-identity-framework/pull/3132", "merged": true, "mergeCommit": {"oid": "337482a378f68190b4f4164181982d7a7bd25269"}, "closed": true, "closedAt": "2020-09-30T03:54:40Z", "author": {"login": "nilasini"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNOIJMgH2gAyNDkzOTM4OTEyOmIwNGRmNmEzMjVhMjRkMzg3YjM0ZDUyNDZlY2EzMjA4OTNkNDYxYmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdN0h1MAFqTQ5OTA2NjAwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b04df6a325a24d387b34d5246eca320893d461bc", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/b04df6a325a24d387b34d5246eca320893d461bc", "committedDate": "2020-09-28T07:05:49Z", "message": "Fix postgresql issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93ee1d0c38530c7875c9db36208cefbd2b46d9e4", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/93ee1d0c38530c7875c9db36208cefbd2b46d9e4", "committedDate": "2020-09-28T18:01:11Z", "message": "Fix oracle issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1baaf86ae17fd031d50646866aa5e6b47359de50", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/1baaf86ae17fd031d50646866aa5e6b47359de50", "committedDate": "2020-09-29T11:16:36Z", "message": "Fix conventions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "084693f7f8eb5acfc5f0cc165534160ddc7681f6", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/084693f7f8eb5acfc5f0cc165534160ddc7681f6", "committedDate": "2020-09-29T06:20:16Z", "message": "Fix conventions"}, "afterCommit": {"oid": "1baaf86ae17fd031d50646866aa5e6b47359de50", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/1baaf86ae17fd031d50646866aa5e6b47359de50", "committedDate": "2020-09-29T11:16:36Z", "message": "Fix conventions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4OTEzMTgy", "url": "https://github.com/wso2/carbon-identity-framework/pull/3132#pullrequestreview-498913182", "createdAt": "2020-09-29T21:39:36Z", "commit": {"oid": "1baaf86ae17fd031d50646866aa5e6b47359de50"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMTozOTozNlrOHaDHQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMTo0NTowMlrOHaDSeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3NjAzNA==", "bodyText": "What is the reason for moving away from NamedPreparedStatement here?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3132#discussion_r497076034", "createdAt": "2020-09-29T21:39:36Z", "author": {"login": "ivantha"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/SQLQueries.java", "diffHunk": "@@ -29,11 +29,11 @@\n \n     public static final String INSERT_CORS_ORIGIN =\n             \"INSERT INTO IDN_CORS_ORIGIN (TENANT_ID, ORIGIN, UUID) \" +\n-            \"VALUES (?, ?, ?)\";\n+            \"VALUES (:TENANT_ID;, :ORIGIN;, :UUID;)\";\n \n     public static final String INSERT_CORS_ASSOCIATION =\n             \"INSERT INTO IDN_CORS_ASSOCIATION (IDN_CORS_ORIGIN_ID, SP_APP_ID) \" +\n-            \"VALUES (:IDN_CORS_ORIGIN_ID;, :SP_APP_ID;)\";\n+            \"VALUES (?,?)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1baaf86ae17fd031d50646866aa5e6b47359de50"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3NjUzOQ==", "bodyText": "Same as the ^ comment.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3132#discussion_r497076539", "createdAt": "2020-09-29T21:40:40Z", "author": {"login": "ivantha"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/SQLQueries.java", "diffHunk": "@@ -55,5 +55,5 @@\n     public static final String DELETE_CORS_APPLICATION_ASSOCIATION =\n             \"DELETE \" +\n             \"FROM IDN_CORS_ASSOCIATION \" +\n-            \"WHERE IDN_CORS_ORIGIN_ID = :IDN_CORS_ORIGIN_ID; AND SP_APP_ID = :SP_APP_ID;\";\n+            \"WHERE IDN_CORS_ORIGIN_ID = ? AND SP_APP_ID = ?\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1baaf86ae17fd031d50646866aa5e6b47359de50"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3ODA3MA==", "bodyText": "Since we are using a UUID and the db scema reflects the property as a UUID, isn't it better to keep the initial naming in order to have more consistency? WDYT?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3132#discussion_r497078070", "createdAt": "2020-09-29T21:43:55Z", "author": {"login": "ivantha"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/SchemaConstants.java", "diffHunk": "@@ -13,7 +13,7 @@\n         public static final String ID = \"ID\";\n         public static final String TENANT_ID = \"TENANT_ID\";\n         public static final String ORIGIN = \"ORIGIN\";\n-        public static final String UUID = \"UUID\";\n+        public static final String UNIQUE_ID = \"UUID\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1baaf86ae17fd031d50646866aa5e6b47359de50"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3ODkwNg==", "bodyText": "Does this work for the NamedPreparedStatement without the initial RETURN_GENERATED_KEYS parameter?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3132#discussion_r497078906", "createdAt": "2020-09-29T21:45:02Z", "author": {"login": "ivantha"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/test/CORSManagementServiceTests.java", "diffHunk": "@@ -150,17 +149,17 @@ public void testGetCORSOriginsWithApplication() throws CORSManagementServiceExce\n         try (Connection connection = IdentityDatabaseUtil.getDBConnection(true)) {\n             try {\n                 for (String origin : SAMPLE_ORIGIN_LIST_1) {\n-                    try (PreparedStatement preparedStatement2 =\n-                                 connection.prepareStatement(INSERT_CORS_ORIGIN, RETURN_GENERATED_KEYS)) {\n+                    try (NamedPreparedStatement namedPreparedStatement =\n+                                 new NamedPreparedStatement(connection, INSERT_CORS_ORIGIN)) {\n                         // Origin is not present. Therefore add an origin.\n-                        preparedStatement2.setInt(1, SampleTenant.ID);\n-                        preparedStatement2.setString(2, origin);\n-                        preparedStatement2.setString(3, UUID.randomUUID().toString().replace(\"-\", \"\"));\n-                        preparedStatement2.executeUpdate();\n+                        namedPreparedStatement.setInt(1, SampleTenant.ID);\n+                        namedPreparedStatement.setString(2, origin);\n+                        namedPreparedStatement.setString(3, UUID.randomUUID().toString());\n+                        namedPreparedStatement.executeUpdate();\n \n                         // Get origin id.\n                         int corsOriginId;\n-                        try (ResultSet resultSet = preparedStatement2.getGeneratedKeys()) {\n+                        try (ResultSet resultSet = namedPreparedStatement.getGeneratedKeys()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1baaf86ae17fd031d50646866aa5e6b47359de50"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDYyNDU1", "url": "https://github.com/wso2/carbon-identity-framework/pull/3132#pullrequestreview-499062455", "createdAt": "2020-09-30T03:36:55Z", "commit": {"oid": "1baaf86ae17fd031d50646866aa5e6b47359de50"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDY2MDAy", "url": "https://github.com/wso2/carbon-identity-framework/pull/3132#pullrequestreview-499066002", "createdAt": "2020-09-30T03:50:16Z", "commit": {"oid": "1baaf86ae17fd031d50646866aa5e6b47359de50"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2199, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}