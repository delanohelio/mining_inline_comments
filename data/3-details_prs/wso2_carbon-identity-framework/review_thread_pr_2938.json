{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MDU2MzYw", "number": 2938, "reviewThreads": {"totalCount": 64, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyODowNlrOD9Indw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODo1NzoxN1rOEicdhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMwOTAzOnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/CORSService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyODowNlrOGWeKEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNToxOTo1OFrOGWeUXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTk1NA==", "bodyText": "Shall we fix formatting errors here?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426215954", "createdAt": "2020-05-17T04:28:06Z", "author": {"login": "somindatommy"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/CORSService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors;\n+\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+\n+import java.util.List;\n+\n+/**\n+ * Service for managing the CORS URLs of a tenant.\n+ */\n+public interface CORSService {\n+\n+    /**\n+     * Get all the CORS URLs belonging to a tenant.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @return List<String> Returns a list of CORS URLs configured by the tenant as strings.\n+     * @throws CORSServiceException\n+     */\n+    List<String> getCORSUrls(String tenantDomain) throws CORSServiceException;\n+\n+    /**\n+     * Set the CORS URLs for a tenant. This method replaces any existing URLs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4365f46da58f181afd49467ae6f9daad15b6d07b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTk2Nw==", "bodyText": "And shall we fix it in other places?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426215967", "createdAt": "2020-05-17T04:28:21Z", "author": {"login": "somindatommy"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/CORSService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors;\n+\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+\n+import java.util.List;\n+\n+/**\n+ * Service for managing the CORS URLs of a tenant.\n+ */\n+public interface CORSService {\n+\n+    /**\n+     * Get all the CORS URLs belonging to a tenant.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @return List<String> Returns a list of CORS URLs configured by the tenant as strings.\n+     * @throws CORSServiceException\n+     */\n+    List<String> getCORSUrls(String tenantDomain) throws CORSServiceException;\n+\n+    /**\n+     * Set the CORS URLs for a tenant. This method replaces any existing URLs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTk1NA=="}, "originalCommit": {"oid": "4365f46da58f181afd49467ae6f9daad15b6d07b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxODU4OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426218589", "createdAt": "2020-05-17T05:19:58Z", "author": {"login": "ivantha"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/CORSService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors;\n+\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+\n+import java.util.List;\n+\n+/**\n+ * Service for managing the CORS URLs of a tenant.\n+ */\n+public interface CORSService {\n+\n+    /**\n+     * Get all the CORS URLs belonging to a tenant.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @return List<String> Returns a list of CORS URLs configured by the tenant as strings.\n+     * @throws CORSServiceException\n+     */\n+    List<String> getCORSUrls(String tenantDomain) throws CORSServiceException;\n+\n+    /**\n+     * Set the CORS URLs for a tenant. This method replaces any existing URLs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTk1NA=="}, "originalCommit": {"oid": "4365f46da58f181afd49467ae6f9daad15b6d07b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMwOTI4OnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/exception/CORSServiceException.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyOTowMlrOGWeKNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNToxMDozOFrOGWeScw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTk5MA==", "bodyText": "Shall we add the wso2 license?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426215990", "createdAt": "2020-05-17T04:29:02Z", "author": {"login": "somindatommy"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/exception/CORSServiceException.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4365f46da58f181afd49467ae6f9daad15b6d07b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTk5OQ==", "bodyText": "Shall we add a class comment as well?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426215999", "createdAt": "2020-05-17T04:29:20Z", "author": {"login": "somindatommy"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/exception/CORSServiceException.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTk5MA=="}, "originalCommit": {"oid": "4365f46da58f181afd49467ae6f9daad15b6d07b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxODA5OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426218099", "createdAt": "2020-05-17T05:10:38Z", "author": {"login": "ivantha"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/exception/CORSServiceException.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTk5MA=="}, "originalCommit": {"oid": "4365f46da58f181afd49467ae6f9daad15b6d07b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMwOTg3OnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/CORSServiceComponent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDozMDoxN1rOGWeKeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNToxMDoyOFrOGWeSZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNjA1Ng==", "bodyText": "Shall we remove the extra white space here?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426216056", "createdAt": "2020-05-17T04:30:17Z", "author": {"login": "somindatommy"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/CORSServiceComponent.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.CORSService;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.impl.CORSServiceImpl;\n+\n+/**\n+ * Service component class for CORS-Service.\n+ */\n+@Component(\n+        name = \"identity.configuration.management.server.cors.component\",\n+        immediate = true\n+)\n+public class CORSServiceComponent {\n+\n+    private static final Log log = LogFactory.getLog(CORSServiceComponent.class);\n+\n+    @Activate\n+    protected void activate(ComponentContext context) {\n+\n+        context.getBundleContext()\n+                .registerService(CORSService.class, new CORSServiceImpl(), null);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"CORSServiceComponent is activated.\");\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deactivate(ComponentContext context) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"CORSServiceComponent is deactivated.\");\n+        }\n+    }\n+\n+    @Reference(\n+            name = \"resource.configuration.manager\",\n+            service = ConfigurationManager.class,\n+            cardinality = ReferenceCardinality.MANDATORY,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetConfigurationManager\"\n+    )\n+    protected void setConfigurationManager(ConfigurationManager configurationManager) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Setting the ConfigurationManager.\");\n+        }\n+        CORSServiceHolder.getInstance().setConfigurationManager(configurationManager);\n+    }\n+\n+    protected void unsetConfigurationManager(ConfigurationManager configurationManager) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Unsetting the ConfigurationManager.\");\n+        }\n+        CORSServiceHolder.getInstance().setConfigurationManager(null);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4365f46da58f181afd49467ae6f9daad15b6d07b"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNjExMA==", "bodyText": "And shall we fix it other relevant places?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426216110", "createdAt": "2020-05-17T04:31:18Z", "author": {"login": "somindatommy"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/CORSServiceComponent.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.CORSService;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.impl.CORSServiceImpl;\n+\n+/**\n+ * Service component class for CORS-Service.\n+ */\n+@Component(\n+        name = \"identity.configuration.management.server.cors.component\",\n+        immediate = true\n+)\n+public class CORSServiceComponent {\n+\n+    private static final Log log = LogFactory.getLog(CORSServiceComponent.class);\n+\n+    @Activate\n+    protected void activate(ComponentContext context) {\n+\n+        context.getBundleContext()\n+                .registerService(CORSService.class, new CORSServiceImpl(), null);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"CORSServiceComponent is activated.\");\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deactivate(ComponentContext context) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"CORSServiceComponent is deactivated.\");\n+        }\n+    }\n+\n+    @Reference(\n+            name = \"resource.configuration.manager\",\n+            service = ConfigurationManager.class,\n+            cardinality = ReferenceCardinality.MANDATORY,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetConfigurationManager\"\n+    )\n+    protected void setConfigurationManager(ConfigurationManager configurationManager) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Setting the ConfigurationManager.\");\n+        }\n+        CORSServiceHolder.getInstance().setConfigurationManager(configurationManager);\n+    }\n+\n+    protected void unsetConfigurationManager(ConfigurationManager configurationManager) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Unsetting the ConfigurationManager.\");\n+        }\n+        CORSServiceHolder.getInstance().setConfigurationManager(null);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNjA1Ng=="}, "originalCommit": {"oid": "4365f46da58f181afd49467ae6f9daad15b6d07b"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxODA4NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426218085", "createdAt": "2020-05-17T05:10:28Z", "author": {"login": "ivantha"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/CORSServiceComponent.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.CORSService;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.impl.CORSServiceImpl;\n+\n+/**\n+ * Service component class for CORS-Service.\n+ */\n+@Component(\n+        name = \"identity.configuration.management.server.cors.component\",\n+        immediate = true\n+)\n+public class CORSServiceComponent {\n+\n+    private static final Log log = LogFactory.getLog(CORSServiceComponent.class);\n+\n+    @Activate\n+    protected void activate(ComponentContext context) {\n+\n+        context.getBundleContext()\n+                .registerService(CORSService.class, new CORSServiceImpl(), null);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"CORSServiceComponent is activated.\");\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deactivate(ComponentContext context) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"CORSServiceComponent is deactivated.\");\n+        }\n+    }\n+\n+    @Reference(\n+            name = \"resource.configuration.manager\",\n+            service = ConfigurationManager.class,\n+            cardinality = ReferenceCardinality.MANDATORY,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetConfigurationManager\"\n+    )\n+    protected void setConfigurationManager(ConfigurationManager configurationManager) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Setting the ConfigurationManager.\");\n+        }\n+        CORSServiceHolder.getInstance().setConfigurationManager(configurationManager);\n+    }\n+\n+    protected void unsetConfigurationManager(ConfigurationManager configurationManager) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Unsetting the ConfigurationManager.\");\n+        }\n+        CORSServiceHolder.getInstance().setConfigurationManager(null);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNjA1Ng=="}, "originalCommit": {"oid": "4365f46da58f181afd49467ae6f9daad15b6d07b"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDYxNzkyOnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/test/resources/testng.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMjozOToxN1rOGWgpgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMjozOToxN1rOGWgpgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1Njc3MQ==", "bodyText": "Shall we update the license?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426256771", "createdAt": "2020-05-17T12:39:17Z", "author": {"login": "somindatommy"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/test/resources/testng.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<!--", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42fc33aa567bcf83cba6e85a98663524bcb1e851"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDYxOTA5OnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/test/java/org/wso2/carbon/identity/configuration/mgt/server/cors/util/TestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMjo0MDo1NFrOGWgqJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMjo0MDo1NFrOGWgqJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NjkzNA==", "bodyText": "Shall we add a . at the end of the comment? Also, shall we fix this in other respective files as well?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426256934", "createdAt": "2020-05-17T12:40:54Z", "author": {"login": "somindatommy"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/test/java/org/wso2/carbon/identity/configuration/mgt/server/cors/util/TestUtils.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.util;\n+\n+import org.apache.commons.dbcp.BasicDataSource;\n+import org.apache.commons.lang.StringUtils;\n+\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.spy;\n+\n+/**\n+ * Utility class for CORSServiceTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42fc33aa567bcf83cba6e85a98663524bcb1e851"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDYyMDA2OnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMjo0MjozM1rOGWgquw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMjo0MjozM1rOGWgquw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NzA4Mw==", "bodyText": "Shall we remove the extra line?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426257083", "createdAt": "2020-05-17T12:42:33Z", "author": {"login": "somindatommy"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSServiceImpl.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.CORSService;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.CORSServiceHolder;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToAttribute;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.ResourceToCORSUrl;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSServiceImpl implements CORSService {\n+\n+    private static final Log log = LogFactory.getLog(CORSService.class);\n+\n+    @Override\n+    public List<String> getCORSUrls(String tenantDomain) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME);\n+            if (resource == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Tenant %s does not have any CORS URLs.\", tenantDomain));\n+                }\n+                throw new CORSServiceException(String.format(\"Tenant %s does not have any CORS URLs.\", tenantDomain));\n+            }\n+            List<String> urls = new ResourceToCORSUrl().apply(resource);\n+\n+            return urls;\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(\"Error while getting CORS URLs.\", e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSUrlResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSUrlToResourceAdd().apply(urls);\n+            getConfigurationManager().replaceResource(CORS_URL_RESOURCE_TYPE, resourceAdd);\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(\"Error while updating CORS URLs.\", e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSUrlResourceTypeIfNotExists();\n+\n+            for (String url : urls) {\n+                if (isInvalidUrl(url)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(\"%s is an invalid URL.\", url));\n+                    }\n+                    throw new CORSServiceException(String.format(\"%s is an invalid URL.\", url));\n+                }\n+                if (tenantHasCORSUrl(url)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(\"Tenant %s doesn't have %s as a CORS URL.\",\n+                                tenantDomain, url)));\n+                    }\n+                    throw new CORSServiceException(String.format(\"Tenant %s already has %s as a CORS URL.\",\n+                            tenantDomain, url));\n+                }\n+            }\n+\n+            for (String url : urls) {\n+                Attribute attribute = new CORSUrlToAttribute().apply(url);\n+                getConfigurationManager().addAttribute(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME, attribute);\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(\"Error while adding CORS URL.\", e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            for (String url : urls) {\n+                if (isInvalidUrl(url)) {\n+                    if (log.isErrorEnabled()) {\n+                        log.error(String.format(\"%s is an invalid URL.\", url));\n+                    }\n+                    throw new CORSServiceException(String.format(\"%s is an invalid URL.\", url));\n+                }\n+                if (!tenantHasCORSUrl(url)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(\"Tenant %s doesn't have %s as a CORS URL.\",\n+                                tenantDomain, url)));\n+                    }\n+                    throw new CORSServiceException(String.format(\"Tenant %s doesn't have %s as a CORS URL.\",\n+                            tenantDomain, url));\n+                }\n+            }\n+\n+            for (String url : urls) {\n+                Attribute attribute = new CORSUrlToAttribute().apply(url);\n+                getConfigurationManager().deleteAttribute(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(\"Error while deleting CORS URLs.\", e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Setting the tenant for the scenarios where the tenant is unavailable in context.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @return void\n+     */\n+    private void startTenantFlow(String tenantDomain) {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+        PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);\n+        PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantId(tenantId);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Tenant flow started for %s.\", tenantDomain));\n+        }\n+    }\n+\n+    /**\n+     * End the tenant flow started in startTenantFlow.\n+     *\n+     * @return void\n+     */\n+    private void endTenantFlow() {\n+\n+        PrivilegedCarbonContext.endTenantFlow();\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Tenant flow ended.\");\n+        }\n+    }\n+\n+    /**\n+     * Create a ResourceTypeAdd for CORS URL type.\n+     *\n+     * @return ResourceTypeAdd A resource type with CORS_URL_RESOURCE_TYPE set as the name.\n+     */\n+    private ResourceTypeAdd createCORSUrlResourceTypeToAdd() {\n+\n+        ResourceTypeAdd resourceTypeAdd = new ResourceTypeAdd();\n+        resourceTypeAdd.setName(CORS_URL_RESOURCE_TYPE);\n+        resourceTypeAdd.setDescription(\"CORS URLs\");\n+        return resourceTypeAdd;\n+    }\n+\n+    /**\n+     * Returns true if the CORS URL type is already in the ConfigurationManager.\n+     *\n+     * @return boolean true if the CORS URL resource type is already in the ConfigurationManager, false otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSUrlResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_URL_RESOURCE_TYPE);\n+        } catch (ConfigurationManagementClientException e) {\n+            if (ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS.getCode().equals(e.getErrorCode())) {\n+                return true;\n+            }\n+            throw e;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Add the CORS URL resource type to the ConfigurationManager if not already present.\n+     *\n+     * @return void\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSUrlResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSUrlResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSUrlResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the ConfigurationManager instance from the CORSServiceHolder.\n+     *\n+     * @return ConfigurationManager The ConfigurationManager instance.\n+     */\n+    private ConfigurationManager getConfigurationManager() {\n+\n+        return CORSServiceHolder.getInstance().getConfigurationManager();\n+    }\n+\n+    /**\n+     * Returns true if the tenant already has a particular CORS URL.\n+     *\n+     * @param url The URL to be checked against the existing URLs.\n+     * @return boolean true if the tenant already have the particular CORS URL, false otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean tenantHasCORSUrl(String url) throws ConfigurationManagementException {\n+\n+        Resource resource = getConfigurationManager().getResource(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME);\n+        if (resource != null) {\n+            List<String> currentUrls = new ResourceToCORSUrl().apply(resource);\n+\n+            return currentUrls.contains(url);\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Check if the format of the URL is valid.\n+     *\n+     * @param url URL to be checked for validity.\n+     * @return boolean true if the url is valid, false otherwise.\n+     */\n+    private boolean isInvalidUrl(String url) {\n+\n+        try {\n+            new URL(url).toURI();\n+        } catch (MalformedURLException | URISyntaxException e) {\n+            return true;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42fc33aa567bcf83cba6e85a98663524bcb1e851"}, "originalPosition": 285}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDYyMDc1OnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMjo0MzoyMVrOGWgrEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMjo0MzoyMVrOGWgrEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NzE3MQ==", "bodyText": "Shall we remove the extra line?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426257171", "createdAt": "2020-05-17T12:43:21Z", "author": {"login": "somindatommy"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSServiceImpl.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.CORSService;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.CORSServiceHolder;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToAttribute;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.ResourceToCORSUrl;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSServiceImpl implements CORSService {\n+\n+    private static final Log log = LogFactory.getLog(CORSService.class);\n+\n+    @Override\n+    public List<String> getCORSUrls(String tenantDomain) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME);\n+            if (resource == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Tenant %s does not have any CORS URLs.\", tenantDomain));\n+                }\n+                throw new CORSServiceException(String.format(\"Tenant %s does not have any CORS URLs.\", tenantDomain));\n+            }\n+            List<String> urls = new ResourceToCORSUrl().apply(resource);\n+\n+            return urls;\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(\"Error while getting CORS URLs.\", e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSUrlResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSUrlToResourceAdd().apply(urls);\n+            getConfigurationManager().replaceResource(CORS_URL_RESOURCE_TYPE, resourceAdd);\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(\"Error while updating CORS URLs.\", e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSUrlResourceTypeIfNotExists();\n+\n+            for (String url : urls) {\n+                if (isInvalidUrl(url)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(\"%s is an invalid URL.\", url));\n+                    }\n+                    throw new CORSServiceException(String.format(\"%s is an invalid URL.\", url));\n+                }\n+                if (tenantHasCORSUrl(url)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(\"Tenant %s doesn't have %s as a CORS URL.\",\n+                                tenantDomain, url)));\n+                    }\n+                    throw new CORSServiceException(String.format(\"Tenant %s already has %s as a CORS URL.\",\n+                            tenantDomain, url));\n+                }\n+            }\n+\n+            for (String url : urls) {\n+                Attribute attribute = new CORSUrlToAttribute().apply(url);\n+                getConfigurationManager().addAttribute(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME, attribute);\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(\"Error while adding CORS URL.\", e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            for (String url : urls) {\n+                if (isInvalidUrl(url)) {\n+                    if (log.isErrorEnabled()) {\n+                        log.error(String.format(\"%s is an invalid URL.\", url));\n+                    }\n+                    throw new CORSServiceException(String.format(\"%s is an invalid URL.\", url));\n+                }\n+                if (!tenantHasCORSUrl(url)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(\"Tenant %s doesn't have %s as a CORS URL.\",\n+                                tenantDomain, url)));\n+                    }\n+                    throw new CORSServiceException(String.format(\"Tenant %s doesn't have %s as a CORS URL.\",\n+                            tenantDomain, url));\n+                }\n+            }\n+\n+            for (String url : urls) {\n+                Attribute attribute = new CORSUrlToAttribute().apply(url);\n+                getConfigurationManager().deleteAttribute(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(\"Error while deleting CORS URLs.\", e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Setting the tenant for the scenarios where the tenant is unavailable in context.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @return void\n+     */\n+    private void startTenantFlow(String tenantDomain) {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+        PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);\n+        PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantId(tenantId);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Tenant flow started for %s.\", tenantDomain));\n+        }\n+    }\n+\n+    /**\n+     * End the tenant flow started in startTenantFlow.\n+     *\n+     * @return void\n+     */\n+    private void endTenantFlow() {\n+\n+        PrivilegedCarbonContext.endTenantFlow();\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Tenant flow ended.\");\n+        }\n+    }\n+\n+    /**\n+     * Create a ResourceTypeAdd for CORS URL type.\n+     *\n+     * @return ResourceTypeAdd A resource type with CORS_URL_RESOURCE_TYPE set as the name.\n+     */\n+    private ResourceTypeAdd createCORSUrlResourceTypeToAdd() {\n+\n+        ResourceTypeAdd resourceTypeAdd = new ResourceTypeAdd();\n+        resourceTypeAdd.setName(CORS_URL_RESOURCE_TYPE);\n+        resourceTypeAdd.setDescription(\"CORS URLs\");\n+        return resourceTypeAdd;\n+    }\n+\n+    /**\n+     * Returns true if the CORS URL type is already in the ConfigurationManager.\n+     *\n+     * @return boolean true if the CORS URL resource type is already in the ConfigurationManager, false otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSUrlResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_URL_RESOURCE_TYPE);\n+        } catch (ConfigurationManagementClientException e) {\n+            if (ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS.getCode().equals(e.getErrorCode())) {\n+                return true;\n+            }\n+            throw e;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Add the CORS URL resource type to the ConfigurationManager if not already present.\n+     *\n+     * @return void\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSUrlResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSUrlResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSUrlResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the ConfigurationManager instance from the CORSServiceHolder.\n+     *\n+     * @return ConfigurationManager The ConfigurationManager instance.\n+     */\n+    private ConfigurationManager getConfigurationManager() {\n+\n+        return CORSServiceHolder.getInstance().getConfigurationManager();\n+    }\n+\n+    /**\n+     * Returns true if the tenant already has a particular CORS URL.\n+     *\n+     * @param url The URL to be checked against the existing URLs.\n+     * @return boolean true if the tenant already have the particular CORS URL, false otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean tenantHasCORSUrl(String url) throws ConfigurationManagementException {\n+\n+        Resource resource = getConfigurationManager().getResource(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME);\n+        if (resource != null) {\n+            List<String> currentUrls = new ResourceToCORSUrl().apply(resource);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42fc33aa567bcf83cba6e85a98663524bcb1e851"}, "originalPosition": 265}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDYyMzE3OnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMjo0Njo0NVrOGWgsZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMjo0Njo0NVrOGWgsZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NzUwOA==", "bodyText": "For void methods, we do not have to specify the return type. Shall we remove it and fix other related places?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426257508", "createdAt": "2020-05-17T12:46:45Z", "author": {"login": "somindatommy"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSServiceImpl.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.CORSService;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.CORSServiceHolder;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToAttribute;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.ResourceToCORSUrl;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSServiceImpl implements CORSService {\n+\n+    private static final Log log = LogFactory.getLog(CORSService.class);\n+\n+    @Override\n+    public List<String> getCORSUrls(String tenantDomain) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME);\n+            if (resource == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Tenant %s does not have any CORS URLs.\", tenantDomain));\n+                }\n+                throw new CORSServiceException(String.format(\"Tenant %s does not have any CORS URLs.\", tenantDomain));\n+            }\n+            List<String> urls = new ResourceToCORSUrl().apply(resource);\n+\n+            return urls;\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(\"Error while getting CORS URLs.\", e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSUrlResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSUrlToResourceAdd().apply(urls);\n+            getConfigurationManager().replaceResource(CORS_URL_RESOURCE_TYPE, resourceAdd);\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(\"Error while updating CORS URLs.\", e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSUrlResourceTypeIfNotExists();\n+\n+            for (String url : urls) {\n+                if (isInvalidUrl(url)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(\"%s is an invalid URL.\", url));\n+                    }\n+                    throw new CORSServiceException(String.format(\"%s is an invalid URL.\", url));\n+                }\n+                if (tenantHasCORSUrl(url)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(\"Tenant %s doesn't have %s as a CORS URL.\",\n+                                tenantDomain, url)));\n+                    }\n+                    throw new CORSServiceException(String.format(\"Tenant %s already has %s as a CORS URL.\",\n+                            tenantDomain, url));\n+                }\n+            }\n+\n+            for (String url : urls) {\n+                Attribute attribute = new CORSUrlToAttribute().apply(url);\n+                getConfigurationManager().addAttribute(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME, attribute);\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(\"Error while adding CORS URL.\", e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            for (String url : urls) {\n+                if (isInvalidUrl(url)) {\n+                    if (log.isErrorEnabled()) {\n+                        log.error(String.format(\"%s is an invalid URL.\", url));\n+                    }\n+                    throw new CORSServiceException(String.format(\"%s is an invalid URL.\", url));\n+                }\n+                if (!tenantHasCORSUrl(url)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(\"Tenant %s doesn't have %s as a CORS URL.\",\n+                                tenantDomain, url)));\n+                    }\n+                    throw new CORSServiceException(String.format(\"Tenant %s doesn't have %s as a CORS URL.\",\n+                            tenantDomain, url));\n+                }\n+            }\n+\n+            for (String url : urls) {\n+                Attribute attribute = new CORSUrlToAttribute().apply(url);\n+                getConfigurationManager().deleteAttribute(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(\"Error while deleting CORS URLs.\", e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Setting the tenant for the scenarios where the tenant is unavailable in context.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @return void\n+     */\n+    private void startTenantFlow(String tenantDomain) {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+        PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);\n+        PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantId(tenantId);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Tenant flow started for %s.\", tenantDomain));\n+        }\n+    }\n+\n+    /**\n+     * End the tenant flow started in startTenantFlow.\n+     *\n+     * @return void", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42fc33aa567bcf83cba6e85a98663524bcb1e851"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQzNDIxOnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTowNzo0OFrOGWnsGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTowNzo0OFrOGWnsGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3MjEyMA==", "bodyText": "Shall we add the tenant domain to the exception message?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426372120", "createdAt": "2020-05-18T05:07:48Z", "author": {"login": "dewniMW"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSServiceImpl.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.CORSService;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.CORSServiceHolder;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToAttribute;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.ResourceToCORSUrl;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSServiceImpl implements CORSService {\n+\n+    private static final Log log = LogFactory.getLog(CORSService.class);\n+\n+    @Override\n+    public List<String> getCORSUrls(String tenantDomain) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME);\n+            if (resource == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Tenant %s does not have any CORS URLs.\", tenantDomain));\n+                }\n+                throw new CORSServiceException(String.format(\"Tenant %s does not have any CORS URLs.\", tenantDomain));\n+            }\n+            List<String> urls = new ResourceToCORSUrl().apply(resource);\n+\n+            return urls;\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(\"Error while getting CORS URLs.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13145b85a4a08792f8299cf8d2c34232abaefcf"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQzODQ3OnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/CORSService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNToxMDo0MlrOGWnumw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNToxMDo0MlrOGWnumw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3Mjc2Mw==", "bodyText": "End with a full stop. Do this in all applicable places.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426372763", "createdAt": "2020-05-18T05:10:42Z", "author": {"login": "dewniMW"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/CORSService.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors;\n+\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+\n+import java.util.List;\n+\n+/**\n+ * Service for managing the CORS URLs of a tenant.\n+ */\n+public interface CORSService {\n+\n+    /**\n+     * Get all the CORS URLs belonging to a tenant.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @return List<String> Returns a list of CORS URLs configured by the tenant as strings.\n+     * @throws CORSServiceException\n+     */\n+    List<String> getCORSUrls(String tenantDomain) throws CORSServiceException;\n+\n+    /**\n+     * Set the CORS URLs for a tenant. This method replaces any existing URLs.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @param urls A list of CORS URLs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13145b85a4a08792f8299cf8d2c34232abaefcf"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQ2Mzg2OnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNToyODowN1rOGWn9yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNToyODowN1rOGWn9yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NjY1MA==", "bodyText": "Add a new line", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426376650", "createdAt": "2020-05-18T05:28:07Z", "author": {"login": "ashensw"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/pom.xml", "diffHunk": "@@ -0,0 +1,129 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+\n+  WSO2 Inc. licenses this file to you under the Apache License,\n+  Version 2.0 (the \"License\"); you may not use this file except\n+  in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied. See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>configuration-mgt</artifactId>\n+        <version>5.17.85-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.configuration.mgt.server</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>WSO2 Carbon - Configuration Management Server</name>\n+    <description>Identity Configuration Management Server</description>\n+    <url>http://www.wso2.com</url>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.carbon</groupId>\n+            <artifactId>org.wso2.carbon.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.eclipse.osgi</groupId>\n+            <artifactId>org.eclipse.osgi.services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.configuration.mgt.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.logging</groupId>\n+            <artifactId>pax-logging-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.felix</groupId>\n+                <artifactId>maven-bundle-plugin</artifactId>\n+                <extensions>true</extensions>\n+                <configuration>\n+                    <instructions>\n+                        <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>\n+                        <Bundle-Name>${project.artifactId}</Bundle-Name>\n+                        <Private-Package>\n+                            org.wso2.carbon.identity.configuration.mgt.server.cors.internal\n+                        </Private-Package>\n+                        <Import-Package>\n+                            org.wso2.carbon.identity.configuration.mgt.core.*; version=\"${project.version}\",\n+                            org.osgi.framework; version=\"${osgi.framework.imp.pkg.version.range}\",\n+                            org.osgi.service.component; version=\"${osgi.service.component.imp.pkg.version.range}\",\n+                            org.apache.commons.logging; version=\"${import.package.version.commons.logging}\",\n+                        </Import-Package>\n+                        <Export-Package>\n+                            !org.wso2.carbon.identity.configuration.mgt.server.cors.internal,\n+                            org.wso2.carbon.identity.configuration.mgt.server.cors.*; version=\"${project.version}\",\n+                        </Export-Package>\n+                    </instructions>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>${maven.surefire.plugin.version}</version>\n+                <configuration>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-checkstyle-plugin</artifactId>\n+                <configuration>\n+                    <skip>false</skip>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>findbugs-maven-plugin</artifactId>\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13145b85a4a08792f8299cf8d2c34232abaefcf"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQ2ODcwOnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/function/CORSUrlToAttribute.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTozMToyM1rOGWoAwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTozMToyM1rOGWoAwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NzQwOQ==", "bodyText": "Remove unnecessary new lines.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426377409", "createdAt": "2020-05-18T05:31:23Z", "author": {"login": "ashensw"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/function/CORSUrlToAttribute.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function;\n+\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * Converts a string url to a ConfigurationManagement Resource attribute.\n+ */\n+public class CORSUrlToAttribute implements Function<String, Attribute> {\n+\n+    @Override\n+    public Attribute apply(String url) {\n+\n+        Attribute attribute = new Attribute(String.valueOf(url.hashCode()), url);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13145b85a4a08792f8299cf8d2c34232abaefcf"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQ2ODkwOnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/function/CORSUrlToResourceAdd.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTozMToyOVrOGWoA3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTozMToyOVrOGWoA3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NzQzNg==", "bodyText": "Remove unnecessary new lines.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426377436", "createdAt": "2020-05-18T05:31:29Z", "author": {"login": "ashensw"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/function/CORSUrlToResourceAdd.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function;\n+\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_NAME;\n+\n+/**\n+ * Converts a list of string urls to a ConfigurationManagement ResourceAdd object.\n+ */\n+public class CORSUrlToResourceAdd implements Function<List<String>, ResourceAdd> {\n+\n+    @Override\n+    public ResourceAdd apply(List<String> urls) {\n+\n+        ResourceAdd resourceAdd = new ResourceAdd();\n+        resourceAdd.setName(CORS_URL_RESOURCE_NAME);\n+\n+        List<Attribute> attributes = new ArrayList<>();\n+        for (String url : urls) {\n+            addAttribute(attributes, String.valueOf(url.hashCode()), url);\n+        }\n+        resourceAdd.setAttributes(attributes);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13145b85a4a08792f8299cf8d2c34232abaefcf"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQ2OTI2OnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/function/ResourceToCORSUrl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTozMTo0NVrOGWoBDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTozMTo0NVrOGWoBDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NzQ4Ng==", "bodyText": "Remove unnecessary new lines.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426377486", "createdAt": "2020-05-18T05:31:45Z", "author": {"login": "ashensw"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/function/ResourceToCORSUrl.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function;\n+\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Converts a ConfigurationManagement Resource to a list of string urls.\n+ */\n+public class ResourceToCORSUrl implements Function<Resource, List<String>> {\n+\n+    @Override\n+    public List<String> apply(Resource resource) {\n+\n+        ArrayList<String> urls = new ArrayList<>();\n+\n+        if (resource.isHasAttribute()) {\n+            List<Attribute> attributes = resource.getAttributes();\n+\n+            for (Attribute attribute : attributes) {\n+                urls.add(attribute.getValue());\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13145b85a4a08792f8299cf8d2c34232abaefcf"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQ2OTM0OnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/function/ResourceToCORSUrl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTozMTo0OVrOGWoBGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTozMTo0OVrOGWoBGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NzQ5Nw==", "bodyText": "Remove unnecessary new lines.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426377497", "createdAt": "2020-05-18T05:31:49Z", "author": {"login": "ashensw"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/function/ResourceToCORSUrl.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function;\n+\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Converts a ConfigurationManagement Resource to a list of string urls.\n+ */\n+public class ResourceToCORSUrl implements Function<Resource, List<String>> {\n+\n+    @Override\n+    public List<String> apply(Resource resource) {\n+\n+        ArrayList<String> urls = new ArrayList<>();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13145b85a4a08792f8299cf8d2c34232abaefcf"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTYwMTMwOnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/CORSManagementService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjozODo0NlrOGWpQ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjo0Mjo0NlrOGWpWmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM5NzkzMg==", "bodyText": "Add usually denotes and append.\nIt's fine to pass the list, but we should have another method to add just one origin. WDYT?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426397932", "createdAt": "2020-05-18T06:38:46Z", "author": {"login": "malithie"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/CORSManagementService.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors;\n+\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+\n+import java.util.List;\n+\n+/**\n+ * Service for managing the CORS URLs of a tenant.\n+ */\n+public interface CORSManagementService {\n+\n+    /**\n+     * Get all the CORS URLs belonging to a tenant.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @return List<String> Returns a list of CORS URLs configured by the tenant as strings.\n+     * @throws CORSServiceException\n+     */\n+    List<String> getCORSUrls(String tenantDomain) throws CORSServiceException;\n+\n+    /**\n+     * Set the CORS URLs for a tenant. This method replaces any existing URLs.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @param urls A list of CORS URLs.\n+     * @throws CORSServiceException\n+     */\n+    void setCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException;\n+\n+    /**\n+     * Add the CORS URL(s) to the existing URL list of the tenant.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @param urls A list of CORS URLs.\n+     * @throws CORSServiceException\n+     */\n+    void addCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f104b4ec15b942e3982827e7934eab7ec39ad7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM5ODcwOA==", "bodyText": "I had that and removed it since extra method seemed redundant when the method to add multiple origins can be used to add one origin as well.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426398708", "createdAt": "2020-05-18T06:40:57Z", "author": {"login": "ivantha"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/CORSManagementService.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors;\n+\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+\n+import java.util.List;\n+\n+/**\n+ * Service for managing the CORS URLs of a tenant.\n+ */\n+public interface CORSManagementService {\n+\n+    /**\n+     * Get all the CORS URLs belonging to a tenant.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @return List<String> Returns a list of CORS URLs configured by the tenant as strings.\n+     * @throws CORSServiceException\n+     */\n+    List<String> getCORSUrls(String tenantDomain) throws CORSServiceException;\n+\n+    /**\n+     * Set the CORS URLs for a tenant. This method replaces any existing URLs.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @param urls A list of CORS URLs.\n+     * @throws CORSServiceException\n+     */\n+    void setCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException;\n+\n+    /**\n+     * Add the CORS URL(s) to the existing URL list of the tenant.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @param urls A list of CORS URLs.\n+     * @throws CORSServiceException\n+     */\n+    void addCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM5NzkzMg=="}, "originalCommit": {"oid": "89f104b4ec15b942e3982827e7934eab7ec39ad7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM5OTM4NA==", "bodyText": "This method appends the list of new origins rather than replacing existing ones.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426399384", "createdAt": "2020-05-18T06:42:46Z", "author": {"login": "ivantha"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/CORSManagementService.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors;\n+\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+\n+import java.util.List;\n+\n+/**\n+ * Service for managing the CORS URLs of a tenant.\n+ */\n+public interface CORSManagementService {\n+\n+    /**\n+     * Get all the CORS URLs belonging to a tenant.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @return List<String> Returns a list of CORS URLs configured by the tenant as strings.\n+     * @throws CORSServiceException\n+     */\n+    List<String> getCORSUrls(String tenantDomain) throws CORSServiceException;\n+\n+    /**\n+     * Set the CORS URLs for a tenant. This method replaces any existing URLs.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @param urls A list of CORS URLs.\n+     * @throws CORSServiceException\n+     */\n+    void setCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException;\n+\n+    /**\n+     * Add the CORS URL(s) to the existing URL list of the tenant.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @param urls A list of CORS URLs.\n+     * @throws CORSServiceException\n+     */\n+    void addCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM5NzkzMg=="}, "originalCommit": {"oid": "89f104b4ec15b942e3982827e7934eab7ec39ad7"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTYwMzEyOnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/CORSManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjozOTo0MlrOGWpSFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjozOTo0MlrOGWpSFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM5ODIyOA==", "bodyText": "What if we say CORS origins than saying urls ?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426398228", "createdAt": "2020-05-18T06:39:42Z", "author": {"login": "malithie"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/CORSManagementService.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors;\n+\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+\n+import java.util.List;\n+\n+/**\n+ * Service for managing the CORS URLs of a tenant.\n+ */\n+public interface CORSManagementService {\n+\n+    /**\n+     * Get all the CORS URLs belonging to a tenant.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @return List<String> Returns a list of CORS URLs configured by the tenant as strings.\n+     * @throws CORSServiceException\n+     */\n+    List<String> getCORSUrls(String tenantDomain) throws CORSServiceException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f104b4ec15b942e3982827e7934eab7ec39ad7"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTY0MjA4OnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/exception/CORSServiceException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjo1NTowOVrOGWpp8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjo1NTowOVrOGWpp8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwNDMzOA==", "bodyText": "Don't we need to separate out client and server exception types. Shall we use extended exception types from here", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426404338", "createdAt": "2020-05-18T06:55:09Z", "author": {"login": "malithie"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/exception/CORSServiceException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.exception;\n+\n+/**\n+ * Base exception class for the CORSService.\n+ */\n+public class CORSServiceException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f104b4ec15b942e3982827e7934eab7ec39ad7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTY2NDkzOnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzowMzozNFrOGWp4Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTo0NjoxMlrOGk-Pzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwODAwNg==", "bodyText": "Does configuration manager supports caching", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426408006", "createdAt": "2020-05-18T07:03:34Z", "author": {"login": "malithie"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.CORSManagementService;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToAttribute;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.ResourceToCORSUrl;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementService.class);\n+\n+    @Override\n+    public List<String> getCORSUrls(String tenantDomain) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f104b4ec15b942e3982827e7934eab7ec39ad7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2MDA1Ng==", "bodyText": "Not yet. It has plans to support caching in the future. But it is not a priority at the moment.\n(@tharindu-bandara)\n@malithie The CORS Service should definitely have to support caching somewhere. Should we implement it here?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r427060056", "createdAt": "2020-05-19T06:32:49Z", "author": {"login": "ivantha"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.CORSManagementService;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToAttribute;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.ResourceToCORSUrl;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementService.class);\n+\n+    @Override\n+    public List<String> getCORSUrls(String tenantDomain) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwODAwNg=="}, "originalCommit": {"oid": "89f104b4ec15b942e3982827e7934eab7ec39ad7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQyMTc3NQ==", "bodyText": "Note: Cache will be added at the CORS valve.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r441421775", "createdAt": "2020-06-17T09:46:12Z", "author": {"login": "ivantha"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.CORSManagementService;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToAttribute;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.ResourceToCORSUrl;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementService.class);\n+\n+    @Override\n+    public List<String> getCORSUrls(String tenantDomain) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwODAwNg=="}, "originalCommit": {"oid": "89f104b4ec15b942e3982827e7934eab7ec39ad7"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTY2NzY1OnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzowNDo0MVrOGWp59Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzowNDo0MVrOGWp59Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwODQzNw==", "bodyText": "These exceptions should be some client type", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426408437", "createdAt": "2020-05-18T07:04:41Z", "author": {"login": "malithie"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.CORSManagementService;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToAttribute;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.ResourceToCORSUrl;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementService.class);\n+\n+    @Override\n+    public List<String> getCORSUrls(String tenantDomain) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME);\n+            if (resource == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Tenant %s does not have any CORS URLs.\", tenantDomain));\n+                }\n+                throw new CORSServiceException(String.format(\"Tenant %s does not have any CORS URLs.\", tenantDomain));\n+            }\n+            List<String> urls = new ResourceToCORSUrl().apply(resource);\n+\n+            return urls;\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(String.format(\"Error while getting the CORS URLs of %s.\", tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSUrlResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSUrlToResourceAdd().apply(urls);\n+            getConfigurationManager().replaceResource(CORS_URL_RESOURCE_TYPE, resourceAdd);\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(String.format(\"Error while updating the CORS URLs of %s.\", tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSUrlResourceTypeIfNotExists();\n+\n+            for (String url : urls) {\n+                if (isInvalidUrl(url)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(\"%s is an invalid URL.\", url));\n+                    }\n+                    throw new CORSServiceException(String.format(\"%s is an invalid URL.\", url));\n+                }\n+                if (tenantHasCORSUrl(url)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(\"Tenant %s doesn't have %s as a CORS URL.\",\n+                                tenantDomain, url)));\n+                    }\n+                    throw new CORSServiceException(String.format(\"Tenant %s already has %s as a CORS URL.\",\n+                            tenantDomain, url));\n+                }\n+            }\n+\n+            for (String url : urls) {\n+                Attribute attribute = new CORSUrlToAttribute().apply(url);\n+                getConfigurationManager().addAttribute(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME, attribute);\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(String.format(\"Error while adding the CORS URLs to %s.\", tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            for (String url : urls) {\n+                if (isInvalidUrl(url)) {\n+                    if (log.isErrorEnabled()) {\n+                        log.error(String.format(\"%s is an invalid URL.\", url));\n+                    }\n+                    throw new CORSServiceException(String.format(\"%s is an invalid URL.\", url));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f104b4ec15b942e3982827e7934eab7ec39ad7"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTY2OTc4OnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzowNToyOVrOGWp7Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzowNToyOVrOGWp7Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwODc3NQ==", "bodyText": "Can we log tenant domain for which tenant flow ended", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426408775", "createdAt": "2020-05-18T07:05:29Z", "author": {"login": "malithie"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/java/org/wso2/carbon/identity/configuration/mgt/server/cors/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.configuration.mgt.server.cors.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.CORSManagementService;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.exception.CORSServiceException;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToAttribute;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.CORSUrlToResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.server.cors.internal.function.ResourceToCORSUrl;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.configuration.mgt.server.cors.internal.Constants.CORS_URL_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementService.class);\n+\n+    @Override\n+    public List<String> getCORSUrls(String tenantDomain) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME);\n+            if (resource == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Tenant %s does not have any CORS URLs.\", tenantDomain));\n+                }\n+                throw new CORSServiceException(String.format(\"Tenant %s does not have any CORS URLs.\", tenantDomain));\n+            }\n+            List<String> urls = new ResourceToCORSUrl().apply(resource);\n+\n+            return urls;\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(String.format(\"Error while getting the CORS URLs of %s.\", tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSUrlResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSUrlToResourceAdd().apply(urls);\n+            getConfigurationManager().replaceResource(CORS_URL_RESOURCE_TYPE, resourceAdd);\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(String.format(\"Error while updating the CORS URLs of %s.\", tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSUrlResourceTypeIfNotExists();\n+\n+            for (String url : urls) {\n+                if (isInvalidUrl(url)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(\"%s is an invalid URL.\", url));\n+                    }\n+                    throw new CORSServiceException(String.format(\"%s is an invalid URL.\", url));\n+                }\n+                if (tenantHasCORSUrl(url)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(\"Tenant %s doesn't have %s as a CORS URL.\",\n+                                tenantDomain, url)));\n+                    }\n+                    throw new CORSServiceException(String.format(\"Tenant %s already has %s as a CORS URL.\",\n+                            tenantDomain, url));\n+                }\n+            }\n+\n+            for (String url : urls) {\n+                Attribute attribute = new CORSUrlToAttribute().apply(url);\n+                getConfigurationManager().addAttribute(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME, attribute);\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(String.format(\"Error while adding the CORS URLs to %s.\", tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSUrls(String tenantDomain, List<String> urls) throws CORSServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            for (String url : urls) {\n+                if (isInvalidUrl(url)) {\n+                    if (log.isErrorEnabled()) {\n+                        log.error(String.format(\"%s is an invalid URL.\", url));\n+                    }\n+                    throw new CORSServiceException(String.format(\"%s is an invalid URL.\", url));\n+                }\n+                if (!tenantHasCORSUrl(url)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(\"Tenant %s doesn't have %s as a CORS URL.\",\n+                                tenantDomain, url)));\n+                    }\n+                    throw new CORSServiceException(String.format(\"Tenant %s doesn't have %s as a CORS URL.\",\n+                            tenantDomain, url));\n+                }\n+            }\n+\n+            for (String url : urls) {\n+                Attribute attribute = new CORSUrlToAttribute().apply(url);\n+                getConfigurationManager().deleteAttribute(CORS_URL_RESOURCE_TYPE, CORS_URL_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSServiceException(String.format(\"Error while deleting the CORS URLs from %s.\", tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Setting the tenant for the scenarios where the tenant is unavailable in context.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     */\n+    private void startTenantFlow(String tenantDomain) {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+        PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);\n+        PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantId(tenantId);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Tenant flow started for %s.\", tenantDomain));\n+        }\n+    }\n+\n+    /**\n+     * End the tenant flow started in startTenantFlow.\n+     */\n+    private void endTenantFlow() {\n+\n+        PrivilegedCarbonContext.endTenantFlow();\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Tenant flow ended.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f104b4ec15b942e3982827e7934eab7ec39ad7"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTY3MTgwOnYy", "diffSide": "RIGHT", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/resources/META-INF/services.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzowNjowM1rOGWp8Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzowNjowM1rOGWp8Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwOTA2Mw==", "bodyText": "No need of soap service", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r426409063", "createdAt": "2020-05-18T07:06:03Z", "author": {"login": "malithie"}, "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.server/src/main/resources/META-INF/services.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<!--\n+ ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ ~\n+ ~ WSO2 Inc. licenses this file to you under the Apache License,\n+ ~ Version 2.0 (the \"License\"); you may not use this file except\n+ ~ in compliance with the License.\n+ ~ You may obtain a copy of the License at\n+ ~\n+ ~    http://www.apache.org/licenses/LICENSE-2.0\n+ ~\n+ ~ Unless required by applicable law or agreed to in writing,\n+ ~ software distributed under the License is distributed on an\n+ ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ ~ KIND, either express or implied.  See the License for the\n+ ~ specific language governing permissions and limitations\n+ ~ under the License.\n+ -->\n+<serviceGroup>\n+    <service name=\"CORSService\" scope=\"transportsession\">\n+        <transports>\n+            <transport>https</transport>\n+        </transports>\n+        <schema schemaNamespace=\"http://org.apache.axis2/xsd\" elementFormDefaultQualified=\"true\"/>\n+        <description>\n+            To handle CORS related functionality.\n+        </description>\n+        <parameter name=\"ServiceClass\">org.wso2.carbon.identity.configuration.mgt.server.cors.CORSManagementService</parameter>\n+    </service>\n+    <parameter name=\"hiddenService\" locked=\"true\">true</parameter>\n+</serviceGroup>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f104b4ec15b942e3982827e7934eab7ec39ad7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDgzNzExOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMTozNDoyNFrOGXcKqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMTozNDoyNFrOGXcKqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIzMTkxNA==", "bodyText": "Add a new line.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r427231914", "createdAt": "2020-05-19T11:34:24Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>cors-mgt</artifactId>\n+        <version>5.17.89-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.cors.mgt.core</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>WSO2 Carbon - CORS Management Core</name>\n+    <description>Identity CORS Management Core</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.carbon</groupId>\n+            <artifactId>org.wso2.carbon.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.eclipse.osgi</groupId>\n+            <artifactId>org.eclipse.osgi.services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.configuration.mgt.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-core</artifactId>\n+            <version>${com.fasterxml.jackson.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-annotations</artifactId>\n+            <version>${com.fasterxml.jackson.annotation.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+            <version>${com.fasterxml.jackson.annotation.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.logging</groupId>\n+            <artifactId>pax-logging-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.felix</groupId>\n+                <artifactId>maven-bundle-plugin</artifactId>\n+                <extensions>true</extensions>\n+                <configuration>\n+                    <instructions>\n+                        <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>\n+                        <Bundle-Name>${project.artifactId}</Bundle-Name>\n+                        <Private-Package>\n+                            org.wso2.carbon.identity.cors.mgt.core.internal\n+                        </Private-Package>\n+                        <Import-Package>\n+                            org.wso2.carbon.identity.configuration.mgt.core.*; version=\"${project.version}\",\n+                            org.osgi.framework; version=\"${osgi.framework.imp.pkg.version.range}\",\n+                            org.osgi.service.component; version=\"${osgi.service.component.imp.pkg.version.range}\",\n+                            org.apache.commons.logging; version=\"${import.package.version.commons.logging}\",\n+                        </Import-Package>\n+                        <Export-Package>\n+                            !org.wso2.carbon.identity.cors.mgt.core.internal,\n+                            org.wso2.carbon.identity.cors.mgt.core.*; version=\"${project.version}\",\n+                        </Export-Package>\n+                    </instructions>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>${maven.surefire.plugin.version}</version>\n+                <configuration>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-checkstyle-plugin</artifactId>\n+                <configuration>\n+                    <skip>false</skip>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>findbugs-maven-plugin</artifactId>\n+                <configuration>\n+                    <skip>false</skip>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "631feba2b4e1fea61588e1b7fe48f78afb6e791c"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDg2MzY5OnYy", "diffSide": "RIGHT", "path": "features/cors-mgt/org.wso2.carbon.identity.cors.mgt.server.feature/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMTo0MjowNFrOGXcbIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMTo0MjowNFrOGXcbIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIzNjEzMA==", "bodyText": "Add a new line.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r427236130", "createdAt": "2020-05-19T11:42:04Z", "author": {"login": "ashensw"}, "path": "features/cors-mgt/org.wso2.carbon.identity.cors.mgt.server.feature/pom.xml", "diffHunk": "@@ -0,0 +1,99 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~ WSO2 Inc. licenses this file to you under the Apache License,\n+  ~ Version 2.0 (the \"License\"); you may not use this file except\n+  ~ in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>cors-mgt-feature</artifactId>\n+        <version>5.17.89-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.cors.mgt.server.feature</artifactId>\n+    <packaging>pom</packaging>\n+    <name>WSO2 Carbon - CORS Management Feature</name>\n+    <url>http://wso2.org</url>\n+    <description>This feature contains the core bundles required for CORS management functionality.</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.cors.mgt.core</artifactId>\n+        </dependency>\n+    </dependencies>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.wso2.maven</groupId>\n+                <artifactId>carbon-p2-plugin</artifactId>\n+                <version>${carbon.p2.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>p2-feature-generation</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>p2-feature-gen</goal>\n+                        </goals>\n+                        <configuration>\n+                            <id>org.wso2.carbon.identity.cors.mgt.server</id>\n+                            <propertiesFile>../../etc/feature.properties</propertiesFile>\n+                            <adviceFile>\n+                                <properties>\n+                                    <propertyDef>org.wso2.carbon.p2.category.type:server</propertyDef>\n+                                </properties>\n+                            </adviceFile>\n+                            <bundles>\n+                                <bundleDef>org.wso2.carbon.identity.framework:org.wso2.carbon.identity.cors.mgt.core</bundleDef>\n+                            </bundles>\n+                            <importFeatures>\n+                                <importFeatureDef>org.wso2.carbon.database.utils:compatible:${org.wso2.carbon.database.utils.version}</importFeatureDef>\n+                                <importFeatureDef>org.wso2.carbon.identity.core.server:compatible:${identity.framework.version}</importFeatureDef>\n+                            </importFeatures>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-antrun-plugin</artifactId>\n+                <version>1.1</version>\n+                <executions>\n+                    <execution>\n+                        <id>clean_target</id>\n+                        <phase>install</phase>\n+                        <configuration>\n+                            <tasks>\n+                                <delete dir=\"src/main/resources\" />\n+                                <delete dir=\"src/main\" />\n+                                <delete dir=\"src\" />\n+                            </tasks>\n+                        </configuration>\n+                        <goals>\n+                            <goal>run</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "631feba2b4e1fea61588e1b7fe48f78afb6e791c"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjIxODkyOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTo0MjowOVrOGkXcgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTo0MjowOVrOGkXcgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4NjA0OQ==", "bodyText": "Make sure to update all the new pom files to the latest version before merging the PR.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440786049", "createdAt": "2020-06-16T11:42:09Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,176 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>cors-mgt</artifactId>\n+        <version>5.17.91-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjI0MTM0OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTo0OTozMVrOGkXqcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTo0OTozMVrOGkXqcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4OTYxOA==", "bodyText": "Better not to skip these plugins as this is a new component.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440789618", "createdAt": "2020-06-16T11:49:31Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,176 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>cors-mgt</artifactId>\n+        <version>5.17.91-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.cors.mgt.core</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>WSO2 Carbon - CORS Management Core</name>\n+    <description>Identity CORS Management Core</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.carbon</groupId>\n+            <artifactId>org.wso2.carbon.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.eclipse.osgi</groupId>\n+            <artifactId>org.eclipse.osgi.services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.configuration.mgt.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-core</artifactId>\n+            <version>${com.fasterxml.jackson.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-annotations</artifactId>\n+            <version>${com.fasterxml.jackson.annotation.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+            <version>${com.fasterxml.jackson.annotation.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.logging</groupId>\n+            <artifactId>pax-logging-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.felix</groupId>\n+                <artifactId>maven-bundle-plugin</artifactId>\n+                <extensions>true</extensions>\n+                <configuration>\n+                    <instructions>\n+                        <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>\n+                        <Bundle-Name>${project.artifactId}</Bundle-Name>\n+                        <Private-Package>\n+                            org.wso2.carbon.identity.cors.mgt.core.internal\n+                        </Private-Package>\n+                        <Import-Package>\n+                            org.wso2.carbon.identity.configuration.mgt.core.*; version=\"${project.version}\",\n+                            org.osgi.framework; version=\"${osgi.framework.imp.pkg.version.range}\",\n+                            org.osgi.service.component; version=\"${osgi.service.component.imp.pkg.version.range}\",\n+                            org.apache.commons.logging; version=\"${import.package.version.commons.logging}\",\n+                        </Import-Package>\n+                        <Export-Package>\n+                            !org.wso2.carbon.identity.cors.mgt.core.internal,\n+                            org.wso2.carbon.identity.cors.mgt.core.*; version=\"${project.version}\",\n+                        </Export-Package>\n+                    </instructions>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>${maven.surefire.plugin.version}</version>\n+                <configuration>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <version>${jacoco.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>default-prepare-agent</id>\n+                        <goals>\n+                            <goal>prepare-agent</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-prepare-agent-integration</id>\n+                        <goals>\n+                            <goal>prepare-agent-integration</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report</id>\n+                        <goals>\n+                            <goal>report</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report-integration</id>\n+                        <goals>\n+                            <goal>report-integration</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-check</id>\n+                        <goals>\n+                            <goal>check</goal>\n+                        </goals>\n+                        <configuration>\n+                            <rules>\n+                                <rule implementation=\"org.jacoco.maven.RuleConfiguration\">\n+                                    <element>BUNDLE</element>\n+                                    <limits>\n+                                        <limit implementation=\"org.jacoco.report.check.Limit\">\n+                                            <counter>COMPLEXITY</counter>\n+                                            <value>COVEREDRATIO</value>\n+                                            <!--<minimum>0.60</minimum>-->\n+                                        </limit>\n+                                    </limits>\n+                                </rule>\n+                            </rules>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-checkstyle-plugin</artifactId>\n+                <configuration>\n+                    <skip>false</skip>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>findbugs-maven-plugin</artifactId>\n+                <configuration>\n+                    <skip>false</skip>\n+                </configuration>\n+            </plugin>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzE5MzIxOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToyODo1OVrOGkhArw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToyOTo1MFrOGkhDEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0Mjc2Nw==", "bodyText": "add WSO2 license", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440942767", "createdAt": "2020-06-16T15:28:59Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,176 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MzM3OQ==", "bodyText": "you can configure your IDE to automatically add it to any new files..", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440943379", "createdAt": "2020-06-16T15:29:50Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,176 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0Mjc2Nw=="}, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzIwMTA5OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozMDo0NVrOGkhFxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozMDo0NVrOGkhFxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NDA3MQ==", "bodyText": "move dependency versions to parent pom.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440944071", "createdAt": "2020-06-16T15:30:45Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,176 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>cors-mgt</artifactId>\n+        <version>5.17.91-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.cors.mgt.core</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>WSO2 Carbon - CORS Management Core</name>\n+    <description>Identity CORS Management Core</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.carbon</groupId>\n+            <artifactId>org.wso2.carbon.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.eclipse.osgi</groupId>\n+            <artifactId>org.eclipse.osgi.services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.configuration.mgt.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-core</artifactId>\n+            <version>${com.fasterxml.jackson.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzIwMjQwOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozMDo1OVrOGkhGhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozMDo1OVrOGkhGhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NDI2MQ==", "bodyText": "move dependency versions to parent pom.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440944261", "createdAt": "2020-06-16T15:30:59Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,176 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>cors-mgt</artifactId>\n+        <version>5.17.91-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.cors.mgt.core</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>WSO2 Carbon - CORS Management Core</name>\n+    <description>Identity CORS Management Core</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.carbon</groupId>\n+            <artifactId>org.wso2.carbon.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.eclipse.osgi</groupId>\n+            <artifactId>org.eclipse.osgi.services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.configuration.mgt.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-core</artifactId>\n+            <version>${com.fasterxml.jackson.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-annotations</artifactId>\n+            <version>${com.fasterxml.jackson.annotation.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzIwMzY2OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozMToxMlrOGkhHSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozMToxMlrOGkhHSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NDQ1Ng==", "bodyText": "move dependency versions to parent pom.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440944456", "createdAt": "2020-06-16T15:31:12Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,176 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>cors-mgt</artifactId>\n+        <version>5.17.91-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.cors.mgt.core</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>WSO2 Carbon - CORS Management Core</name>\n+    <description>Identity CORS Management Core</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.carbon</groupId>\n+            <artifactId>org.wso2.carbon.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.eclipse.osgi</groupId>\n+            <artifactId>org.eclipse.osgi.services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.configuration.mgt.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-core</artifactId>\n+            <version>${com.fasterxml.jackson.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-annotations</artifactId>\n+            <version>${com.fasterxml.jackson.annotation.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+            <version>${com.fasterxml.jackson.annotation.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzIxMTY2OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozMzowMlrOGkhMZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDozNjoyNVrOGk1TUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NTc2NQ==", "bodyText": "can't we uncomment this since there are sufficient tests?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440945765", "createdAt": "2020-06-16T15:33:02Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,176 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>cors-mgt</artifactId>\n+        <version>5.17.91-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.cors.mgt.core</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>WSO2 Carbon - CORS Management Core</name>\n+    <description>Identity CORS Management Core</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.carbon</groupId>\n+            <artifactId>org.wso2.carbon.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.eclipse.osgi</groupId>\n+            <artifactId>org.eclipse.osgi.services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.configuration.mgt.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-core</artifactId>\n+            <version>${com.fasterxml.jackson.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-annotations</artifactId>\n+            <version>${com.fasterxml.jackson.annotation.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+            <version>${com.fasterxml.jackson.annotation.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.logging</groupId>\n+            <artifactId>pax-logging-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.felix</groupId>\n+                <artifactId>maven-bundle-plugin</artifactId>\n+                <extensions>true</extensions>\n+                <configuration>\n+                    <instructions>\n+                        <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>\n+                        <Bundle-Name>${project.artifactId}</Bundle-Name>\n+                        <Private-Package>\n+                            org.wso2.carbon.identity.cors.mgt.core.internal\n+                        </Private-Package>\n+                        <Import-Package>\n+                            org.wso2.carbon.identity.configuration.mgt.core.*; version=\"${project.version}\",\n+                            org.osgi.framework; version=\"${osgi.framework.imp.pkg.version.range}\",\n+                            org.osgi.service.component; version=\"${osgi.service.component.imp.pkg.version.range}\",\n+                            org.apache.commons.logging; version=\"${import.package.version.commons.logging}\",\n+                        </Import-Package>\n+                        <Export-Package>\n+                            !org.wso2.carbon.identity.cors.mgt.core.internal,\n+                            org.wso2.carbon.identity.cors.mgt.core.*; version=\"${project.version}\",\n+                        </Export-Package>\n+                    </instructions>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>${maven.surefire.plugin.version}</version>\n+                <configuration>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <version>${jacoco.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>default-prepare-agent</id>\n+                        <goals>\n+                            <goal>prepare-agent</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-prepare-agent-integration</id>\n+                        <goals>\n+                            <goal>prepare-agent-integration</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report</id>\n+                        <goals>\n+                            <goal>report</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report-integration</id>\n+                        <goals>\n+                            <goal>report-integration</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-check</id>\n+                        <goals>\n+                            <goal>check</goal>\n+                        </goals>\n+                        <configuration>\n+                            <rules>\n+                                <rule implementation=\"org.jacoco.maven.RuleConfiguration\">\n+                                    <element>BUNDLE</element>\n+                                    <limits>\n+                                        <limit implementation=\"org.jacoco.report.check.Limit\">\n+                                            <counter>COMPLEXITY</counter>\n+                                            <value>COVEREDRATIO</value>\n+                                            <!--<minimum>0.60</minimum>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NTIxOQ==", "bodyText": "Used 0.5 as the overall coverage was 0.52", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r441275219", "createdAt": "2020-06-17T04:36:25Z", "author": {"login": "ivantha"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,176 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>cors-mgt</artifactId>\n+        <version>5.17.91-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.cors.mgt.core</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>WSO2 Carbon - CORS Management Core</name>\n+    <description>Identity CORS Management Core</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.carbon</groupId>\n+            <artifactId>org.wso2.carbon.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.eclipse.osgi</groupId>\n+            <artifactId>org.eclipse.osgi.services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.configuration.mgt.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-core</artifactId>\n+            <version>${com.fasterxml.jackson.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-annotations</artifactId>\n+            <version>${com.fasterxml.jackson.annotation.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+            <version>${com.fasterxml.jackson.annotation.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.logging</groupId>\n+            <artifactId>pax-logging-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.felix</groupId>\n+                <artifactId>maven-bundle-plugin</artifactId>\n+                <extensions>true</extensions>\n+                <configuration>\n+                    <instructions>\n+                        <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>\n+                        <Bundle-Name>${project.artifactId}</Bundle-Name>\n+                        <Private-Package>\n+                            org.wso2.carbon.identity.cors.mgt.core.internal\n+                        </Private-Package>\n+                        <Import-Package>\n+                            org.wso2.carbon.identity.configuration.mgt.core.*; version=\"${project.version}\",\n+                            org.osgi.framework; version=\"${osgi.framework.imp.pkg.version.range}\",\n+                            org.osgi.service.component; version=\"${osgi.service.component.imp.pkg.version.range}\",\n+                            org.apache.commons.logging; version=\"${import.package.version.commons.logging}\",\n+                        </Import-Package>\n+                        <Export-Package>\n+                            !org.wso2.carbon.identity.cors.mgt.core.internal,\n+                            org.wso2.carbon.identity.cors.mgt.core.*; version=\"${project.version}\",\n+                        </Export-Package>\n+                    </instructions>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>${maven.surefire.plugin.version}</version>\n+                <configuration>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <version>${jacoco.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>default-prepare-agent</id>\n+                        <goals>\n+                            <goal>prepare-agent</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-prepare-agent-integration</id>\n+                        <goals>\n+                            <goal>prepare-agent-integration</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report</id>\n+                        <goals>\n+                            <goal>report</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report-integration</id>\n+                        <goals>\n+                            <goal>report-integration</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-check</id>\n+                        <goals>\n+                            <goal>check</goal>\n+                        </goals>\n+                        <configuration>\n+                            <rules>\n+                                <rule implementation=\"org.jacoco.maven.RuleConfiguration\">\n+                                    <element>BUNDLE</element>\n+                                    <limits>\n+                                        <limit implementation=\"org.jacoco.report.check.Limit\">\n+                                            <counter>COMPLEXITY</counter>\n+                                            <value>COVEREDRATIO</value>\n+                                            <!--<minimum>0.60</minimum>-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NTc2NQ=="}, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzIzMDMzOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/exception/CORSManagementServiceClientException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozNzoyMlrOGkhZCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1MTowOVrOGkiAuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0OTAwMg==", "bodyText": "let's define the constructor with error code and define internal errror codes (client & server) for CORS related exceptions", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440949002", "createdAt": "2020-06-16T15:37:22Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/exception/CORSManagementServiceClientException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.exception;\n+\n+/**\n+ * Client exception class for the CORSService.\n+ */\n+public class CORSManagementServiceClientException extends CORSManagementServiceException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1OTE2Mw==", "bodyText": "use https://github.com/wso2/carbon-identity-framework/blob/master/components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/constant/ConfigurationConstants.java#L73 for reference", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440959163", "createdAt": "2020-06-16T15:51:09Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/exception/CORSManagementServiceClientException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.exception;\n+\n+/**\n+ * Client exception class for the CORSService.\n+ */\n+public class CORSManagementServiceClientException extends CORSManagementServiceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0OTAwMg=="}, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI1NjEzOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0MzowN1rOGkhpnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0MzowN1rOGkhpnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MzI0NQ==", "bodyText": "change to CORSManagementServiceImpl.class", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440953245", "createdAt": "2020-06-16T15:43:07Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI2NjMyOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0NToyOFrOGkhwRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0NToyOFrOGkhwRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1NDk1MA==", "bodyText": "why are we throwing an exception if CORS origins are not available for a tenant? IMO we should return empty list.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440954950", "createdAt": "2020-06-16T15:45:28Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementService.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            if (resource == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Tenant %s does not have any CORS Origins.\", tenantDomain));\n+                }\n+                throw new CORSManagementServiceClientException(String.format(\"Tenant %s does not have any CORS \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI3MjAzOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0Njo0OFrOGkhz6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0Njo0OFrOGkhz6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1NTg4Mg==", "bodyText": "AFAIR there was an identity util method to start/end tenant flow.. its better if we can re-use that.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440955882", "createdAt": "2020-06-16T15:46:48Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementService.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI3NjkwOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0Nzo1MFrOGkh3Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0Nzo1MFrOGkh3Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1NjY4Mg==", "bodyText": "can corsOrigins be null here? if so, handle null check", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440956682", "createdAt": "2020-06-16T15:47:50Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementService.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            if (resource == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Tenant %s does not have any CORS Origins.\", tenantDomain));\n+                }\n+                throw new CORSManagementServiceClientException(String.format(\"Tenant %s does not have any CORS \" +\n+                        \"Origins.\", tenantDomain));\n+            }\n+            List<CORSOrigin> corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSManagementServiceServerException(String.format(\"Error while getting the CORS Origins of \" +\n+                    \"%s.\", tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE, resourceAdd);\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSManagementServiceServerException(String.format(\"Error while updating the CORS Origins of \" +\n+                    \"%s.\", tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI4MTc2OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0ODo1NlrOGkh6Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0ODo1NlrOGkh6Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1NzUyMg==", "bodyText": "debug log should be 'tenant already has CORS origin' right?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440957522", "createdAt": "2020-06-16T15:48:56Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementService.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            if (resource == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Tenant %s does not have any CORS Origins.\", tenantDomain));\n+                }\n+                throw new CORSManagementServiceClientException(String.format(\"Tenant %s does not have any CORS \" +\n+                        \"Origins.\", tenantDomain));\n+            }\n+            List<CORSOrigin> corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSManagementServiceServerException(String.format(\"Error while getting the CORS Origins of \" +\n+                    \"%s.\", tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE, resourceAdd);\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSManagementServiceServerException(String.format(\"Error while updating the CORS Origins of \" +\n+                    \"%s.\", tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (isInvalidOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(\"%s is an invalid Origin.\", corsOrigin));\n+                    }\n+                    throw new CORSManagementServiceClientException(String.format(\"%s is an invalid Origin.\",\n+                            corsOrigin));\n+                }\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(\"Tenant %s doesn't have %s as a CORS Origin.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI5NzU5OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1MjozMlrOGkiEmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1MjozMlrOGkiEmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2MDE1NQ==", "bodyText": "define a constant for \"CORS Origins\"", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440960155", "createdAt": "2020-06-16T15:52:32Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementService.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            if (resource == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(\"Tenant %s does not have any CORS Origins.\", tenantDomain));\n+                }\n+                throw new CORSManagementServiceClientException(String.format(\"Tenant %s does not have any CORS \" +\n+                        \"Origins.\", tenantDomain));\n+            }\n+            List<CORSOrigin> corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSManagementServiceServerException(String.format(\"Error while getting the CORS Origins of \" +\n+                    \"%s.\", tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE, resourceAdd);\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSManagementServiceServerException(String.format(\"Error while updating the CORS Origins of \" +\n+                    \"%s.\", tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (isInvalidOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(\"%s is an invalid Origin.\", corsOrigin));\n+                    }\n+                    throw new CORSManagementServiceClientException(String.format(\"%s is an invalid Origin.\",\n+                            corsOrigin));\n+                }\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(\"Tenant %s doesn't have %s as a CORS Origin.\",\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw new CORSManagementServiceClientException(String.format(\"Tenant %s already has %s as a \" +\n+                                    \"CORS Origin.\",\n+                            tenantDomain, corsOrigin));\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE, CORS_ORIGIN_RESOURCE_NAME, attribute);\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSManagementServiceServerException(String.format(\"Error while adding the CORS Origins to %s.\",\n+                    tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            startTenantFlow(tenantDomain);\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (isInvalidOrigin(corsOrigin)) {\n+                    if (log.isErrorEnabled()) {\n+                        log.error(String.format(\"%s is an invalid Origin.\", corsOrigin));\n+                    }\n+                    throw new CORSManagementServiceClientException(String.format(\"%s is an invalid Origin.\",\n+                            corsOrigin));\n+                }\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(\"Tenant %s doesn't have %s as a CORS Origin.\",\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw new CORSManagementServiceClientException(String.format(\"Tenant %s doesn't have %s as a \" +\n+                                    \"CORS Origin.\",\n+                            tenantDomain, corsOrigin));\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw new CORSManagementServiceServerException(String.format(\"Error while deleting the CORS Origins from \" +\n+                            \"%s.\", tenantDomain), e);\n+        } finally {\n+            endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Setting the tenant for the scenarios where the tenant is unavailable in context.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     */\n+    private void startTenantFlow(String tenantDomain) {\n+\n+        int tenantId = IdentityTenantUtil.getTenantId(tenantDomain);\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+        PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);\n+        PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantId(tenantId);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Tenant flow started for %s.\", tenantDomain));\n+        }\n+    }\n+\n+    /**\n+     * End the tenant flow started in startTenantFlow.\n+     */\n+    private void endTenantFlow() {\n+        String tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        PrivilegedCarbonContext.endTenantFlow();\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Tenant flow ended for %s.\", tenantDomain));\n+        }\n+    }\n+\n+    /**\n+     * Create a ResourceTypeAdd for CORS Origin type.\n+     *\n+     * @return ResourceTypeAdd A resource type with CORS_ORIGIN_RESOURCE_TYPE set as the name.\n+     */\n+    private ResourceTypeAdd createCORSOriginResourceTypeToAdd() {\n+\n+        ResourceTypeAdd resourceTypeAdd = new ResourceTypeAdd();\n+        resourceTypeAdd.setName(CORS_ORIGIN_RESOURCE_TYPE);\n+        resourceTypeAdd.setDescription(\"CORS Origins\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzMxMjQzOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1NTo1NVrOGkiOOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1NzowMFrOGkiRHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2MjYxNg==", "bodyText": "remove printStackTrace", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440962616", "createdAt": "2020-06-16T15:55:55Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core;\n+\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.testng.PowerMockTestCase;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.base.CarbonBaseConstants;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManagerImpl;\n+import org.wso2.carbon.identity.configuration.mgt.core.dao.ConfigurationDAO;\n+import org.wso2.carbon.identity.configuration.mgt.core.dao.impl.ConfigurationDAOImpl;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.internal.ConfigurationManagerComponentDataHolder;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ConfigurationManagerConfigurationHolder;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.impl.CORSManagementServiceImpl;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.util.TestUtils;\n+\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.sql.DataSource;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.api.mockito.PowerMockito.mockStatic;\n+import static org.wso2.carbon.base.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;\n+import static org.wso2.carbon.base.MultitenantConstants.SUPER_TENANT_ID;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.TestConstants.SAMPLE_ORIGIN_LIST_1;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.TestConstants.SAMPLE_ORIGIN_LIST_2;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.getSampleResourceAdd;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.getSampleResourceTypeAdd;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.mockCarbonContextForTenant;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.mockIdentityTenantUtility;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.closeH2Base;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.initiateH2Base;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.spyConnection;\n+\n+/**\n+ * Unit test cases for CORSService.\n+ */\n+@PrepareForTest({PrivilegedCarbonContext.class, IdentityDatabaseUtil.class, IdentityUtil.class,\n+        IdentityTenantUtil.class})\n+public class CORSManagementServiceTest extends PowerMockTestCase {\n+\n+    private ConfigurationManager configurationManager;\n+    private Connection connection;\n+\n+    private CORSManagementService corsManagementService;\n+\n+    @BeforeMethod\n+    public void setUp() throws Exception {\n+\n+        initiateH2Base();\n+        String carbonHome = Paths.get(System.getProperty(\"user.dir\"), \"target\", \"test-classes\").toString();\n+        System.setProperty(CarbonBaseConstants.CARBON_HOME, carbonHome);\n+        System.setProperty(CarbonBaseConstants.CARBON_CONFIG_DIR_PATH, Paths.get(carbonHome, \"conf\").toString());\n+\n+        DataSource dataSource = mock(DataSource.class);\n+        mockStatic(IdentityDatabaseUtil.class);\n+        when(IdentityDatabaseUtil.getDataSource()).thenReturn(dataSource);\n+\n+        connection = TestUtils.getConnection();\n+        Connection spyConnection = spyConnection(connection);\n+        when(dataSource.getConnection()).thenReturn(spyConnection);\n+\n+        ConfigurationManagerComponentDataHolder.setUseCreatedTime(true);\n+        ConfigurationManagerConfigurationHolder configurationHolder = new ConfigurationManagerConfigurationHolder();\n+        ConfigurationDAO configurationDAO = new ConfigurationDAOImpl();\n+        configurationHolder.setConfigurationDAOS(Collections.singletonList(configurationDAO));\n+        mockCarbonContextForTenant(SUPER_TENANT_ID, SUPER_TENANT_DOMAIN_NAME);\n+        mockIdentityTenantUtility();\n+        configurationManager = new ConfigurationManagerImpl(configurationHolder);\n+\n+        ConfigurationManagerComponentDataHolder.getInstance().setConfigurationManagementEnabled(true);\n+\n+        corsManagementService = new CORSManagementServiceImpl();\n+        CORSManagementServiceHolder.getInstance().setConfigurationManager(configurationManager);\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws Exception {\n+\n+        connection.close();\n+        closeH2Base();\n+    }\n+\n+    @Test\n+    public void testGetCORSOrigins() {\n+\n+        try {\n+            configurationManager.addResourceType(getSampleResourceTypeAdd());\n+            configurationManager.addResource(CORS_ORIGIN_RESOURCE_TYPE, getSampleResourceAdd(SAMPLE_ORIGIN_LIST_1));\n+            List<CORSOrigin> corsOrigins = corsManagementService.getCORSOrigins(SUPER_TENANT_DOMAIN_NAME);\n+\n+            assertEquals(SAMPLE_ORIGIN_LIST_1, corsOrigins);\n+        } catch (CORSManagementServiceException | ConfigurationManagementException throwables) {\n+            throwables.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2MzM1Nw==", "bodyText": "add 'throws Exception' to method signature", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440963357", "createdAt": "2020-06-16T15:57:00Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core;\n+\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.testng.PowerMockTestCase;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.base.CarbonBaseConstants;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManagerImpl;\n+import org.wso2.carbon.identity.configuration.mgt.core.dao.ConfigurationDAO;\n+import org.wso2.carbon.identity.configuration.mgt.core.dao.impl.ConfigurationDAOImpl;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.internal.ConfigurationManagerComponentDataHolder;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ConfigurationManagerConfigurationHolder;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.impl.CORSManagementServiceImpl;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.util.TestUtils;\n+\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.sql.DataSource;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.api.mockito.PowerMockito.mockStatic;\n+import static org.wso2.carbon.base.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;\n+import static org.wso2.carbon.base.MultitenantConstants.SUPER_TENANT_ID;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.TestConstants.SAMPLE_ORIGIN_LIST_1;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.TestConstants.SAMPLE_ORIGIN_LIST_2;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.getSampleResourceAdd;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.getSampleResourceTypeAdd;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.mockCarbonContextForTenant;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.mockIdentityTenantUtility;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.closeH2Base;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.initiateH2Base;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.spyConnection;\n+\n+/**\n+ * Unit test cases for CORSService.\n+ */\n+@PrepareForTest({PrivilegedCarbonContext.class, IdentityDatabaseUtil.class, IdentityUtil.class,\n+        IdentityTenantUtil.class})\n+public class CORSManagementServiceTest extends PowerMockTestCase {\n+\n+    private ConfigurationManager configurationManager;\n+    private Connection connection;\n+\n+    private CORSManagementService corsManagementService;\n+\n+    @BeforeMethod\n+    public void setUp() throws Exception {\n+\n+        initiateH2Base();\n+        String carbonHome = Paths.get(System.getProperty(\"user.dir\"), \"target\", \"test-classes\").toString();\n+        System.setProperty(CarbonBaseConstants.CARBON_HOME, carbonHome);\n+        System.setProperty(CarbonBaseConstants.CARBON_CONFIG_DIR_PATH, Paths.get(carbonHome, \"conf\").toString());\n+\n+        DataSource dataSource = mock(DataSource.class);\n+        mockStatic(IdentityDatabaseUtil.class);\n+        when(IdentityDatabaseUtil.getDataSource()).thenReturn(dataSource);\n+\n+        connection = TestUtils.getConnection();\n+        Connection spyConnection = spyConnection(connection);\n+        when(dataSource.getConnection()).thenReturn(spyConnection);\n+\n+        ConfigurationManagerComponentDataHolder.setUseCreatedTime(true);\n+        ConfigurationManagerConfigurationHolder configurationHolder = new ConfigurationManagerConfigurationHolder();\n+        ConfigurationDAO configurationDAO = new ConfigurationDAOImpl();\n+        configurationHolder.setConfigurationDAOS(Collections.singletonList(configurationDAO));\n+        mockCarbonContextForTenant(SUPER_TENANT_ID, SUPER_TENANT_DOMAIN_NAME);\n+        mockIdentityTenantUtility();\n+        configurationManager = new ConfigurationManagerImpl(configurationHolder);\n+\n+        ConfigurationManagerComponentDataHolder.getInstance().setConfigurationManagementEnabled(true);\n+\n+        corsManagementService = new CORSManagementServiceImpl();\n+        CORSManagementServiceHolder.getInstance().setConfigurationManager(configurationManager);\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws Exception {\n+\n+        connection.close();\n+        closeH2Base();\n+    }\n+\n+    @Test\n+    public void testGetCORSOrigins() {\n+\n+        try {\n+            configurationManager.addResourceType(getSampleResourceTypeAdd());\n+            configurationManager.addResource(CORS_ORIGIN_RESOURCE_TYPE, getSampleResourceAdd(SAMPLE_ORIGIN_LIST_1));\n+            List<CORSOrigin> corsOrigins = corsManagementService.getCORSOrigins(SUPER_TENANT_DOMAIN_NAME);\n+\n+            assertEquals(SAMPLE_ORIGIN_LIST_1, corsOrigins);\n+        } catch (CORSManagementServiceException | ConfigurationManagementException throwables) {\n+            throwables.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2MjYxNg=="}, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzMxMzcyOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1NjoxNlrOGkiPGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1NjoxNlrOGkiPGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2Mjg0Mg==", "bodyText": "remove printStackTrace", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440962842", "createdAt": "2020-06-16T15:56:16Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core;\n+\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.testng.PowerMockTestCase;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.base.CarbonBaseConstants;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManagerImpl;\n+import org.wso2.carbon.identity.configuration.mgt.core.dao.ConfigurationDAO;\n+import org.wso2.carbon.identity.configuration.mgt.core.dao.impl.ConfigurationDAOImpl;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.internal.ConfigurationManagerComponentDataHolder;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ConfigurationManagerConfigurationHolder;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.impl.CORSManagementServiceImpl;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.util.TestUtils;\n+\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.sql.DataSource;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.api.mockito.PowerMockito.mockStatic;\n+import static org.wso2.carbon.base.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;\n+import static org.wso2.carbon.base.MultitenantConstants.SUPER_TENANT_ID;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.TestConstants.SAMPLE_ORIGIN_LIST_1;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.TestConstants.SAMPLE_ORIGIN_LIST_2;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.getSampleResourceAdd;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.getSampleResourceTypeAdd;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.mockCarbonContextForTenant;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.mockIdentityTenantUtility;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.closeH2Base;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.initiateH2Base;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.spyConnection;\n+\n+/**\n+ * Unit test cases for CORSService.\n+ */\n+@PrepareForTest({PrivilegedCarbonContext.class, IdentityDatabaseUtil.class, IdentityUtil.class,\n+        IdentityTenantUtil.class})\n+public class CORSManagementServiceTest extends PowerMockTestCase {\n+\n+    private ConfigurationManager configurationManager;\n+    private Connection connection;\n+\n+    private CORSManagementService corsManagementService;\n+\n+    @BeforeMethod\n+    public void setUp() throws Exception {\n+\n+        initiateH2Base();\n+        String carbonHome = Paths.get(System.getProperty(\"user.dir\"), \"target\", \"test-classes\").toString();\n+        System.setProperty(CarbonBaseConstants.CARBON_HOME, carbonHome);\n+        System.setProperty(CarbonBaseConstants.CARBON_CONFIG_DIR_PATH, Paths.get(carbonHome, \"conf\").toString());\n+\n+        DataSource dataSource = mock(DataSource.class);\n+        mockStatic(IdentityDatabaseUtil.class);\n+        when(IdentityDatabaseUtil.getDataSource()).thenReturn(dataSource);\n+\n+        connection = TestUtils.getConnection();\n+        Connection spyConnection = spyConnection(connection);\n+        when(dataSource.getConnection()).thenReturn(spyConnection);\n+\n+        ConfigurationManagerComponentDataHolder.setUseCreatedTime(true);\n+        ConfigurationManagerConfigurationHolder configurationHolder = new ConfigurationManagerConfigurationHolder();\n+        ConfigurationDAO configurationDAO = new ConfigurationDAOImpl();\n+        configurationHolder.setConfigurationDAOS(Collections.singletonList(configurationDAO));\n+        mockCarbonContextForTenant(SUPER_TENANT_ID, SUPER_TENANT_DOMAIN_NAME);\n+        mockIdentityTenantUtility();\n+        configurationManager = new ConfigurationManagerImpl(configurationHolder);\n+\n+        ConfigurationManagerComponentDataHolder.getInstance().setConfigurationManagementEnabled(true);\n+\n+        corsManagementService = new CORSManagementServiceImpl();\n+        CORSManagementServiceHolder.getInstance().setConfigurationManager(configurationManager);\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws Exception {\n+\n+        connection.close();\n+        closeH2Base();\n+    }\n+\n+    @Test\n+    public void testGetCORSOrigins() {\n+\n+        try {\n+            configurationManager.addResourceType(getSampleResourceTypeAdd());\n+            configurationManager.addResource(CORS_ORIGIN_RESOURCE_TYPE, getSampleResourceAdd(SAMPLE_ORIGIN_LIST_1));\n+            List<CORSOrigin> corsOrigins = corsManagementService.getCORSOrigins(SUPER_TENANT_DOMAIN_NAME);\n+\n+            assertEquals(SAMPLE_ORIGIN_LIST_1, corsOrigins);\n+        } catch (CORSManagementServiceException | ConfigurationManagementException throwables) {\n+            throwables.printStackTrace();\n+        }\n+    }\n+\n+    @Test\n+    public void testSetCORSOrigins() {\n+\n+        try {\n+            corsManagementService.setCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_1);\n+            List<CORSOrigin> corsOrigins = configurationManager.getResource(CORS_ORIGIN_RESOURCE_TYPE,\n+                    CORS_ORIGIN_RESOURCE_NAME)\n+                    .getAttributes()\n+                    .stream()\n+                    .map(CORSServiceTestHelper::attributeToCORSOrigin)\n+                    .collect(Collectors.toList());\n+\n+            assertEquals(SAMPLE_ORIGIN_LIST_1, corsOrigins);\n+        } catch (CORSManagementServiceException | ConfigurationManagementException throwables) {\n+            throwables.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzMxNDQ5OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1NjoyN1rOGkiPnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1NjoyN1rOGkiPnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2Mjk3Mg==", "bodyText": "remove printStackTrace", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440962972", "createdAt": "2020-06-16T15:56:27Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core;\n+\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.testng.PowerMockTestCase;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.base.CarbonBaseConstants;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManagerImpl;\n+import org.wso2.carbon.identity.configuration.mgt.core.dao.ConfigurationDAO;\n+import org.wso2.carbon.identity.configuration.mgt.core.dao.impl.ConfigurationDAOImpl;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.internal.ConfigurationManagerComponentDataHolder;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ConfigurationManagerConfigurationHolder;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.impl.CORSManagementServiceImpl;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.util.TestUtils;\n+\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.sql.DataSource;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.api.mockito.PowerMockito.mockStatic;\n+import static org.wso2.carbon.base.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;\n+import static org.wso2.carbon.base.MultitenantConstants.SUPER_TENANT_ID;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.TestConstants.SAMPLE_ORIGIN_LIST_1;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.TestConstants.SAMPLE_ORIGIN_LIST_2;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.getSampleResourceAdd;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.getSampleResourceTypeAdd;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.mockCarbonContextForTenant;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.mockIdentityTenantUtility;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.closeH2Base;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.initiateH2Base;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.spyConnection;\n+\n+/**\n+ * Unit test cases for CORSService.\n+ */\n+@PrepareForTest({PrivilegedCarbonContext.class, IdentityDatabaseUtil.class, IdentityUtil.class,\n+        IdentityTenantUtil.class})\n+public class CORSManagementServiceTest extends PowerMockTestCase {\n+\n+    private ConfigurationManager configurationManager;\n+    private Connection connection;\n+\n+    private CORSManagementService corsManagementService;\n+\n+    @BeforeMethod\n+    public void setUp() throws Exception {\n+\n+        initiateH2Base();\n+        String carbonHome = Paths.get(System.getProperty(\"user.dir\"), \"target\", \"test-classes\").toString();\n+        System.setProperty(CarbonBaseConstants.CARBON_HOME, carbonHome);\n+        System.setProperty(CarbonBaseConstants.CARBON_CONFIG_DIR_PATH, Paths.get(carbonHome, \"conf\").toString());\n+\n+        DataSource dataSource = mock(DataSource.class);\n+        mockStatic(IdentityDatabaseUtil.class);\n+        when(IdentityDatabaseUtil.getDataSource()).thenReturn(dataSource);\n+\n+        connection = TestUtils.getConnection();\n+        Connection spyConnection = spyConnection(connection);\n+        when(dataSource.getConnection()).thenReturn(spyConnection);\n+\n+        ConfigurationManagerComponentDataHolder.setUseCreatedTime(true);\n+        ConfigurationManagerConfigurationHolder configurationHolder = new ConfigurationManagerConfigurationHolder();\n+        ConfigurationDAO configurationDAO = new ConfigurationDAOImpl();\n+        configurationHolder.setConfigurationDAOS(Collections.singletonList(configurationDAO));\n+        mockCarbonContextForTenant(SUPER_TENANT_ID, SUPER_TENANT_DOMAIN_NAME);\n+        mockIdentityTenantUtility();\n+        configurationManager = new ConfigurationManagerImpl(configurationHolder);\n+\n+        ConfigurationManagerComponentDataHolder.getInstance().setConfigurationManagementEnabled(true);\n+\n+        corsManagementService = new CORSManagementServiceImpl();\n+        CORSManagementServiceHolder.getInstance().setConfigurationManager(configurationManager);\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws Exception {\n+\n+        connection.close();\n+        closeH2Base();\n+    }\n+\n+    @Test\n+    public void testGetCORSOrigins() {\n+\n+        try {\n+            configurationManager.addResourceType(getSampleResourceTypeAdd());\n+            configurationManager.addResource(CORS_ORIGIN_RESOURCE_TYPE, getSampleResourceAdd(SAMPLE_ORIGIN_LIST_1));\n+            List<CORSOrigin> corsOrigins = corsManagementService.getCORSOrigins(SUPER_TENANT_DOMAIN_NAME);\n+\n+            assertEquals(SAMPLE_ORIGIN_LIST_1, corsOrigins);\n+        } catch (CORSManagementServiceException | ConfigurationManagementException throwables) {\n+            throwables.printStackTrace();\n+        }\n+    }\n+\n+    @Test\n+    public void testSetCORSOrigins() {\n+\n+        try {\n+            corsManagementService.setCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_1);\n+            List<CORSOrigin> corsOrigins = configurationManager.getResource(CORS_ORIGIN_RESOURCE_TYPE,\n+                    CORS_ORIGIN_RESOURCE_NAME)\n+                    .getAttributes()\n+                    .stream()\n+                    .map(CORSServiceTestHelper::attributeToCORSOrigin)\n+                    .collect(Collectors.toList());\n+\n+            assertEquals(SAMPLE_ORIGIN_LIST_1, corsOrigins);\n+        } catch (CORSManagementServiceException | ConfigurationManagementException throwables) {\n+            throwables.printStackTrace();\n+        }\n+    }\n+\n+    @Test\n+    public void testAddCORSOrigins() {\n+\n+        try {\n+            corsManagementService.setCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_1);\n+            corsManagementService.addCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_2);\n+            List<CORSOrigin> corsOrigins = configurationManager.getResource(CORS_ORIGIN_RESOURCE_TYPE,\n+                    CORS_ORIGIN_RESOURCE_NAME)\n+                    .getAttributes()\n+                    .stream()\n+                    .map(CORSServiceTestHelper::attributeToCORSOrigin)\n+                    .collect(Collectors.toList());\n+\n+            assertEquals(Stream.concat(SAMPLE_ORIGIN_LIST_1.stream(),\n+                    SAMPLE_ORIGIN_LIST_2.stream()).collect(Collectors.toList()), corsOrigins);\n+        } catch (CORSManagementServiceException | ConfigurationManagementException throwables) {\n+            throwables.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzMxNDk5OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1NjozN1rOGkiQBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1NjozN1rOGkiQBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2MzA3Ng==", "bodyText": "remove printStackTrace", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440963076", "createdAt": "2020-06-16T15:56:37Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core;\n+\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.testng.PowerMockTestCase;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.base.CarbonBaseConstants;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManagerImpl;\n+import org.wso2.carbon.identity.configuration.mgt.core.dao.ConfigurationDAO;\n+import org.wso2.carbon.identity.configuration.mgt.core.dao.impl.ConfigurationDAOImpl;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.internal.ConfigurationManagerComponentDataHolder;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ConfigurationManagerConfigurationHolder;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.impl.CORSManagementServiceImpl;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.util.TestUtils;\n+\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.sql.DataSource;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.api.mockito.PowerMockito.mockStatic;\n+import static org.wso2.carbon.base.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;\n+import static org.wso2.carbon.base.MultitenantConstants.SUPER_TENANT_ID;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.TestConstants.SAMPLE_ORIGIN_LIST_1;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.TestConstants.SAMPLE_ORIGIN_LIST_2;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.getSampleResourceAdd;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.getSampleResourceTypeAdd;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.mockCarbonContextForTenant;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.mockIdentityTenantUtility;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.closeH2Base;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.initiateH2Base;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.spyConnection;\n+\n+/**\n+ * Unit test cases for CORSService.\n+ */\n+@PrepareForTest({PrivilegedCarbonContext.class, IdentityDatabaseUtil.class, IdentityUtil.class,\n+        IdentityTenantUtil.class})\n+public class CORSManagementServiceTest extends PowerMockTestCase {\n+\n+    private ConfigurationManager configurationManager;\n+    private Connection connection;\n+\n+    private CORSManagementService corsManagementService;\n+\n+    @BeforeMethod\n+    public void setUp() throws Exception {\n+\n+        initiateH2Base();\n+        String carbonHome = Paths.get(System.getProperty(\"user.dir\"), \"target\", \"test-classes\").toString();\n+        System.setProperty(CarbonBaseConstants.CARBON_HOME, carbonHome);\n+        System.setProperty(CarbonBaseConstants.CARBON_CONFIG_DIR_PATH, Paths.get(carbonHome, \"conf\").toString());\n+\n+        DataSource dataSource = mock(DataSource.class);\n+        mockStatic(IdentityDatabaseUtil.class);\n+        when(IdentityDatabaseUtil.getDataSource()).thenReturn(dataSource);\n+\n+        connection = TestUtils.getConnection();\n+        Connection spyConnection = spyConnection(connection);\n+        when(dataSource.getConnection()).thenReturn(spyConnection);\n+\n+        ConfigurationManagerComponentDataHolder.setUseCreatedTime(true);\n+        ConfigurationManagerConfigurationHolder configurationHolder = new ConfigurationManagerConfigurationHolder();\n+        ConfigurationDAO configurationDAO = new ConfigurationDAOImpl();\n+        configurationHolder.setConfigurationDAOS(Collections.singletonList(configurationDAO));\n+        mockCarbonContextForTenant(SUPER_TENANT_ID, SUPER_TENANT_DOMAIN_NAME);\n+        mockIdentityTenantUtility();\n+        configurationManager = new ConfigurationManagerImpl(configurationHolder);\n+\n+        ConfigurationManagerComponentDataHolder.getInstance().setConfigurationManagementEnabled(true);\n+\n+        corsManagementService = new CORSManagementServiceImpl();\n+        CORSManagementServiceHolder.getInstance().setConfigurationManager(configurationManager);\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws Exception {\n+\n+        connection.close();\n+        closeH2Base();\n+    }\n+\n+    @Test\n+    public void testGetCORSOrigins() {\n+\n+        try {\n+            configurationManager.addResourceType(getSampleResourceTypeAdd());\n+            configurationManager.addResource(CORS_ORIGIN_RESOURCE_TYPE, getSampleResourceAdd(SAMPLE_ORIGIN_LIST_1));\n+            List<CORSOrigin> corsOrigins = corsManagementService.getCORSOrigins(SUPER_TENANT_DOMAIN_NAME);\n+\n+            assertEquals(SAMPLE_ORIGIN_LIST_1, corsOrigins);\n+        } catch (CORSManagementServiceException | ConfigurationManagementException throwables) {\n+            throwables.printStackTrace();\n+        }\n+    }\n+\n+    @Test\n+    public void testSetCORSOrigins() {\n+\n+        try {\n+            corsManagementService.setCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_1);\n+            List<CORSOrigin> corsOrigins = configurationManager.getResource(CORS_ORIGIN_RESOURCE_TYPE,\n+                    CORS_ORIGIN_RESOURCE_NAME)\n+                    .getAttributes()\n+                    .stream()\n+                    .map(CORSServiceTestHelper::attributeToCORSOrigin)\n+                    .collect(Collectors.toList());\n+\n+            assertEquals(SAMPLE_ORIGIN_LIST_1, corsOrigins);\n+        } catch (CORSManagementServiceException | ConfigurationManagementException throwables) {\n+            throwables.printStackTrace();\n+        }\n+    }\n+\n+    @Test\n+    public void testAddCORSOrigins() {\n+\n+        try {\n+            corsManagementService.setCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_1);\n+            corsManagementService.addCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_2);\n+            List<CORSOrigin> corsOrigins = configurationManager.getResource(CORS_ORIGIN_RESOURCE_TYPE,\n+                    CORS_ORIGIN_RESOURCE_NAME)\n+                    .getAttributes()\n+                    .stream()\n+                    .map(CORSServiceTestHelper::attributeToCORSOrigin)\n+                    .collect(Collectors.toList());\n+\n+            assertEquals(Stream.concat(SAMPLE_ORIGIN_LIST_1.stream(),\n+                    SAMPLE_ORIGIN_LIST_2.stream()).collect(Collectors.toList()), corsOrigins);\n+        } catch (CORSManagementServiceException | ConfigurationManagementException throwables) {\n+            throwables.printStackTrace();\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteCORSOrigins() {\n+\n+        try {\n+            corsManagementService.setCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_1);\n+            corsManagementService.deleteCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_1.subList(0, 2));\n+            List<CORSOrigin> corsOrigins = configurationManager.getResource(CORS_ORIGIN_RESOURCE_TYPE,\n+                    CORS_ORIGIN_RESOURCE_NAME)\n+                    .getAttributes()\n+                    .stream()\n+                    .map(CORSServiceTestHelper::attributeToCORSOrigin)\n+                    .collect(Collectors.toList());\n+\n+            assertEquals(SAMPLE_ORIGIN_LIST_1.subList(2, SAMPLE_ORIGIN_LIST_1.size()), corsOrigins);\n+        } catch (CORSManagementServiceException | ConfigurationManagementException throwables) {\n+            throwables.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzMyMTg2OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1ODowNlrOGkiUjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1ODowNlrOGkiUjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NDIzNg==", "bodyText": "let's add a data provider to verify tenant case in addition to super tenant case", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440964236", "createdAt": "2020-06-16T15:58:06Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core;\n+\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.testng.PowerMockTestCase;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.base.CarbonBaseConstants;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManagerImpl;\n+import org.wso2.carbon.identity.configuration.mgt.core.dao.ConfigurationDAO;\n+import org.wso2.carbon.identity.configuration.mgt.core.dao.impl.ConfigurationDAOImpl;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.internal.ConfigurationManagerComponentDataHolder;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ConfigurationManagerConfigurationHolder;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.impl.CORSManagementServiceImpl;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.util.TestUtils;\n+\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.sql.DataSource;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.api.mockito.PowerMockito.mockStatic;\n+import static org.wso2.carbon.base.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;\n+import static org.wso2.carbon.base.MultitenantConstants.SUPER_TENANT_ID;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.TestConstants.SAMPLE_ORIGIN_LIST_1;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.TestConstants.SAMPLE_ORIGIN_LIST_2;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.getSampleResourceAdd;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.getSampleResourceTypeAdd;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.mockCarbonContextForTenant;\n+import static org.wso2.carbon.identity.cors.mgt.core.helper.CORSServiceTestHelper.mockIdentityTenantUtility;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.closeH2Base;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.initiateH2Base;\n+import static org.wso2.carbon.identity.cors.mgt.core.util.TestUtils.spyConnection;\n+\n+/**\n+ * Unit test cases for CORSService.\n+ */\n+@PrepareForTest({PrivilegedCarbonContext.class, IdentityDatabaseUtil.class, IdentityUtil.class,\n+        IdentityTenantUtil.class})\n+public class CORSManagementServiceTest extends PowerMockTestCase {\n+\n+    private ConfigurationManager configurationManager;\n+    private Connection connection;\n+\n+    private CORSManagementService corsManagementService;\n+\n+    @BeforeMethod\n+    public void setUp() throws Exception {\n+\n+        initiateH2Base();\n+        String carbonHome = Paths.get(System.getProperty(\"user.dir\"), \"target\", \"test-classes\").toString();\n+        System.setProperty(CarbonBaseConstants.CARBON_HOME, carbonHome);\n+        System.setProperty(CarbonBaseConstants.CARBON_CONFIG_DIR_PATH, Paths.get(carbonHome, \"conf\").toString());\n+\n+        DataSource dataSource = mock(DataSource.class);\n+        mockStatic(IdentityDatabaseUtil.class);\n+        when(IdentityDatabaseUtil.getDataSource()).thenReturn(dataSource);\n+\n+        connection = TestUtils.getConnection();\n+        Connection spyConnection = spyConnection(connection);\n+        when(dataSource.getConnection()).thenReturn(spyConnection);\n+\n+        ConfigurationManagerComponentDataHolder.setUseCreatedTime(true);\n+        ConfigurationManagerConfigurationHolder configurationHolder = new ConfigurationManagerConfigurationHolder();\n+        ConfigurationDAO configurationDAO = new ConfigurationDAOImpl();\n+        configurationHolder.setConfigurationDAOS(Collections.singletonList(configurationDAO));\n+        mockCarbonContextForTenant(SUPER_TENANT_ID, SUPER_TENANT_DOMAIN_NAME);\n+        mockIdentityTenantUtility();\n+        configurationManager = new ConfigurationManagerImpl(configurationHolder);\n+\n+        ConfigurationManagerComponentDataHolder.getInstance().setConfigurationManagementEnabled(true);\n+\n+        corsManagementService = new CORSManagementServiceImpl();\n+        CORSManagementServiceHolder.getInstance().setConfigurationManager(configurationManager);\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws Exception {\n+\n+        connection.close();\n+        closeH2Base();\n+    }\n+\n+    @Test\n+    public void testGetCORSOrigins() {\n+\n+        try {\n+            configurationManager.addResourceType(getSampleResourceTypeAdd());\n+            configurationManager.addResource(CORS_ORIGIN_RESOURCE_TYPE, getSampleResourceAdd(SAMPLE_ORIGIN_LIST_1));\n+            List<CORSOrigin> corsOrigins = corsManagementService.getCORSOrigins(SUPER_TENANT_DOMAIN_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzMyOTk3OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1OTo1OVrOGkiZzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1OTo1OVrOGkiZzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NTU4MA==", "bodyText": "add license", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r440965580", "createdAt": "2020-06-16T15:59:59Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/pom.xml", "diffHunk": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d32894aaf4d9297ddf1ad7a11093c5b57871af"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTg1MzMxOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzowMjo0OVrOGlO6qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzowMjo0OVrOGlO6qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5NDg4OQ==", "bodyText": "we have a standard for internal error codes..  please refer \"[Architecture] WSO2 Identity Server REST API Error Response Standardization\"\nClient errors in server APIs\nFor client errors in server APIs, we have allocated the range starting from 600.\nEg: USR-600xx\n\nServer Errors in server APIs\nFor server errors in server APIs, we have allocated the range starting from 650.\nEg: USR-650xx", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r441694889", "createdAt": "2020-06-17T17:02:49Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.constant;\n+\n+/**\n+ * ErrorMessages enum holds the error codes and messages.\n+ */\n+public enum ErrorMessages {\n+\n+    ERROR_CODE_CORS_CRUD(\"CORS_00001\", \"Error in %s while %s the CORS Origins.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db5636645e25335562f3b998da145efdf6f25859"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTg3NzgyOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/CORSOrigin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzowOTo1NFrOGlPK6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzowOTo1NFrOGlPK6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5OTA1MA==", "bodyText": "add new line after method declaration", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r441699050", "createdAt": "2020-06-17T17:09:54Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/CORSOrigin.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.model;\n+\n+/**\n+ * CORSOrigin model class.\n+ */\n+public class CORSOrigin {\n+\n+    private String url;\n+\n+    public CORSOrigin() {\n+\n+    }\n+\n+    public CORSOrigin(String url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db5636645e25335562f3b998da145efdf6f25859"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTg4ODIwOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxMzowNVrOGlPR7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTozOTo0NVrOGlnrzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMDg0NQ==", "bodyText": "what will happen if an invalid tenant domain is provided? is it getting handled internally?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r441700845", "createdAt": "2020-06-17T17:13:05Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db5636645e25335562f3b998da145efdf6f25859"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NjkwOQ==", "bodyText": "An exception will be thrown.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r441776909", "createdAt": "2020-06-17T19:16:27Z", "author": {"login": "ivantha"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMDg0NQ=="}, "originalCommit": {"oid": "db5636645e25335562f3b998da145efdf6f25859"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwMDY4NQ==", "bodyText": "in that case, IMO we need to explicitly catch that exception and throw a CORS client exception..", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r442100685", "createdAt": "2020-06-18T09:39:45Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMDg0NQ=="}, "originalCommit": {"oid": "db5636645e25335562f3b998da145efdf6f25859"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDM3NjExOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo0MjowOFrOGlnxEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo0MjowOFrOGlnxEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwMjAzMg==", "bodyText": "add new line after method declaration", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r442102032", "createdAt": "2020-06-18T09:42:08Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Add the CORS Origin resource type to the ConfigurationManager if not already present.\n+     *\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSOriginResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSOriginResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSOriginResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the CORS Origin type is already in the ConfigurationManager.\n+     *\n+     * @return {@code true} if the CORS Origin resource type is already in the ConfigurationManager,\n+     * {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSOriginResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        } catch (ConfigurationManagementClientException e) {\n+            if (ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS.getCode().equals(e.getErrorCode())) {\n+                return true;\n+            }\n+            throw e;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Create a ResourceTypeAdd for CORS Origin type.\n+     *\n+     * @return ResourceTypeAdd A resource type with CORS_ORIGIN_RESOURCE_TYPE set as the name.\n+     */\n+    private ResourceTypeAdd createCORSOriginResourceTypeToAdd() {\n+\n+        ResourceTypeAdd resourceTypeAdd = new ResourceTypeAdd();\n+        resourceTypeAdd.setName(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        resourceTypeAdd.setDescription(CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION);\n+        return resourceTypeAdd;\n+    }\n+\n+    /**\n+     * Retrieve the ConfigurationManager instance from the CORSServiceHolder.\n+     *\n+     * @return ConfigurationManager The ConfigurationManager instance.\n+     */\n+    private ConfigurationManager getConfigurationManager() {\n+\n+        return CORSManagementServiceHolder.getInstance().getConfigurationManager();\n+    }\n+\n+    /**\n+     * Returns true if the tenant already has a particular CORS Origin.\n+     *\n+     * @param origin The Origin to be checked against the existing Origins.\n+     * @return {@code true} if the tenant already have the particular CORS Origin, {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean tenantHasCORSOrigin(CORSOrigin origin) throws ConfigurationManagementException {\n+\n+        Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                CORS_ORIGIN_RESOURCE_NAME);\n+        if (resource != null) {\n+            List<CORSOrigin> currentCORSOrigins = new ResourceToCORSOrigin().apply(resource);\n+\n+            return currentCORSOrigins.contains(origin);\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Validate the CORSOrigin list.\n+     *\n+     * @param corsOrigins List of CORSOrigin instances.\n+     * @throws CORSManagementServiceClientException\n+     */\n+    private void validateOrigins(List<CORSOrigin> corsOrigins) throws CORSManagementServiceClientException {\n+        if (corsOrigins == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac52ceab5e58cd65ce8471bb765bb12d0736f9"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDM3ODQzOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo0Mjo0NFrOGlnybQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDoxNDoxNVrOGlo3-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwMjM4MQ==", "bodyText": "let's add a debug log to log the exception", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r442102381", "createdAt": "2020-06-18T09:42:44Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Add the CORS Origin resource type to the ConfigurationManager if not already present.\n+     *\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSOriginResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSOriginResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSOriginResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the CORS Origin type is already in the ConfigurationManager.\n+     *\n+     * @return {@code true} if the CORS Origin resource type is already in the ConfigurationManager,\n+     * {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSOriginResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        } catch (ConfigurationManagementClientException e) {\n+            if (ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS.getCode().equals(e.getErrorCode())) {\n+                return true;\n+            }\n+            throw e;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Create a ResourceTypeAdd for CORS Origin type.\n+     *\n+     * @return ResourceTypeAdd A resource type with CORS_ORIGIN_RESOURCE_TYPE set as the name.\n+     */\n+    private ResourceTypeAdd createCORSOriginResourceTypeToAdd() {\n+\n+        ResourceTypeAdd resourceTypeAdd = new ResourceTypeAdd();\n+        resourceTypeAdd.setName(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        resourceTypeAdd.setDescription(CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION);\n+        return resourceTypeAdd;\n+    }\n+\n+    /**\n+     * Retrieve the ConfigurationManager instance from the CORSServiceHolder.\n+     *\n+     * @return ConfigurationManager The ConfigurationManager instance.\n+     */\n+    private ConfigurationManager getConfigurationManager() {\n+\n+        return CORSManagementServiceHolder.getInstance().getConfigurationManager();\n+    }\n+\n+    /**\n+     * Returns true if the tenant already has a particular CORS Origin.\n+     *\n+     * @param origin The Origin to be checked against the existing Origins.\n+     * @return {@code true} if the tenant already have the particular CORS Origin, {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean tenantHasCORSOrigin(CORSOrigin origin) throws ConfigurationManagementException {\n+\n+        Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                CORS_ORIGIN_RESOURCE_NAME);\n+        if (resource != null) {\n+            List<CORSOrigin> currentCORSOrigins = new ResourceToCORSOrigin().apply(resource);\n+\n+            return currentCORSOrigins.contains(origin);\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Validate the CORSOrigin list.\n+     *\n+     * @param corsOrigins List of CORSOrigin instances.\n+     * @throws CORSManagementServiceClientException\n+     */\n+    private void validateOrigins(List<CORSOrigin> corsOrigins) throws CORSManagementServiceClientException {\n+        if (corsOrigins == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(ERROR_CODE_EMPTY_LIST.getMessage());\n+            }\n+            throw handleClientException(ERROR_CODE_EMPTY_LIST);\n+        }\n+\n+        for (CORSOrigin corsOrigin : corsOrigins) {\n+            if (isInvalidOrigin(corsOrigin)) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(ERROR_CODE_INVALID_ORIGIN.getMessage(), corsOrigin.getUrl()));\n+                }\n+                throw handleClientException(ERROR_CODE_INVALID_ORIGIN, corsOrigin.getUrl());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check if the format of the Origin is valid.\n+     *\n+     * @param origin Origin to be checked for validity.\n+     * @return {@code true} if the origin is valid, {@code false} otherwise.\n+     */\n+    private boolean isInvalidOrigin(CORSOrigin origin) {\n+\n+        try {\n+            new URL(origin.getUrl()).toURI();\n+        } catch (MalformedURLException | URISyntaxException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac52ceab5e58cd65ce8471bb765bb12d0736f9"}, "originalPosition": 282}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEyMDE4NQ==", "bodyText": "This is logged in the higher-level function where isInvalidOrigin is called.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r442120185", "createdAt": "2020-06-18T10:14:15Z", "author": {"login": "ivantha"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Add the CORS Origin resource type to the ConfigurationManager if not already present.\n+     *\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSOriginResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSOriginResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSOriginResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the CORS Origin type is already in the ConfigurationManager.\n+     *\n+     * @return {@code true} if the CORS Origin resource type is already in the ConfigurationManager,\n+     * {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSOriginResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        } catch (ConfigurationManagementClientException e) {\n+            if (ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS.getCode().equals(e.getErrorCode())) {\n+                return true;\n+            }\n+            throw e;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Create a ResourceTypeAdd for CORS Origin type.\n+     *\n+     * @return ResourceTypeAdd A resource type with CORS_ORIGIN_RESOURCE_TYPE set as the name.\n+     */\n+    private ResourceTypeAdd createCORSOriginResourceTypeToAdd() {\n+\n+        ResourceTypeAdd resourceTypeAdd = new ResourceTypeAdd();\n+        resourceTypeAdd.setName(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        resourceTypeAdd.setDescription(CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION);\n+        return resourceTypeAdd;\n+    }\n+\n+    /**\n+     * Retrieve the ConfigurationManager instance from the CORSServiceHolder.\n+     *\n+     * @return ConfigurationManager The ConfigurationManager instance.\n+     */\n+    private ConfigurationManager getConfigurationManager() {\n+\n+        return CORSManagementServiceHolder.getInstance().getConfigurationManager();\n+    }\n+\n+    /**\n+     * Returns true if the tenant already has a particular CORS Origin.\n+     *\n+     * @param origin The Origin to be checked against the existing Origins.\n+     * @return {@code true} if the tenant already have the particular CORS Origin, {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean tenantHasCORSOrigin(CORSOrigin origin) throws ConfigurationManagementException {\n+\n+        Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                CORS_ORIGIN_RESOURCE_NAME);\n+        if (resource != null) {\n+            List<CORSOrigin> currentCORSOrigins = new ResourceToCORSOrigin().apply(resource);\n+\n+            return currentCORSOrigins.contains(origin);\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Validate the CORSOrigin list.\n+     *\n+     * @param corsOrigins List of CORSOrigin instances.\n+     * @throws CORSManagementServiceClientException\n+     */\n+    private void validateOrigins(List<CORSOrigin> corsOrigins) throws CORSManagementServiceClientException {\n+        if (corsOrigins == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(ERROR_CODE_EMPTY_LIST.getMessage());\n+            }\n+            throw handleClientException(ERROR_CODE_EMPTY_LIST);\n+        }\n+\n+        for (CORSOrigin corsOrigin : corsOrigins) {\n+            if (isInvalidOrigin(corsOrigin)) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(ERROR_CODE_INVALID_ORIGIN.getMessage(), corsOrigin.getUrl()));\n+                }\n+                throw handleClientException(ERROR_CODE_INVALID_ORIGIN, corsOrigin.getUrl());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check if the format of the Origin is valid.\n+     *\n+     * @param origin Origin to be checked for validity.\n+     * @return {@code true} if the origin is valid, {@code false} otherwise.\n+     */\n+    private boolean isInvalidOrigin(CORSOrigin origin) {\n+\n+        try {\n+            new URL(origin.getUrl()).toURI();\n+        } catch (MalformedURLException | URISyntaxException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwMjM4MQ=="}, "originalCommit": {"oid": "72ac52ceab5e58cd65ce8471bb765bb12d0736f9"}, "originalPosition": 282}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDU0MDYxOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozMDoyNVrOGlpZ7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozMDoyNVrOGlpZ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEyODg3OQ==", "bodyText": "Complete the method comments.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r442128879", "createdAt": "2020-06-18T10:30:25Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Add the CORS Origin resource type to the ConfigurationManager if not already present.\n+     *\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSOriginResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSOriginResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSOriginResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the CORS Origin type is already in the ConfigurationManager.\n+     *\n+     * @return {@code true} if the CORS Origin resource type is already in the ConfigurationManager,\n+     * {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSOriginResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        } catch (ConfigurationManagementClientException e) {\n+            if (ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS.getCode().equals(e.getErrorCode())) {\n+                return true;\n+            }\n+            throw e;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Create a ResourceTypeAdd for CORS Origin type.\n+     *\n+     * @return ResourceTypeAdd A resource type with CORS_ORIGIN_RESOURCE_TYPE set as the name.\n+     */\n+    private ResourceTypeAdd createCORSOriginResourceTypeToAdd() {\n+\n+        ResourceTypeAdd resourceTypeAdd = new ResourceTypeAdd();\n+        resourceTypeAdd.setName(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        resourceTypeAdd.setDescription(CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION);\n+        return resourceTypeAdd;\n+    }\n+\n+    /**\n+     * Retrieve the ConfigurationManager instance from the CORSServiceHolder.\n+     *\n+     * @return ConfigurationManager The ConfigurationManager instance.\n+     */\n+    private ConfigurationManager getConfigurationManager() {\n+\n+        return CORSManagementServiceHolder.getInstance().getConfigurationManager();\n+    }\n+\n+    /**\n+     * Returns true if the tenant already has a particular CORS Origin.\n+     *\n+     * @param origin The Origin to be checked against the existing Origins.\n+     * @return {@code true} if the tenant already have the particular CORS Origin, {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean tenantHasCORSOrigin(CORSOrigin origin) throws ConfigurationManagementException {\n+\n+        Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                CORS_ORIGIN_RESOURCE_NAME);\n+        if (resource != null) {\n+            List<CORSOrigin> currentCORSOrigins = new ResourceToCORSOrigin().apply(resource);\n+\n+            return currentCORSOrigins.contains(origin);\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Validate the CORSOrigin list.\n+     *\n+     * @param corsOrigins List of CORSOrigin instances.\n+     * @throws CORSManagementServiceClientException\n+     */\n+    private void validateOrigins(List<CORSOrigin> corsOrigins) throws CORSManagementServiceClientException {\n+        if (corsOrigins == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(ERROR_CODE_EMPTY_LIST.getMessage());\n+            }\n+            throw handleClientException(ERROR_CODE_EMPTY_LIST);\n+        }\n+\n+        for (CORSOrigin corsOrigin : corsOrigins) {\n+            if (isInvalidOrigin(corsOrigin)) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(ERROR_CODE_INVALID_ORIGIN.getMessage(), corsOrigin.getUrl()));\n+                }\n+                throw handleClientException(ERROR_CODE_INVALID_ORIGIN, corsOrigin.getUrl());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check if the format of the Origin is valid.\n+     *\n+     * @param origin Origin to be checked for validity.\n+     * @return {@code true} if the origin is valid, {@code false} otherwise.\n+     */\n+    private boolean isInvalidOrigin(CORSOrigin origin) {\n+\n+        try {\n+            new URL(origin.getUrl()).toURI();\n+        } catch (MalformedURLException | URISyntaxException e) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Handle server exceptions.\n+     *\n+     * @param error The ErrorMessage.\n+     * @param e Original error.\n+     * @param data Additional data that should be added to the error message. This is a String var-arg.\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac52ceab5e58cd65ce8471bb765bb12d0736f9"}, "originalPosition": 294}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDU0MTAwOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozMDozM1rOGlpaLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozMDozM1rOGlpaLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEyODk0Mw==", "bodyText": "Complete the method comments.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r442128943", "createdAt": "2020-06-18T10:30:33Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+            validateOrigins(corsOrigins);\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Add the CORS Origin resource type to the ConfigurationManager if not already present.\n+     *\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSOriginResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSOriginResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSOriginResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the CORS Origin type is already in the ConfigurationManager.\n+     *\n+     * @return {@code true} if the CORS Origin resource type is already in the ConfigurationManager,\n+     * {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSOriginResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        } catch (ConfigurationManagementClientException e) {\n+            if (ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS.getCode().equals(e.getErrorCode())) {\n+                return true;\n+            }\n+            throw e;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Create a ResourceTypeAdd for CORS Origin type.\n+     *\n+     * @return ResourceTypeAdd A resource type with CORS_ORIGIN_RESOURCE_TYPE set as the name.\n+     */\n+    private ResourceTypeAdd createCORSOriginResourceTypeToAdd() {\n+\n+        ResourceTypeAdd resourceTypeAdd = new ResourceTypeAdd();\n+        resourceTypeAdd.setName(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        resourceTypeAdd.setDescription(CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION);\n+        return resourceTypeAdd;\n+    }\n+\n+    /**\n+     * Retrieve the ConfigurationManager instance from the CORSServiceHolder.\n+     *\n+     * @return ConfigurationManager The ConfigurationManager instance.\n+     */\n+    private ConfigurationManager getConfigurationManager() {\n+\n+        return CORSManagementServiceHolder.getInstance().getConfigurationManager();\n+    }\n+\n+    /**\n+     * Returns true if the tenant already has a particular CORS Origin.\n+     *\n+     * @param origin The Origin to be checked against the existing Origins.\n+     * @return {@code true} if the tenant already have the particular CORS Origin, {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean tenantHasCORSOrigin(CORSOrigin origin) throws ConfigurationManagementException {\n+\n+        Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                CORS_ORIGIN_RESOURCE_NAME);\n+        if (resource != null) {\n+            List<CORSOrigin> currentCORSOrigins = new ResourceToCORSOrigin().apply(resource);\n+\n+            return currentCORSOrigins.contains(origin);\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Validate the CORSOrigin list.\n+     *\n+     * @param corsOrigins List of CORSOrigin instances.\n+     * @throws CORSManagementServiceClientException\n+     */\n+    private void validateOrigins(List<CORSOrigin> corsOrigins) throws CORSManagementServiceClientException {\n+        if (corsOrigins == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(ERROR_CODE_EMPTY_LIST.getMessage());\n+            }\n+            throw handleClientException(ERROR_CODE_EMPTY_LIST);\n+        }\n+\n+        for (CORSOrigin corsOrigin : corsOrigins) {\n+            if (isInvalidOrigin(corsOrigin)) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(ERROR_CODE_INVALID_ORIGIN.getMessage(), corsOrigin.getUrl()));\n+                }\n+                throw handleClientException(ERROR_CODE_INVALID_ORIGIN, corsOrigin.getUrl());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check if the format of the Origin is valid.\n+     *\n+     * @param origin Origin to be checked for validity.\n+     * @return {@code true} if the origin is valid, {@code false} otherwise.\n+     */\n+    private boolean isInvalidOrigin(CORSOrigin origin) {\n+\n+        try {\n+            new URL(origin.getUrl()).toURI();\n+        } catch (MalformedURLException | URISyntaxException e) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Handle server exceptions.\n+     *\n+     * @param error The ErrorMessage.\n+     * @param e Original error.\n+     * @param data Additional data that should be added to the error message. This is a String var-arg.\n+     * @return\n+     */\n+    private CORSManagementServiceServerException handleServerException(ErrorMessages error, Throwable e,\n+                                                                       String ...data) {\n+\n+        return new CORSManagementServiceServerException(error.getCode(), String.format(error.getMessage(), data), e);\n+    }\n+\n+    /**\n+     * Handle client exceptions.\n+     *\n+     * @param error The ErrorMessage.\n+     * @param data Additional data that should be added to the error message. This is a String var-arg.\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac52ceab5e58cd65ce8471bb765bb12d0736f9"}, "originalPosition": 307}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDU0NzUzOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/CORSOrigin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozMjo0NlrOGlpedA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozMjo0NlrOGlpedA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzMDAzNg==", "bodyText": "Add method comments to all public methods.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r442130036", "createdAt": "2020-06-18T10:32:46Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/CORSOrigin.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.model;\n+\n+/**\n+ * CORSOrigin model class.\n+ */\n+public class CORSOrigin {\n+\n+    private String url;\n+\n+    public CORSOrigin() {\n+\n+    }\n+\n+    public CORSOrigin(String url) {\n+\n+        this.url = url;\n+    }\n+\n+    /**\n+     * Overrides {@code Object.hashCode}.\n+     *\n+     * @return The object hash code.\n+     */\n+    @Override\n+    public int hashCode() {\n+\n+        return url.hashCode();\n+    }\n+\n+    /**\n+     * Overrides {@code Object.equals()}.\n+     *\n+     * @param object The object to compare to.\n+     * @return {@code true} if the objects are both origins with the same value, else {@code false}.\n+     */\n+    @Override\n+    public boolean equals(Object object) {\n+\n+        return object instanceof CORSOrigin && this.toString().equals(object.toString());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac52ceab5e58cd65ce8471bb765bb12d0736f9"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDU1NDE0OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozNDo1OFrOGlpiqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozNDo1OFrOGlpiqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzMTExNA==", "bodyText": "use - instead of _  in error codes e.g. CMA-60001", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r442131114", "createdAt": "2020-06-18T10:34:58Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.constant;\n+\n+/**\n+ * ErrorMessages enum holds the error codes and messages.\n+ */\n+public enum ErrorMessages {\n+\n+    ERROR_CODE_CORS_CRUD(\"CMA_60001\", \"Error in %s while %s the CORS Origins.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac52ceab5e58cd65ce8471bb765bb12d0736f9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDYwMDg1OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/CORSOriginToAttribute.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDo1MDoxOVrOGlqBYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDo1MDoxOVrOGlqBYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzODk3Ng==", "bodyText": "Why don't we throw the exception from here?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r442138976", "createdAt": "2020-06-18T10:50:19Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/CORSOriginToAttribute.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.util.function.Function;\n+\n+/**\n+ * Converts a CORSOrigin to a ConfigurationManagement Resource attribute.\n+ */\n+public class CORSOriginToAttribute implements Function<CORSOrigin, Attribute> {\n+\n+    private static final Log log = LogFactory.getLog(CORSOriginToAttribute.class);\n+\n+    @Override\n+    public Attribute apply(CORSOrigin corsOrigin) {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        Attribute attribute = new Attribute();\n+        attribute.setKey(String.valueOf(corsOrigin.hashCode()));\n+        try {\n+            String corsOriginString = mapper.writeValueAsString(corsOrigin);\n+            attribute.setValue(corsOriginString);\n+        } catch (IOException e) {\n+            if (log.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac52ceab5e58cd65ce8471bb765bb12d0736f9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Nzk0ODE4OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyNDo0M1rOGmK0LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyNDo0M1rOGmK0LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3NjI2OQ==", "bodyText": "client errors should start from 600xx and server erros 650xx..", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r442676269", "createdAt": "2020-06-19T07:24:43Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.constant;\n+\n+/**\n+ * ErrorMessages enum holds the error codes and messages.\n+ */\n+public enum ErrorMessages {\n+\n+    ERROR_CODE_CORS_CRUD(\"CMA-60001\", \"Error in %s while %s the CORS Origins.\"),\n+\n+    ERROR_CODE_INVALID_TENANT_DOMAIN(\"CMA-65001\", \"%s is not a valid tenant domain.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d6e40cbe3a30a3f36c2236bfd2d51f730cfed9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjAyNzUxOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjowMToyMlrOGmv-Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjowMToyMlrOGmv-Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4NTA2Nw==", "bodyText": "Shall we chage the code to CMS - CORS Management Service.\nThat's how you have named the OSGI service right", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443285067", "createdAt": "2020-06-22T02:01:22Z", "author": {"login": "malithie"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.constant;\n+\n+/**\n+ * ErrorMessages enum holds the error codes and messages.\n+ */\n+public enum ErrorMessages {\n+\n+    ERROR_CODE_CORS_CRUD(\"CMA-65001\", \"Error in %s while %s the CORS Origins.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjA0Mjk0OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjoxNTozMlrOGmwH5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjoxNTozMlrOGmwH5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4NzUyNA==", "bodyText": "I think -1 magic number here has a constant in multi tenant utils", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443287524", "createdAt": "2020-06-22T02:15:32Z", "author": {"login": "malithie"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException | JsonProcessingException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Add the CORS Origin resource type to the ConfigurationManager if not already present.\n+     *\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSOriginResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSOriginResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSOriginResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the CORS Origin type is already in the ConfigurationManager.\n+     *\n+     * @return {@code true} if the CORS Origin resource type is already in the ConfigurationManager,\n+     * {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSOriginResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        } catch (ConfigurationManagementClientException e) {\n+            if (ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS.getCode().equals(e.getErrorCode())) {\n+                return true;\n+            }\n+            throw e;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Create a ResourceTypeAdd for CORS Origin type.\n+     *\n+     * @return ResourceTypeAdd A resource type with CORS_ORIGIN_RESOURCE_TYPE set as the name.\n+     */\n+    private ResourceTypeAdd createCORSOriginResourceTypeToAdd() {\n+\n+        ResourceTypeAdd resourceTypeAdd = new ResourceTypeAdd();\n+        resourceTypeAdd.setName(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        resourceTypeAdd.setDescription(CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION);\n+        return resourceTypeAdd;\n+    }\n+\n+    /**\n+     * Retrieve the ConfigurationManager instance from the CORSServiceHolder.\n+     *\n+     * @return ConfigurationManager The ConfigurationManager instance.\n+     */\n+    private ConfigurationManager getConfigurationManager() {\n+\n+        return CORSManagementServiceHolder.getInstance().getConfigurationManager();\n+    }\n+\n+    /**\n+     * Returns true if the tenant already has a particular CORS Origin.\n+     *\n+     * @param origin The Origin to be checked against the existing Origins.\n+     * @return {@code true} if the tenant already have the particular CORS Origin, {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean tenantHasCORSOrigin(CORSOrigin origin) throws ConfigurationManagementException, IOException {\n+\n+        Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                CORS_ORIGIN_RESOURCE_NAME);\n+        if (resource != null) {\n+            List<CORSOrigin> currentCORSOrigins = new ResourceToCORSOrigin().apply(resource);\n+\n+            return currentCORSOrigins.contains(origin);\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Validate the tenant domain.\n+     *\n+     * @param tenantDomain The tenant domain.\n+     * @throws CORSManagementServiceClientException\n+     */\n+    public void validateTenantDomain(String tenantDomain) throws CORSManagementServiceClientException {\n+\n+        if (IdentityTenantUtil.getTenantId(tenantDomain) == -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjA1MDk5OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjoyMjoxNFrOGmwMyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToyNzoxM1rOGnurZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4ODc3OA==", "bodyText": "Configuration manager should be ideally throwing a not found exception, rather than the cosumers checking for an error code. Shall we fix this. @mefarazath , @emswbandara , @ashensw thoughts ?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443288778", "createdAt": "2020-06-22T02:22:14Z", "author": {"login": "malithie"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException | JsonProcessingException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Add the CORS Origin resource type to the ConfigurationManager if not already present.\n+     *\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSOriginResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSOriginResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSOriginResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the CORS Origin type is already in the ConfigurationManager.\n+     *\n+     * @return {@code true} if the CORS Origin resource type is already in the ConfigurationManager,\n+     * {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSOriginResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        } catch (ConfigurationManagementClientException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxMzc5MA==", "bodyText": "for other similar OSGi services we followed the same approach. We defined a specific client error code and added a mapping to send 404 not found to the clients.\ne.g.\nhttps://github.com/wso2/identity-rest-dispatcher/blob/master/components/org.wso2.carbon.identity.api.dispatcher/src/main/resources/ErrorMappings.properties#L29", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443313790", "createdAt": "2020-06-22T04:40:50Z", "author": {"login": "emswbandara"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException | JsonProcessingException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Add the CORS Origin resource type to the ConfigurationManager if not already present.\n+     *\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSOriginResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSOriginResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSOriginResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the CORS Origin type is already in the ConfigurationManager.\n+     *\n+     * @return {@code true} if the CORS Origin resource type is already in the ConfigurationManager,\n+     * {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSOriginResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        } catch (ConfigurationManagementClientException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4ODc3OA=="}, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxODUzNw==", "bodyText": "Is that the correct thing to do?\nIMO, exception type should denote this other than further string processing", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443318537", "createdAt": "2020-06-22T05:04:28Z", "author": {"login": "malithie"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException | JsonProcessingException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Add the CORS Origin resource type to the ConfigurationManager if not already present.\n+     *\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSOriginResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSOriginResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSOriginResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the CORS Origin type is already in the ConfigurationManager.\n+     *\n+     * @return {@code true} if the CORS Origin resource type is already in the ConfigurationManager,\n+     * {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSOriginResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        } catch (ConfigurationManagementClientException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4ODc3OA=="}, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNTc2Ng==", "bodyText": "Yes. IMO we should fix this behaviour.\nCurrent behaviour makes it very hard to check for the existence of something in the ConfigurationManager as it requires the callee to handle exceptions and check error codes just to see if something exists.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443325766", "createdAt": "2020-06-22T05:36:08Z", "author": {"login": "mefarazath"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException | JsonProcessingException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Add the CORS Origin resource type to the ConfigurationManager if not already present.\n+     *\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSOriginResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSOriginResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSOriginResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the CORS Origin type is already in the ConfigurationManager.\n+     *\n+     * @return {@code true} if the CORS Origin resource type is already in the ConfigurationManager,\n+     * {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSOriginResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        } catch (ConfigurationManagementClientException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4ODc3OA=="}, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzNDAyMA==", "bodyText": "@ivantha please create an issue for this and point here.\nWe can look into that separately", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443934020", "createdAt": "2020-06-23T02:59:43Z", "author": {"login": "malithie"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException | JsonProcessingException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Add the CORS Origin resource type to the ConfigurationManager if not already present.\n+     *\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSOriginResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSOriginResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSOriginResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the CORS Origin type is already in the ConfigurationManager.\n+     *\n+     * @return {@code true} if the CORS Origin resource type is already in the ConfigurationManager,\n+     * {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSOriginResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        } catch (ConfigurationManagementClientException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4ODc3OA=="}, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxMjQyMg==", "bodyText": "wso2/product-is#8555", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r444312422", "createdAt": "2020-06-23T15:27:13Z", "author": {"login": "ivantha"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException | JsonProcessingException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Add the CORS Origin resource type to the ConfigurationManager if not already present.\n+     *\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSOriginResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSOriginResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSOriginResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the CORS Origin type is already in the ConfigurationManager.\n+     *\n+     * @return {@code true} if the CORS Origin resource type is already in the ConfigurationManager,\n+     * {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSOriginResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        } catch (ConfigurationManagementClientException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4ODc3OA=="}, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjA1NjQxOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjoyNjo1M1rOGmwQBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMzo0OTozNFrOGnYR9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4OTYwNQ==", "bodyText": "Ideally this service should be returning an unmodifiable list right", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443289605", "createdAt": "2020-06-22T02:26:53Z", "author": {"login": "malithie"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkyMDUzMw==", "bodyText": "What is the purpose of returning an unmodifiable list rather than a plain ArrayList?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443920533", "createdAt": "2020-06-23T02:06:41Z", "author": {"login": "ivantha"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4OTYwNQ=="}, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzNDM0MQ==", "bodyText": "So that the consumers cannot manipulate.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443934341", "createdAt": "2020-06-23T03:00:59Z", "author": {"login": "malithie"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4OTYwNQ=="}, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0NTQ2MA==", "bodyText": "Changed to return Collections.unmodifiableList(corsOrigins);.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443945460", "createdAt": "2020-06-23T03:49:34Z", "author": {"login": "ivantha"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4OTYwNQ=="}, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjA1ODQzOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjoyODozMFrOGmwRRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjoyODozMFrOGmwRRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4OTkyNA==", "bodyText": "It's not good to pass text information that should be in the message as arguments. It breaks readability.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443289924", "createdAt": "2020-06-22T02:28:30Z", "author": {"login": "malithie"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjA3NjkwOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjo0NDowMFrOGmwcKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjo0NDowMFrOGmwcKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5MjcxNA==", "bodyText": "check my comment above", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443292714", "createdAt": "2020-06-22T02:44:00Z", "author": {"login": "malithie"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException | JsonProcessingException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjA4MDc2OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjo0NzowOFrOGmwelA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjo0NzowOFrOGmwelA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5MzMzMg==", "bodyText": "check my comment above", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443293332", "createdAt": "2020-06-22T02:47:08Z", "author": {"login": "malithie"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException | JsonProcessingException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjA4NTgxOnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjo1MDo0M1rOGmwhgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMTo1ODowMlrOGnWnWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5NDA4MQ==", "bodyText": "Can we rename this method? Something like 'isPreConfiguredCORSOrigin' or 'isDefinedCORSOrigin' or 'isCORSOriginAlreadyDefined'", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443294081", "createdAt": "2020-06-22T02:50:43Z", "author": {"login": "malithie"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException | JsonProcessingException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Add the CORS Origin resource type to the ConfigurationManager if not already present.\n+     *\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSOriginResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSOriginResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSOriginResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the CORS Origin type is already in the ConfigurationManager.\n+     *\n+     * @return {@code true} if the CORS Origin resource type is already in the ConfigurationManager,\n+     * {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSOriginResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        } catch (ConfigurationManagementClientException e) {\n+            if (ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS.getCode().equals(e.getErrorCode())) {\n+                return true;\n+            }\n+            throw e;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Create a ResourceTypeAdd for CORS Origin type.\n+     *\n+     * @return ResourceTypeAdd A resource type with CORS_ORIGIN_RESOURCE_TYPE set as the name.\n+     */\n+    private ResourceTypeAdd createCORSOriginResourceTypeToAdd() {\n+\n+        ResourceTypeAdd resourceTypeAdd = new ResourceTypeAdd();\n+        resourceTypeAdd.setName(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        resourceTypeAdd.setDescription(CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION);\n+        return resourceTypeAdd;\n+    }\n+\n+    /**\n+     * Retrieve the ConfigurationManager instance from the CORSServiceHolder.\n+     *\n+     * @return ConfigurationManager The ConfigurationManager instance.\n+     */\n+    private ConfigurationManager getConfigurationManager() {\n+\n+        return CORSManagementServiceHolder.getInstance().getConfigurationManager();\n+    }\n+\n+    /**\n+     * Returns true if the tenant already has a particular CORS Origin.\n+     *\n+     * @param origin The Origin to be checked against the existing Origins.\n+     * @return {@code true} if the tenant already have the particular CORS Origin, {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean tenantHasCORSOrigin(CORSOrigin origin) throws ConfigurationManagementException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkxODE2OA==", "bodyText": "Changed to isDefinedCORSOriginResource.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r443918168", "createdAt": "2020-06-23T01:58:02Z", "author": {"login": "ivantha"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementClientException;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.CORSManagementService;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.CORSManagementServiceHolder;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToAttribute;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.CORSOriginToResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.internal.function.ResourceToCORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_CRUD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_EMPTY_LIST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_NOT_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_ORIGIN_PRESENT;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_ORIGIN_RESOURCE_TYPE_NAME;\n+\n+/**\n+ * Implementation of the CORSService.\n+ */\n+public class CORSManagementServiceImpl implements CORSManagementService {\n+\n+    private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n+\n+    @Override\n+    public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n+                    CORS_ORIGIN_RESOURCE_NAME);\n+            List<CORSOrigin> corsOrigins;\n+            if (resource == null) {\n+                corsOrigins = new ArrayList<>();\n+            } else {\n+                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n+            }\n+\n+            return corsOrigins;\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"retrieving\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigins);\n+            getConfigurationManager().replaceResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n+        } catch (ConfigurationManagementException | JsonProcessingException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"updating\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().addAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute);\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, \"adding\", tenantDomain);\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceException {\n+\n+        validateTenantDomain(tenantDomain);\n+        validateOrigins(corsOrigins);\n+        try {\n+            FrameworkUtils.startTenantFlow(tenantDomain);\n+            addCORSOriginResourceTypeIfNotExists();\n+\n+            // Check if origins are not present\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                if (!tenantHasCORSOrigin(corsOrigin)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(),\n+                                tenantDomain, corsOrigin)));\n+                    }\n+                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, corsOrigin.getUrl());\n+                }\n+            }\n+\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                Attribute attribute = new CORSOriginToAttribute().apply(corsOrigin);\n+                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME, CORS_ORIGIN_RESOURCE_NAME,\n+                        attribute.getKey());\n+            }\n+        } catch (ConfigurationManagementException | IOException e) {\n+            throw handleServerException(ERROR_CODE_CORS_CRUD, e, tenantDomain, \"deleting\");\n+        } finally {\n+            FrameworkUtils.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Add the CORS Origin resource type to the ConfigurationManager if not already present.\n+     *\n+     * @throws ConfigurationManagementException\n+     */\n+    private void addCORSOriginResourceTypeIfNotExists() throws ConfigurationManagementException {\n+\n+        if (isCORSOriginResourceTypeNotExists()) {\n+            ResourceTypeAdd resourceTypeAdd = createCORSOriginResourceTypeToAdd();\n+            getConfigurationManager().addResourceType(resourceTypeAdd);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the CORS Origin type is already in the ConfigurationManager.\n+     *\n+     * @return {@code true} if the CORS Origin resource type is already in the ConfigurationManager,\n+     * {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean isCORSOriginResourceTypeNotExists() throws ConfigurationManagementException {\n+\n+        try {\n+            getConfigurationManager().getResourceType(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        } catch (ConfigurationManagementClientException e) {\n+            if (ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS.getCode().equals(e.getErrorCode())) {\n+                return true;\n+            }\n+            throw e;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Create a ResourceTypeAdd for CORS Origin type.\n+     *\n+     * @return ResourceTypeAdd A resource type with CORS_ORIGIN_RESOURCE_TYPE set as the name.\n+     */\n+    private ResourceTypeAdd createCORSOriginResourceTypeToAdd() {\n+\n+        ResourceTypeAdd resourceTypeAdd = new ResourceTypeAdd();\n+        resourceTypeAdd.setName(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+        resourceTypeAdd.setDescription(CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION);\n+        return resourceTypeAdd;\n+    }\n+\n+    /**\n+     * Retrieve the ConfigurationManager instance from the CORSServiceHolder.\n+     *\n+     * @return ConfigurationManager The ConfigurationManager instance.\n+     */\n+    private ConfigurationManager getConfigurationManager() {\n+\n+        return CORSManagementServiceHolder.getInstance().getConfigurationManager();\n+    }\n+\n+    /**\n+     * Returns true if the tenant already has a particular CORS Origin.\n+     *\n+     * @param origin The Origin to be checked against the existing Origins.\n+     * @return {@code true} if the tenant already have the particular CORS Origin, {@code false} otherwise.\n+     * @throws ConfigurationManagementException\n+     */\n+    private boolean tenantHasCORSOrigin(CORSOrigin origin) throws ConfigurationManagementException, IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5NDA4MQ=="}, "originalCommit": {"oid": "e41e681369afa41ef2327d8e3e9ead8f062dbed5"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTUzMzQ5OnYy", "diffSide": "RIGHT", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODo1NzoxN1rOHQUixA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMzoxOTozMlrOHWU5LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3NTg0NA==", "bodyText": "Do we need this?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r486875844", "createdAt": "2020-09-11T08:57:17Z", "author": {"login": "gayashanbc"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,173 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>cors-mgt</artifactId>\n+        <version>5.17.118-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.cors.mgt.core</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>WSO2 Carbon - CORS Management Core</name>\n+    <description>Identity CORS Management Core</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.carbon</groupId>\n+            <artifactId>org.wso2.carbon.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.eclipse.osgi</groupId>\n+            <artifactId>org.eclipse.osgi.services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.configuration.mgt.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-annotations</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.logging</groupId>\n+            <artifactId>pax-logging-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.felix</groupId>\n+                <artifactId>maven-bundle-plugin</artifactId>\n+                <extensions>true</extensions>\n+                <configuration>\n+                    <instructions>\n+                        <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>\n+                        <Bundle-Name>${project.artifactId}</Bundle-Name>\n+                        <Private-Package>\n+                            org.wso2.carbon.identity.cors.mgt.core.internal\n+                        </Private-Package>\n+                        <Import-Package>\n+                            org.wso2.carbon.identity.configuration.mgt.core.*; version=\"${project.version}\",\n+                            org.osgi.framework; version=\"${osgi.framework.imp.pkg.version.range}\",\n+                            org.osgi.service.component; version=\"${osgi.service.component.imp.pkg.version.range}\",\n+                            org.apache.commons.logging; version=\"${import.package.version.commons.logging}\",\n+                        </Import-Package>\n+                        <Export-Package>\n+                            !org.wso2.carbon.identity.cors.mgt.core.internal,\n+                            org.wso2.carbon.identity.cors.mgt.core.*; version=\"${project.version}\",\n+                        </Export-Package>\n+                    </instructions>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>default-prepare-agent</id>\n+                        <goals>\n+                            <goal>prepare-agent</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-prepare-agent-integration</id>\n+                        <goals>\n+                            <goal>prepare-agent-integration</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report</id>\n+                        <goals>\n+                            <goal>report</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report-integration</id>\n+                        <goals>\n+                            <goal>report-integration</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-check</id>\n+                        <goals>\n+                            <goal>check</goal>\n+                        </goals>\n+                        <configuration>\n+                            <rules>\n+                                <rule implementation=\"org.jacoco.maven.RuleConfiguration\">\n+                                    <element>BUNDLE</element>\n+                                    <limits>\n+                                        <limit implementation=\"org.jacoco.report.check.Limit\">\n+                                            <counter>COMPLEXITY</counter>\n+                                            <value>COVEREDRATIO</value>\n+<!--                                            <minimum>0.50</minimum>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8df9f16921f1ad3b0223285094a1c5c8b3c2e791"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE3MzAzNw==", "bodyText": "This is enabled in the current implementation.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2938#discussion_r493173037", "createdAt": "2020-09-23T03:19:32Z", "author": {"login": "ivantha"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "diffHunk": "@@ -0,0 +1,173 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <groupId>org.wso2.carbon.identity.framework</groupId>\n+        <artifactId>cors-mgt</artifactId>\n+        <version>5.17.118-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.cors.mgt.core</artifactId>\n+    <packaging>bundle</packaging>\n+    <name>WSO2 Carbon - CORS Management Core</name>\n+    <description>Identity CORS Management Core</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.carbon</groupId>\n+            <artifactId>org.wso2.carbon.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.eclipse.osgi</groupId>\n+            <artifactId>org.eclipse.osgi.services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.configuration.mgt.core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-annotations</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.logging</groupId>\n+            <artifactId>pax-logging-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.felix</groupId>\n+                <artifactId>maven-bundle-plugin</artifactId>\n+                <extensions>true</extensions>\n+                <configuration>\n+                    <instructions>\n+                        <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>\n+                        <Bundle-Name>${project.artifactId}</Bundle-Name>\n+                        <Private-Package>\n+                            org.wso2.carbon.identity.cors.mgt.core.internal\n+                        </Private-Package>\n+                        <Import-Package>\n+                            org.wso2.carbon.identity.configuration.mgt.core.*; version=\"${project.version}\",\n+                            org.osgi.framework; version=\"${osgi.framework.imp.pkg.version.range}\",\n+                            org.osgi.service.component; version=\"${osgi.service.component.imp.pkg.version.range}\",\n+                            org.apache.commons.logging; version=\"${import.package.version.commons.logging}\",\n+                        </Import-Package>\n+                        <Export-Package>\n+                            !org.wso2.carbon.identity.cors.mgt.core.internal,\n+                            org.wso2.carbon.identity.cors.mgt.core.*; version=\"${project.version}\",\n+                        </Export-Package>\n+                    </instructions>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>default-prepare-agent</id>\n+                        <goals>\n+                            <goal>prepare-agent</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-prepare-agent-integration</id>\n+                        <goals>\n+                            <goal>prepare-agent-integration</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report</id>\n+                        <goals>\n+                            <goal>report</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report-integration</id>\n+                        <goals>\n+                            <goal>report-integration</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-check</id>\n+                        <goals>\n+                            <goal>check</goal>\n+                        </goals>\n+                        <configuration>\n+                            <rules>\n+                                <rule implementation=\"org.jacoco.maven.RuleConfiguration\">\n+                                    <element>BUNDLE</element>\n+                                    <limits>\n+                                        <limit implementation=\"org.jacoco.report.check.Limit\">\n+                                            <counter>COMPLEXITY</counter>\n+                                            <value>COVEREDRATIO</value>\n+<!--                                            <minimum>0.50</minimum>-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3NTg0NA=="}, "originalCommit": {"oid": "8df9f16921f1ad3b0223285094a1c5c8b3c2e791"}, "originalPosition": 162}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2665, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}