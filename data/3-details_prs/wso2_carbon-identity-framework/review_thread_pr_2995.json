{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMzc4NTA4", "number": 2995, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo0ODo0OFrOEMXynA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo0NDo0N1rOEOt-hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDA4MTU2OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo0ODo0OFrOGucKkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo0ODo0OFrOGucKkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0OTEzNg==", "bodyText": "Shall we move chkRemember to a constant as it has been used in multiple places?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r451349136", "createdAt": "2020-07-08T07:48:48Z", "author": {"login": "ashensw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java", "diffHunk": "@@ -765,19 +763,41 @@ protected void sendResponse(HttpServletRequest request, HttpServletResponse resp\n \n         // redirect to the caller\n         String redirectURL;\n-        String commonauthCallerPath = context.getCallerPath();\n-\n+        String callerPath = context.getCallerPath();\n         try {\n-            String queryParamsString = \"\";\n-            if (context.getCallerSessionKey() != null) {\n-                queryParamsString = FrameworkConstants.SESSION_DATA_KEY + \"=\" +\n-                        URLEncoder.encode(context.getCallerSessionKey(), \"UTF-8\");\n-            }\n+            if (!FrameworkUtils.isAbsoluteURI(callerPath)) {\n+                ServiceURLBuilder serviceURLBuilder = ServiceURLBuilder.create().addPath(context.getCallerPath());\n+                if (context.getCallerSessionKey() != null) {\n+                    serviceURLBuilder.addParameter(FrameworkConstants.SESSION_DATA_KEY, URLEncoder.encode(context\n+                            .getCallerSessionKey(), \"UTF-8\"));\n+                }\n+\n+                if (context.isRequestAuthenticated() && context.isRememberMe()) {\n+                    serviceURLBuilder.addParameter(\"chkRemember\", \"on\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e336730eaccec4510412c34a1349cc4b25154b8f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDA4NjM1OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo1MDowN1rOGucNjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo1MDowN1rOGucNjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0OTkwMQ==", "bodyText": "Can't we just assign the value to rememberMeParam here as the rememberMeParam is an empty string?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r451349901", "createdAt": "2020-07-08T07:50:07Z", "author": {"login": "ashensw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java", "diffHunk": "@@ -765,19 +763,41 @@ protected void sendResponse(HttpServletRequest request, HttpServletResponse resp\n \n         // redirect to the caller\n         String redirectURL;\n-        String commonauthCallerPath = context.getCallerPath();\n-\n+        String callerPath = context.getCallerPath();\n         try {\n-            String queryParamsString = \"\";\n-            if (context.getCallerSessionKey() != null) {\n-                queryParamsString = FrameworkConstants.SESSION_DATA_KEY + \"=\" +\n-                        URLEncoder.encode(context.getCallerSessionKey(), \"UTF-8\");\n-            }\n+            if (!FrameworkUtils.isAbsoluteURI(callerPath)) {\n+                ServiceURLBuilder serviceURLBuilder = ServiceURLBuilder.create().addPath(context.getCallerPath());\n+                if (context.getCallerSessionKey() != null) {\n+                    serviceURLBuilder.addParameter(FrameworkConstants.SESSION_DATA_KEY, URLEncoder.encode(context\n+                            .getCallerSessionKey(), \"UTF-8\"));\n+                }\n+\n+                if (context.isRequestAuthenticated() && context.isRememberMe()) {\n+                    serviceURLBuilder.addParameter(\"chkRemember\", \"on\");\n+                }\n \n-            if (StringUtils.isNotEmpty(rememberMeParam)) {\n-                queryParamsString += \"&\" + rememberMeParam;\n+                try {\n+                    redirectURL = serviceURLBuilder.build().getAbsolutePublicURL();\n+                } catch (URLBuilderException e) {\n+                    throw FrameworkRuntimeException.error(\"Error while building redirect URL.\", e);\n+                }\n+            } else {\n+                String queryParamsString = \"\";\n+                if (context.getCallerSessionKey() != null) {\n+                    queryParamsString = FrameworkConstants.SESSION_DATA_KEY + \"=\" +\n+                            URLEncoder.encode(context.getCallerSessionKey(), \"UTF-8\");\n+                }\n+                String rememberMeParam = \"\";\n+\n+                if (context.isRequestAuthenticated() && context.isRememberMe()) {\n+                    rememberMeParam = rememberMeParam + \"chkRemember=on\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e336730eaccec4510412c34a1349cc4b25154b8f"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDA5NjAxOnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo1Mjo0MVrOGucTWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo1Mjo0MVrOGucTWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1MTM4NQ==", "bodyText": "Is it correct to return true if the uri is empty?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r451351385", "createdAt": "2020-07-08T07:52:41Z", "author": {"login": "ashensw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2560,4 +2561,25 @@ public static boolean isContinueOnClaimHandlingErrorAllowed() {\n         // If config is empty or not a boolean value, the property must be set to the default value which is true.\n         return !Boolean.FALSE.toString().equalsIgnoreCase(continueOnClaimHandlingErrorValue);\n     }\n+\n+    public static boolean isAbsoluteURI(String uri) {\n+\n+        if (StringUtils.isBlank(uri)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"URI is empty.\");\n+            }\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e336730eaccec4510412c34a1349cc4b25154b8f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDEwMTc3OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo1NDoyNlrOGucXHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDozMDoyN1rOGvyacA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1MjM0OA==", "bodyText": "If the uri throws an URISyntaxException it will return true. Is it expected behavior?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r451352348", "createdAt": "2020-07-08T07:54:26Z", "author": {"login": "ashensw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2560,4 +2561,25 @@ public static boolean isContinueOnClaimHandlingErrorAllowed() {\n         // If config is empty or not a boolean value, the property must be set to the default value which is true.\n         return !Boolean.FALSE.toString().equalsIgnoreCase(continueOnClaimHandlingErrorValue);\n     }\n+\n+    public static boolean isAbsoluteURI(String uri) {\n+\n+        if (StringUtils.isBlank(uri)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"URI is empty.\");\n+            }\n+            return true;\n+        }\n+\n+        try {\n+            final URI uriObj = new URI(uri);\n+            return uriObj.isAbsolute();\n+        } catch (URISyntaxException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unable to process the URI: \" + uri, e);\n+            }\n+        }\n+        // Default behavior of a URI is expected to be absolute;\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e336730eaccec4510412c34a1349cc4b25154b8f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2MjIyNA==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r452762224", "createdAt": "2020-07-10T10:30:27Z", "author": {"login": "emswbandara"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2560,4 +2561,25 @@ public static boolean isContinueOnClaimHandlingErrorAllowed() {\n         // If config is empty or not a boolean value, the property must be set to the default value which is true.\n         return !Boolean.FALSE.toString().equalsIgnoreCase(continueOnClaimHandlingErrorValue);\n     }\n+\n+    public static boolean isAbsoluteURI(String uri) {\n+\n+        if (StringUtils.isBlank(uri)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"URI is empty.\");\n+            }\n+            return true;\n+        }\n+\n+        try {\n+            final URI uriObj = new URI(uri);\n+            return uriObj.isAbsolute();\n+        } catch (URISyntaxException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unable to process the URI: \" + uri, e);\n+            }\n+        }\n+        // Default behavior of a URI is expected to be absolute;\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1MjM0OA=="}, "originalCommit": {"oid": "e336730eaccec4510412c34a1349cc4b25154b8f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODY4NTc3OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo0NDoxN1rOGyBi9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo0NDoxN1rOGyBi9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNzMxNg==", "bodyText": "Should we do this?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r455107316", "createdAt": "2020-07-15T14:44:17Z", "author": {"login": "mefarazath"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java", "diffHunk": "@@ -229,8 +241,17 @@ public String getType(IdentityMessageContext context) {\n         responseBuilder.setCallbackPath(getCallbackPath(context));\n         responseBuilder.setRelyingParty(getRelyingPartyId(context));\n         //type parameter is using since framework checking it, but future it'll use AUTH_NAME\n-        responseBuilder.setAuthType(getType(context));\n-        String commonAuthURL = IdentityUtil.getServerURL(FrameworkConstants.COMMONAUTH, true, true);\n+        String commonAuthURL;\n+        try {\n+            ServiceURLBuilder serviceURLBuilder = ServiceURLBuilder.create().addPath(FrameworkConstants.COMMONAUTH);\n+            commonAuthURL = serviceURLBuilder.build().getAbsolutePublicURL();\n+        } catch (URLBuilderException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Error occurred when building URL.\", e);\n+            }\n+            // Fallback to old way, for error scenarios.\n+            commonAuthURL = IdentityUtil.getServerURL(FrameworkConstants.COMMONAUTH, true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9b9ee0b38f361d34752af71ae3f8cbc40b5414b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODY4ODA3OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo0NDo0N1rOGyBkdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo0NDo0N1rOGyBkdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNzcwMg==", "bodyText": "Wouldn't this cause incorrect behaviours in tenant qualified URL mode?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r455107702", "createdAt": "2020-07-15T14:44:47Z", "author": {"login": "mefarazath"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java", "diffHunk": "@@ -180,7 +182,17 @@ public String getType(IdentityMessageContext context) {\n         responseBuilder.setRelyingParty(getRelyingPartyId(context));\n         //type parameter is using since framework checking it, but future it'll use AUTH_NAME\n         responseBuilder.setAuthType(getType(context));\n-        String commonAuthURL = IdentityUtil.getServerURL(FrameworkConstants.COMMONAUTH, true, true);\n+        String commonAuthURL;\n+        try {\n+            ServiceURLBuilder serviceURLBuilder = ServiceURLBuilder.create().addPath(FrameworkConstants.COMMONAUTH);\n+            commonAuthURL = serviceURLBuilder.build().getAbsolutePublicURL();\n+        } catch (URLBuilderException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Error occurred when building URL.\", e);\n+            }\n+            // Fallback to old way, for error scenarios.\n+            commonAuthURL = IdentityUtil.getServerURL(FrameworkConstants.COMMONAUTH, true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9b9ee0b38f361d34752af71ae3f8cbc40b5414b"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2593, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}