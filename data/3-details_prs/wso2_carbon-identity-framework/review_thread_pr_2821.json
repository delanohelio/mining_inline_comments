{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTY5MTkz", "number": 2821, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMToxMjoxM1rODnbHPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTowNDoxM1rODoX7NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjY1Mjc2OnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdentityProviderManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMToxMjoxM1rOF1aWpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMToxMjoxM1rOF1aWpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1MDYyOQ==", "bodyText": "formatting issue. remove space before @deprecated", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r391550629", "createdAt": "2020-03-12T11:12:13Z", "author": {"login": "emswbandara"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdentityProviderManager.java", "diffHunk": "@@ -1066,6 +1066,7 @@ public void updateResidentIdP(IdentityProvider identityProvider, String tenantDo\n      * @return Identity Provider's Basic Information array {@link IdpSearchResult}.\n      * @throws IdentityProviderManagementServerException server related error while getting Identity  Providers object.\n      * @throws IdentityProviderManagementClientException client related error while getting Identity  Providers object.\n+     *  @deprecated use {@link #getIdPs(Integer, Integer, String, String, String, String, List)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTg2NjQyOnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdentityProviderManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNjo1NDoyMVrOF15QMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNjo1NDoyMVrOF15QMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1Njg4MQ==", "bodyText": "let's pass an empty list rather than null. :-)", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392056881", "createdAt": "2020-03-13T06:54:21Z", "author": {"login": "senthalan"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdentityProviderManagementService.java", "diffHunk": "@@ -148,7 +148,7 @@ public int getAllIdpCount() throws IdentityProviderManagementException {\n         String tenantDomain = CarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n         IdpSearchResult idpSearchResult = IdentityProviderManager.getInstance()\n                 .getIdPs(limit, offset, filter, IdPManagementConstants.DEFAULT_SORT_ORDER,\n-                        IdPManagementConstants.DEFAULT_SORT_BY, tenantDomain);\n+                        IdPManagementConstants.DEFAULT_SORT_BY, tenantDomain, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTg3MDY5OnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdpManager.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNjo1Njo0MlrOF15Spg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoxNzozN1rOF2zvJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1NzUxMA==", "bodyText": "Don't we need a default implementation to the new interface method", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392057510", "createdAt": "2020-03-13T06:56:42Z", "author": {"login": "senthalan"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdpManager.java", "diffHunk": "@@ -85,11 +85,32 @@ void updateResidentIdP(IdentityProvider identityProvider, String tenantDomain) t\n      * @return Identity Provider's Basic Information array {@link IdpSearchResult}.\n      * @throws IdentityProviderManagementServerException server related error when getting list of Identity  Providers.\n      * @throws IdentityProviderManagementClientException client related error when getting list of Identity  Providers.\n+     * @deprecated use {@link #getIdPs(Integer, Integer, String, String, String, String, List)} instead.\n      */\n     IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, String sortOrder, String sortBy,\n                             String tenantDomain)\n             throws IdentityProviderManagementServerException, IdentityProviderManagementClientException;\n \n+    /**\n+     * Get all identity provider's Basic information along with additionally requested information depends on the\n+     * requiredAttributes.\n+     *\n+     * @param limit              Limit per page.\n+     * @param offset             Offset value.\n+     * @param filter             Filter value for IdP search.\n+     * @param sortOrder          Order of IdP ASC/DESC.\n+     * @param sortBy             The column value need to sort.\n+     * @param tenantDomain       TenantDomain of the user.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @return Identity Provider's Basic Information array along with requested attribute\n+     * information{@link IdpSearchResult}.\n+     * @throws IdentityProviderManagementServerException server related error when getting list of Identity Providers.\n+     * @throws IdentityProviderManagementClientException client related error when getting list of Identity Providers.\n+     */\n+    IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, String sortOrder, String sortBy,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5MDExMw==", "bodyText": "Since it is a new version, do we need to ?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392890113", "createdAt": "2020-03-16T09:42:15Z", "author": {"login": "sarubi"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdpManager.java", "diffHunk": "@@ -85,11 +85,32 @@ void updateResidentIdP(IdentityProvider identityProvider, String tenantDomain) t\n      * @return Identity Provider's Basic Information array {@link IdpSearchResult}.\n      * @throws IdentityProviderManagementServerException server related error when getting list of Identity  Providers.\n      * @throws IdentityProviderManagementClientException client related error when getting list of Identity  Providers.\n+     * @deprecated use {@link #getIdPs(Integer, Integer, String, String, String, String, List)} instead.\n      */\n     IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, String sortOrder, String sortBy,\n                             String tenantDomain)\n             throws IdentityProviderManagementServerException, IdentityProviderManagementClientException;\n \n+    /**\n+     * Get all identity provider's Basic information along with additionally requested information depends on the\n+     * requiredAttributes.\n+     *\n+     * @param limit              Limit per page.\n+     * @param offset             Offset value.\n+     * @param filter             Filter value for IdP search.\n+     * @param sortOrder          Order of IdP ASC/DESC.\n+     * @param sortBy             The column value need to sort.\n+     * @param tenantDomain       TenantDomain of the user.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @return Identity Provider's Basic Information array along with requested attribute\n+     * information{@link IdpSearchResult}.\n+     * @throws IdentityProviderManagementServerException server related error when getting list of Identity Providers.\n+     * @throws IdentityProviderManagementClientException client related error when getting list of Identity Providers.\n+     */\n+    IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, String sortOrder, String sortBy,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1NzUxMA=="}, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAwMzIwNQ==", "bodyText": "better to add a default implementation to return null. Otherwise if there are classes written implementing this they will break unless we release a minor/major version", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r393003205", "createdAt": "2020-03-16T12:56:04Z", "author": {"login": "emswbandara"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdpManager.java", "diffHunk": "@@ -85,11 +85,32 @@ void updateResidentIdP(IdentityProvider identityProvider, String tenantDomain) t\n      * @return Identity Provider's Basic Information array {@link IdpSearchResult}.\n      * @throws IdentityProviderManagementServerException server related error when getting list of Identity  Providers.\n      * @throws IdentityProviderManagementClientException client related error when getting list of Identity  Providers.\n+     * @deprecated use {@link #getIdPs(Integer, Integer, String, String, String, String, List)} instead.\n      */\n     IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, String sortOrder, String sortBy,\n                             String tenantDomain)\n             throws IdentityProviderManagementServerException, IdentityProviderManagementClientException;\n \n+    /**\n+     * Get all identity provider's Basic information along with additionally requested information depends on the\n+     * requiredAttributes.\n+     *\n+     * @param limit              Limit per page.\n+     * @param offset             Offset value.\n+     * @param filter             Filter value for IdP search.\n+     * @param sortOrder          Order of IdP ASC/DESC.\n+     * @param sortBy             The column value need to sort.\n+     * @param tenantDomain       TenantDomain of the user.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @return Identity Provider's Basic Information array along with requested attribute\n+     * information{@link IdpSearchResult}.\n+     * @throws IdentityProviderManagementServerException server related error when getting list of Identity Providers.\n+     * @throws IdentityProviderManagementClientException client related error when getting list of Identity Providers.\n+     */\n+    IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, String sortOrder, String sortBy,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1NzUxMA=="}, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxNTA3Nw==", "bodyText": "added", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r393015077", "createdAt": "2020-03-16T13:17:37Z", "author": {"login": "sarubi"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdpManager.java", "diffHunk": "@@ -85,11 +85,32 @@ void updateResidentIdP(IdentityProvider identityProvider, String tenantDomain) t\n      * @return Identity Provider's Basic Information array {@link IdpSearchResult}.\n      * @throws IdentityProviderManagementServerException server related error when getting list of Identity  Providers.\n      * @throws IdentityProviderManagementClientException client related error when getting list of Identity  Providers.\n+     * @deprecated use {@link #getIdPs(Integer, Integer, String, String, String, String, List)} instead.\n      */\n     IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, String sortOrder, String sortBy,\n                             String tenantDomain)\n             throws IdentityProviderManagementServerException, IdentityProviderManagementClientException;\n \n+    /**\n+     * Get all identity provider's Basic information along with additionally requested information depends on the\n+     * requiredAttributes.\n+     *\n+     * @param limit              Limit per page.\n+     * @param offset             Offset value.\n+     * @param filter             Filter value for IdP search.\n+     * @param sortOrder          Order of IdP ASC/DESC.\n+     * @param sortBy             The column value need to sort.\n+     * @param tenantDomain       TenantDomain of the user.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @return Identity Provider's Basic Information array along with requested attribute\n+     * information{@link IdpSearchResult}.\n+     * @throws IdentityProviderManagementServerException server related error when getting list of Identity Providers.\n+     * @throws IdentityProviderManagementClientException client related error when getting list of Identity Providers.\n+     */\n+    IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, String sortOrder, String sortBy,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1NzUxMA=="}, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTg3NTA5OnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNjo1OTowN1rOF15VRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNjo1OTowN1rOF15VRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1ODE4MQ==", "bodyText": "we can move the null check inside the appendRequiredAttributes(), it will easier to read the code", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392058181", "createdAt": "2020-03-13T06:59:07Z", "author": {"login": "senthalan"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "diffHunk": "@@ -350,8 +378,12 @@ private ResultSet getIdpQueryResultSet(Connection dbConnection, String sortedOrd\n             prepStmt.setInt(filterAttributeValueSize + 3, offset);\n         } else if (databaseProductName.contains(\"Microsoft\")) {\n             sqlQuery = IdPManagementConstants.SQLQueries.GET_IDP_BY_TENANT_MSSQL;\n+            if (requiredAttributes != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQwODk2OnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdpManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyMjozNlrOF1-eKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyMjozNlrOF1-eKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MjM3OA==", "bodyText": "let's throw the parent IdentityProviderManagementException instead of IdentityProviderManagementServerException and IdentityProviderManagementClientException", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392142378", "createdAt": "2020-03-13T10:22:36Z", "author": {"login": "emswbandara"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdpManager.java", "diffHunk": "@@ -85,11 +85,32 @@ void updateResidentIdP(IdentityProvider identityProvider, String tenantDomain) t\n      * @return Identity Provider's Basic Information array {@link IdpSearchResult}.\n      * @throws IdentityProviderManagementServerException server related error when getting list of Identity  Providers.\n      * @throws IdentityProviderManagementClientException client related error when getting list of Identity  Providers.\n+     * @deprecated use {@link #getIdPs(Integer, Integer, String, String, String, String, List)} instead.\n      */\n     IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, String sortOrder, String sortBy,\n                             String tenantDomain)\n             throws IdentityProviderManagementServerException, IdentityProviderManagementClientException;\n \n+    /**\n+     * Get all identity provider's Basic information along with additionally requested information depends on the\n+     * requiredAttributes.\n+     *\n+     * @param limit              Limit per page.\n+     * @param offset             Offset value.\n+     * @param filter             Filter value for IdP search.\n+     * @param sortOrder          Order of IdP ASC/DESC.\n+     * @param sortBy             The column value need to sort.\n+     * @param tenantDomain       TenantDomain of the user.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @return Identity Provider's Basic Information array along with requested attribute\n+     * information{@link IdpSearchResult}.\n+     * @throws IdentityProviderManagementServerException server related error when getting list of Identity Providers.\n+     * @throws IdentityProviderManagementClientException client related error when getting list of Identity Providers.\n+     */\n+    IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, String sortOrder, String sortBy,\n+                            String tenantDomain, List<String> requiredAttributes)\n+            throws IdentityProviderManagementServerException, IdentityProviderManagementClientException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQxMjkxOnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdentityProviderManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyMzo1MlrOF1-gpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyMzo1MlrOF1-gpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MzAxMw==", "bodyText": "call the new getIdPs(Integer, Integer, String, String, String, String, List) from within this deprecated method", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392143013", "createdAt": "2020-03-13T10:23:52Z", "author": {"login": "emswbandara"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdentityProviderManager.java", "diffHunk": "@@ -1066,6 +1066,7 @@ public void updateResidentIdP(IdentityProvider identityProvider, String tenantDo\n      * @return Identity Provider's Basic Information array {@link IdpSearchResult}.\n      * @throws IdentityProviderManagementServerException server related error while getting Identity  Providers object.\n      * @throws IdentityProviderManagementClientException client related error while getting Identity  Providers object.\n+     *  @deprecated use {@link #getIdPs(Integer, Integer, String, String, String, String, List)}\n      */\n     @Override\n     public IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, String sortOrder, String sortBy,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQxNDM0OnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdentityProviderManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyNDoyOVrOF1-htQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyNDoyOVrOF1-htQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MzI4NQ==", "bodyText": "let's throw only IdentityProviderManagementException it will wrap both client and server exceptions", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392143285", "createdAt": "2020-03-13T10:24:29Z", "author": {"login": "emswbandara"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdentityProviderManager.java", "diffHunk": "@@ -1082,6 +1083,37 @@ public IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, Str\n         return result;\n     }\n \n+    /**\n+     * Get all identity provider's Basic information along with additionally requested information depends on the\n+     * requiredAttributes.\n+     *\n+     * @param limit              Limit per page.\n+     * @param offset             Offset value.\n+     * @param filter             Filter value for IdP search.\n+     * @param sortOrder          Order of IdP ASC/DESC.\n+     * @param sortBy             The column value need to sort.\n+     * @param tenantDomain       TenantDomain of the user.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @return Identity Provider's Basic Information array along with requested attribute\n+     * information{@link IdpSearchResult}.\n+     * @throws IdentityProviderManagementServerException server related error when getting list of Identity Providers.\n+     * @throws IdentityProviderManagementClientException client related error when getting list of Identity Providers.\n+     */\n+    @Override\n+    public IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, String sortOrder, String sortBy,\n+                                   String tenantDomain, List<String> requiredAttributes)\n+            throws IdentityProviderManagementServerException, IdentityProviderManagementClientException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQxNTc5OnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdentityProviderManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyNDo1OFrOF1-isQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyNDo1OFrOF1-isQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MzUzNw==", "bodyText": "depending*", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392143537", "createdAt": "2020-03-13T10:24:58Z", "author": {"login": "emswbandara"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdentityProviderManager.java", "diffHunk": "@@ -1082,6 +1083,37 @@ public IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, Str\n         return result;\n     }\n \n+    /**\n+     * Get all identity provider's Basic information along with additionally requested information depends on the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQyNzE3OnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyODoyNlrOF1-p7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTo0MzoxNFrOF2sJSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NTM5MQ==", "bodyText": "let's use ListUtils.isNotEmpty here. Then we can remove the null checks on the places where appendRequiredAttributes is being called.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392145391", "createdAt": "2020-03-13T10:28:26Z", "author": {"login": "emswbandara"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "diffHunk": "@@ -403,48 +447,86 @@ private ResultSet getIdpQueryResultSet(Connection dbConnection, String sortedOrd\n         return prepStmt.executeQuery();\n     }\n \n+    /**\n+     * Add requested required attributes in the SQL query.\n+     *\n+     * @param sqlQuery           SQL query which need to be modify.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @return modified SQL query.\n+     */\n+    private String appendRequiredAttributes(String sqlQuery, List<String> requiredAttributes) {\n+\n+        if (!requiredAttributes.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5MDY5OQ==", "bodyText": "CollectionUtils right? ListUtils doesnt contain isNotEmpty method.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392890699", "createdAt": "2020-03-16T09:43:14Z", "author": {"login": "sarubi"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "diffHunk": "@@ -403,48 +447,86 @@ private ResultSet getIdpQueryResultSet(Connection dbConnection, String sortedOrd\n         return prepStmt.executeQuery();\n     }\n \n+    /**\n+     * Add requested required attributes in the SQL query.\n+     *\n+     * @param sqlQuery           SQL query which need to be modify.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @return modified SQL query.\n+     */\n+    private String appendRequiredAttributes(String sqlQuery, List<String> requiredAttributes) {\n+\n+        if (!requiredAttributes.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NTM5MQ=="}, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQyODA2OnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyODo0M1rOF1-qfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyODo0M1rOF1-qfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NTUzMg==", "bodyText": "add default case and throw exception", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392145532", "createdAt": "2020-03-13T10:28:43Z", "author": {"login": "emswbandara"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "diffHunk": "@@ -403,48 +447,86 @@ private ResultSet getIdpQueryResultSet(Connection dbConnection, String sortedOrd\n         return prepStmt.executeQuery();\n     }\n \n+    /**\n+     * Add requested required attributes in the SQL query.\n+     *\n+     * @param sqlQuery           SQL query which need to be modify.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @return modified SQL query.\n+     */\n+    private String appendRequiredAttributes(String sqlQuery, List<String> requiredAttributes) {\n+\n+        if (!requiredAttributes.isEmpty()) {\n+            for (String attribute : requiredAttributes) {\n+                switch (attribute) {\n+                    case IdPManagementConstants.IDP_IS_PRIMARY:\n+                        sqlQuery += \", \" + IdPManagementConstants.IS_PRIMARY + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_HOME_REALM_ID:\n+                        sqlQuery += \", \" + IdPManagementConstants.HOME_REALM_ID + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_IS_FEDERATION_HUB:\n+                        sqlQuery += \", \" + IdPManagementConstants.IS_FEDERATION_HUB + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_CERTIFICATE:\n+                        sqlQuery += \", \" + IdPManagementConstants.CERTIFICATE + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_ALIAS:\n+                        sqlQuery += \", \" + IdPManagementConstants.ALIAS + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_CLAIMS:\n+                        sqlQuery += \", \" + IdPManagementConstants.CLAIMS + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_ROLES:\n+                        sqlQuery += \", \" + IdPManagementConstants.ROLES + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_FEDERATED_AUTHENTICATORS:\n+                        sqlQuery += \", \" + IdPManagementConstants.FEDERATED_AUTHENTICATORS + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_PROVISIONING:\n+                        sqlQuery += \", \" + IdPManagementConstants.PROVISIONING + \" \";\n+                        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQzMTA3OnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyOTo0OFrOF1-scg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyOTo0OFrOF1-scg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NjAzNA==", "bodyText": "do we need this comment?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392146034", "createdAt": "2020-03-13T10:29:48Z", "author": {"login": "emswbandara"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "diffHunk": "@@ -456,6 +538,129 @@ private ResultSet getIdpQueryResultSet(Connection dbConnection, String sortedOrd\n         return identityProviderList;\n     }\n \n+    /**\n+     * @param resultSet          ResultSet.\n+     * @param dbConnection       Database Connection.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @param tenantId           Tenant Id of the identity provider.\n+     * @param identityProvider   Identity Provider Object.\n+     * @throws SQLException\n+     * @throws IdentityProviderManagementServerException\n+     */\n+    private void populateRequiredAttributesForIdentityProviderList(ResultSet resultSet, Connection dbConnection,\n+                                                                   List<String> requiredAttributes, int tenantId,\n+                                                                   IdentityProvider identityProvider)\n+            throws SQLException, IdentityProviderManagementServerException {\n+\n+        int idpId = Integer.parseInt(identityProvider.getId());\n+        String idPName = identityProvider.getIdentityProviderName();\n+\n+        try {\n+            if (!requiredAttributes.isEmpty()) {\n+                for (String attribute : requiredAttributes) {\n+                    switch (attribute) {\n+                        case IdPManagementConstants.IDP_IS_PRIMARY:\n+                            if ((IdPManagementConstants.IS_TRUE_VALUE).equals(resultSet.getString(\"IS_PRIMARY\"))) {\n+                                identityProvider.setPrimary(true);\n+                            } else {\n+                                identityProvider.setPrimary(false);\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_HOME_REALM_ID:\n+                            identityProvider.setHomeRealmId(resultSet.getString(\"HOME_REALM_ID\"));\n+                            break;\n+                        case IdPManagementConstants.IDP_IS_FEDERATION_HUB:\n+                            if ((IdPManagementConstants.IS_TRUE_VALUE)\n+                                    .equals(resultSet.getString(\"IS_FEDERATION_HUB\"))) {\n+                                identityProvider.setFederationHub(false);\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_CERTIFICATE:\n+                            identityProvider.setCertificate(getBlobValue(resultSet.getBinaryStream(\"CERTIFICATE\")));\n+                            break;\n+                        case IdPManagementConstants.IDP_ALIAS:\n+                            identityProvider.setAlias(resultSet.getString(\"ALIAS\"));\n+                            break;\n+                        case IdPManagementConstants.IDP_CLAIMS:\n+                            if (identityProvider.getClaimConfig() == null) {\n+                                identityProvider.setClaimConfig(new ClaimConfig());\n+                            }\n+\n+                            // IS_LOCAL_CLAIM_DIALECT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 302}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQzMjc3OnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozMDoyN1rOF1-tnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo1MjozMFrOF2wixw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NjMzMw==", "bodyText": "add default case and throw exception", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392146333", "createdAt": "2020-03-13T10:30:27Z", "author": {"login": "emswbandara"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "diffHunk": "@@ -456,6 +538,129 @@ private ResultSet getIdpQueryResultSet(Connection dbConnection, String sortedOrd\n         return identityProviderList;\n     }\n \n+    /**\n+     * @param resultSet          ResultSet.\n+     * @param dbConnection       Database Connection.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @param tenantId           Tenant Id of the identity provider.\n+     * @param identityProvider   Identity Provider Object.\n+     * @throws SQLException\n+     * @throws IdentityProviderManagementServerException\n+     */\n+    private void populateRequiredAttributesForIdentityProviderList(ResultSet resultSet, Connection dbConnection,\n+                                                                   List<String> requiredAttributes, int tenantId,\n+                                                                   IdentityProvider identityProvider)\n+            throws SQLException, IdentityProviderManagementServerException {\n+\n+        int idpId = Integer.parseInt(identityProvider.getId());\n+        String idPName = identityProvider.getIdentityProviderName();\n+\n+        try {\n+            if (!requiredAttributes.isEmpty()) {\n+                for (String attribute : requiredAttributes) {\n+                    switch (attribute) {\n+                        case IdPManagementConstants.IDP_IS_PRIMARY:\n+                            if ((IdPManagementConstants.IS_TRUE_VALUE).equals(resultSet.getString(\"IS_PRIMARY\"))) {\n+                                identityProvider.setPrimary(true);\n+                            } else {\n+                                identityProvider.setPrimary(false);\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_HOME_REALM_ID:\n+                            identityProvider.setHomeRealmId(resultSet.getString(\"HOME_REALM_ID\"));\n+                            break;\n+                        case IdPManagementConstants.IDP_IS_FEDERATION_HUB:\n+                            if ((IdPManagementConstants.IS_TRUE_VALUE)\n+                                    .equals(resultSet.getString(\"IS_FEDERATION_HUB\"))) {\n+                                identityProvider.setFederationHub(false);\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_CERTIFICATE:\n+                            identityProvider.setCertificate(getBlobValue(resultSet.getBinaryStream(\"CERTIFICATE\")));\n+                            break;\n+                        case IdPManagementConstants.IDP_ALIAS:\n+                            identityProvider.setAlias(resultSet.getString(\"ALIAS\"));\n+                            break;\n+                        case IdPManagementConstants.IDP_CLAIMS:\n+                            if (identityProvider.getClaimConfig() == null) {\n+                                identityProvider.setClaimConfig(new ClaimConfig());\n+                            }\n+\n+                            // IS_LOCAL_CLAIM_DIALECT\n+                            if (IdPManagementConstants.IS_TRUE_VALUE\n+                                    .equals(resultSet.getString(\"IS_LOCAL_CLAIM_DIALECT\"))) {\n+                                identityProvider.getClaimConfig().setLocalClaimDialect(true);\n+                            } else {\n+                                identityProvider.getClaimConfig().setLocalClaimDialect(false);\n+                            }\n+\n+                            String userClaimUri = resultSet.getString(\"USER_CLAIM_URI\");\n+                            String roleClaimUri = resultSet.getString(\"ROLE_CLAIM_URI\");\n+\n+                            if (identityProvider.getClaimConfig().isLocalClaimDialect()) {\n+                                identityProvider.setClaimConfig(getLocalIdPDefaultClaimValues(dbConnection,\n+                                        idPName, userClaimUri, roleClaimUri, idpId, tenantId));\n+                            } else {\n+                                // get claim configuration.\n+                                identityProvider.setClaimConfig(getIdPClaimConfiguration(dbConnection, idPName,\n+                                        userClaimUri, roleClaimUri, idpId, tenantId));\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_ROLES:\n+                            identityProvider.setProvisioningRole(resultSet.getString(\"PROVISIONING_ROLE\"));\n+                            // Get permission and role configuration.\n+                            identityProvider.setPermissionAndRoleConfig(getPermissionsAndRoleConfiguration(\n+                                    dbConnection, idPName, idpId, tenantId));\n+                            break;\n+                        case IdPManagementConstants.IDP_FEDERATED_AUTHENTICATORS:\n+                            String defaultAuthenticatorName = resultSet.getString(\"DEFAULT_AUTHENTICATOR_NAME\");\n+\n+                            // Get federated authenticators.\n+                            identityProvider.setFederatedAuthenticatorConfigs(getFederatedAuthenticatorConfigs(\n+                                    dbConnection, idPName, identityProvider, tenantId));\n+\n+                            if (defaultAuthenticatorName != null &&\n+                                    identityProvider.getFederatedAuthenticatorConfigs() != null) {\n+                                identityProvider.setDefaultAuthenticatorConfig(IdentityApplicationManagementUtil\n+                                        .getFederatedAuthenticator(\n+                                                identityProvider.getFederatedAuthenticatorConfigs(),\n+                                                defaultAuthenticatorName));\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_PROVISIONING:\n+                            JustInTimeProvisioningConfig jitProConfig = new JustInTimeProvisioningConfig();\n+                            if ((IdPManagementConstants.IS_TRUE_VALUE)\n+                                    .equals(resultSet.getString(\"INBOUND_PROV_ENABLED\"))) {\n+                                jitProConfig.setProvisioningEnabled(true);\n+                            } else {\n+                                jitProConfig.setProvisioningEnabled(false);\n+                            }\n+\n+                            jitProConfig\n+                                    .setProvisioningUserStore(resultSet.getString(\"INBOUND_PROV_USER_STORE_ID\"));\n+                            identityProvider.setJustInTimeProvisioningConfig(jitProConfig);\n+\n+                            String defaultProvisioningConnectorConfigName =\n+                                    resultSet.getString(\"DEFAULT_PRO_CONNECTOR_NAME\");\n+                            if (defaultProvisioningConnectorConfigName != null) {\n+                                ProvisioningConnectorConfig defaultProConnector = new ProvisioningConnectorConfig();\n+                                defaultProConnector.setName(defaultProvisioningConnectorConfigName);\n+                                identityProvider.setDefaultProvisioningConnectorConfig(defaultProConnector);\n+                            }\n+\n+                            // Get provisioning connectors.\n+                            identityProvider.setProvisioningConnectorConfigs(getProvisioningConnectorConfigs(\n+                                    dbConnection, idPName, idpId, tenantId));\n+                            break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5MTkyOQ==", "bodyText": "Here I haven't added default check since we didn't consider basic attributes cases. I added the default case when we generate query depends on the provided attribute list [1].\n[1] https://github.com/wso2/carbon-identity-framework/pull/2821/files#diff-aef45437564b8a5e30cf2197682d6fa6R502", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392891929", "createdAt": "2020-03-16T09:45:21Z", "author": {"login": "sarubi"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "diffHunk": "@@ -456,6 +538,129 @@ private ResultSet getIdpQueryResultSet(Connection dbConnection, String sortedOrd\n         return identityProviderList;\n     }\n \n+    /**\n+     * @param resultSet          ResultSet.\n+     * @param dbConnection       Database Connection.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @param tenantId           Tenant Id of the identity provider.\n+     * @param identityProvider   Identity Provider Object.\n+     * @throws SQLException\n+     * @throws IdentityProviderManagementServerException\n+     */\n+    private void populateRequiredAttributesForIdentityProviderList(ResultSet resultSet, Connection dbConnection,\n+                                                                   List<String> requiredAttributes, int tenantId,\n+                                                                   IdentityProvider identityProvider)\n+            throws SQLException, IdentityProviderManagementServerException {\n+\n+        int idpId = Integer.parseInt(identityProvider.getId());\n+        String idPName = identityProvider.getIdentityProviderName();\n+\n+        try {\n+            if (!requiredAttributes.isEmpty()) {\n+                for (String attribute : requiredAttributes) {\n+                    switch (attribute) {\n+                        case IdPManagementConstants.IDP_IS_PRIMARY:\n+                            if ((IdPManagementConstants.IS_TRUE_VALUE).equals(resultSet.getString(\"IS_PRIMARY\"))) {\n+                                identityProvider.setPrimary(true);\n+                            } else {\n+                                identityProvider.setPrimary(false);\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_HOME_REALM_ID:\n+                            identityProvider.setHomeRealmId(resultSet.getString(\"HOME_REALM_ID\"));\n+                            break;\n+                        case IdPManagementConstants.IDP_IS_FEDERATION_HUB:\n+                            if ((IdPManagementConstants.IS_TRUE_VALUE)\n+                                    .equals(resultSet.getString(\"IS_FEDERATION_HUB\"))) {\n+                                identityProvider.setFederationHub(false);\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_CERTIFICATE:\n+                            identityProvider.setCertificate(getBlobValue(resultSet.getBinaryStream(\"CERTIFICATE\")));\n+                            break;\n+                        case IdPManagementConstants.IDP_ALIAS:\n+                            identityProvider.setAlias(resultSet.getString(\"ALIAS\"));\n+                            break;\n+                        case IdPManagementConstants.IDP_CLAIMS:\n+                            if (identityProvider.getClaimConfig() == null) {\n+                                identityProvider.setClaimConfig(new ClaimConfig());\n+                            }\n+\n+                            // IS_LOCAL_CLAIM_DIALECT\n+                            if (IdPManagementConstants.IS_TRUE_VALUE\n+                                    .equals(resultSet.getString(\"IS_LOCAL_CLAIM_DIALECT\"))) {\n+                                identityProvider.getClaimConfig().setLocalClaimDialect(true);\n+                            } else {\n+                                identityProvider.getClaimConfig().setLocalClaimDialect(false);\n+                            }\n+\n+                            String userClaimUri = resultSet.getString(\"USER_CLAIM_URI\");\n+                            String roleClaimUri = resultSet.getString(\"ROLE_CLAIM_URI\");\n+\n+                            if (identityProvider.getClaimConfig().isLocalClaimDialect()) {\n+                                identityProvider.setClaimConfig(getLocalIdPDefaultClaimValues(dbConnection,\n+                                        idPName, userClaimUri, roleClaimUri, idpId, tenantId));\n+                            } else {\n+                                // get claim configuration.\n+                                identityProvider.setClaimConfig(getIdPClaimConfiguration(dbConnection, idPName,\n+                                        userClaimUri, roleClaimUri, idpId, tenantId));\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_ROLES:\n+                            identityProvider.setProvisioningRole(resultSet.getString(\"PROVISIONING_ROLE\"));\n+                            // Get permission and role configuration.\n+                            identityProvider.setPermissionAndRoleConfig(getPermissionsAndRoleConfiguration(\n+                                    dbConnection, idPName, idpId, tenantId));\n+                            break;\n+                        case IdPManagementConstants.IDP_FEDERATED_AUTHENTICATORS:\n+                            String defaultAuthenticatorName = resultSet.getString(\"DEFAULT_AUTHENTICATOR_NAME\");\n+\n+                            // Get federated authenticators.\n+                            identityProvider.setFederatedAuthenticatorConfigs(getFederatedAuthenticatorConfigs(\n+                                    dbConnection, idPName, identityProvider, tenantId));\n+\n+                            if (defaultAuthenticatorName != null &&\n+                                    identityProvider.getFederatedAuthenticatorConfigs() != null) {\n+                                identityProvider.setDefaultAuthenticatorConfig(IdentityApplicationManagementUtil\n+                                        .getFederatedAuthenticator(\n+                                                identityProvider.getFederatedAuthenticatorConfigs(),\n+                                                defaultAuthenticatorName));\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_PROVISIONING:\n+                            JustInTimeProvisioningConfig jitProConfig = new JustInTimeProvisioningConfig();\n+                            if ((IdPManagementConstants.IS_TRUE_VALUE)\n+                                    .equals(resultSet.getString(\"INBOUND_PROV_ENABLED\"))) {\n+                                jitProConfig.setProvisioningEnabled(true);\n+                            } else {\n+                                jitProConfig.setProvisioningEnabled(false);\n+                            }\n+\n+                            jitProConfig\n+                                    .setProvisioningUserStore(resultSet.getString(\"INBOUND_PROV_USER_STORE_ID\"));\n+                            identityProvider.setJustInTimeProvisioningConfig(jitProConfig);\n+\n+                            String defaultProvisioningConnectorConfigName =\n+                                    resultSet.getString(\"DEFAULT_PRO_CONNECTOR_NAME\");\n+                            if (defaultProvisioningConnectorConfigName != null) {\n+                                ProvisioningConnectorConfig defaultProConnector = new ProvisioningConnectorConfig();\n+                                defaultProConnector.setName(defaultProvisioningConnectorConfigName);\n+                                identityProvider.setDefaultProvisioningConnectorConfig(defaultProConnector);\n+                            }\n+\n+                            // Get provisioning connectors.\n+                            identityProvider.setProvisioningConnectorConfigs(getProvisioningConnectorConfigs(\n+                                    dbConnection, idPName, idpId, tenantId));\n+                            break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NjMzMw=="}, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0NjgzNg==", "bodyText": "if we do like that, what will be the behavior if a user send a basic attribute in requiredAttributes field", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392946836", "createdAt": "2020-03-16T11:20:48Z", "author": {"login": "emswbandara"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "diffHunk": "@@ -456,6 +538,129 @@ private ResultSet getIdpQueryResultSet(Connection dbConnection, String sortedOrd\n         return identityProviderList;\n     }\n \n+    /**\n+     * @param resultSet          ResultSet.\n+     * @param dbConnection       Database Connection.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @param tenantId           Tenant Id of the identity provider.\n+     * @param identityProvider   Identity Provider Object.\n+     * @throws SQLException\n+     * @throws IdentityProviderManagementServerException\n+     */\n+    private void populateRequiredAttributesForIdentityProviderList(ResultSet resultSet, Connection dbConnection,\n+                                                                   List<String> requiredAttributes, int tenantId,\n+                                                                   IdentityProvider identityProvider)\n+            throws SQLException, IdentityProviderManagementServerException {\n+\n+        int idpId = Integer.parseInt(identityProvider.getId());\n+        String idPName = identityProvider.getIdentityProviderName();\n+\n+        try {\n+            if (!requiredAttributes.isEmpty()) {\n+                for (String attribute : requiredAttributes) {\n+                    switch (attribute) {\n+                        case IdPManagementConstants.IDP_IS_PRIMARY:\n+                            if ((IdPManagementConstants.IS_TRUE_VALUE).equals(resultSet.getString(\"IS_PRIMARY\"))) {\n+                                identityProvider.setPrimary(true);\n+                            } else {\n+                                identityProvider.setPrimary(false);\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_HOME_REALM_ID:\n+                            identityProvider.setHomeRealmId(resultSet.getString(\"HOME_REALM_ID\"));\n+                            break;\n+                        case IdPManagementConstants.IDP_IS_FEDERATION_HUB:\n+                            if ((IdPManagementConstants.IS_TRUE_VALUE)\n+                                    .equals(resultSet.getString(\"IS_FEDERATION_HUB\"))) {\n+                                identityProvider.setFederationHub(false);\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_CERTIFICATE:\n+                            identityProvider.setCertificate(getBlobValue(resultSet.getBinaryStream(\"CERTIFICATE\")));\n+                            break;\n+                        case IdPManagementConstants.IDP_ALIAS:\n+                            identityProvider.setAlias(resultSet.getString(\"ALIAS\"));\n+                            break;\n+                        case IdPManagementConstants.IDP_CLAIMS:\n+                            if (identityProvider.getClaimConfig() == null) {\n+                                identityProvider.setClaimConfig(new ClaimConfig());\n+                            }\n+\n+                            // IS_LOCAL_CLAIM_DIALECT\n+                            if (IdPManagementConstants.IS_TRUE_VALUE\n+                                    .equals(resultSet.getString(\"IS_LOCAL_CLAIM_DIALECT\"))) {\n+                                identityProvider.getClaimConfig().setLocalClaimDialect(true);\n+                            } else {\n+                                identityProvider.getClaimConfig().setLocalClaimDialect(false);\n+                            }\n+\n+                            String userClaimUri = resultSet.getString(\"USER_CLAIM_URI\");\n+                            String roleClaimUri = resultSet.getString(\"ROLE_CLAIM_URI\");\n+\n+                            if (identityProvider.getClaimConfig().isLocalClaimDialect()) {\n+                                identityProvider.setClaimConfig(getLocalIdPDefaultClaimValues(dbConnection,\n+                                        idPName, userClaimUri, roleClaimUri, idpId, tenantId));\n+                            } else {\n+                                // get claim configuration.\n+                                identityProvider.setClaimConfig(getIdPClaimConfiguration(dbConnection, idPName,\n+                                        userClaimUri, roleClaimUri, idpId, tenantId));\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_ROLES:\n+                            identityProvider.setProvisioningRole(resultSet.getString(\"PROVISIONING_ROLE\"));\n+                            // Get permission and role configuration.\n+                            identityProvider.setPermissionAndRoleConfig(getPermissionsAndRoleConfiguration(\n+                                    dbConnection, idPName, idpId, tenantId));\n+                            break;\n+                        case IdPManagementConstants.IDP_FEDERATED_AUTHENTICATORS:\n+                            String defaultAuthenticatorName = resultSet.getString(\"DEFAULT_AUTHENTICATOR_NAME\");\n+\n+                            // Get federated authenticators.\n+                            identityProvider.setFederatedAuthenticatorConfigs(getFederatedAuthenticatorConfigs(\n+                                    dbConnection, idPName, identityProvider, tenantId));\n+\n+                            if (defaultAuthenticatorName != null &&\n+                                    identityProvider.getFederatedAuthenticatorConfigs() != null) {\n+                                identityProvider.setDefaultAuthenticatorConfig(IdentityApplicationManagementUtil\n+                                        .getFederatedAuthenticator(\n+                                                identityProvider.getFederatedAuthenticatorConfigs(),\n+                                                defaultAuthenticatorName));\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_PROVISIONING:\n+                            JustInTimeProvisioningConfig jitProConfig = new JustInTimeProvisioningConfig();\n+                            if ((IdPManagementConstants.IS_TRUE_VALUE)\n+                                    .equals(resultSet.getString(\"INBOUND_PROV_ENABLED\"))) {\n+                                jitProConfig.setProvisioningEnabled(true);\n+                            } else {\n+                                jitProConfig.setProvisioningEnabled(false);\n+                            }\n+\n+                            jitProConfig\n+                                    .setProvisioningUserStore(resultSet.getString(\"INBOUND_PROV_USER_STORE_ID\"));\n+                            identityProvider.setJustInTimeProvisioningConfig(jitProConfig);\n+\n+                            String defaultProvisioningConnectorConfigName =\n+                                    resultSet.getString(\"DEFAULT_PRO_CONNECTOR_NAME\");\n+                            if (defaultProvisioningConnectorConfigName != null) {\n+                                ProvisioningConnectorConfig defaultProConnector = new ProvisioningConnectorConfig();\n+                                defaultProConnector.setName(defaultProvisioningConnectorConfigName);\n+                                identityProvider.setDefaultProvisioningConnectorConfig(defaultProConnector);\n+                            }\n+\n+                            // Get provisioning connectors.\n+                            identityProvider.setProvisioningConnectorConfigs(getProvisioningConnectorConfigs(\n+                                    dbConnection, idPName, idpId, tenantId));\n+                            break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NjMzMw=="}, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2Mjc1OQ==", "bodyText": "we won't honour that provided basic attribute, will go as default behaviour flow where the requested attribute is null.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r392962759", "createdAt": "2020-03-16T11:52:30Z", "author": {"login": "sarubi"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "diffHunk": "@@ -456,6 +538,129 @@ private ResultSet getIdpQueryResultSet(Connection dbConnection, String sortedOrd\n         return identityProviderList;\n     }\n \n+    /**\n+     * @param resultSet          ResultSet.\n+     * @param dbConnection       Database Connection.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @param tenantId           Tenant Id of the identity provider.\n+     * @param identityProvider   Identity Provider Object.\n+     * @throws SQLException\n+     * @throws IdentityProviderManagementServerException\n+     */\n+    private void populateRequiredAttributesForIdentityProviderList(ResultSet resultSet, Connection dbConnection,\n+                                                                   List<String> requiredAttributes, int tenantId,\n+                                                                   IdentityProvider identityProvider)\n+            throws SQLException, IdentityProviderManagementServerException {\n+\n+        int idpId = Integer.parseInt(identityProvider.getId());\n+        String idPName = identityProvider.getIdentityProviderName();\n+\n+        try {\n+            if (!requiredAttributes.isEmpty()) {\n+                for (String attribute : requiredAttributes) {\n+                    switch (attribute) {\n+                        case IdPManagementConstants.IDP_IS_PRIMARY:\n+                            if ((IdPManagementConstants.IS_TRUE_VALUE).equals(resultSet.getString(\"IS_PRIMARY\"))) {\n+                                identityProvider.setPrimary(true);\n+                            } else {\n+                                identityProvider.setPrimary(false);\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_HOME_REALM_ID:\n+                            identityProvider.setHomeRealmId(resultSet.getString(\"HOME_REALM_ID\"));\n+                            break;\n+                        case IdPManagementConstants.IDP_IS_FEDERATION_HUB:\n+                            if ((IdPManagementConstants.IS_TRUE_VALUE)\n+                                    .equals(resultSet.getString(\"IS_FEDERATION_HUB\"))) {\n+                                identityProvider.setFederationHub(false);\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_CERTIFICATE:\n+                            identityProvider.setCertificate(getBlobValue(resultSet.getBinaryStream(\"CERTIFICATE\")));\n+                            break;\n+                        case IdPManagementConstants.IDP_ALIAS:\n+                            identityProvider.setAlias(resultSet.getString(\"ALIAS\"));\n+                            break;\n+                        case IdPManagementConstants.IDP_CLAIMS:\n+                            if (identityProvider.getClaimConfig() == null) {\n+                                identityProvider.setClaimConfig(new ClaimConfig());\n+                            }\n+\n+                            // IS_LOCAL_CLAIM_DIALECT\n+                            if (IdPManagementConstants.IS_TRUE_VALUE\n+                                    .equals(resultSet.getString(\"IS_LOCAL_CLAIM_DIALECT\"))) {\n+                                identityProvider.getClaimConfig().setLocalClaimDialect(true);\n+                            } else {\n+                                identityProvider.getClaimConfig().setLocalClaimDialect(false);\n+                            }\n+\n+                            String userClaimUri = resultSet.getString(\"USER_CLAIM_URI\");\n+                            String roleClaimUri = resultSet.getString(\"ROLE_CLAIM_URI\");\n+\n+                            if (identityProvider.getClaimConfig().isLocalClaimDialect()) {\n+                                identityProvider.setClaimConfig(getLocalIdPDefaultClaimValues(dbConnection,\n+                                        idPName, userClaimUri, roleClaimUri, idpId, tenantId));\n+                            } else {\n+                                // get claim configuration.\n+                                identityProvider.setClaimConfig(getIdPClaimConfiguration(dbConnection, idPName,\n+                                        userClaimUri, roleClaimUri, idpId, tenantId));\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_ROLES:\n+                            identityProvider.setProvisioningRole(resultSet.getString(\"PROVISIONING_ROLE\"));\n+                            // Get permission and role configuration.\n+                            identityProvider.setPermissionAndRoleConfig(getPermissionsAndRoleConfiguration(\n+                                    dbConnection, idPName, idpId, tenantId));\n+                            break;\n+                        case IdPManagementConstants.IDP_FEDERATED_AUTHENTICATORS:\n+                            String defaultAuthenticatorName = resultSet.getString(\"DEFAULT_AUTHENTICATOR_NAME\");\n+\n+                            // Get federated authenticators.\n+                            identityProvider.setFederatedAuthenticatorConfigs(getFederatedAuthenticatorConfigs(\n+                                    dbConnection, idPName, identityProvider, tenantId));\n+\n+                            if (defaultAuthenticatorName != null &&\n+                                    identityProvider.getFederatedAuthenticatorConfigs() != null) {\n+                                identityProvider.setDefaultAuthenticatorConfig(IdentityApplicationManagementUtil\n+                                        .getFederatedAuthenticator(\n+                                                identityProvider.getFederatedAuthenticatorConfigs(),\n+                                                defaultAuthenticatorName));\n+                            }\n+                            break;\n+                        case IdPManagementConstants.IDP_PROVISIONING:\n+                            JustInTimeProvisioningConfig jitProConfig = new JustInTimeProvisioningConfig();\n+                            if ((IdPManagementConstants.IS_TRUE_VALUE)\n+                                    .equals(resultSet.getString(\"INBOUND_PROV_ENABLED\"))) {\n+                                jitProConfig.setProvisioningEnabled(true);\n+                            } else {\n+                                jitProConfig.setProvisioningEnabled(false);\n+                            }\n+\n+                            jitProConfig\n+                                    .setProvisioningUserStore(resultSet.getString(\"INBOUND_PROV_USER_STORE_ID\"));\n+                            identityProvider.setJustInTimeProvisioningConfig(jitProConfig);\n+\n+                            String defaultProvisioningConnectorConfigName =\n+                                    resultSet.getString(\"DEFAULT_PRO_CONNECTOR_NAME\");\n+                            if (defaultProvisioningConnectorConfigName != null) {\n+                                ProvisioningConnectorConfig defaultProConnector = new ProvisioningConnectorConfig();\n+                                defaultProConnector.setName(defaultProvisioningConnectorConfigName);\n+                                identityProvider.setDefaultProvisioningConnectorConfig(defaultProConnector);\n+                            }\n+\n+                            // Get provisioning connectors.\n+                            identityProvider.setProvisioningConnectorConfigs(getProvisioningConnectorConfigs(\n+                                    dbConnection, idPName, idpId, tenantId));\n+                            break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NjMzMw=="}, "originalCommit": {"oid": "a6a05c257a8f0d73f4745d0408d63daf648316b9"}, "originalPosition": 367}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjA3NDExOnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjo1OToyMVrOF2zHhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoyMDowMFrOF2z0yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAwNDkzMw==", "bodyText": "do we need this null check since we are already checking it at line 575", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r393004933", "createdAt": "2020-03-16T12:59:21Z", "author": {"login": "emswbandara"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "diffHunk": "@@ -403,48 +444,105 @@ private ResultSet getIdpQueryResultSet(Connection dbConnection, String sortedOrd\n         return prepStmt.executeQuery();\n     }\n \n+    /**\n+     * Add requested required attributes in the SQL query.\n+     *\n+     * @param sqlQuery           SQL query which need to be modify.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @return modified SQL query.\n+     */\n+    private String appendRequiredAttributes(String sqlQuery, List<String> requiredAttributes)\n+            throws IdentityProviderManagementClientException {\n+\n+        if (CollectionUtils.isNotEmpty(requiredAttributes)) {\n+            for (String attribute : requiredAttributes) {\n+                switch (attribute) {\n+                    case IdPManagementConstants.IDP_UUID:\n+                        // Skip since it is basic attribute which is by default added.\n+                        break;\n+                    case IdPManagementConstants.IDP_NAME:\n+                        // Skip since it is basic attribute which is by default added.\n+                        break;\n+                    case IdPManagementConstants.IDP_DESCRIPTION:\n+                        // Skip since it is basic attribute which is by default added.\n+                        break;\n+                    case IdPManagementConstants.IDP_IS_ENABLED:\n+                        // Skip since it is basic attribute which is by default added.\n+                        break;\n+                    case IdPManagementConstants.IDP_IMAGE_URL:\n+                        // Skip since it is basic attribute which is by default added.\n+                        break;\n+                    case IdPManagementConstants.IDP_IS_PRIMARY:\n+                        sqlQuery += \", \" + IdPManagementConstants.IS_PRIMARY + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_HOME_REALM_ID:\n+                        sqlQuery += \", \" + IdPManagementConstants.HOME_REALM_ID + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_IS_FEDERATION_HUB:\n+                        sqlQuery += \", \" + IdPManagementConstants.IS_FEDERATION_HUB + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_CERTIFICATE:\n+                        sqlQuery += \", \" + IdPManagementConstants.CERTIFICATE + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_ALIAS:\n+                        sqlQuery += \", \" + IdPManagementConstants.ALIAS + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_CLAIMS:\n+                        sqlQuery += \", \" + IdPManagementConstants.CLAIMS + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_ROLES:\n+                        sqlQuery += \", \" + IdPManagementConstants.ROLES + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_FEDERATED_AUTHENTICATORS:\n+                        sqlQuery += \", \" + IdPManagementConstants.FEDERATED_AUTHENTICATORS + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_PROVISIONING:\n+                        sqlQuery += \", \" + IdPManagementConstants.PROVISIONING + \" \";\n+                        break;\n+                    default:\n+                        throw IdPManagementUtil.handleClientException(\n+                                IdPManagementConstants.ErrorMessage.ERROR_CODE_IDP_ATTRIBUTE_INVALID, attribute);\n+                }\n+            }\n+        }\n+        return sqlQuery;\n+    }\n+\n     /**\n      * Populate the result set.\n      *\n-     * @param resultSet    resultSet.\n-     * @param dbConnection database Connection.\n+     * @param resultSet          ResultSet.\n+     * @param dbConnection       Database Connection.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @param tenantId           Tenant Id of the identity provider.\n      * @return List of Identity Provider.\n      * @throws SQLException Database Exception.\n      */\n-    private List<IdentityProvider> populateIdentityProviderList(ResultSet resultSet, Connection dbConnection)\n-            throws SQLException {\n+    private List<IdentityProvider> populateIdentityProviderList(ResultSet resultSet, Connection dbConnection,\n+                                                                List<String> requiredAttributes, int tenantId)\n+            throws SQLException, IdentityProviderManagementServerException {\n \n         List<IdentityProvider> identityProviderList = new ArrayList<>();\n         while (resultSet.next()) {\n             IdentityProvider identityProvider = new IdentityProvider();\n-            identityProvider.setIdentityProviderName(resultSet.getString(1));\n-            if ((IdPManagementConstants.IS_TRUE_VALUE).equals(resultSet.getString(\"IS_PRIMARY\"))) {\n-                identityProvider.setPrimary(true);\n-            } else {\n-                identityProvider.setPrimary(false);\n-            }\n-            identityProvider.setHomeRealmId(resultSet.getString(\"HOME_REALM_ID\"));\n+            // First set the basic attributes such as id, name, description, isEnabled, image url, uuid.\n+            identityProvider.setId(resultSet.getString(\"ID\"));\n+            identityProvider.setIdentityProviderName(resultSet.getString(\"NAME\"));\n             identityProvider.setIdentityProviderDescription(resultSet.getString(\"DESCRIPTION\"));\n-            // IS_FEDERATION_HUB_IDP\n-            if ((IdPManagementConstants.IS_TRUE_VALUE).equals(resultSet.getString(\"IS_FEDERATION_HUB\"))) {\n-                identityProvider.setFederationHub(false);\n-            }\n-            // IS_LOCAL_CLAIM_DIALECT\n-            if ((IdPManagementConstants.IS_TRUE_VALUE).equals(resultSet.getString(\"IS_LOCAL_CLAIM_DIALECT\"))) {\n-                if (identityProvider.getClaimConfig() == null) {\n-                    identityProvider.setClaimConfig(new ClaimConfig());\n-                }\n-                identityProvider.getClaimConfig().setLocalClaimDialect(true);\n-            }\n             // IS_ENABLE\n             if ((IdPManagementConstants.IS_TRUE_VALUE).equals(resultSet.getString(\"IS_ENABLED\"))) {\n                 identityProvider.setEnable(true);\n             } else {\n                 identityProvider.setEnable(false);\n             }\n-            identityProvider.setDisplayName(resultSet.getString(\"DISPLAY_NAME\"));\n             identityProvider.setImageUrl(resultSet.getString(\"IMAGE_URL\"));\n             identityProvider.setResourceId(resultSet.getString(\"UUID\"));\n+\n+            if (requiredAttributes != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d69f34e9ce9dd9d7dfacd8e3f593e6e017d0747"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxNjUyMQ==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r393016521", "createdAt": "2020-03-16T13:20:00Z", "author": {"login": "sarubi"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/dao/IdPManagementDAO.java", "diffHunk": "@@ -403,48 +444,105 @@ private ResultSet getIdpQueryResultSet(Connection dbConnection, String sortedOrd\n         return prepStmt.executeQuery();\n     }\n \n+    /**\n+     * Add requested required attributes in the SQL query.\n+     *\n+     * @param sqlQuery           SQL query which need to be modify.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @return modified SQL query.\n+     */\n+    private String appendRequiredAttributes(String sqlQuery, List<String> requiredAttributes)\n+            throws IdentityProviderManagementClientException {\n+\n+        if (CollectionUtils.isNotEmpty(requiredAttributes)) {\n+            for (String attribute : requiredAttributes) {\n+                switch (attribute) {\n+                    case IdPManagementConstants.IDP_UUID:\n+                        // Skip since it is basic attribute which is by default added.\n+                        break;\n+                    case IdPManagementConstants.IDP_NAME:\n+                        // Skip since it is basic attribute which is by default added.\n+                        break;\n+                    case IdPManagementConstants.IDP_DESCRIPTION:\n+                        // Skip since it is basic attribute which is by default added.\n+                        break;\n+                    case IdPManagementConstants.IDP_IS_ENABLED:\n+                        // Skip since it is basic attribute which is by default added.\n+                        break;\n+                    case IdPManagementConstants.IDP_IMAGE_URL:\n+                        // Skip since it is basic attribute which is by default added.\n+                        break;\n+                    case IdPManagementConstants.IDP_IS_PRIMARY:\n+                        sqlQuery += \", \" + IdPManagementConstants.IS_PRIMARY + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_HOME_REALM_ID:\n+                        sqlQuery += \", \" + IdPManagementConstants.HOME_REALM_ID + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_IS_FEDERATION_HUB:\n+                        sqlQuery += \", \" + IdPManagementConstants.IS_FEDERATION_HUB + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_CERTIFICATE:\n+                        sqlQuery += \", \" + IdPManagementConstants.CERTIFICATE + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_ALIAS:\n+                        sqlQuery += \", \" + IdPManagementConstants.ALIAS + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_CLAIMS:\n+                        sqlQuery += \", \" + IdPManagementConstants.CLAIMS + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_ROLES:\n+                        sqlQuery += \", \" + IdPManagementConstants.ROLES + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_FEDERATED_AUTHENTICATORS:\n+                        sqlQuery += \", \" + IdPManagementConstants.FEDERATED_AUTHENTICATORS + \" \";\n+                        break;\n+                    case IdPManagementConstants.IDP_PROVISIONING:\n+                        sqlQuery += \", \" + IdPManagementConstants.PROVISIONING + \" \";\n+                        break;\n+                    default:\n+                        throw IdPManagementUtil.handleClientException(\n+                                IdPManagementConstants.ErrorMessage.ERROR_CODE_IDP_ATTRIBUTE_INVALID, attribute);\n+                }\n+            }\n+        }\n+        return sqlQuery;\n+    }\n+\n     /**\n      * Populate the result set.\n      *\n-     * @param resultSet    resultSet.\n-     * @param dbConnection database Connection.\n+     * @param resultSet          ResultSet.\n+     * @param dbConnection       Database Connection.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @param tenantId           Tenant Id of the identity provider.\n      * @return List of Identity Provider.\n      * @throws SQLException Database Exception.\n      */\n-    private List<IdentityProvider> populateIdentityProviderList(ResultSet resultSet, Connection dbConnection)\n-            throws SQLException {\n+    private List<IdentityProvider> populateIdentityProviderList(ResultSet resultSet, Connection dbConnection,\n+                                                                List<String> requiredAttributes, int tenantId)\n+            throws SQLException, IdentityProviderManagementServerException {\n \n         List<IdentityProvider> identityProviderList = new ArrayList<>();\n         while (resultSet.next()) {\n             IdentityProvider identityProvider = new IdentityProvider();\n-            identityProvider.setIdentityProviderName(resultSet.getString(1));\n-            if ((IdPManagementConstants.IS_TRUE_VALUE).equals(resultSet.getString(\"IS_PRIMARY\"))) {\n-                identityProvider.setPrimary(true);\n-            } else {\n-                identityProvider.setPrimary(false);\n-            }\n-            identityProvider.setHomeRealmId(resultSet.getString(\"HOME_REALM_ID\"));\n+            // First set the basic attributes such as id, name, description, isEnabled, image url, uuid.\n+            identityProvider.setId(resultSet.getString(\"ID\"));\n+            identityProvider.setIdentityProviderName(resultSet.getString(\"NAME\"));\n             identityProvider.setIdentityProviderDescription(resultSet.getString(\"DESCRIPTION\"));\n-            // IS_FEDERATION_HUB_IDP\n-            if ((IdPManagementConstants.IS_TRUE_VALUE).equals(resultSet.getString(\"IS_FEDERATION_HUB\"))) {\n-                identityProvider.setFederationHub(false);\n-            }\n-            // IS_LOCAL_CLAIM_DIALECT\n-            if ((IdPManagementConstants.IS_TRUE_VALUE).equals(resultSet.getString(\"IS_LOCAL_CLAIM_DIALECT\"))) {\n-                if (identityProvider.getClaimConfig() == null) {\n-                    identityProvider.setClaimConfig(new ClaimConfig());\n-                }\n-                identityProvider.getClaimConfig().setLocalClaimDialect(true);\n-            }\n             // IS_ENABLE\n             if ((IdPManagementConstants.IS_TRUE_VALUE).equals(resultSet.getString(\"IS_ENABLED\"))) {\n                 identityProvider.setEnable(true);\n             } else {\n                 identityProvider.setEnable(false);\n             }\n-            identityProvider.setDisplayName(resultSet.getString(\"DISPLAY_NAME\"));\n             identityProvider.setImageUrl(resultSet.getString(\"IMAGE_URL\"));\n             identityProvider.setResourceId(resultSet.getString(\"UUID\"));\n+\n+            if (requiredAttributes != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAwNDkzMw=="}, "originalCommit": {"oid": "1d69f34e9ce9dd9d7dfacd8e3f593e6e017d0747"}, "originalPosition": 263}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjA3OTI3OnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdentityProviderManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzowMDo1MVrOF2zK0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzowMDo1MVrOF2zK0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAwNTc3Nw==", "bodyText": "is this comment change needed", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r393005777", "createdAt": "2020-03-16T13:00:51Z", "author": {"login": "emswbandara"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdentityProviderManagementService.java", "diffHunk": "@@ -123,7 +123,7 @@ public int getAllIdpCount() throws IdentityProviderManagementException {\n      * Retrieves registered Identity providers for the logged-in tenant.\n      *\n      * @return Array of <code>IdentityProvider</code>. IdP names, primary IdP and home.\n-     * realm identifiers of each IdP.\n+     * realm identifiers of each IdP.getIdPs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d69f34e9ce9dd9d7dfacd8e3f593e6e017d0747"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjYxNjIxOnYy", "diffSide": "RIGHT", "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdpManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTowNDoxM1rOF24eXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNToxMzowNFrOF3OMNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5MjcwMQ==", "bodyText": "throws statement needs to be updated", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r393092701", "createdAt": "2020-03-16T15:04:13Z", "author": {"login": "emswbandara"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdpManager.java", "diffHunk": "@@ -85,10 +85,34 @@ void updateResidentIdP(IdentityProvider identityProvider, String tenantDomain) t\n      * @return Identity Provider's Basic Information array {@link IdpSearchResult}.\n      * @throws IdentityProviderManagementServerException server related error when getting list of Identity  Providers.\n      * @throws IdentityProviderManagementClientException client related error when getting list of Identity  Providers.\n+     * @deprecated use {@link #getIdPs(Integer, Integer, String, String, String, String, List)} instead.\n      */\n     IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, String sortOrder, String sortBy,\n                             String tenantDomain)\n-            throws IdentityProviderManagementServerException, IdentityProviderManagementClientException;\n+            throws IdentityProviderManagementException;\n+\n+    /**\n+     * Get all identity provider's Basic information along with additionally requested information depends on the\n+     * requiredAttributes.\n+     *\n+     * @param limit              Limit per page.\n+     * @param offset             Offset value.\n+     * @param filter             Filter value for IdP search.\n+     * @param sortOrder          Order of IdP ASC/DESC.\n+     * @param sortBy             The column value need to sort.\n+     * @param tenantDomain       TenantDomain of the user.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @return Identity Provider's Basic Information array along with requested attribute\n+     * information{@link IdpSearchResult}.\n+     * @throws IdentityProviderManagementServerException server related error when getting list of Identity Providers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226df7320e041e91a2e16b3ec370824713be7e97"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ0ODUwMw==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-identity-framework/pull/2821#discussion_r393448503", "createdAt": "2020-03-17T05:13:04Z", "author": {"login": "sarubi"}, "path": "components/idp-mgt/org.wso2.carbon.idp.mgt/src/main/java/org/wso2/carbon/idp/mgt/IdpManager.java", "diffHunk": "@@ -85,10 +85,34 @@ void updateResidentIdP(IdentityProvider identityProvider, String tenantDomain) t\n      * @return Identity Provider's Basic Information array {@link IdpSearchResult}.\n      * @throws IdentityProviderManagementServerException server related error when getting list of Identity  Providers.\n      * @throws IdentityProviderManagementClientException client related error when getting list of Identity  Providers.\n+     * @deprecated use {@link #getIdPs(Integer, Integer, String, String, String, String, List)} instead.\n      */\n     IdpSearchResult getIdPs(Integer limit, Integer offset, String filter, String sortOrder, String sortBy,\n                             String tenantDomain)\n-            throws IdentityProviderManagementServerException, IdentityProviderManagementClientException;\n+            throws IdentityProviderManagementException;\n+\n+    /**\n+     * Get all identity provider's Basic information along with additionally requested information depends on the\n+     * requiredAttributes.\n+     *\n+     * @param limit              Limit per page.\n+     * @param offset             Offset value.\n+     * @param filter             Filter value for IdP search.\n+     * @param sortOrder          Order of IdP ASC/DESC.\n+     * @param sortBy             The column value need to sort.\n+     * @param tenantDomain       TenantDomain of the user.\n+     * @param requiredAttributes Required attributes which needs to be return.\n+     * @return Identity Provider's Basic Information array along with requested attribute\n+     * information{@link IdpSearchResult}.\n+     * @throws IdentityProviderManagementServerException server related error when getting list of Identity Providers.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5MjcwMQ=="}, "originalCommit": {"oid": "226df7320e041e91a2e16b3ec370824713be7e97"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2236, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}