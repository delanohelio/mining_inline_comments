{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1Mjk3NDg4", "number": 3173, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMzo1NjozMVrOE1fTfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNDoxMToyMlrOE1fcWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTIyODc4OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/SessionNonceCookieUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMzo1NjozMVrOHtysQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMzo1NjozMVrOHtysQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc3ODQ5OQ==", "bodyText": "no need to declare a variable.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3173#discussion_r517778499", "createdAt": "2020-11-05T03:56:31Z", "author": {"login": "thanujalk"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/SessionNonceCookieUtil.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.application.authentication.framework.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.registry.core.utils.UUIDGenerator;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * Handles session nonce cookie.\n+ * Session nonce cookie helps to mitigate the session hijacking.\n+ */\n+public class SessionNonceCookieUtil {\n+\n+    public static final String NONCE_COOKIE = \"sessionNonceCookie\";\n+    public static final String NONCE_COOKIE_CONFIG = \"EnableSessionNonceCookie\";\n+    public static final String NONCE_ERROR_CODE = \"sessionNonceErrorCode\";\n+\n+    private static Boolean nonceCookieConfig;\n+\n+    /**\n+     * Get dynamic name for the nonce cookie\n+     *\n+     * @param context Authentication Context.\n+     *\n+     * @return name of the nonce cookie for that context.\n+     */\n+    public static String getNonceCookieName(AuthenticationContext context) {\n+\n+        String cookieName = NONCE_COOKIE + \"-\" + context.getContextIdentifier();\n+        return cookieName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee9a5154f6fc12b8ae511dc915c9b3cdb0d3631"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTI0NTY4OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/SessionNonceCookieUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNDowNzoyOFrOHty1xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNDowNzoyOFrOHty1xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc4MDkzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (nonceCookieConfig == null) {\n          \n          \n            \n                    if (nonceCookieConfig == null) {\n          \n          \n            \n                        nonceCookieConfig = Boolean.parseBoolean(IdentityUtil.getProperty(NONCE_COOKIE_CONFIG));\n          \n          \n            \n                    }\n          \n          \n            \n                    return nonceCookieConfig;", "url": "https://github.com/wso2/carbon-identity-framework/pull/3173#discussion_r517780935", "createdAt": "2020-11-05T04:07:28Z", "author": {"login": "thanujalk"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/SessionNonceCookieUtil.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.application.authentication.framework.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.registry.core.utils.UUIDGenerator;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * Handles session nonce cookie.\n+ * Session nonce cookie helps to mitigate the session hijacking.\n+ */\n+public class SessionNonceCookieUtil {\n+\n+    public static final String NONCE_COOKIE = \"sessionNonceCookie\";\n+    public static final String NONCE_COOKIE_CONFIG = \"EnableSessionNonceCookie\";\n+    public static final String NONCE_ERROR_CODE = \"sessionNonceErrorCode\";\n+\n+    private static Boolean nonceCookieConfig;\n+\n+    /**\n+     * Get dynamic name for the nonce cookie\n+     *\n+     * @param context Authentication Context.\n+     *\n+     * @return name of the nonce cookie for that context.\n+     */\n+    public static String getNonceCookieName(AuthenticationContext context) {\n+\n+        String cookieName = NONCE_COOKIE + \"-\" + context.getContextIdentifier();\n+        return cookieName;\n+    }\n+\n+    /**\n+     * Initiate or update nonce value in both cookie and context.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param response HttpServletResponse.\n+     * @param context Authentication Context.\n+     */\n+    public static void addNonceCookie(HttpServletRequest request, HttpServletResponse response,\n+                                      AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            String nonceId = UUIDGenerator.generateUUID();\n+            String cookieName = getNonceCookieName(context);\n+            FrameworkUtils.setCookie(request, response, cookieName, nonceId, null);\n+            context.setProperty(cookieName, nonceId);\n+        }\n+    }\n+\n+    /**\n+     * Validate whether nonce value matches in cookie and context.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param context Authentication Context.\n+     *\n+     * @return boolean whether nonce cookie value valid or not.\n+     */\n+    public static boolean validateNonceCookie(HttpServletRequest request,\n+                                              AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            boolean validNonceValue = false;\n+            String cookieName = getNonceCookieName(context);\n+            String nonceFromContext = (String) context.getProperty(cookieName);\n+            Cookie nonceCookie = FrameworkUtils.getCookie(request, cookieName);\n+            String nonceFromSession = null;\n+            if (nonceCookie != null) {\n+                nonceFromSession = nonceCookie.getValue();\n+            }\n+            if (!StringUtils.isEmpty(nonceFromContext) && !StringUtils.isEmpty(nonceFromSession)\n+                    && nonceFromContext.equals(nonceFromSession)) {\n+                validNonceValue = true;\n+            }\n+            return validNonceValue;\n+        } else {\n+            // Return true if session nonce cookie config is not enabled.\n+            return true;\n+        }\n+    }\n+\n+    /**\n+     * Removes nonce value from context and cookie.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param response HttpServletResponse.\n+     * @param context Authentication Context.\n+     */\n+    public static void removeNonceCookie(HttpServletRequest request, HttpServletResponse response,\n+                                         AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            String cookieName = getNonceCookieName(context);\n+            FrameworkUtils.removeCookie(request, response, cookieName);\n+            context.removeProperty(cookieName);\n+        }\n+    }\n+\n+    /**\n+     * Check whether nonce cookie config is enabled or not.\n+     *\n+     * @return nonce cookie enabled or not.\n+     */\n+    public static boolean isNonceCookieEnabled() {\n+\n+        if (nonceCookieConfig == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee9a5154f6fc12b8ae511dc915c9b3cdb0d3631"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTI1MTQ3OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/SessionNonceCookieUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNDoxMToyMlrOHty5Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNDoxMToyMlrOHty5Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc4MTgwMg==", "bodyText": "Suggestion: if you start the method like\nif (!isNonceCookieEnabled()) {\n   return true;\n}\n\n....rest of the logic...\n\nIt is much cleaner.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3173#discussion_r517781802", "createdAt": "2020-11-05T04:11:22Z", "author": {"login": "thanujalk"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/SessionNonceCookieUtil.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.application.authentication.framework.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.registry.core.utils.UUIDGenerator;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * Handles session nonce cookie.\n+ * Session nonce cookie helps to mitigate the session hijacking.\n+ */\n+public class SessionNonceCookieUtil {\n+\n+    public static final String NONCE_COOKIE = \"sessionNonceCookie\";\n+    public static final String NONCE_COOKIE_CONFIG = \"EnableSessionNonceCookie\";\n+    public static final String NONCE_ERROR_CODE = \"sessionNonceErrorCode\";\n+\n+    private static Boolean nonceCookieConfig;\n+\n+    /**\n+     * Get dynamic name for the nonce cookie\n+     *\n+     * @param context Authentication Context.\n+     *\n+     * @return name of the nonce cookie for that context.\n+     */\n+    public static String getNonceCookieName(AuthenticationContext context) {\n+\n+        String cookieName = NONCE_COOKIE + \"-\" + context.getContextIdentifier();\n+        return cookieName;\n+    }\n+\n+    /**\n+     * Initiate or update nonce value in both cookie and context.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param response HttpServletResponse.\n+     * @param context Authentication Context.\n+     */\n+    public static void addNonceCookie(HttpServletRequest request, HttpServletResponse response,\n+                                      AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            String nonceId = UUIDGenerator.generateUUID();\n+            String cookieName = getNonceCookieName(context);\n+            FrameworkUtils.setCookie(request, response, cookieName, nonceId, null);\n+            context.setProperty(cookieName, nonceId);\n+        }\n+    }\n+\n+    /**\n+     * Validate whether nonce value matches in cookie and context.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param context Authentication Context.\n+     *\n+     * @return boolean whether nonce cookie value valid or not.\n+     */\n+    public static boolean validateNonceCookie(HttpServletRequest request,\n+                                              AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            boolean validNonceValue = false;\n+            String cookieName = getNonceCookieName(context);\n+            String nonceFromContext = (String) context.getProperty(cookieName);\n+            Cookie nonceCookie = FrameworkUtils.getCookie(request, cookieName);\n+            String nonceFromSession = null;\n+            if (nonceCookie != null) {\n+                nonceFromSession = nonceCookie.getValue();\n+            }\n+            if (!StringUtils.isEmpty(nonceFromContext) && !StringUtils.isEmpty(nonceFromSession)\n+                    && nonceFromContext.equals(nonceFromSession)) {\n+                validNonceValue = true;\n+            }\n+            return validNonceValue;\n+        } else {\n+            // Return true if session nonce cookie config is not enabled.\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee9a5154f6fc12b8ae511dc915c9b3cdb0d3631"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2575, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}