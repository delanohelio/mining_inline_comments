{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMzc4NTA4", "number": 2995, "title": "Tenant qualify /identity endpoint", "bodyText": "Addresses wso2/product-is#8626\nCurrently in some outbound authenticators, absolute call back is set from the authenticator itself see: https://github.com/wso2-extensions/identity-outbound-auth-samlsso/blob/master/components/org.wso2.carbon.identity.application.authenticator.samlsso/src/main/java/org/wso2/carbon/identity/application/authenticator/samlsso/logout/processor/SAMLLogoutResponseProcessor.java#L73. This can cause complications in tenant qualified scenarios. Hence as a solution we have moved the absolute URL creation logic to the framework whereever it is being used, and from the authenticator level only respective URL context is expected.\nThis PR also fixes the issue where DefaultServiceURLBuilder unncessarily encoding the query param string of a URL. As a result call back URL is getting as :\nhttps://localhost:9443/samlsso?sessionDataKey%3Dac584d70-8453-426c-945c-8d8b097387da\nExpected one should be  :\nhttps://localhost:9443/samlsso?sessionDataKey=ac584d70-8453-426c-945c-8d8b097387da", "createdAt": "2020-07-02T09:00:47Z", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995", "merged": true, "mergeCommit": {"oid": "60e7f3e35b281db439a48329311b971e6c6615c1"}, "closed": true, "closedAt": "2020-07-17T11:38:03Z", "author": {"login": "emswbandara"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcy1f1RAFqTQ0NDQ4ODM4Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1szXoAH2gAyNDQzMzc4NTA4OjFhMzE3ZTgzMTliNDNlOGRlZmU4MzJkNDZlNjk0YmI2MWM2YjZlZDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NDg4Mzg2", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#pullrequestreview-444488386", "createdAt": "2020-07-08T07:42:02Z", "commit": {"oid": "e336730eaccec4510412c34a1349cc4b25154b8f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NDkzMTY1", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#pullrequestreview-444493165", "createdAt": "2020-07-08T07:48:47Z", "commit": {"oid": "e336730eaccec4510412c34a1349cc4b25154b8f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo0ODo0OFrOGucKkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo1NDoyNlrOGucXHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0OTEzNg==", "bodyText": "Shall we move chkRemember to a constant as it has been used in multiple places?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r451349136", "createdAt": "2020-07-08T07:48:48Z", "author": {"login": "ashensw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java", "diffHunk": "@@ -765,19 +763,41 @@ protected void sendResponse(HttpServletRequest request, HttpServletResponse resp\n \n         // redirect to the caller\n         String redirectURL;\n-        String commonauthCallerPath = context.getCallerPath();\n-\n+        String callerPath = context.getCallerPath();\n         try {\n-            String queryParamsString = \"\";\n-            if (context.getCallerSessionKey() != null) {\n-                queryParamsString = FrameworkConstants.SESSION_DATA_KEY + \"=\" +\n-                        URLEncoder.encode(context.getCallerSessionKey(), \"UTF-8\");\n-            }\n+            if (!FrameworkUtils.isAbsoluteURI(callerPath)) {\n+                ServiceURLBuilder serviceURLBuilder = ServiceURLBuilder.create().addPath(context.getCallerPath());\n+                if (context.getCallerSessionKey() != null) {\n+                    serviceURLBuilder.addParameter(FrameworkConstants.SESSION_DATA_KEY, URLEncoder.encode(context\n+                            .getCallerSessionKey(), \"UTF-8\"));\n+                }\n+\n+                if (context.isRequestAuthenticated() && context.isRememberMe()) {\n+                    serviceURLBuilder.addParameter(\"chkRemember\", \"on\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e336730eaccec4510412c34a1349cc4b25154b8f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0OTkwMQ==", "bodyText": "Can't we just assign the value to rememberMeParam here as the rememberMeParam is an empty string?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r451349901", "createdAt": "2020-07-08T07:50:07Z", "author": {"login": "ashensw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/handler/request/impl/DefaultAuthenticationRequestHandler.java", "diffHunk": "@@ -765,19 +763,41 @@ protected void sendResponse(HttpServletRequest request, HttpServletResponse resp\n \n         // redirect to the caller\n         String redirectURL;\n-        String commonauthCallerPath = context.getCallerPath();\n-\n+        String callerPath = context.getCallerPath();\n         try {\n-            String queryParamsString = \"\";\n-            if (context.getCallerSessionKey() != null) {\n-                queryParamsString = FrameworkConstants.SESSION_DATA_KEY + \"=\" +\n-                        URLEncoder.encode(context.getCallerSessionKey(), \"UTF-8\");\n-            }\n+            if (!FrameworkUtils.isAbsoluteURI(callerPath)) {\n+                ServiceURLBuilder serviceURLBuilder = ServiceURLBuilder.create().addPath(context.getCallerPath());\n+                if (context.getCallerSessionKey() != null) {\n+                    serviceURLBuilder.addParameter(FrameworkConstants.SESSION_DATA_KEY, URLEncoder.encode(context\n+                            .getCallerSessionKey(), \"UTF-8\"));\n+                }\n+\n+                if (context.isRequestAuthenticated() && context.isRememberMe()) {\n+                    serviceURLBuilder.addParameter(\"chkRemember\", \"on\");\n+                }\n \n-            if (StringUtils.isNotEmpty(rememberMeParam)) {\n-                queryParamsString += \"&\" + rememberMeParam;\n+                try {\n+                    redirectURL = serviceURLBuilder.build().getAbsolutePublicURL();\n+                } catch (URLBuilderException e) {\n+                    throw FrameworkRuntimeException.error(\"Error while building redirect URL.\", e);\n+                }\n+            } else {\n+                String queryParamsString = \"\";\n+                if (context.getCallerSessionKey() != null) {\n+                    queryParamsString = FrameworkConstants.SESSION_DATA_KEY + \"=\" +\n+                            URLEncoder.encode(context.getCallerSessionKey(), \"UTF-8\");\n+                }\n+                String rememberMeParam = \"\";\n+\n+                if (context.isRequestAuthenticated() && context.isRememberMe()) {\n+                    rememberMeParam = rememberMeParam + \"chkRemember=on\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e336730eaccec4510412c34a1349cc4b25154b8f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1MTM4NQ==", "bodyText": "Is it correct to return true if the uri is empty?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r451351385", "createdAt": "2020-07-08T07:52:41Z", "author": {"login": "ashensw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2560,4 +2561,25 @@ public static boolean isContinueOnClaimHandlingErrorAllowed() {\n         // If config is empty or not a boolean value, the property must be set to the default value which is true.\n         return !Boolean.FALSE.toString().equalsIgnoreCase(continueOnClaimHandlingErrorValue);\n     }\n+\n+    public static boolean isAbsoluteURI(String uri) {\n+\n+        if (StringUtils.isBlank(uri)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"URI is empty.\");\n+            }\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e336730eaccec4510412c34a1349cc4b25154b8f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1MjM0OA==", "bodyText": "If the uri throws an URISyntaxException it will return true. Is it expected behavior?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r451352348", "createdAt": "2020-07-08T07:54:26Z", "author": {"login": "ashensw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2560,4 +2561,25 @@ public static boolean isContinueOnClaimHandlingErrorAllowed() {\n         // If config is empty or not a boolean value, the property must be set to the default value which is true.\n         return !Boolean.FALSE.toString().equalsIgnoreCase(continueOnClaimHandlingErrorValue);\n     }\n+\n+    public static boolean isAbsoluteURI(String uri) {\n+\n+        if (StringUtils.isBlank(uri)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"URI is empty.\");\n+            }\n+            return true;\n+        }\n+\n+        try {\n+            final URI uriObj = new URI(uri);\n+            return uriObj.isAbsolute();\n+        } catch (URISyntaxException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unable to process the URI: \" + uri, e);\n+            }\n+        }\n+        // Default behavior of a URI is expected to be absolute;\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e336730eaccec4510412c34a1349cc4b25154b8f"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15dfdffa79946175666b14b114cec8e145ed2ef8", "author": {"user": {"login": "emswbandara", "name": "Sathya Bandara"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/15dfdffa79946175666b14b114cec8e145ed2ef8", "committedDate": "2020-07-10T10:31:13Z", "message": "Fix tenant qualify /identity endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDE3MTM1", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#pullrequestreview-449017135", "createdAt": "2020-07-15T14:34:41Z", "commit": {"oid": "d9b9ee0b38f361d34752af71ae3f8cbc40b5414b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDI5MTMx", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#pullrequestreview-449029131", "createdAt": "2020-07-15T14:44:16Z", "commit": {"oid": "d9b9ee0b38f361d34752af71ae3f8cbc40b5414b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo0NDoxN1rOGyBi9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo0NDoxN1rOGyBi9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNzMxNg==", "bodyText": "Should we do this?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r455107316", "createdAt": "2020-07-15T14:44:17Z", "author": {"login": "mefarazath"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java", "diffHunk": "@@ -229,8 +241,17 @@ public String getType(IdentityMessageContext context) {\n         responseBuilder.setCallbackPath(getCallbackPath(context));\n         responseBuilder.setRelyingParty(getRelyingPartyId(context));\n         //type parameter is using since framework checking it, but future it'll use AUTH_NAME\n-        responseBuilder.setAuthType(getType(context));\n-        String commonAuthURL = IdentityUtil.getServerURL(FrameworkConstants.COMMONAUTH, true, true);\n+        String commonAuthURL;\n+        try {\n+            ServiceURLBuilder serviceURLBuilder = ServiceURLBuilder.create().addPath(FrameworkConstants.COMMONAUTH);\n+            commonAuthURL = serviceURLBuilder.build().getAbsolutePublicURL();\n+        } catch (URLBuilderException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Error occurred when building URL.\", e);\n+            }\n+            // Fallback to old way, for error scenarios.\n+            commonAuthURL = IdentityUtil.getServerURL(FrameworkConstants.COMMONAUTH, true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9b9ee0b38f361d34752af71ae3f8cbc40b5414b"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDI5ODc3", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#pullrequestreview-449029877", "createdAt": "2020-07-15T14:44:46Z", "commit": {"oid": "d9b9ee0b38f361d34752af71ae3f8cbc40b5414b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo0NDo0N1rOGyBkdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo0NDo0N1rOGyBkdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNzcwMg==", "bodyText": "Wouldn't this cause incorrect behaviours in tenant qualified URL mode?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2995#discussion_r455107702", "createdAt": "2020-07-15T14:44:47Z", "author": {"login": "mefarazath"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/inbound/IdentityProcessor.java", "diffHunk": "@@ -180,7 +182,17 @@ public String getType(IdentityMessageContext context) {\n         responseBuilder.setRelyingParty(getRelyingPartyId(context));\n         //type parameter is using since framework checking it, but future it'll use AUTH_NAME\n         responseBuilder.setAuthType(getType(context));\n-        String commonAuthURL = IdentityUtil.getServerURL(FrameworkConstants.COMMONAUTH, true, true);\n+        String commonAuthURL;\n+        try {\n+            ServiceURLBuilder serviceURLBuilder = ServiceURLBuilder.create().addPath(FrameworkConstants.COMMONAUTH);\n+            commonAuthURL = serviceURLBuilder.build().getAbsolutePublicURL();\n+        } catch (URLBuilderException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Error occurred when building URL.\", e);\n+            }\n+            // Fallback to old way, for error scenarios.\n+            commonAuthURL = IdentityUtil.getServerURL(FrameworkConstants.COMMONAUTH, true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9b9ee0b38f361d34752af71ae3f8cbc40b5414b"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a317e8319b43e8defe832d46e694bb61c6b6ed8", "author": {"user": {"login": "emswbandara", "name": "Sathya Bandara"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/1a317e8319b43e8defe832d46e694bb61c6b6ed8", "committedDate": "2020-07-17T05:16:00Z", "message": "Address comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2215, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}