{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMDAxOTAw", "number": 2789, "title": "Use unique userid for session management", "bodyText": "Proposed changes in this pull request\nFix wso2/product-is#7725\nApproach\nAccording to the previous implementation, for all the logged in users, a unique id is generated and added to the IDN_AUTH_USER table. Session details are mapped using this unique id.\nSince now there is a unique identifier for each user, there's no need to generate a new id during authentication.\nTherefore, for the local users, the unique user id given from the user store level is used for the session information storing. If the unique id is not available, an id is generated and the userid claim is updated. For the federated users, an id generated and added to the IDN_AUTH_USER table.", "createdAt": "2020-02-26T04:31:52Z", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789", "merged": true, "mergeCommit": {"oid": "639a234e014c91e667d646ac8f6c7ee66868ed34"}, "closed": true, "closedAt": "2020-02-26T14:12:51Z", "author": {"login": "pamodaaw"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcH_G5JABqjMwNzIxMDIzMDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIFeGqgFqTM2NDg0MTE2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f42cee29a7f98deb51d0dd2b9489fa76fc8ba840", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/f42cee29a7f98deb51d0dd2b9489fa76fc8ba840", "committedDate": "2020-02-26T04:22:59Z", "message": "Use unique userid for session management"}, "afterCommit": {"oid": "9e76f6beacab88a41f1739964dc2ce0919e2d79c", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/9e76f6beacab88a41f1739964dc2ce0919e2d79c", "committedDate": "2020-02-26T04:34:50Z", "message": "Use unique userid for session management"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjMwODM4", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#pullrequestreview-364630838", "createdAt": "2020-02-26T05:28:53Z", "commit": {"oid": "9e76f6beacab88a41f1739964dc2ce0919e2d79c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNToyODo1M1rOFuerJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNToyODo1M1rOFuerJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4MTM4Mw==", "bodyText": "shall we make this tenant id, since we already have tenant id from the place we invoke this method so that we can avoid the tenant id retrieval again?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384281383", "createdAt": "2020-02-26T05:28:53Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantDomain    tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(String tenantDomain, String userStoreDomain, String username) throws", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e76f6beacab88a41f1739964dc2ce0919e2d79c"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjMxOTgx", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#pullrequestreview-364631981", "createdAt": "2020-02-26T05:32:58Z", "commit": {"oid": "9e76f6beacab88a41f1739964dc2ce0919e2d79c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTozMjo1OFrOFueuzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTozMjo1OFrOFueuzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4MjMxNw==", "bodyText": "Can you add a comment with the reason for this check?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384282317", "createdAt": "2020-02-26T05:32:58Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantDomain    tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(String tenantDomain, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        if (StringUtils.isEmpty(tenantDomain)) {\n+            throw new UserSessionException(\"User tenant domain cannot be empty.\");\n+        }\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantDomain, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e76f6beacab88a41f1739964dc2ce0919e2d79c"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e76f6beacab88a41f1739964dc2ce0919e2d79c", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/9e76f6beacab88a41f1739964dc2ce0919e2d79c", "committedDate": "2020-02-26T04:34:50Z", "message": "Use unique userid for session management"}, "afterCommit": {"oid": "9de76fff6cb20d9a93bb471e7dc7ed86f8adfa3f", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/9de76fff6cb20d9a93bb471e7dc7ed86f8adfa3f", "committedDate": "2020-02-26T05:34:23Z", "message": "Use unique userid for session management"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72b0f6de27484bc8e696f7cd1c2c3f7d8b33989b", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/72b0f6de27484bc8e696f7cd1c2c3f7d8b33989b", "committedDate": "2020-02-26T05:40:44Z", "message": "Use unique userid for session management"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9de76fff6cb20d9a93bb471e7dc7ed86f8adfa3f", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/9de76fff6cb20d9a93bb471e7dc7ed86f8adfa3f", "committedDate": "2020-02-26T05:34:23Z", "message": "Use unique userid for session management"}, "afterCommit": {"oid": "72b0f6de27484bc8e696f7cd1c2c3f7d8b33989b", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/72b0f6de27484bc8e696f7cd1c2c3f7d8b33989b", "committedDate": "2020-02-26T05:40:44Z", "message": "Use unique userid for session management"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjMzNDQy", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#pullrequestreview-364633442", "createdAt": "2020-02-26T05:38:37Z", "commit": {"oid": "9e76f6beacab88a41f1739964dc2ce0919e2d79c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTozOTo1OVrOFue06Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo0MTo0OFrOFue2dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4Mzg4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log.debug(\"Error occurred while retrieving Id for the user: \" + username, e);\n          \n          \n            \n                                log.debug(\"Error occurred while resolving Id for the user: \" + username, e);", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384283881", "createdAt": "2020-02-26T05:39:59Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,78 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantId    id of the tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(int tenantId, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantId, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {\n+                        userId = addUserId(username, userStoreManager);\n+                    }\n+                    return userId;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Provided user store manager for the user: \" + username + \", is not an instance of the \" +\n+                            \"AbstractUserStore manager\");\n+                }\n+                throw new UserSessionException(\"Unable to get the unique id of the user: \" + username + \".\");\n+            } catch (org.wso2.carbon.user.core.UserStoreException e) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error occurred while retrieving Id for the user: \" + username, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de76fff6cb20d9a93bb471e7dc7ed86f8adfa3f"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4Mzk0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n          \n          \n            \n                            throw new UserSessionException(\"Error occurred while resolving Id for the user: \" + username);", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384283947", "createdAt": "2020-02-26T05:40:15Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,78 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantId    id of the tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(int tenantId, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantId, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {\n+                        userId = addUserId(username, userStoreManager);\n+                    }\n+                    return userId;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Provided user store manager for the user: \" + username + \", is not an instance of the \" +\n+                            \"AbstractUserStore manager\");\n+                }\n+                throw new UserSessionException(\"Unable to get the unique id of the user: \" + username + \".\");\n+            } catch (org.wso2.carbon.user.core.UserStoreException e) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error occurred while retrieving Id for the user: \" + username, e);\n+                }\n+                throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de76fff6cb20d9a93bb471e7dc7ed86f8adfa3f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NDI3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n          \n          \n            \n                        throw new UserSessionException(\"Error occurred while retrieving the userstore manager to resolve Id for the user: \" + username);", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384284278", "createdAt": "2020-02-26T05:41:48Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantId    id of the tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(int tenantId, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantId, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+\n+                    // If only the user store is not read-only, update the user-id claim with the unique id.\n+                    // Otherwise there will be no permission to update the userstore.\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {\n+                        userId = addUserId(username, userStoreManager);\n+                    }\n+                    return userId;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Provided user store manager for the user: \" + username + \", is not an instance of the \" +\n+                            \"AbstractUserStore manager\");\n+                }\n+                throw new UserSessionException(\"Unable to get the unique id of the user: \" + username + \".\");\n+            } catch (org.wso2.carbon.user.core.UserStoreException e) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error occurred while retrieving Id for the user: \" + username, e);\n+                }\n+                throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n+            }\n+        } catch (UserStoreException e) {\n+            throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b0f6de27484bc8e696f7cd1c2c3f7d8b33989b"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bfb78623fa7a140bdff132ce7a06c3be0cfb298", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/7bfb78623fa7a140bdff132ce7a06c3be0cfb298", "committedDate": "2020-02-26T05:44:07Z", "message": "Update debug logs\n\nCo-Authored-By: Maduranga Siriwardena <maduranga.siriwardena@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47e5ec8c1528dd2cc31786e776ad3d8107128bf2", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/47e5ec8c1528dd2cc31786e776ad3d8107128bf2", "committedDate": "2020-02-26T05:45:05Z", "message": "Update error messages\n\nCo-Authored-By: Maduranga Siriwardena <maduranga.siriwardena@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "836abe2097598ccafde5756f42570c3e4ac209cb", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/836abe2097598ccafde5756f42570c3e4ac209cb", "committedDate": "2020-02-26T05:45:34Z", "message": "Update error messages\n\nCo-Authored-By: Maduranga Siriwardena <maduranga.siriwardena@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjM1MzM5", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#pullrequestreview-364635339", "createdAt": "2020-02-26T05:45:52Z", "commit": {"oid": "72b0f6de27484bc8e696f7cd1c2c3f7d8b33989b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo0NTo1MlrOFue6Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo0NTo1MlrOFue6Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NTE5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    userId = UUIDGenerator.generateUUID();\n          \n          \n            \n                    userId = UUID.randomUUID().toString();", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384285195", "createdAt": "2020-02-26T05:45:52Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantId    id of the tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(int tenantId, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantId, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+\n+                    // If only the user store is not read-only, update the user-id claim with the unique id.\n+                    // Otherwise there will be no permission to update the userstore.\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {\n+                        userId = addUserId(username, userStoreManager);\n+                    }\n+                    return userId;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Provided user store manager for the user: \" + username + \", is not an instance of the \" +\n+                            \"AbstractUserStore manager\");\n+                }\n+                throw new UserSessionException(\"Unable to get the unique id of the user: \" + username + \".\");\n+            } catch (org.wso2.carbon.user.core.UserStoreException e) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error occurred while retrieving Id for the user: \" + username, e);\n+                }\n+                throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n+            }\n+        } catch (UserStoreException e) {\n+            throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n+        }\n+    }\n+\n+    private static String addUserId(String username, UserStoreManager userStoreManager) {\n+\n+        String userId;\n+        userId = UUIDGenerator.generateUUID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b0f6de27484bc8e696f7cd1c2c3f7d8b33989b"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjM3OTAy", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#pullrequestreview-364637902", "createdAt": "2020-02-26T05:54:51Z", "commit": {"oid": "836abe2097598ccafde5756f42570c3e4ac209cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo1NDo1MlrOFufCIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo1NDo1MlrOFufCIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NzI2NQ==", "bodyText": "Since this catch block is the same as the outer one, let's remove it.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384287265", "createdAt": "2020-02-26T05:54:52Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/store/UserSessionStore.java", "diffHunk": "@@ -729,4 +729,32 @@ public void removeFederatedAuthSessionInfo(String sessionContextKey) throws User\n                     \"the session index:\" + sessionContextKey, e);\n         }\n     }\n+\n+    /**\n+     * Method to check whether the user id is available in the IDN_AUTH_USER table.\n+     *\n+     * @param userId    Id of the user\n+     * @return the boolean decision\n+     * @throws UserSessionException if an error occurs when retrieving the mapping from the database\n+     */\n+    public boolean isExistingUser(String userId) throws UserSessionException {\n+\n+        Boolean isExisting = false;\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            try (PreparedStatement preparedStatement = connection\n+                    .prepareStatement(SQLQueries.SQL_SELECT_INFO_OF_USER_ID)) {\n+                preparedStatement.setString(1, userId);\n+                try (ResultSet resultSet = preparedStatement.executeQuery()) {\n+                    if (resultSet.next()) {\n+                        isExisting = true;\n+                    }\n+                }\n+            } catch (SQLException e1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836abe2097598ccafde5756f42570c3e4ac209cb"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8add5d4a6dac2cb3c5894b3d48e0813ac8d32b0", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/f8add5d4a6dac2cb3c5894b3d48e0813ac8d32b0", "committedDate": "2020-02-26T06:30:00Z", "message": "Merge branch 'master' of https://github.com/pamodaaw/carbon-identity-framework"}, "afterCommit": {"oid": "d562e4011411bd06b2786165642e54b4ed7ce99b", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/d562e4011411bd06b2786165642e54b4ed7ce99b", "committedDate": "2019-07-25T02:07:51Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-identity-framework into session-mgt-feature-updated"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d562e4011411bd06b2786165642e54b4ed7ce99b", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/d562e4011411bd06b2786165642e54b4ed7ce99b", "committedDate": "2019-07-25T02:07:51Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-identity-framework into session-mgt-feature-updated"}, "afterCommit": {"oid": "ef2c935b509bcf5e88e570fb11ee0acef3db2f46", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/ef2c935b509bcf5e88e570fb11ee0acef3db2f46", "committedDate": "2020-02-26T06:48:49Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-identity-framework"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef2c935b509bcf5e88e570fb11ee0acef3db2f46", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/ef2c935b509bcf5e88e570fb11ee0acef3db2f46", "committedDate": "2020-02-26T06:48:49Z", "message": "Merge branch 'master' of https://github.com/wso2/carbon-identity-framework"}, "afterCommit": {"oid": "8ef75961cb68d1c022d5286aa0d76afe71e85505", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/8ef75961cb68d1c022d5286aa0d76afe71e85505", "committedDate": "2020-02-26T06:40:36Z", "message": "Update exception handling when checking users in IDN_AUTH_USER table"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODE0MzQw", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#pullrequestreview-364814340", "createdAt": "2020-02-26T11:13:29Z", "commit": {"oid": "c431fab50515bbda6c803ab6f1fb69305577b40f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMToxMzoyOVrOFunlPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMToxMzoyOVrOFunlPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNzMyNw==", "bodyText": "Let's send the caught except too", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384427327", "createdAt": "2020-02-26T11:13:29Z", "author": {"login": "janakamarasena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantId    id of the tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(int tenantId, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantId, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+\n+                    // If the user id is not present in the userstore, we need to add it to the userstore. But if the\n+                    // userstore is read-only, we cannot add the id and empty user id will returned.\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {\n+                        userId = addUserId(username, userStoreManager);\n+                    }\n+                    return userId;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Provided user store manager for the user: \" + username + \", is not an instance of the \" +\n+                            \"AbstractUserStore manager\");\n+                }\n+                throw new UserSessionException(\"Unable to get the unique id of the user: \" + username + \".\");\n+            } catch (org.wso2.carbon.user.core.UserStoreException e) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error occurred while resolving Id for the user: \" + username, e);\n+                }\n+                throw new UserSessionException(\"Error occurred while resolving Id for the user: \" + username);\n+            }\n+        } catch (UserStoreException e) {\n+            throw new UserSessionException(\"Error occurred while retrieving the userstore manager to resolve Id for the user: \" + username);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c431fab50515bbda6c803ab6f1fb69305577b40f"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6530ce7df97dc873e61e36208a82d8556ac49ddb", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/6530ce7df97dc873e61e36208a82d8556ac49ddb", "committedDate": "2020-02-26T11:33:01Z", "message": "Update error handling during session management"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c431fab50515bbda6c803ab6f1fb69305577b40f", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/c431fab50515bbda6c803ab6f1fb69305577b40f", "committedDate": "2020-02-26T08:31:32Z", "message": "Update UUID generation logic"}, "afterCommit": {"oid": "6530ce7df97dc873e61e36208a82d8556ac49ddb", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/6530ce7df97dc873e61e36208a82d8556ac49ddb", "committedDate": "2020-02-26T11:33:01Z", "message": "Update error handling during session management"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODQxMTY5", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#pullrequestreview-364841169", "createdAt": "2020-02-26T11:59:53Z", "commit": {"oid": "6530ce7df97dc873e61e36208a82d8556ac49ddb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2409, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}