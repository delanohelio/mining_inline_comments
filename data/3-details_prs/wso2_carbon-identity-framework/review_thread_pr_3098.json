{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMTAxMDIw", "number": 3098, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDoyMzowMVrOEh8WwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTowNjoxMFrOEh83Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDI3MzI4OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDoyMzowMVrOHPiY8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTowNTozOVrOHPjGsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1NDEyOA==", "bodyText": "Is it correct to throw the AuthenticationFailedException exception here?\nShouldn't it be some other FrameworkException?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3098#discussion_r486054128", "createdAt": "2020-09-10T04:23:01Z", "author": {"login": "mefarazath"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -951,6 +956,79 @@ public static SessionContext getSessionContextFromCache(String key) {\n         return sessionContext;\n     }\n \n+    /**\n+     * Retrieve session context from the session cache.\n+     *\n+     * @param request           HttpServletRequest.\n+     * @param context           Authentication context.\n+     * @param sessionContextKey Session context key.\n+     * @return Session context key.\n+     * @throws AuthenticationFailedException Error in triggering session expire event.\n+     */\n+    public static SessionContext getSessionContextFromCache(HttpServletRequest request, AuthenticationContext context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4745ec58b3d6a9b1f03327fefef4f5e8b1fa90a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2NTg0Mg==", "bodyText": "Fixed with 6e06716", "url": "https://github.com/wso2/carbon-identity-framework/pull/3098#discussion_r486065842", "createdAt": "2020-09-10T05:05:39Z", "author": {"login": "sachiniWettasinghe"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -951,6 +956,79 @@ public static SessionContext getSessionContextFromCache(String key) {\n         return sessionContext;\n     }\n \n+    /**\n+     * Retrieve session context from the session cache.\n+     *\n+     * @param request           HttpServletRequest.\n+     * @param context           Authentication context.\n+     * @param sessionContextKey Session context key.\n+     * @return Session context key.\n+     * @throws AuthenticationFailedException Error in triggering session expire event.\n+     */\n+    public static SessionContext getSessionContextFromCache(HttpServletRequest request, AuthenticationContext context", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1NDEyOA=="}, "originalCommit": {"oid": "d4745ec58b3d6a9b1f03327fefef4f5e8b1fa90a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDM1NjE0OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTowNjoxMFrOHPjIHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNToyNDozOVrOHPjiNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2NjIwNA==", "bodyText": "Let's have some context information. Like the sessionId, user etc.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3098#discussion_r486066204", "createdAt": "2020-09-10T05:06:10Z", "author": {"login": "mefarazath"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -951,6 +955,79 @@ public static SessionContext getSessionContextFromCache(String key) {\n         return sessionContext;\n     }\n \n+    /**\n+     * Retrieve session context from the session cache.\n+     *\n+     * @param request           HttpServletRequest.\n+     * @param context           Authentication context.\n+     * @param sessionContextKey Session context key.\n+     * @return Session context key.\n+     * @throws FrameworkException Error in triggering session expire event.\n+     */\n+    public static SessionContext getSessionContextFromCache(HttpServletRequest request, AuthenticationContext context\n+            , String sessionContextKey) throws FrameworkException {\n+\n+        SessionContext sessionContext = null;\n+        if (StringUtils.isNotBlank(sessionContextKey)) {\n+            SessionContextCacheKey cacheKey = new SessionContextCacheKey(sessionContextKey);\n+            SessionContextCache sessionContextCache = SessionContextCache.getInstance();\n+            SessionContextCacheEntry cacheEntry = sessionContextCache.getSessionContextCacheEntry(cacheKey);\n+\n+            if (cacheEntry != null) {\n+                sessionContext = cacheEntry.getContext();\n+                boolean isSessionExpired = sessionContextCache.isSessionExpired(cacheKey, cacheEntry);\n+                if (isSessionExpired) {\n+                    triggerSessionExpireEvent(request, context, sessionContext);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"A SESSION_EXPIRE event was fired for the expired session found corresponding \" +\n+                                \"to the key: \" + cacheKey.getContextId());\n+                    }\n+                    return null;\n+                }\n+            }\n+        }\n+        return sessionContext;\n+    }\n+\n+    /**\n+     * Trigger SESSION_EXPIRE event on session expiry due to a session idle timeout or a remember me session time out.\n+     *\n+     * @param request        HttpServletRequest.\n+     * @param context        Authentication context.\n+     * @param sessionContext Session context.\n+     * @throws FrameworkException Error in triggering the session expiry event.\n+     */\n+    private static void triggerSessionExpireEvent(HttpServletRequest request, AuthenticationContext context,\n+                                                  SessionContext sessionContext) throws FrameworkException {\n+\n+        AuthenticatedUser authenticatedUser = new AuthenticatedUser();\n+        if (sessionContext != null) {\n+            Object authenticatedUserObj = sessionContext.getProperty(FrameworkConstants.AUTHENTICATED_USER);\n+            if (authenticatedUserObj instanceof AuthenticatedUser) {\n+                authenticatedUser = (AuthenticatedUser) authenticatedUserObj;\n+            }\n+            context.setSubject(authenticatedUser);\n+\n+            IdentityEventService eventService = FrameworkServiceDataHolder.getInstance().getIdentityEventService();\n+            try {\n+                Map<String, Object> eventProperties = new HashMap<>();\n+                eventProperties.put(IdentityEventConstants.EventProperty.REQUEST, request);\n+                eventProperties.put(IdentityEventConstants.EventProperty.CONTEXT, context);\n+                eventProperties.put(IdentityEventConstants.EventProperty.SESSION_CONTEXT, sessionContext);\n+                Map<String, Object> paramMap = new HashMap<>();\n+                paramMap.put(FrameworkConstants.AnalyticsAttributes.USER, authenticatedUser);\n+                paramMap.put(FrameworkConstants.AnalyticsAttributes.SESSION_ID, context.getSessionIdentifier());\n+                Map<String, Object> unmodifiableParamMap = Collections.unmodifiableMap(paramMap);\n+                eventProperties.put(IdentityEventConstants.EventProperty.PARAMS, unmodifiableParamMap);\n+\n+                Event event = new Event(IdentityEventConstants.EventName.SESSION_EXPIRE.name(), eventProperties);\n+                eventService.handleEvent(event);\n+            } catch (IdentityEventException e) {\n+                throw new FrameworkException(\"Error in triggering the session expire event.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e0671634815499c949ce71f6f8db045d7ad3366"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA3Mjg4NA==", "bodyText": "Fixed with cf0c1c4", "url": "https://github.com/wso2/carbon-identity-framework/pull/3098#discussion_r486072884", "createdAt": "2020-09-10T05:24:39Z", "author": {"login": "sachiniWettasinghe"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -951,6 +955,79 @@ public static SessionContext getSessionContextFromCache(String key) {\n         return sessionContext;\n     }\n \n+    /**\n+     * Retrieve session context from the session cache.\n+     *\n+     * @param request           HttpServletRequest.\n+     * @param context           Authentication context.\n+     * @param sessionContextKey Session context key.\n+     * @return Session context key.\n+     * @throws FrameworkException Error in triggering session expire event.\n+     */\n+    public static SessionContext getSessionContextFromCache(HttpServletRequest request, AuthenticationContext context\n+            , String sessionContextKey) throws FrameworkException {\n+\n+        SessionContext sessionContext = null;\n+        if (StringUtils.isNotBlank(sessionContextKey)) {\n+            SessionContextCacheKey cacheKey = new SessionContextCacheKey(sessionContextKey);\n+            SessionContextCache sessionContextCache = SessionContextCache.getInstance();\n+            SessionContextCacheEntry cacheEntry = sessionContextCache.getSessionContextCacheEntry(cacheKey);\n+\n+            if (cacheEntry != null) {\n+                sessionContext = cacheEntry.getContext();\n+                boolean isSessionExpired = sessionContextCache.isSessionExpired(cacheKey, cacheEntry);\n+                if (isSessionExpired) {\n+                    triggerSessionExpireEvent(request, context, sessionContext);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"A SESSION_EXPIRE event was fired for the expired session found corresponding \" +\n+                                \"to the key: \" + cacheKey.getContextId());\n+                    }\n+                    return null;\n+                }\n+            }\n+        }\n+        return sessionContext;\n+    }\n+\n+    /**\n+     * Trigger SESSION_EXPIRE event on session expiry due to a session idle timeout or a remember me session time out.\n+     *\n+     * @param request        HttpServletRequest.\n+     * @param context        Authentication context.\n+     * @param sessionContext Session context.\n+     * @throws FrameworkException Error in triggering the session expiry event.\n+     */\n+    private static void triggerSessionExpireEvent(HttpServletRequest request, AuthenticationContext context,\n+                                                  SessionContext sessionContext) throws FrameworkException {\n+\n+        AuthenticatedUser authenticatedUser = new AuthenticatedUser();\n+        if (sessionContext != null) {\n+            Object authenticatedUserObj = sessionContext.getProperty(FrameworkConstants.AUTHENTICATED_USER);\n+            if (authenticatedUserObj instanceof AuthenticatedUser) {\n+                authenticatedUser = (AuthenticatedUser) authenticatedUserObj;\n+            }\n+            context.setSubject(authenticatedUser);\n+\n+            IdentityEventService eventService = FrameworkServiceDataHolder.getInstance().getIdentityEventService();\n+            try {\n+                Map<String, Object> eventProperties = new HashMap<>();\n+                eventProperties.put(IdentityEventConstants.EventProperty.REQUEST, request);\n+                eventProperties.put(IdentityEventConstants.EventProperty.CONTEXT, context);\n+                eventProperties.put(IdentityEventConstants.EventProperty.SESSION_CONTEXT, sessionContext);\n+                Map<String, Object> paramMap = new HashMap<>();\n+                paramMap.put(FrameworkConstants.AnalyticsAttributes.USER, authenticatedUser);\n+                paramMap.put(FrameworkConstants.AnalyticsAttributes.SESSION_ID, context.getSessionIdentifier());\n+                Map<String, Object> unmodifiableParamMap = Collections.unmodifiableMap(paramMap);\n+                eventProperties.put(IdentityEventConstants.EventProperty.PARAMS, unmodifiableParamMap);\n+\n+                Event event = new Event(IdentityEventConstants.EventName.SESSION_EXPIRE.name(), eventProperties);\n+                eventService.handleEvent(event);\n+            } catch (IdentityEventException e) {\n+                throw new FrameworkException(\"Error in triggering the session expire event.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA2NjIwNA=="}, "originalCommit": {"oid": "6e0671634815499c949ce71f6f8db045d7ad3366"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2531, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}