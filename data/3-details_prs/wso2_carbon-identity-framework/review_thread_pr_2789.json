{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMDAxOTAw", "number": 2789, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNToyODo1M1rODi8nGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMToxMzoyOVrODjCV4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTcxMjI1OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNToyODo1M1rOFuerJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTozNjozNFrOFuex3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4MTM4Mw==", "bodyText": "shall we make this tenant id, since we already have tenant id from the place we invoke this method so that we can avoid the tenant id retrieval again?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384281383", "createdAt": "2020-02-26T05:28:53Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantDomain    tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(String tenantDomain, String userStoreDomain, String username) throws", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e76f6beacab88a41f1739964dc2ce0919e2d79c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4MzEwMg==", "bodyText": "Fixed", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384283102", "createdAt": "2020-02-26T05:36:34Z", "author": {"login": "pamodaaw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantDomain    tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(String tenantDomain, String userStoreDomain, String username) throws", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4MTM4Mw=="}, "originalCommit": {"oid": "9e76f6beacab88a41f1739964dc2ce0919e2d79c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTcxODI4OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTozMjo1OFrOFueuzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo1MzozOFrOFufBFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4MjMxNw==", "bodyText": "Can you add a comment with the reason for this check?", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384282317", "createdAt": "2020-02-26T05:32:58Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantDomain    tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(String tenantDomain, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        if (StringUtils.isEmpty(tenantDomain)) {\n+            throw new UserSessionException(\"User tenant domain cannot be empty.\");\n+        }\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantDomain, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e76f6beacab88a41f1739964dc2ce0919e2d79c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NDM2Nw==", "bodyText": "Added", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384284367", "createdAt": "2020-02-26T05:42:18Z", "author": {"login": "pamodaaw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantDomain    tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(String tenantDomain, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        if (StringUtils.isEmpty(tenantDomain)) {\n+            throw new UserSessionException(\"User tenant domain cannot be empty.\");\n+        }\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantDomain, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4MjMxNw=="}, "originalCommit": {"oid": "9e76f6beacab88a41f1739964dc2ce0919e2d79c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4Njk5OQ==", "bodyText": "Shall we change the comment like below?\nIf the user id is not present in the userstore, we need to add it to the userstore. But if the userstore is read-only, we cannot add the id and empty user id will returned.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384286999", "createdAt": "2020-02-26T05:53:38Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantDomain    tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(String tenantDomain, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        if (StringUtils.isEmpty(tenantDomain)) {\n+            throw new UserSessionException(\"User tenant domain cannot be empty.\");\n+        }\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantDomain, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4MjMxNw=="}, "originalCommit": {"oid": "9e76f6beacab88a41f1739964dc2ce0919e2d79c"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTcyODQ0OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTozOTo1OVrOFue06Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTozOTo1OVrOFue06Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4Mzg4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log.debug(\"Error occurred while retrieving Id for the user: \" + username, e);\n          \n          \n            \n                                log.debug(\"Error occurred while resolving Id for the user: \" + username, e);", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384283881", "createdAt": "2020-02-26T05:39:59Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,78 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantId    id of the tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(int tenantId, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantId, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {\n+                        userId = addUserId(username, userStoreManager);\n+                    }\n+                    return userId;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Provided user store manager for the user: \" + username + \", is not an instance of the \" +\n+                            \"AbstractUserStore manager\");\n+                }\n+                throw new UserSessionException(\"Unable to get the unique id of the user: \" + username + \".\");\n+            } catch (org.wso2.carbon.user.core.UserStoreException e) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error occurred while retrieving Id for the user: \" + username, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de76fff6cb20d9a93bb471e7dc7ed86f8adfa3f"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTcyODg0OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo0MDoxNVrOFue1Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo0MDoxNVrOFue1Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4Mzk0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n          \n          \n            \n                            throw new UserSessionException(\"Error occurred while resolving Id for the user: \" + username);", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384283947", "createdAt": "2020-02-26T05:40:15Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,78 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantId    id of the tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(int tenantId, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantId, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {\n+                        userId = addUserId(username, userStoreManager);\n+                    }\n+                    return userId;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Provided user store manager for the user: \" + username + \", is not an instance of the \" +\n+                            \"AbstractUserStore manager\");\n+                }\n+                throw new UserSessionException(\"Unable to get the unique id of the user: \" + username + \".\");\n+            } catch (org.wso2.carbon.user.core.UserStoreException e) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error occurred while retrieving Id for the user: \" + username, e);\n+                }\n+                throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de76fff6cb20d9a93bb471e7dc7ed86f8adfa3f"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTczMTA5OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo0MTo0OFrOFue2dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo0MTo0OFrOFue2dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NDI3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n          \n          \n            \n                        throw new UserSessionException(\"Error occurred while retrieving the userstore manager to resolve Id for the user: \" + username);", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384284278", "createdAt": "2020-02-26T05:41:48Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantId    id of the tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(int tenantId, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantId, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+\n+                    // If only the user store is not read-only, update the user-id claim with the unique id.\n+                    // Otherwise there will be no permission to update the userstore.\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {\n+                        userId = addUserId(username, userStoreManager);\n+                    }\n+                    return userId;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Provided user store manager for the user: \" + username + \", is not an instance of the \" +\n+                            \"AbstractUserStore manager\");\n+                }\n+                throw new UserSessionException(\"Unable to get the unique id of the user: \" + username + \".\");\n+            } catch (org.wso2.carbon.user.core.UserStoreException e) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error occurred while retrieving Id for the user: \" + username, e);\n+                }\n+                throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n+            }\n+        } catch (UserStoreException e) {\n+            throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b0f6de27484bc8e696f7cd1c2c3f7d8b33989b"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTczNzMzOnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo0NTo1MlrOFue6Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTowNjoxMVrOFunXQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NTE5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    userId = UUIDGenerator.generateUUID();\n          \n          \n            \n                    userId = UUID.randomUUID().toString();", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384285195", "createdAt": "2020-02-26T05:45:52Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantId    id of the tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(int tenantId, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantId, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+\n+                    // If only the user store is not read-only, update the user-id claim with the unique id.\n+                    // Otherwise there will be no permission to update the userstore.\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {\n+                        userId = addUserId(username, userStoreManager);\n+                    }\n+                    return userId;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Provided user store manager for the user: \" + username + \", is not an instance of the \" +\n+                            \"AbstractUserStore manager\");\n+                }\n+                throw new UserSessionException(\"Unable to get the unique id of the user: \" + username + \".\");\n+            } catch (org.wso2.carbon.user.core.UserStoreException e) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error occurred while retrieving Id for the user: \" + username, e);\n+                }\n+                throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n+            }\n+        } catch (UserStoreException e) {\n+            throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n+        }\n+    }\n+\n+    private static String addUserId(String username, UserStoreManager userStoreManager) {\n+\n+        String userId;\n+        userId = UUIDGenerator.generateUUID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b0f6de27484bc8e696f7cd1c2c3f7d8b33989b"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMjY0Mg==", "bodyText": "This is the util method available in the user-core level. If we use the same UUID generate logic, we can customize the logic if needed, easily from one place", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384302642", "createdAt": "2020-02-26T06:54:40Z", "author": {"login": "pamodaaw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantId    id of the tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(int tenantId, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantId, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+\n+                    // If only the user store is not read-only, update the user-id claim with the unique id.\n+                    // Otherwise there will be no permission to update the userstore.\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {\n+                        userId = addUserId(username, userStoreManager);\n+                    }\n+                    return userId;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Provided user store manager for the user: \" + username + \", is not an instance of the \" +\n+                            \"AbstractUserStore manager\");\n+                }\n+                throw new UserSessionException(\"Unable to get the unique id of the user: \" + username + \".\");\n+            } catch (org.wso2.carbon.user.core.UserStoreException e) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error occurred while retrieving Id for the user: \" + username, e);\n+                }\n+                throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n+            }\n+        } catch (UserStoreException e) {\n+            throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n+        }\n+    }\n+\n+    private static String addUserId(String username, UserStoreManager userStoreManager) {\n+\n+        String userId;\n+        userId = UUIDGenerator.generateUUID();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NTE5NQ=="}, "originalCommit": {"oid": "72b0f6de27484bc8e696f7cd1c2c3f7d8b33989b"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMTE0MQ==", "bodyText": "This comes from the org.wso2.carbon.registry.core.utils package. There is no point to have a dependency to the registry from here.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384311141", "createdAt": "2020-02-26T07:23:35Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantId    id of the tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(int tenantId, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantId, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+\n+                    // If only the user store is not read-only, update the user-id claim with the unique id.\n+                    // Otherwise there will be no permission to update the userstore.\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {\n+                        userId = addUserId(username, userStoreManager);\n+                    }\n+                    return userId;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Provided user store manager for the user: \" + username + \", is not an instance of the \" +\n+                            \"AbstractUserStore manager\");\n+                }\n+                throw new UserSessionException(\"Unable to get the unique id of the user: \" + username + \".\");\n+            } catch (org.wso2.carbon.user.core.UserStoreException e) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error occurred while retrieving Id for the user: \" + username, e);\n+                }\n+                throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n+            }\n+        } catch (UserStoreException e) {\n+            throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n+        }\n+    }\n+\n+    private static String addUserId(String username, UserStoreManager userStoreManager) {\n+\n+        String userId;\n+        userId = UUIDGenerator.generateUUID();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NTE5NQ=="}, "originalCommit": {"oid": "72b0f6de27484bc8e696f7cd1c2c3f7d8b33989b"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMzc0Nw==", "bodyText": "Changed", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384423747", "createdAt": "2020-02-26T11:06:11Z", "author": {"login": "pamodaaw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantId    id of the tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(int tenantId, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantId, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+\n+                    // If only the user store is not read-only, update the user-id claim with the unique id.\n+                    // Otherwise there will be no permission to update the userstore.\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {\n+                        userId = addUserId(username, userStoreManager);\n+                    }\n+                    return userId;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Provided user store manager for the user: \" + username + \", is not an instance of the \" +\n+                            \"AbstractUserStore manager\");\n+                }\n+                throw new UserSessionException(\"Unable to get the unique id of the user: \" + username + \".\");\n+            } catch (org.wso2.carbon.user.core.UserStoreException e) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error occurred while retrieving Id for the user: \" + username, e);\n+                }\n+                throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n+            }\n+        } catch (UserStoreException e) {\n+            throw new UserSessionException(\"Unable to retrieve Id for the user: \" + username);\n+        }\n+    }\n+\n+    private static String addUserId(String username, UserStoreManager userStoreManager) {\n+\n+        String userId;\n+        userId = UUIDGenerator.generateUUID();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NTE5NQ=="}, "originalCommit": {"oid": "72b0f6de27484bc8e696f7cd1c2c3f7d8b33989b"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTc1MTA5OnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/store/UserSessionStore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo1NDo1MlrOFufCIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjozODoxOVrOFufsuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NzI2NQ==", "bodyText": "Since this catch block is the same as the outer one, let's remove it.", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384287265", "createdAt": "2020-02-26T05:54:52Z", "author": {"login": "madurangasiriwardena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/store/UserSessionStore.java", "diffHunk": "@@ -729,4 +729,32 @@ public void removeFederatedAuthSessionInfo(String sessionContextKey) throws User\n                     \"the session index:\" + sessionContextKey, e);\n         }\n     }\n+\n+    /**\n+     * Method to check whether the user id is available in the IDN_AUTH_USER table.\n+     *\n+     * @param userId    Id of the user\n+     * @return the boolean decision\n+     * @throws UserSessionException if an error occurs when retrieving the mapping from the database\n+     */\n+    public boolean isExistingUser(String userId) throws UserSessionException {\n+\n+        Boolean isExisting = false;\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            try (PreparedStatement preparedStatement = connection\n+                    .prepareStatement(SQLQueries.SQL_SELECT_INFO_OF_USER_ID)) {\n+                preparedStatement.setString(1, userId);\n+                try (ResultSet resultSet = preparedStatement.executeQuery()) {\n+                    if (resultSet.next()) {\n+                        isExisting = true;\n+                    }\n+                }\n+            } catch (SQLException e1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836abe2097598ccafde5756f42570c3e4ac209cb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NzY1Mg==", "bodyText": "Changed", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384297652", "createdAt": "2020-02-26T06:36:34Z", "author": {"login": "pamodaaw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/store/UserSessionStore.java", "diffHunk": "@@ -729,4 +729,32 @@ public void removeFederatedAuthSessionInfo(String sessionContextKey) throws User\n                     \"the session index:\" + sessionContextKey, e);\n         }\n     }\n+\n+    /**\n+     * Method to check whether the user id is available in the IDN_AUTH_USER table.\n+     *\n+     * @param userId    Id of the user\n+     * @return the boolean decision\n+     * @throws UserSessionException if an error occurs when retrieving the mapping from the database\n+     */\n+    public boolean isExistingUser(String userId) throws UserSessionException {\n+\n+        Boolean isExisting = false;\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            try (PreparedStatement preparedStatement = connection\n+                    .prepareStatement(SQLQueries.SQL_SELECT_INFO_OF_USER_ID)) {\n+                preparedStatement.setString(1, userId);\n+                try (ResultSet resultSet = preparedStatement.executeQuery()) {\n+                    if (resultSet.next()) {\n+                        isExisting = true;\n+                    }\n+                }\n+            } catch (SQLException e1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NzI2NQ=="}, "originalCommit": {"oid": "836abe2097598ccafde5756f42570c3e4ac209cb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5ODE2OQ==", "bodyText": "Changed", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384298169", "createdAt": "2020-02-26T06:38:19Z", "author": {"login": "pamodaaw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/store/UserSessionStore.java", "diffHunk": "@@ -729,4 +729,32 @@ public void removeFederatedAuthSessionInfo(String sessionContextKey) throws User\n                     \"the session index:\" + sessionContextKey, e);\n         }\n     }\n+\n+    /**\n+     * Method to check whether the user id is available in the IDN_AUTH_USER table.\n+     *\n+     * @param userId    Id of the user\n+     * @return the boolean decision\n+     * @throws UserSessionException if an error occurs when retrieving the mapping from the database\n+     */\n+    public boolean isExistingUser(String userId) throws UserSessionException {\n+\n+        Boolean isExisting = false;\n+        try (Connection connection = IdentityDatabaseUtil.getDBConnection(false)) {\n+            try (PreparedStatement preparedStatement = connection\n+                    .prepareStatement(SQLQueries.SQL_SELECT_INFO_OF_USER_ID)) {\n+                preparedStatement.setString(1, userId);\n+                try (ResultSet resultSet = preparedStatement.executeQuery()) {\n+                    if (resultSet.next()) {\n+                        isExisting = true;\n+                    }\n+                }\n+            } catch (SQLException e1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NzI2NQ=="}, "originalCommit": {"oid": "836abe2097598ccafde5756f42570c3e4ac209cb"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDY1MTIwOnYy", "diffSide": "RIGHT", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMToxMzoyOVrOFunlPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTozNDoxN1rOFuoKsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNzMyNw==", "bodyText": "Let's send the caught except too", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384427327", "createdAt": "2020-02-26T11:13:29Z", "author": {"login": "janakamarasena"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantId    id of the tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(int tenantId, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantId, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+\n+                    // If the user id is not present in the userstore, we need to add it to the userstore. But if the\n+                    // userstore is read-only, we cannot add the id and empty user id will returned.\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {\n+                        userId = addUserId(username, userStoreManager);\n+                    }\n+                    return userId;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Provided user store manager for the user: \" + username + \", is not an instance of the \" +\n+                            \"AbstractUserStore manager\");\n+                }\n+                throw new UserSessionException(\"Unable to get the unique id of the user: \" + username + \".\");\n+            } catch (org.wso2.carbon.user.core.UserStoreException e) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error occurred while resolving Id for the user: \" + username, e);\n+                }\n+                throw new UserSessionException(\"Error occurred while resolving Id for the user: \" + username);\n+            }\n+        } catch (UserStoreException e) {\n+            throw new UserSessionException(\"Error occurred while retrieving the userstore manager to resolve Id for the user: \" + username);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c431fab50515bbda6c803ab6f1fb69305577b40f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzNjkxMw==", "bodyText": "updated", "url": "https://github.com/wso2/carbon-identity-framework/pull/2789#discussion_r384436913", "createdAt": "2020-02-26T11:34:17Z", "author": {"login": "pamodaaw"}, "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/FrameworkUtils.java", "diffHunk": "@@ -2414,5 +2421,81 @@ public static FederatedAssociationManager getFederatedAssociationManager() throw\n         }\n         return federatedAssociationManager;\n     }\n-}\n \n+    /**\n+     * Retrieves the unique user id of the given username. If the unique user id is not available, generate an id and\n+     * update the userid claim in read/write userstores.\n+     *\n+     * @param tenantId    id of the tenant domain of the user\n+     * @param userStoreDomain userstore of the user\n+     * @param username        username\n+     * @return unique user id of the user\n+     * @throws UserSessionException\n+     */\n+    public static String resolveUserIdFromUsername(int tenantId, String userStoreDomain, String username) throws\n+            UserSessionException {\n+\n+        try {\n+            UserStoreManager userStoreManager = getUserStoreManager(tenantId, userStoreDomain);\n+            try {\n+                if (userStoreManager instanceof AbstractUserStoreManager) {\n+                    String userId = ((AbstractUserStoreManager) userStoreManager).getUserIDFromUserName(username);\n+\n+                    // If the user id is not present in the userstore, we need to add it to the userstore. But if the\n+                    // userstore is read-only, we cannot add the id and empty user id will returned.\n+                    if (StringUtils.isBlank(userId) && !userStoreManager.isReadOnly()) {\n+                        userId = addUserId(username, userStoreManager);\n+                    }\n+                    return userId;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Provided user store manager for the user: \" + username + \", is not an instance of the \" +\n+                            \"AbstractUserStore manager\");\n+                }\n+                throw new UserSessionException(\"Unable to get the unique id of the user: \" + username + \".\");\n+            } catch (org.wso2.carbon.user.core.UserStoreException e) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error occurred while resolving Id for the user: \" + username, e);\n+                }\n+                throw new UserSessionException(\"Error occurred while resolving Id for the user: \" + username);\n+            }\n+        } catch (UserStoreException e) {\n+            throw new UserSessionException(\"Error occurred while retrieving the userstore manager to resolve Id for the user: \" + username);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNzMyNw=="}, "originalCommit": {"oid": "c431fab50515bbda6c803ab6f1fb69305577b40f"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2410, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}