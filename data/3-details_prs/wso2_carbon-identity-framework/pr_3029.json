{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2OTI3MDAz", "number": 3029, "title": "Implement DAO layer for CORS", "bodyText": "Proposed changes in this pull request\n$subject.\nCloses wso2/product-is#9065", "createdAt": "2020-07-27T06:18:27Z", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029", "merged": true, "mergeCommit": {"oid": "17cc051ebcd68264eba3457b1262d7e525ef1ed1"}, "closed": true, "closedAt": "2020-08-06T12:23:22Z", "author": {"login": "ivantha"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc47tvWABqjM1ODgyMTQ5OTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOevpNAFqTUwMDg2MTUwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44b185e0621f167ac718eda5e68b3bb4c037e7b8", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/44b185e0621f167ac718eda5e68b3bb4c037e7b8", "committedDate": "2020-07-27T06:16:45Z", "message": "Implement DAO layer for CORS\n\n- Add CORS fixes"}, "afterCommit": {"oid": "25273fe823923ef20647f0147a109ae74fd2a553", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/25273fe823923ef20647f0147a109ae74fd2a553", "committedDate": "2020-07-27T06:19:53Z", "message": "Implement DAO layer for CORS\n\n- Add CORS fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "25273fe823923ef20647f0147a109ae74fd2a553", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/25273fe823923ef20647f0147a109ae74fd2a553", "committedDate": "2020-07-27T06:19:53Z", "message": "Implement DAO layer for CORS\n\n- Add CORS fixes"}, "afterCommit": {"oid": "13b8775d610d6343b0d8412bd9eaf0a1d078d16e", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/13b8775d610d6343b0d8412bd9eaf0a1d078d16e", "committedDate": "2020-07-27T06:23:09Z", "message": "Implement DAO layer for CORS\n\n- Add CORS fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NTIzMjIz", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-455523223", "createdAt": "2020-07-27T07:12:47Z", "commit": {"oid": "13b8775d610d6343b0d8412bd9eaf0a1d078d16e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzoxMjo0OFrOG3WOUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzoxNToxN1rOG3WS7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4ODk3OQ==", "bodyText": "You can use the available util to resolve the tenantID. IdentityTenantUtil.getTenantId(tenantDomain)", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r460688979", "createdAt": "2020-07-27T07:12:48Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/impl/CORSOriginDAOImpl.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.wso2.carbon.identity.cors.mgt.core.dao.impl;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.SQLConstants;\n+import org.wso2.carbon.identity.cors.mgt.core.dao.CORSOriginDAO;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_ADD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_DELETE;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_ORIGIN_DELETE;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_RETRIEVE;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.util.ErrorUtils.handleServerException;\n+\n+/**\n+ * {@link CORSOriginDAO} implementation.\n+ */\n+public class CORSOriginDAOImpl implements CORSOriginDAO {\n+\n+    private static final Log log = LogFactory.getLog(CORSOriginDAOImpl.class);\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getPriority() {\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSOrigin> getCORSOriginsByTenantDomain(String tenantDomain)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.GET_CORS_ORIGINS_BY_TENANT_ID);\n+            preparedStatement.setString(1, tenantDomain);\n+            resultSet = preparedStatement.executeQuery();\n+\n+            List<CORSOrigin> corsOrigins = new ArrayList<>();\n+            while (resultSet.next()) {\n+                CORSOrigin corsOrigin = new CORSOrigin();\n+                corsOrigin.setId(resultSet.getString(\"ID\"));\n+                corsOrigin.setOrigin(resultSet.getString(\"ORIGIN\"));\n+                corsOrigins.add(corsOrigin);\n+            }\n+            return corsOrigins;\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, resultSet, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSOrigin> getCORSOriginsByApplicationId(String tenantDomain, String applicationId)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.GET_CORS_ORIGINS_BY_APPLICATION_ID);\n+            preparedStatement.setString(1, tenantDomain);\n+            preparedStatement.setString(2, applicationId);\n+            resultSet = preparedStatement.executeQuery();\n+\n+            List<CORSOrigin> corsOrigins = new ArrayList<>();\n+            while (resultSet.next()) {\n+                CORSOrigin corsOrigin = new CORSOrigin();\n+                corsOrigin.setId(resultSet.getString(\"ID\"));\n+                corsOrigin.setOrigin(resultSet.getString(\"ORIGIN\"));\n+                corsOrigins.add(corsOrigin);\n+            }\n+            return corsOrigins;\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, resultSet, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection retrieveConnection = IdentityDatabaseUtil.getDBConnection(false);\n+        Connection commitConnection = IdentityDatabaseUtil.getDBConnection(true);\n+        try {\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                preparedStatement = retrieveConnection.prepareStatement(SQLConstants.GET_TENANT_ID_BY_DOMAIN);\n+                preparedStatement.setString(1, tenantDomain);\n+                resultSet = preparedStatement.executeQuery();\n+\n+                String tenantId = null;\n+                while (resultSet.next()) {\n+                    tenantId = resultSet.getString(\"ID\");\n+                }\n+\n+                if (StringUtils.isBlank(tenantId)) {\n+                    throw handleServerException(ERROR_CODE_CORS_ADD, tenantDomain);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b8775d610d6343b0d8412bd9eaf0a1d078d16e"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4OTQ5OQ==", "bodyText": "Here also let's handle the rollback as well.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r460689499", "createdAt": "2020-07-27T07:13:59Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/impl/CORSOriginDAOImpl.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.wso2.carbon.identity.cors.mgt.core.dao.impl;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.SQLConstants;\n+import org.wso2.carbon.identity.cors.mgt.core.dao.CORSOriginDAO;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_ADD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_DELETE;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_ORIGIN_DELETE;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_RETRIEVE;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.util.ErrorUtils.handleServerException;\n+\n+/**\n+ * {@link CORSOriginDAO} implementation.\n+ */\n+public class CORSOriginDAOImpl implements CORSOriginDAO {\n+\n+    private static final Log log = LogFactory.getLog(CORSOriginDAOImpl.class);\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getPriority() {\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSOrigin> getCORSOriginsByTenantDomain(String tenantDomain)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.GET_CORS_ORIGINS_BY_TENANT_ID);\n+            preparedStatement.setString(1, tenantDomain);\n+            resultSet = preparedStatement.executeQuery();\n+\n+            List<CORSOrigin> corsOrigins = new ArrayList<>();\n+            while (resultSet.next()) {\n+                CORSOrigin corsOrigin = new CORSOrigin();\n+                corsOrigin.setId(resultSet.getString(\"ID\"));\n+                corsOrigin.setOrigin(resultSet.getString(\"ORIGIN\"));\n+                corsOrigins.add(corsOrigin);\n+            }\n+            return corsOrigins;\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, resultSet, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSOrigin> getCORSOriginsByApplicationId(String tenantDomain, String applicationId)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.GET_CORS_ORIGINS_BY_APPLICATION_ID);\n+            preparedStatement.setString(1, tenantDomain);\n+            preparedStatement.setString(2, applicationId);\n+            resultSet = preparedStatement.executeQuery();\n+\n+            List<CORSOrigin> corsOrigins = new ArrayList<>();\n+            while (resultSet.next()) {\n+                CORSOrigin corsOrigin = new CORSOrigin();\n+                corsOrigin.setId(resultSet.getString(\"ID\"));\n+                corsOrigin.setOrigin(resultSet.getString(\"ORIGIN\"));\n+                corsOrigins.add(corsOrigin);\n+            }\n+            return corsOrigins;\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, resultSet, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection retrieveConnection = IdentityDatabaseUtil.getDBConnection(false);\n+        Connection commitConnection = IdentityDatabaseUtil.getDBConnection(true);\n+        try {\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                preparedStatement = retrieveConnection.prepareStatement(SQLConstants.GET_TENANT_ID_BY_DOMAIN);\n+                preparedStatement.setString(1, tenantDomain);\n+                resultSet = preparedStatement.executeQuery();\n+\n+                String tenantId = null;\n+                while (resultSet.next()) {\n+                    tenantId = resultSet.getString(\"ID\");\n+                }\n+\n+                if (StringUtils.isBlank(tenantId)) {\n+                    throw handleServerException(ERROR_CODE_CORS_ADD, tenantDomain);\n+                }\n+\n+                preparedStatement = commitConnection.prepareStatement(SQLConstants.INSERT_CORS_ORIGIN);\n+                preparedStatement.setString(1, tenantId);\n+                preparedStatement.setString(2, corsOrigin.getOrigin());\n+                preparedStatement.executeUpdate();\n+            }\n+            IdentityDatabaseUtil.commitTransaction(commitConnection);\n+        } catch (SQLException e) {\n+            IdentityDatabaseUtil.rollbackTransaction(commitConnection);\n+            throw handleServerException(ERROR_CODE_CORS_ADD, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(retrieveConnection, null, preparedStatement);\n+            IdentityDatabaseUtil.closeConnection(commitConnection);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void updateCORSOriginById(String corsOriginId, CORSOrigin corsOrigin) {\n+\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteCORSOriginById(String corsOriginId) throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.DELETE_CORS_ORIGIN_BY_ID);\n+            preparedStatement.setString(1, corsOriginId);\n+            preparedStatement.executeUpdate();\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_ORIGIN_DELETE, e, corsOriginId);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, null, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteAllCORSOriginsByTenantDomain(String tenantDomain) throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b8775d610d6343b0d8412bd9eaf0a1d078d16e"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4OTU5Ng==", "bodyText": "Here also let's handle the rollback as well.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r460689596", "createdAt": "2020-07-27T07:14:11Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/impl/CORSOriginDAOImpl.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.wso2.carbon.identity.cors.mgt.core.dao.impl;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.SQLConstants;\n+import org.wso2.carbon.identity.cors.mgt.core.dao.CORSOriginDAO;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_ADD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_DELETE;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_ORIGIN_DELETE;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_RETRIEVE;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.util.ErrorUtils.handleServerException;\n+\n+/**\n+ * {@link CORSOriginDAO} implementation.\n+ */\n+public class CORSOriginDAOImpl implements CORSOriginDAO {\n+\n+    private static final Log log = LogFactory.getLog(CORSOriginDAOImpl.class);\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getPriority() {\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSOrigin> getCORSOriginsByTenantDomain(String tenantDomain)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.GET_CORS_ORIGINS_BY_TENANT_ID);\n+            preparedStatement.setString(1, tenantDomain);\n+            resultSet = preparedStatement.executeQuery();\n+\n+            List<CORSOrigin> corsOrigins = new ArrayList<>();\n+            while (resultSet.next()) {\n+                CORSOrigin corsOrigin = new CORSOrigin();\n+                corsOrigin.setId(resultSet.getString(\"ID\"));\n+                corsOrigin.setOrigin(resultSet.getString(\"ORIGIN\"));\n+                corsOrigins.add(corsOrigin);\n+            }\n+            return corsOrigins;\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, resultSet, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSOrigin> getCORSOriginsByApplicationId(String tenantDomain, String applicationId)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.GET_CORS_ORIGINS_BY_APPLICATION_ID);\n+            preparedStatement.setString(1, tenantDomain);\n+            preparedStatement.setString(2, applicationId);\n+            resultSet = preparedStatement.executeQuery();\n+\n+            List<CORSOrigin> corsOrigins = new ArrayList<>();\n+            while (resultSet.next()) {\n+                CORSOrigin corsOrigin = new CORSOrigin();\n+                corsOrigin.setId(resultSet.getString(\"ID\"));\n+                corsOrigin.setOrigin(resultSet.getString(\"ORIGIN\"));\n+                corsOrigins.add(corsOrigin);\n+            }\n+            return corsOrigins;\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, resultSet, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection retrieveConnection = IdentityDatabaseUtil.getDBConnection(false);\n+        Connection commitConnection = IdentityDatabaseUtil.getDBConnection(true);\n+        try {\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                preparedStatement = retrieveConnection.prepareStatement(SQLConstants.GET_TENANT_ID_BY_DOMAIN);\n+                preparedStatement.setString(1, tenantDomain);\n+                resultSet = preparedStatement.executeQuery();\n+\n+                String tenantId = null;\n+                while (resultSet.next()) {\n+                    tenantId = resultSet.getString(\"ID\");\n+                }\n+\n+                if (StringUtils.isBlank(tenantId)) {\n+                    throw handleServerException(ERROR_CODE_CORS_ADD, tenantDomain);\n+                }\n+\n+                preparedStatement = commitConnection.prepareStatement(SQLConstants.INSERT_CORS_ORIGIN);\n+                preparedStatement.setString(1, tenantId);\n+                preparedStatement.setString(2, corsOrigin.getOrigin());\n+                preparedStatement.executeUpdate();\n+            }\n+            IdentityDatabaseUtil.commitTransaction(commitConnection);\n+        } catch (SQLException e) {\n+            IdentityDatabaseUtil.rollbackTransaction(commitConnection);\n+            throw handleServerException(ERROR_CODE_CORS_ADD, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(retrieveConnection, null, preparedStatement);\n+            IdentityDatabaseUtil.closeConnection(commitConnection);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void updateCORSOriginById(String corsOriginId, CORSOrigin corsOrigin) {\n+\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteCORSOriginById(String corsOriginId) throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.DELETE_CORS_ORIGIN_BY_ID);\n+            preparedStatement.setString(1, corsOriginId);\n+            preparedStatement.executeUpdate();\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_ORIGIN_DELETE, e, corsOriginId);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, null, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteAllCORSOriginsByTenantDomain(String tenantDomain) throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.DELETE_CORS_ORIGINS_BY_TENANT_ID);\n+            preparedStatement.setString(1, tenantDomain);\n+            preparedStatement.executeUpdate();\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_DELETE, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, null, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteAllCORSOriginsByApplicationId(String tenantDomain, String applicationId)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b8775d610d6343b0d8412bd9eaf0a1d078d16e"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY5MDE1OQ==", "bodyText": "Why we have commented the code in this class?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r460690159", "createdAt": "2020-07-27T07:15:17Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/CORSOrigin.java", "diffHunk": "@@ -37,16 +34,16 @@\n     private String origin;\n \n     /**\n-     * App IDs associated with the {@code origin}.\n+     * Applications associated with the {@code origin}.\n      */\n-    private Set<String> appIds;\n+//    private List<CORSApplication> associatedApplications;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b8775d610d6343b0d8412bd9eaf0a1d078d16e"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13b8775d610d6343b0d8412bd9eaf0a1d078d16e", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/13b8775d610d6343b0d8412bd9eaf0a1d078d16e", "committedDate": "2020-07-27T06:23:09Z", "message": "Implement DAO layer for CORS\n\n- Add CORS fixes"}, "afterCommit": {"oid": "97aee14ae1d77a09725f1ab122c4522c2e5c758d", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/97aee14ae1d77a09725f1ab122c4522c2e5c758d", "committedDate": "2020-07-27T17:51:22Z", "message": "Implement DAO layer for CORS"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97aee14ae1d77a09725f1ab122c4522c2e5c758d", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/97aee14ae1d77a09725f1ab122c4522c2e5c758d", "committedDate": "2020-07-27T17:51:22Z", "message": "Implement DAO layer for CORS"}, "afterCommit": {"oid": "d99e30722f371f81601d80cfae4e97aebd0e0dbd", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/d99e30722f371f81601d80cfae4e97aebd0e0dbd", "committedDate": "2020-07-28T00:03:04Z", "message": "Implement DAO layer for CORS"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2Mjc4ODc1", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-456278875", "createdAt": "2020-07-28T03:34:46Z", "commit": {"oid": "d99e30722f371f81601d80cfae4e97aebd0e0dbd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d99e30722f371f81601d80cfae4e97aebd0e0dbd", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/d99e30722f371f81601d80cfae4e97aebd0e0dbd", "committedDate": "2020-07-28T00:03:04Z", "message": "Implement DAO layer for CORS"}, "afterCommit": {"oid": "533e4a9c638bc7876c66ea19a266ead37029ed23", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/533e4a9c638bc7876c66ea19a266ead37029ed23", "committedDate": "2020-07-28T19:33:40Z", "message": "Implement DAO layer for CORS"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTYwMTY2", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-457160166", "createdAt": "2020-07-29T02:55:20Z", "commit": {"oid": "533e4a9c638bc7876c66ea19a266ead37029ed23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1NToyMFrOG4mtsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1NToyMFrOG4mtsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzczMQ==", "bodyText": "Add the license.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r462007731", "createdAt": "2020-07-29T02:55:20Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/impl/CORSOriginDAOImpl.java", "diffHunk": "@@ -0,0 +1,488 @@\n+package org.wso2.carbon.identity.cors.mgt.core.dao.impl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "533e4a9c638bc7876c66ea19a266ead37029ed23"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTYwNzk3", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-457160797", "createdAt": "2020-07-29T02:57:31Z", "commit": {"oid": "533e4a9c638bc7876c66ea19a266ead37029ed23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1NzozMVrOG4mv_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1NzozMVrOG4mv_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwODMxNw==", "bodyText": "Why this part is commented? Do we need this?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r462008317", "createdAt": "2020-07-29T02:57:31Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/helper/CORSManagementServiceTestHelper.java", "diffHunk": "@@ -18,41 +18,32 @@\n \n package org.wso2.carbon.identity.cors.mgt.core.helper;\n \n-import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n-import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import static org.wso2.carbon.identity.cors.mgt.core.constant.TestConstants.APP_ID_1;\n-import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.TENANT_ASSOCIATION;\n-\n /**\n  * Helper class for CORSServiceTest.\n  */\n public class CORSManagementServiceTestHelper {\n \n-    public static ResourceAdd getSampleTenantResourceAdd(String origin) {\n-\n-        List<Attribute> attributeList = new ArrayList<>();\n-        Attribute attribute = new Attribute(TENANT_ASSOCIATION, \"\");\n-        attributeList.add(attribute);\n-\n-        ResourceAdd resourceAdd = new ResourceAdd();\n-        resourceAdd.setName(origin);\n-        resourceAdd.setAttributes(attributeList);\n-        return resourceAdd;\n-    }\n-\n-    public static ResourceAdd getSampleApplicationResourceAdd(String origin) {\n-\n-        List<Attribute> attributeList = new ArrayList<>();\n-        Attribute attribute = new Attribute(APP_ID_1, \"\");\n-        attributeList.add(attribute);\n-\n-        ResourceAdd resourceAdd = new ResourceAdd();\n-        resourceAdd.setName(origin);\n-        resourceAdd.setAttributes(attributeList);\n-        return resourceAdd;\n-    }\n+//    public static ResourceAdd getSampleTenantResourceAdd(String origin) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "533e4a9c638bc7876c66ea19a266ead37029ed23"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTYxMjMy", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-457161232", "createdAt": "2020-07-29T02:58:51Z", "commit": {"oid": "533e4a9c638bc7876c66ea19a266ead37029ed23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1ODo1MVrOG4mxcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1ODo1MVrOG4mxcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwODY5MA==", "bodyText": "Can we remove the commented part?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r462008690", "createdAt": "2020-07-29T02:58:51Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/resources/dbscripts/config/h2.sql", "diffHunk": "@@ -1,60 +1,112 @@\n--- -----------------------------------------------------\n--- Table IDN_CONFIG_TYPE\n--- -----------------------------------------------------\n CREATE TABLE IF NOT EXISTS IDN_CONFIG_TYPE (\n-  ID          VARCHAR(255)  NOT NULL,\n-  NAME        VARCHAR(255)  NOT NULL,\n-  DESCRIPTION VARCHAR(1023) NULL,\n-  PRIMARY KEY (ID),\n-  CONSTRAINT TYPE_NAME_CONSTRAINT UNIQUE (NAME)\n+      ID          VARCHAR(255)  NOT NULL,\n+      NAME        VARCHAR(255)  NOT NULL,\n+      DESCRIPTION VARCHAR(1023) NULL,\n+\n+      PRIMARY KEY (ID),\n+      CONSTRAINT TYPE_NAME_CONSTRAINT UNIQUE (NAME)\n );\n \n INSERT INTO IDN_CONFIG_TYPE (ID, NAME, DESCRIPTION) VALUES\n-('up2hxlkj-654n-1ujd-5wnf-uvhs3ppwf9j8', 'CORS_ORIGIN', 'A resource type to keep the tenant CORS Origins'),\n ('8ec6dbf1-218a-49bf-bc34-0d2db52d151c', 'CORS_CONFIGURATION', 'A resource type to keep the tenant CORS configurations');\n \n--- -----------------------------------------------------\n--- Table IDN_CONFIG_RESOURCE\n--- -----------------------------------------------------\n CREATE TABLE IF NOT EXISTS IDN_CONFIG_RESOURCE (\n-  ID            VARCHAR(255) NOT NULL,\n-  TENANT_ID     INT          NOT NULL,\n-  NAME          VARCHAR(255) NOT NULL,\n-  CREATED_TIME  TIMESTAMP    NOT NULL,\n-  LAST_MODIFIED TIMESTAMP    NOT NULL,\n-  HAS_FILE      BOOLEAN(1)   NOT NULL,\n-  HAS_ATTRIBUTE BOOLEAN(1)   NOT NULL,\n-  TYPE_ID       VARCHAR(255) NOT NULL,\n-  UNIQUE (NAME, TENANT_ID, TYPE_ID),\n-  PRIMARY KEY (ID)\n+    ID            VARCHAR(255) NOT NULL,\n+    TENANT_ID     INT          NOT NULL,\n+    NAME          VARCHAR(255) NOT NULL,\n+    CREATED_TIME  TIMESTAMP    NOT NULL,\n+    LAST_MODIFIED TIMESTAMP    NOT NULL,\n+    HAS_FILE      BOOLEAN(1)   NOT NULL,\n+    HAS_ATTRIBUTE BOOLEAN(1)   NOT NULL,\n+    TYPE_ID       VARCHAR(255) NOT NULL,\n+\n+    UNIQUE (NAME, TENANT_ID, TYPE_ID),\n+    PRIMARY KEY (ID)\n );\n \n ALTER TABLE IDN_CONFIG_RESOURCE\n-  ADD CONSTRAINT TYPE_ID_FOREIGN_CONSTRAINT FOREIGN KEY (TYPE_ID) REFERENCES IDN_CONFIG_TYPE (ID) ON DELETE CASCADE ON UPDATE CASCADE;\n+    ADD CONSTRAINT TYPE_ID_FOREIGN_CONSTRAINT FOREIGN KEY (TYPE_ID) REFERENCES IDN_CONFIG_TYPE (ID) ON DELETE CASCADE ON UPDATE CASCADE;\n \n--- -----------------------------------------------------\n--- Table IDN_CONFIG_ATTRIBUTE\n--- -----------------------------------------------------\n CREATE TABLE IF NOT EXISTS IDN_CONFIG_ATTRIBUTE (\n-  ID         VARCHAR(255)  NOT NULL,\n-  RESOURCE_ID  VARCHAR(255)  NOT NULL,\n-  ATTR_KEY   VARCHAR(1023) NOT NULL,\n-  ATTR_VALUE VARCHAR(1023) NULL,\n-  PRIMARY KEY (ID),\n-  UNIQUE (RESOURCE_ID, ATTR_KEY, ATTR_VALUE)\n+    ID            VARCHAR(255)  NOT NULL,\n+    RESOURCE_ID   VARCHAR(255)  NOT NULL,\n+    ATTR_KEY      VARCHAR(1023) NOT NULL,\n+    ATTR_VALUE    VARCHAR(1023) NULL,\n+\n+    PRIMARY KEY (ID),\n+    UNIQUE (RESOURCE_ID, ATTR_KEY, ATTR_VALUE)\n );\n ALTER TABLE IDN_CONFIG_ATTRIBUTE\n-  ADD CONSTRAINT RESOURCE_ID_ATTRIBUTE_FOREIGN_CONSTRAINT FOREIGN KEY (RESOURCE_ID) REFERENCES IDN_CONFIG_RESOURCE (ID) ON DELETE CASCADE ON UPDATE CASCADE;\n+    ADD CONSTRAINT RESOURCE_ID_ATTRIBUTE_FOREIGN_CONSTRAINT FOREIGN KEY (RESOURCE_ID) REFERENCES IDN_CONFIG_RESOURCE (ID) ON DELETE CASCADE ON UPDATE CASCADE;\n \n--- -----------------------------------------------------\n--- Table IDN_CONFIG_FILE\n--- -----------------------------------------------------\n CREATE TABLE IF NOT EXISTS IDN_CONFIG_FILE (\n-  ID        VARCHAR(255) NOT NULL,\n-  VALUE     BLOB         NULL,\n-  NAME        VARCHAR (255) NULL,\n-  RESOURCE_ID VARCHAR(255) NOT NULL,\n-  PRIMARY KEY (ID)\n+    ID        VARCHAR(255)    NOT NULL,\n+    VALUE     BLOB            NULL,\n+    NAME        VARCHAR (255) NULL,\n+    RESOURCE_ID VARCHAR(255)  NOT NULL,\n+\n+    PRIMARY KEY (ID)\n );\n ALTER TABLE IDN_CONFIG_FILE\n-  ADD CONSTRAINT RESOURCE_ID_FILE_FOREIGN_CONSTRAINT FOREIGN KEY (RESOURCE_ID) REFERENCES IDN_CONFIG_RESOURCE (ID) ON DELETE CASCADE ON UPDATE CASCADE;\n+    ADD CONSTRAINT RESOURCE_ID_FILE_FOREIGN_CONSTRAINT FOREIGN KEY (RESOURCE_ID) REFERENCES IDN_CONFIG_RESOURCE (ID) ON DELETE CASCADE ON UPDATE CASCADE;\n+\n+CREATE TABLE IF NOT EXISTS SP_APP (\n+    ID INTEGER NOT NULL AUTO_INCREMENT,\n+    TENANT_ID INTEGER NOT NULL,\n+    APP_NAME VARCHAR (255) NOT NULL ,\n+    USER_STORE VARCHAR (255) NOT NULL,\n+    USERNAME VARCHAR (255) NOT NULL ,\n+    DESCRIPTION VARCHAR (1024),\n+    ROLE_CLAIM VARCHAR (512),\n+    AUTH_TYPE VARCHAR (255) NOT NULL,\n+    PROVISIONING_USERSTORE_DOMAIN VARCHAR (512),\n+    IS_LOCAL_CLAIM_DIALECT CHAR(1) DEFAULT '1',\n+    IS_SEND_LOCAL_SUBJECT_ID CHAR(1) DEFAULT '0',\n+    IS_SEND_AUTH_LIST_OF_IDPS CHAR(1) DEFAULT '0',\n+    IS_USE_TENANT_DOMAIN_SUBJECT CHAR(1) DEFAULT '1',\n+    IS_USE_USER_DOMAIN_SUBJECT CHAR(1) DEFAULT '1',\n+    ENABLE_AUTHORIZATION CHAR(1) DEFAULT '0',\n+    SUBJECT_CLAIM_URI VARCHAR (512),\n+    IS_SAAS_APP CHAR(1) DEFAULT '0',\n+    IS_DUMB_MODE CHAR(1) DEFAULT '0',\n+    UUID CHAR(36),\n+    IMAGE_URL VARCHAR(1024),\n+    ACCESS_URL VARCHAR(1024),\n+    IS_DISCOVERABLE CHAR(1) DEFAULT '0',\n+\n+    PRIMARY KEY (ID));\n+\n+CREATE TABLE IF NOT EXISTS IDN_CORS_ORIGIN (\n+    ID                INT           NOT NULL AUTO_INCREMENT,\n+    TENANT_ID         INT           NOT NULL,\n+    ORIGIN            VARCHAR(2048) NOT NULL,\n+    IS_TENANT_LEVEL   CHAR(1)       NOT NULL DEFAULT '0',\n+\n+    PRIMARY KEY (ID),\n+    UNIQUE (TENANT_ID, ORIGIN)\n+);\n+\n+CREATE TABLE IF NOT EXISTS IDN_CORS_ASSOCIATION (\n+    IDN_CORS_ORIGIN_ID  INT NOT NULL,\n+    SP_APP_ID           INT NOT NULL,\n+\n+    PRIMARY KEY (IDN_CORS_ORIGIN_ID, SP_APP_ID)\n+);\n+\n+ALTER TABLE IDN_CORS_ASSOCIATION\n+    ADD CONSTRAINT ID_IDN_CORS_ORIGIN_ID_FOREIGN_CONSTRAINT\n+        FOREIGN KEY (IDN_CORS_ORIGIN_ID)\n+        REFERENCES IDN_CORS_ORIGIN (ID)\n+        ON DELETE CASCADE\n+        ON UPDATE RESTRICT;\n+\n+--ALTER TABLE IDN_CORS_ASSOCIATION\n+--    ADD CONSTRAINT SP_APP_ID_ID_FOREIGN_CONSTRAINT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "533e4a9c638bc7876c66ea19a266ead37029ed23"}, "originalPosition": 146}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "533e4a9c638bc7876c66ea19a266ead37029ed23", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/533e4a9c638bc7876c66ea19a266ead37029ed23", "committedDate": "2020-07-28T19:33:40Z", "message": "Implement DAO layer for CORS"}, "afterCommit": {"oid": "6314b288203f9866f062e7048ec0d769313801b1", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/6314b288203f9866f062e7048ec0d769313801b1", "committedDate": "2020-07-29T05:59:04Z", "message": "Implement DAO layer for CORS"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6314b288203f9866f062e7048ec0d769313801b1", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/6314b288203f9866f062e7048ec0d769313801b1", "committedDate": "2020-07-29T05:59:04Z", "message": "Implement DAO layer for CORS"}, "afterCommit": {"oid": "2ef827e848992c29726bad12c0906d72cf054286", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/2ef827e848992c29726bad12c0906d72cf054286", "committedDate": "2020-08-04T02:42:31Z", "message": "Implement DAO layer for CORS"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ef827e848992c29726bad12c0906d72cf054286", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/2ef827e848992c29726bad12c0906d72cf054286", "committedDate": "2020-08-04T02:42:31Z", "message": "Implement DAO layer for CORS"}, "afterCommit": {"oid": "9536a9d5f340bca7472217258c205c73410e1905", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/9536a9d5f340bca7472217258c205c73410e1905", "committedDate": "2020-08-04T06:22:28Z", "message": "Implement DAO layer for CORS"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9536a9d5f340bca7472217258c205c73410e1905", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/9536a9d5f340bca7472217258c205c73410e1905", "committedDate": "2020-08-04T06:22:28Z", "message": "Implement DAO layer for CORS"}, "afterCommit": {"oid": "a5c0de9b51cd0bf70e0b0efd353de0aff9990cc5", "author": {"user": {"login": "wso2-jenkins-bot", "name": null}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/a5c0de9b51cd0bf70e0b0efd353de0aff9990cc5", "committedDate": "2020-08-04T12:37:37Z", "message": "Implement DAO layer for CORS"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNzc5MjI2", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-460779226", "createdAt": "2020-08-04T12:48:50Z", "commit": {"oid": "a5c0de9b51cd0bf70e0b0efd353de0aff9990cc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo0ODo1MFrOG7e2PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo0ODo1MFrOG7e2PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNDU3Mw==", "bodyText": "Any reason for version changes in the pom files?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r465024573", "createdAt": "2020-08-04T12:48:50Z", "author": {"login": "ashensw"}, "path": "components/application-mgt/org.wso2.carbon.identity.application.common/pom.xml", "diffHunk": "@@ -18,7 +18,7 @@\n     <parent>\n         <groupId>org.wso2.carbon.identity.framework</groupId>\n         <artifactId>application-mgt</artifactId>\n-        <version>5.18.31</version>\n+        <version>5.18.32-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5c0de9b51cd0bf70e0b0efd353de0aff9990cc5"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5c0de9b51cd0bf70e0b0efd353de0aff9990cc5", "author": {"user": {"login": "wso2-jenkins-bot", "name": null}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/a5c0de9b51cd0bf70e0b0efd353de0aff9990cc5", "committedDate": "2020-08-04T12:37:37Z", "message": "Implement DAO layer for CORS"}, "afterCommit": {"oid": "78236f30529573f79c9d1147bb8811254869bab4", "author": {"user": {"login": "wso2-jenkins-bot", "name": null}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/78236f30529573f79c9d1147bb8811254869bab4", "committedDate": "2020-08-04T13:00:34Z", "message": "Implement DAO layer for CORS"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78236f30529573f79c9d1147bb8811254869bab4", "author": {"user": {"login": "wso2-jenkins-bot", "name": null}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/78236f30529573f79c9d1147bb8811254869bab4", "committedDate": "2020-08-04T13:00:34Z", "message": "Implement DAO layer for CORS"}, "afterCommit": {"oid": "a8e3d5c44d9a7b5b8cbf67d40b2076a2f88f7d0a", "author": {"user": {"login": "wso2-jenkins-bot", "name": null}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/a8e3d5c44d9a7b5b8cbf67d40b2076a2f88f7d0a", "committedDate": "2020-08-04T14:34:35Z", "message": "Implement DAO layer for CORS"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8e3d5c44d9a7b5b8cbf67d40b2076a2f88f7d0a", "author": {"user": {"login": "wso2-jenkins-bot", "name": null}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/a8e3d5c44d9a7b5b8cbf67d40b2076a2f88f7d0a", "committedDate": "2020-08-04T14:34:35Z", "message": "Implement DAO layer for CORS"}, "afterCommit": {"oid": "cedf146f62c5dd1e655421b19714cc429eb59d5d", "author": {"user": {"login": "wso2-jenkins-bot", "name": null}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/cedf146f62c5dd1e655421b19714cc429eb59d5d", "committedDate": "2020-08-05T06:08:54Z", "message": "Implement DAO layer for CORS"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cedf146f62c5dd1e655421b19714cc429eb59d5d", "author": {"user": {"login": "wso2-jenkins-bot", "name": null}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/cedf146f62c5dd1e655421b19714cc429eb59d5d", "committedDate": "2020-08-05T06:08:54Z", "message": "Implement DAO layer for CORS"}, "afterCommit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "committedDate": "2020-08-05T13:54:22Z", "message": "Remove DAO queue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTYwNTU4", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-462160558", "createdAt": "2020-08-06T03:23:06Z", "commit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoyMzowNlrOG8h2dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoyMzowNlrOG8h2dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMjM1Ng==", "bodyText": "Shall we add a debug log for here as well?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466122356", "createdAt": "2020-08-06T03:23:06Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/CORSManagementServiceHolder.java", "diffHunk": "@@ -38,24 +46,52 @@ public static CORSManagementServiceHolder getInstance() {\n         return SingletonHelper.INSTANCE;\n     }\n \n-    public ConfigurationManager getConfigurationManager() {\n+    public CORSOriginDAO getCorsOriginDAO() {\n \n-        return configurationManager;\n+        return corsOriginDAO;\n     }\n \n-    public void setConfigurationManager(ConfigurationManager configurationManager) {\n+    public void setCorsOriginDAO(CORSOriginDAO corsOriginDAO) {\n+\n+        if (corsOriginDAO == null) {\n+            this.corsOriginDAO = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTYwNzIy", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-462160722", "createdAt": "2020-08-06T03:23:38Z", "commit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoyMzozOFrOG8h27w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoyMzozOFrOG8h27w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMjQ3OQ==", "bodyText": "Shall we add a debug log for here as well?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466122479", "createdAt": "2020-08-06T03:23:38Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/CORSManagementServiceHolder.java", "diffHunk": "@@ -38,24 +46,52 @@ public static CORSManagementServiceHolder getInstance() {\n         return SingletonHelper.INSTANCE;\n     }\n \n-    public ConfigurationManager getConfigurationManager() {\n+    public CORSOriginDAO getCorsOriginDAO() {\n \n-        return configurationManager;\n+        return corsOriginDAO;\n     }\n \n-    public void setConfigurationManager(ConfigurationManager configurationManager) {\n+    public void setCorsOriginDAO(CORSOriginDAO corsOriginDAO) {\n+\n+        if (corsOriginDAO == null) {\n+            this.corsOriginDAO = null;\n+        } else if (corsOriginDAO.getPriority() > this.corsOriginDAO.getPriority()) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(String.format(\"Replacing the CORSOriginDAO of priority %s \" +\n+                                \"with a CORSOriginDAO of priority %s.\",\n+                        this.corsOriginDAO.getPriority(), corsOriginDAO.getPriority()));\n+            }\n+            this.corsOriginDAO = corsOriginDAO;\n+        }\n+    }\n \n-        this.configurationManager = configurationManager;\n+    public CORSConfigurationDAO getCorsConfigurationDAO() {\n+\n+        return corsConfigurationDAO;\n     }\n \n-    public CORSManagementService getCorsManagementService() {\n+    public void setCorsConfigurationDAO(CORSConfigurationDAO corsConfigurationDAO) {\n+\n+        if (corsConfigurationDAO == null) {\n+            this.corsConfigurationDAO = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTYxNjI0", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-462161624", "createdAt": "2020-08-06T03:26:41Z", "commit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoyNjo0MVrOG8h6DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoyNjo0MVrOG8h6DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMzI3Ng==", "bodyText": "What's the usage of this?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466123276", "createdAt": "2020-08-06T03:26:41Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -75,396 +55,238 @@\n \n     private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n     public List<CORSOrigin> getTenantCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        return getCORSOrigins(tenantDomain).stream().filter(corsOrigin -> corsOrigin.getAppIds()\n-                .contains(TENANT_ASSOCIATION)).collect(Collectors.toList());\n-    }\n-\n-    @Override\n-    public List<CORSOrigin> getApplicationCORSOrigins(String tenantDomain, String appId)\n-            throws CORSManagementServiceException {\n-\n-        validateTenantDomain(tenantDomain);\n-        return getCORSOrigins(tenantDomain).stream().filter(corsOrigin -> corsOrigin.getAppIds()\n-                .contains(appId)).collect(Collectors.toList());\n-    }\n-\n-    @Override\n-    public void setTenantCORSOrigins(String tenantDomain, List<String> origins) throws CORSManagementServiceException {\n+        int tenantId = getTenantId(tenantDomain);\n \n-        validateTenantDomain(tenantDomain);\n-        setCORSOrigins(tenantDomain, TENANT_ASSOCIATION, origins);\n+        return Collections.unmodifiableList(getCORSOriginDAO().getCORSOriginsByTenantId(tenantId));\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n-    public void setApplicationCORSOrigins(String tenantDomain, String appId, List<String> origins)\n+    public List<CORSOrigin> getApplicationCORSOrigins(String applicationId, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        validateApplicationId(tenantDomain, appId);\n-        setCORSOrigins(tenantDomain, appId, origins);\n-    }\n-\n-    @Override\n-    public void addTenantCORSOrigins(String tenantDomain, List<String> origins) throws CORSManagementServiceException {\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n \n-        validateTenantDomain(tenantDomain);\n-        addCORSOrigins(tenantDomain, TENANT_ASSOCIATION, origins);\n+        return Collections.unmodifiableList(getCORSOriginDAO().getCORSOriginsByApplicationId(\n+                applicationBasicInfo.getApplicationId(), tenantId));\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n-    public void addApplicationCORSOrigins(String tenantDomain, String appId, List<String> origins)\n+    public void setCORSOrigins(String applicationId, List<String> origins, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        validateApplicationId(tenantDomain, appId);\n-        addCORSOrigins(tenantDomain, appId, origins);\n-    }\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n \n-    @Override\n-    public void deleteTenantCORSOrigins(String tenantDomain, List<String> originIds)\n-            throws CORSManagementServiceException {\n+        // Convert Origins to ValidatedOrigins.\n+        List<ValidatedOrigin> validatedOrigins = originsToValidatedOrigins(origins);\n \n-        validateTenantDomain(tenantDomain);\n-        deleteCORSOrigins(tenantDomain, TENANT_ASSOCIATION, originIds);\n+        // Set the CORS origins.\n+        getCORSOriginDAO().setCORSOrigins(applicationBasicInfo.getApplicationId(),\n+                validatedOrigins.stream().map(validatedOrigin -> {\n+                    // Create the CORS origin.\n+                    CORSOrigin corsOrigin = new CORSOrigin();\n+                    corsOrigin.setOrigin(validatedOrigin.getValue());\n+                    return corsOrigin;\n+                }).collect(Collectors.toList()), tenantId);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n-    public void deleteApplicationCORSOrigins(String tenantDomain, String appId, List<String> originIds)\n+    public void addCORSOrigins(String applicationId, List<String> origins, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        validateApplicationId(tenantDomain, appId);\n-        deleteCORSOrigins(tenantDomain, appId, originIds);\n-    }\n-\n-    @Override\n-    public CORSConfiguration getCORSConfiguration(String tenantDomain) throws CORSManagementServiceException {\n-\n-        validateTenantDomain(tenantDomain);\n-\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            Resource resource = getResource(CORS_CONFIGURATION_RESOURCE_TYPE_NAME, CORS_CONFIGURATION_RESOURCE_NAME);\n-            CORSConfiguration corsConfiguration;\n-            if (resource == null) {\n-                corsConfiguration = CORSConfigurationUtils.getServerCORSConfiguration();\n-            } else {\n-                corsConfiguration = new ResourceToCORSConfiguration().apply(resource);\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n+\n+        // Convert Origins to ValidatedOrigins.\n+        List<ValidatedOrigin> validatedOrigins = originsToValidatedOrigins(origins);\n+\n+        // Check if the CORS origins are already present.\n+        List<CORSOrigin> existingCORSOrigins = getCORSOriginDAO().getCORSOriginsByApplicationId(\n+                applicationBasicInfo.getApplicationId(), tenantId);\n+        for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n+            if (existingCORSOrigins.stream().map(CORSOrigin::getId).collect(Collectors.toList())\n+                    .contains(validatedOrigin.getValue())) {\n+                // CORS origin is already registered for the application.\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(), tenantDomain, validatedOrigin));\n+                }\n+                throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, validatedOrigin.getValue());\n             }\n-            return corsConfiguration;\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_CONFIG_RETRIEVE, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n         }\n-    }\n \n-    @Override\n-    public void setCORSConfiguration(String tenantDomain, CORSConfiguration corsConfiguration)\n-            throws CORSManagementServiceException {\n-\n-        validateTenantDomain(tenantDomain);\n-\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            ResourceAdd resourceAdd = new CORSConfigurationToResourceAdd().apply(corsConfiguration);\n-            getConfigurationManager().replaceResource(CORS_CONFIGURATION_RESOURCE_TYPE_NAME, resourceAdd);\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_CONFIG_SET, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n-    }\n-\n-    private List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n-\n-        List<CORSOrigin> corsOrigins;\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            Resources resources = getResources(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n-            corsOrigins = resources.getResources().stream().map(new ResourceToCORSOrigin())\n-                    .collect(Collectors.toList());\n-            return Collections.unmodifiableList(corsOrigins);\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n+        // Add the CORS origins.\n+        getCORSOriginDAO().addCORSOrigins(applicationBasicInfo.getApplicationId(),\n+                validatedOrigins.stream().map(validatedOrigin -> {\n+                    // Create the CORS origin.\n+                    CORSOrigin corsOrigin = new CORSOrigin();\n+                    corsOrigin.setOrigin(validatedOrigin.getValue());\n+                    return corsOrigin;\n+                }).collect(Collectors.toList()), tenantId\n+        );\n     }\n \n-    private void setCORSOrigins(String tenantDomain, String appId, List<String> origins)\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteCORSOrigins(String applicationId, List<String> originIds, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            // Convert Origins to ValidatedOrigins.\n-            List<ValidatedOrigin> validatedOrigins = new ArrayList<>();\n-            for (String origin : origins) {\n-                validatedOrigins.add(new ValidatedOrigin(origin));\n-            }\n-\n-            // Delete all CORS origins from the tenant.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                Resource resource = getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, validatedOrigin.getValue());\n-                if (resource != null) {\n-                    CORSOrigin corsOrigin = new ResourceToCORSOrigin().apply(resource);\n-                    getConfigurationManager().deleteResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, corsOrigin.getOrigin());\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n+\n+        // Check if the CORS origins are not in the system.\n+        List<CORSOrigin> existingCORSOrigins = getCORSOriginDAO().getCORSOriginsByApplicationId(\n+                applicationBasicInfo.getApplicationId(), tenantId);\n+        for (String originId : originIds) {\n+            if (!existingCORSOrigins.stream().map(CORSOrigin::getId).collect(Collectors.toList()).contains(originId)) {\n+                // CORS origin is not registered for the application.\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(), tenantDomain, originId));\n                 }\n+                throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, originId);\n             }\n-\n-            // Save ValidatedOrigins in the Configuration Management store.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                CORSOrigin corsOrigin = new CORSOrigin();\n-                corsOrigin.setOrigin(validatedOrigin.getValue());\n-                corsOrigin.setAppIds(Collections.singleton(appId));\n-                ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigin);\n-                getConfigurationManager().addResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n-            }\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_SET, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n         }\n-    }\n-\n-    private void addCORSOrigins(String tenantDomain, String appId, List<String> origins)\n-            throws CORSManagementServiceException {\n-\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n \n-            // Convert Origins to ValidatedOrigins.\n-            List<ValidatedOrigin> validatedOrigins = new ArrayList<>();\n-            for (String origin : origins) {\n-                validatedOrigins.add(new ValidatedOrigin(origin));\n-            }\n-\n-            // Check if the CORS origin is already registered.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                Resource resource = getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, validatedOrigin.getValue());\n-                if (resource != null) {\n-                    CORSOrigin corsOrigin = new ResourceToCORSOrigin().apply(resource);\n-                    if (corsOrigin.getAppIds().contains(appId)) {\n-                        // CORS origin is already registered for the appId.\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(), tenantDomain,\n-                                    validatedOrigin));\n-                        }\n-                        throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain,\n-                                validatedOrigin.getValue());\n-                    }\n-                }\n-            }\n-\n-            // Add CORS origins.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                Resource resource = getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, validatedOrigin.getValue());\n-\n-                // Resource is null. Set the new origin resource.\n-                // i.e Add origin at the tenant level.\n-                if (resource == null) {\n-                    CORSOrigin corsOrigin = new CORSOrigin();\n-                    corsOrigin.setOrigin(validatedOrigin.getValue());\n-                    ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigin);\n-                    Attribute attribute = new Attribute(appId, \"\");\n-                    List<Attribute> attributes = Collections.singletonList(attribute);\n-                    resourceAdd.setAttributes(attributes);\n-                    getConfigurationManager().addResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n-                }\n-            }\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_ADD, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n+        // Delete the CORS origin application associations.\n+        getCORSOriginDAO().deleteCORSOrigins(applicationBasicInfo.getApplicationId(), originIds, tenantId);\n     }\n \n-    private void deleteCORSOrigins(String tenantDomain, String appId, List<String> originIds)\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSApplication> getCORSApplicationsByCORSOriginId(String corsOriginId, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            // Check if the CORS origin is not registered.\n-            for (String originID : originIds) {\n-                Resource resource = getResourceById(originID);\n-                if (resource != null) {\n-                    CORSOrigin corsOrigin = new ResourceToCORSOrigin().apply(resource);\n-                    if (!corsOrigin.getAppIds().contains(appId)) {\n-                        // CORS origin is not registered for the appId.\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(), tenantDomain,\n-                                    originID));\n-                        }\n-                        throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain,\n-                                originID);\n-                    }\n-                } else {\n-                    // CORS origin is not registered for the appId.\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(), tenantDomain,\n-                                originID));\n-                    }\n-                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain,\n-                            originID);\n-                }\n-            }\n-\n-            // Delete CORS origins from the application.\n-            for (String originID : originIds) {\n-                Resource resource = getResourceById(originID);\n-                // Remove the origin association for the tenant/application.\n-                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n-                        resource.getResourceName(), appId);\n-                resource = getResourceById(originID);\n-                if (resource.getAttributes().isEmpty()) {\n-                    getConfigurationManager().deleteResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n-                            resource.getResourceName());\n-                }\n-            }\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_DELETE, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n+        // DAO layer throws an exception if CORSApplications cannot be retrieved for the corsOriginId.\n+        // i.e The corsOriginId is invalid.\n+        return Collections.unmodifiableList(getCORSOriginDAO().getCORSOriginApplications(corsOriginId));\n     }\n \n     /**\n-     * Retrieve the ConfigurationManager instance from the CORSServiceHolder.\n-     *\n-     * @return ConfigurationManager The ConfigurationManager instance.\n+     * {@inheritDoc}\n      */\n-    private ConfigurationManager getConfigurationManager() {\n+    @Override\n+    public CORSConfiguration getCORSConfiguration(String tenantDomain) throws CORSManagementServiceException {\n \n-        return CORSManagementServiceHolder.getInstance().getConfigurationManager();\n+        getTenantId(tenantDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "originalPosition": 417}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTYxNjQ0", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-462161644", "createdAt": "2020-08-06T03:26:46Z", "commit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoyNjo0NlrOG8h6HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoyNjo0NlrOG8h6HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMzI5Mg==", "bodyText": "What's the usage of this?", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466123292", "createdAt": "2020-08-06T03:26:46Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -75,396 +55,238 @@\n \n     private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n     public List<CORSOrigin> getTenantCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        return getCORSOrigins(tenantDomain).stream().filter(corsOrigin -> corsOrigin.getAppIds()\n-                .contains(TENANT_ASSOCIATION)).collect(Collectors.toList());\n-    }\n-\n-    @Override\n-    public List<CORSOrigin> getApplicationCORSOrigins(String tenantDomain, String appId)\n-            throws CORSManagementServiceException {\n-\n-        validateTenantDomain(tenantDomain);\n-        return getCORSOrigins(tenantDomain).stream().filter(corsOrigin -> corsOrigin.getAppIds()\n-                .contains(appId)).collect(Collectors.toList());\n-    }\n-\n-    @Override\n-    public void setTenantCORSOrigins(String tenantDomain, List<String> origins) throws CORSManagementServiceException {\n+        int tenantId = getTenantId(tenantDomain);\n \n-        validateTenantDomain(tenantDomain);\n-        setCORSOrigins(tenantDomain, TENANT_ASSOCIATION, origins);\n+        return Collections.unmodifiableList(getCORSOriginDAO().getCORSOriginsByTenantId(tenantId));\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n-    public void setApplicationCORSOrigins(String tenantDomain, String appId, List<String> origins)\n+    public List<CORSOrigin> getApplicationCORSOrigins(String applicationId, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        validateApplicationId(tenantDomain, appId);\n-        setCORSOrigins(tenantDomain, appId, origins);\n-    }\n-\n-    @Override\n-    public void addTenantCORSOrigins(String tenantDomain, List<String> origins) throws CORSManagementServiceException {\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n \n-        validateTenantDomain(tenantDomain);\n-        addCORSOrigins(tenantDomain, TENANT_ASSOCIATION, origins);\n+        return Collections.unmodifiableList(getCORSOriginDAO().getCORSOriginsByApplicationId(\n+                applicationBasicInfo.getApplicationId(), tenantId));\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n-    public void addApplicationCORSOrigins(String tenantDomain, String appId, List<String> origins)\n+    public void setCORSOrigins(String applicationId, List<String> origins, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        validateApplicationId(tenantDomain, appId);\n-        addCORSOrigins(tenantDomain, appId, origins);\n-    }\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n \n-    @Override\n-    public void deleteTenantCORSOrigins(String tenantDomain, List<String> originIds)\n-            throws CORSManagementServiceException {\n+        // Convert Origins to ValidatedOrigins.\n+        List<ValidatedOrigin> validatedOrigins = originsToValidatedOrigins(origins);\n \n-        validateTenantDomain(tenantDomain);\n-        deleteCORSOrigins(tenantDomain, TENANT_ASSOCIATION, originIds);\n+        // Set the CORS origins.\n+        getCORSOriginDAO().setCORSOrigins(applicationBasicInfo.getApplicationId(),\n+                validatedOrigins.stream().map(validatedOrigin -> {\n+                    // Create the CORS origin.\n+                    CORSOrigin corsOrigin = new CORSOrigin();\n+                    corsOrigin.setOrigin(validatedOrigin.getValue());\n+                    return corsOrigin;\n+                }).collect(Collectors.toList()), tenantId);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n-    public void deleteApplicationCORSOrigins(String tenantDomain, String appId, List<String> originIds)\n+    public void addCORSOrigins(String applicationId, List<String> origins, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        validateApplicationId(tenantDomain, appId);\n-        deleteCORSOrigins(tenantDomain, appId, originIds);\n-    }\n-\n-    @Override\n-    public CORSConfiguration getCORSConfiguration(String tenantDomain) throws CORSManagementServiceException {\n-\n-        validateTenantDomain(tenantDomain);\n-\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            Resource resource = getResource(CORS_CONFIGURATION_RESOURCE_TYPE_NAME, CORS_CONFIGURATION_RESOURCE_NAME);\n-            CORSConfiguration corsConfiguration;\n-            if (resource == null) {\n-                corsConfiguration = CORSConfigurationUtils.getServerCORSConfiguration();\n-            } else {\n-                corsConfiguration = new ResourceToCORSConfiguration().apply(resource);\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n+\n+        // Convert Origins to ValidatedOrigins.\n+        List<ValidatedOrigin> validatedOrigins = originsToValidatedOrigins(origins);\n+\n+        // Check if the CORS origins are already present.\n+        List<CORSOrigin> existingCORSOrigins = getCORSOriginDAO().getCORSOriginsByApplicationId(\n+                applicationBasicInfo.getApplicationId(), tenantId);\n+        for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n+            if (existingCORSOrigins.stream().map(CORSOrigin::getId).collect(Collectors.toList())\n+                    .contains(validatedOrigin.getValue())) {\n+                // CORS origin is already registered for the application.\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(), tenantDomain, validatedOrigin));\n+                }\n+                throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, validatedOrigin.getValue());\n             }\n-            return corsConfiguration;\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_CONFIG_RETRIEVE, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n         }\n-    }\n \n-    @Override\n-    public void setCORSConfiguration(String tenantDomain, CORSConfiguration corsConfiguration)\n-            throws CORSManagementServiceException {\n-\n-        validateTenantDomain(tenantDomain);\n-\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            ResourceAdd resourceAdd = new CORSConfigurationToResourceAdd().apply(corsConfiguration);\n-            getConfigurationManager().replaceResource(CORS_CONFIGURATION_RESOURCE_TYPE_NAME, resourceAdd);\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_CONFIG_SET, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n-    }\n-\n-    private List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n-\n-        List<CORSOrigin> corsOrigins;\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            Resources resources = getResources(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n-            corsOrigins = resources.getResources().stream().map(new ResourceToCORSOrigin())\n-                    .collect(Collectors.toList());\n-            return Collections.unmodifiableList(corsOrigins);\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n+        // Add the CORS origins.\n+        getCORSOriginDAO().addCORSOrigins(applicationBasicInfo.getApplicationId(),\n+                validatedOrigins.stream().map(validatedOrigin -> {\n+                    // Create the CORS origin.\n+                    CORSOrigin corsOrigin = new CORSOrigin();\n+                    corsOrigin.setOrigin(validatedOrigin.getValue());\n+                    return corsOrigin;\n+                }).collect(Collectors.toList()), tenantId\n+        );\n     }\n \n-    private void setCORSOrigins(String tenantDomain, String appId, List<String> origins)\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteCORSOrigins(String applicationId, List<String> originIds, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            // Convert Origins to ValidatedOrigins.\n-            List<ValidatedOrigin> validatedOrigins = new ArrayList<>();\n-            for (String origin : origins) {\n-                validatedOrigins.add(new ValidatedOrigin(origin));\n-            }\n-\n-            // Delete all CORS origins from the tenant.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                Resource resource = getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, validatedOrigin.getValue());\n-                if (resource != null) {\n-                    CORSOrigin corsOrigin = new ResourceToCORSOrigin().apply(resource);\n-                    getConfigurationManager().deleteResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, corsOrigin.getOrigin());\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n+\n+        // Check if the CORS origins are not in the system.\n+        List<CORSOrigin> existingCORSOrigins = getCORSOriginDAO().getCORSOriginsByApplicationId(\n+                applicationBasicInfo.getApplicationId(), tenantId);\n+        for (String originId : originIds) {\n+            if (!existingCORSOrigins.stream().map(CORSOrigin::getId).collect(Collectors.toList()).contains(originId)) {\n+                // CORS origin is not registered for the application.\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(), tenantDomain, originId));\n                 }\n+                throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, originId);\n             }\n-\n-            // Save ValidatedOrigins in the Configuration Management store.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                CORSOrigin corsOrigin = new CORSOrigin();\n-                corsOrigin.setOrigin(validatedOrigin.getValue());\n-                corsOrigin.setAppIds(Collections.singleton(appId));\n-                ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigin);\n-                getConfigurationManager().addResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n-            }\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_SET, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n         }\n-    }\n-\n-    private void addCORSOrigins(String tenantDomain, String appId, List<String> origins)\n-            throws CORSManagementServiceException {\n-\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n \n-            // Convert Origins to ValidatedOrigins.\n-            List<ValidatedOrigin> validatedOrigins = new ArrayList<>();\n-            for (String origin : origins) {\n-                validatedOrigins.add(new ValidatedOrigin(origin));\n-            }\n-\n-            // Check if the CORS origin is already registered.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                Resource resource = getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, validatedOrigin.getValue());\n-                if (resource != null) {\n-                    CORSOrigin corsOrigin = new ResourceToCORSOrigin().apply(resource);\n-                    if (corsOrigin.getAppIds().contains(appId)) {\n-                        // CORS origin is already registered for the appId.\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(), tenantDomain,\n-                                    validatedOrigin));\n-                        }\n-                        throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain,\n-                                validatedOrigin.getValue());\n-                    }\n-                }\n-            }\n-\n-            // Add CORS origins.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                Resource resource = getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, validatedOrigin.getValue());\n-\n-                // Resource is null. Set the new origin resource.\n-                // i.e Add origin at the tenant level.\n-                if (resource == null) {\n-                    CORSOrigin corsOrigin = new CORSOrigin();\n-                    corsOrigin.setOrigin(validatedOrigin.getValue());\n-                    ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigin);\n-                    Attribute attribute = new Attribute(appId, \"\");\n-                    List<Attribute> attributes = Collections.singletonList(attribute);\n-                    resourceAdd.setAttributes(attributes);\n-                    getConfigurationManager().addResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n-                }\n-            }\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_ADD, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n+        // Delete the CORS origin application associations.\n+        getCORSOriginDAO().deleteCORSOrigins(applicationBasicInfo.getApplicationId(), originIds, tenantId);\n     }\n \n-    private void deleteCORSOrigins(String tenantDomain, String appId, List<String> originIds)\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSApplication> getCORSApplicationsByCORSOriginId(String corsOriginId, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            // Check if the CORS origin is not registered.\n-            for (String originID : originIds) {\n-                Resource resource = getResourceById(originID);\n-                if (resource != null) {\n-                    CORSOrigin corsOrigin = new ResourceToCORSOrigin().apply(resource);\n-                    if (!corsOrigin.getAppIds().contains(appId)) {\n-                        // CORS origin is not registered for the appId.\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(), tenantDomain,\n-                                    originID));\n-                        }\n-                        throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain,\n-                                originID);\n-                    }\n-                } else {\n-                    // CORS origin is not registered for the appId.\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(), tenantDomain,\n-                                originID));\n-                    }\n-                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain,\n-                            originID);\n-                }\n-            }\n-\n-            // Delete CORS origins from the application.\n-            for (String originID : originIds) {\n-                Resource resource = getResourceById(originID);\n-                // Remove the origin association for the tenant/application.\n-                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n-                        resource.getResourceName(), appId);\n-                resource = getResourceById(originID);\n-                if (resource.getAttributes().isEmpty()) {\n-                    getConfigurationManager().deleteResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n-                            resource.getResourceName());\n-                }\n-            }\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_DELETE, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n+        // DAO layer throws an exception if CORSApplications cannot be retrieved for the corsOriginId.\n+        // i.e The corsOriginId is invalid.\n+        return Collections.unmodifiableList(getCORSOriginDAO().getCORSOriginApplications(corsOriginId));\n     }\n \n     /**\n-     * Retrieve the ConfigurationManager instance from the CORSServiceHolder.\n-     *\n-     * @return ConfigurationManager The ConfigurationManager instance.\n+     * {@inheritDoc}\n      */\n-    private ConfigurationManager getConfigurationManager() {\n+    @Override\n+    public CORSConfiguration getCORSConfiguration(String tenantDomain) throws CORSManagementServiceException {\n \n-        return CORSManagementServiceHolder.getInstance().getConfigurationManager();\n+        getTenantId(tenantDomain);\n+\n+        return getCORSConfigurationDAO().getCORSConfigurationByTenantDomain(tenantDomain);\n     }\n \n     /**\n-     * Configuration Management API returns a ConfigurationManagementException with the error code CONFIGM_00017 when\n-     * resource is not found. This method wraps the original method and returns null if the resource is not found.\n-     *\n-     * @param resourceTypeName Resource type name.\n-     * @param resourceName     Resource name.\n-     * @return Retrieved resource from the configuration store. Returns {@code null} if the resource is not found.\n-     * @throws ConfigurationManagementException\n+     * {@inheritDoc}\n      */\n-    private Resource getResource(String resourceTypeName, String resourceName) throws ConfigurationManagementException {\n+    @Override\n+    public void setCORSConfiguration(CORSConfiguration corsConfiguration, String tenantDomain)\n+            throws CORSManagementServiceException {\n \n-        try {\n-            return getConfigurationManager().getResource(resourceTypeName, resourceName);\n-        } catch (ConfigurationManagementException e) {\n-            if (e.getErrorCode().equals(ERROR_CODE_RESOURCE_DOES_NOT_EXISTS.getCode())) {\n-                return null;\n-            } else {\n-                throw e;\n-            }\n-        }\n+        getTenantId(tenantDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "originalPosition": 446}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTY0MTU5", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-462164159", "createdAt": "2020-08-06T03:35:43Z", "commit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzozNTo0M1rOG8iC8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzozNTo0M1rOG8iC8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyNTU1Mw==", "bodyText": "Shall we add a try-catch block as done in here. Otherwise it will be difficult to identify if something goes wrong during the activation.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466125553", "createdAt": "2020-08-06T03:35:43Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/CORSManagementServiceComponent.java", "diffHunk": "@@ -50,8 +55,13 @@\n     @Activate\n     protected void activate(ComponentContext context) {\n \n-        context.getBundleContext()\n-                .registerService(CORSManagementService.class, new CORSManagementServiceImpl(), null);\n+        BundleContext bundleContext = context.getBundleContext();\n+        bundleContext.registerService(CORSOriginDAO.class,\n+                new CORSOriginDAOImpl(), null);\n+        bundleContext.registerService(CORSConfigurationDAO.class,\n+                new CORSConfigurationDAOImpl(), null);\n+\n+        bundleContext.registerService(CORSManagementService.class, new CORSManagementServiceImpl(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTY4MTMx", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-462168131", "createdAt": "2020-08-06T03:49:44Z", "commit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzo0OTo0NFrOG8iQ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzo0OTo0NFrOG8iQ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyOTEyNw==", "bodyText": "Update the license.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466129127", "createdAt": "2020-08-06T03:49:44Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/impl/CORSOriginDAOImpl.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTY4MjYw", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-462168260", "createdAt": "2020-08-06T03:50:16Z", "commit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzo1MDoxNlrOG8iRew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzo1MDoxNlrOG8iRew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyOTI3NQ==", "bodyText": "Update the license.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466129275", "createdAt": "2020-08-06T03:50:16Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/impl/CORSConfigurationDAOImpl.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTY4MzI1", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-462168325", "createdAt": "2020-08-06T03:50:30Z", "commit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzo1MDozMFrOG8iRsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzo1MDozMFrOG8iRsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyOTMyOA==", "bodyText": "Update the license.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466129328", "createdAt": "2020-08-06T03:50:30Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/CORSOriginDAO.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTY4MzU1", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-462168355", "createdAt": "2020-08-06T03:50:36Z", "commit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzo1MDozNlrOG8iRww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzo1MDozNlrOG8iRww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyOTM0Nw==", "bodyText": "Update the license.", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466129347", "createdAt": "2020-08-06T03:50:36Z", "author": {"login": "ashensw"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/CORSConfigurationDAO.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1"}, "originalPosition": 2}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "committedDate": "2020-08-05T13:54:22Z", "message": "Remove DAO queue"}, "afterCommit": {"oid": "a2fde90e78e1a79313975a416bc1d79d3bc3bcb0", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/a2fde90e78e1a79313975a416bc1d79d3bc3bcb0", "committedDate": "2020-08-06T03:50:21Z", "message": "Remove DAO queue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2fde90e78e1a79313975a416bc1d79d3bc3bcb0", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/a2fde90e78e1a79313975a416bc1d79d3bc3bcb0", "committedDate": "2020-08-06T03:50:21Z", "message": "Remove DAO queue"}, "afterCommit": {"oid": "5a3d8607061c701fb4806d84ceed10830bf94d3f", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/5a3d8607061c701fb4806d84ceed10830bf94d3f", "committedDate": "2020-08-06T03:50:47Z", "message": "Remove DAO queue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a3d8607061c701fb4806d84ceed10830bf94d3f", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/5a3d8607061c701fb4806d84ceed10830bf94d3f", "committedDate": "2020-08-06T03:50:47Z", "message": "Remove DAO queue"}, "afterCommit": {"oid": "809aea42c0f21ce95932cce50962104ba6f76693", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/809aea42c0f21ce95932cce50962104ba6f76693", "committedDate": "2020-08-06T03:53:48Z", "message": "Remove DAO queue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "809aea42c0f21ce95932cce50962104ba6f76693", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/809aea42c0f21ce95932cce50962104ba6f76693", "committedDate": "2020-08-06T03:53:48Z", "message": "Remove DAO queue"}, "afterCommit": {"oid": "19e728bfa4478e211c063ed81ff5310b0daf2e6b", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/19e728bfa4478e211c063ed81ff5310b0daf2e6b", "committedDate": "2020-08-06T06:38:29Z", "message": "Remove DAO queue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMjI5NzA4", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-462229708", "createdAt": "2020-08-06T06:48:30Z", "commit": {"oid": "19e728bfa4478e211c063ed81ff5310b0daf2e6b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "342f87a9eff0775eb634881f3a302867a1e2c3d0", "author": {"user": {"login": "wso2-jenkins-bot", "name": null}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/342f87a9eff0775eb634881f3a302867a1e2c3d0", "committedDate": "2020-08-06T12:13:58Z", "message": "Implement DAO layer for CORS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc731d5389bb3174b0ab2379446a21aa2f756edf", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/cc731d5389bb3174b0ab2379446a21aa2f756edf", "committedDate": "2020-08-06T12:13:58Z", "message": "Remove DAO queue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "19e728bfa4478e211c063ed81ff5310b0daf2e6b", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/19e728bfa4478e211c063ed81ff5310b0daf2e6b", "committedDate": "2020-08-06T06:38:29Z", "message": "Remove DAO queue"}, "afterCommit": {"oid": "cc731d5389bb3174b0ab2379446a21aa2f756edf", "author": {"user": {"login": "ivantha", "name": "Ivantha"}}, "url": "https://github.com/wso2/carbon-identity-framework/commit/cc731d5389bb3174b0ab2379446a21aa2f756edf", "committedDate": "2020-08-06T12:13:58Z", "message": "Remove DAO queue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMzU2NjYz", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-493356663", "createdAt": "2020-09-22T11:19:03Z", "commit": {"oid": "cc731d5389bb3174b0ab2379446a21aa2f756edf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToxOTowNFrOHV1SwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToxOTowNFrOHV1SwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1NTI5Nw==", "bodyText": "These indexes will not work Since the identifier length is too high", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r492655297", "createdAt": "2020-09-22T11:19:04Z", "author": {"login": "Buddhimah"}, "path": "features/identity-core/org.wso2.carbon.identity.core.server.feature/resources/dbscripts/oracle_rac.sql", "diffHunk": "@@ -1674,3 +1718,11 @@ CREATE INDEX IDX_FEDERATED_AUTH_SESSION_ID ON IDN_FED_AUTH_SESSION_MAPPING (SESS\n -- IDN_REMOTE_FETCH_REVISIONS --\n CREATE INDEX IDX_REMOTE_FETCH_REVISION_CONFIG_ID ON IDN_REMOTE_FETCH_REVISIONS (CONFIG_ID)\n /\n+\n+-- IDN_CORS_ASSOCIATION --", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc731d5389bb3174b0ab2379446a21aa2f756edf"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODYxNDky", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-500861492", "createdAt": "2020-10-02T05:01:15Z", "commit": {"oid": "cc731d5389bb3174b0ab2379446a21aa2f756edf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNTowMToxNVrOHbhTkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNTowMToxNVrOHbhTkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxOTI4MQ==", "bodyText": "Missing license", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r498619281", "createdAt": "2020-10-02T05:01:15Z", "author": {"login": "omindu"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/ErrorUtils.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc731d5389bb3174b0ab2379446a21aa2f756edf"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODYxNTAy", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#pullrequestreview-500861502", "createdAt": "2020-10-02T05:01:21Z", "commit": {"oid": "cc731d5389bb3174b0ab2379446a21aa2f756edf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNTowMToyMVrOHbhTmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNTowMToyMVrOHbhTmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxOTI5MQ==", "bodyText": "Missing license", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r498619291", "createdAt": "2020-10-02T05:01:21Z", "author": {"login": "omindu"}, "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/CORSApplication.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.wso2.carbon.identity.cors.mgt.core.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc731d5389bb3174b0ab2379446a21aa2f756edf"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2243, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}