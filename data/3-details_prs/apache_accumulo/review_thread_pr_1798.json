{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NzM2NjM1", "number": 1798, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzoxOTowMlrOE8Nnqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozOToyMVrOE_WZ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTczMTYyOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzoxOTowMlrOH4NFTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOToxMDo0M1rOH5RZWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjY1NA==", "bodyText": "since we aren't including any details about which user(s) are impacted, I'd rather we not get a WARN for each user. could we move this to after we finish iterating with a summary of how many users?\nIf an operator needed to move towards eliminating these warn messages, how would they get the list of users that need to authenticate to the system?", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528696654", "createdAt": "2020-11-23T13:19:02Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1MjA0MQ==", "bodyText": "One option is to provide the user name during these warnings. Another is to provide single warning, rather than one per user, and then provide some other mechanism to list outdated entries.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528852041", "createdAt": "2020-11-23T16:52:28Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjY1NA=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2ODIxMw==", "bodyText": "I'm never sure exactly how much detail is too much when it comes to logging security features. I can add an affected user count.\nI'm not sure the operator has to or should do anything, the update is automatic. But with their current tools they could replicate what the code does and could go through the users zNode checking hash lengths. Alternately I could list the affected user principals in the warning but that feels unsafe. Do you have something in mind?", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528868213", "createdAt": "2020-11-23T17:16:31Z", "author": {"login": "BukrosSzabolcs"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjY1NA=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwMzUxOA==", "bodyText": "The list of users in the server logs is okay. However, I just realized... this method is only ever called when we're starting from an empty user database (on initialize... or re-initialize), so there shouldn't be any matching the old hashes anyway at the point this code is run. Or did I miss something?\nI do think maybe it would be worth the master server checking to see if any users are using the old hashing, and listing them in the server logs on startup, as an upgrade warning. In future, we can turn that into an upgrade blocker (so we can eventually drop the code that supports reading the old hashes).", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528903518", "createdAt": "2020-11-23T18:14:19Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjY1NA=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyNjM5Mw==", "bodyText": "Added the check to master startup through SecurityOperation.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529726393", "createdAt": "2020-11-24T16:50:21Z", "author": {"login": "BukrosSzabolcs"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjY1NA=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxNTg5OQ==", "bodyText": "@BukrosSzabolcs Feel free to mark the conversation as \"Resolved\" if you've taken steps to address the comments. It cleans up the interface and makes it easier for subsequent reviews. \ud83d\ude3a", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529815899", "createdAt": "2020-11-24T19:10:43Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjY1NA=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTczNDEzOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzoxOTozNFrOH4NGvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo0NTo0OFrOH4axzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NzAyMA==", "bodyText": "log a DEBUG message with these details.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528697020", "createdAt": "2020-11-23T13:19:34Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");\n+          return;\n+        }\n+      });\n+    } catch (NullPointerException e) {\n+      // initializeSecurity was not called yet, there could be no outdated passwords stored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1MjYwMw==", "bodyText": "Could also avoid this by checking if the zk node exists first.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528852603", "createdAt": "2020-11-23T16:53:19Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");\n+          return;\n+        }\n+      });\n+    } catch (NullPointerException e) {\n+      // initializeSecurity was not called yet, there could be no outdated passwords stored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NzAyMA=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3NTcwNQ==", "bodyText": "The zknode missing should be a corner case so I would prefer to keep the try/catch. I'll add a debug log message.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528875705", "createdAt": "2020-11-23T17:27:57Z", "author": {"login": "BukrosSzabolcs"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");\n+          return;\n+        }\n+      });\n+    } catch (NullPointerException e) {\n+      // initializeSecurity was not called yet, there could be no outdated passwords stored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NzAyMA=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyMTAzNw==", "bodyText": "It looks like initialize itself is already an edge case... see my comment at #1798 (comment)", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528921037", "createdAt": "2020-11-23T18:45:48Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");\n+          return;\n+        }\n+      });\n+    } catch (NullPointerException e) {\n+      // initializeSecurity was not called yet, there could be no outdated passwords stored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NzAyMA=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTczOTU4OnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzoyMDo1NFrOH4NKCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzoyODoxOFrOH5za4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5Nzg2NQ==", "bodyText": "could we log a WARN message that this method has been used? that way it would show up in operator logs should we mistakenly use it in a non-test context.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528697865", "createdAt": "2020-11-23T13:20:54Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -116,6 +133,31 @@ public void createUser(String principal, AuthenticationToken token)\n     }\n   }\n \n+  /**\n+   * Creates user with outdated password hash for testing\n+   *\n+   * @deprecated since 2.1.0, only present for testing DO NOT USE!\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4Mzg3OQ==", "bodyText": "Why do you feel a warning is necessary? It's not a widely used method and the original name was re-used for the new functionality. But if we would add a safeguard I would prefer to throw an AccumuloSecurityException at the end of the method. We can catch it in test context and would be harder to miss for a dev than a log msg. What do you think?", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528883879", "createdAt": "2020-11-23T17:41:10Z", "author": {"login": "BukrosSzabolcs"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -116,6 +133,31 @@ public void createUser(String principal, AuthenticationToken token)\n     }\n   }\n \n+  /**\n+   * Creates user with outdated password hash for testing\n+   *\n+   * @deprecated since 2.1.0, only present for testing DO NOT USE!\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5Nzg2NQ=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM2NzgwMQ==", "bodyText": "yeah that sounds great.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530367801", "createdAt": "2020-11-25T13:19:18Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -116,6 +133,31 @@ public void createUser(String principal, AuthenticationToken token)\n     }\n   }\n \n+  /**\n+   * Creates user with outdated password hash for testing\n+   *\n+   * @deprecated since 2.1.0, only present for testing DO NOT USE!\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5Nzg2NQ=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MzM0Ng==", "bodyText": "Just realized the only reason for this method was that the IT tests required it, but with reworking those to unit tests this is no longer used. So I'll just remove this.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530373346", "createdAt": "2020-11-25T13:28:18Z", "author": {"login": "BukrosSzabolcs"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -116,6 +133,31 @@ public void createUser(String principal, AuthenticationToken token)\n     }\n   }\n \n+  /**\n+   * Creates user with outdated password hash for testing\n+   *\n+   * @deprecated since 2.1.0, only present for testing DO NOT USE!\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5Nzg2NQ=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTc1MjExOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzoyNDoxMVrOH4NRrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMDoxMjoyM1rOH8MF_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTgyMw==", "bodyText": "if we fail to update the password for some reason (like a transient zk write failure), at this point shouldn't we still return that they correctly authenticated?", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528699823", "createdAt": "2020-11-23T13:24:11Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -180,18 +222,43 @@ public boolean authenticateUser(String principal, AuthenticationToken token)\n     if (!(token instanceof PasswordToken))\n       throw new AccumuloSecurityException(principal, SecurityErrorCode.INVALID_TOKEN);\n     PasswordToken pt = (PasswordToken) token;\n-    byte[] pass;\n+    byte[] zkData;\n     String zpath = ZKUserPath + \"/\" + principal;\n-    pass = zooCache.get(zpath);\n-    boolean result = ZKSecurityTool.checkPass(pt.getPassword(), pass);\n+    zkData = zooCache.get(zpath);\n+    boolean result = authenticateUser(principal, pt, zkData);\n     if (!result) {\n       zooCache.clear(zpath);\n-      pass = zooCache.get(zpath);\n-      result = ZKSecurityTool.checkPass(pt.getPassword(), pass);\n+      zkData = zooCache.get(zpath);\n+      result = authenticateUser(principal, pt, zkData);\n     }\n     return result;\n   }\n \n+  private boolean authenticateUser(String principal, PasswordToken pt, byte[] zkData) {\n+    if (zkData == null) {\n+      return false;\n+    }\n+\n+    // if the hash does not match the outdated format use Crypt to verify it\n+    if (!ZKSecurityTool.isOutdatedPass(zkData)) {\n+      return ZKSecurityTool.checkCryptPass(pt.getPassword(), zkData);\n+    }\n+\n+    if (!ZKSecurityTool.checkPass(pt.getPassword(), zkData)) {\n+      // if password does not match we are done\n+      return false;\n+    }\n+\n+    // if the password is correct we have to update the stored hash with new algorithm\n+    try {\n+      changePassword(principal, pt);\n+      return true;\n+    } catch (AccumuloSecurityException e) {\n+      log.error(\"Failed to update hashed user password for user: {}\", principal, e);\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NTM0MQ==", "bodyText": "My reasoning was that we are trying to re-hash the password if possible and on failure we are triggering retry and it should not consistently fail. I guess the question is how aggressively are we trying to re-hash. It would be fine for me either way. Please let me know if you would prefer it changed.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528895341", "createdAt": "2020-11-23T17:59:41Z", "author": {"login": "BukrosSzabolcs"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -180,18 +222,43 @@ public boolean authenticateUser(String principal, AuthenticationToken token)\n     if (!(token instanceof PasswordToken))\n       throw new AccumuloSecurityException(principal, SecurityErrorCode.INVALID_TOKEN);\n     PasswordToken pt = (PasswordToken) token;\n-    byte[] pass;\n+    byte[] zkData;\n     String zpath = ZKUserPath + \"/\" + principal;\n-    pass = zooCache.get(zpath);\n-    boolean result = ZKSecurityTool.checkPass(pt.getPassword(), pass);\n+    zkData = zooCache.get(zpath);\n+    boolean result = authenticateUser(principal, pt, zkData);\n     if (!result) {\n       zooCache.clear(zpath);\n-      pass = zooCache.get(zpath);\n-      result = ZKSecurityTool.checkPass(pt.getPassword(), pass);\n+      zkData = zooCache.get(zpath);\n+      result = authenticateUser(principal, pt, zkData);\n     }\n     return result;\n   }\n \n+  private boolean authenticateUser(String principal, PasswordToken pt, byte[] zkData) {\n+    if (zkData == null) {\n+      return false;\n+    }\n+\n+    // if the hash does not match the outdated format use Crypt to verify it\n+    if (!ZKSecurityTool.isOutdatedPass(zkData)) {\n+      return ZKSecurityTool.checkCryptPass(pt.getPassword(), zkData);\n+    }\n+\n+    if (!ZKSecurityTool.checkPass(pt.getPassword(), zkData)) {\n+      // if password does not match we are done\n+      return false;\n+    }\n+\n+    // if the password is correct we have to update the stored hash with new algorithm\n+    try {\n+      changePassword(principal, pt);\n+      return true;\n+    } catch (AccumuloSecurityException e) {\n+      log.error(\"Failed to update hashed user password for user: {}\", principal, e);\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTgyMw=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3Mzk0MQ==", "bodyText": "I think this comes down to wether we want to fail open or closed for updating to a more secure hash. I personally prefer failing open in this case -- essentially if there's a problem writing to ZK we did not consider here then the system will keep working as before the upgrade but with a persistent log message an operator could use to go fix things.\nI could see at least one argument for failing closed: a person or system not being able to talk to Accumulo will be a very loud noise that will ensure whatever is preventing us from storing things more securely gets handled. Presuming secure hashing of password data is an important system requirement in a particular Accumulo deployment that is a good thing.\nDoes anyone else feel strongly?", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530373941", "createdAt": "2020-11-25T13:29:16Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -180,18 +222,43 @@ public boolean authenticateUser(String principal, AuthenticationToken token)\n     if (!(token instanceof PasswordToken))\n       throw new AccumuloSecurityException(principal, SecurityErrorCode.INVALID_TOKEN);\n     PasswordToken pt = (PasswordToken) token;\n-    byte[] pass;\n+    byte[] zkData;\n     String zpath = ZKUserPath + \"/\" + principal;\n-    pass = zooCache.get(zpath);\n-    boolean result = ZKSecurityTool.checkPass(pt.getPassword(), pass);\n+    zkData = zooCache.get(zpath);\n+    boolean result = authenticateUser(principal, pt, zkData);\n     if (!result) {\n       zooCache.clear(zpath);\n-      pass = zooCache.get(zpath);\n-      result = ZKSecurityTool.checkPass(pt.getPassword(), pass);\n+      zkData = zooCache.get(zpath);\n+      result = authenticateUser(principal, pt, zkData);\n     }\n     return result;\n   }\n \n+  private boolean authenticateUser(String principal, PasswordToken pt, byte[] zkData) {\n+    if (zkData == null) {\n+      return false;\n+    }\n+\n+    // if the hash does not match the outdated format use Crypt to verify it\n+    if (!ZKSecurityTool.isOutdatedPass(zkData)) {\n+      return ZKSecurityTool.checkCryptPass(pt.getPassword(), zkData);\n+    }\n+\n+    if (!ZKSecurityTool.checkPass(pt.getPassword(), zkData)) {\n+      // if password does not match we are done\n+      return false;\n+    }\n+\n+    // if the password is correct we have to update the stored hash with new algorithm\n+    try {\n+      changePassword(principal, pt);\n+      return true;\n+    } catch (AccumuloSecurityException e) {\n+      log.error(\"Failed to update hashed user password for user: {}\", principal, e);\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTgyMw=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzNzMzNw==", "bodyText": "I don't feel very strongly about it. However, I do lean towards forcing the upgrade and rejecting if it can't be completed (for the reasons @busbey mentioned, as well as because I want to eventually ensure we can drop the code that supports reading the old hashes on some future upgrade).\nI think it's very unlikely we're going to fail here if we've already authenticated, unless ZK is having issues (in which case, we'll probably see other errors in the system). So, it may be moot. Either way would probably be fine.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530537337", "createdAt": "2020-11-25T17:25:54Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -180,18 +222,43 @@ public boolean authenticateUser(String principal, AuthenticationToken token)\n     if (!(token instanceof PasswordToken))\n       throw new AccumuloSecurityException(principal, SecurityErrorCode.INVALID_TOKEN);\n     PasswordToken pt = (PasswordToken) token;\n-    byte[] pass;\n+    byte[] zkData;\n     String zpath = ZKUserPath + \"/\" + principal;\n-    pass = zooCache.get(zpath);\n-    boolean result = ZKSecurityTool.checkPass(pt.getPassword(), pass);\n+    zkData = zooCache.get(zpath);\n+    boolean result = authenticateUser(principal, pt, zkData);\n     if (!result) {\n       zooCache.clear(zpath);\n-      pass = zooCache.get(zpath);\n-      result = ZKSecurityTool.checkPass(pt.getPassword(), pass);\n+      zkData = zooCache.get(zpath);\n+      result = authenticateUser(principal, pt, zkData);\n     }\n     return result;\n   }\n \n+  private boolean authenticateUser(String principal, PasswordToken pt, byte[] zkData) {\n+    if (zkData == null) {\n+      return false;\n+    }\n+\n+    // if the hash does not match the outdated format use Crypt to verify it\n+    if (!ZKSecurityTool.isOutdatedPass(zkData)) {\n+      return ZKSecurityTool.checkCryptPass(pt.getPassword(), zkData);\n+    }\n+\n+    if (!ZKSecurityTool.checkPass(pt.getPassword(), zkData)) {\n+      // if password does not match we are done\n+      return false;\n+    }\n+\n+    // if the password is correct we have to update the stored hash with new algorithm\n+    try {\n+      changePassword(principal, pt);\n+      return true;\n+    } catch (AccumuloSecurityException e) {\n+      log.error(\"Failed to update hashed user password for user: {}\", principal, e);\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTgyMw=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg3NDc1MQ==", "bodyText": "okay, sounds good. @BukrosSzabolcs I think you're fine to leave this as-is.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r532874751", "createdAt": "2020-11-30T20:12:23Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -180,18 +222,43 @@ public boolean authenticateUser(String principal, AuthenticationToken token)\n     if (!(token instanceof PasswordToken))\n       throw new AccumuloSecurityException(principal, SecurityErrorCode.INVALID_TOKEN);\n     PasswordToken pt = (PasswordToken) token;\n-    byte[] pass;\n+    byte[] zkData;\n     String zpath = ZKUserPath + \"/\" + principal;\n-    pass = zooCache.get(zpath);\n-    boolean result = ZKSecurityTool.checkPass(pt.getPassword(), pass);\n+    zkData = zooCache.get(zpath);\n+    boolean result = authenticateUser(principal, pt, zkData);\n     if (!result) {\n       zooCache.clear(zpath);\n-      pass = zooCache.get(zpath);\n-      result = ZKSecurityTool.checkPass(pt.getPassword(), pass);\n+      zkData = zooCache.get(zpath);\n+      result = authenticateUser(principal, pt, zkData);\n     }\n     return result;\n   }\n \n+  private boolean authenticateUser(String principal, PasswordToken pt, byte[] zkData) {\n+    if (zkData == null) {\n+      return false;\n+    }\n+\n+    // if the hash does not match the outdated format use Crypt to verify it\n+    if (!ZKSecurityTool.isOutdatedPass(zkData)) {\n+      return ZKSecurityTool.checkCryptPass(pt.getPassword(), zkData);\n+    }\n+\n+    if (!ZKSecurityTool.checkPass(pt.getPassword(), zkData)) {\n+      // if password does not match we are done\n+      return false;\n+    }\n+\n+    // if the password is correct we have to update the stored hash with new algorithm\n+    try {\n+      changePassword(principal, pt);\n+      return true;\n+    } catch (AccumuloSecurityException e) {\n+      log.error(\"Failed to update hashed user password for user: {}\", principal, e);\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTgyMw=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTc2MzgxOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzoyNjo1OVrOH4NYmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODowNDozNFrOH4ZYjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMTU5Mw==", "bodyText": "add a comment about why a new Charset instead of relying on StandardCharsets.UTF_8", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528701593", "createdAt": "2020-11-23T13:26:59Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -47,6 +49,7 @@\n class ZKSecurityTool {\n   private static final Logger log = LoggerFactory.getLogger(ZKSecurityTool.class);\n   private static final int SALT_LENGTH = 8;\n+  private static final Charset CRYPT_CHARSET = Charset.forName(\"UTF-8\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5ODE5MQ==", "bodyText": "Switching to StandardCharsets.UTF_8", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528898191", "createdAt": "2020-11-23T18:04:34Z", "author": {"login": "BukrosSzabolcs"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -47,6 +49,7 @@\n class ZKSecurityTool {\n   private static final Logger log = LoggerFactory.getLogger(ZKSecurityTool.class);\n   private static final int SALT_LENGTH = 8;\n+  private static final Charset CRYPT_CHARSET = Charset.forName(\"UTF-8\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMTU5Mw=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTc3NzE0OnYy", "diffSide": "LEFT", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzozMDoyNVrOH4NglQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODoxNjoxMVrOH4Zxng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMzYzNw==", "bodyText": "just to make sure I understand the reasoning here, the removal of this check is because ZKSecurityTool is package private and all current calls ensure zkData isn't null?\nif that's correct please add javadocs that say zkData can't be null. an alternative is to leave the check in place and rely on the jit to optimize it away.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528703637", "createdAt": "2020-11-23T13:30:25Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -56,16 +59,26 @@\n     return salt;\n   }\n \n+  // only present for testing DO NOT USE!\n+  @Deprecated(since = \"2.1.0\")\n+  static byte[] createOutdatedPass(byte[] password) throws AccumuloException {\n+    byte[] salt = generateSalt();\n+    try {\n+      return convertPass(password, salt);\n+    } catch (NoSuchAlgorithmException e) {\n+      log.error(\"Count not create hashed password\", e);\n+      throw new AccumuloException(\"Count not create hashed password\", e);\n+    }\n+  }\n+\n   private static byte[] hash(byte[] raw) throws NoSuchAlgorithmException {\n-    MessageDigest md = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM);\n+    MessageDigest md = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM_OUTDATED);\n     md.update(raw);\n     return md.digest();\n   }\n \n+  @Deprecated(since = \"2.1.0\")\n   public static boolean checkPass(byte[] password, byte[] zkData) {\n-    if (zkData == null)\n-      return false;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwNDYwNg==", "bodyText": "I re-added the check to be on the safe side, but and made it package private as I should have done already.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528904606", "createdAt": "2020-11-23T18:16:11Z", "author": {"login": "BukrosSzabolcs"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -56,16 +59,26 @@\n     return salt;\n   }\n \n+  // only present for testing DO NOT USE!\n+  @Deprecated(since = \"2.1.0\")\n+  static byte[] createOutdatedPass(byte[] password) throws AccumuloException {\n+    byte[] salt = generateSalt();\n+    try {\n+      return convertPass(password, salt);\n+    } catch (NoSuchAlgorithmException e) {\n+      log.error(\"Count not create hashed password\", e);\n+      throw new AccumuloException(\"Count not create hashed password\", e);\n+    }\n+  }\n+\n   private static byte[] hash(byte[] raw) throws NoSuchAlgorithmException {\n-    MessageDigest md = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM);\n+    MessageDigest md = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM_OUTDATED);\n     md.update(raw);\n     return md.digest();\n   }\n \n+  @Deprecated(since = \"2.1.0\")\n   public static boolean checkPass(byte[] password, byte[] zkData) {\n-    if (zkData == null)\n-      return false;\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMzYzNw=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTc4MjYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/Constants.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzozMTo0OVrOH4Nj2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODoyNToxNVrOH4aFfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNDQ3Mg==", "bodyText": "We still need this constant updated because we rely on it for hashing the system credentials? won't that prevent a rolling upgrade?\nCould we have system credentials fall back to SHA-256 with a warning? or require a configurable flag to switch it?", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528704472", "createdAt": "2020-11-23T13:31:49Z", "author": {"login": "busbey"}, "path": "core/src/main/java/org/apache/accumulo/core/Constants.java", "diffHunk": "@@ -99,7 +99,8 @@\n   public static final long SCANNER_DEFAULT_READAHEAD_THRESHOLD = 3L;\n \n   // Security configuration\n-  public static final String PW_HASH_ALGORITHM = \"SHA-256\";\n+  public static final String PW_HASH_ALGORITHM = \"SHA-512\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNjkyOQ==", "bodyText": "changing this is also going to change some non-security uses, e.g. we optionally use it to obscure values printed from rfile metrics gathering. We'll need to enumerate these and release note the change in behavior. (or we could make something like a NON_CRYPTO_USE_HASH_ALGORITHM that we keep as SHA-256)", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528706929", "createdAt": "2020-11-23T13:35:47Z", "author": {"login": "busbey"}, "path": "core/src/main/java/org/apache/accumulo/core/Constants.java", "diffHunk": "@@ -99,7 +99,8 @@\n   public static final long SCANNER_DEFAULT_READAHEAD_THRESHOLD = 3L;\n \n   // Security configuration\n-  public static final String PW_HASH_ALGORITHM = \"SHA-256\";\n+  public static final String PW_HASH_ALGORITHM = \"SHA-512\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNDQ3Mg=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwOTY5Mg==", "bodyText": "You are right. I'll make the system credentials hash customizable while defaulting to 256,  and renaming this as suggested to reflect it's for unsecure use.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528909692", "createdAt": "2020-11-23T18:25:15Z", "author": {"login": "BukrosSzabolcs"}, "path": "core/src/main/java/org/apache/accumulo/core/Constants.java", "diffHunk": "@@ -99,7 +99,8 @@\n   public static final long SCANNER_DEFAULT_READAHEAD_THRESHOLD = 3L;\n \n   // Security configuration\n-  public static final String PW_HASH_ALGORITHM = \"SHA-256\";\n+  public static final String PW_HASH_ALGORITHM = \"SHA-512\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNDQ3Mg=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjc2MjMyOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowMTo0NVrOH4W97w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo1NzozMFrOH5S-9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1ODYwNw==", "bodyText": "What's the advantage of using MessageDigest.isEqual, vs. comparing as Strings or comparing as the UTF-8 byte-array?", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528858607", "createdAt": "2020-11-23T17:01:45Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -99,6 +102,24 @@ public static boolean checkPass(byte[] password, byte[] zkData) {\n     return saltedHash; // contains salt+hash(password+salt)\n   }\n \n+  public static byte[] createPass(byte[] password) throws AccumuloException {\n+    // we rely on default algorithm and hash length (SHA-512 and 8 byte)\n+    String cryptHash = Crypt.crypt(password);\n+    return cryptHash.getBytes(CRYPT_CHARSET);\n+  }\n+\n+  public static boolean checkCryptPass(byte[] password, byte[] zkData) {\n+    String zkDataString = new String(zkData, CRYPT_CHARSET);\n+    String cryptHash;\n+    try {\n+      cryptHash = Crypt.crypt(password, zkDataString);\n+    } catch (IllegalArgumentException e) {\n+      log.error(\"Unrecognized hash format\", e);\n+      return false;\n+    }\n+    return MessageDigest.isEqual(zkData, cryptHash.getBytes(CRYPT_CHARSET));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwMDMyMw==", "bodyText": "String comparisons is not secure against timing attacks, MessageDigest.isEqual is.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528900323", "createdAt": "2020-11-23T18:08:26Z", "author": {"login": "BukrosSzabolcs"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -99,6 +102,24 @@ public static boolean checkPass(byte[] password, byte[] zkData) {\n     return saltedHash; // contains salt+hash(password+salt)\n   }\n \n+  public static byte[] createPass(byte[] password) throws AccumuloException {\n+    // we rely on default algorithm and hash length (SHA-512 and 8 byte)\n+    String cryptHash = Crypt.crypt(password);\n+    return cryptHash.getBytes(CRYPT_CHARSET);\n+  }\n+\n+  public static boolean checkCryptPass(byte[] password, byte[] zkData) {\n+    String zkDataString = new String(zkData, CRYPT_CHARSET);\n+    String cryptHash;\n+    try {\n+      cryptHash = Crypt.crypt(password, zkDataString);\n+    } catch (IllegalArgumentException e) {\n+      log.error(\"Unrecognized hash format\", e);\n+      return false;\n+    }\n+    return MessageDigest.isEqual(zkData, cryptHash.getBytes(CRYPT_CHARSET));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1ODYwNw=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MTkwOQ==", "bodyText": "Okay. Fair enough.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529841909", "createdAt": "2020-11-24T19:57:30Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -99,6 +102,24 @@ public static boolean checkPass(byte[] password, byte[] zkData) {\n     return saltedHash; // contains salt+hash(password+salt)\n   }\n \n+  public static byte[] createPass(byte[] password) throws AccumuloException {\n+    // we rely on default algorithm and hash length (SHA-512 and 8 byte)\n+    String cryptHash = Crypt.crypt(password);\n+    return cryptHash.getBytes(CRYPT_CHARSET);\n+  }\n+\n+  public static boolean checkCryptPass(byte[] password, byte[] zkData) {\n+    String zkDataString = new String(zkData, CRYPT_CHARSET);\n+    String cryptHash;\n+    try {\n+      cryptHash = Crypt.crypt(password, zkDataString);\n+    } catch (IllegalArgumentException e) {\n+      log.error(\"Unrecognized hash format\", e);\n+      return false;\n+    }\n+    return MessageDigest.isEqual(zkData, cryptHash.getBytes(CRYPT_CHARSET));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1ODYwNw=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjc2Nzk5OnYy", "diffSide": "RIGHT", "path": "server/base/src/test/java/org/apache/accumulo/server/security/handler/ZKAuthenticatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowMzoxMFrOH4XBcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODoyMDoxMlrOH4Z6SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1OTUwNg==", "bodyText": "You can simplify this JUnit test by just throwing this out of the method. JUnit will show the details of the exception in its logs.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528859506", "createdAt": "2020-11-23T17:03:10Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/test/java/org/apache/accumulo/server/security/handler/ZKAuthenticatorTest.java", "diffHunk": "@@ -88,14 +90,40 @@ public void testTableConversion() {\n \n   @Test\n   public void testEncryption() {\n+    byte[] rawPass = \"myPassword\".getBytes(Charset.forName(\"UTF-8\"));\n+    byte[] storedBytes;\n+    try {\n+      storedBytes = ZKSecurityTool.createPass(rawPass.clone());\n+      assertTrue(ZKSecurityTool.checkCryptPass(rawPass.clone(), storedBytes));\n+    } catch (AccumuloException e) {\n+      log.error(\"{}\", e.getMessage(), e);\n+      fail();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwNjgyNQ==", "bodyText": "Thank you for the suggestion!", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528906825", "createdAt": "2020-11-23T18:20:12Z", "author": {"login": "BukrosSzabolcs"}, "path": "server/base/src/test/java/org/apache/accumulo/server/security/handler/ZKAuthenticatorTest.java", "diffHunk": "@@ -88,14 +90,40 @@ public void testTableConversion() {\n \n   @Test\n   public void testEncryption() {\n+    byte[] rawPass = \"myPassword\".getBytes(Charset.forName(\"UTF-8\"));\n+    byte[] storedBytes;\n+    try {\n+      storedBytes = ZKSecurityTool.createPass(rawPass.clone());\n+      assertTrue(ZKSecurityTool.checkCryptPass(rawPass.clone(), storedBytes));\n+    } catch (AccumuloException e) {\n+      log.error(\"{}\", e.getMessage(), e);\n+      fail();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1OTUwNg=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjc3NjI4OnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/apache/accumulo/test/ZKAuthenticatorIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowNToxNFrOH4XGug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoxMzozM1rOH5M7LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MDg1OA==", "bodyText": "If we can avoid running a full ZK instance using Mini, I think we should. I think ZKAuthenticator can be tested fully using unit tests with mocking, without a need to start up an instance of a cluster.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528860858", "createdAt": "2020-11-23T17:05:14Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/ZKAuthenticatorIT.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.nio.charset.Charset;\n+\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.apache.accumulo.harness.AccumuloClusterHarness;\n+import org.apache.accumulo.server.security.handler.ZKAuthenticator;\n+import org.junit.Test;\n+\n+public class ZKAuthenticatorIT extends AccumuloClusterHarness {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0MjYzNg==", "bodyText": "It can. I'm rewriting it.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529742636", "createdAt": "2020-11-24T17:13:33Z", "author": {"login": "BukrosSzabolcs"}, "path": "test/src/main/java/org/apache/accumulo/test/ZKAuthenticatorIT.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.nio.charset.Charset;\n+\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.apache.accumulo.harness.AccumuloClusterHarness;\n+import org.apache.accumulo.server.security.handler.ZKAuthenticator;\n+import org.junit.Test;\n+\n+public class ZKAuthenticatorIT extends AccumuloClusterHarness {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MDg1OA=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjgzNTQ0OnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/security/SystemCredentials.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOToyOTozOFrOH5SCsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzozMDoyM1rOH59log==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjQ4Mg==", "bodyText": "Since system credentials are not serialized anywhere, but we do want them to be a strong hash, I think it might be best to make use of crypt(3) here also, so we're using the default best hash available in the commons-codec library.\nWe can use a fixed salt for this. We could make the salt configurable or based on instance.secret, but there's no additional security added by doing so, since instance.secret is configurable and is already included in the message digest. So, a fixed salt would suffice here. If you're not interested in pursuing this, here, it can be done as a follow-on issue. Just let me know if that's the case, so I can create a new issue for it.\nAs you've identified, the one benefit to making it configurable and preserving the current one is to support rolling restart. However, we don't support rolling restarts very well already, and certainly not across major or minor releases, and we've likely already broken compatibility of that sort during 2.1's development (or will, if we upgrade Thrift). Also, I think having a strong has for the system user is important enough to break that, even if it did otherwise work. So, I'm inclined to favor not making it configurable.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529826482", "createdAt": "2020-11-24T19:29:38Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/SystemCredentials.java", "diffHunk": "@@ -103,7 +102,8 @@ private static SystemToken get(String instanceID, SiteConfiguration siteConfig)\n       byte[] confChecksum;\n       MessageDigest md;\n       try {\n-        md = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM);\n+        String hashAlgorithm = siteConfig.get(Property.SYSTEM_TOKEN_HASH_TYPE);\n+        md = MessageDigest.getInstance(hashAlgorithm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0Mzk4Mw==", "bodyText": "I would prefer to leave this as it is for now and create a separate issue for the follow up changes and related discussion.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530243983", "createdAt": "2020-11-25T09:56:01Z", "author": {"login": "BukrosSzabolcs"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/SystemCredentials.java", "diffHunk": "@@ -103,7 +102,8 @@ private static SystemToken get(String instanceID, SiteConfiguration siteConfig)\n       byte[] confChecksum;\n       MessageDigest md;\n       try {\n-        md = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM);\n+        String hashAlgorithm = siteConfig.get(Property.SYSTEM_TOKEN_HASH_TYPE);\n+        md = MessageDigest.getInstance(hashAlgorithm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjQ4Mg=="}, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzOTkzOA==", "bodyText": "No problem. I created #1810 to deal with it as a follow-on issue.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530539938", "createdAt": "2020-11-25T17:30:23Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/SystemCredentials.java", "diffHunk": "@@ -103,7 +102,8 @@ private static SystemToken get(String instanceID, SiteConfiguration siteConfig)\n       byte[] confChecksum;\n       MessageDigest md;\n       try {\n-        md = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM);\n+        String hashAlgorithm = siteConfig.get(Property.SYSTEM_TOKEN_HASH_TYPE);\n+        md = MessageDigest.getInstance(hashAlgorithm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjQ4Mg=="}, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjg0NDk4OnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTozMjoxMlrOH5SIlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1OTowNVrOH5rqFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNzk4OA==", "bodyText": "If it makes more readable code in the callers (fewer negations), you could also flip the return values, and call this method areHashesCurrent() or similar.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529827988", "createdAt": "2020-11-24T19:32:12Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -54,6 +56,33 @@ public void initialize(ServerContext context) {\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n   }\n \n+  /**\n+   * Checks stored users and logs a warning containing the ones with outdated hashes.\n+   */\n+  public boolean hasOutdatedHashes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0NjE2NQ==", "bodyText": "I considered that too, but kept it like this because we are checking for the outdated format, and while not being outdated technically means it's the current one, the name still feels misleading.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530246165", "createdAt": "2020-11-25T09:59:05Z", "author": {"login": "BukrosSzabolcs"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -54,6 +56,33 @@ public void initialize(ServerContext context) {\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n   }\n \n+  /**\n+   * Checks stored users and logs a warning containing the ones with outdated hashes.\n+   */\n+  public boolean hasOutdatedHashes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNzk4OA=="}, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjg0ODg5OnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTozMzoyMFrOH5SK8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDowNDoxMlrOH5r35Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyODU5NA==", "bodyText": "Could inline this constant, to avoid the extra CRYPT_CHARSET variable and corresponding Charset import.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529828594", "createdAt": "2020-11-24T19:33:20Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -47,6 +51,7 @@\n class ZKSecurityTool {\n   private static final Logger log = LoggerFactory.getLogger(ZKSecurityTool.class);\n   private static final int SALT_LENGTH = 8;\n+  private static final Charset CRYPT_CHARSET = UTF_8;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0OTcwMQ==", "bodyText": "Sure, thanks for pointing it out.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530249701", "createdAt": "2020-11-25T10:04:12Z", "author": {"login": "BukrosSzabolcs"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -47,6 +51,7 @@\n class ZKSecurityTool {\n   private static final Logger log = LoggerFactory.getLogger(ZKSecurityTool.class);\n   private static final int SALT_LENGTH = 8;\n+  private static final Charset CRYPT_CHARSET = UTF_8;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyODU5NA=="}, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjk3MTc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDowODoyNlrOH5TVog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDowMzoyMlrOH50z6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NzcxNA==", "bodyText": "See my other comment about not making this configurable. However, since it is configurable, it must be the same across all servers, or they won't be able to talk to each other. In general, that would mean making this an instance.* property. However, since the way we enforce these is through the same-ness of the system credentials, if this is different across the cluster, then they won't be able to talk to each other anyway. The other property prefix we use for system-wide properties that can be different are general.*.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529847714", "createdAt": "2020-11-24T20:08:26Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -83,6 +83,14 @@\n   RPC_SASL_QOP(\"rpc.sasl.qop\", \"auth\", PropertyType.STRING,\n       \"The quality of protection to be used with SASL. Valid values are 'auth', 'auth-int',\"\n           + \" and 'auth-conf'\"),\n+  /**\n+   * @since 2.1.0\n+   */\n+  SYSTEM_TOKEN_HASH_TYPE(\"system.token.hash.type\", Constants.PW_HASH_ALGORITHM_OUTDATED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3NjE2Ng==", "bodyText": "I personally think instance seems an appropriate prefix, so it would be instance.system.token.hash.type.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530376166", "createdAt": "2020-11-25T13:32:39Z", "author": {"login": "busbey"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -83,6 +83,14 @@\n   RPC_SASL_QOP(\"rpc.sasl.qop\", \"auth\", PropertyType.STRING,\n       \"The quality of protection to be used with SASL. Valid values are 'auth', 'auth-int',\"\n           + \" and 'auth-conf'\"),\n+  /**\n+   * @since 2.1.0\n+   */\n+  SYSTEM_TOKEN_HASH_TYPE(\"system.token.hash.type\", Constants.PW_HASH_ALGORITHM_OUTDATED,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NzcxNA=="}, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5NjEzNw==", "bodyText": "Thank you for the suggestions. Adding the instance.* prefix.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530396137", "createdAt": "2020-11-25T14:03:22Z", "author": {"login": "BukrosSzabolcs"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -83,6 +83,14 @@\n   RPC_SASL_QOP(\"rpc.sasl.qop\", \"auth\", PropertyType.STRING,\n       \"The quality of protection to be used with SASL. Valid values are 'auth', 'auth-int',\"\n           + \" and 'auth-conf'\"),\n+  /**\n+   * @since 2.1.0\n+   */\n+  SYSTEM_TOKEN_HASH_TYPE(\"system.token.hash.type\", Constants.PW_HASH_ALGORITHM_OUTDATED,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NzcxNA=="}, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjk5MDA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDoxNDowNFrOH5TgXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDoxNDowNFrOH5TgXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg1MDQ2Mw==", "bodyText": "Since this use of the digest is specific to this specific metric utility's serialization, we can probably just use a local constant, rather than one in Constants.java (which I'd personally like to phase out over time).", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529850463", "createdAt": "2020-11-24T20:14:04Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java", "diffHunk": "@@ -136,12 +136,12 @@ public void printMetrics(boolean hash, String metricWord, PrintStream out) {\n         if (hash) {\n           String encodedKey = \"\";\n           try {\n-            byte[] encodedBytes = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM)\n+            byte[] encodedBytes = MessageDigest.getInstance(Constants.NON_CRYPTO_USE_HASH_ALGORITHM)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzA0ODE3OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/commands/GetSplitsCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDozMDozNVrOH5UDJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDozMDozNVrOH5UDJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg1OTM2NA==", "bodyText": "It looks like we have this exact same algorithm for creating obscured tablet identifiers implemented in at least two places. Creating a new issue (#1805) to address that separately.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529859364", "createdAt": "2020-11-24T20:30:35Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/GetSplitsCommand.java", "diffHunk": "@@ -113,7 +113,7 @@ private static String encode(final boolean encode, final Text text) {\n   private static String obscuredTabletName(final KeyExtent extent) {\n     MessageDigest digester;\n     try {\n-      digester = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM);\n+      digester = MessageDigest.getInstance(Constants.NON_CRYPTO_USE_HASH_ALGORITHM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODA4NTA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTowNTo1OFrOH87oqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMToyOTo1OFrOH9Agnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MzY3NQ==", "bodyText": "This is an odd one.  I am not sure what we are using the HASH to encrypt here.  If it is just to prevent leaking data then I think it would be OK to use the NON_CRYPTO_USE_HASH_ALGORITHM", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533653675", "createdAt": "2020-12-01T19:05:58Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java", "diffHunk": "@@ -47,6 +46,7 @@\n  */\n public class VisMetricsGatherer\n     implements MetricsGatherer<Map<String,ArrayList<VisibilityMetric>>> {\n+  static final String KEY_HASH_ALGORITHM = \"SHA-256\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY4NjY4OQ==", "bodyText": "This is an odd one. I am not sure what we are using the HASH to encrypt here. If it is just to prevent leaking data then I think it would be OK to use the NON_CRYPTO_USE_HASH_ALGORITHM\n\n@milleruntime I think this was moved here at my request to keep serialization-related constants local to the serialization code, rather than to rely on some global constant, which could have a multitude of uses. I think it's fine here.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533686689", "createdAt": "2020-12-01T20:02:58Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java", "diffHunk": "@@ -47,6 +46,7 @@\n  */\n public class VisMetricsGatherer\n     implements MetricsGatherer<Map<String,ArrayList<VisibilityMetric>>> {\n+  static final String KEY_HASH_ALGORITHM = \"SHA-256\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MzY3NQ=="}, "originalCommit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcwMDY0NQ==", "bodyText": "I don't think this is serializing anything.  I thought this method was only used by the rfile-info command. The only use i can find of printMetircs() is here: \n  \n    \n      accumulo/core/src/main/java/org/apache/accumulo/core/file/rfile/PrintInfo.java\n    \n    \n         Line 291\n      in\n      6a74b46\n    \n    \n    \n    \n\n        \n          \n           vmg.printMetrics(opts.hash, \"Visibility\", System.out);", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533700645", "createdAt": "2020-12-01T20:28:22Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java", "diffHunk": "@@ -47,6 +46,7 @@\n  */\n public class VisMetricsGatherer\n     implements MetricsGatherer<Map<String,ArrayList<VisibilityMetric>>> {\n+  static final String KEY_HASH_ALGORITHM = \"SHA-256\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MzY3NQ=="}, "originalCommit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcwOTcxOQ==", "bodyText": "By serialization, I simply mean the serial form that we use for this particular display format.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533709719", "createdAt": "2020-12-01T20:44:54Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java", "diffHunk": "@@ -47,6 +46,7 @@\n  */\n public class VisMetricsGatherer\n     implements MetricsGatherer<Map<String,ArrayList<VisibilityMetric>>> {\n+  static final String KEY_HASH_ALGORITHM = \"SHA-256\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MzY3NQ=="}, "originalCommit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxMTU0OQ==", "bodyText": "That constant can be left inside this class, because it's not being used as some sort of overall crypto strategy that necessitates it be aligned with how the other constant is being used... it's just an arbitrary choice for this particular visibility metric output format (or \"serialization algorithm\") and relates to nothing else. So, it can/should be a local constant held closer to the rest of that metric serialization algorithm. That's all I mean.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533711549", "createdAt": "2020-12-01T20:48:16Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java", "diffHunk": "@@ -47,6 +46,7 @@\n  */\n public class VisMetricsGatherer\n     implements MetricsGatherer<Map<String,ArrayList<VisibilityMetric>>> {\n+  static final String KEY_HASH_ALGORITHM = \"SHA-256\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MzY3NQ=="}, "originalCommit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczMzUzNQ==", "bodyText": "Ah I see.  It makes me wonder why are we even bother hashing it at all for display purposes.  Why not just print gobbledygook or just don't print it.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533733535", "createdAt": "2020-12-01T21:29:58Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java", "diffHunk": "@@ -47,6 +46,7 @@\n  */\n public class VisMetricsGatherer\n     implements MetricsGatherer<Map<String,ArrayList<VisibilityMetric>>> {\n+  static final String KEY_HASH_ALGORITHM = \"SHA-256\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MzY3NQ=="}, "originalCommit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODYyODA3OnYy", "diffSide": "RIGHT", "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozOToyMVrOH9AzmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo0NzoyM1rOH9BEBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczODM5Mg==", "bodyText": "I am wondering if this is the best place to validate all user creds.  On one hand, it may be better to do this for some situations every time Master starts up but on the other, it may be sufficient and more efficient to only check once on upgrade.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533738392", "createdAt": "2020-12-01T21:39:21Z", "author": {"login": "milleruntime"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java", "diffHunk": "@@ -1178,6 +1178,9 @@ boolean canSuspendTablets() {\n       log.info(\"All metrics modules registered\");\n     }\n \n+    // checking stored user hashes if any of them uses an outdated algorithm\n+    security.validateStoredUserCreditentials();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MTE4Mw==", "bodyText": "I was wondering that, too, but I kind of want users to be annoyed by it more than once, so that they actually log users in to upgrade the hashes. I was also thinking maybe the other route, and nagging logging once every few days or once a week on a running system. Once at master startup is probably a good compromise for now, though. We can get more aggressive in future releases, before eventually forcing it at upgrade.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533741183", "createdAt": "2020-12-01T21:44:39Z", "author": {"login": "ctubbsii"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java", "diffHunk": "@@ -1178,6 +1178,9 @@ boolean canSuspendTablets() {\n       log.info(\"All metrics modules registered\");\n     }\n \n+    // checking stored user hashes if any of them uses an outdated algorithm\n+    security.validateStoredUserCreditentials();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczODM5Mg=="}, "originalCommit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MjU5OA==", "bodyText": "Good point.  And we can easily move the check somewhere else in later versions.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533742598", "createdAt": "2020-12-01T21:47:23Z", "author": {"login": "milleruntime"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java", "diffHunk": "@@ -1178,6 +1178,9 @@ boolean canSuspendTablets() {\n       log.info(\"All metrics modules registered\");\n     }\n \n+    // checking stored user hashes if any of them uses an outdated algorithm\n+    security.validateStoredUserCreditentials();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczODM5Mg=="}, "originalCommit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4136, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}