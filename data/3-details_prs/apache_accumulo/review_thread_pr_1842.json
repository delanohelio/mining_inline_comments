{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMTM0MjA5", "number": 1842, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjo1NDowMlrOFHc1CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjo1NDowMlrOFHc1CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzU2NjgwOnYy", "diffSide": "LEFT", "path": "test/src/main/java/org/apache/accumulo/harness/MiniClusterHarness.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjo1NDowMlrOII7jpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjo1NDowMlrOII7jpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNTMwMg==", "bodyText": "Nice cleanup!", "url": "https://github.com/apache/accumulo/pull/1842#discussion_r546235302", "createdAt": "2020-12-19T12:54:02Z", "author": {"login": "milleruntime"}, "path": "test/src/main/java/org/apache/accumulo/harness/MiniClusterHarness.java", "diffHunk": "@@ -57,78 +58,18 @@\n public class MiniClusterHarness {\n   private static final Logger log = LoggerFactory.getLogger(MiniClusterHarness.class);\n \n-  private static final AtomicLong COUNTER = new AtomicLong(0);\n-\n   private static final String PROP_PREFIX = \"org.apache.accumulo.test.functional.\";\n   public static final String USE_SSL_FOR_IT_OPTION = PROP_PREFIX + \"useSslForIT\";\n   public static final String USE_CRED_PROVIDER_FOR_IT_OPTION = PROP_PREFIX + \"useCredProviderForIT\";\n   public static final String USE_KERBEROS_FOR_IT_OPTION = PROP_PREFIX + \"useKrbForIT\";\n   public static final String TRUE = Boolean.toString(true);\n \n-  // TODO These are defined in MiniKdc >= 2.6.0. Can be removed when minimum Hadoop dependency is\n-  // increased to that.\n-  public static final String JAVA_SECURITY_KRB5_CONF = \"java.security.krb5.conf\",\n-      SUN_SECURITY_KRB5_DEBUG = \"sun.security.krb5.debug\";\n-\n-  /**\n-   * Create a MiniAccumuloCluster using the given Token as the credentials for the root user.\n-   */\n-  public MiniAccumuloClusterImpl create(AuthenticationToken token) throws Exception {\n-    return create(MiniClusterHarness.class.getName(), Long.toString(COUNTER.incrementAndGet()),\n-        token);\n-  }\n-\n-  public MiniAccumuloClusterImpl create(AuthenticationToken token, TestingKdc kdc)\n-      throws Exception {\n-    return create(MiniClusterHarness.class.getName(), Long.toString(COUNTER.incrementAndGet()),\n-        token, kdc);\n-  }\n-\n-  public MiniAccumuloClusterImpl create(AccumuloITBase testBase, AuthenticationToken token)\n-      throws Exception {\n-    return create(testBase.getClass().getName(), testBase.testName.getMethodName(), token);\n-  }\n-\n-  public MiniAccumuloClusterImpl create(AccumuloITBase testBase, AuthenticationToken token,\n-      TestingKdc kdc) throws Exception {\n-    return create(testBase, token, kdc, MiniClusterConfigurationCallback.NO_CALLBACK);\n-  }\n-\n   public MiniAccumuloClusterImpl create(AccumuloITBase testBase, AuthenticationToken token,\n       TestingKdc kdc, MiniClusterConfigurationCallback configCallback) throws Exception {\n     return create(testBase.getClass().getName(), testBase.testName.getMethodName(), token,\n         configCallback, kdc);\n   }\n \n-  public MiniAccumuloClusterImpl create(AccumuloClusterHarness testBase, AuthenticationToken token,\n-      TestingKdc kdc) throws Exception {\n-    return create(testBase.getClass().getName(), testBase.testName.getMethodName(), token, testBase,\n-        kdc);\n-  }\n-\n-  public MiniAccumuloClusterImpl create(AccumuloClusterHarness testBase, AuthenticationToken token,\n-      MiniClusterConfigurationCallback callback) throws Exception {\n-    return create(testBase.getClass().getName(), testBase.testName.getMethodName(), token,\n-        callback);\n-  }\n-\n-  public MiniAccumuloClusterImpl create(String testClassName, String testMethodName,\n-      AuthenticationToken token) throws Exception {\n-    return create(testClassName, testMethodName, token,\n-        MiniClusterConfigurationCallback.NO_CALLBACK);\n-  }\n-\n-  public MiniAccumuloClusterImpl create(String testClassName, String testMethodName,\n-      AuthenticationToken token, TestingKdc kdc) throws Exception {\n-    return create(testClassName, testMethodName, token,\n-        MiniClusterConfigurationCallback.NO_CALLBACK, kdc);\n-  }\n-\n-  public MiniAccumuloClusterImpl create(String testClassName, String testMethodName,\n-      AuthenticationToken token, MiniClusterConfigurationCallback configCallback) throws Exception {\n-    return create(testClassName, testMethodName, token, configCallback, null);\n-  }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfd40cac250c5ba34012db40bd20a863c9fb3125"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4023, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}