{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5OTkxNTM1", "number": 1579, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMjoxMjozNlrODvXw9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTo1MjoxMlrODwJC1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTk5MDI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMjoxMjozNlrOGBwdKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo1MDozNlrOGCHWZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5NTY1Ng==", "bodyText": "This is public API and cannot change without a deprecation cycle.\nA new API is needed, which should co-exist with this one, until this one is removed.\nI didn't look at the rest of this PR, since this is a blocker right away.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404495656", "createdAt": "2020-04-07T02:12:36Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,11 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A set of directories containing the files copied by distcp from exportTable\n    * @since 1.5.0\n    */\n-  void importTable(String tableName, String importDir)\n+  void importTable(String tableName, Set<String> importDirs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87601f2f93dbd8d1fe510f5c5aa7528ea4e7e58d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MDc1OA==", "bodyText": "I took a crack at this in 7f241a7 - let me know if this is sufficient.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404870758", "createdAt": "2020-04-07T14:50:36Z", "author": {"login": "drewfarris"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,11 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A set of directories containing the files copied by distcp from exportTable\n    * @since 1.5.0\n    */\n-  void importTable(String tableName, String importDir)\n+  void importTable(String tableName, Set<String> importDirs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5NTY1Ng=="}, "originalCommit": {"oid": "87601f2f93dbd8d1fe510f5c5aa7528ea4e7e58d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjY0NTczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTo0Njo0MVrOGCKEAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxMzowMlrOGCLRSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxNTIwMw==", "bodyText": "Maybe the existing API should maintain its current behavior and only support a single dir. This avoids any surprises for existing code.  If someone wants to use the new functionality, they need to use the new API.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                importTable(tableName, Set.of(importDir.split(\",\")));\n          \n          \n            \n                importTable(tableName, Set.of(importDir));", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404915203", "createdAt": "2020-04-07T15:46:41Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java", "diffHunk": "@@ -1544,22 +1544,29 @@ public static Path findExportFile(ClientContext context, List<String> importDirs\n   @Override\n   public void importTable(String tableName, String importDir)\n       throws TableExistsException, AccumuloException, AccumuloSecurityException {\n+    importTable(tableName, Set.of(importDir.split(\",\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNDk4Ng==", "bodyText": "\ud83d\udc4d I had the same thought.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404934986", "createdAt": "2020-04-07T16:13:02Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java", "diffHunk": "@@ -1544,22 +1544,29 @@ public static Path findExportFile(ClientContext context, List<String> importDirs\n   @Override\n   public void importTable(String tableName, String importDir)\n       throws TableExistsException, AccumuloException, AccumuloSecurityException {\n+    importTable(tableName, Set.of(importDir.split(\",\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxNTIwMw=="}, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjcxNTAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjowMToyOVrOGCKwqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxNjozNVrOGCxYVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA==", "bodyText": "This does not have to be deprecated because a new method was added.  Also, do you want the method to be removed in the future?  Starting with Java 9, two parameters were added to the deprecated annotation since and forRemoval.  The default for forRemoval is false.  If deprecating, it may also be good explicitly set these.  Not sure if my syntax is correct below, I have not used these yet.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Deprecated\n          \n          \n            \n              @Deprecated(since=\"2.1.0\",forRemoval=false)\n          \n      \n    \n    \n  \n\nPersonally, I don't think the method needs to be deprecated.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404926634", "createdAt": "2020-04-07T16:01:29Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,27 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A comma-delimited list of directories containing the files copied by distcp from\n+   *          exportTable\n    * @since 1.5.0\n+   *\n+   * @deprecated since 2.1.0 use {@link #importTable(String, Set)} instead.\n+   */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNTYxMA==", "bodyText": "I don't care whether it is deprecated or not, but would prefer the original method keep the behavior from before #1060 ; I think it's fine if not.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404935610", "createdAt": "2020-04-07T16:13:53Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,27 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A comma-delimited list of directories containing the files copied by distcp from\n+   *          exportTable\n    * @since 1.5.0\n+   *\n+   * @deprecated since 2.1.0 use {@link #importTable(String, Set)} instead.\n+   */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA=="}, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5MDM3OA==", "bodyText": "This does not have to be deprecated because a new method was added.\n\nHmm, I don't understand why adding a new method eliminates the need for deprecation. The idea here would be to remove the original importTable(String, String) at some point when it is safe to do so.\nThanks for mentioning the Java 9 parameters. As such, I suspect the right annotation would be:\n@Deprecated(since=\"2.1.0\",forRemoval=true)", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404990378", "createdAt": "2020-04-07T17:34:58Z", "author": {"login": "drewfarris"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,27 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A comma-delimited list of directories containing the files copied by distcp from\n+   *          exportTable\n    * @since 1.5.0\n+   *\n+   * @deprecated since 2.1.0 use {@link #importTable(String, Set)} instead.\n+   */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA=="}, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwODQ1OQ==", "bodyText": "Hmm, I don't understand why adding a new method eliminates the need for deprecation.\n\nThe deprecation has nothing to do with the addition of the new method. It pertains to the removal of the old method.\n\nThe idea here would be to remove the original importTable(String, String) at some point when it is safe to do so.\n\nIf you think it's better to remove the old method, that's fine and it should be deprecated. It's just not a requirement to remove it.\n\n@Deprecated(since=\"2.1.0\",forRemoval=true)\n\nIf it is going to be deprecated, I agree it should be marked this way. I don't think we ever want to deprecate something and still retain it forever. The reason we deprecate stuff is so we can purge it (eventually). I wish forRemoval=true were default when they added this, because that's how I've always interpreted @Deprecated, but I recognize others may interpret it differently.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405008459", "createdAt": "2020-04-07T18:03:36Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,27 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A comma-delimited list of directories containing the files copied by distcp from\n+   *          exportTable\n    * @since 1.5.0\n+   *\n+   * @deprecated since 2.1.0 use {@link #importTable(String, Set)} instead.\n+   */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA=="}, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0NzkwMA==", "bodyText": "Hmm, I don't understand why adding a new method eliminates the need for deprecation.\n\nI was just thinking that adding the new method does not necessitate deprecating the existing one.  The existing method is not broken in any way, it still satisfies its original functionality for anyone who invested the time to write code against it in the past.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405047900", "createdAt": "2020-04-07T19:09:17Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,27 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A comma-delimited list of directories containing the files copied by distcp from\n+   *          exportTable\n    * @since 1.5.0\n+   *\n+   * @deprecated since 2.1.0 use {@link #importTable(String, Set)} instead.\n+   */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA=="}, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MzUwNg==", "bodyText": "I was just thinking that adding the new method does not necessitate deprecating the existing one. The existing method is not broken in any way, it still satisfies its original functionality for anyone who invested the time to write code against it in the past.\n\nI'm happy to go either way. I suppose I'm in favor of keeping the number of public api methods to a minimum, but I don't feel strongly about leaving the existing method around if that's a better fit for the project.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405063506", "createdAt": "2020-04-07T19:37:34Z", "author": {"login": "drewfarris"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,27 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A comma-delimited list of directories containing the files copied by distcp from\n+   *          exportTable\n    * @since 1.5.0\n+   *\n+   * @deprecated since 2.1.0 use {@link #importTable(String, Set)} instead.\n+   */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA=="}, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4OTQ0Nw==", "bodyText": "I suppose I'm in favor of keeping the number of public api methods to a minimum\n\nThat is a good goal, not sure whats best in the big scheme of things.   In my experience removing methods is most painful for indirect users of Accumulo (like someone using Accumulo via something like Rya).  Can get into a situation where you can not use the latest version of Accumulo w/o patching and rebuilding Rya.\nCould minimize clutter in the Accumulo source using a default method in the interface for the existing method (that calls the new method) and have it nowhere else.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405089447", "createdAt": "2020-04-07T20:24:23Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,27 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A comma-delimited list of directories containing the files copied by distcp from\n+   *          exportTable\n    * @since 1.5.0\n+   *\n+   * @deprecated since 2.1.0 use {@link #importTable(String, Set)} instead.\n+   */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA=="}, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1OTM4Mw==", "bodyText": "That is a good goal, not sure whats best in the big scheme of things.\n\nOk, thanks for explaining your perspective. The makes a great deal of sense. Based on this, I'm going to avoid deprecating the original method. It looks like theres precedent for default implementations in the TableOperations interface, so I'll proceed in that way.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405559383", "createdAt": "2020-04-08T14:16:35Z", "author": {"login": "drewfarris"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,27 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A comma-delimited list of directories containing the files copied by distcp from\n+   *          exportTable\n    * @since 1.5.0\n+   *\n+   * @deprecated since 2.1.0 use {@link #importTable(String, Set)} instead.\n+   */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA=="}, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjc4NTI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxNzoxOFrOGCLdZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxNzoxOFrOGCLdZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzODA4NQ==", "bodyText": "This isn't used.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404938085", "createdAt": "2020-04-07T16:17:18Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java", "diffHunk": "@@ -1544,22 +1544,29 @@ public static Path findExportFile(ClientContext context, List<String> importDirs\n   @Override\n   public void importTable(String tableName, String importDir)\n       throws TableExistsException, AccumuloException, AccumuloSecurityException {\n+    importTable(tableName, Set.of(importDir.split(\",\")));\n+  }\n+\n+  @Override\n+  public void importTable(String tableName, Set<String> importDirs)\n+      throws TableExistsException, AccumuloException, AccumuloSecurityException {\n     checkArgument(tableName != null, \"tableName is null\");\n-    checkArgument(importDir != null, \"importDir is null\");\n+    checkArgument(importDirs != null, \"importDir is null\");\n     checkArgument(tableName.length() <= MAX_TABLE_NAME_LEN,\n         \"Table name is longer than \" + MAX_TABLE_NAME_LEN + \" characters\");\n \n-    List<String> importDirs = new ArrayList<>();\n-    for (String dir : importDir.split(\",\")) {\n-      try {\n-        importDirs.add(checkPath(dir, \"Table\", \"\").toString());\n-      } catch (IOException e) {\n-        throw new AccumuloException(e);\n+    Set<String> checkedImportDirs = new HashSet<String>();\n+    try {\n+      for (String s : importDirs) {\n+        checkedImportDirs.add(checkPath(s, \"Table\", \"\").toString());\n       }\n+    } catch (IOException e) {\n+      throw new AccumuloException(e);\n     }\n+    String normedImportDir = StringUtils.join(checkedImportDirs, \",\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjc5NDU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxOToyNlrOGCLjKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxOToyNlrOGCLjKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzOTU2Mw==", "bodyText": "Since the variable was renamed, there are other places below that need to be changed from importDirs to checkedImportDirs as well.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404939563", "createdAt": "2020-04-07T16:19:26Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java", "diffHunk": "@@ -1544,22 +1544,29 @@ public static Path findExportFile(ClientContext context, List<String> importDirs\n   @Override\n   public void importTable(String tableName, String importDir)\n       throws TableExistsException, AccumuloException, AccumuloSecurityException {\n+    importTable(tableName, Set.of(importDir.split(\",\")));\n+  }\n+\n+  @Override\n+  public void importTable(String tableName, Set<String> importDirs)\n+      throws TableExistsException, AccumuloException, AccumuloSecurityException {\n     checkArgument(tableName != null, \"tableName is null\");\n-    checkArgument(importDir != null, \"importDir is null\");\n+    checkArgument(importDirs != null, \"importDir is null\");\n     checkArgument(tableName.length() <= MAX_TABLE_NAME_LEN,\n         \"Table name is longer than \" + MAX_TABLE_NAME_LEN + \" characters\");\n \n-    List<String> importDirs = new ArrayList<>();\n-    for (String dir : importDir.split(\",\")) {\n-      try {\n-        importDirs.add(checkPath(dir, \"Table\", \"\").toString());\n-      } catch (IOException e) {\n-        throw new AccumuloException(e);\n+    Set<String> checkedImportDirs = new HashSet<String>();\n+    try {\n+      for (String s : importDirs) {\n+        checkedImportDirs.add(checkPath(s, \"Table\", \"\").toString());\n       }\n+    } catch (IOException e) {\n+      throw new AccumuloException(e);\n     }\n+    String normedImportDir = StringUtils.join(checkedImportDirs, \",\");\n \n     try {\n-      Path exportFilePath = findExportFile(context, importDirs);\n+      Path exportFilePath = findExportFile(context, checkedImportDirs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjgzMTI4OnYy", "diffSide": "RIGHT", "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoyNzoxOVrOGCL5pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTo1NDowNFrOGC-kmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NTMxOQ==", "bodyText": "Since the Fate serialization has changed, it will be very important that there are no outstanding import table fate operations outstanding before upgrading. I suspect this is unlikely for most people, but may be something to call out in the release notes.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404945319", "createdAt": "2020-04-07T16:27:19Z", "author": {"login": "ctubbsii"}, "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportTable.java", "diffHunk": "@@ -53,16 +54,17 @@\n public class ImportTable extends MasterRepo {\n   private static final Logger log = LoggerFactory.getLogger(ImportTable.class);\n \n-  private static final long serialVersionUID = 1L;\n+  private static final long serialVersionUID = 2L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc3NTUxMg==", "bodyText": "I think we check before upgrade if there are any outstanding FATE ops and if so upgrade will not proceed.  So usually do not need to worry about FATE persistence across versions.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405775512", "createdAt": "2020-04-08T19:54:04Z", "author": {"login": "keith-turner"}, "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportTable.java", "diffHunk": "@@ -53,16 +54,17 @@\n public class ImportTable extends MasterRepo {\n   private static final Logger log = LoggerFactory.getLogger(ImportTable.class);\n \n-  private static final long serialVersionUID = 1L;\n+  private static final long serialVersionUID = 2L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NTMxOQ=="}, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjg1MDQ5OnYy", "diffSide": "RIGHT", "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportedTableInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjozMTo0MlrOGCMGOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjozMTo0MlrOGCMGOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0ODUzNw==", "bodyText": "Since the exportDir is set in the constructor, can we now make the field final?", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404948537", "createdAt": "2020-04-07T16:31:42Z", "author": {"login": "ctubbsii"}, "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportedTableInfo.java", "diffHunk": "@@ -38,6 +38,10 @@\n   static class DirectoryMapping implements Serializable {\n     private static final long serialVersionUID = 1L;\n \n+    public DirectoryMapping(String exportDir) {\n+      this.exportDir = exportDir;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjg2NzYzOnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/apache/accumulo/test/ImportExportIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjozNTo1MFrOGCMRCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjozNTo1MFrOGCMRCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MTMwNg==", "bodyText": "If you define this set earlier, you wouldn't need to manually concatenate them for the log message, because you could just rely on Set.toString().", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404951306", "createdAt": "2020-04-07T16:35:50Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/ImportExportIT.java", "diffHunk": "@@ -151,7 +151,8 @@ public void testExportImportThenScan() throws Exception {\n       log.info(\"Import dir B: {}\", Arrays.toString(fs.listStatus(importDirB)));\n \n       // Import the exported data into a new table\n-      client.tableOperations().importTable(destTable, importDirDlm);\n+      client.tableOperations().importTable(destTable,\n+          Set.of(importDirA.toString(), importDirB.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjg3NTA2OnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/apache/accumulo/test/NamespacesIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjozNzozOVrOGCMVvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjozNzozOVrOGCMVvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MjUxMQ==", "bodyText": "Set.of(X) is shorter than Collections.singleton(X).", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404952511", "createdAt": "2020-04-07T16:37:39Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/NamespacesIT.java", "diffHunk": "@@ -980,8 +980,8 @@ public void verifyTableOperationsExceptions() throws Exception {\n         () -> ops.clone(\"a\", tableName, true, Collections.emptyMap(), Collections.emptySet()));\n     ops.offline(\"a\", true);\n     ops.exportTable(\"a\", System.getProperty(\"user.dir\") + \"/target\");\n-    assertAccumuloExceptionNoNamespace(\n-        () -> ops.importTable(tableName, System.getProperty(\"user.dir\") + \"/target\"));\n+    assertAccumuloExceptionNoNamespace(() -> ops.importTable(tableName,\n+        Collections.singleton(System.getProperty(\"user.dir\") + \"/target\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzAyMTM4OnYy", "diffSide": "RIGHT", "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzoxMzowMFrOGCNzFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODowNTo0OFrOGCP1ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3NjQwNQ==", "bodyText": "@ctubbsii @keith-turner - Predicate.not was added in Java 11 and I expected the build to fail when I used it, but it didn't. What runtimes are we supporting for 2.1.x?", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404976405", "createdAt": "2020-04-07T17:13:00Z", "author": {"login": "drewfarris"}, "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportTable.java", "diffHunk": "@@ -19,13 +19,14 @@\n package org.apache.accumulo.master.tableOps.tableImport;\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.function.Predicate.not;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwOTc2NQ==", "bodyText": "2.1 is targeting Java 11.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405009765", "createdAt": "2020-04-07T18:05:48Z", "author": {"login": "ctubbsii"}, "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportTable.java", "diffHunk": "@@ -19,13 +19,14 @@\n package org.apache.accumulo.master.tableOps.tableImport;\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.function.Predicate.not;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3NjQwNQ=="}, "originalCommit": {"oid": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzk3ODg3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTozOTozM1rOGCXJGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTozOTozM1rOGCXJGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyOTQ5Ng==", "bodyText": "This javadoc is no longer true.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405129496", "createdAt": "2020-04-07T21:39:33Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,27 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A comma-delimited list of directories containing the files copied by distcp from\n+   *          exportTable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4537bfe340dde0e3bed5d6aec9249ce331be6ab2"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzk4MDc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo0MDowNVrOGCXKKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo0MDowNVrOGCXKKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyOTc2OQ==", "bodyText": "I think this should be singular \"importDir\" now (or whatever it was called before the changes in #1060 )", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405129769", "createdAt": "2020-04-07T21:40:05Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,27 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A comma-delimited list of directories containing the files copied by distcp from\n+   *          exportTable\n    * @since 1.5.0\n+   *\n+   * @deprecated since 2.1.0 use {@link #importTable(String, Set)} instead.\n+   */\n+  @Deprecated(since = \"2.1.0\", forRemoval = true)\n+  void importTable(String tableName, String importDirs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4537bfe340dde0e3bed5d6aec9249ce331be6ab2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjkyNjgyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/TableOperationsHelperTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDo1OTo1NlrOGCzVyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDo1OTo1NlrOGCzVyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5MTQ5Ng==", "bodyText": "If you're using a default method in the interface, the corresponding methods can be deleted from the implementing classes. I would check all subclasses and remove any that aren't needed.", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405591496", "createdAt": "2020-04-08T14:59:56Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/TableOperationsHelperTest.java", "diffHunk": "@@ -199,6 +199,9 @@ public void clearLocatorCache(String tableName) {}\n     @Override\n     public void importTable(String tableName, String exportDir) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "756acaab4a41f15a68e9d2dbdbbe8c610d129905"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODA2NDIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTo1MjoxMlrOGC-gPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTo1MjoxMlrOGC-gPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc3NDM5OQ==", "bodyText": "Is there anything that would be worth mentioning about the metadata zip file and multiple dirs here?", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405774399", "createdAt": "2020-04-08T19:52:12Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -177,10 +177,25 @@ void create(String tableName, NewTableConfiguration ntc)\n    * @param tableName\n    *          Name of a table to create and import into.\n    * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   *          A directory containing the files copied by distcp from exportTable\n    * @since 1.5.0\n+   *\n+   */\n+  default void importTable(String tableName, String importDir)\n+      throws TableExistsException, AccumuloException, AccumuloSecurityException {\n+    importTable(tableName, Set.of(importDir));\n+  }\n+\n+  /**\n+   * Imports a table exported via exportTable and copied via hadoop distcp.\n+   *\n+   * @param tableName\n+   *          Name of a table to create and import into.\n+   * @param importDirs\n+   *          A set of directories containing the files copied by distcp from exportTable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4230, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}