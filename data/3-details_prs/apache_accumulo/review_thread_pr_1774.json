{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODE3NTgz", "number": 1774, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzowNjoxN1rOE3hsaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjo0NjowN1rOE6HQOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjU5MTc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzowNjoxN1rOHw7X3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNTo1NDo1OFrOH08K_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA2NjQ2MA==", "bodyText": "This seems like a regression. In general, unless you're printing something, it's better to use a more specific type than a String type, and a more specific method name than toString(), since toString() should not be relied upon to not change over time.", "url": "https://github.com/apache/accumulo/pull/1774#discussion_r521066460", "createdAt": "2020-11-11T03:06:17Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java", "diffHunk": "@@ -1301,7 +1301,7 @@ private void waitForTableStateTransition(TableId tableId, TableState expectedSta\n           lastRow = tablet.getExtent().toMetaRow();\n \n           if (loc != null) {\n-            serverCounts.increment(loc.getId(), 1);\n+            serverCounts.increment(loc.toString(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a5d253249359f8863ad1b54126852e958820d4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2NjYwNw==", "bodyText": "They should be returning the same thing, but I don't think either method name is appropriate.  Looking at the impl, they both ultimately return hostPort() + \"[\" + session + \"]\".\nMaybe something very explicit like getHostPortSession() would be better.  Then it will be clear what parts of the code we need to change if we drop/change the session.", "url": "https://github.com/apache/accumulo/pull/1774#discussion_r522266607", "createdAt": "2020-11-12T17:03:40Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java", "diffHunk": "@@ -1301,7 +1301,7 @@ private void waitForTableStateTransition(TableId tableId, TableState expectedSta\n           lastRow = tablet.getExtent().toMetaRow();\n \n           if (loc != null) {\n-            serverCounts.increment(loc.getId(), 1);\n+            serverCounts.increment(loc.toString(), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA2NjQ2MA=="}, "originalCommit": {"oid": "80a5d253249359f8863ad1b54126852e958820d4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3Mzg1NQ==", "bodyText": "Maybe something very explicit like getHostPortSession() would be better. Then it will be clear what parts of the code we need to change if we drop/change the session.\n\n\ud83d\udc4d", "url": "https://github.com/apache/accumulo/pull/1774#discussion_r525273855", "createdAt": "2020-11-17T15:54:58Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java", "diffHunk": "@@ -1301,7 +1301,7 @@ private void waitForTableStateTransition(TableId tableId, TableState expectedSta\n           lastRow = tablet.getExtent().toMetaRow();\n \n           if (loc != null) {\n-            serverCounts.increment(loc.getId(), 1);\n+            serverCounts.increment(loc.toString(), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA2NjQ2MA=="}, "originalCommit": {"oid": "80a5d253249359f8863ad1b54126852e958820d4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjYwNjkwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletMetadataTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzowOTowOFrOHw7iCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzowNToyMlrOHyEtEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA2OTA2Ng==", "bodyText": "getLocation().getLocation() seems funny here. Too many types known as 'location'.", "url": "https://github.com/apache/accumulo/pull/1774#discussion_r521069066", "createdAt": "2020-11-11T03:09:08Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletMetadataTest.java", "diffHunk": "@@ -145,7 +145,7 @@ public void testFuture() {\n         EnumSet.allOf(ColumnType.class), false);\n \n     assertEquals(extent, tm.getExtent());\n-    assertEquals(HostAndPort.fromParts(\"server1\", 8555), tm.getLocation().getHostAndPort());\n+    assertEquals(HostAndPort.fromParts(\"server1\", 8555), tm.getLocation().getLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a5d253249359f8863ad1b54126852e958820d4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2NzkyMg==", "bodyText": "Yes.  This is holdover from the temp interface in Ample.  I thought I had dropped this but I got side tracked.  I will drop this interface in the next commit.", "url": "https://github.com/apache/accumulo/pull/1774#discussion_r522267922", "createdAt": "2020-11-12T17:05:22Z", "author": {"login": "milleruntime"}, "path": "core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletMetadataTest.java", "diffHunk": "@@ -145,7 +145,7 @@ public void testFuture() {\n         EnumSet.allOf(ColumnType.class), false);\n \n     assertEquals(extent, tm.getExtent());\n-    assertEquals(HostAndPort.fromParts(\"server1\", 8555), tm.getLocation().getHostAndPort());\n+    assertEquals(HostAndPort.fromParts(\"server1\", 8555), tm.getLocation().getLocation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA2OTA2Ng=="}, "originalCommit": {"oid": "80a5d253249359f8863ad1b54126852e958820d4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTU0NDEwOnYy", "diffSide": "RIGHT", "path": "server/manager/src/main/java/org/apache/accumulo/master/MasterClientServiceHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjowMTowNFrOH0V-Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToyMjozOFrOH06I-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY0ODAyMg==", "bodyText": "The constructor can still use this type, since that won't affect serialization. The fields can be derived from the constructor parameter, rather than passed in as separate parameters.", "url": "https://github.com/apache/accumulo/pull/1774#discussion_r524648022", "createdAt": "2020-11-16T22:01:04Z", "author": {"login": "ctubbsii"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/MasterClientServiceHandler.java", "diffHunk": "@@ -278,7 +278,9 @@ public void shutdownTabletServer(TInfo info, TCredentials c, String tabletServer\n \n     log.debug(\"Seeding FATE op to shutdown \" + tabletServer + \" with tid \" + tid);\n \n-    master.fate.seedTransaction(tid, new TraceRepo<>(new ShutdownTServer(doomed, force)), false);\n+    master.fate.seedTransaction(tid,\n+        new TraceRepo<>(new ShutdownTServer(doomed.getHostAndPort(), doomed.getSession(), force)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b735d2291bc59c416c049079b8f182d08511828f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0MDU3MQ==", "bodyText": "Oh yeah, good idea.", "url": "https://github.com/apache/accumulo/pull/1774#discussion_r525240571", "createdAt": "2020-11-17T15:22:38Z", "author": {"login": "milleruntime"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/MasterClientServiceHandler.java", "diffHunk": "@@ -278,7 +278,9 @@ public void shutdownTabletServer(TInfo info, TCredentials c, String tabletServer\n \n     log.debug(\"Seeding FATE op to shutdown \" + tabletServer + \" with tid \" + tid);\n \n-    master.fate.seedTransaction(tid, new TraceRepo<>(new ShutdownTServer(doomed, force)), false);\n+    master.fate.seedTransaction(tid,\n+        new TraceRepo<>(new ShutdownTServer(doomed.getHostAndPort(), doomed.getSession(), force)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY0ODAyMg=="}, "originalCommit": {"oid": "b735d2291bc59c416c049079b8f182d08511828f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzcxNzA1OnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/master/balancer/GroupBalancer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjo0NjowN1rOH0-seA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjo0NjowN1rOH0-seA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxNTE5Mg==", "bodyText": "Nice cleanup here.", "url": "https://github.com/apache/accumulo/pull/1774#discussion_r525315192", "createdAt": "2020-11-17T16:46:07Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/master/balancer/GroupBalancer.java", "diffHunk": "@@ -79,21 +79,13 @@ public GroupBalancer(TableId tableId) {\n     this.tableId = tableId;\n   }\n \n-  protected Iterable<Pair<KeyExtent,Location>> getLocationProvider() {\n-    return () -> {\n-      try {\n-        return TabletsMetadata.builder().forTable(tableId).fetch(LOCATION, PREV_ROW).build(context)\n-            .stream().map(tm -> {\n-              Location loc = Location.NONE;\n-              if (tm.hasCurrent()) {\n-                loc = new Location(new TServerInstance(tm.getLocation()));\n-              }\n-              return new Pair<>(tm.getExtent(), loc);\n-            }).iterator();\n-      } catch (Exception e) {\n-        throw new RuntimeException(e);\n-      }\n-    };\n+  protected Map<KeyExtent,TServerInstance> getLocationProvider() {\n+    Map<KeyExtent,TServerInstance> tablets = new LinkedHashMap<>();\n+    for (var tm : TabletsMetadata.builder().forTable(tableId).fetch(LOCATION, PREV_ROW)\n+        .build(context)) {\n+      tablets.put(tm.getExtent(), tm.getLocation());\n+    }\n+    return tablets;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f85258ebfa3b80ad3b209704a4072d57b8676b7"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4110, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}