{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MDc0ODQy", "number": 1744, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTo0OTozNFrOEv_Zmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTo0OTozNFrOEv_Zmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzU3Mjc1OnYy", "diffSide": "RIGHT", "path": "server/manager/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTo0OTozNFrOHlSbYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOToxMzo1OVrOHl_jww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI4Mg==", "bodyText": "This always constructs the the 'default' new MergeStats(new MergeInfo())), even if already exists in currentMerges. To avoid that, you could use the following instead of getOrDefault:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          k -> currentMerges.getOrDefault(k, new MergeStats(new MergeInfo())));\n          \n          \n            \n                          k -> {\n          \n          \n            \n                            var mergeStats = currentMerges.get(k);\n          \n          \n            \n                            return mergeStats != null ? mergeStats : new MergeStats(new MergeInfo());\n          \n          \n            \n                          });", "url": "https://github.com/apache/accumulo/pull/1744#discussion_r508861282", "createdAt": "2020-10-20T21:49:34Z", "author": {"login": "ctubbsii"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java", "diffHunk": "@@ -214,14 +214,8 @@ public void run() {\n           TableId tableId = tls.extent.tableId();\n           TableConfiguration tableConf = this.master.getContext().getTableConfiguration(tableId);\n \n-          MergeStats mergeStats = mergeStatsCache.get(tableId);\n-          if (mergeStats == null) {\n-            mergeStats = currentMerges.get(tableId);\n-            if (mergeStats == null) {\n-              mergeStats = new MergeStats(new MergeInfo());\n-            }\n-            mergeStatsCache.put(tableId, mergeStats);\n-          }\n+          MergeStats mergeStats = mergeStatsCache.computeIfAbsent(tableId,\n+              k -> currentMerges.getOrDefault(k, new MergeStats(new MergeInfo())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23b62584cd01fc95bbffb151a10659862689b9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM0MDQ1MA==", "bodyText": "Now you got me thinking, how does map.getOrDefault(k, new MergeInfo()) behave differently from log.debug(\"Merge: {}\", new MergeInfo())?  Does slf4j have a special ability to not call the method on the interface based on logging level vs the default method on the Map interface, which will always execute the method?", "url": "https://github.com/apache/accumulo/pull/1744#discussion_r509340450", "createdAt": "2020-10-21T14:33:05Z", "author": {"login": "milleruntime"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java", "diffHunk": "@@ -214,14 +214,8 @@ public void run() {\n           TableId tableId = tls.extent.tableId();\n           TableConfiguration tableConf = this.master.getContext().getTableConfiguration(tableId);\n \n-          MergeStats mergeStats = mergeStatsCache.get(tableId);\n-          if (mergeStats == null) {\n-            mergeStats = currentMerges.get(tableId);\n-            if (mergeStats == null) {\n-              mergeStats = new MergeStats(new MergeInfo());\n-            }\n-            mergeStatsCache.put(tableId, mergeStats);\n-          }\n+          MergeStats mergeStats = mergeStatsCache.computeIfAbsent(tableId,\n+              k -> currentMerges.getOrDefault(k, new MergeStats(new MergeInfo())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI4Mg=="}, "originalCommit": {"oid": "d23b62584cd01fc95bbffb151a10659862689b9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM2MTA4OQ==", "bodyText": "I guess I am confusing how sl4j doesn't create unnecessary objects with the creation of an object when it is passed it as a parameter.  If new Object() is passed as a parameter to a method, it will always create the object when the method is executed.", "url": "https://github.com/apache/accumulo/pull/1744#discussion_r509361089", "createdAt": "2020-10-21T14:57:20Z", "author": {"login": "milleruntime"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java", "diffHunk": "@@ -214,14 +214,8 @@ public void run() {\n           TableId tableId = tls.extent.tableId();\n           TableConfiguration tableConf = this.master.getContext().getTableConfiguration(tableId);\n \n-          MergeStats mergeStats = mergeStatsCache.get(tableId);\n-          if (mergeStats == null) {\n-            mergeStats = currentMerges.get(tableId);\n-            if (mergeStats == null) {\n-              mergeStats = new MergeStats(new MergeInfo());\n-            }\n-            mergeStatsCache.put(tableId, mergeStats);\n-          }\n+          MergeStats mergeStats = mergeStatsCache.computeIfAbsent(tableId,\n+              k -> currentMerges.getOrDefault(k, new MergeStats(new MergeInfo())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI4Mg=="}, "originalCommit": {"oid": "d23b62584cd01fc95bbffb151a10659862689b9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzNjIwNA==", "bodyText": "To clarify, this code will throw an exception even at the \"info\" level:\npublic class Slf4jLoggingTest {\n    private static Logger log = LoggerFactory.getLogger(Slf4jLoggingTest.class);\n\n    public static void main(String[] args) {\n        log.info(\"Start main\");\n        log.debug(\"debug called: {}\", expensiveCall());\n        log.info(\"Finished\");\n    }\n    public static String expensiveCall() {\n        if (true)\n            throw new UnsupportedOperationException(\"Do not call\");\n        return \"expensive string\";\n    }\n}\n\nThis code is actually passing a method but its the same idea.  The method will get called to get the string it returns in the same way new Object() will get resolved.", "url": "https://github.com/apache/accumulo/pull/1744#discussion_r509436204", "createdAt": "2020-10-21T16:37:52Z", "author": {"login": "milleruntime"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java", "diffHunk": "@@ -214,14 +214,8 @@ public void run() {\n           TableId tableId = tls.extent.tableId();\n           TableConfiguration tableConf = this.master.getContext().getTableConfiguration(tableId);\n \n-          MergeStats mergeStats = mergeStatsCache.get(tableId);\n-          if (mergeStats == null) {\n-            mergeStats = currentMerges.get(tableId);\n-            if (mergeStats == null) {\n-              mergeStats = new MergeStats(new MergeInfo());\n-            }\n-            mergeStatsCache.put(tableId, mergeStats);\n-          }\n+          MergeStats mergeStats = mergeStatsCache.computeIfAbsent(tableId,\n+              k -> currentMerges.getOrDefault(k, new MergeStats(new MergeInfo())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI4Mg=="}, "originalCommit": {"oid": "d23b62584cd01fc95bbffb151a10659862689b9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0MTY0Nw==", "bodyText": "With log4j 2 - it appears that lambdas can be used to provide lazy behavior.\nlog.debug(\"debug called: {}\", () -> expensiveCall());\nWould avoid the call if debug level logging was not enabled.", "url": "https://github.com/apache/accumulo/pull/1744#discussion_r509441647", "createdAt": "2020-10-21T16:45:50Z", "author": {"login": "EdColeman"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java", "diffHunk": "@@ -214,14 +214,8 @@ public void run() {\n           TableId tableId = tls.extent.tableId();\n           TableConfiguration tableConf = this.master.getContext().getTableConfiguration(tableId);\n \n-          MergeStats mergeStats = mergeStatsCache.get(tableId);\n-          if (mergeStats == null) {\n-            mergeStats = currentMerges.get(tableId);\n-            if (mergeStats == null) {\n-              mergeStats = new MergeStats(new MergeInfo());\n-            }\n-            mergeStatsCache.put(tableId, mergeStats);\n-          }\n+          MergeStats mergeStats = mergeStatsCache.computeIfAbsent(tableId,\n+              k -> currentMerges.getOrDefault(k, new MergeStats(new MergeInfo())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI4Mg=="}, "originalCommit": {"oid": "d23b62584cd01fc95bbffb151a10659862689b9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0ODg4Mg==", "bodyText": "This does work if you explicitly call the Log4j2 logger.  Lambdas aren't implemented yet in slf4fj.  There is an alpha version though: https://jira.qos.ch/browse/SLF4J-371", "url": "https://github.com/apache/accumulo/pull/1744#discussion_r509448882", "createdAt": "2020-10-21T16:56:30Z", "author": {"login": "milleruntime"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java", "diffHunk": "@@ -214,14 +214,8 @@ public void run() {\n           TableId tableId = tls.extent.tableId();\n           TableConfiguration tableConf = this.master.getContext().getTableConfiguration(tableId);\n \n-          MergeStats mergeStats = mergeStatsCache.get(tableId);\n-          if (mergeStats == null) {\n-            mergeStats = currentMerges.get(tableId);\n-            if (mergeStats == null) {\n-              mergeStats = new MergeStats(new MergeInfo());\n-            }\n-            mergeStatsCache.put(tableId, mergeStats);\n-          }\n+          MergeStats mergeStats = mergeStatsCache.computeIfAbsent(tableId,\n+              k -> currentMerges.getOrDefault(k, new MergeStats(new MergeInfo())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI4Mg=="}, "originalCommit": {"oid": "d23b62584cd01fc95bbffb151a10659862689b9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYwMDcwNw==", "bodyText": "Yeah, the same issue would apply to our slf4j debug statments... which is why we typically wrap stuff in an if block to check the log level .isTraceEnabled() first, to avoid making expensive objects.", "url": "https://github.com/apache/accumulo/pull/1744#discussion_r509600707", "createdAt": "2020-10-21T19:13:59Z", "author": {"login": "ctubbsii"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java", "diffHunk": "@@ -214,14 +214,8 @@ public void run() {\n           TableId tableId = tls.extent.tableId();\n           TableConfiguration tableConf = this.master.getContext().getTableConfiguration(tableId);\n \n-          MergeStats mergeStats = mergeStatsCache.get(tableId);\n-          if (mergeStats == null) {\n-            mergeStats = currentMerges.get(tableId);\n-            if (mergeStats == null) {\n-              mergeStats = new MergeStats(new MergeInfo());\n-            }\n-            mergeStatsCache.put(tableId, mergeStats);\n-          }\n+          MergeStats mergeStats = mergeStatsCache.computeIfAbsent(tableId,\n+              k -> currentMerges.getOrDefault(k, new MergeStats(new MergeInfo())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI4Mg=="}, "originalCommit": {"oid": "d23b62584cd01fc95bbffb151a10659862689b9a"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4070, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}