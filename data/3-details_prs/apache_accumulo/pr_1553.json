{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTMzODk0", "number": 1553, "title": "Simplify some VolumeManager tooling", "bodyText": "Replace getVolumeByPath(p).getFileSystem() with getFileSystemByPath(p)\n(no caller used getVolumeByPath without immediately calling getFileSystem)\nRemove redundant null checks for path argument by pushing down into\ngetFileSystemByPath method\nRemove unneeded NonConfiguredVolume class and test\nRemove unneeded (and unused) VolumeManager.getContentSummary\nRename create method with overwrite capability to make API more clear\nRetain all exceptions when closing filesystems (as suppressed)\nSimplify/shorten implementations for VolumeManagerImpl methods\nMake VolumeManager AutoCloseable (it already had a close method)\nFix tests (ZooLockTest -> ZooLockIT, and numerous incorrect usages of\nTemporaryFolder)", "createdAt": "2020-03-07T11:09:00Z", "url": "https://github.com/apache/accumulo/pull/1553", "merged": true, "mergeCommit": {"oid": "dd4a488a9077cdd5e90cbff89fbcf7e9147381a7"}, "closed": true, "closedAt": "2020-03-09T18:02:29Z", "author": {"login": "ctubbsii"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLStCaAH2gAyMzg1MTMzODk0OmJmMWNhOGZkOWNlYWQ0ZGQ1MDgxMzNmODIyOTQzOTk3YTk2YzMxYWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMBgnNAFqTM3MTI4OTQwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bf1ca8fd9cead4dd508133f822943997a96c31ad", "author": {"user": {"login": "ctubbsii", "name": "Christopher Tubbs"}}, "url": "https://github.com/apache/accumulo/commit/bf1ca8fd9cead4dd508133f822943997a96c31ad", "committedDate": "2020-03-07T11:06:44Z", "message": "Simplify some VolumeManager tooling\n\n* Replace getVolumeByPath(p).getFileSystem() with getFileSystemByPath(p)\n  (no caller used getVolumeByPath without immediately calling getFileSystem)\n* Remove redundant null checks for path argument by pushing down into\n  getFileSystemByPath method\n* Remove unneeded NonConfiguredVolume class and test\n* Remove unneeded (and unused) VolumeManager.getContentSummary\n* Rename create method with overwrite capability to make API more clear\n* Retain all exceptions when closing filesystems (as suppressed)\n* Simplify/shorten implementations for VolumeManagerImpl methods\n* Make VolumeManager AutoCloseable (it already had a close method)\n* Fix tests (ZooLockTest -> ZooLockIT, and numerous incorrect usages of\n  TemporaryFolder)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5988eb4228343c07ff7ae878b7cfbdf11848bc0", "author": {"user": {"login": "ctubbsii", "name": "Christopher Tubbs"}}, "url": "https://github.com/apache/accumulo/commit/e5988eb4228343c07ff7ae878b7cfbdf11848bc0", "committedDate": "2020-03-07T11:11:03Z", "message": "Clean up ViewFs related VolumeManager tooling\n\nRemove ViewFSUtils and corresponding test, since we don't need it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "811cd4141c54282cf26d1638f0eff4fb57579881", "author": {"user": {"login": "ctubbsii", "name": "Christopher Tubbs"}}, "url": "https://github.com/apache/accumulo/commit/811cd4141c54282cf26d1638f0eff4fb57579881", "committedDate": "2020-03-08T02:02:43Z", "message": "Use instanceof to check for ViewFs\n\nThe mechanism deployed in Hadoop's ViewFileSystemUtil to check if a\nFileSystem is ViewFs does so by checking the URI scheme. However that\ncode is not stable public API, so I had previously implemented the log\ncloser to check for ViewFs using the same implementation, but using only\nstable public APIs from Hadoop. That didn't work, because RawFileSystem\ndoesn't implement the getScheme method. So, use instanceof instead, even\nthough ViewFileSystem itself is an evolving API (even though it is\nevolving, the class name is unlikely to change)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba09677138f781065b83742e2d699984d5aebece", "author": {"user": {"login": "ctubbsii", "name": "Christopher Tubbs"}}, "url": "https://github.com/apache/accumulo/commit/ba09677138f781065b83742e2d699984d5aebece", "committedDate": "2020-03-08T05:53:42Z", "message": "Tweak timeout of IT that fails"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjg5NDA3", "url": "https://github.com/apache/accumulo/pull/1553#pullrequestreview-371289407", "createdAt": "2020-03-09T15:34:26Z", "commit": {"oid": "ba09677138f781065b83742e2d699984d5aebece"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozNDoyNlrOFztvXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzozNjowNFrOFzykWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MTEwMQ==", "bodyText": "Could use VisibleForTesting annotation.", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389771101", "createdAt": "2020-03-09T15:34:26Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -95,23 +94,18 @@ protected VolumeManagerImpl(Map<String,Volume> volumes, Volume defaultVolume,\n     this.hadoopConf = hadoopConf;\n   }\n \n-  private void invertVolumesByFileSystem(Map<String,Volume> forward,\n-      Multimap<URI,Volume> inverted) {\n-    for (Volume volume : forward.values()) {\n-      inverted.put(volume.getFileSystem().getUri(), volume);\n-    }\n+  private Multimap<URI,Volume> invertVolumesByFileSystem(Map<String,Volume> forward) {\n+    Multimap<URI,Volume> inverted = HashMultimap.create();\n+    forward.values().forEach(volume -> inverted.put(volume.getFileSystem().getUri(), volume));\n+    return inverted;\n   }\n \n-  public static org.apache.accumulo.server.fs.VolumeManager getLocal(String localBasePath)\n-      throws IOException {\n+  // for testing only\n+  public static VolumeManager getLocalForTesting(String localBasePath) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba09677138f781065b83742e2d699984d5aebece"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxODAzMA==", "bodyText": "Nice replacement.  Could use method reference here too:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }).map((String opt) -> new Path(opt)).findFirst().orElse(null);\n          \n          \n            \n                }).map(Path::new).findFirst().orElse(null);", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389818030", "createdAt": "2020-03-09T16:45:28Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -381,35 +343,17 @@ public boolean isReady() throws IOException {\n \n   @Override\n   public FileStatus[] globStatus(Path pathPattern) throws IOException {\n-    return getVolumeByPath(pathPattern).getFileSystem().globStatus(pathPattern);\n+    return getFileSystemByPath(pathPattern).globStatus(pathPattern);\n   }\n \n   @Override\n   public Path matchingFileSystem(Path source, Set<String> options) {\n-    try {\n-      if (ViewFSUtils.isViewFS(source, hadoopConf)) {\n-        return ViewFSUtils.matchingFileSystem(source, options, hadoopConf);\n-      }\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-\n-    URI uri1 = source.toUri();\n-    for (String option : options) {\n-      URI uri3 = URI.create(option);\n-      if (uri1.getScheme().equals(uri3.getScheme())) {\n-        String a1 = uri1.getAuthority();\n-        String a2 = uri3.getAuthority();\n-        if ((a1 == null && a2 == null) || (a1 != null && a1.equals(a2)))\n-          return new Path(option);\n-      }\n-    }\n-    return null;\n-  }\n-\n-  @Override\n-  public ContentSummary getContentSummary(Path dir) throws IOException {\n-    return getVolumeByPath(dir).getFileSystem().getContentSummary(dir);\n+    URI sourceUri = source.toUri();\n+    return options.stream().filter(opt -> {\n+      URI optUri = URI.create(opt);\n+      return sourceUri.getScheme().equals(optUri.getScheme())\n+          && Objects.equals(sourceUri.getAuthority(), optUri.getAuthority());\n+    }).map((String opt) -> new Path(opt)).findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba09677138f781065b83742e2d699984d5aebece"}, "originalPosition": 369}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MDIwMQ==", "bodyText": "This is cool.  Won't this delete the entire target directory though? If that is the case then I would imagine this would interfere with the build. Or is it anything that is created under this test that gets removed?  It is not clear from the javadoc.", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389850201", "createdAt": "2020-03-09T17:36:04Z", "author": {"login": "milleruntime"}, "path": "server/tserver/src/test/java/org/apache/accumulo/tserver/log/SortedLogRecoveryTest.java", "diffHunk": "@@ -71,6 +70,10 @@\n   static final Text cq = new Text(\"cq\");\n   static final Value value = new Value(\"value\");\n \n+  @Rule\n+  public TemporaryFolder tempFolder =\n+      new TemporaryFolder(new File(System.getProperty(\"user.dir\") + \"/target\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba09677138f781065b83742e2d699984d5aebece"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1881, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}