{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MTAyNjY3", "number": 1489, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTozNDo1MlrODb9Xtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo0MzowOFrODb9kPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjQzNjM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooSession.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTozNDo1MlrOFjvaaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTozNDo1MlrOFjvaaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAyMTI4OQ==", "bodyText": "I don't think any of this is necessary to keep in the code, since it is explaining why the code was changed, and not explaining the code that is there at the end.", "url": "https://github.com/apache/accumulo/pull/1489#discussion_r373021289", "createdAt": "2020-01-30T15:34:52Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooSession.java", "diffHunk": "@@ -119,8 +119,19 @@ public static ZooKeeper connect(String host, int timeout, String scheme, byte[]\n     boolean tryAgain = true;\n     long sleepTime = 100;\n     ZooKeeper zooKeeper = null;\n-\n-    long startTime = System.currentTimeMillis();\n+    /*\n+     * Originally, startTime = System.currentTimeMillis(). Changed to System.nanoTime() to more\n+     * accurately compute durations because it is not based on system clock variations. The\n+     * ZooKeeper method signature expects an int value for 'timeout' and performs several\n+     * calculations that can result in Numeric Expression Overflow errors if large, nanosecond\n+     * values are used. For ths reason, System.nanoTime() is is converted to MS units prior to being\n+     * used in calculations. Although, the resolution of 'startTime' is still in the MS range, the\n+     * value from which it is calculated is nanoTime. Also, the MS units are preserved in the\n+     * original method code, without the need for conversion. TimeUnit.convert is not used because\n+     * \"conversions from fine to coarser granularities truncate, so lose precision\" (Oracle Java 7\n+     * API)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45584952e066da7f9bbd73c88c650474b2142392"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjQ2ODQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooSession.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo0MzowOFrOFjvujA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDowMzowMlrOFkMO6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAyNjQ0NA==", "bodyText": "It's not a good idea to divide here, since it is the differences between two nano-times that matter, and you are losing precision here in a way that could affect the subtraction later.\nThe correct pattern to do the conversion to millis would be something like this:\nlong startTime = System.nanoTime();\n// code here...\nlong laterTime = System.nanoTime();\nlong timeDurationMillis = TimeUnit.NANOSECONDS.toMillis(laterTime - startTime);\nIt is okay to use the TimeUnit conversions here, and lose precision, because it's okay to lose the precision in the difference. It is not okay to lose precision on the values before computing the difference in times. (Also, using this method to convert is the same as dividing... they both lose precision in the same way.)", "url": "https://github.com/apache/accumulo/pull/1489#discussion_r373026444", "createdAt": "2020-01-30T15:43:08Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooSession.java", "diffHunk": "@@ -119,8 +119,19 @@ public static ZooKeeper connect(String host, int timeout, String scheme, byte[]\n     boolean tryAgain = true;\n     long sleepTime = 100;\n     ZooKeeper zooKeeper = null;\n-\n-    long startTime = System.currentTimeMillis();\n+    /*\n+     * Originally, startTime = System.currentTimeMillis(). Changed to System.nanoTime() to more\n+     * accurately compute durations because it is not based on system clock variations. The\n+     * ZooKeeper method signature expects an int value for 'timeout' and performs several\n+     * calculations that can result in Numeric Expression Overflow errors if large, nanosecond\n+     * values are used. For ths reason, System.nanoTime() is is converted to MS units prior to being\n+     * used in calculations. Although, the resolution of 'startTime' is still in the MS range, the\n+     * value from which it is calculated is nanoTime. Also, the MS units are preserved in the\n+     * original method code, without the need for conversion. TimeUnit.convert is not used because\n+     * \"conversions from fine to coarser granularities truncate, so lose precision\" (Oracle Java 7\n+     * API)\n+     */\n+    long startTime = System.nanoTime() / 1000000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45584952e066da7f9bbd73c88c650474b2142392"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4NTMxNA==", "bodyText": "Indeed, that makes more sense. Working the issue along those lines, there are two sections in ZooSession where calculations are performed using millis values for all the operands:\n      if (System.currentTimeMillis() - startTime > 2L * timeout) {\n        throw new RuntimeException(\"Failed to connect to zookeeper (\" + host\n            + \") within 2x zookeeper timeout period \" + timeout);\n      }\n      if (tryAgain) {\n        if (startTime + 2L * timeout < System.currentTimeMillis() + sleepTime + connectTimeWait)\n          sleepTime = startTime + 2L * timeout - System.currentTimeMillis() - connectTimeWait;\n        if (sleepTime < 0) {\n          connectTimeWait -= sleepTime;\n          sleepTime = 0;\n        }\n        UtilWaitThread.sleep(sleepTime);\n        if (sleepTime < 10000)\n          sleepTime = sleepTime + (long) (sleepTime * secureRandom.nextDouble());\n      }\nOne solution is to convert from millis to nano when the values are first assigned. There are a couple issues I see with doing that. One, timeout is still being passed into the method in millis and would need to be converted at the point-of-use (or assigned a value within the method, which breaks convention). Two, there are calculations that use these values, but do not use startTime, that are already working correctly. Also, TIME_BETWEEN_CONNECT_CHECKS_MS would likely need to be refactored to ...-NS.\nAnother solution (pasted below) is to  do conversions on the operands. This will prevent the Numeric Overflow Errors, but kind of decreases the readability of the code. Scaling up the operand values might not make them more accurate, but we should not lose accuracy this way.\n      if (TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime) > 2L * timeout) {\n        throw new RuntimeException(\"Failed to connect to zookeeper (\" + host\n            + \") within 2x zookeeper timeout period \" + timeout);\n      }\n    if (tryAgain) {\n        if (TimeUnit.NANOSECONDS.toMillis(startTime + 2L * TimeUnit.MILLISECONDS.toNanos(timeout))\n            < TimeUnit.NANOSECONDS\n                .toMillis(System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(sleepTime)\n                    + TimeUnit.MILLISECONDS.toNanos(connectTimeWait))) {\n          sleepTime =\n              TimeUnit.NANOSECONDS.toMillis(startTime + 2L * TimeUnit.MILLISECONDS.toNanos(timeout)\n                  - System.nanoTime() - TimeUnit.MILLISECONDS.toNanos(connectTimeWait));\n        }", "url": "https://github.com/apache/accumulo/pull/1489#discussion_r373485314", "createdAt": "2020-01-31T13:45:09Z", "author": {"login": "cradal"}, "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooSession.java", "diffHunk": "@@ -119,8 +119,19 @@ public static ZooKeeper connect(String host, int timeout, String scheme, byte[]\n     boolean tryAgain = true;\n     long sleepTime = 100;\n     ZooKeeper zooKeeper = null;\n-\n-    long startTime = System.currentTimeMillis();\n+    /*\n+     * Originally, startTime = System.currentTimeMillis(). Changed to System.nanoTime() to more\n+     * accurately compute durations because it is not based on system clock variations. The\n+     * ZooKeeper method signature expects an int value for 'timeout' and performs several\n+     * calculations that can result in Numeric Expression Overflow errors if large, nanosecond\n+     * values are used. For ths reason, System.nanoTime() is is converted to MS units prior to being\n+     * used in calculations. Although, the resolution of 'startTime' is still in the MS range, the\n+     * value from which it is calculated is nanoTime. Also, the MS units are preserved in the\n+     * original method code, without the need for conversion. TimeUnit.convert is not used because\n+     * \"conversions from fine to coarser granularities truncate, so lose precision\" (Oracle Java 7\n+     * API)\n+     */\n+    long startTime = System.nanoTime() / 1000000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAyNjQ0NA=="}, "originalCommit": {"oid": "45584952e066da7f9bbd73c88c650474b2142392"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5MzQ4MA==", "bodyText": "@cradal I updated your comment's Markdown to use syntax highlighting, to make it easier to read, but I think it'd be easier if you just updated the PR with the new changes you are proposing, rather than paste it in to a comment. It will be easier to review the proposed changes inline, rather than in a discussion thread. Also, if you want to make your code more readable, you could statically import TimeUnit.NANOSECONDS and TimeUnit.MILLISECONDS.", "url": "https://github.com/apache/accumulo/pull/1489#discussion_r373493480", "createdAt": "2020-01-31T14:03:02Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooSession.java", "diffHunk": "@@ -119,8 +119,19 @@ public static ZooKeeper connect(String host, int timeout, String scheme, byte[]\n     boolean tryAgain = true;\n     long sleepTime = 100;\n     ZooKeeper zooKeeper = null;\n-\n-    long startTime = System.currentTimeMillis();\n+    /*\n+     * Originally, startTime = System.currentTimeMillis(). Changed to System.nanoTime() to more\n+     * accurately compute durations because it is not based on system clock variations. The\n+     * ZooKeeper method signature expects an int value for 'timeout' and performs several\n+     * calculations that can result in Numeric Expression Overflow errors if large, nanosecond\n+     * values are used. For ths reason, System.nanoTime() is is converted to MS units prior to being\n+     * used in calculations. Although, the resolution of 'startTime' is still in the MS range, the\n+     * value from which it is calculated is nanoTime. Also, the MS units are preserved in the\n+     * original method code, without the need for conversion. TimeUnit.convert is not used because\n+     * \"conversions from fine to coarser granularities truncate, so lose precision\" (Oracle Java 7\n+     * API)\n+     */\n+    long startTime = System.nanoTime() / 1000000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAyNjQ0NA=="}, "originalCommit": {"oid": "45584952e066da7f9bbd73c88c650474b2142392"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4143, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}