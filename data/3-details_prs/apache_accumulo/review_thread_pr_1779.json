{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwODkyMjY2", "number": 1779, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxMjoyNlrOE5lzow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxMzozOVrOE5l1mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODIzNzE1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/data/NamespaceIdTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxMjoyNlrOH0I8yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzo0MDowOVrOH0KGhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzNDYzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                while ((preGCSize = NamespaceId.cache.asMap().entrySet().stream().count()) < 100) {\n          \n          \n            \n                while ((preGCSize = NamespaceId.cache.asMap().entrySet().size()) < 100) {", "url": "https://github.com/apache/accumulo/pull/1779#discussion_r524434634", "createdAt": "2020-11-16T17:12:26Z", "author": {"login": "milleruntime"}, "path": "core/src/test/java/org/apache/accumulo/core/data/NamespaceIdTest.java", "diffHunk": "@@ -79,12 +79,13 @@ public void testCacheIncreasesAndDecreasesAfterGC() {\n     assertEquals(namespaceString, nsId.canonical());\n \n     // create a bunch more and throw them away\n-    for (int i = 0; i < 999; i++) {\n-      NamespaceId.of(new String(\"namespace\" + i));\n+    long preGCSize = 0;\n+    int i = 0;\n+    while ((preGCSize = NamespaceId.cache.asMap().entrySet().stream().count()) < 100) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a80d76e4ac59523f1f20fa1e46d35c556ba54d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0MDIzNw==", "bodyText": "We can't use size() (either on the Map or its entrySet()), because that is only an approximation when working with Guava Cache objects. We need the actual count, which we can get by iterating over the entry set. See https://guava.dev/releases/21.0/api/docs/com/google/common/cache/Cache.html#size--", "url": "https://github.com/apache/accumulo/pull/1779#discussion_r524440237", "createdAt": "2020-11-16T17:21:00Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/data/NamespaceIdTest.java", "diffHunk": "@@ -79,12 +79,13 @@ public void testCacheIncreasesAndDecreasesAfterGC() {\n     assertEquals(namespaceString, nsId.canonical());\n \n     // create a bunch more and throw them away\n-    for (int i = 0; i < 999; i++) {\n-      NamespaceId.of(new String(\"namespace\" + i));\n+    long preGCSize = 0;\n+    int i = 0;\n+    while ((preGCSize = NamespaceId.cache.asMap().entrySet().stream().count()) < 100) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzNDYzNA=="}, "originalCommit": {"oid": "58a80d76e4ac59523f1f20fa1e46d35c556ba54d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1MzUwOA==", "bodyText": "Ah thank you.  I was racking my brain trying to figure out the difference between the two.", "url": "https://github.com/apache/accumulo/pull/1779#discussion_r524453508", "createdAt": "2020-11-16T17:40:09Z", "author": {"login": "milleruntime"}, "path": "core/src/test/java/org/apache/accumulo/core/data/NamespaceIdTest.java", "diffHunk": "@@ -79,12 +79,13 @@ public void testCacheIncreasesAndDecreasesAfterGC() {\n     assertEquals(namespaceString, nsId.canonical());\n \n     // create a bunch more and throw them away\n-    for (int i = 0; i < 999; i++) {\n-      NamespaceId.of(new String(\"namespace\" + i));\n+    long preGCSize = 0;\n+    int i = 0;\n+    while ((preGCSize = NamespaceId.cache.asMap().entrySet().stream().count()) < 100) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzNDYzNA=="}, "originalCommit": {"oid": "58a80d76e4ac59523f1f20fa1e46d35c556ba54d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODI0MjE2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/data/TableIdTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxMzozOVrOH0I_7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoyMTo0NFrOH0JUsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzNTQzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                while ((preGCSize = TableId.cache.asMap().entrySet().stream().count()) < 100) {\n          \n          \n            \n                while ((preGCSize = TableId.cache.asMap().entrySet().size()) < 100) {\n          \n      \n    \n    \n  \n\nThere are also many other occurances in the test you could replace.", "url": "https://github.com/apache/accumulo/pull/1779#discussion_r524435438", "createdAt": "2020-11-16T17:13:39Z", "author": {"login": "milleruntime"}, "path": "core/src/test/java/org/apache/accumulo/core/data/TableIdTest.java", "diffHunk": "@@ -88,12 +88,13 @@ public void testCacheIncreasesAndDecreasesAfterGC() {\n     assertEquals(tableString, table1.canonical());\n \n     // create a bunch more and throw them away\n-    for (int i = 0; i < 999; i++) {\n-      TableId.of(new String(\"table\" + i));\n+    long preGCSize = 0;\n+    int i = 0;\n+    while ((preGCSize = TableId.cache.asMap().entrySet().stream().count()) < 100) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a80d76e4ac59523f1f20fa1e46d35c556ba54d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzNzc4Mw==", "bodyText": "This was a suggestion from my IDE but I don't think they are exactly the same...", "url": "https://github.com/apache/accumulo/pull/1779#discussion_r524437783", "createdAt": "2020-11-16T17:17:17Z", "author": {"login": "milleruntime"}, "path": "core/src/test/java/org/apache/accumulo/core/data/TableIdTest.java", "diffHunk": "@@ -88,12 +88,13 @@ public void testCacheIncreasesAndDecreasesAfterGC() {\n     assertEquals(tableString, table1.canonical());\n \n     // create a bunch more and throw them away\n-    for (int i = 0; i < 999; i++) {\n-      TableId.of(new String(\"table\" + i));\n+    long preGCSize = 0;\n+    int i = 0;\n+    while ((preGCSize = TableId.cache.asMap().entrySet().stream().count()) < 100) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzNTQzOA=="}, "originalCommit": {"oid": "58a80d76e4ac59523f1f20fa1e46d35c556ba54d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0MDc1NA==", "bodyText": "Yeah, the IDE is wrong in this case. See my other comment.", "url": "https://github.com/apache/accumulo/pull/1779#discussion_r524440754", "createdAt": "2020-11-16T17:21:44Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/data/TableIdTest.java", "diffHunk": "@@ -88,12 +88,13 @@ public void testCacheIncreasesAndDecreasesAfterGC() {\n     assertEquals(tableString, table1.canonical());\n \n     // create a bunch more and throw them away\n-    for (int i = 0; i < 999; i++) {\n-      TableId.of(new String(\"table\" + i));\n+    long preGCSize = 0;\n+    int i = 0;\n+    while ((preGCSize = TableId.cache.asMap().entrySet().stream().count()) < 100) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzNTQzOA=="}, "originalCommit": {"oid": "58a80d76e4ac59523f1f20fa1e46d35c556ba54d"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4113, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}