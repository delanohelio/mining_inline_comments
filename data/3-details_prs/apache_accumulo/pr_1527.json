{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3ODQ3Mjc2", "number": 1527, "title": "Added detailed trace logging for FATE #1316", "bodyText": "This change add detailed trace logging for FATE.  To enable this add the following to log4j-service.properties\nlog4j.logger.org.apache.accumulo.fate.store=TRACE\n\nThe following is logging output when trace is enabled for create table FATE transaction.\n2020-02-20 15:59:54,574 [fate.store] TRACE: created FATE[38dabaad752bd105]\n2020-02-20 15:59:54,623 [fate.store] TRACE: pushed FATE[38dabaad752bd105] class org.apache.accumulo.master.tableOps.create.CreateTable {\"tableInfo\":{\"tableName\":\"test99\",\"namespaceId\":{\"canonical\":\"+default\"},\"timeType\":\"MILLIS\",\"user\":\"root\",\"initialTableState\":\"ONLINE\",\"initialSplitSize\":0,\"props\":{\"table.iterator.majc.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\",\"table.constraint.1\":\"org.apache.accumulo.core.constraints.DefaultKeySizeConstraint\",\"table.iterator.scan.vers.opt.maxVersions\":\"1\",\"table.iterator.minc.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\",\"table.iterator.majc.vers.opt.maxVersions\":\"1\",\"table.iterator.minc.vers.opt.maxVersions\":\"1\",\"table.iterator.scan.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\"}}}\n2020-02-20 15:59:54,629 [fate.store] TRACE: setProperty FATE[38dabaad752bd105] debug CreateTable\n2020-02-20 15:59:54,637 [fate.store] TRACE: setStatus FATE[38dabaad752bd105] IN_PROGRESS\n2020-02-20 15:59:54,688 [fate.store] TRACE: pushed FATE[38dabaad752bd105] class org.apache.accumulo.master.tableOps.create.SetupPermissions {\"tableInfo\":{\"tableName\":\"test99\",\"tableId\":{\"canonical\":\"2\"},\"namespaceId\":{\"canonical\":\"+default\"},\"timeType\":\"MILLIS\",\"user\":\"root\",\"initialTableState\":\"ONLINE\",\"initialSplitSize\":0,\"props\":{\"table.iterator.majc.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\",\"table.constraint.1\":\"org.apache.accumulo.core.constraints.DefaultKeySizeConstraint\",\"table.iterator.scan.vers.opt.maxVersions\":\"1\",\"table.iterator.minc.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\",\"table.iterator.majc.vers.opt.maxVersions\":\"1\",\"table.iterator.minc.vers.opt.maxVersions\":\"1\",\"table.iterator.scan.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\"}}}\n2020-02-20 15:59:54,763 [fate.store] TRACE: pushed FATE[38dabaad752bd105] class org.apache.accumulo.master.tableOps.create.PopulateZookeeper {\"tableInfo\":{\"tableName\":\"test99\",\"tableId\":{\"canonical\":\"2\"},\"namespaceId\":{\"canonical\":\"+default\"},\"timeType\":\"MILLIS\",\"user\":\"root\",\"initialTableState\":\"ONLINE\",\"initialSplitSize\":0,\"props\":{\"table.iterator.majc.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\",\"table.constraint.1\":\"org.apache.accumulo.core.constraints.DefaultKeySizeConstraint\",\"table.iterator.scan.vers.opt.maxVersions\":\"1\",\"table.iterator.minc.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\",\"table.iterator.majc.vers.opt.maxVersions\":\"1\",\"table.iterator.minc.vers.opt.maxVersions\":\"1\",\"table.iterator.scan.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\"}}}\n2020-02-20 15:59:54,895 [fate.store] TRACE: pushed FATE[38dabaad752bd105] class org.apache.accumulo.master.tableOps.create.ChooseDir {\"tableInfo\":{\"tableName\":\"test99\",\"tableId\":{\"canonical\":\"2\"},\"namespaceId\":{\"canonical\":\"+default\"},\"timeType\":\"MILLIS\",\"user\":\"root\",\"initialTableState\":\"ONLINE\",\"initialSplitSize\":0,\"props\":{\"table.iterator.majc.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\",\"table.constraint.1\":\"org.apache.accumulo.core.constraints.DefaultKeySizeConstraint\",\"table.iterator.scan.vers.opt.maxVersions\":\"1\",\"table.iterator.minc.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\",\"table.iterator.majc.vers.opt.maxVersions\":\"1\",\"table.iterator.minc.vers.opt.maxVersions\":\"1\",\"table.iterator.scan.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\"}}}\n2020-02-20 15:59:54,906 [fate.store] TRACE: pushed FATE[38dabaad752bd105] class org.apache.accumulo.master.tableOps.create.PopulateMetadata {\"tableInfo\":{\"tableName\":\"test99\",\"tableId\":{\"canonical\":\"2\"},\"namespaceId\":{\"canonical\":\"+default\"},\"timeType\":\"MILLIS\",\"user\":\"root\",\"initialTableState\":\"ONLINE\",\"initialSplitSize\":0,\"props\":{\"table.iterator.majc.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\",\"table.constraint.1\":\"org.apache.accumulo.core.constraints.DefaultKeySizeConstraint\",\"table.iterator.scan.vers.opt.maxVersions\":\"1\",\"table.iterator.minc.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\",\"table.iterator.majc.vers.opt.maxVersions\":\"1\",\"table.iterator.minc.vers.opt.maxVersions\":\"1\",\"table.iterator.scan.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\"}}}\n2020-02-20 15:59:54,959 [fate.store] TRACE: pushed FATE[38dabaad752bd105] class org.apache.accumulo.master.tableOps.create.FinishCreateTable {\"tableInfo\":{\"tableName\":\"test99\",\"tableId\":{\"canonical\":\"2\"},\"namespaceId\":{\"canonical\":\"+default\"},\"timeType\":\"MILLIS\",\"user\":\"root\",\"initialTableState\":\"ONLINE\",\"initialSplitSize\":0,\"props\":{\"table.iterator.majc.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\",\"table.constraint.1\":\"org.apache.accumulo.core.constraints.DefaultKeySizeConstraint\",\"table.iterator.scan.vers.opt.maxVersions\":\"1\",\"table.iterator.minc.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\",\"table.iterator.majc.vers.opt.maxVersions\":\"1\",\"table.iterator.minc.vers.opt.maxVersions\":\"1\",\"table.iterator.scan.vers\":\"20,org.apache.accumulo.core.iterators.user.VersioningIterator\"}}}\n2020-02-20 15:59:54,997 [fate.store] TRACE: setProperty FATE[38dabaad752bd105] return 2\n2020-02-20 15:59:55,005 [fate.store] TRACE: setStatus FATE[38dabaad752bd105] SUCCESSFUL\n2020-02-20 15:59:55,013 [fate.store] TRACE: popped FATE[38dabaad752bd105]\n2020-02-20 15:59:55,019 [fate.store] TRACE: popped FATE[38dabaad752bd105]\n2020-02-20 15:59:55,025 [fate.store] TRACE: popped FATE[38dabaad752bd105]\n2020-02-20 15:59:55,031 [fate.store] TRACE: popped FATE[38dabaad752bd105]\n2020-02-20 15:59:55,038 [fate.store] TRACE: popped FATE[38dabaad752bd105]\n2020-02-20 15:59:55,045 [fate.store] TRACE: popped FATE[38dabaad752bd105]\n2020-02-20 15:59:55,080 [fate.store] TRACE: deleted FATE[38dabaad752bd105]\n\nThe following is for rename table\n2020-02-20 16:00:01,607 [fate.store] TRACE: created FATE[6ba118b80b85ba43]\n2020-02-20 16:00:01,617 [fate.store] TRACE: pushed FATE[6ba118b80b85ba43] class org.apache.accumulo.master.tableOps.rename.RenameTable {\"tableId\":{\"canonical\":\"2\"},\"namespaceId\":{\"canonical\":\"+default\"},\"oldTableName\":\"test99\",\"newTableName\":\"test999\"}\n2020-02-20 16:00:01,622 [fate.store] TRACE: setProperty FATE[6ba118b80b85ba43] debug RenameTable\n2020-02-20 16:00:01,631 [fate.store] TRACE: setStatus FATE[6ba118b80b85ba43] IN_PROGRESS\n2020-02-20 16:00:01,699 [fate.store] TRACE: setStatus FATE[6ba118b80b85ba43] SUCCESSFUL\n2020-02-20 16:00:01,705 [fate.store] TRACE: popped FATE[6ba118b80b85ba43]\n2020-02-20 16:00:01,719 [fate.store] TRACE: deleted FATE[6ba118b80b85ba43]\n\nThe following is for delete table.\n2020-02-20 16:00:07,884 [fate.store] TRACE: created FATE[321b6d88d8be627b]\n2020-02-20 16:00:07,894 [fate.store] TRACE: pushed FATE[321b6d88d8be627b] class org.apache.accumulo.master.tableOps.delete.DeleteTable {\"tableId\":{\"canonical\":\"2\"},\"namespaceId\":{\"canonical\":\"+default\"}}\n2020-02-20 16:00:07,899 [fate.store] TRACE: setProperty FATE[321b6d88d8be627b] debug DeleteTable\n2020-02-20 16:00:07,908 [fate.store] TRACE: setStatus FATE[321b6d88d8be627b] IN_PROGRESS\n2020-02-20 16:00:07,955 [fate.store] TRACE: pushed FATE[321b6d88d8be627b] class org.apache.accumulo.master.tableOps.delete.CleanUp {\"tableId\":{\"canonical\":\"2\"},\"namespaceId\":{\"canonical\":\"+default\"},\"creationTime\":1582214407948}\n2020-02-20 16:00:08,306 [fate.store] TRACE: setStatus FATE[321b6d88d8be627b] SUCCESSFUL\n2020-02-20 16:00:08,312 [fate.store] TRACE: popped FATE[321b6d88d8be627b]\n2020-02-20 16:00:08,318 [fate.store] TRACE: popped FATE[321b6d88d8be627b]\n2020-02-20 16:00:08,331 [fate.store] TRACE: deleted FATE[321b6d88d8be627b]\n\nSeeing this output makes me wish we stored FATE Repos in Zookeeper as JSon instead of using java serialization because whats in ZK would be human readable.", "createdAt": "2020-02-20T16:16:40Z", "url": "https://github.com/apache/accumulo/pull/1527", "merged": true, "mergeCommit": {"oid": "0903aad008c5d03f1c3e3640152a9a35646eeb12"}, "closed": true, "closedAt": "2020-02-27T00:38:36Z", "author": {"login": "keith-turner"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGNZ5mgH2gAyMzc3ODQ3Mjc2OmQ4Y2UwNTg0MzFmNWNmNzI2MWZhMWY3NDM0YjY0MGU4MTQ1NjUwNGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcINjGjgFqTM2NTI1MzEyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d8ce058431f5cf7261fa1f7434b640e81456504c", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/d8ce058431f5cf7261fa1f7434b640e81456504c", "committedDate": "2020-02-20T16:06:41Z", "message": "Added detailed tace logging for FATE #1316"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMDQzMDU3", "url": "https://github.com/apache/accumulo/pull/1527#pullrequestreview-362043057", "createdAt": "2020-02-20T16:22:29Z", "commit": {"oid": "d8ce058431f5cf7261fa1f7434b640e81456504c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyMjoyOVrOFsaD9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyMjoyOVrOFsaD9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwODY2MQ==", "bodyText": "I do not like that the code to convert a Repo to a string for logging is not in this class.  I would like for a user to look at the source code for this class and see exactly what will be logged.  However I could not figure out how to make Gson do what I wanted in this class, I had to move the code to master module.  When the code was here Gson kept converting the Repo's to {}.", "url": "https://github.com/apache/accumulo/pull/1527#discussion_r382108661", "createdAt": "2020-02-20T16:22:29Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/FateLogger.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.accumulo.core.logging;\n+\n+import static org.apache.accumulo.fate.FateTxId.formatTid;\n+\n+import java.io.Serializable;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import org.apache.accumulo.fate.ReadOnlyRepo;\n+import org.apache.accumulo.fate.Repo;\n+import org.apache.accumulo.fate.StackOverflowException;\n+import org.apache.accumulo.fate.TStore;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class FateLogger {\n+  private static final String PREFIX = Logging.PREFIX + \"fate.\";\n+\n+  // Logs all mutations to FATEs persistent storage. Enabling this logger could help debug\n+  // reproducible problems with FATE transactions.\n+  private static final Logger storeLog = LoggerFactory.getLogger(PREFIX + \"store\");\n+\n+  public static <T> TStore<T> wrap(TStore<T> store, Function<Repo<T>,String> toLogString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ce058431f5cf7261fa1f7434b640e81456504c"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eea5fb5c3f52060eb6a4a8c4e6a0812773e20ef", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/9eea5fb5c3f52060eb6a4a8c4e6a0812773e20ef", "committedDate": "2020-02-25T22:07:59Z", "message": "fix build issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0OTgzOTYx", "url": "https://github.com/apache/accumulo/pull/1527#pullrequestreview-364983961", "createdAt": "2020-02-26T15:16:13Z", "commit": {"oid": "9eea5fb5c3f52060eb6a4a8c4e6a0812773e20ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToxNjoxM1rOFuvlGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToxNjoxM1rOFuvlGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1ODM2MQ==", "bodyText": "Why is this one not wrapped?", "url": "https://github.com/apache/accumulo/pull/1527#discussion_r384558361", "createdAt": "2020-02-26T15:16:13Z", "author": {"login": "phrocker"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/FateLogger.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.accumulo.core.logging;\n+\n+import static org.apache.accumulo.fate.FateTxId.formatTid;\n+\n+import java.io.Serializable;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import org.apache.accumulo.fate.ReadOnlyRepo;\n+import org.apache.accumulo.fate.Repo;\n+import org.apache.accumulo.fate.StackOverflowException;\n+import org.apache.accumulo.fate.TStore;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class FateLogger {\n+  private static final String PREFIX = Logging.PREFIX + \"fate.\";\n+\n+  // Logs all mutations to FATEs persistent storage. Enabling this logger could help debug\n+  // reproducible problems with FATE transactions.\n+  private static final Logger storeLog = LoggerFactory.getLogger(PREFIX + \"store\");\n+\n+  public static <T> TStore<T> wrap(TStore<T> store, Function<Repo<T>,String> toLogString) {\n+\n+    // only logging operations that change the persisted data, not operations that only read data\n+    return new TStore<T>() {\n+\n+      @Override\n+      public long reserve() {\n+        return store.reserve();\n+      }\n+\n+      @Override\n+      public void reserve(long tid) {\n+        store.reserve(tid);\n+      }\n+\n+      @Override\n+      public void unreserve(long tid, long deferTime) {\n+        store.unreserve(tid, deferTime);\n+      }\n+\n+      @Override\n+      public List<ReadOnlyRepo<T>> getStack(long tid) {\n+        return store.getStack(tid);\n+      }\n+\n+      @Override\n+      public TStatus getStatus(long tid) {\n+        return store.getStatus(tid);\n+      }\n+\n+      @Override\n+      public TStatus waitForStatusChange(long tid, EnumSet<TStatus> expected) {\n+        return store.waitForStatusChange(tid, expected);\n+      }\n+\n+      @Override\n+      public Serializable getProperty(long tid, String prop) {\n+        return store.getProperty(tid, prop);\n+      }\n+\n+      @Override\n+      public List<Long> list() {\n+        return store.list();\n+      }\n+\n+      @Override\n+      public long create() {\n+        long tid = store.create();\n+        if (storeLog.isTraceEnabled())\n+          storeLog.trace(\"created {}\", formatTid(tid));\n+        return tid;\n+      }\n+\n+      @Override\n+      public Repo<T> top(long tid) {\n+        return store.top(tid);\n+      }\n+\n+      @Override\n+      public void push(long tid, Repo<T> repo) throws StackOverflowException {\n+        store.push(tid, repo);\n+        storeLog.trace(\"pushed {} {}\", formatTid(tid), toLogString.apply(repo));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eea5fb5c3f52060eb6a4a8c4e6a0812773e20ef"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0OTg0OTMx", "url": "https://github.com/apache/accumulo/pull/1527#pullrequestreview-364984931", "createdAt": "2020-02-26T15:17:16Z", "commit": {"oid": "9eea5fb5c3f52060eb6a4a8c4e6a0812773e20ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToxNzoxNlrOFuvoMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToxNzoxNlrOFuvoMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1OTE1Mg==", "bodyText": "I see your comments about avoiding logging on reads; however, I do feel that when a status changes it would be nice to see the update and the receive on that code path. Therefore when a status change occurs, it may be nice to have a log statement.", "url": "https://github.com/apache/accumulo/pull/1527#discussion_r384559152", "createdAt": "2020-02-26T15:17:16Z", "author": {"login": "phrocker"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/FateLogger.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.accumulo.core.logging;\n+\n+import static org.apache.accumulo.fate.FateTxId.formatTid;\n+\n+import java.io.Serializable;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import org.apache.accumulo.fate.ReadOnlyRepo;\n+import org.apache.accumulo.fate.Repo;\n+import org.apache.accumulo.fate.StackOverflowException;\n+import org.apache.accumulo.fate.TStore;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class FateLogger {\n+  private static final String PREFIX = Logging.PREFIX + \"fate.\";\n+\n+  // Logs all mutations to FATEs persistent storage. Enabling this logger could help debug\n+  // reproducible problems with FATE transactions.\n+  private static final Logger storeLog = LoggerFactory.getLogger(PREFIX + \"store\");\n+\n+  public static <T> TStore<T> wrap(TStore<T> store, Function<Repo<T>,String> toLogString) {\n+\n+    // only logging operations that change the persisted data, not operations that only read data\n+    return new TStore<T>() {\n+\n+      @Override\n+      public long reserve() {\n+        return store.reserve();\n+      }\n+\n+      @Override\n+      public void reserve(long tid) {\n+        store.reserve(tid);\n+      }\n+\n+      @Override\n+      public void unreserve(long tid, long deferTime) {\n+        store.unreserve(tid, deferTime);\n+      }\n+\n+      @Override\n+      public List<ReadOnlyRepo<T>> getStack(long tid) {\n+        return store.getStack(tid);\n+      }\n+\n+      @Override\n+      public TStatus getStatus(long tid) {\n+        return store.getStatus(tid);\n+      }\n+\n+      @Override\n+      public TStatus waitForStatusChange(long tid, EnumSet<TStatus> expected) {\n+        return store.waitForStatusChange(tid, expected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eea5fb5c3f52060eb6a4a8c4e6a0812773e20ef"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0OTg3OTc1", "url": "https://github.com/apache/accumulo/pull/1527#pullrequestreview-364987975", "createdAt": "2020-02-26T15:20:44Z", "commit": {"oid": "9eea5fb5c3f52060eb6a4a8c4e6a0812773e20ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToyMDo0NVrOFuvx5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToyMDo0NVrOFuvx5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2MTYzOA==", "bodyText": "Memory may not be serving me well but I think you can define a JSONSerializer that may help avoid this [1]. But I could be wrong as it's much easier to be an armchair quarterback reviewer than the one writing the code :)\n[1] https://howtodoinjava.com/gson/custom-serialization-deserialization/", "url": "https://github.com/apache/accumulo/pull/1527#discussion_r384561638", "createdAt": "2020-02-26T15:20:45Z", "author": {"login": "phrocker"}, "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/TraceRepo.java", "diffHunk": "@@ -72,4 +75,19 @@ public String getReturn() {\n     return repo.getReturn();\n   }\n \n+  /**\n+   * @return string version of Repo that is suitable for logging\n+   */\n+  public static String toLogString(Repo<Master> repo) {\n+    if (repo instanceof TraceRepo) {\n+      // There are two reasons the repo is unwrapped. First I could not figure out how to get this\n+      // to work with Gson. Gson kept serializing nothing for the generic pointer TraceRepo.repo.\n+      // Second I thought this information was not useful for logging.\n+      repo = ((TraceRepo<Master>) repo).repo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eea5fb5c3f52060eb6a4a8c4e6a0812773e20ef"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0OTg5MzU2", "url": "https://github.com/apache/accumulo/pull/1527#pullrequestreview-364989356", "createdAt": "2020-02-26T15:22:16Z", "commit": {"oid": "9eea5fb5c3f52060eb6a4a8c4e6a0812773e20ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1d690e6abed8e5c6ed6880fad070cd4809b37da", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/e1d690e6abed8e5c6ed6880fad070cd4809b37da", "committedDate": "2020-02-26T19:53:22Z", "message": "check trace enabled"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjUzMTI2", "url": "https://github.com/apache/accumulo/pull/1527#pullrequestreview-365253126", "createdAt": "2020-02-26T21:24:35Z", "commit": {"oid": "e1d690e6abed8e5c6ed6880fad070cd4809b37da"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1850, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}