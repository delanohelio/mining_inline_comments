{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxOTIxODQx", "number": 1783, "title": "Fix #1764 Parallelize listcompactions in shell", "bodyText": "Replace ActiveCompactionIterator with ActiveCompactionHelper that\nparallelizes calls to InstanceOperations.getActiveCompactions() in\nsupport of a more efficient listcompactions command in the shell.", "createdAt": "2020-11-16T20:10:40Z", "url": "https://github.com/apache/accumulo/pull/1783", "merged": true, "mergeCommit": {"oid": "a7a96b8a832e662780f8732600331709ace1d65d"}, "closed": true, "closedAt": "2020-11-19T22:57:28Z", "author": {"login": "ctubbsii"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddLiiRgH2gAyNTIxOTIxODQxOjBlNTc4MTMyMTI3YTNkYjdlNTA1NWUwZDY1NWUzMmU1YWQwNjU5NTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddb7aNAH2gAyNTIxOTIxODQxOmRmNjZjMGEyM2FhOTMzZmI0YjIwNmI0ZThhOThmZmRiMjY4OWI5NDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0e578132127a3db7e5055e0d655e32e5ad065953", "author": {"user": {"login": "ctubbsii", "name": "Christopher Tubbs"}}, "url": "https://github.com/apache/accumulo/commit/0e578132127a3db7e5055e0d655e32e5ad065953", "committedDate": "2020-11-16T21:07:43Z", "message": "Fix #1764 Parallelize listcompactions in shell\n\nReplace `ActiveCompactionIterator` with `ActiveCompactionHelper` that\nparallelizes calls to `InstanceOperations.getActiveCompactions()` in\nsupport of a more efficient `listcompactions` command in the shell."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8cbcde0aa0c19c1941cc688f41dc5f252290848", "author": {"user": {"login": "ctubbsii", "name": "Christopher Tubbs"}}, "url": "https://github.com/apache/accumulo/commit/b8cbcde0aa0c19c1941cc688f41dc5f252290848", "committedDate": "2020-11-16T20:02:18Z", "message": "Fix #1764 Parallelize listcompactions in shell\n\nReplace `ActiveCompactionIterator` with `ActiveCompactionHelper` that\nparallelizes calls to `InstanceOperations.getActiveCompactions()` in\nsupport of a more efficient `listcompactions` command in the shell."}, "afterCommit": {"oid": "0e578132127a3db7e5055e0d655e32e5ad065953", "author": {"user": {"login": "ctubbsii", "name": "Christopher Tubbs"}}, "url": "https://github.com/apache/accumulo/commit/0e578132127a3db7e5055e0d655e32e5ad065953", "committedDate": "2020-11-16T21:07:43Z", "message": "Fix #1764 Parallelize listcompactions in shell\n\nReplace `ActiveCompactionIterator` with `ActiveCompactionHelper` that\nparallelizes calls to `InstanceOperations.getActiveCompactions()` in\nsupport of a more efficient `listcompactions` command in the shell."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMDI0MzM0", "url": "https://github.com/apache/accumulo/pull/1783#pullrequestreview-532024334", "createdAt": "2020-11-17T05:05:32Z", "commit": {"oid": "0e578132127a3db7e5055e0d655e32e5ad065953"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNTowNTozMlrOH0kicg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNToxMTo1MFrOH0kopQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4NjY0Mg==", "bodyText": "I like how this is handled.", "url": "https://github.com/apache/accumulo/pull/1783#discussion_r524886642", "createdAt": "2020-11-17T05:05:32Z", "author": {"login": "keith-turner"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/ActiveCompactionHelper.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.shell.commands;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.accumulo.core.client.IteratorSetting;\n+import org.apache.accumulo.core.client.TableNotFoundException;\n+import org.apache.accumulo.core.client.admin.ActiveCompaction;\n+import org.apache.accumulo.core.client.admin.InstanceOperations;\n+import org.apache.accumulo.core.util.Duration;\n+import org.apache.accumulo.core.util.NamingThreadFactory;\n+\n+class ActiveCompactionHelper {\n+\n+  private static String maxDecimal(double count) {\n+    if (count < 9.995)\n+      return String.format(\"%.2f\", count);\n+    if (count < 99.95)\n+      return String.format(\"%.1f\", count);\n+    return String.format(\"%.0f\", count);\n+  }\n+\n+  private static String shortenCount(long count) {\n+    if (count < 1_000)\n+      return count + \"\";\n+    if (count < 1_000_000)\n+      return maxDecimal(count / 1_000.0) + \"K\";\n+    if (count < 1_000_000_000)\n+      return maxDecimal(count / 1_000_000.0) + \"M\";\n+    return maxDecimal(count / 1_000_000_000.0) + \"B\";\n+  }\n+\n+  private static String formatActiveCompactionLine(String tserver, ActiveCompaction ac)\n+      throws TableNotFoundException {\n+    String output = ac.getOutputFile();\n+    int index = output.indexOf(\"tables\");\n+    if (index > 0) {\n+      output = output.substring(index + 6);\n+    }\n+\n+    List<String> iterList = new ArrayList<>();\n+    Map<String,Map<String,String>> iterOpts = new HashMap<>();\n+    for (IteratorSetting is : ac.getIterators()) {\n+      iterList.add(is.getName() + \"=\" + is.getPriority() + \",\" + is.getIteratorClass());\n+      iterOpts.put(is.getName(), is.getOptions());\n+    }\n+\n+    return String.format(\n+        \"%21s | %9s | %5s | %6s | %5s | %5s | %15s | %-40s | %5s | %35s | %9s | %s\", tserver,\n+        Duration.format(ac.getAge(), \"\", \"-\"), ac.getType(), ac.getReason(),\n+        shortenCount(ac.getEntriesRead()), shortenCount(ac.getEntriesWritten()), ac.getTable(),\n+        ac.getTablet(), ac.getInputFiles().size(), output, iterList, iterOpts);\n+  }\n+\n+  private static List<String> activeCompactionsForServer(String tserver,\n+      InstanceOperations instanceOps) {\n+    List<String> compactions = new ArrayList<>();\n+    try {\n+      List<ActiveCompaction> acl = new ArrayList<>(instanceOps.getActiveCompactions(tserver));\n+      acl.sort((o1, o2) -> (int) (o2.getAge() - o1.getAge()));\n+      for (ActiveCompaction ac : acl) {\n+        compactions.add(formatActiveCompactionLine(tserver, ac));\n+      }\n+    } catch (Exception e) {\n+      compactions.add(tserver + \" ERROR \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e578132127a3db7e5055e0d655e32e5ad065953"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4ODIyOQ==", "bodyText": "Since the parallelism is to lessen the impact of RPC latency and is not CPU bound I would use a lot of threads.  Number of threads could be a function of the # tservers, maybe something like :\n   int numThreads = Math.max(1,Math.min(tservers.size()/10, 256));", "url": "https://github.com/apache/accumulo/pull/1783#discussion_r524888229", "createdAt": "2020-11-17T05:11:50Z", "author": {"login": "keith-turner"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/ActiveCompactionHelper.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.shell.commands;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.accumulo.core.client.IteratorSetting;\n+import org.apache.accumulo.core.client.TableNotFoundException;\n+import org.apache.accumulo.core.client.admin.ActiveCompaction;\n+import org.apache.accumulo.core.client.admin.InstanceOperations;\n+import org.apache.accumulo.core.util.Duration;\n+import org.apache.accumulo.core.util.NamingThreadFactory;\n+\n+class ActiveCompactionHelper {\n+\n+  private static String maxDecimal(double count) {\n+    if (count < 9.995)\n+      return String.format(\"%.2f\", count);\n+    if (count < 99.95)\n+      return String.format(\"%.1f\", count);\n+    return String.format(\"%.0f\", count);\n+  }\n+\n+  private static String shortenCount(long count) {\n+    if (count < 1_000)\n+      return count + \"\";\n+    if (count < 1_000_000)\n+      return maxDecimal(count / 1_000.0) + \"K\";\n+    if (count < 1_000_000_000)\n+      return maxDecimal(count / 1_000_000.0) + \"M\";\n+    return maxDecimal(count / 1_000_000_000.0) + \"B\";\n+  }\n+\n+  private static String formatActiveCompactionLine(String tserver, ActiveCompaction ac)\n+      throws TableNotFoundException {\n+    String output = ac.getOutputFile();\n+    int index = output.indexOf(\"tables\");\n+    if (index > 0) {\n+      output = output.substring(index + 6);\n+    }\n+\n+    List<String> iterList = new ArrayList<>();\n+    Map<String,Map<String,String>> iterOpts = new HashMap<>();\n+    for (IteratorSetting is : ac.getIterators()) {\n+      iterList.add(is.getName() + \"=\" + is.getPriority() + \",\" + is.getIteratorClass());\n+      iterOpts.put(is.getName(), is.getOptions());\n+    }\n+\n+    return String.format(\n+        \"%21s | %9s | %5s | %6s | %5s | %5s | %15s | %-40s | %5s | %35s | %9s | %s\", tserver,\n+        Duration.format(ac.getAge(), \"\", \"-\"), ac.getType(), ac.getReason(),\n+        shortenCount(ac.getEntriesRead()), shortenCount(ac.getEntriesWritten()), ac.getTable(),\n+        ac.getTablet(), ac.getInputFiles().size(), output, iterList, iterOpts);\n+  }\n+\n+  private static List<String> activeCompactionsForServer(String tserver,\n+      InstanceOperations instanceOps) {\n+    List<String> compactions = new ArrayList<>();\n+    try {\n+      List<ActiveCompaction> acl = new ArrayList<>(instanceOps.getActiveCompactions(tserver));\n+      acl.sort((o1, o2) -> (int) (o2.getAge() - o1.getAge()));\n+      for (ActiveCompaction ac : acl) {\n+        compactions.add(formatActiveCompactionLine(tserver, ac));\n+      }\n+    } catch (Exception e) {\n+      compactions.add(tserver + \" ERROR \" + e.getMessage());\n+    }\n+    return compactions;\n+  }\n+\n+  public static Stream<String> stream(List<String> tservers, InstanceOperations instanceOps) {\n+    Stream<String> header = Stream.of(String.format(\n+        \" %-21s| %-9s | %-5s | %-6s | %-5s | %-5s | %-15s | %-40s | %-5s | %-35s | %-9s | %s\",\n+        \"TABLET SERVER\", \"AGE\", \"TYPE\", \"REASON\", \"READ\", \"WROTE\", \"TABLE\", \"TABLET\", \"INPUT\",\n+        \"OUTPUT\", \"ITERATORS\", \"ITERATOR OPTIONS\"));\n+\n+    var threadFactory = new NamingThreadFactory(\"shell-listcompactions\");\n+    var executorService =\n+        Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors(), threadFactory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e578132127a3db7e5055e0d655e32e5ad065953"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df66c0a23aa933fb4b206b4e8a98ffdb2689b946", "author": {"user": {"login": "ctubbsii", "name": "Christopher Tubbs"}}, "url": "https://github.com/apache/accumulo/commit/df66c0a23aa933fb4b206b4e8a98ffdb2689b946", "committedDate": "2020-11-17T16:13:22Z", "message": "Code review feedback: use numThreads based on tservers"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1800, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}