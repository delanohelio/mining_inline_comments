{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMzczNjE3", "number": 1715, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODozNTo1NVrOErvfFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMTowMzo0M1rOE1ZXtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzAyMjI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/classloader/AccumuloClassLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODozNTo1NVrOHeriiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODozNTo1NVrOHeriiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzMjY4MQ==", "bodyText": "It may be nice to have an accumulo prefix in this property, since its a java system property and not an Accumulo configuration property.  Maybe something like accumulo.server.class.loader.factory.  This would be similar to the way log4j prefixes its Java system properties.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501932681", "createdAt": "2020-10-08T18:35:55Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/AccumuloClassLoader.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.apache.accumulo.core.spi.common.ClassLoaderFactory;\n+import org.apache.accumulo.core.spi.common.ClassLoaderFactory.Printer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class AccumuloClassLoader {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(AccumuloClassLoader.class);\n+\n+  private static final String CLASS_LOADER_FACTORY = \"general.class.loader.factory\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzAzMzYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ClassLoaderFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODozOTowMlrOHerpmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODozOTowMlrOHerpmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNDQ5MA==", "bodyText": "This javadoc could mention its a Java system property.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501934490", "createdAt": "2020-10-08T18:39:02Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ClassLoaderFactory.java", "diffHunk": "@@ -18,44 +18,33 @@\n  */\n package org.apache.accumulo.core.spi.common;\n \n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.Map.Entry;\n-\n /**\n- * The ClassLoaderFactory is defined by the property general.context.factory. The factory\n- * implementation is configured externally to Accumulo and will return a ClassLoader for a given\n- * contextName.\n- *\n+ * The ClassLoaderFactory implementation is defined by the property general.class.loader.factory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzAzODU2OnYy", "diffSide": "RIGHT", "path": "start/src/main/java/org/apache/accumulo/start/Main.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0MDozMFrOHers2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0MDozMFrOHers2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNTMyMg==", "bodyText": "Why is this commented out code here?", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501935322", "createdAt": "2020-10-08T18:40:30Z", "author": {"login": "keith-turner"}, "path": "start/src/main/java/org/apache/accumulo/start/Main.java", "diffHunk": "@@ -86,42 +63,42 @@ public static void main(final String[] args) {\n       // determine whether a keyword was used or a class name, and execute it with the remaining\n       // args\n       String keywordOrClassName = args[0];\n-      KeywordExecutable keywordExec = getExecutables(loader).get(keywordOrClassName);\n+      KeywordExecutable keywordExec = getExecutables(CLASSLOADER).get(keywordOrClassName);\n       if (keywordExec != null) {\n         execKeyword(keywordExec, stripArgs(args, 1));\n       } else {\n         execMainClassName(keywordOrClassName, stripArgs(args, 1));\n       }\n \n     } catch (Throwable t) {\n-      log.error(\"Uncaught exception\", t);\n+      LOG.error(\"Uncaught exception\", t);\n       System.exit(1);\n     }\n   }\n \n-  public static synchronized ClassLoader getClassLoader() {\n-    if (classLoader == null) {\n-      try {\n-        classLoader = (ClassLoader) getVFSClassLoader().getMethod(\"getClassLoader\").invoke(null);\n-        Thread.currentThread().setContextClassLoader(classLoader);\n-      } catch (IOException | IllegalArgumentException | ReflectiveOperationException\n-          | SecurityException e) {\n-        log.error(\"Problem initializing the class loader\", e);\n-        System.exit(1);\n-      }\n-    }\n-    return classLoader;\n-  }\n-\n-  public static synchronized Class<?> getVFSClassLoader()\n-      throws IOException, ClassNotFoundException {\n-    if (vfsClassLoader == null) {\n-      Thread.currentThread().setContextClassLoader(AccumuloClassLoader.getClassLoader());\n-      vfsClassLoader = AccumuloClassLoader.getClassLoader()\n-          .loadClass(\"org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader\");\n-    }\n-    return vfsClassLoader;\n-  }\n+  // public static synchronized ClassLoader getClassLoader() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzA0MjYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0MTo0MVrOHerviQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0MTo0MVrOHerviQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNjAwOQ==", "bodyText": "Javadoc needs a since tag", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501936009", "createdAt": "2020-10-08T18:41:41Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n+\n+/**\n+ * The ContextClassLoaderFactory implementation is defined by the property\n+ * general.context.class.loader.factory. The implementation is configured externally to Accumulo and\n+ * will return a ClassLoader for a given contextName.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzA0NzQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0Mjo1N1rOHerySQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNDoxNDoxOVrOHufj8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNjcxMw==", "bodyText": "I suspect this needs javadoc w/ since tag.  I don't think Inner classes inherit since tags from outer classes javadoc, but not 100% sure.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501936713", "createdAt": "2020-10-08T18:42:57Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n+\n+/**\n+ * The ContextClassLoaderFactory implementation is defined by the property\n+ * general.context.class.loader.factory. The implementation is configured externally to Accumulo and\n+ * will return a ClassLoader for a given contextName.\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  static class ClassLoaderFactoryConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwNzMzMA==", "bodyText": "They shouldn't inherit from the outer class, but it's also package-private, so it shouldn't matter.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r502007330", "createdAt": "2020-10-08T20:56:00Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n+\n+/**\n+ * The ContextClassLoaderFactory implementation is defined by the property\n+ * general.context.class.loader.factory. The implementation is configured externally to Accumulo and\n+ * will return a ClassLoader for a given contextName.\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  static class ClassLoaderFactoryConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNjcxMw=="}, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMjc0OA==", "bodyText": "I think all members of interfaces are implicitly public.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r502022748", "createdAt": "2020-10-08T21:28:03Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n+\n+/**\n+ * The ContextClassLoaderFactory implementation is defined by the property\n+ * general.context.class.loader.factory. The implementation is configured externally to Accumulo and\n+ * will return a ClassLoader for a given contextName.\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  static class ClassLoaderFactoryConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNjcxMw=="}, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUxMzY0OA==", "bodyText": "I think all members of interfaces are implicitly public.\n\nInteresting. I hadn't considered if that might be true for classes defined in an interface. I know it applies to methods and fields. A quick Google search didn't help answer this for me, so I'll have to experiment to see if that holds for static inner classes.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518513648", "createdAt": "2020-11-06T04:14:19Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n+\n+/**\n+ * The ContextClassLoaderFactory implementation is defined by the property\n+ * general.context.class.loader.factory. The implementation is configured externally to Accumulo and\n+ * will return a ClassLoader for a given contextName.\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  static class ClassLoaderFactoryConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNjcxMw=="}, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzA2MzI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ClassLoaderFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NzozN1rOHer8gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NzozN1rOHer8gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzOTMyOQ==", "bodyText": "For SPI methods that take multiple arguments other SPI interfaces use Parameters interfaces.  This makes it easy to add more parameters to the method in the future w/o causing issues for existing implementers.  Below is one example of this.\n\n  \n    \n      accumulo/core/src/main/java/org/apache/accumulo/core/spi/scan/ScanDispatcher.java\n    \n    \n         Line 62\n      in\n      80ee9ca\n    \n    \n    \n    \n\n        \n          \n           default void init(InitParameters params) {", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501939329", "createdAt": "2020-10-08T18:47:37Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ClassLoaderFactory.java", "diffHunk": "@@ -18,44 +18,33 @@\n  */\n package org.apache.accumulo.core.spi.common;\n \n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.Map.Entry;\n-\n /**\n- * The ClassLoaderFactory is defined by the property general.context.factory. The factory\n- * implementation is configured externally to Accumulo and will return a ClassLoader for a given\n- * contextName.\n- *\n+ * The ClassLoaderFactory implementation is defined by the property general.class.loader.factory.\n+ * The implementation will return a ClassLoader to be used for dynamically loading classes.\n  */\n public interface ClassLoaderFactory {\n \n-  static class ClassLoaderFactoryConfiguration {\n-\n-    public Iterator<Entry<String,String>> get() {\n-      return Collections.emptyIterator();\n-    }\n+  public interface Printer {\n+    void print(String s);\n   }\n \n   /**\n-   * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n-   * that it can clean up contexts that are no longer being used.\n+   * Return the configured classloader\n    *\n-   * @param conf\n-   *          Accumulo configuration properties\n-   * @throws Exception\n-   *           if error initializing ClassLoaderFactory\n+   * @return classloader the configured classloader\n    */\n-  void initialize(ClassLoaderFactoryConfiguration conf) throws Exception;\n+  ClassLoader getClassLoader() throws Exception;\n \n   /**\n+   * Print the classpath to the Printer\n    *\n-   * @param contextName\n-   *          name of classloader context\n-   * @return classloader configured for the context\n-   * @throws IllegalArgumentException\n-   *           if contextName is not supported\n+   * @param cl\n+   *          classloader\n+   * @param out\n+   *          printer\n+   * @param debug\n+   *          enable debug output\n    */\n-  ClassLoader getClassLoader(String contextName) throws IllegalArgumentException;\n+  void printClassPath(ClassLoader cl, Printer out, boolean debug);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzA5Mjc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1NTo1MVrOHesO6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMTo1NDo0N1rOHexv1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0NDA0MA==", "bodyText": "In the past when running test against Accumulo w/ lots of concurrent scans and profiling tablets servers, the static synchronization around class loading was something that showed up in profiling data.  Every scan uses class loaders to create iterators and this static synch causes locking contention between scans.   This in an existing problem with the current code and I don't think changes are needed here, seeing this reminded me of the problem.  I need to see if I opened an issue for this.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501944040", "createdAt": "2020-10-08T18:55:51Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+public class ClassLoaderUtil {\n+\n+  public static synchronized <U> Class<? extends U> loadClass(String contextName, String className,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NDIxNQ==", "bodyText": "Now that you bring it up, I'm not sure that this needs to be synchronized.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501984215", "createdAt": "2020-10-08T20:10:30Z", "author": {"login": "dlmarion"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+public class ClassLoaderUtil {\n+\n+  public static synchronized <U> Class<? extends U> loadClass(String contextName, String className,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0NDA0MA=="}, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyOTk3Mg==", "bodyText": "Looking into this overall issue a bit further in the existing code, iterators call AccumuloVFSClassLoader.loadClass() which is static and synchronized.  Also the iterator loading code has a class cache, maybe this was created to avoid the global synchronization.  Also I did not find an issue, will open one after looking into it a bit more.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r502029972", "createdAt": "2020-10-08T21:44:16Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+public class ClassLoaderUtil {\n+\n+  public static synchronized <U> Class<? extends U> loadClass(String contextName, String className,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0NDA0MA=="}, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzMTQ1MQ==", "bodyText": "The cache is only narrowly used, so the synchronization is probably still problematic I'll open an issue.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r502031451", "createdAt": "2020-10-08T21:47:37Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+public class ClassLoaderUtil {\n+\n+  public static synchronized <U> Class<? extends U> loadClass(String contextName, String className,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0NDA0MA=="}, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzNDM4OA==", "bodyText": "Created #1730", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r502034388", "createdAt": "2020-10-08T21:54:47Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+public class ClassLoaderUtil {\n+\n+  public static synchronized <U> Class<? extends U> loadClass(String contextName, String className,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0NDA0MA=="}, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzEwMzI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1ODoyOFrOHesVZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1ODoyOFrOHesVZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0NTcwMQ==", "bodyText": "Could name the class InitializationParameters to be consistent w/ other SPI interfaces.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501945701", "createdAt": "2020-10-08T18:58:28Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n+\n+/**\n+ * The ContextClassLoaderFactory implementation is defined by the property\n+ * general.context.class.loader.factory. The implementation is configured externally to Accumulo and\n+ * will return a ClassLoader for a given contextName.\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  static class ClassLoaderFactoryConfiguration {\n+\n+    public Iterator<Entry<String,String>> get() {\n+      return Collections.emptyIterator();\n+    }\n+  }\n+\n+  /**\n+   * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n+   * that it can clean up contexts that are no longer being used.\n+   *\n+   * @param conf\n+   *          Accumulo configuration properties\n+   * @throws Exception\n+   *           if error initializing ClassLoaderFactory\n+   */\n+  void initialize(ClassLoaderFactoryConfiguration conf) throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzEyOTk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTowNTo0N1rOHeslZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTowNTo0N1rOHeslZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0OTc5Nw==", "bodyText": "Other SPI interfaces use ServiceEnvironment to expose Accumulo configuration to plugins.\n\n  \n    \n      accumulo/core/src/main/java/org/apache/accumulo/core/spi/common/ServiceEnvironment.java\n    \n    \n         Line 35\n      in\n      80ee9ca\n    \n    \n    \n    \n\n        \n          \n           public interface ServiceEnvironment extends PluginEnvironment {", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501949797", "createdAt": "2020-10-08T19:05:47Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n+\n+/**\n+ * The ContextClassLoaderFactory implementation is defined by the property\n+ * general.context.class.loader.factory. The implementation is configured externally to Accumulo and\n+ * will return a ClassLoader for a given contextName.\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  static class ClassLoaderFactoryConfiguration {\n+\n+    public Iterator<Entry<String,String>> get() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjIyMTc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjowNzo0M1rOHnfuHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNTowNToxOFrOH05ROQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3NjIyMA==", "bodyText": "The following are the rational behind the suggestion below.\n\nUsing a parameters interface makes evolving the SPI over time much simpler.  Its easy to add additional parameters in the future w/o breaking existing code that was written against the SPI.\nUsing the Configuration interface used by other SPI interface is consistent and offers more options.  For example this interface offers an isSet() method that allows checking if a user set a property.  There is no way to do this by analyzing the values because some props have default values.\n\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n          \n          \n            \n               * that it can clean up contexts that are no longer being used.\n          \n          \n            \n               *\n          \n          \n            \n               * @param contextProperties\n          \n          \n            \n               *          Accumulo configuration properties\n          \n          \n            \n               * @throws Exception\n          \n          \n            \n               *           if error initializing ClassLoaderFactory\n          \n          \n            \n               */\n          \n          \n            \n              void initialize(Supplier<Map<String,String>> contextProperties) throws Exception;\n          \n          \n            \n              public interface InitParameters {\n          \n          \n            \n                  /**\n          \n          \n            \n               * @return A view of Accumulo's system level configuration. This is backed by system level config\n          \n          \n            \n               *         in zookeeper, which falls back to site configuration, which falls back to the default\n          \n          \n            \n               *         configuration.\n          \n          \n            \n               */\n          \n          \n            \n                Configuration getConfiguration();\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              /**\n          \n          \n            \n               * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n          \n          \n            \n               * that it can clean up contexts that are no longer being used.\n          \n          \n            \n               *\n          \n          \n            \n               * @throws Exception\n          \n          \n            \n               *           if error initializing ClassLoaderFactory\n          \n          \n            \n               */\n          \n          \n            \n              void initialize(InitParameters initParam) throws Exception;", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r511176220", "createdAt": "2020-10-23T22:07:43Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The ClassLoaderFactory is defined by the property general.context.factory. The factory\n+ * implementation is configured externally to Accumulo and will return a ClassLoader for a given\n+ * contextName.\n+ *\n+ * @since 2.1.0\n+ *\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  /**\n+   * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n+   * that it can clean up contexts that are no longer being used.\n+   *\n+   * @param contextProperties\n+   *          Accumulo configuration properties\n+   * @throws Exception\n+   *           if error initializing ClassLoaderFactory\n+   */\n+  void initialize(Supplier<Map<String,String>> contextProperties) throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e9cbbc83a9bd5699d2a6bb782c93a2ef66e95b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1MDE0OQ==", "bodyText": "@keith-turner It looks like ServiceEnvironmentImpl and ConfigurationImpl are the classes used to create the Configuration used in this manner. Both of these objects are in server-base, which depends on accumulo-core. Suggestions on how to move forward? I think ContextClassLoaderFactory should remain in core as that is where the SPI classes are. It looks like I might be able to move ServiceEnvironmentImpl up to accumulo-core.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517450149", "createdAt": "2020-11-04T15:59:09Z", "author": {"login": "dlmarion"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The ClassLoaderFactory is defined by the property general.context.factory. The factory\n+ * implementation is configured externally to Accumulo and will return a ClassLoader for a given\n+ * contextName.\n+ *\n+ * @since 2.1.0\n+ *\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  /**\n+   * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n+   * that it can clean up contexts that are no longer being used.\n+   *\n+   * @param contextProperties\n+   *          Accumulo configuration properties\n+   * @throws Exception\n+   *           if error initializing ClassLoaderFactory\n+   */\n+  void initialize(Supplier<Map<String,String>> contextProperties) throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3NjIyMA=="}, "originalCommit": {"oid": "e0e9cbbc83a9bd5699d2a6bb782c93a2ef66e95b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ2Mjc4OA==", "bodyText": "I can't move ServiceEnvironmentImpl up to accumulo-core due to its depedency on ServerContext.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517462788", "createdAt": "2020-11-04T16:16:34Z", "author": {"login": "dlmarion"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The ClassLoaderFactory is defined by the property general.context.factory. The factory\n+ * implementation is configured externally to Accumulo and will return a ClassLoader for a given\n+ * contextName.\n+ *\n+ * @since 2.1.0\n+ *\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  /**\n+   * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n+   * that it can clean up contexts that are no longer being used.\n+   *\n+   * @param contextProperties\n+   *          Accumulo configuration properties\n+   * @throws Exception\n+   *           if error initializing ClassLoaderFactory\n+   */\n+  void initialize(Supplier<Map<String,String>> contextProperties) throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3NjIyMA=="}, "originalCommit": {"oid": "e0e9cbbc83a9bd5699d2a6bb782c93a2ef66e95b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ2ODM3NQ==", "bodyText": "I think what you did with moving ConfigurationImpl and using the ConfigurationImpl is good.  Would still recommend the parameters interface as it gives more options for mutating the SPI in the future w/o causing pain to anyone who has taken the time to implement the interface.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518468375", "createdAt": "2020-11-06T01:22:05Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The ClassLoaderFactory is defined by the property general.context.factory. The factory\n+ * implementation is configured externally to Accumulo and will return a ClassLoader for a given\n+ * contextName.\n+ *\n+ * @since 2.1.0\n+ *\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  /**\n+   * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n+   * that it can clean up contexts that are no longer being used.\n+   *\n+   * @param contextProperties\n+   *          Accumulo configuration properties\n+   * @throws Exception\n+   *           if error initializing ClassLoaderFactory\n+   */\n+  void initialize(Supplier<Map<String,String>> contextProperties) throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3NjIyMA=="}, "originalCommit": {"oid": "e0e9cbbc83a9bd5699d2a6bb782c93a2ef66e95b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUxMTgxNw==", "bodyText": "Would still recommend the parameters interface as it gives more options for mutating the SPI in the future w/o causing pain to anyone who has taken the time to implement the interface.\n\nI think I would disagree with the need to create an evolve-able parameter type here. I don't think it's a good idea to support a dedicated parameter type because that implies we're constructing a framework that can evolve, on which complex subclass implementations can support being initialized based on internal Accumulo objects. That's antithetical to what we're trying to do here.\nThis ClassloaderFactory is not your typical SPI (like sampling or iterators or balancers), where behavior is coupled to Accumulo functionality. Rather, classloading is something that should be done largely independently of Accumulo... as it is something on which other parts of Accumulo depend. Its initialization API should not itself depend on Accumulo objects that would be passed in using these parameter types, because that could create cyclical dependencies (Accumulo depends on classloader, which depends on Accumulo internal objects passed as parameters, which depends on classloader...).\nThe only thing this interface needs from Accumulo is initial configuration, which just happens to be carried in Accumulo's own configuration files. We should merely pass that information along to this. We should never pass along any other internal state objects as parameters. Besides, the classloader factory should be instantiated early, before any meaningful state is generated in Accumulo. So, it should never have the opportunity to initialize based on internal Accumulo state anyway... just initial configuration files.\nSo, I think it's a conscious decision to make the initialization parameter only a configuration mapping. It will ensure we keep the classloading stuff as decoupled as possible from Accumulo's internal workings, and merely responsible for providing classloaders that the rest of Accumulo can reliably depend on, based on the implementer's own independent criteria.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518511817", "createdAt": "2020-11-06T04:06:28Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The ClassLoaderFactory is defined by the property general.context.factory. The factory\n+ * implementation is configured externally to Accumulo and will return a ClassLoader for a given\n+ * contextName.\n+ *\n+ * @since 2.1.0\n+ *\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  /**\n+   * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n+   * that it can clean up contexts that are no longer being used.\n+   *\n+   * @param contextProperties\n+   *          Accumulo configuration properties\n+   * @throws Exception\n+   *           if error initializing ClassLoaderFactory\n+   */\n+  void initialize(Supplier<Map<String,String>> contextProperties) throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3NjIyMA=="}, "originalCommit": {"oid": "e0e9cbbc83a9bd5699d2a6bb782c93a2ef66e95b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUxMjgzMQ==", "bodyText": "Actually, because classloading can get messy, I've debated arguing in favor of removing this initialize method entirely, and just expecting implementations rely on their own way of getting configuration (their own config files, or environment parsing), so it's even more decoupled from Accumulo. But... that would make our own provided implementations that are currently built-in (for preserving existing behavior) more difficult, because they wouldn't be able to read general.classpaths, etc.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518512831", "createdAt": "2020-11-06T04:10:52Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The ClassLoaderFactory is defined by the property general.context.factory. The factory\n+ * implementation is configured externally to Accumulo and will return a ClassLoader for a given\n+ * contextName.\n+ *\n+ * @since 2.1.0\n+ *\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  /**\n+   * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n+   * that it can clean up contexts that are no longer being used.\n+   *\n+   * @param contextProperties\n+   *          Accumulo configuration properties\n+   * @throws Exception\n+   *           if error initializing ClassLoaderFactory\n+   */\n+  void initialize(Supplier<Map<String,String>> contextProperties) throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3NjIyMA=="}, "originalCommit": {"oid": "e0e9cbbc83a9bd5699d2a6bb782c93a2ef66e95b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1OTExNQ==", "bodyText": "The concept that we know everything we may ever want to pass into a method is not something that has worked out too well in the past for the Accumulo API and its riddled with many duplicative overloaded methods as a result.   The parameter interface is an attempt to avoid repeating a mistake that has been made many times in the past.\nI don't think there is a 0% chance that another parameter will ever be needed.  While valid use case likely exists, we may or may not encounter them.  I have no idea what the chances are, so I am ok w/ someone making the judgement call that its not worth worrying about.  Personally I would worry about it simply based on past experience w/ API evolution.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r519059115", "createdAt": "2020-11-06T23:49:46Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The ClassLoaderFactory is defined by the property general.context.factory. The factory\n+ * implementation is configured externally to Accumulo and will return a ClassLoader for a given\n+ * contextName.\n+ *\n+ * @since 2.1.0\n+ *\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  /**\n+   * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n+   * that it can clean up contexts that are no longer being used.\n+   *\n+   * @param contextProperties\n+   *          Accumulo configuration properties\n+   * @throws Exception\n+   *           if error initializing ClassLoaderFactory\n+   */\n+  void initialize(Supplier<Map<String,String>> contextProperties) throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3NjIyMA=="}, "originalCommit": {"oid": "e0e9cbbc83a9bd5699d2a6bb782c93a2ef66e95b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIyNjI5Nw==", "bodyText": "It wasn't so much that I think \"we know everything we may ever want to pass\", so much as it was \"I want to restrict what we can pass, to avoid scope creep\". I don't feel too strongly about this and am okay with Keith's API strategy here.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r525226297", "createdAt": "2020-11-17T15:05:18Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The ClassLoaderFactory is defined by the property general.context.factory. The factory\n+ * implementation is configured externally to Accumulo and will return a ClassLoader for a given\n+ * contextName.\n+ *\n+ * @since 2.1.0\n+ *\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  /**\n+   * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n+   * that it can clean up contexts that are no longer being used.\n+   *\n+   * @param contextProperties\n+   *          Accumulo configuration properties\n+   * @throws Exception\n+   *           if error initializing ClassLoaderFactory\n+   */\n+  void initialize(Supplier<Map<String,String>> contextProperties) throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3NjIyMA=="}, "originalCommit": {"oid": "e0e9cbbc83a9bd5699d2a6bb782c93a2ef66e95b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzY0Mzg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODowMzozNVrOHtjtdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTowOToyM1rOHuxyEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzMzA0Nw==", "bodyText": "Since initialize isn't synchronized, do we want to do something here to prevent this from being changed (by a competing thread) once set?", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517533047", "createdAt": "2020-11-04T18:03:35Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgxMjE3Ng==", "bodyText": "I can synchronize the method with no penalty as it's only called once per server process.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518812176", "createdAt": "2020-11-06T15:09:23Z", "author": {"login": "dlmarion"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzMzA0Nw=="}, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzY0NTY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODowNDowN1rOHtjulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToxMDowOFrOHux0Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzMzMzNQ==", "bodyText": "Can we move this warnings suppression closer to the objects that it applies to, if we must have it?", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517533335", "createdAt": "2020-11-04T18:04:07Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static Supplier<Map<String,String>> CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgxMjczNA==", "bodyText": "I removed the annotation as I can't move it closer.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518812734", "createdAt": "2020-11-06T15:10:08Z", "author": {"login": "dlmarion"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static Supplier<Map<String,String>> CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzMzMzNQ=="}, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzY2MTI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODowODozMlrOHtj4bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODowODozMlrOHtj4bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNTg1Mw==", "bodyText": "I think this should call .getKey() instead of .toString()", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517535853", "createdAt": "2020-11-04T18:08:32Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static Supplier<Map<String,String>> CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static void initialize(Supplier<Map<String,String>> conf) throws Exception {\n+    if (null == CONF) {\n+      CONF = conf;\n+      LOG.info(\"Creating ContextClassLoaderFactory\");\n+      var factoryName = CONF.get().get(Property.GENERAL_CONTEXT_CLASSLOADER_FACTORY.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzY2NDY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/classloader/LegacyVFSContextClassLoaderFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODowOToyMFrOHtj6ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODowOToyMFrOHtj6ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNjM1Ng==", "bodyText": "Should use .getKey() instead of .toString().", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517536356", "createdAt": "2020-11-04T18:09:20Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/LegacyVFSContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader;\n+import org.apache.accumulo.start.classloader.vfs.ContextManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Deprecated(since = \"2.1.0\", forRemoval = true)\n+public class LegacyVFSContextClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(LegacyVFSContextClassLoaderFactory.class);\n+\n+  public void initialize(Supplier<Map<String,String>> contextProperties) {\n+    try {\n+      AccumuloVFSClassLoader.getContextManager()\n+          .setContextConfig(new ContextManager.DefaultContextsConfig() {\n+            @Override\n+            public Map<String,String> getVfsContextClasspathProperties() {\n+              return contextProperties.get();\n+            }\n+          });\n+      LOG.debug(\"ContextManager configuration set\");\n+      new Timer(\"LegacyVFSContextClassLoaderFactory-cleanup\", true)\n+          .scheduleAtFixedRate(new TimerTask() {\n+            @Override\n+            public void run() {\n+              try {\n+                if (LOG.isTraceEnabled()) {\n+                  LOG.trace(\"LegacyVFSContextClassLoaderFactory-cleanup thread, properties: {}\",\n+                      contextProperties.get());\n+                }\n+                Set<String> configuredContexts = new HashSet<>();\n+                contextProperties.get().keySet().forEach(k -> {\n+                  if (k.startsWith(Property.VFS_CONTEXT_CLASSPATH_PROPERTY.toString())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzY3MjIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/classloader/LegacyVFSContextClassLoaderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxMToxNFrOHtj-5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToxOToxOFrOHuyMxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNzUxMQ==", "bodyText": "UncheckedIOException should be used to wrap IOException as a runtime exception.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517537511", "createdAt": "2020-11-04T18:11:14Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/LegacyVFSContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader;\n+import org.apache.accumulo.start.classloader.vfs.ContextManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Deprecated(since = \"2.1.0\", forRemoval = true)\n+public class LegacyVFSContextClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(LegacyVFSContextClassLoaderFactory.class);\n+\n+  public void initialize(Supplier<Map<String,String>> contextProperties) {\n+    try {\n+      AccumuloVFSClassLoader.getContextManager()\n+          .setContextConfig(new ContextManager.DefaultContextsConfig() {\n+            @Override\n+            public Map<String,String> getVfsContextClasspathProperties() {\n+              return contextProperties.get();\n+            }\n+          });\n+      LOG.debug(\"ContextManager configuration set\");\n+      new Timer(\"LegacyVFSContextClassLoaderFactory-cleanup\", true)\n+          .scheduleAtFixedRate(new TimerTask() {\n+            @Override\n+            public void run() {\n+              try {\n+                if (LOG.isTraceEnabled()) {\n+                  LOG.trace(\"LegacyVFSContextClassLoaderFactory-cleanup thread, properties: {}\",\n+                      contextProperties.get());\n+                }\n+                Set<String> configuredContexts = new HashSet<>();\n+                contextProperties.get().keySet().forEach(k -> {\n+                  if (k.startsWith(Property.VFS_CONTEXT_CLASSPATH_PROPERTY.toString())) {\n+                    configuredContexts.add(\n+                        k.substring(Property.VFS_CONTEXT_CLASSPATH_PROPERTY.toString().length()));\n+                  }\n+                });\n+                LOG.trace(\"LegacyVFSContextClassLoaderFactory-cleanup thread, contexts in use: {}\",\n+                    configuredContexts);\n+                AccumuloVFSClassLoader.getContextManager().removeUnusedContexts(configuredContexts);\n+              } catch (IOException e) {\n+                LOG.warn(\"{}\", e.getMessage(), e);\n+              }\n+            }\n+          }, 60000, 60000);\n+      LOG.debug(\"Context cleanup timer started at 60s intervals\");\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgxOTAxMw==", "bodyText": "interesting, didn't know about that. Thanks.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518819013", "createdAt": "2020-11-06T15:19:18Z", "author": {"login": "dlmarion"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/LegacyVFSContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader;\n+import org.apache.accumulo.start.classloader.vfs.ContextManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Deprecated(since = \"2.1.0\", forRemoval = true)\n+public class LegacyVFSContextClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(LegacyVFSContextClassLoaderFactory.class);\n+\n+  public void initialize(Supplier<Map<String,String>> contextProperties) {\n+    try {\n+      AccumuloVFSClassLoader.getContextManager()\n+          .setContextConfig(new ContextManager.DefaultContextsConfig() {\n+            @Override\n+            public Map<String,String> getVfsContextClasspathProperties() {\n+              return contextProperties.get();\n+            }\n+          });\n+      LOG.debug(\"ContextManager configuration set\");\n+      new Timer(\"LegacyVFSContextClassLoaderFactory-cleanup\", true)\n+          .scheduleAtFixedRate(new TimerTask() {\n+            @Override\n+            public void run() {\n+              try {\n+                if (LOG.isTraceEnabled()) {\n+                  LOG.trace(\"LegacyVFSContextClassLoaderFactory-cleanup thread, properties: {}\",\n+                      contextProperties.get());\n+                }\n+                Set<String> configuredContexts = new HashSet<>();\n+                contextProperties.get().keySet().forEach(k -> {\n+                  if (k.startsWith(Property.VFS_CONTEXT_CLASSPATH_PROPERTY.toString())) {\n+                    configuredContexts.add(\n+                        k.substring(Property.VFS_CONTEXT_CLASSPATH_PROPERTY.toString().length()));\n+                  }\n+                });\n+                LOG.trace(\"LegacyVFSContextClassLoaderFactory-cleanup thread, contexts in use: {}\",\n+                    configuredContexts);\n+                AccumuloVFSClassLoader.getContextManager().removeUnusedContexts(configuredContexts);\n+              } catch (IOException e) {\n+                LOG.warn(\"{}\", e.getMessage(), e);\n+              }\n+            }\n+          }, 60000, 60000);\n+      LOG.debug(\"Context cleanup timer started at 60s intervals\");\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNzUxMQ=="}, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzY3MzA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/classloader/LegacyVFSContextClassLoaderFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxMTozMVrOHtj_dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxMTozMVrOHtj_dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNzY1NQ==", "bodyText": "UncheckedIOException", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517537655", "createdAt": "2020-11-04T18:11:31Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/LegacyVFSContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader;\n+import org.apache.accumulo.start.classloader.vfs.ContextManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Deprecated(since = \"2.1.0\", forRemoval = true)\n+public class LegacyVFSContextClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(LegacyVFSContextClassLoaderFactory.class);\n+\n+  public void initialize(Supplier<Map<String,String>> contextProperties) {\n+    try {\n+      AccumuloVFSClassLoader.getContextManager()\n+          .setContextConfig(new ContextManager.DefaultContextsConfig() {\n+            @Override\n+            public Map<String,String> getVfsContextClasspathProperties() {\n+              return contextProperties.get();\n+            }\n+          });\n+      LOG.debug(\"ContextManager configuration set\");\n+      new Timer(\"LegacyVFSContextClassLoaderFactory-cleanup\", true)\n+          .scheduleAtFixedRate(new TimerTask() {\n+            @Override\n+            public void run() {\n+              try {\n+                if (LOG.isTraceEnabled()) {\n+                  LOG.trace(\"LegacyVFSContextClassLoaderFactory-cleanup thread, properties: {}\",\n+                      contextProperties.get());\n+                }\n+                Set<String> configuredContexts = new HashSet<>();\n+                contextProperties.get().keySet().forEach(k -> {\n+                  if (k.startsWith(Property.VFS_CONTEXT_CLASSPATH_PROPERTY.toString())) {\n+                    configuredContexts.add(\n+                        k.substring(Property.VFS_CONTEXT_CLASSPATH_PROPERTY.toString().length()));\n+                  }\n+                });\n+                LOG.trace(\"LegacyVFSContextClassLoaderFactory-cleanup thread, contexts in use: {}\",\n+                    configuredContexts);\n+                AccumuloVFSClassLoader.getContextManager().removeUnusedContexts(configuredContexts);\n+              } catch (IOException e) {\n+                LOG.warn(\"{}\", e.getMessage(), e);\n+              }\n+            }\n+          }, 60000, 60000);\n+      LOG.debug(\"Context cleanup timer started at 60s intervals\");\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+\n+  }\n+\n+  @Override\n+  public ClassLoader getClassLoader(String contextName) throws IllegalArgumentException {\n+    try {\n+      return AccumuloVFSClassLoader.getContextManager().getClassLoader(contextName);\n+    } catch (IOException e) {\n+      throw new RuntimeException(\"Error getting context class loader for context: \" + contextName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Mzc3MTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODozODo1N1rOHtk8Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTowNjo0NFrOHuxrcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1MzIwNw==", "bodyText": "Is there not an appropriate existing utility class where this single static method can live? I think there's similar methods in the ConfigurationTypeHelper class.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517553207", "createdAt": "2020-11-04T18:38:57Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader;\n+\n+public class ClassLoaderUtil {\n+\n+  public static <U> Class<? extends U> loadClass(String contextName, String className,\n+      Class<U> extension) throws ClassNotFoundException {\n+    if (contextName != null && !contextName.equals(\"\"))\n+      return ContextClassLoaders.getClassLoader(contextName).loadClass(className)\n+          .asSubclass(extension);\n+    else\n+      return AccumuloVFSClassLoader.loadClass(className, extension);\n+\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgxMDQ4MA==", "bodyText": "ConfigurationTypeHelper calls this utility class now. It's certainly possible to move this method to a new class, I'm not sure which class is appropriate. Suggestions?", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518810480", "createdAt": "2020-11-06T15:06:44Z", "author": {"login": "dlmarion"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader;\n+\n+public class ClassLoaderUtil {\n+\n+  public static <U> Class<? extends U> loadClass(String contextName, String className,\n+      Class<U> extension) throws ClassNotFoundException {\n+    if (contextName != null && !contextName.equals(\"\"))\n+      return ContextClassLoaders.getClassLoader(contextName).loadClass(className)\n+          .asSubclass(extension);\n+    else\n+      return AccumuloVFSClassLoader.loadClass(className, extension);\n+\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1MzIwNw=="}, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Mzc3NjM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo0MDoyNFrOHtk_dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTowNjoyNlrOHuxqvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1NDAzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (contextName != null && !contextName.equals(\"\"))\n          \n          \n            \n                if (contextName != null && !contextName.isEmpty())", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517554039", "createdAt": "2020-11-04T18:40:24Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader;\n+\n+public class ClassLoaderUtil {\n+\n+  public static <U> Class<? extends U> loadClass(String contextName, String className,\n+      Class<U> extension) throws ClassNotFoundException {\n+    if (contextName != null && !contextName.equals(\"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgxMDMwMA==", "bodyText": "Changed.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518810300", "createdAt": "2020-11-06T15:06:26Z", "author": {"login": "dlmarion"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader;\n+\n+public class ClassLoaderUtil {\n+\n+  public static <U> Class<? extends U> loadClass(String contextName, String className,\n+      Class<U> extension) throws ClassNotFoundException {\n+    if (contextName != null && !contextName.equals(\"\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1NDAzOQ=="}, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Mzc4NjkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo0MzoyOVrOHtlGFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToxMToxM1rOHux3QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1NTczNQ==", "bodyText": "You used isBlank above to check this instead of isEmpty, which implies that the string is not already stripped of whitespace. So, that implies factoryName might need to be stripped of surrounding whitespace. If it's not possible for it to have surrounding whitespace, then isEmpty might be more appropriate above than isBlank.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517555735", "createdAt": "2020-11-04T18:43:29Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static Supplier<Map<String,String>> CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static void initialize(Supplier<Map<String,String>> conf) throws Exception {\n+    if (null == CONF) {\n+      CONF = conf;\n+      LOG.info(\"Creating ContextClassLoaderFactory\");\n+      var factoryName = CONF.get().get(Property.GENERAL_CONTEXT_CLASSLOADER_FACTORY.toString());\n+      if (null == factoryName || factoryName.isBlank()) {\n+        LOG.info(\"No ClassLoaderFactory specified\");\n+        return;\n+      }\n+      try {\n+        var factoryClass = Class.forName(factoryName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgxMzUwNQ==", "bodyText": "Changed to isEmpty()", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518813505", "createdAt": "2020-11-06T15:11:13Z", "author": {"login": "dlmarion"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static Supplier<Map<String,String>> CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static void initialize(Supplier<Map<String,String>> conf) throws Exception {\n+    if (null == CONF) {\n+      CONF = conf;\n+      LOG.info(\"Creating ContextClassLoaderFactory\");\n+      var factoryName = CONF.get().get(Property.GENERAL_CONTEXT_CLASSLOADER_FACTORY.toString());\n+      if (null == factoryName || factoryName.isBlank()) {\n+        LOG.info(\"No ClassLoaderFactory specified\");\n+        return;\n+      }\n+      try {\n+        var factoryClass = Class.forName(factoryName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1NTczNQ=="}, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Mzc4OTAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo0NDowNlrOHtlHXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo0NDowNlrOHtlHXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1NjA2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      FACTORY.initialize(new Supplier<Map<String,String>>() {\n          \n          \n            \n                        @Override\n          \n          \n            \n                        public Map<String,String> get() {\n          \n          \n            \n                          return CONF.get();\n          \n          \n            \n                        }\n          \n          \n            \n                      });\n          \n          \n            \n                      FACTORY.initialize(() -> CONF.get());", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517556063", "createdAt": "2020-11-04T18:44:06Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static Supplier<Map<String,String>> CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static void initialize(Supplier<Map<String,String>> conf) throws Exception {\n+    if (null == CONF) {\n+      CONF = conf;\n+      LOG.info(\"Creating ContextClassLoaderFactory\");\n+      var factoryName = CONF.get().get(Property.GENERAL_CONTEXT_CLASSLOADER_FACTORY.toString());\n+      if (null == factoryName || factoryName.isBlank()) {\n+        LOG.info(\"No ClassLoaderFactory specified\");\n+        return;\n+      }\n+      try {\n+        var factoryClass = Class.forName(factoryName);\n+        if (ContextClassLoaderFactory.class.isAssignableFrom(factoryClass)) {\n+          LOG.info(\"Creating ContextClassLoaderFactory: {}\", factoryName);\n+          FACTORY = ((Class<? extends ContextClassLoaderFactory>) factoryClass)\n+              .getDeclaredConstructor().newInstance();\n+          FACTORY.initialize(new Supplier<Map<String,String>>() {\n+            @Override\n+            public Map<String,String> get() {\n+              return CONF.get();\n+            }\n+          });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzgwMjQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo0Nzo0OVrOHtlPsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToxNzo1NVrOHuyIdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1ODE5Mw==", "bodyText": "You're catching an RTE to log and then throw a different RTE. This adds redundant logs and makes it harder to get a meaningful stack trace. It'd be better to just let the IAE fall through.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517558193", "createdAt": "2020-11-04T18:47:49Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static Supplier<Map<String,String>> CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static void initialize(Supplier<Map<String,String>> conf) throws Exception {\n+    if (null == CONF) {\n+      CONF = conf;\n+      LOG.info(\"Creating ContextClassLoaderFactory\");\n+      var factoryName = CONF.get().get(Property.GENERAL_CONTEXT_CLASSLOADER_FACTORY.toString());\n+      if (null == factoryName || factoryName.isBlank()) {\n+        LOG.info(\"No ClassLoaderFactory specified\");\n+        return;\n+      }\n+      try {\n+        var factoryClass = Class.forName(factoryName);\n+        if (ContextClassLoaderFactory.class.isAssignableFrom(factoryClass)) {\n+          LOG.info(\"Creating ContextClassLoaderFactory: {}\", factoryName);\n+          FACTORY = ((Class<? extends ContextClassLoaderFactory>) factoryClass)\n+              .getDeclaredConstructor().newInstance();\n+          FACTORY.initialize(new Supplier<Map<String,String>>() {\n+            @Override\n+            public Map<String,String> get() {\n+              return CONF.get();\n+            }\n+          });\n+        } else {\n+          throw new RuntimeException(factoryName + \" does not implement ContextClassLoaderFactory\");\n+        }\n+      } catch (ClassNotFoundException | InstantiationException | IllegalAccessException\n+          | IllegalArgumentException | InvocationTargetException | NoSuchMethodException\n+          | SecurityException e) {\n+        LOG.error(\n+            \"Unable to load and initialize class: {}. Ensure that the jar containing the ContextClassLoaderFactory is on the classpath\",\n+            factoryName);\n+        throw e;\n+      }\n+    } else {\n+      LOG.debug(\"ContextClassLoaderFactory already initialized.\");\n+    }\n+  }\n+\n+  /**\n+   * Return the ClassLoader for the given contextName\n+   *\n+   * @param contextName\n+   *          name\n+   * @return ClassLoader for contextName, do not cache this\n+   * @throws RuntimeException\n+   *           if contextName not configured\n+   */\n+  public static ClassLoader getClassLoader(String contextName) {\n+    try {\n+      // Cannot cache the ClassLoader result as it\n+      // may change when the ClassLoader reloads\n+      return FACTORY.getClassLoader(contextName);\n+    } catch (IllegalArgumentException e) {\n+      LOG.error(\"ContextClassLoaderFactory is not configured for context: {}\", contextName);\n+      throw new RuntimeException(\n+          \"ContextClassLoaderFactory is not configured for context: \" + contextName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgxNzkxMQ==", "bodyText": "Made this change.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518817911", "createdAt": "2020-11-06T15:17:55Z", "author": {"login": "dlmarion"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static Supplier<Map<String,String>> CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static void initialize(Supplier<Map<String,String>> conf) throws Exception {\n+    if (null == CONF) {\n+      CONF = conf;\n+      LOG.info(\"Creating ContextClassLoaderFactory\");\n+      var factoryName = CONF.get().get(Property.GENERAL_CONTEXT_CLASSLOADER_FACTORY.toString());\n+      if (null == factoryName || factoryName.isBlank()) {\n+        LOG.info(\"No ClassLoaderFactory specified\");\n+        return;\n+      }\n+      try {\n+        var factoryClass = Class.forName(factoryName);\n+        if (ContextClassLoaderFactory.class.isAssignableFrom(factoryClass)) {\n+          LOG.info(\"Creating ContextClassLoaderFactory: {}\", factoryName);\n+          FACTORY = ((Class<? extends ContextClassLoaderFactory>) factoryClass)\n+              .getDeclaredConstructor().newInstance();\n+          FACTORY.initialize(new Supplier<Map<String,String>>() {\n+            @Override\n+            public Map<String,String> get() {\n+              return CONF.get();\n+            }\n+          });\n+        } else {\n+          throw new RuntimeException(factoryName + \" does not implement ContextClassLoaderFactory\");\n+        }\n+      } catch (ClassNotFoundException | InstantiationException | IllegalAccessException\n+          | IllegalArgumentException | InvocationTargetException | NoSuchMethodException\n+          | SecurityException e) {\n+        LOG.error(\n+            \"Unable to load and initialize class: {}. Ensure that the jar containing the ContextClassLoaderFactory is on the classpath\",\n+            factoryName);\n+        throw e;\n+      }\n+    } else {\n+      LOG.debug(\"ContextClassLoaderFactory already initialized.\");\n+    }\n+  }\n+\n+  /**\n+   * Return the ClassLoader for the given contextName\n+   *\n+   * @param contextName\n+   *          name\n+   * @return ClassLoader for contextName, do not cache this\n+   * @throws RuntimeException\n+   *           if contextName not configured\n+   */\n+  public static ClassLoader getClassLoader(String contextName) {\n+    try {\n+      // Cannot cache the ClassLoader result as it\n+      // may change when the ClassLoader reloads\n+      return FACTORY.getClassLoader(contextName);\n+    } catch (IllegalArgumentException e) {\n+      LOG.error(\"ContextClassLoaderFactory is not configured for context: {}\", contextName);\n+      throw new RuntimeException(\n+          \"ContextClassLoaderFactory is not configured for context: \" + contextName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1ODE5Mw=="}, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzgwNTY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/conf/ConfigurationCopy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo0ODo1MlrOHtlRyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo0ODo1MlrOHtlRyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1ODczMQ==", "bodyText": "It looks like this constructor was added, but not used.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517558731", "createdAt": "2020-11-04T18:48:52Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/ConfigurationCopy.java", "diffHunk": "@@ -49,9 +50,17 @@ public ConfigurationCopy(Map<String,String> config) {\n    *          configuration property iterable to use for copying\n    */\n   public ConfigurationCopy(Iterable<Entry<String,String>> config) {\n-    for (Entry<String,String> entry : config) {\n-      copy.put(entry.getKey(), entry.getValue());\n-    }\n+    this(config.iterator());\n+  }\n+\n+  /**\n+   * Creates a new configuration.\n+   *\n+   * @param config\n+   *          configuration property iterator to use for copying\n+   */\n+  public ConfigurationCopy(Iterator<Entry<String,String>> config) {\n+    config.forEachRemaining(e -> copy.put(e.getKey(), e.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzgxNTUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo1MTo0M1rOHtlYBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToxNzo0OFrOHuyIMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2MDMyNA==", "bodyText": "Is this method even necessary? Could just have a getter for the FACTORY. I'm not sure this static method adds much in terms of convenience.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517560324", "createdAt": "2020-11-04T18:51:43Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.apache.accumulo.core.conf.AccumuloConfiguration;\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.apache.accumulo.core.util.ConfigurationImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static AccumuloConfiguration CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static void initialize(AccumuloConfiguration conf) throws Exception {\n+    if (null == CONF) {\n+      CONF = conf;\n+      LOG.info(\"Creating ContextClassLoaderFactory\");\n+      var factoryName = CONF.get(Property.GENERAL_CONTEXT_CLASSLOADER_FACTORY.toString());\n+      if (null == factoryName || factoryName.isBlank()) {\n+        LOG.info(\"No ClassLoaderFactory specified\");\n+        return;\n+      }\n+      try {\n+        var factoryClass = Class.forName(factoryName);\n+        if (ContextClassLoaderFactory.class.isAssignableFrom(factoryClass)) {\n+          LOG.info(\"Creating ContextClassLoaderFactory: {}\", factoryName);\n+          FACTORY = ((Class<? extends ContextClassLoaderFactory>) factoryClass)\n+              .getDeclaredConstructor().newInstance();\n+          FACTORY.initialize(new ConfigurationImpl(CONF));\n+        } else {\n+          throw new RuntimeException(factoryName + \" does not implement ContextClassLoaderFactory\");\n+        }\n+      } catch (ClassNotFoundException | InstantiationException | IllegalAccessException\n+          | IllegalArgumentException | InvocationTargetException | NoSuchMethodException\n+          | SecurityException e) {\n+        LOG.error(\n+            \"Unable to load and initialize class: {}. Ensure that the jar containing the ContextClassLoaderFactory is on the classpath\",\n+            factoryName);\n+        throw e;\n+      }\n+    } else {\n+      LOG.debug(\"ContextClassLoaderFactory already initialized.\");\n+    }\n+  }\n+\n+  /**\n+   * Return the ClassLoader for the given contextName\n+   *\n+   * @param contextName\n+   *          name\n+   * @return ClassLoader for contextName, do not cache this\n+   * @throws RuntimeException\n+   *           if contextName not configured\n+   */\n+  public static ClassLoader getClassLoader(String contextName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgxNzg0MQ==", "bodyText": "Made this change.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518817841", "createdAt": "2020-11-06T15:17:48Z", "author": {"login": "dlmarion"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.apache.accumulo.core.conf.AccumuloConfiguration;\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.apache.accumulo.core.util.ConfigurationImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static AccumuloConfiguration CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static void initialize(AccumuloConfiguration conf) throws Exception {\n+    if (null == CONF) {\n+      CONF = conf;\n+      LOG.info(\"Creating ContextClassLoaderFactory\");\n+      var factoryName = CONF.get(Property.GENERAL_CONTEXT_CLASSLOADER_FACTORY.toString());\n+      if (null == factoryName || factoryName.isBlank()) {\n+        LOG.info(\"No ClassLoaderFactory specified\");\n+        return;\n+      }\n+      try {\n+        var factoryClass = Class.forName(factoryName);\n+        if (ContextClassLoaderFactory.class.isAssignableFrom(factoryClass)) {\n+          LOG.info(\"Creating ContextClassLoaderFactory: {}\", factoryName);\n+          FACTORY = ((Class<? extends ContextClassLoaderFactory>) factoryClass)\n+              .getDeclaredConstructor().newInstance();\n+          FACTORY.initialize(new ConfigurationImpl(CONF));\n+        } else {\n+          throw new RuntimeException(factoryName + \" does not implement ContextClassLoaderFactory\");\n+        }\n+      } catch (ClassNotFoundException | InstantiationException | IllegalAccessException\n+          | IllegalArgumentException | InvocationTargetException | NoSuchMethodException\n+          | SecurityException e) {\n+        LOG.error(\n+            \"Unable to load and initialize class: {}. Ensure that the jar containing the ContextClassLoaderFactory is on the classpath\",\n+            factoryName);\n+        throw e;\n+      }\n+    } else {\n+      LOG.debug(\"ContextClassLoaderFactory already initialized.\");\n+    }\n+  }\n+\n+  /**\n+   * Return the ClassLoader for the given contextName\n+   *\n+   * @param contextName\n+   *          name\n+   * @return ClassLoader for contextName, do not cache this\n+   * @throws RuntimeException\n+   *           if contextName not configured\n+   */\n+  public static ClassLoader getClassLoader(String contextName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2MDMyNA=="}, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzgzMDcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo1NTozNFrOHtlhOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODo1NTozNFrOHtlhOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2MjY4MA==", "bodyText": "We should inline this property's key. I don't think there's a reason to have that string located in a separate constant outside this class. That was only done for some of the VFS stuff that existed in the start module. But, this constant is just in a different location in the core module.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517562680", "createdAt": "2020-11-04T18:55:34Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -196,6 +198,9 @@\n           + \"Additionally, this property no longer does property interpolation of environment \"\n           + \"variables, such as '$ACCUMULO_HOME'. Use commons-configuration syntax,\"\n           + \"'${env:ACCUMULO_HOME}' instead.\"),\n+  GENERAL_CONTEXT_CLASSLOADER_FACTORY(ContextClassLoaders.CONTEXT_CLASS_LOADER_FACTORY,\n+      LegacyVFSContextClassLoaderFactory.class.getName(), PropertyType.STRING,\n+      \"Name of classloader factory to be used to create classloaders for named contexts.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDE5MTc2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo0MzoyMVrOHtpAHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjowNjozMlrOHu_Bug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxOTc0Mw==", "bodyText": "Should we use semicolon as the delimiter, because so this behaves more like a CLASSPATH?", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517619743", "createdAt": "2020-11-04T20:43:21Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment.Configuration;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class URLClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final String COMMA = \",\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyMjQ0Mw==", "bodyText": "I'm not sure that this is important as it's a test class", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518822443", "createdAt": "2020-11-06T15:23:51Z", "author": {"login": "dlmarion"}, "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment.Configuration;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class URLClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final String COMMA = \",\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxOTc0Mw=="}, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzNDc4Mw==", "bodyText": "Oh right. I was thinking we'd provide this one as a reference imlementation built-in, for users. If it's just a test, user experience doesn't matter.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518834783", "createdAt": "2020-11-06T15:42:57Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment.Configuration;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class URLClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final String COMMA = \",\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxOTc0Mw=="}, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyOTE3OA==", "bodyText": "Some times test cases are a good way to find code to build upon - especially if there is no reference implementation or examples in documentation.  Not saying that this instance needs to change, but more of a something to keep in mind.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r519029178", "createdAt": "2020-11-06T22:06:32Z", "author": {"login": "EdColeman"}, "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment.Configuration;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class URLClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final String COMMA = \",\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxOTc0Mw=="}, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDE5NDI0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo0NDoxMlrOHtpBvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToyNjoxMVrOHuygTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMDE1Nw==", "bodyText": "It would be good to use more specific RTEs instead of the generic one, whenever a more appropriate one is available. Here, IllegalArgumentException would be appropriate.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517620157", "createdAt": "2020-11-04T20:44:12Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment.Configuration;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class URLClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final String COMMA = \",\";\n+  private static final Logger LOG = LoggerFactory.getLogger(URLClassLoaderFactory.class);\n+\n+  @Override\n+  public void initialize(Configuration contextProperties) throws Exception {}\n+\n+  @Override\n+  public ClassLoader getClassLoader(String contextName) throws IllegalArgumentException {\n+    // The context name is the classpath.\n+    var parts = contextName.split(COMMA);\n+    var urls = new ArrayList<URL>();\n+    for (String p : parts) {\n+      try {\n+        urls.add(new URL(p));\n+      } catch (MalformedURLException e) {\n+        LOG.error(\"Error creating URL from classpath segment: \" + p);\n+        throw new RuntimeException(\"Error creating URL from classpath segment: \" + p, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyNDAxNA==", "bodyText": "Changed to throw IAE", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518824014", "createdAt": "2020-11-06T15:26:11Z", "author": {"login": "dlmarion"}, "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment.Configuration;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class URLClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final String COMMA = \",\";\n+  private static final Logger LOG = LoggerFactory.getLogger(URLClassLoaderFactory.class);\n+\n+  @Override\n+  public void initialize(Configuration contextProperties) throws Exception {}\n+\n+  @Override\n+  public ClassLoader getClassLoader(String contextName) throws IllegalArgumentException {\n+    // The context name is the classpath.\n+    var parts = contextName.split(COMMA);\n+    var urls = new ArrayList<URL>();\n+    for (String p : parts) {\n+      try {\n+        urls.add(new URL(p));\n+      } catch (MalformedURLException e) {\n+        LOG.error(\"Error creating URL from classpath segment: \" + p);\n+        throw new RuntimeException(\"Error creating URL from classpath segment: \" + p, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMDE1Nw=="}, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDE5ODg2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo0NToyN1rOHtpEew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToyNTo1OVrOHuyfvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMDg1OQ==", "bodyText": "Should log or throw, but not both. This is how we get duplicate log messages in the log files. The caller can choose to log as part of its handling mechanism, if you choose to throw.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517620859", "createdAt": "2020-11-04T20:45:27Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment.Configuration;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class URLClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final String COMMA = \",\";\n+  private static final Logger LOG = LoggerFactory.getLogger(URLClassLoaderFactory.class);\n+\n+  @Override\n+  public void initialize(Configuration contextProperties) throws Exception {}\n+\n+  @Override\n+  public ClassLoader getClassLoader(String contextName) throws IllegalArgumentException {\n+    // The context name is the classpath.\n+    var parts = contextName.split(COMMA);\n+    var urls = new ArrayList<URL>();\n+    for (String p : parts) {\n+      try {\n+        urls.add(new URL(p));\n+      } catch (MalformedURLException e) {\n+        LOG.error(\"Error creating URL from classpath segment: \" + p);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyMzg3MQ==", "bodyText": "I removed the log", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r518823871", "createdAt": "2020-11-06T15:25:59Z", "author": {"login": "dlmarion"}, "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment.Configuration;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class URLClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final String COMMA = \",\";\n+  private static final Logger LOG = LoggerFactory.getLogger(URLClassLoaderFactory.class);\n+\n+  @Override\n+  public void initialize(Configuration contextProperties) throws Exception {}\n+\n+  @Override\n+  public ClassLoader getClassLoader(String contextName) throws IllegalArgumentException {\n+    // The context name is the classpath.\n+    var parts = contextName.split(COMMA);\n+    var urls = new ArrayList<URL>();\n+    for (String p : parts) {\n+      try {\n+        urls.add(new URL(p));\n+      } catch (MalformedURLException e) {\n+        LOG.error(\"Error creating URL from classpath segment: \" + p);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMDg1OQ=="}, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDIwODcxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo0ODozMFrOHtpKgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo0ODozMFrOHtpKgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMjQwMw==", "bodyText": "This can probably be done a bit more succinctly with streams, something like:\n  var urls = Stream.of(contextName.split(DELIM)).map( p -> toUrl(p) ).collect(Collectors.toList());", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517622403", "createdAt": "2020-11-04T20:48:30Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment.Configuration;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class URLClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final String COMMA = \",\";\n+  private static final Logger LOG = LoggerFactory.getLogger(URLClassLoaderFactory.class);\n+\n+  @Override\n+  public void initialize(Configuration contextProperties) throws Exception {}\n+\n+  @Override\n+  public ClassLoader getClassLoader(String contextName) throws IllegalArgumentException {\n+    // The context name is the classpath.\n+    var parts = contextName.split(COMMA);\n+    var urls = new ArrayList<URL>();\n+    for (String p : parts) {\n+      try {\n+        urls.add(new URL(p));\n+      } catch (MalformedURLException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDIyNTY2OnYy", "diffSide": "RIGHT", "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo1Mzo0N1rOHtpUzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo1Mzo0N1rOHtpUzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNTAzNw==", "bodyText": "Maybe only catch checked exceptions here. Anything falling through that isn't a checked exception is already an RTE and we don't need to rewrap as a new RTE.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517625037", "createdAt": "2020-11-04T20:53:47Z", "author": {"login": "ctubbsii"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java", "diffHunk": "@@ -378,14 +377,12 @@ public static void main(String[] args) throws Exception {\n         Property.MASTER_TABLET_BALANCER, TabletBalancer.class, new DefaultLoadBalancer());\n     this.tabletBalancer.init(context);\n \n-    AccumuloVFSClassLoader.getContextManager()\n-        .setContextConfig(new ContextManager.DefaultContextsConfig() {\n-          @Override\n-          public Map<String,String> getVfsContextClasspathProperties() {\n-            return getConfiguration()\n-                .getAllPropertiesWithPrefix(Property.VFS_CONTEXT_CLASSPATH_PROPERTY);\n-          }\n-        });\n+    try {\n+      ContextClassLoaders.initialize(aconf);\n+    } catch (Exception e1) {\n+      log.error(\"Error configuring ContextClassLoaderFactory\", e1);\n+      throw new RuntimeException(\"Error configuring ContextClassLoaderFactory\", e1);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDI1NjU1OnYy", "diffSide": "RIGHT", "path": "start/src/main/java/org/apache/accumulo/start/classloader/vfs/AccumuloVFSClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMTowMzo0M1rOHtpoEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMTowMzo0M1rOHtpoEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyOTk2OQ==", "bodyText": "I think there might be an IT that checks the printed strings... not sure. It's fine if it changes, but the IT might need to be updated.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517629969", "createdAt": "2020-11-04T21:03:43Z", "author": {"login": "ctubbsii"}, "path": "start/src/main/java/org/apache/accumulo/start/classloader/vfs/AccumuloVFSClassLoader.java", "diffHunk": "@@ -358,48 +360,24 @@ public static void printClassPath(Printer out, boolean debug) {\n           continue;\n         }\n \n-        String classLoaderDescription;\n-        switch (level) {\n-          case 1:\n-            classLoaderDescription =\n-                level + \": Java System Classloader (loads Java system resources)\";\n-            break;\n-          case 2:\n-            classLoaderDescription =\n-                level + \": Java Classloader (loads everything defined by java classpath)\";\n-            break;\n-          case 3:\n-            classLoaderDescription =\n-                level + \": Accumulo Classloader (loads everything defined by general.classpaths)\";\n-            break;\n-          case 4:\n-            classLoaderDescription = level + \": Accumulo Dynamic Classloader \"\n-                + \"(loads everything defined by general.dynamic.classpaths)\";\n-            break;\n-          default:\n-            classLoaderDescription = level + \": Mystery Classloader (\"\n-                + \"someone probably added a classloader and didn't update the switch statement in \"\n-                + AccumuloVFSClassLoader.class.getName() + \")\";\n-            break;\n-        }\n-\n         boolean sawFirst = false;\n+        String classLoaderDescription = \"Level: \" + level + \", Name: \" + classLoader.getName()\n+            + \", class: \" + classLoader.getClass().getName();\n         if (classLoader.getClass().getName().startsWith(\"jdk.internal\")) {\n           if (debug) {\n-            out.print(\"Level \" + classLoaderDescription + \" \" + classLoader.getClass().getName()\n-                + \" configuration not inspectable.\\n\");\n+            out.print(classLoaderDescription + \": configuration not inspectable.\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4055, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}