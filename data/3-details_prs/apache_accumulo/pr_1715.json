{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMzczNjE3", "number": 1715, "title": "Deprecation of VFS Class Loader items, new Context class loader management", "bodyText": "", "createdAt": "2020-09-25T21:13:32Z", "url": "https://github.com/apache/accumulo/pull/1715", "merged": true, "mergeCommit": {"oid": "98dc6cb41a7f70b1eff9fe80579e7cea5aeda4f3"}, "closed": true, "closedAt": "2020-11-17T14:51:10Z", "author": {"login": "dlmarion"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdH5bFwgH2gAyNDkzMzczNjE3OjIzNDVmMDdjNGY2YzE2ZjA1YWQzMGEyZDM3YjEzMjQ4NTBkNzBhYjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddGkLRgH2gAyNDkzMzczNjE3OmZiMmU4NzNhMGRkYjRmYjk3YjljNTFjMTZlZWY1ODQzODkwMmJmODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2345f07c4f6c16f05ad30a2d37b1324850d70ab7", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/2345f07c4f6c16f05ad30a2d37b1324850d70ab7", "committedDate": "2020-09-11T18:08:53Z", "message": "Adding new ReloadingVFSClassLoader, ContextClassLoaderFactory for managing context classloaders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed31a83e8a6e1ccfa75b003afaf1a54bea0a54a1", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/ed31a83e8a6e1ccfa75b003afaf1a54bea0a54a1", "committedDate": "2020-09-11T18:52:38Z", "message": "Resolve failures from maven build plugins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f1e6c004f1f823b6fa2aea93d899fa79c12b0f5", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/5f1e6c004f1f823b6fa2aea93d899fa79c12b0f5", "committedDate": "2020-09-11T19:06:42Z", "message": "Added / updated Deprecation annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f32cebb0da7267d1dab072d0c9391afcf766dd07", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/f32cebb0da7267d1dab072d0c9391afcf766dd07", "committedDate": "2020-09-11T19:12:57Z", "message": "Merge branch 'main' into add-new-vfs-classloader-impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e3dec252fa6b16280a35ae3761febfa8fed0863", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/9e3dec252fa6b16280a35ae3761febfa8fed0863", "committedDate": "2020-09-21T13:05:36Z", "message": "Merge branch 'main' into add-new-vfs-classloader-impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a65a9b6a2eabd470d294232b06ea95c0d81ab31c", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/a65a9b6a2eabd470d294232b06ea95c0d81ab31c", "committedDate": "2020-09-21T13:53:32Z", "message": "Moved new classloader to its own repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41d82b0d0339177165fcf17299d34ef03d2fdbf3", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/41d82b0d0339177165fcf17299d34ef03d2fdbf3", "committedDate": "2020-09-21T14:34:32Z", "message": "Throw runtime exception instead of returning null when classloader does not exist for contextName"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3c6d5dacfcb64d6cc62c3c150e4b26a0717e75d", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/a3c6d5dacfcb64d6cc62c3c150e4b26a0717e75d", "committedDate": "2020-09-21T14:54:56Z", "message": "Code formatting changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecc30ad56a66431c544b093d457ce31ed89e6ef4", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/ecc30ad56a66431c544b093d457ce31ed89e6ef4", "committedDate": "2020-09-21T15:18:58Z", "message": "javadoc issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d623ecfd3bc80ee8ed8fc47503ba7074e2adfa13", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/d623ecfd3bc80ee8ed8fc47503ba7074e2adfa13", "committedDate": "2020-09-21T15:54:45Z", "message": "Update contexts immediately"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83271cef563fc5a79f7ba835d59ba6b9556f15fd", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/83271cef563fc5a79f7ba835d59ba6b9556f15fd", "committedDate": "2020-09-21T17:22:29Z", "message": "Remove the updateContexts method, this was a leftover from a previous design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "364ebd4a9a6c5bf8bf32d8b4c69748e29c300482", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/364ebd4a9a6c5bf8bf32d8b4c69748e29c300482", "committedDate": "2020-09-21T19:30:56Z", "message": "Fix for configuration properties only being read once"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "180bb4d4ab8a2aa2b05d6fb15ff4bf0c2f32c0eb", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/180bb4d4ab8a2aa2b05d6fb15ff4bf0c2f32c0eb", "committedDate": "2020-09-22T13:28:40Z", "message": "Removed duplicate property"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77f0edf78ddc8985c0edb60573d66cbeded9e8d5", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/77f0edf78ddc8985c0edb60573d66cbeded9e8d5", "committedDate": "2020-09-25T12:57:06Z", "message": "Merge branch 'main' into add-new-vfs-classloader-impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "304a8f167aba40f8c421421ae8719fdbe732d732", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/304a8f167aba40f8c421421ae8719fdbe732d732", "committedDate": "2020-09-25T20:14:25Z", "message": "Updates from testing locally"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "725913089dc8552d657d2a7a2776ec44119b3c3a", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/725913089dc8552d657d2a7a2776ec44119b3c3a", "committedDate": "2020-10-05T12:36:56Z", "message": "Merge branch 'main' into add-new-vfs-classloader-impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/78c72ca433f82f7f64a3490ce3b34ed4fac405ae", "committedDate": "2020-10-06T18:43:44Z", "message": "Made non-context classloader pluggable as `java.system.class.loader` does not allow for reloading."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef0715ba2f9a649a2b30a230989a8f27e7a52b8f", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/ef0715ba2f9a649a2b30a230989a8f27e7a52b8f", "committedDate": "2020-10-07T17:35:21Z", "message": "Backed out change to make system class loader pluggable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c379e338ce19369db0c0846fc66dd4e63b082c5", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/6c379e338ce19369db0c0846fc66dd4e63b082c5", "committedDate": "2020-10-07T20:21:07Z", "message": "Changes from testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MDYxMzIy", "url": "https://github.com/apache/accumulo/pull/1715#pullrequestreview-505061322", "createdAt": "2020-10-08T18:35:54Z", "commit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODozNTo1NVrOHeriiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTowNTo0N1rOHeslZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzMjY4MQ==", "bodyText": "It may be nice to have an accumulo prefix in this property, since its a java system property and not an Accumulo configuration property.  Maybe something like accumulo.server.class.loader.factory.  This would be similar to the way log4j prefixes its Java system properties.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501932681", "createdAt": "2020-10-08T18:35:55Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/AccumuloClassLoader.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.apache.accumulo.core.spi.common.ClassLoaderFactory;\n+import org.apache.accumulo.core.spi.common.ClassLoaderFactory.Printer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class AccumuloClassLoader {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(AccumuloClassLoader.class);\n+\n+  private static final String CLASS_LOADER_FACTORY = \"general.class.loader.factory\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNDQ5MA==", "bodyText": "This javadoc could mention its a Java system property.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501934490", "createdAt": "2020-10-08T18:39:02Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ClassLoaderFactory.java", "diffHunk": "@@ -18,44 +18,33 @@\n  */\n package org.apache.accumulo.core.spi.common;\n \n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.Map.Entry;\n-\n /**\n- * The ClassLoaderFactory is defined by the property general.context.factory. The factory\n- * implementation is configured externally to Accumulo and will return a ClassLoader for a given\n- * contextName.\n- *\n+ * The ClassLoaderFactory implementation is defined by the property general.class.loader.factory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNTMyMg==", "bodyText": "Why is this commented out code here?", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501935322", "createdAt": "2020-10-08T18:40:30Z", "author": {"login": "keith-turner"}, "path": "start/src/main/java/org/apache/accumulo/start/Main.java", "diffHunk": "@@ -86,42 +63,42 @@ public static void main(final String[] args) {\n       // determine whether a keyword was used or a class name, and execute it with the remaining\n       // args\n       String keywordOrClassName = args[0];\n-      KeywordExecutable keywordExec = getExecutables(loader).get(keywordOrClassName);\n+      KeywordExecutable keywordExec = getExecutables(CLASSLOADER).get(keywordOrClassName);\n       if (keywordExec != null) {\n         execKeyword(keywordExec, stripArgs(args, 1));\n       } else {\n         execMainClassName(keywordOrClassName, stripArgs(args, 1));\n       }\n \n     } catch (Throwable t) {\n-      log.error(\"Uncaught exception\", t);\n+      LOG.error(\"Uncaught exception\", t);\n       System.exit(1);\n     }\n   }\n \n-  public static synchronized ClassLoader getClassLoader() {\n-    if (classLoader == null) {\n-      try {\n-        classLoader = (ClassLoader) getVFSClassLoader().getMethod(\"getClassLoader\").invoke(null);\n-        Thread.currentThread().setContextClassLoader(classLoader);\n-      } catch (IOException | IllegalArgumentException | ReflectiveOperationException\n-          | SecurityException e) {\n-        log.error(\"Problem initializing the class loader\", e);\n-        System.exit(1);\n-      }\n-    }\n-    return classLoader;\n-  }\n-\n-  public static synchronized Class<?> getVFSClassLoader()\n-      throws IOException, ClassNotFoundException {\n-    if (vfsClassLoader == null) {\n-      Thread.currentThread().setContextClassLoader(AccumuloClassLoader.getClassLoader());\n-      vfsClassLoader = AccumuloClassLoader.getClassLoader()\n-          .loadClass(\"org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader\");\n-    }\n-    return vfsClassLoader;\n-  }\n+  // public static synchronized ClassLoader getClassLoader() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNjAwOQ==", "bodyText": "Javadoc needs a since tag", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501936009", "createdAt": "2020-10-08T18:41:41Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n+\n+/**\n+ * The ContextClassLoaderFactory implementation is defined by the property\n+ * general.context.class.loader.factory. The implementation is configured externally to Accumulo and\n+ * will return a ClassLoader for a given contextName.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNjcxMw==", "bodyText": "I suspect this needs javadoc w/ since tag.  I don't think Inner classes inherit since tags from outer classes javadoc, but not 100% sure.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501936713", "createdAt": "2020-10-08T18:42:57Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n+\n+/**\n+ * The ContextClassLoaderFactory implementation is defined by the property\n+ * general.context.class.loader.factory. The implementation is configured externally to Accumulo and\n+ * will return a ClassLoader for a given contextName.\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  static class ClassLoaderFactoryConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzOTMyOQ==", "bodyText": "For SPI methods that take multiple arguments other SPI interfaces use Parameters interfaces.  This makes it easy to add more parameters to the method in the future w/o causing issues for existing implementers.  Below is one example of this.\n\n  \n    \n      accumulo/core/src/main/java/org/apache/accumulo/core/spi/scan/ScanDispatcher.java\n    \n    \n         Line 62\n      in\n      80ee9ca\n    \n    \n    \n    \n\n        \n          \n           default void init(InitParameters params) {", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501939329", "createdAt": "2020-10-08T18:47:37Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ClassLoaderFactory.java", "diffHunk": "@@ -18,44 +18,33 @@\n  */\n package org.apache.accumulo.core.spi.common;\n \n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.Map.Entry;\n-\n /**\n- * The ClassLoaderFactory is defined by the property general.context.factory. The factory\n- * implementation is configured externally to Accumulo and will return a ClassLoader for a given\n- * contextName.\n- *\n+ * The ClassLoaderFactory implementation is defined by the property general.class.loader.factory.\n+ * The implementation will return a ClassLoader to be used for dynamically loading classes.\n  */\n public interface ClassLoaderFactory {\n \n-  static class ClassLoaderFactoryConfiguration {\n-\n-    public Iterator<Entry<String,String>> get() {\n-      return Collections.emptyIterator();\n-    }\n+  public interface Printer {\n+    void print(String s);\n   }\n \n   /**\n-   * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n-   * that it can clean up contexts that are no longer being used.\n+   * Return the configured classloader\n    *\n-   * @param conf\n-   *          Accumulo configuration properties\n-   * @throws Exception\n-   *           if error initializing ClassLoaderFactory\n+   * @return classloader the configured classloader\n    */\n-  void initialize(ClassLoaderFactoryConfiguration conf) throws Exception;\n+  ClassLoader getClassLoader() throws Exception;\n \n   /**\n+   * Print the classpath to the Printer\n    *\n-   * @param contextName\n-   *          name of classloader context\n-   * @return classloader configured for the context\n-   * @throws IllegalArgumentException\n-   *           if contextName is not supported\n+   * @param cl\n+   *          classloader\n+   * @param out\n+   *          printer\n+   * @param debug\n+   *          enable debug output\n    */\n-  ClassLoader getClassLoader(String contextName) throws IllegalArgumentException;\n+  void printClassPath(ClassLoader cl, Printer out, boolean debug);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0NDA0MA==", "bodyText": "In the past when running test against Accumulo w/ lots of concurrent scans and profiling tablets servers, the static synchronization around class loading was something that showed up in profiling data.  Every scan uses class loaders to create iterators and this static synch causes locking contention between scans.   This in an existing problem with the current code and I don't think changes are needed here, seeing this reminded me of the problem.  I need to see if I opened an issue for this.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501944040", "createdAt": "2020-10-08T18:55:51Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+public class ClassLoaderUtil {\n+\n+  public static synchronized <U> Class<? extends U> loadClass(String contextName, String className,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0NTcwMQ==", "bodyText": "Could name the class InitializationParameters to be consistent w/ other SPI interfaces.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501945701", "createdAt": "2020-10-08T18:58:28Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n+\n+/**\n+ * The ContextClassLoaderFactory implementation is defined by the property\n+ * general.context.class.loader.factory. The implementation is configured externally to Accumulo and\n+ * will return a ClassLoader for a given contextName.\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  static class ClassLoaderFactoryConfiguration {\n+\n+    public Iterator<Entry<String,String>> get() {\n+      return Collections.emptyIterator();\n+    }\n+  }\n+\n+  /**\n+   * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n+   * that it can clean up contexts that are no longer being used.\n+   *\n+   * @param conf\n+   *          Accumulo configuration properties\n+   * @throws Exception\n+   *           if error initializing ClassLoaderFactory\n+   */\n+  void initialize(ClassLoaderFactoryConfiguration conf) throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0OTc5Nw==", "bodyText": "Other SPI interfaces use ServiceEnvironment to expose Accumulo configuration to plugins.\n\n  \n    \n      accumulo/core/src/main/java/org/apache/accumulo/core/spi/common/ServiceEnvironment.java\n    \n    \n         Line 35\n      in\n      80ee9ca\n    \n    \n    \n    \n\n        \n          \n           public interface ServiceEnvironment extends PluginEnvironment {", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r501949797", "createdAt": "2020-10-08T19:05:47Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n+\n+/**\n+ * The ContextClassLoaderFactory implementation is defined by the property\n+ * general.context.class.loader.factory. The implementation is configured externally to Accumulo and\n+ * will return a ClassLoader for a given contextName.\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  static class ClassLoaderFactoryConfiguration {\n+\n+    public Iterator<Entry<String,String>> get() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c72ca433f82f7f64a3490ce3b34ed4fac405ae"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "477efaa21916f0c5cd0816882af1d0e22161200b", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/477efaa21916f0c5cd0816882af1d0e22161200b", "committedDate": "2020-10-08T19:48:23Z", "message": "Capturing working state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e435155afe8e2c23c3286294046dc38b4acbc81", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/2e435155afe8e2c23c3286294046dc38b4acbc81", "committedDate": "2020-10-19T12:26:25Z", "message": "Merge branch 'main' into add-new-vfs-classloader-impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44b763afed568d58778bb455627b8216a743818e", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/44b763afed568d58778bb455627b8216a743818e", "committedDate": "2020-10-20T16:21:04Z", "message": "latest changes from testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b10e6706977fd707bce78a1e50bdc528d6871b6a", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/b10e6706977fd707bce78a1e50bdc528d6871b6a", "committedDate": "2020-10-21T13:42:30Z", "message": "Merge branch 'main' into add-new-vfs-classloader-impl\n\nConflicts:\n\tserver/manager/src/main/java/org/apache/accumulo/master/Master.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0e9cbbc83a9bd5699d2a6bb782c93a2ef66e95b", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/e0e9cbbc83a9bd5699d2a6bb782c93a2ef66e95b", "committedDate": "2020-10-22T13:25:57Z", "message": "remove unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDM2MTQz", "url": "https://github.com/apache/accumulo/pull/1715#pullrequestreview-516036143", "createdAt": "2020-10-23T22:07:43Z", "commit": {"oid": "e0e9cbbc83a9bd5699d2a6bb782c93a2ef66e95b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjowNzo0M1rOHnfuHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjowNzo0M1rOHnfuHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3NjIyMA==", "bodyText": "The following are the rational behind the suggestion below.\n\nUsing a parameters interface makes evolving the SPI over time much simpler.  Its easy to add additional parameters in the future w/o breaking existing code that was written against the SPI.\nUsing the Configuration interface used by other SPI interface is consistent and offers more options.  For example this interface offers an isSet() method that allows checking if a user set a property.  There is no way to do this by analyzing the values because some props have default values.\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n          \n          \n            \n               * that it can clean up contexts that are no longer being used.\n          \n          \n            \n               *\n          \n          \n            \n               * @param contextProperties\n          \n          \n            \n               *          Accumulo configuration properties\n          \n          \n            \n               * @throws Exception\n          \n          \n            \n               *           if error initializing ClassLoaderFactory\n          \n          \n            \n               */\n          \n          \n            \n              void initialize(Supplier<Map<String,String>> contextProperties) throws Exception;\n          \n          \n            \n              public interface InitParameters {\n          \n          \n            \n                  /**\n          \n          \n            \n               * @return A view of Accumulo's system level configuration. This is backed by system level config\n          \n          \n            \n               *         in zookeeper, which falls back to site configuration, which falls back to the default\n          \n          \n            \n               *         configuration.\n          \n          \n            \n               */\n          \n          \n            \n                Configuration getConfiguration();\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              /**\n          \n          \n            \n               * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n          \n          \n            \n               * that it can clean up contexts that are no longer being used.\n          \n          \n            \n               *\n          \n          \n            \n               * @throws Exception\n          \n          \n            \n               *           if error initializing ClassLoaderFactory\n          \n          \n            \n               */\n          \n          \n            \n              void initialize(InitParameters initParam) throws Exception;", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r511176220", "createdAt": "2020-10-23T22:07:43Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/spi/common/ContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.spi.common;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The ClassLoaderFactory is defined by the property general.context.factory. The factory\n+ * implementation is configured externally to Accumulo and will return a ClassLoader for a given\n+ * contextName.\n+ *\n+ * @since 2.1.0\n+ *\n+ */\n+public interface ContextClassLoaderFactory {\n+\n+  /**\n+   * Initialize the ClassLoaderFactory. Implementations may need a reference to the configuration so\n+   * that it can clean up contexts that are no longer being used.\n+   *\n+   * @param contextProperties\n+   *          Accumulo configuration properties\n+   * @throws Exception\n+   *           if error initializing ClassLoaderFactory\n+   */\n+  void initialize(Supplier<Map<String,String>> contextProperties) throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e9cbbc83a9bd5699d2a6bb782c93a2ef66e95b"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/1088247aebd207abbe4fb8d92c6cf6a6430fe0b6", "committedDate": "2020-11-04T16:47:15Z", "message": "Merge branch 'main' into add-new-vfs-classloader-impl\n\nConflicts:\n\tserver/manager/src/main/java/org/apache/accumulo/master/Master.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/185781592df4c899d6e67a50da824986a5729c2a", "committedDate": "2020-11-04T18:41:03Z", "message": "re #1747 moved ConfigurationImpl from server-base to core to use in ContextClassLoaderFactory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNjA5OTYx", "url": "https://github.com/apache/accumulo/pull/1715#pullrequestreview-523609961", "createdAt": "2020-11-04T18:03:35Z", "commit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODowMzozNVrOHtjtdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMTowMzo0M1rOHtpoEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzMzA0Nw==", "bodyText": "Since initialize isn't synchronized, do we want to do something here to prevent this from being changed (by a competing thread) once set?", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517533047", "createdAt": "2020-11-04T18:03:35Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzMzMzNQ==", "bodyText": "Can we move this warnings suppression closer to the objects that it applies to, if we must have it?", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517533335", "createdAt": "2020-11-04T18:04:07Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static Supplier<Map<String,String>> CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNTg1Mw==", "bodyText": "I think this should call .getKey() instead of .toString()", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517535853", "createdAt": "2020-11-04T18:08:32Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static Supplier<Map<String,String>> CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static void initialize(Supplier<Map<String,String>> conf) throws Exception {\n+    if (null == CONF) {\n+      CONF = conf;\n+      LOG.info(\"Creating ContextClassLoaderFactory\");\n+      var factoryName = CONF.get().get(Property.GENERAL_CONTEXT_CLASSLOADER_FACTORY.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNjM1Ng==", "bodyText": "Should use .getKey() instead of .toString().", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517536356", "createdAt": "2020-11-04T18:09:20Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/LegacyVFSContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader;\n+import org.apache.accumulo.start.classloader.vfs.ContextManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Deprecated(since = \"2.1.0\", forRemoval = true)\n+public class LegacyVFSContextClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(LegacyVFSContextClassLoaderFactory.class);\n+\n+  public void initialize(Supplier<Map<String,String>> contextProperties) {\n+    try {\n+      AccumuloVFSClassLoader.getContextManager()\n+          .setContextConfig(new ContextManager.DefaultContextsConfig() {\n+            @Override\n+            public Map<String,String> getVfsContextClasspathProperties() {\n+              return contextProperties.get();\n+            }\n+          });\n+      LOG.debug(\"ContextManager configuration set\");\n+      new Timer(\"LegacyVFSContextClassLoaderFactory-cleanup\", true)\n+          .scheduleAtFixedRate(new TimerTask() {\n+            @Override\n+            public void run() {\n+              try {\n+                if (LOG.isTraceEnabled()) {\n+                  LOG.trace(\"LegacyVFSContextClassLoaderFactory-cleanup thread, properties: {}\",\n+                      contextProperties.get());\n+                }\n+                Set<String> configuredContexts = new HashSet<>();\n+                contextProperties.get().keySet().forEach(k -> {\n+                  if (k.startsWith(Property.VFS_CONTEXT_CLASSPATH_PROPERTY.toString())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNzUxMQ==", "bodyText": "UncheckedIOException should be used to wrap IOException as a runtime exception.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517537511", "createdAt": "2020-11-04T18:11:14Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/LegacyVFSContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader;\n+import org.apache.accumulo.start.classloader.vfs.ContextManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Deprecated(since = \"2.1.0\", forRemoval = true)\n+public class LegacyVFSContextClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(LegacyVFSContextClassLoaderFactory.class);\n+\n+  public void initialize(Supplier<Map<String,String>> contextProperties) {\n+    try {\n+      AccumuloVFSClassLoader.getContextManager()\n+          .setContextConfig(new ContextManager.DefaultContextsConfig() {\n+            @Override\n+            public Map<String,String> getVfsContextClasspathProperties() {\n+              return contextProperties.get();\n+            }\n+          });\n+      LOG.debug(\"ContextManager configuration set\");\n+      new Timer(\"LegacyVFSContextClassLoaderFactory-cleanup\", true)\n+          .scheduleAtFixedRate(new TimerTask() {\n+            @Override\n+            public void run() {\n+              try {\n+                if (LOG.isTraceEnabled()) {\n+                  LOG.trace(\"LegacyVFSContextClassLoaderFactory-cleanup thread, properties: {}\",\n+                      contextProperties.get());\n+                }\n+                Set<String> configuredContexts = new HashSet<>();\n+                contextProperties.get().keySet().forEach(k -> {\n+                  if (k.startsWith(Property.VFS_CONTEXT_CLASSPATH_PROPERTY.toString())) {\n+                    configuredContexts.add(\n+                        k.substring(Property.VFS_CONTEXT_CLASSPATH_PROPERTY.toString().length()));\n+                  }\n+                });\n+                LOG.trace(\"LegacyVFSContextClassLoaderFactory-cleanup thread, contexts in use: {}\",\n+                    configuredContexts);\n+                AccumuloVFSClassLoader.getContextManager().removeUnusedContexts(configuredContexts);\n+              } catch (IOException e) {\n+                LOG.warn(\"{}\", e.getMessage(), e);\n+              }\n+            }\n+          }, 60000, 60000);\n+      LOG.debug(\"Context cleanup timer started at 60s intervals\");\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNzY1NQ==", "bodyText": "UncheckedIOException", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517537655", "createdAt": "2020-11-04T18:11:31Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/LegacyVFSContextClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader;\n+import org.apache.accumulo.start.classloader.vfs.ContextManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Deprecated(since = \"2.1.0\", forRemoval = true)\n+public class LegacyVFSContextClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(LegacyVFSContextClassLoaderFactory.class);\n+\n+  public void initialize(Supplier<Map<String,String>> contextProperties) {\n+    try {\n+      AccumuloVFSClassLoader.getContextManager()\n+          .setContextConfig(new ContextManager.DefaultContextsConfig() {\n+            @Override\n+            public Map<String,String> getVfsContextClasspathProperties() {\n+              return contextProperties.get();\n+            }\n+          });\n+      LOG.debug(\"ContextManager configuration set\");\n+      new Timer(\"LegacyVFSContextClassLoaderFactory-cleanup\", true)\n+          .scheduleAtFixedRate(new TimerTask() {\n+            @Override\n+            public void run() {\n+              try {\n+                if (LOG.isTraceEnabled()) {\n+                  LOG.trace(\"LegacyVFSContextClassLoaderFactory-cleanup thread, properties: {}\",\n+                      contextProperties.get());\n+                }\n+                Set<String> configuredContexts = new HashSet<>();\n+                contextProperties.get().keySet().forEach(k -> {\n+                  if (k.startsWith(Property.VFS_CONTEXT_CLASSPATH_PROPERTY.toString())) {\n+                    configuredContexts.add(\n+                        k.substring(Property.VFS_CONTEXT_CLASSPATH_PROPERTY.toString().length()));\n+                  }\n+                });\n+                LOG.trace(\"LegacyVFSContextClassLoaderFactory-cleanup thread, contexts in use: {}\",\n+                    configuredContexts);\n+                AccumuloVFSClassLoader.getContextManager().removeUnusedContexts(configuredContexts);\n+              } catch (IOException e) {\n+                LOG.warn(\"{}\", e.getMessage(), e);\n+              }\n+            }\n+          }, 60000, 60000);\n+      LOG.debug(\"Context cleanup timer started at 60s intervals\");\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+\n+  }\n+\n+  @Override\n+  public ClassLoader getClassLoader(String contextName) throws IllegalArgumentException {\n+    try {\n+      return AccumuloVFSClassLoader.getContextManager().getClassLoader(contextName);\n+    } catch (IOException e) {\n+      throw new RuntimeException(\"Error getting context class loader for context: \" + contextName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1MzIwNw==", "bodyText": "Is there not an appropriate existing utility class where this single static method can live? I think there's similar methods in the ConfigurationTypeHelper class.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517553207", "createdAt": "2020-11-04T18:38:57Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader;\n+\n+public class ClassLoaderUtil {\n+\n+  public static <U> Class<? extends U> loadClass(String contextName, String className,\n+      Class<U> extension) throws ClassNotFoundException {\n+    if (contextName != null && !contextName.equals(\"\"))\n+      return ContextClassLoaders.getClassLoader(contextName).loadClass(className)\n+          .asSubclass(extension);\n+    else\n+      return AccumuloVFSClassLoader.loadClass(className, extension);\n+\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1NDAzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (contextName != null && !contextName.equals(\"\"))\n          \n          \n            \n                if (contextName != null && !contextName.isEmpty())", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517554039", "createdAt": "2020-11-04T18:40:24Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ClassLoaderUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader;\n+\n+public class ClassLoaderUtil {\n+\n+  public static <U> Class<? extends U> loadClass(String contextName, String className,\n+      Class<U> extension) throws ClassNotFoundException {\n+    if (contextName != null && !contextName.equals(\"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1NTczNQ==", "bodyText": "You used isBlank above to check this instead of isEmpty, which implies that the string is not already stripped of whitespace. So, that implies factoryName might need to be stripped of surrounding whitespace. If it's not possible for it to have surrounding whitespace, then isEmpty might be more appropriate above than isBlank.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517555735", "createdAt": "2020-11-04T18:43:29Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static Supplier<Map<String,String>> CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static void initialize(Supplier<Map<String,String>> conf) throws Exception {\n+    if (null == CONF) {\n+      CONF = conf;\n+      LOG.info(\"Creating ContextClassLoaderFactory\");\n+      var factoryName = CONF.get().get(Property.GENERAL_CONTEXT_CLASSLOADER_FACTORY.toString());\n+      if (null == factoryName || factoryName.isBlank()) {\n+        LOG.info(\"No ClassLoaderFactory specified\");\n+        return;\n+      }\n+      try {\n+        var factoryClass = Class.forName(factoryName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1NjA2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      FACTORY.initialize(new Supplier<Map<String,String>>() {\n          \n          \n            \n                        @Override\n          \n          \n            \n                        public Map<String,String> get() {\n          \n          \n            \n                          return CONF.get();\n          \n          \n            \n                        }\n          \n          \n            \n                      });\n          \n          \n            \n                      FACTORY.initialize(() -> CONF.get());", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517556063", "createdAt": "2020-11-04T18:44:06Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static Supplier<Map<String,String>> CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static void initialize(Supplier<Map<String,String>> conf) throws Exception {\n+    if (null == CONF) {\n+      CONF = conf;\n+      LOG.info(\"Creating ContextClassLoaderFactory\");\n+      var factoryName = CONF.get().get(Property.GENERAL_CONTEXT_CLASSLOADER_FACTORY.toString());\n+      if (null == factoryName || factoryName.isBlank()) {\n+        LOG.info(\"No ClassLoaderFactory specified\");\n+        return;\n+      }\n+      try {\n+        var factoryClass = Class.forName(factoryName);\n+        if (ContextClassLoaderFactory.class.isAssignableFrom(factoryClass)) {\n+          LOG.info(\"Creating ContextClassLoaderFactory: {}\", factoryName);\n+          FACTORY = ((Class<? extends ContextClassLoaderFactory>) factoryClass)\n+              .getDeclaredConstructor().newInstance();\n+          FACTORY.initialize(new Supplier<Map<String,String>>() {\n+            @Override\n+            public Map<String,String> get() {\n+              return CONF.get();\n+            }\n+          });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1ODE5Mw==", "bodyText": "You're catching an RTE to log and then throw a different RTE. This adds redundant logs and makes it harder to get a meaningful stack trace. It'd be better to just let the IAE fall through.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517558193", "createdAt": "2020-11-04T18:47:49Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static Supplier<Map<String,String>> CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static void initialize(Supplier<Map<String,String>> conf) throws Exception {\n+    if (null == CONF) {\n+      CONF = conf;\n+      LOG.info(\"Creating ContextClassLoaderFactory\");\n+      var factoryName = CONF.get().get(Property.GENERAL_CONTEXT_CLASSLOADER_FACTORY.toString());\n+      if (null == factoryName || factoryName.isBlank()) {\n+        LOG.info(\"No ClassLoaderFactory specified\");\n+        return;\n+      }\n+      try {\n+        var factoryClass = Class.forName(factoryName);\n+        if (ContextClassLoaderFactory.class.isAssignableFrom(factoryClass)) {\n+          LOG.info(\"Creating ContextClassLoaderFactory: {}\", factoryName);\n+          FACTORY = ((Class<? extends ContextClassLoaderFactory>) factoryClass)\n+              .getDeclaredConstructor().newInstance();\n+          FACTORY.initialize(new Supplier<Map<String,String>>() {\n+            @Override\n+            public Map<String,String> get() {\n+              return CONF.get();\n+            }\n+          });\n+        } else {\n+          throw new RuntimeException(factoryName + \" does not implement ContextClassLoaderFactory\");\n+        }\n+      } catch (ClassNotFoundException | InstantiationException | IllegalAccessException\n+          | IllegalArgumentException | InvocationTargetException | NoSuchMethodException\n+          | SecurityException e) {\n+        LOG.error(\n+            \"Unable to load and initialize class: {}. Ensure that the jar containing the ContextClassLoaderFactory is on the classpath\",\n+            factoryName);\n+        throw e;\n+      }\n+    } else {\n+      LOG.debug(\"ContextClassLoaderFactory already initialized.\");\n+    }\n+  }\n+\n+  /**\n+   * Return the ClassLoader for the given contextName\n+   *\n+   * @param contextName\n+   *          name\n+   * @return ClassLoader for contextName, do not cache this\n+   * @throws RuntimeException\n+   *           if contextName not configured\n+   */\n+  public static ClassLoader getClassLoader(String contextName) {\n+    try {\n+      // Cannot cache the ClassLoader result as it\n+      // may change when the ClassLoader reloads\n+      return FACTORY.getClassLoader(contextName);\n+    } catch (IllegalArgumentException e) {\n+      LOG.error(\"ContextClassLoaderFactory is not configured for context: {}\", contextName);\n+      throw new RuntimeException(\n+          \"ContextClassLoaderFactory is not configured for context: \" + contextName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU1ODczMQ==", "bodyText": "It looks like this constructor was added, but not used.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517558731", "createdAt": "2020-11-04T18:48:52Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/ConfigurationCopy.java", "diffHunk": "@@ -49,9 +50,17 @@ public ConfigurationCopy(Map<String,String> config) {\n    *          configuration property iterable to use for copying\n    */\n   public ConfigurationCopy(Iterable<Entry<String,String>> config) {\n-    for (Entry<String,String> entry : config) {\n-      copy.put(entry.getKey(), entry.getValue());\n-    }\n+    this(config.iterator());\n+  }\n+\n+  /**\n+   * Creates a new configuration.\n+   *\n+   * @param config\n+   *          configuration property iterator to use for copying\n+   */\n+  public ConfigurationCopy(Iterator<Entry<String,String>> config) {\n+    config.forEachRemaining(e -> copy.put(e.getKey(), e.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1088247aebd207abbe4fb8d92c6cf6a6430fe0b6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2MDMyNA==", "bodyText": "Is this method even necessary? Could just have a getter for the FACTORY. I'm not sure this static method adds much in terms of convenience.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517560324", "createdAt": "2020-11-04T18:51:43Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/classloader/ContextClassLoaders.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.apache.accumulo.core.conf.AccumuloConfiguration;\n+import org.apache.accumulo.core.conf.Property;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.apache.accumulo.core.util.ConfigurationImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextClassLoaders {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(ContextClassLoaders.class);\n+\n+  public static final String CONTEXT_CLASS_LOADER_FACTORY = \"general.context.class.loader.factory\";\n+\n+  private static ContextClassLoaderFactory FACTORY;\n+  private static AccumuloConfiguration CONF;\n+\n+  /**\n+   * Initialize the ContextClassLoaderFactory\n+   *\n+   * @param conf\n+   *          AccumuloConfiguration object\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static void initialize(AccumuloConfiguration conf) throws Exception {\n+    if (null == CONF) {\n+      CONF = conf;\n+      LOG.info(\"Creating ContextClassLoaderFactory\");\n+      var factoryName = CONF.get(Property.GENERAL_CONTEXT_CLASSLOADER_FACTORY.toString());\n+      if (null == factoryName || factoryName.isBlank()) {\n+        LOG.info(\"No ClassLoaderFactory specified\");\n+        return;\n+      }\n+      try {\n+        var factoryClass = Class.forName(factoryName);\n+        if (ContextClassLoaderFactory.class.isAssignableFrom(factoryClass)) {\n+          LOG.info(\"Creating ContextClassLoaderFactory: {}\", factoryName);\n+          FACTORY = ((Class<? extends ContextClassLoaderFactory>) factoryClass)\n+              .getDeclaredConstructor().newInstance();\n+          FACTORY.initialize(new ConfigurationImpl(CONF));\n+        } else {\n+          throw new RuntimeException(factoryName + \" does not implement ContextClassLoaderFactory\");\n+        }\n+      } catch (ClassNotFoundException | InstantiationException | IllegalAccessException\n+          | IllegalArgumentException | InvocationTargetException | NoSuchMethodException\n+          | SecurityException e) {\n+        LOG.error(\n+            \"Unable to load and initialize class: {}. Ensure that the jar containing the ContextClassLoaderFactory is on the classpath\",\n+            factoryName);\n+        throw e;\n+      }\n+    } else {\n+      LOG.debug(\"ContextClassLoaderFactory already initialized.\");\n+    }\n+  }\n+\n+  /**\n+   * Return the ClassLoader for the given contextName\n+   *\n+   * @param contextName\n+   *          name\n+   * @return ClassLoader for contextName, do not cache this\n+   * @throws RuntimeException\n+   *           if contextName not configured\n+   */\n+  public static ClassLoader getClassLoader(String contextName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2MjY4MA==", "bodyText": "We should inline this property's key. I don't think there's a reason to have that string located in a separate constant outside this class. That was only done for some of the VFS stuff that existed in the start module. But, this constant is just in a different location in the core module.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517562680", "createdAt": "2020-11-04T18:55:34Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -196,6 +198,9 @@\n           + \"Additionally, this property no longer does property interpolation of environment \"\n           + \"variables, such as '$ACCUMULO_HOME'. Use commons-configuration syntax,\"\n           + \"'${env:ACCUMULO_HOME}' instead.\"),\n+  GENERAL_CONTEXT_CLASSLOADER_FACTORY(ContextClassLoaders.CONTEXT_CLASS_LOADER_FACTORY,\n+      LegacyVFSContextClassLoaderFactory.class.getName(), PropertyType.STRING,\n+      \"Name of classloader factory to be used to create classloaders for named contexts.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxOTc0Mw==", "bodyText": "Should we use semicolon as the delimiter, because so this behaves more like a CLASSPATH?", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517619743", "createdAt": "2020-11-04T20:43:21Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment.Configuration;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class URLClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final String COMMA = \",\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMDE1Nw==", "bodyText": "It would be good to use more specific RTEs instead of the generic one, whenever a more appropriate one is available. Here, IllegalArgumentException would be appropriate.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517620157", "createdAt": "2020-11-04T20:44:12Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment.Configuration;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class URLClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final String COMMA = \",\";\n+  private static final Logger LOG = LoggerFactory.getLogger(URLClassLoaderFactory.class);\n+\n+  @Override\n+  public void initialize(Configuration contextProperties) throws Exception {}\n+\n+  @Override\n+  public ClassLoader getClassLoader(String contextName) throws IllegalArgumentException {\n+    // The context name is the classpath.\n+    var parts = contextName.split(COMMA);\n+    var urls = new ArrayList<URL>();\n+    for (String p : parts) {\n+      try {\n+        urls.add(new URL(p));\n+      } catch (MalformedURLException e) {\n+        LOG.error(\"Error creating URL from classpath segment: \" + p);\n+        throw new RuntimeException(\"Error creating URL from classpath segment: \" + p, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMDg1OQ==", "bodyText": "Should log or throw, but not both. This is how we get duplicate log messages in the log files. The caller can choose to log as part of its handling mechanism, if you choose to throw.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517620859", "createdAt": "2020-11-04T20:45:27Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment.Configuration;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class URLClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final String COMMA = \",\";\n+  private static final Logger LOG = LoggerFactory.getLogger(URLClassLoaderFactory.class);\n+\n+  @Override\n+  public void initialize(Configuration contextProperties) throws Exception {}\n+\n+  @Override\n+  public ClassLoader getClassLoader(String contextName) throws IllegalArgumentException {\n+    // The context name is the classpath.\n+    var parts = contextName.split(COMMA);\n+    var urls = new ArrayList<URL>();\n+    for (String p : parts) {\n+      try {\n+        urls.add(new URL(p));\n+      } catch (MalformedURLException e) {\n+        LOG.error(\"Error creating URL from classpath segment: \" + p);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMjQwMw==", "bodyText": "This can probably be done a bit more succinctly with streams, something like:\n  var urls = Stream.of(contextName.split(DELIM)).map( p -> toUrl(p) ).collect(Collectors.toList());", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517622403", "createdAt": "2020-11-04T20:48:30Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/classloader/URLClassLoaderFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.classloader;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+import org.apache.accumulo.core.client.PluginEnvironment.Configuration;\n+import org.apache.accumulo.core.spi.common.ContextClassLoaderFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class URLClassLoaderFactory implements ContextClassLoaderFactory {\n+\n+  private static final String COMMA = \",\";\n+  private static final Logger LOG = LoggerFactory.getLogger(URLClassLoaderFactory.class);\n+\n+  @Override\n+  public void initialize(Configuration contextProperties) throws Exception {}\n+\n+  @Override\n+  public ClassLoader getClassLoader(String contextName) throws IllegalArgumentException {\n+    // The context name is the classpath.\n+    var parts = contextName.split(COMMA);\n+    var urls = new ArrayList<URL>();\n+    for (String p : parts) {\n+      try {\n+        urls.add(new URL(p));\n+      } catch (MalformedURLException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNTAzNw==", "bodyText": "Maybe only catch checked exceptions here. Anything falling through that isn't a checked exception is already an RTE and we don't need to rewrap as a new RTE.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517625037", "createdAt": "2020-11-04T20:53:47Z", "author": {"login": "ctubbsii"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java", "diffHunk": "@@ -378,14 +377,12 @@ public static void main(String[] args) throws Exception {\n         Property.MASTER_TABLET_BALANCER, TabletBalancer.class, new DefaultLoadBalancer());\n     this.tabletBalancer.init(context);\n \n-    AccumuloVFSClassLoader.getContextManager()\n-        .setContextConfig(new ContextManager.DefaultContextsConfig() {\n-          @Override\n-          public Map<String,String> getVfsContextClasspathProperties() {\n-            return getConfiguration()\n-                .getAllPropertiesWithPrefix(Property.VFS_CONTEXT_CLASSPATH_PROPERTY);\n-          }\n-        });\n+    try {\n+      ContextClassLoaders.initialize(aconf);\n+    } catch (Exception e1) {\n+      log.error(\"Error configuring ContextClassLoaderFactory\", e1);\n+      throw new RuntimeException(\"Error configuring ContextClassLoaderFactory\", e1);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyOTk2OQ==", "bodyText": "I think there might be an IT that checks the printed strings... not sure. It's fine if it changes, but the IT might need to be updated.", "url": "https://github.com/apache/accumulo/pull/1715#discussion_r517629969", "createdAt": "2020-11-04T21:03:43Z", "author": {"login": "ctubbsii"}, "path": "start/src/main/java/org/apache/accumulo/start/classloader/vfs/AccumuloVFSClassLoader.java", "diffHunk": "@@ -358,48 +360,24 @@ public static void printClassPath(Printer out, boolean debug) {\n           continue;\n         }\n \n-        String classLoaderDescription;\n-        switch (level) {\n-          case 1:\n-            classLoaderDescription =\n-                level + \": Java System Classloader (loads Java system resources)\";\n-            break;\n-          case 2:\n-            classLoaderDescription =\n-                level + \": Java Classloader (loads everything defined by java classpath)\";\n-            break;\n-          case 3:\n-            classLoaderDescription =\n-                level + \": Accumulo Classloader (loads everything defined by general.classpaths)\";\n-            break;\n-          case 4:\n-            classLoaderDescription = level + \": Accumulo Dynamic Classloader \"\n-                + \"(loads everything defined by general.dynamic.classpaths)\";\n-            break;\n-          default:\n-            classLoaderDescription = level + \": Mystery Classloader (\"\n-                + \"someone probably added a classloader and didn't update the switch statement in \"\n-                + AccumuloVFSClassLoader.class.getName() + \")\";\n-            break;\n-        }\n-\n         boolean sawFirst = false;\n+        String classLoaderDescription = \"Level: \" + level + \", Name: \" + classLoader.getName()\n+            + \", class: \" + classLoader.getClass().getName();\n         if (classLoader.getClass().getName().startsWith(\"jdk.internal\")) {\n           if (debug) {\n-            out.print(\"Level \" + classLoaderDescription + \" \" + classLoader.getClass().getName()\n-                + \" configuration not inspectable.\\n\");\n+            out.print(classLoaderDescription + \": configuration not inspectable.\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185781592df4c899d6e67a50da824986a5729c2a"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "741bda3d88f472c2e1900ceb68de3a804d5cc79d", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/741bda3d88f472c2e1900ceb68de3a804d5cc79d", "committedDate": "2020-11-06T16:00:28Z", "message": "address comments in PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c796f0e40ceba6c6ca3ba74b0f13421a16ab4919", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/c796f0e40ceba6c6ca3ba74b0f13421a16ab4919", "committedDate": "2020-11-06T16:30:12Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb2e873a0ddb4fb97b9c51c16eef58438902bf80", "author": {"user": {"login": "dlmarion", "name": "Dave Marion"}}, "url": "https://github.com/apache/accumulo/commit/fb2e873a0ddb4fb97b9c51c16eef58438902bf80", "committedDate": "2020-11-16T15:19:59Z", "message": "inlined property name"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1724, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}