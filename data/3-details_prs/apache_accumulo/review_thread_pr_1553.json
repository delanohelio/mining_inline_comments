{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTMzODk0", "number": 1553, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozNDoyNlrODmWSUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzozNjowNFrODmZWWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTM3NjE3OnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozNDoyNlrOFztvXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODozMDo0OVrOFz0fXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MTEwMQ==", "bodyText": "Could use VisibleForTesting annotation.", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389771101", "createdAt": "2020-03-09T15:34:26Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -95,23 +94,18 @@ protected VolumeManagerImpl(Map<String,Volume> volumes, Volume defaultVolume,\n     this.hadoopConf = hadoopConf;\n   }\n \n-  private void invertVolumesByFileSystem(Map<String,Volume> forward,\n-      Multimap<URI,Volume> inverted) {\n-    for (Volume volume : forward.values()) {\n-      inverted.put(volume.getFileSystem().getUri(), volume);\n-    }\n+  private Multimap<URI,Volume> invertVolumesByFileSystem(Map<String,Volume> forward) {\n+    Multimap<URI,Volume> inverted = HashMultimap.create();\n+    forward.values().forEach(volume -> inverted.put(volume.getFileSystem().getUri(), volume));\n+    return inverted;\n   }\n \n-  public static org.apache.accumulo.server.fs.VolumeManager getLocal(String localBasePath)\n-      throws IOException {\n+  // for testing only\n+  public static VolumeManager getLocalForTesting(String localBasePath) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba09677138f781065b83742e2d699984d5aebece"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2MTAxMQ==", "bodyText": "I don't like that annotation, because:\n\nit can create an unnecessary Guava dependency,\nI don't like checking to see if we already have Guava on that module, and\nthe annotation provides no additional value over a comment since there are no tools for which the annotation would matter\n\nThe method name makes it clear. The comment is bonus. An annotation wouldn't do anything other than add an import and possibly a new direct dependency if Guava wasn't already in the pom.", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389861011", "createdAt": "2020-03-09T17:53:39Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -95,23 +94,18 @@ protected VolumeManagerImpl(Map<String,Volume> volumes, Volume defaultVolume,\n     this.hadoopConf = hadoopConf;\n   }\n \n-  private void invertVolumesByFileSystem(Map<String,Volume> forward,\n-      Multimap<URI,Volume> inverted) {\n-    for (Volume volume : forward.values()) {\n-      inverted.put(volume.getFileSystem().getUri(), volume);\n-    }\n+  private Multimap<URI,Volume> invertVolumesByFileSystem(Map<String,Volume> forward) {\n+    Multimap<URI,Volume> inverted = HashMultimap.create();\n+    forward.values().forEach(volume -> inverted.put(volume.getFileSystem().getUri(), volume));\n+    return inverted;\n   }\n \n-  public static org.apache.accumulo.server.fs.VolumeManager getLocal(String localBasePath)\n-      throws IOException {\n+  // for testing only\n+  public static VolumeManager getLocalForTesting(String localBasePath) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MTEwMQ=="}, "originalCommit": {"oid": "ba09677138f781065b83742e2d699984d5aebece"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3NTExMg==", "bodyText": "This makes me think we should just create our own annotation for VisibleForTesting since its not used for anything else other than a label.", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389875112", "createdAt": "2020-03-09T18:18:29Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -95,23 +94,18 @@ protected VolumeManagerImpl(Map<String,Volume> volumes, Volume defaultVolume,\n     this.hadoopConf = hadoopConf;\n   }\n \n-  private void invertVolumesByFileSystem(Map<String,Volume> forward,\n-      Multimap<URI,Volume> inverted) {\n-    for (Volume volume : forward.values()) {\n-      inverted.put(volume.getFileSystem().getUri(), volume);\n-    }\n+  private Multimap<URI,Volume> invertVolumesByFileSystem(Map<String,Volume> forward) {\n+    Multimap<URI,Volume> inverted = HashMultimap.create();\n+    forward.values().forEach(volume -> inverted.put(volume.getFileSystem().getUri(), volume));\n+    return inverted;\n   }\n \n-  public static org.apache.accumulo.server.fs.VolumeManager getLocal(String localBasePath)\n-      throws IOException {\n+  // for testing only\n+  public static VolumeManager getLocalForTesting(String localBasePath) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MTEwMQ=="}, "originalCommit": {"oid": "ba09677138f781065b83742e2d699984d5aebece"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg4MTY5Mw==", "bodyText": "Maybe. That would eliminate the issue of bringing in a dependency when not needed, but it still wouldn't matter whether it's an annotation or a comment if we don't have any tooling for verification.", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389881693", "createdAt": "2020-03-09T18:30:49Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -95,23 +94,18 @@ protected VolumeManagerImpl(Map<String,Volume> volumes, Volume defaultVolume,\n     this.hadoopConf = hadoopConf;\n   }\n \n-  private void invertVolumesByFileSystem(Map<String,Volume> forward,\n-      Multimap<URI,Volume> inverted) {\n-    for (Volume volume : forward.values()) {\n-      inverted.put(volume.getFileSystem().getUri(), volume);\n-    }\n+  private Multimap<URI,Volume> invertVolumesByFileSystem(Map<String,Volume> forward) {\n+    Multimap<URI,Volume> inverted = HashMultimap.create();\n+    forward.values().forEach(volume -> inverted.put(volume.getFileSystem().getUri(), volume));\n+    return inverted;\n   }\n \n-  public static org.apache.accumulo.server.fs.VolumeManager getLocal(String localBasePath)\n-      throws IOException {\n+  // for testing only\n+  public static VolumeManager getLocalForTesting(String localBasePath) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MTEwMQ=="}, "originalCommit": {"oid": "ba09677138f781065b83742e2d699984d5aebece"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTY3MzM4OnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo0NToyOFrOFzwmrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODowMDo1NFrOFzzgLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxODAzMA==", "bodyText": "Nice replacement.  Could use method reference here too:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }).map((String opt) -> new Path(opt)).findFirst().orElse(null);\n          \n          \n            \n                }).map(Path::new).findFirst().orElse(null);", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389818030", "createdAt": "2020-03-09T16:45:28Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -381,35 +343,17 @@ public boolean isReady() throws IOException {\n \n   @Override\n   public FileStatus[] globStatus(Path pathPattern) throws IOException {\n-    return getVolumeByPath(pathPattern).getFileSystem().globStatus(pathPattern);\n+    return getFileSystemByPath(pathPattern).globStatus(pathPattern);\n   }\n \n   @Override\n   public Path matchingFileSystem(Path source, Set<String> options) {\n-    try {\n-      if (ViewFSUtils.isViewFS(source, hadoopConf)) {\n-        return ViewFSUtils.matchingFileSystem(source, options, hadoopConf);\n-      }\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-\n-    URI uri1 = source.toUri();\n-    for (String option : options) {\n-      URI uri3 = URI.create(option);\n-      if (uri1.getScheme().equals(uri3.getScheme())) {\n-        String a1 = uri1.getAuthority();\n-        String a2 = uri3.getAuthority();\n-        if ((a1 == null && a2 == null) || (a1 != null && a1.equals(a2)))\n-          return new Path(option);\n-      }\n-    }\n-    return null;\n-  }\n-\n-  @Override\n-  public ContentSummary getContentSummary(Path dir) throws IOException {\n-    return getVolumeByPath(dir).getFileSystem().getContentSummary(dir);\n+    URI sourceUri = source.toUri();\n+    return options.stream().filter(opt -> {\n+      URI optUri = URI.create(opt);\n+      return sourceUri.getScheme().equals(optUri.getScheme())\n+          && Objects.equals(sourceUri.getAuthority(), optUri.getAuthority());\n+    }).map((String opt) -> new Path(opt)).findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba09677138f781065b83742e2d699984d5aebece"}, "originalPosition": 369}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1NzI1OA==", "bodyText": "I wanted to explicitly use the String version (hence the variable type) to protect against future bugs, because Path has a constructor that takes a URI also, and it behaves differently. Using this instead of the method reference ensures we use the overloaded constructor that takes a String rather than the one that takes a URI.", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389857258", "createdAt": "2020-03-09T17:47:48Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -381,35 +343,17 @@ public boolean isReady() throws IOException {\n \n   @Override\n   public FileStatus[] globStatus(Path pathPattern) throws IOException {\n-    return getVolumeByPath(pathPattern).getFileSystem().globStatus(pathPattern);\n+    return getFileSystemByPath(pathPattern).globStatus(pathPattern);\n   }\n \n   @Override\n   public Path matchingFileSystem(Path source, Set<String> options) {\n-    try {\n-      if (ViewFSUtils.isViewFS(source, hadoopConf)) {\n-        return ViewFSUtils.matchingFileSystem(source, options, hadoopConf);\n-      }\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-\n-    URI uri1 = source.toUri();\n-    for (String option : options) {\n-      URI uri3 = URI.create(option);\n-      if (uri1.getScheme().equals(uri3.getScheme())) {\n-        String a1 = uri1.getAuthority();\n-        String a2 = uri3.getAuthority();\n-        if ((a1 == null && a2 == null) || (a1 != null && a1.equals(a2)))\n-          return new Path(option);\n-      }\n-    }\n-    return null;\n-  }\n-\n-  @Override\n-  public ContentSummary getContentSummary(Path dir) throws IOException {\n-    return getVolumeByPath(dir).getFileSystem().getContentSummary(dir);\n+    URI sourceUri = source.toUri();\n+    return options.stream().filter(opt -> {\n+      URI optUri = URI.create(opt);\n+      return sourceUri.getScheme().equals(optUri.getScheme())\n+          && Objects.equals(sourceUri.getAuthority(), optUri.getAuthority());\n+    }).map((String opt) -> new Path(opt)).findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxODAzMA=="}, "originalCommit": {"oid": "ba09677138f781065b83742e2d699984d5aebece"}, "originalPosition": 369}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2NTUxNg==", "bodyText": "FWIW, if Path had static factory methods rather than public constructors, this would be easier to enforce using the method reference. (Path::fromString and Path::fromURI instead of Path::new).", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389865516", "createdAt": "2020-03-09T18:00:54Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -381,35 +343,17 @@ public boolean isReady() throws IOException {\n \n   @Override\n   public FileStatus[] globStatus(Path pathPattern) throws IOException {\n-    return getVolumeByPath(pathPattern).getFileSystem().globStatus(pathPattern);\n+    return getFileSystemByPath(pathPattern).globStatus(pathPattern);\n   }\n \n   @Override\n   public Path matchingFileSystem(Path source, Set<String> options) {\n-    try {\n-      if (ViewFSUtils.isViewFS(source, hadoopConf)) {\n-        return ViewFSUtils.matchingFileSystem(source, options, hadoopConf);\n-      }\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-\n-    URI uri1 = source.toUri();\n-    for (String option : options) {\n-      URI uri3 = URI.create(option);\n-      if (uri1.getScheme().equals(uri3.getScheme())) {\n-        String a1 = uri1.getAuthority();\n-        String a2 = uri3.getAuthority();\n-        if ((a1 == null && a2 == null) || (a1 != null && a1.equals(a2)))\n-          return new Path(option);\n-      }\n-    }\n-    return null;\n-  }\n-\n-  @Override\n-  public ContentSummary getContentSummary(Path dir) throws IOException {\n-    return getVolumeByPath(dir).getFileSystem().getContentSummary(dir);\n+    URI sourceUri = source.toUri();\n+    return options.stream().filter(opt -> {\n+      URI optUri = URI.create(opt);\n+      return sourceUri.getScheme().equals(optUri.getScheme())\n+          && Objects.equals(sourceUri.getAuthority(), optUri.getAuthority());\n+    }).map((String opt) -> new Path(opt)).findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxODAzMA=="}, "originalCommit": {"oid": "ba09677138f781065b83742e2d699984d5aebece"}, "originalPosition": 369}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTg3ODAxOnYy", "diffSide": "RIGHT", "path": "server/tserver/src/test/java/org/apache/accumulo/tserver/log/SortedLogRecoveryTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzozNjowNFrOFzykWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoxMzo1M1rOFzz7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MDIwMQ==", "bodyText": "This is cool.  Won't this delete the entire target directory though? If that is the case then I would imagine this would interfere with the build. Or is it anything that is created under this test that gets removed?  It is not clear from the javadoc.", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389850201", "createdAt": "2020-03-09T17:36:04Z", "author": {"login": "milleruntime"}, "path": "server/tserver/src/test/java/org/apache/accumulo/tserver/log/SortedLogRecoveryTest.java", "diffHunk": "@@ -71,6 +70,10 @@\n   static final Text cq = new Text(\"cq\");\n   static final Value value = new Value(\"value\");\n \n+  @Rule\n+  public TemporaryFolder tempFolder =\n+      new TemporaryFolder(new File(System.getProperty(\"user.dir\") + \"/target\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba09677138f781065b83742e2d699984d5aebece"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1ODAxOQ==", "bodyText": "The argument to the constructor is the parent folder in which the temporary directory is created. This is from the javadoc for TemporaryFolder. When the test completes, the @Rule makes it delete itself, but not the parent directory.", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389858019", "createdAt": "2020-03-09T17:49:09Z", "author": {"login": "ctubbsii"}, "path": "server/tserver/src/test/java/org/apache/accumulo/tserver/log/SortedLogRecoveryTest.java", "diffHunk": "@@ -71,6 +70,10 @@\n   static final Text cq = new Text(\"cq\");\n   static final Value value = new Value(\"value\");\n \n+  @Rule\n+  public TemporaryFolder tempFolder =\n+      new TemporaryFolder(new File(System.getProperty(\"user.dir\") + \"/target\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MDIwMQ=="}, "originalCommit": {"oid": "ba09677138f781065b83742e2d699984d5aebece"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3MjQ5OA==", "bodyText": "Thanks.  I missed that the parameter is parentFolder.", "url": "https://github.com/apache/accumulo/pull/1553#discussion_r389872498", "createdAt": "2020-03-09T18:13:53Z", "author": {"login": "milleruntime"}, "path": "server/tserver/src/test/java/org/apache/accumulo/tserver/log/SortedLogRecoveryTest.java", "diffHunk": "@@ -71,6 +70,10 @@\n   static final Text cq = new Text(\"cq\");\n   static final Value value = new Value(\"value\");\n \n+  @Rule\n+  public TemporaryFolder tempFolder =\n+      new TemporaryFolder(new File(System.getProperty(\"user.dir\") + \"/target\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MDIwMQ=="}, "originalCommit": {"oid": "ba09677138f781065b83742e2d699984d5aebece"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4197, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}