{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNzQ0Nzc1", "number": 1649, "title": "Addresses four compaction service follow on issues.", "bodyText": "While waiting for #1632 to be reviewed  I completed multiple follow on issues for the new compaction service.  I am submitting those as a single PR, but there is a commit for each. I can break them into multiple PRs if desired.", "createdAt": "2020-07-02T21:14:27Z", "url": "https://github.com/apache/accumulo/pull/1649", "merged": true, "mergeCommit": {"oid": "a2b476e68f6dec17df9ec75cc56b888c4442cb39"}, "closed": true, "closedAt": "2020-11-03T01:35:24Z", "author": {"login": "keith-turner"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxFdDlAH2gAyNDQzNzQ0Nzc1OmQ1YjU4ZTllYmRiNjFkOTIxOWI0ODI5N2M0ZDIzZmU4ODAxMDk1NTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdU0Xf3gFqTUxNDIwNDYxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d5b58e9ebdb61d9219b48297c4d23fe880109553", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/d5b58e9ebdb61d9219b48297c4d23fe880109553", "committedDate": "2020-07-02T21:09:38Z", "message": "Fix #1612 adds per compaction executor metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efc751824bc035c66215ccc737078cd0135b12ee", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/efc751824bc035c66215ccc737078cd0135b12ee", "committedDate": "2020-07-02T21:09:38Z", "message": "Fix #1611 update shell compact command to support new capabilities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57efdc16b636864e8a8f40c5db5d30ff3b43c6f5", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/57efdc16b636864e8a8f40c5db5d30ff3b43c6f5", "committedDate": "2020-07-02T21:09:38Z", "message": "Fix #1629 Dedicated a planning thread for each compaction service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ead55c83f111bbdf9262a01c0bd2b7a47a53845", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/7ead55c83f111bbdf9262a01c0bd2b7a47a53845", "committedDate": "2020-07-02T21:18:57Z", "message": "Fix #1608 move rate limiting to compaction services"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5ODUxNTEz", "url": "https://github.com/apache/accumulo/pull/1649#pullrequestreview-449851513", "createdAt": "2020-07-16T13:33:36Z", "commit": {"oid": "efc751824bc035c66215ccc737078cd0135b12ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzozMzozN1rOGyrJwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzozMzozN1rOGyrJwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc4ODk5Mw==", "bodyText": "If the new options can't be set along with a strategy, shouldn't these two if statements be in an else?", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r455788993", "createdAt": "2020-07-16T13:33:37Z", "author": {"login": "milleruntime"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/CompactCommand.java", "diffHunk": "@@ -147,30 +170,28 @@ public int execute(final String fullCommand, final CommandLine cl, final Shell s\n       compactionConfig.setIterators(new ArrayList<>(iterators));\n     }\n \n-    Map<String,String> selectorOpts = new HashMap<>();\n-    Map<String,String> configurerOpts = new HashMap<>();\n-    getConfigurableCompactionStrategyOpts(cl, selectorOpts, configurerOpts);\n+    setupConfigurableCompaction(cl, compactionConfig);\n \n     if (cl.hasOption(strategyOpt.getOpt())) {\n-      if (!selectorOpts.isEmpty() || !configurerOpts.isEmpty())\n+      if (cl.hasOption(selectorOpt.getLongOpt()) || cl.hasOption(configurerOpt.getLongOpt())) {\n         throw new IllegalArgumentException(\n-            \"Can not specify compaction strategy with file selection and file output options.\");\n-\n+            \"Can not specify a strategy with a selector or configurer\");\n+      }\n       configureCompactionStrat(cl);\n     }\n \n-    if (!selectorOpts.isEmpty()) {\n-      PluginConfig selectorCfg = new PluginConfig(\n-          \"org.apache.accumulo.tserver.compaction.strategies.ConfigurableCompactionStrategy\",\n-          selectorOpts);\n-      compactionConfig.setSelector(selectorCfg);\n+    if (cl.hasOption(selectorOpt.getLongOpt())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efc751824bc035c66215ccc737078cd0135b12ee"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5ODc5Nzkx", "url": "https://github.com/apache/accumulo/pull/1649#pullrequestreview-449879791", "createdAt": "2020-07-16T14:03:25Z", "commit": {"oid": "7ead55c83f111bbdf9262a01c0bd2b7a47a53845"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDowMzoyNVrOGyse1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDowNzoyMVrOGysqIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxMDc3Mg==", "bodyText": "I think a property that is easier to spell is more user friendly.  The last part of the property could be \"limit\" or \"rate.limit\".  As a bad speller, I know a word like \"throughput\" would trip me up.", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r455810772", "createdAt": "2020-07-16T14:03:25Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -415,6 +415,10 @@\n   TSERV_COMPACTION_SERVICE_ROOT_PLANNER(\"tserver.compaction.major.service.root.planner\",\n       DefaultCompactionPlanner.class.getName(), PropertyType.CLASSNAME,\n       \"Compaction planner for root tablet service\"),\n+  TSERV_COMPACTION_SERVICE_ROOT_THROUGHPUT(\"tserver.compaction.major.service.root.throughput\", \"0B\",\n+      PropertyType.BYTES,\n+      \"Maximum number of bytes to read or write per second over all major\"\n+          + \" compactions in this compaction service, or 0B for unlimited.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ead55c83f111bbdf9262a01c0bd2b7a47a53845"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxMzY2NQ==", "bodyText": "Comment got awkward by the formatter.", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r455813665", "createdAt": "2020-07-16T14:07:21Z", "author": {"login": "milleruntime"}, "path": "test/src/main/java/org/apache/accumulo/test/CompactionRateLimitingIT.java", "diffHunk": "@@ -37,50 +40,74 @@\n   public static final long BYTES_TO_WRITE = 10 * 1024 * 1024;\n   public static final long RATE = 1 * 1024 * 1024;\n \n+  protected Property getThroughputProp() {\n+    return Property.TSERV_COMPACTION_SERVICE_DEFAULT_THROUGHPUT;\n+  }\n+\n   @Override\n   public void configure(MiniAccumuloConfigImpl cfg, Configuration fsConf) {\n-    cfg.setProperty(Property.TSERV_MAJC_THROUGHPUT, RATE + \"B\");\n+    cfg.setProperty(getThroughputProp(), RATE + \"B\");\n     cfg.setProperty(Property.TABLE_MAJC_RATIO, \"20\");\n     cfg.setProperty(Property.TABLE_FILE_COMPRESSION_TYPE, \"none\");\n+\n+    cfg.setProperty(\"tserver.compaction.major.service.test.throughput\", RATE + \"B\");\n+    cfg.setProperty(\"tserver.compaction.major.service.test.planner\",\n+        DefaultCompactionPlanner.class.getName());\n+    cfg.setProperty(\"tserver.compaction.major.service.test.planner.opts.executors\",\n+        \"[{'name':'all','numThreads':2}]\".replaceAll(\"'\", \"\\\"\"));\n+\n   }\n \n   @Test\n   public void majorCompactionsAreRateLimited() throws Exception {\n     long bytesWritten = 0;\n-    String tableName = getUniqueNames(1)[0];\n-    AccumuloClient client =\n-        getCluster().createAccumuloClient(\"root\", new PasswordToken(ROOT_PASSWORD));\n-    client.tableOperations().create(tableName);\n-    try (BatchWriter bw = client.createBatchWriter(tableName)) {\n-      Random r = new SecureRandom();\n-      while (bytesWritten < BYTES_TO_WRITE) {\n-        byte[] rowKey = new byte[32];\n-        r.nextBytes(rowKey);\n-\n-        byte[] qual = new byte[32];\n-        r.nextBytes(qual);\n-\n-        byte[] value = new byte[1024];\n-        r.nextBytes(value);\n-\n-        Mutation m = new Mutation(rowKey);\n-        m.put(new byte[0], qual, value);\n-        bw.addMutation(m);\n-\n-        bytesWritten += rowKey.length + qual.length + value.length;\n+    String[] tableNames = getUniqueNames(1);\n+\n+    try (AccumuloClient client =\n+        getCluster().createAccumuloClient(\"root\", new PasswordToken(ROOT_PASSWORD))) {\n+\n+      for (int i = 0; i < tableNames.length; i++) {\n+        String tableName = tableNames[i];\n+\n+        NewTableConfiguration ntc = new NewTableConfiguration();\n+        if (i == 1) {\n+          ntc.setProperties(Map.of(\"table.compaction.dispatcher.opts.service\", \"test\"));\n+        }\n+\n+        client.tableOperations().create(tableName, ntc);\n+        try (BatchWriter bw = client.createBatchWriter(tableName)) {\n+          Random r = new SecureRandom();\n+          while (bytesWritten < BYTES_TO_WRITE) {\n+            byte[] rowKey = new byte[32];\n+            r.nextBytes(rowKey);\n+\n+            byte[] qual = new byte[32];\n+            r.nextBytes(qual);\n+\n+            byte[] value = new byte[1024];\n+            r.nextBytes(value);\n+\n+            Mutation m = new Mutation(rowKey);\n+            m.put(new byte[0], qual, value);\n+            bw.addMutation(m);\n+\n+            bytesWritten += rowKey.length + qual.length + value.length;\n+          }\n+        }\n+\n+        client.tableOperations().flush(tableName, null, null, true);\n+\n+        long compactionStart = System.currentTimeMillis();\n+        client.tableOperations().compact(tableName, null, null, false, true);\n+        long duration = System.currentTimeMillis() - compactionStart;\n+        // The rate will be \"bursty\", try to account for that by taking 80% of the expected rate\n+        // (allow\n+        // for 20% under the maximum expected duration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ead55c83f111bbdf9262a01c0bd2b7a47a53845"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/abc961a9c742dad47b54ee5d5b1932d26e6a991a", "committedDate": "2020-07-18T03:04:18Z", "message": "Rename throughput to rate.limit #1608"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e40e670408e30db79cb3748b229a02e0fa75e7e", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/1e40e670408e30db79cb3748b229a02e0fa75e7e", "committedDate": "2020-07-18T02:33:47Z", "message": "Code review updates"}, "afterCommit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/abc961a9c742dad47b54ee5d5b1932d26e6a991a", "committedDate": "2020-07-18T03:04:18Z", "message": "Rename throughput to rate.limit #1608"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODc0ODI4", "url": "https://github.com/apache/accumulo/pull/1649#pullrequestreview-457874828", "createdAt": "2020-07-29T20:32:36Z", "commit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDozMjozN1rOG5JFOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDozODoyMVrOG5JQ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MDgxMQ==", "bodyText": "I worry that we have added far too many new configuration properties for compactions, and that this might create a terrible user experience around compactions. I wonder if some of these could be consolidated into a pluggable configuration strategy object that is less complicated to configure.", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r462570811", "createdAt": "2020-07-29T20:32:37Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -415,6 +415,10 @@\n   TSERV_COMPACTION_SERVICE_ROOT_PLANNER(\"tserver.compaction.major.service.root.planner\",\n       DefaultCompactionPlanner.class.getName(), PropertyType.CLASSNAME,\n       \"Compaction planner for root tablet service\"),\n+  TSERV_COMPACTION_SERVICE_ROOT_RATE_LIMIT(\"tserver.compaction.major.service.root.rate.limit\", \"0B\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MTg4Nw==", "bodyText": "Also, what does \"root\" refer to here for this property? The description should leave that obvious, rather than require users to refer to the descriptions of other properties that have similar naming schemes in order to guess at what it might mean for this property.", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r462571887", "createdAt": "2020-07-29T20:34:40Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -415,6 +415,10 @@\n   TSERV_COMPACTION_SERVICE_ROOT_PLANNER(\"tserver.compaction.major.service.root.planner\",\n       DefaultCompactionPlanner.class.getName(), PropertyType.CLASSNAME,\n       \"Compaction planner for root tablet service\"),\n+  TSERV_COMPACTION_SERVICE_ROOT_RATE_LIMIT(\"tserver.compaction.major.service.root.rate.limit\", \"0B\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MDgxMQ=="}, "originalCommit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MzgwMg==", "bodyText": "This sentence could be cleaned up to make it more understandable. What does \"it\" refer to? And does it mean it could \"contain a canceled task\", or that it could \"have canceled a task\"?", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r462573802", "createdAt": "2020-07-29T20:38:21Z", "author": {"login": "ctubbsii"}, "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionExecutor.java", "diffHunk": "@@ -94,8 +112,11 @@ public boolean cancel(Status expectedStatus) {\n         canceled = status.compareAndSet(expectedStatus, Status.CANCELED);\n       }\n \n+      if (canceled)\n+        queuedTask.remove(this);\n+\n       if (canceled && cancelCount.incrementAndGet() % 1024 == 0) {\n-        // nMeed to occasionally clean the queue, it could have canceled task with low priority that\n+        // need to occasionally clean the queue, it could have canceled task with low priority that\n         // hang around. Avoid cleaning it every time something is canceled as that could be\n         // expensive.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79611eef97c07e3605c221812792644008e0c86a", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/79611eef97c07e3605c221812792644008e0c86a", "committedDate": "2020-08-03T15:14:48Z", "message": "improve comment #1609"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDE1NjE2", "url": "https://github.com/apache/accumulo/pull/1649#pullrequestreview-462015616", "createdAt": "2020-08-05T20:53:40Z", "commit": {"oid": "79611eef97c07e3605c221812792644008e0c86a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1Mzo0MFrOG8aOSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1Mzo0MFrOG8aOSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NzM4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        (int) 0.8d * RATE, 1000.0 * bytesWritten / duration),\n          \n          \n            \n                        (int) (0.8d * RATE), 1000.0 * bytesWritten / duration),", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r465997384", "createdAt": "2020-08-05T20:53:40Z", "author": {"login": "EdColeman"}, "path": "test/src/main/java/org/apache/accumulo/test/CompactionRateLimitingIT.java", "diffHunk": "@@ -37,50 +40,73 @@\n   public static final long BYTES_TO_WRITE = 10 * 1024 * 1024;\n   public static final long RATE = 1 * 1024 * 1024;\n \n+  protected Property getThroughputProp() {\n+    return Property.TSERV_COMPACTION_SERVICE_DEFAULT_RATE_LIMIT;\n+  }\n+\n   @Override\n   public void configure(MiniAccumuloConfigImpl cfg, Configuration fsConf) {\n-    cfg.setProperty(Property.TSERV_MAJC_THROUGHPUT, RATE + \"B\");\n+    cfg.setProperty(getThroughputProp(), RATE + \"B\");\n     cfg.setProperty(Property.TABLE_MAJC_RATIO, \"20\");\n     cfg.setProperty(Property.TABLE_FILE_COMPRESSION_TYPE, \"none\");\n+\n+    cfg.setProperty(\"tserver.compaction.major.service.test.rate.limit\", RATE + \"B\");\n+    cfg.setProperty(\"tserver.compaction.major.service.test.planner\",\n+        DefaultCompactionPlanner.class.getName());\n+    cfg.setProperty(\"tserver.compaction.major.service.test.planner.opts.executors\",\n+        \"[{'name':'all','numThreads':2}]\".replaceAll(\"'\", \"\\\"\"));\n+\n   }\n \n   @Test\n   public void majorCompactionsAreRateLimited() throws Exception {\n     long bytesWritten = 0;\n-    String tableName = getUniqueNames(1)[0];\n-    AccumuloClient client =\n-        getCluster().createAccumuloClient(\"root\", new PasswordToken(ROOT_PASSWORD));\n-    client.tableOperations().create(tableName);\n-    try (BatchWriter bw = client.createBatchWriter(tableName)) {\n-      Random r = new SecureRandom();\n-      while (bytesWritten < BYTES_TO_WRITE) {\n-        byte[] rowKey = new byte[32];\n-        r.nextBytes(rowKey);\n-\n-        byte[] qual = new byte[32];\n-        r.nextBytes(qual);\n-\n-        byte[] value = new byte[1024];\n-        r.nextBytes(value);\n-\n-        Mutation m = new Mutation(rowKey);\n-        m.put(new byte[0], qual, value);\n-        bw.addMutation(m);\n-\n-        bytesWritten += rowKey.length + qual.length + value.length;\n+    String[] tableNames = getUniqueNames(1);\n+\n+    try (AccumuloClient client =\n+        getCluster().createAccumuloClient(\"root\", new PasswordToken(ROOT_PASSWORD))) {\n+\n+      for (int i = 0; i < tableNames.length; i++) {\n+        String tableName = tableNames[i];\n+\n+        NewTableConfiguration ntc = new NewTableConfiguration();\n+        if (i == 1) {\n+          ntc.setProperties(Map.of(\"table.compaction.dispatcher.opts.service\", \"test\"));\n+        }\n+\n+        client.tableOperations().create(tableName, ntc);\n+        try (BatchWriter bw = client.createBatchWriter(tableName)) {\n+          Random r = new SecureRandom();\n+          while (bytesWritten < BYTES_TO_WRITE) {\n+            byte[] rowKey = new byte[32];\n+            r.nextBytes(rowKey);\n+\n+            byte[] qual = new byte[32];\n+            r.nextBytes(qual);\n+\n+            byte[] value = new byte[1024];\n+            r.nextBytes(value);\n+\n+            Mutation m = new Mutation(rowKey);\n+            m.put(new byte[0], qual, value);\n+            bw.addMutation(m);\n+\n+            bytesWritten += rowKey.length + qual.length + value.length;\n+          }\n+        }\n+\n+        client.tableOperations().flush(tableName, null, null, true);\n+\n+        long compactionStart = System.currentTimeMillis();\n+        client.tableOperations().compact(tableName, null, null, false, true);\n+        long duration = System.currentTimeMillis() - compactionStart;\n+        // The rate will be \"bursty\", try to account for that by taking 80% of the expected rate\n+        // (allow for 20% under the maximum expected duration)\n+        assertTrue(String.format(\n+            \"Expected a compaction rate of no more than %,d bytes/sec, but saw a rate of %,f bytes/sec\",\n+            (int) 0.8d * RATE, 1000.0 * bytesWritten / duration),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79611eef97c07e3605c221812792644008e0c86a"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dab4afcf500805c0016e611196d3e93d8c733a3", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/7dab4afcf500805c0016e611196d3e93d8c733a3", "committedDate": "2020-09-15T14:28:48Z", "message": "Update test/src/main/java/org/apache/accumulo/test/CompactionRateLimitingIT.java\n\nCo-authored-by: EdColeman <dev1@etcoleman.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MTkyNDI4", "url": "https://github.com/apache/accumulo/pull/1649#pullrequestreview-514192428", "createdAt": "2020-10-21T21:16:30Z", "commit": {"oid": "7dab4afcf500805c0016e611196d3e93d8c733a3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MjA0NjEz", "url": "https://github.com/apache/accumulo/pull/1649#pullrequestreview-514204613", "createdAt": "2020-10-21T21:36:27Z", "commit": {"oid": "7dab4afcf500805c0016e611196d3e93d8c733a3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1983, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}