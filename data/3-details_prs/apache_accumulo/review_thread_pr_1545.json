{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzODQ4Nzgw", "number": 1545, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToyMDoyNVrODlYoRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToyMDoyNVrODlYoRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTI3NDMwOnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/apache/accumulo/test/functional/HalfDeadTServerIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToyMDoyNVrOFyPxMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTowNjoxMVrOFyXLig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMTQ3Mg==", "bodyText": "If the \"so\" exists, do you even need to rec-compile? I guess you run the risk of it being corrupt or an incorrect so, but a clean should remove this as well.", "url": "https://github.com/apache/accumulo/pull/1545#discussion_r388231472", "createdAt": "2020-03-05T11:20:25Z", "author": {"login": "phrocker"}, "path": "test/src/main/java/org/apache/accumulo/test/functional/HalfDeadTServerIT.java", "diffHunk": "@@ -63,7 +66,29 @@ protected int defaultTimeoutSeconds() {\n     return 4 * 60;\n   }\n \n-  class DumpOutput extends Daemon {\n+  private static final AtomicBoolean sharedLibBuilt = new AtomicBoolean(false);\n+\n+  @SuppressFBWarnings(value = \"COMMAND_INJECTION\",\n+      justification = \"command executed is not from user input\")\n+  @BeforeClass\n+  public static void buildSharedLib() throws IOException, InterruptedException {\n+    String root = System.getProperty(\"user.dir\");\n+    String source = root + \"/src/test/c/fake_disk_failure.c\";\n+    String lib = root + \"/target/fake_disk_failure.so\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62bdc2691fc255947cc9d3ad03ee0aa02fb29d5b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1MjkwNg==", "bodyText": "Perhaps not, but that's a bit out of scope of what I was trying to optimize here. I was actually thinking about creating a proper Makefile and building the shared lib with exec-maven-plugin rather than doing it with a direct call to gcc in the test. But again, I felt it was a bit out of scope.", "url": "https://github.com/apache/accumulo/pull/1545#discussion_r388352906", "createdAt": "2020-03-05T15:06:11Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/functional/HalfDeadTServerIT.java", "diffHunk": "@@ -63,7 +66,29 @@ protected int defaultTimeoutSeconds() {\n     return 4 * 60;\n   }\n \n-  class DumpOutput extends Daemon {\n+  private static final AtomicBoolean sharedLibBuilt = new AtomicBoolean(false);\n+\n+  @SuppressFBWarnings(value = \"COMMAND_INJECTION\",\n+      justification = \"command executed is not from user input\")\n+  @BeforeClass\n+  public static void buildSharedLib() throws IOException, InterruptedException {\n+    String root = System.getProperty(\"user.dir\");\n+    String source = root + \"/src/test/c/fake_disk_failure.c\";\n+    String lib = root + \"/target/fake_disk_failure.so\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMTQ3Mg=="}, "originalCommit": {"oid": "62bdc2691fc255947cc9d3ad03ee0aa02fb29d5b"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4183, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}