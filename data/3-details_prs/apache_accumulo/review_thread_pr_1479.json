{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NTA4Mjc2", "number": 1479, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTowNTo0MlrODZovDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTowMzo0NFrODZ3RCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjA4Mzk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/metadata/TabletFileUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTowNTo0MlrOFgIxkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoyMDoxOFrOFgpukw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0MjUxMw==", "bodyText": "Did we want to have this normalize the path also by returning the normalized version from Path?", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369242513", "createdAt": "2020-01-21T21:05:42Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/metadata/TabletFileUtil.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.metadata;\n+\n+import org.apache.hadoop.fs.Path;\n+\n+/**\n+ * Utility class for validation of metadata tablet files.\n+ */\n+public class TabletFileUtil {\n+\n+  /**\n+   * Validate if string is a valid path. Return same string or throw exception if not valid. This\n+   * was added to facilitate more use of TabletFile over String but this puts the validation in one\n+   * location in the case where TabletFile can't be used.\n+   */\n+  public static String validate(String path) {\n+    Path p = new Path(path);\n+    if (p.toUri().getScheme() == null) {\n+      throw new IllegalArgumentException(\"Invalid path provided, no scheme in \" + path);\n+    }\n+    return path;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU3MjMzOQ==", "bodyText": "I think that would be better.  You thinking return the Path object or p.toString()?", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369572339", "createdAt": "2020-01-22T13:56:38Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/metadata/TabletFileUtil.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.metadata;\n+\n+import org.apache.hadoop.fs.Path;\n+\n+/**\n+ * Utility class for validation of metadata tablet files.\n+ */\n+public class TabletFileUtil {\n+\n+  /**\n+   * Validate if string is a valid path. Return same string or throw exception if not valid. This\n+   * was added to facilitate more use of TabletFile over String but this puts the validation in one\n+   * location in the case where TabletFile can't be used.\n+   */\n+  public static String validate(String path) {\n+    Path p = new Path(path);\n+    if (p.toUri().getScheme() == null) {\n+      throw new IllegalArgumentException(\"Invalid path provided, no scheme in \" + path);\n+    }\n+    return path;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0MjUxMw=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NjkwMg==", "bodyText": "Not sure. Probably Path, but it depends on caller needs. I haven't investigated.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369746902", "createdAt": "2020-01-22T19:05:38Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/metadata/TabletFileUtil.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.metadata;\n+\n+import org.apache.hadoop.fs.Path;\n+\n+/**\n+ * Utility class for validation of metadata tablet files.\n+ */\n+public class TabletFileUtil {\n+\n+  /**\n+   * Validate if string is a valid path. Return same string or throw exception if not valid. This\n+   * was added to facilitate more use of TabletFile over String but this puts the validation in one\n+   * location in the case where TabletFile can't be used.\n+   */\n+  public static String validate(String path) {\n+    Path p = new Path(path);\n+    if (p.toUri().getScheme() == null) {\n+      throw new IllegalArgumentException(\"Invalid path provided, no scheme in \" + path);\n+    }\n+    return path;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0MjUxMw=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MjQxOQ==", "bodyText": "I think these could also get replaced with TabletFile or Ample as well.  So I will just leave as String.  If we can replace them all, this class will go away", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369782419", "createdAt": "2020-01-22T20:20:18Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/metadata/TabletFileUtil.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.metadata;\n+\n+import org.apache.hadoop.fs.Path;\n+\n+/**\n+ * Utility class for validation of metadata tablet files.\n+ */\n+public class TabletFileUtil {\n+\n+  /**\n+   * Validate if string is a valid path. Return same string or throw exception if not valid. This\n+   * was added to facilitate more use of TabletFile over String but this puts the validation in one\n+   * location in the case where TabletFile can't be used.\n+   */\n+  public static String validate(String path) {\n+    Path p = new Path(path);\n+    if (p.toUri().getScheme() == null) {\n+      throw new IllegalArgumentException(\"Invalid path provided, no scheme in \" + path);\n+    }\n+    return path;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0MjUxMw=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjA5MzA5OnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/metadata/ServerAmpleImpl.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTowOToxOFrOFgI3gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowNzoyNlrOFgnnFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NDAzNQ==", "bodyText": "The old code did a kind of normalization here against the volume manager's filesystem. I would hope that by the time it gets here, all callers would be providing a normalized string, but care should be taken if the parameter is provided from user input, that we normalize it first. I didn't track down all the callers to check this.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369244035", "createdAt": "2020-01-21T21:09:18Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/metadata/ServerAmpleImpl.java", "diffHunk": "@@ -192,10 +192,9 @@ private BatchWriter createWriter(TableId tableId) {\n     }\n   }\n \n-  public static Mutation createDeleteMutation(ServerContext context, TableId tableId,\n-      String pathToRemove) {\n-    Path path = context.getVolumeManager().getFullPath(tableId, pathToRemove);\n-    Mutation delFlag = new Mutation(new Text(DeletesSection.encodeRow(path.toString())));\n+  public static Mutation createDeleteMutation(String pathToRemove) {\n+    String path = TabletFileUtil.validate(pathToRemove);\n+    Mutation delFlag = new Mutation(new Text(DeletesSection.encodeRow(path)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MjQ4MQ==", "bodyText": "Also, there's a lot of calls to toString() on the path to validate. This is the only method that calls validate without calling toString() first. However, many of this method's own callers call toString() first on the parameter. I think some of this could be simplified if everybody stopped calling toString(), and we kept the more concrete type, and only call toString() inside the validate method, if necessary. It simplifies a lot of the calling code.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369252481", "createdAt": "2020-01-21T21:29:00Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/metadata/ServerAmpleImpl.java", "diffHunk": "@@ -192,10 +192,9 @@ private BatchWriter createWriter(TableId tableId) {\n     }\n   }\n \n-  public static Mutation createDeleteMutation(ServerContext context, TableId tableId,\n-      String pathToRemove) {\n-    Path path = context.getVolumeManager().getFullPath(tableId, pathToRemove);\n-    Mutation delFlag = new Mutation(new Text(DeletesSection.encodeRow(path.toString())));\n+  public static Mutation createDeleteMutation(String pathToRemove) {\n+    String path = TabletFileUtil.validate(pathToRemove);\n+    Mutation delFlag = new Mutation(new Text(DeletesSection.encodeRow(path)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NDAzNQ=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0MTA0NQ==", "bodyText": "Which object do you think would be better?  The issue is that we have some use of Path, ByteSequence and String.  Calls to the createDeleteMutation() method are particularly hairy as there are a few spots where we parse the string and do string manipulation:\ngc\nupgrader", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369641045", "createdAt": "2020-01-22T15:48:48Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/metadata/ServerAmpleImpl.java", "diffHunk": "@@ -192,10 +192,9 @@ private BatchWriter createWriter(TableId tableId) {\n     }\n   }\n \n-  public static Mutation createDeleteMutation(ServerContext context, TableId tableId,\n-      String pathToRemove) {\n-    Path path = context.getVolumeManager().getFullPath(tableId, pathToRemove);\n-    Mutation delFlag = new Mutation(new Text(DeletesSection.encodeRow(path.toString())));\n+  public static Mutation createDeleteMutation(String pathToRemove) {\n+    String path = TabletFileUtil.validate(pathToRemove);\n+    Mutation delFlag = new Mutation(new Text(DeletesSection.encodeRow(path)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NDAzNQ=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MTc4Nw==", "bodyText": "I think you are pointing to an overall problem with a lot of the internal code.  One of my goals with the new TabletFile (similar to how we are trying to use Ample as much as possible) was to try and replace as much overuse of String and FileRef as we can.  We have a LogEntry which I think is good for WALs but we might need some more internal types for strings that aren't TabletFiles.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369741787", "createdAt": "2020-01-22T18:55:27Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/metadata/ServerAmpleImpl.java", "diffHunk": "@@ -192,10 +192,9 @@ private BatchWriter createWriter(TableId tableId) {\n     }\n   }\n \n-  public static Mutation createDeleteMutation(ServerContext context, TableId tableId,\n-      String pathToRemove) {\n-    Path path = context.getVolumeManager().getFullPath(tableId, pathToRemove);\n-    Mutation delFlag = new Mutation(new Text(DeletesSection.encodeRow(path.toString())));\n+  public static Mutation createDeleteMutation(String pathToRemove) {\n+    String path = TabletFileUtil.validate(pathToRemove);\n+    Mutation delFlag = new Mutation(new Text(DeletesSection.encodeRow(path)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NDAzNQ=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MjU5Nw==", "bodyText": "That being said, I think a lot of that can be done in other PRs while the goal of this one was to remove some of the relative path code that was no longer needed in VolumeManager", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369742597", "createdAt": "2020-01-22T18:56:59Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/metadata/ServerAmpleImpl.java", "diffHunk": "@@ -192,10 +192,9 @@ private BatchWriter createWriter(TableId tableId) {\n     }\n   }\n \n-  public static Mutation createDeleteMutation(ServerContext context, TableId tableId,\n-      String pathToRemove) {\n-    Path path = context.getVolumeManager().getFullPath(tableId, pathToRemove);\n-    Mutation delFlag = new Mutation(new Text(DeletesSection.encodeRow(path.toString())));\n+  public static Mutation createDeleteMutation(String pathToRemove) {\n+    String path = TabletFileUtil.validate(pathToRemove);\n+    Mutation delFlag = new Mutation(new Text(DeletesSection.encodeRow(path)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NDAzNQ=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NzczMw==", "bodyText": "I'm happy to defer to future improvements, if what can be done here is limited.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369747733", "createdAt": "2020-01-22T19:07:26Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/metadata/ServerAmpleImpl.java", "diffHunk": "@@ -192,10 +192,9 @@ private BatchWriter createWriter(TableId tableId) {\n     }\n   }\n \n-  public static Mutation createDeleteMutation(ServerContext context, TableId tableId,\n-      String pathToRemove) {\n-    Path path = context.getVolumeManager().getFullPath(tableId, pathToRemove);\n-    Mutation delFlag = new Mutation(new Text(DeletesSection.encodeRow(path.toString())));\n+  public static Mutation createDeleteMutation(String pathToRemove) {\n+    String path = TabletFileUtil.validate(pathToRemove);\n+    Mutation delFlag = new Mutation(new Text(DeletesSection.encodeRow(path)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NDAzNQ=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjA5NzY2OnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/util/MasterMetadataUtil.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxMTowNlrOFgI6cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTo0MDowMVrOFgol7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NDc4Ng==", "bodyText": "This would be more readable if the validate call wrapped the right-hand-side of the assignment to tabletFilePath rather than being embedded into a constructor inside a parameter to the put method call.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369244786", "createdAt": "2020-01-21T21:11:06Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/util/MasterMetadataUtil.java", "diffHunk": "@@ -149,7 +150,8 @@ private static KeyExtent fixSplit(ServerContext context, TableId tableId, Text m\n \n           for (Entry<Key,Value> entry : scanner3) {\n             if (entry.getKey().compareColumnFamily(DataFileColumnFamily.NAME) == 0) {\n-              origDatafileSizes.put(new FileRef(context.getVolumeManager(), entry.getKey()),\n+              String tabletFilePath = entry.getKey().getColumnQualifierData().toString();\n+              origDatafileSizes.put(new FileRef(TabletFileUtil.validate(tabletFilePath)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU3NDIzMQ==", "bodyText": "I 100% wrote it this way for nice formatting as any other way wraps the line of code.  I think your way make sense logically though.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369574231", "createdAt": "2020-01-22T13:59:57Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/util/MasterMetadataUtil.java", "diffHunk": "@@ -149,7 +150,8 @@ private static KeyExtent fixSplit(ServerContext context, TableId tableId, Text m\n \n           for (Entry<Key,Value> entry : scanner3) {\n             if (entry.getKey().compareColumnFamily(DataFileColumnFamily.NAME) == 0) {\n-              origDatafileSizes.put(new FileRef(context.getVolumeManager(), entry.getKey()),\n+              String tabletFilePath = entry.getKey().getColumnQualifierData().toString();\n+              origDatafileSizes.put(new FileRef(TabletFileUtil.validate(tabletFilePath)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NDc4Ng=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0OTE5Nw==", "bodyText": "LOL, I wasn't thinking about formatting. Now, I'm not so sure. It might fit if validate were overloaded to take a Text so you didn't have to do toString()? Whatever you think best.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369749197", "createdAt": "2020-01-22T19:10:15Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/util/MasterMetadataUtil.java", "diffHunk": "@@ -149,7 +150,8 @@ private static KeyExtent fixSplit(ServerContext context, TableId tableId, Text m\n \n           for (Entry<Key,Value> entry : scanner3) {\n             if (entry.getKey().compareColumnFamily(DataFileColumnFamily.NAME) == 0) {\n-              origDatafileSizes.put(new FileRef(context.getVolumeManager(), entry.getKey()),\n+              String tabletFilePath = entry.getKey().getColumnQualifierData().toString();\n+              origDatafileSizes.put(new FileRef(TabletFileUtil.validate(tabletFilePath)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NDc4Ng=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1NDc2MA==", "bodyText": "Ah man... I don't like overloaded methods to begin with, let alone adding one purely for formatting haha.  I'll see how your suggestion fits and if its ugly ill just keep what I had.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369754760", "createdAt": "2020-01-22T19:21:38Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/util/MasterMetadataUtil.java", "diffHunk": "@@ -149,7 +150,8 @@ private static KeyExtent fixSplit(ServerContext context, TableId tableId, Text m\n \n           for (Entry<Key,Value> entry : scanner3) {\n             if (entry.getKey().compareColumnFamily(DataFileColumnFamily.NAME) == 0) {\n-              origDatafileSizes.put(new FileRef(context.getVolumeManager(), entry.getKey()),\n+              String tabletFilePath = entry.getKey().getColumnQualifierData().toString();\n+              origDatafileSizes.put(new FileRef(TabletFileUtil.validate(tabletFilePath)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NDc4Ng=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1NjA3OA==", "bodyText": "Either way, I think this could get replaced with TabletFile or Ample eventually.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369756078", "createdAt": "2020-01-22T19:24:12Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/util/MasterMetadataUtil.java", "diffHunk": "@@ -149,7 +150,8 @@ private static KeyExtent fixSplit(ServerContext context, TableId tableId, Text m\n \n           for (Entry<Key,Value> entry : scanner3) {\n             if (entry.getKey().compareColumnFamily(DataFileColumnFamily.NAME) == 0) {\n-              origDatafileSizes.put(new FileRef(context.getVolumeManager(), entry.getKey()),\n+              String tabletFilePath = entry.getKey().getColumnQualifierData().toString();\n+              origDatafileSizes.put(new FileRef(TabletFileUtil.validate(tabletFilePath)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NDc4Ng=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MzgyMw==", "bodyText": "It's not purely formatting. I would argue that the overloaded method would help centralize the logic related to validation by simplifying calling code, and that, in turn, makes it easier to swap out later (because working with concrete types rather than Strings helps you create replacement code that satisfies all your caller use cases). Also, avoiding the toString() calls and using the concrete types instead, can help find a lot of situations where code is being unnecessarily converted back and forth to/from String.\nBut, I also don't like overloaded methods, so if you can find a better way (or think it's better as-is), that's fine with me.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369763823", "createdAt": "2020-01-22T19:40:01Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/util/MasterMetadataUtil.java", "diffHunk": "@@ -149,7 +150,8 @@ private static KeyExtent fixSplit(ServerContext context, TableId tableId, Text m\n \n           for (Entry<Key,Value> entry : scanner3) {\n             if (entry.getKey().compareColumnFamily(DataFileColumnFamily.NAME) == 0) {\n-              origDatafileSizes.put(new FileRef(context.getVolumeManager(), entry.getKey()),\n+              String tabletFilePath = entry.getKey().getColumnQualifierData().toString();\n+              origDatafileSizes.put(new FileRef(TabletFileUtil.validate(tabletFilePath)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NDc4Ng=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjEwMDE5OnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/util/MetadataTableUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxMjowNFrOFgI8IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxMjowNFrOFgI8IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NTIxNg==", "bodyText": "An impl method could take the more precise type, rather than the toString() version, without affecting the API.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369245216", "createdAt": "2020-01-21T21:12:04Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/util/MetadataTableUtil.java", "diffHunk": "@@ -278,15 +278,12 @@ public static void addDeleteEntries(KeyExtent extent, Set<FileRef> datafilesToDe\n     // TODO could use batch writer,would need to handle failure and retry like update does -\n     // ACCUMULO-1294\n     for (FileRef pathToRemove : datafilesToDelete) {\n-      update(context,\n-          ServerAmpleImpl.createDeleteMutation(context, tableId, pathToRemove.path().toString()),\n-          extent);\n+      update(context, ServerAmpleImpl.createDeleteMutation(pathToRemove.path().toString()), extent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDM3MDM3OnYy", "diffSide": "LEFT", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDo0MDowNFrOFgeeXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjozMTozOFrOFgislQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5ODA0Nw==", "bodyText": "There is another method in this class named getVolumeByPath that has relative path handling code.  Would that be something to address in this PR?  Or should that be another PR?", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369598047", "createdAt": "2020-01-22T14:40:04Z", "author": {"login": "keith-turner"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -419,66 +407,6 @@ public Path matchingFileSystem(Path source, String[] options) {\n     return null;\n   }\n \n-  @Override\n-  public Path getFullPath(TableId tableId, String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2NzIyMQ==", "bodyText": "I think getVolumeByPath may have to be done in another change, related to the DEFAULT volume code.  That method returns the DEFAULT volume if it detects a relative path, which I could remove but I wanted to look more into whether the DEFAULT volume can be removed with the other legacy properties.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369667221", "createdAt": "2020-01-22T16:31:38Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -419,66 +407,6 @@ public Path matchingFileSystem(Path source, String[] options) {\n     return null;\n   }\n \n-  @Override\n-  public Path getFullPath(TableId tableId, String path) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5ODA0Nw=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDQwMzA0OnYy", "diffSide": "RIGHT", "path": "server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDo0ODoxMVrOFgeyBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTozMzoyOFrOFgoaJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwMzA3Ng==", "bodyText": "Should these be validated?", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369603076", "createdAt": "2020-01-22T14:48:11Z", "author": {"login": "keith-turner"}, "path": "server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java", "diffHunk": "@@ -319,9 +319,9 @@ public void delete(SortedMap<String,String> confirmedDeletes) throws TableNotFou\n               // of deleting something that should not be deleted. Must not change value of delete\n               // variable because thats whats stored in metadata table.\n               log.debug(\"Volume replaced {} -> {}\", delete, switchedDelete);\n-              fullPath = fs.getFullPath(FileType.TABLE, switchedDelete);\n+              fullPath = new Path(switchedDelete);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNDI0MQ==", "bodyText": "Looking at the code, I can't figure out if these are delete markers or the files to delete...", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369724241", "createdAt": "2020-01-22T18:20:13Z", "author": {"login": "milleruntime"}, "path": "server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java", "diffHunk": "@@ -319,9 +319,9 @@ public void delete(SortedMap<String,String> confirmedDeletes) throws TableNotFou\n               // of deleting something that should not be deleted. Must not change value of delete\n               // variable because thats whats stored in metadata table.\n               log.debug(\"Volume replaced {} -> {}\", delete, switchedDelete);\n-              fullPath = fs.getFullPath(FileType.TABLE, switchedDelete);\n+              fullPath = new Path(switchedDelete);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwMzA3Ng=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MDgwNw==", "bodyText": "These are delete markers that have no references and are therefore safe to delete.  The code after this deletes the files and then deletes the markers from the metadata table.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369760807", "createdAt": "2020-01-22T19:33:28Z", "author": {"login": "keith-turner"}, "path": "server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java", "diffHunk": "@@ -319,9 +319,9 @@ public void delete(SortedMap<String,String> confirmedDeletes) throws TableNotFou\n               // of deleting something that should not be deleted. Must not change value of delete\n               // variable because thats whats stored in metadata table.\n               log.debug(\"Volume replaced {} -> {}\", delete, switchedDelete);\n-              fullPath = fs.getFullPath(FileType.TABLE, switchedDelete);\n+              fullPath = new Path(switchedDelete);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwMzA3Ng=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDQyNDEwOnYy", "diffSide": "RIGHT", "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/TabletData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDo1MzozNlrOFge_Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDo1MzozNlrOFge_Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwNjQ1OQ==", "bodyText": "Would probably be useful to have a FileRef constructor that takes a TabletFile type.  This way its always converted easily and consistently.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369606459", "createdAt": "2020-01-22T14:53:36Z", "author": {"login": "keith-turner"}, "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/TabletData.java", "diffHunk": "@@ -58,19 +58,18 @@ public TabletData(KeyExtent extent, VolumeManager fs, TabletMetadata meta) {\n     this.flushID = meta.getFlushId().orElse(-1);\n     this.directoryName = meta.getDirName();\n     this.logEntries.addAll(meta.getLogs());\n-    meta.getScans().forEach(tabletFile -> scanFiles\n-        .add(new FileRef(fs, tabletFile.getMetadataEntry(), meta.getTableId())));\n+    meta.getScans()\n+        .forEach(tabletFile -> scanFiles.add(new FileRef(tabletFile.getMetadataEntry())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDQyNzQ0OnYy", "diffSide": "RIGHT", "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/TabletServer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDo1NDozMVrOFgfBVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTo1MTozMFrOFhorOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwNjk5Nw==", "bodyText": "Should this be validated?", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369606997", "createdAt": "2020-01-22T14:54:31Z", "author": {"login": "keith-turner"}, "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/TabletServer.java", "diffHunk": "@@ -3217,7 +3216,7 @@ public void recover(VolumeManager fs, KeyExtent extent, List<LogEntry> logEntrie\n     Collections.sort(sorted, (e1, e2) -> (int) (e1.timestamp - e2.timestamp));\n     for (LogEntry entry : sorted) {\n       Path recovery = null;\n-      Path finished = RecoveryPath.getRecoveryPath(fs.getFullPath(FileType.WAL, entry.filename));\n+      Path finished = RecoveryPath.getRecoveryPath(new Path(entry.filename));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2MjM0OA==", "bodyText": "I am not sure what we could validate with the WAL filenames.  But the filename is coming from LogEntry so I think we should do it when the LogEntry is created, not after the TabletServer gets the list of files.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369662348", "createdAt": "2020-01-22T16:23:26Z", "author": {"login": "milleruntime"}, "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/TabletServer.java", "diffHunk": "@@ -3217,7 +3216,7 @@ public void recover(VolumeManager fs, KeyExtent extent, List<LogEntry> logEntrie\n     Collections.sort(sorted, (e1, e2) -> (int) (e1.timestamp - e2.timestamp));\n     for (LogEntry entry : sorted) {\n       Path recovery = null;\n-      Path finished = RecoveryPath.getRecoveryPath(fs.getFullPath(FileType.WAL, entry.filename));\n+      Path finished = RecoveryPath.getRecoveryPath(new Path(entry.filename));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwNjk5Nw=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczMDEzNQ==", "bodyText": "so I think we should do it when the LogEntry is created\n\nI like that approach.  We do need to avoid constantly validating the same data over and over in the code.  I think the goal should be that data is only validated after its read from a persistent store and no where else.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369730135", "createdAt": "2020-01-22T18:31:55Z", "author": {"login": "keith-turner"}, "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/TabletServer.java", "diffHunk": "@@ -3217,7 +3216,7 @@ public void recover(VolumeManager fs, KeyExtent extent, List<LogEntry> logEntrie\n     Collections.sort(sorted, (e1, e2) -> (int) (e1.timestamp - e2.timestamp));\n     for (LogEntry entry : sorted) {\n       Path recovery = null;\n-      Path finished = RecoveryPath.getRecoveryPath(fs.getFullPath(FileType.WAL, entry.filename));\n+      Path finished = RecoveryPath.getRecoveryPath(new Path(entry.filename));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwNjk5Nw=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgxMzc1Mg==", "bodyText": "I checked and LogEntry.fromKeyValue(key, val) does some checking. And this is what is called when the data is read from the metadata in TabletMetadata", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r370813752", "createdAt": "2020-01-24T19:51:30Z", "author": {"login": "milleruntime"}, "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/TabletServer.java", "diffHunk": "@@ -3217,7 +3216,7 @@ public void recover(VolumeManager fs, KeyExtent extent, List<LogEntry> logEntrie\n     Collections.sort(sorted, (e1, e2) -> (int) (e1.timestamp - e2.timestamp));\n     for (LogEntry entry : sorted) {\n       Path recovery = null;\n-      Path finished = RecoveryPath.getRecoveryPath(fs.getFullPath(FileType.WAL, entry.filename));\n+      Path finished = RecoveryPath.getRecoveryPath(new Path(entry.filename));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwNjk5Nw=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDQ2NDc1OnYy", "diffSide": "RIGHT", "path": "server/master/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTowMzo0NFrOFgfYNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTowNjozMlrOFgfesw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxMjg1NA==", "bodyText": "With a method like the following, could possibly do datafiles.add(new FileRef(TabletFile.from(key)));.  Not completely sure about this, its just something I thought of while looking at this code.\nclass TableFile {\n public static TableFile from(Key k){\n   switch(k.getColumnFamilyData().toString()) {\n     case SCAN:\n     case DATA:\n         return new TableFile(k.getColumnQualifierData().toString());\n   }\n }\n}", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369612854", "createdAt": "2020-01-22T15:03:44Z", "author": {"login": "keith-turner"}, "path": "server/master/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java", "diffHunk": "@@ -614,7 +615,8 @@ private void deleteTablets(MergeInfo info) throws AccumuloException {\n       for (Entry<Key,Value> entry : scanner) {\n         Key key = entry.getKey();\n         if (key.compareColumnFamily(DataFileColumnFamily.NAME) == 0) {\n-          datafiles.add(new FileRef(this.master.fs, key));\n+          datafiles\n+              .add(new FileRef(TabletFileUtil.validate(key.getColumnQualifierData().toString())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxNDUxNQ==", "bodyText": "Actually, probably would not want to add that method to TabletFile.  I think it would be best if TabletFile were just a POJO in order to cleanly separate serialization and try to coral serialization code to a single place.", "url": "https://github.com/apache/accumulo/pull/1479#discussion_r369614515", "createdAt": "2020-01-22T15:06:32Z", "author": {"login": "keith-turner"}, "path": "server/master/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java", "diffHunk": "@@ -614,7 +615,8 @@ private void deleteTablets(MergeInfo info) throws AccumuloException {\n       for (Entry<Key,Value> entry : scanner) {\n         Key key = entry.getKey();\n         if (key.compareColumnFamily(DataFileColumnFamily.NAME) == 0) {\n-          datafiles.add(new FileRef(this.master.fs, key));\n+          datafiles\n+              .add(new FileRef(TabletFileUtil.validate(key.getColumnQualifierData().toString())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxMjg1NA=="}, "originalCommit": {"oid": "3276e788e8fa7ebf9c5f1fa4f37f49bad4eaeb3a"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4303, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}