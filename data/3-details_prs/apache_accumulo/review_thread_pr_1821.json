{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMTM2ODE5", "number": 1821, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDowODoyN1rOFB9tyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDoxNDoyM1rOFB93rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjA0MDQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletMetadata.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDowODoyN1rOIA4i_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODowNzo1M1rOIGY54g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzM3Mg==", "bodyText": "This pattern of populating currentServers inside the other method, checkServer, after looping over all can be improved with something like:\n  var children = context.getZooCache().getChildren(path);\n  var liveTservers = children.map(TabletMetadata::checkServer).filter(Optional::isPresent).collect(Collectors.toSet());\n  log(liveTservers);\n  return liveTservers;\nThis requires checkServer to be modified to return either Optional.of(instance) or Optional.empty(), but I think it's more readable.", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r537797372", "createdAt": "2020-12-07T20:08:27Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletMetadata.java", "diffHunk": "@@ -435,4 +445,34 @@ static TabletMetadata create(String id, String prevEndRow, String endRow) {\n     te.fetchedCols = EnumSet.of(ColumnType.PREV_ROW);\n     return te;\n   }\n+\n+  public static synchronized Set<TServerInstance> getLiveTServers(ClientContext context) {\n+    final Set<TServerInstance> currentServers = new HashSet<>();\n+\n+    final String path = context.getZooKeeperRoot() + Constants.ZTSERVERS;\n+\n+    HashSet<String> all = new HashSet<>(context.getZooCache().getChildren(path));\n+\n+    for (String zPath : all) {\n+      checkServer(context, currentServers, path, zPath);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93f69b57af04ac53f21fcf5147bb876da7b7665b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3NjE3MA==", "bodyText": "I disagree.  To me what you have is longer and less readable.  I will rename all to children though.", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r542476170", "createdAt": "2020-12-14T15:31:17Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletMetadata.java", "diffHunk": "@@ -435,4 +445,34 @@ static TabletMetadata create(String id, String prevEndRow, String endRow) {\n     te.fetchedCols = EnumSet.of(ColumnType.PREV_ROW);\n     return te;\n   }\n+\n+  public static synchronized Set<TServerInstance> getLiveTServers(ClientContext context) {\n+    final Set<TServerInstance> currentServers = new HashSet<>();\n+\n+    final String path = context.getZooKeeperRoot() + Constants.ZTSERVERS;\n+\n+    HashSet<String> all = new HashSet<>(context.getZooCache().getChildren(path));\n+\n+    for (String zPath : all) {\n+      checkServer(context, currentServers, path, zPath);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzM3Mg=="}, "originalCommit": {"oid": "93f69b57af04ac53f21fcf5147bb876da7b7665b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0NDc5OQ==", "bodyText": "The main point I find difficult to read is the pass by reference of the data structure to a different method that is responsible for updating the data structure, conditionally. That kind of pattern can be hard to follow.\nSo, instead of:\n  methodToUpdateDataStructure(x1, x2, x3, dataStructure)\nYou can do:\n  var obj = shouldAddToDataStructure(x1, x2, x3);\n  if (obj != null)\n    dataStructure.add(obj);\nSo, if the part of my suggestion that was less readable to you was the stream stuff, here's a non-stream version:\n    var currentServers = new HashSet<TServerInstance>();\n    for (var child : context.getZooCache().getChildren(context.getZooKeeperRoot() + Constants.ZTSERVERS)) {\n      var instance = checkServer(child);\n      if (instance != null)\n        currentServers.add(instance);\n    }\nI just thought the stream version was better, but honestly, anything is better than the pass-by-reference mutable data structure pattern, IMO.\nIf you prefer the current implementation, that's fine too. I don't feel very strongly about it. It was just something I noticed and thought could be improved.", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r542744799", "createdAt": "2020-12-14T20:26:53Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletMetadata.java", "diffHunk": "@@ -435,4 +445,34 @@ static TabletMetadata create(String id, String prevEndRow, String endRow) {\n     te.fetchedCols = EnumSet.of(ColumnType.PREV_ROW);\n     return te;\n   }\n+\n+  public static synchronized Set<TServerInstance> getLiveTServers(ClientContext context) {\n+    final Set<TServerInstance> currentServers = new HashSet<>();\n+\n+    final String path = context.getZooKeeperRoot() + Constants.ZTSERVERS;\n+\n+    HashSet<String> all = new HashSet<>(context.getZooCache().getChildren(path));\n+\n+    for (String zPath : all) {\n+      checkServer(context, currentServers, path, zPath);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzM3Mg=="}, "originalCommit": {"oid": "93f69b57af04ac53f21fcf5147bb876da7b7665b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc2MDkxNQ==", "bodyText": "I agree that mutating a data structure passed as a param can be deceptive.  For me personally, I typically find streams to be less readable.  I was just using what was there to start with since some of the code used in the locking I don't fully understand.  I do like your non-stream suggestion, I will use that.", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r542760915", "createdAt": "2020-12-14T20:42:27Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletMetadata.java", "diffHunk": "@@ -435,4 +445,34 @@ static TabletMetadata create(String id, String prevEndRow, String endRow) {\n     te.fetchedCols = EnumSet.of(ColumnType.PREV_ROW);\n     return te;\n   }\n+\n+  public static synchronized Set<TServerInstance> getLiveTServers(ClientContext context) {\n+    final Set<TServerInstance> currentServers = new HashSet<>();\n+\n+    final String path = context.getZooKeeperRoot() + Constants.ZTSERVERS;\n+\n+    HashSet<String> all = new HashSet<>(context.getZooCache().getChildren(path));\n+\n+    for (String zPath : all) {\n+      checkServer(context, currentServers, path, zPath);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzM3Mg=="}, "originalCommit": {"oid": "93f69b57af04ac53f21fcf5147bb876da7b7665b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3MDQwMg==", "bodyText": "@ctubbsii I think I came up with a nice combo of ideas in ba8fb27", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r543570402", "createdAt": "2020-12-15T18:07:53Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletMetadata.java", "diffHunk": "@@ -435,4 +445,34 @@ static TabletMetadata create(String id, String prevEndRow, String endRow) {\n     te.fetchedCols = EnumSet.of(ColumnType.PREV_ROW);\n     return te;\n   }\n+\n+  public static synchronized Set<TServerInstance> getLiveTServers(ClientContext context) {\n+    final Set<TServerInstance> currentServers = new HashSet<>();\n+\n+    final String path = context.getZooKeeperRoot() + Constants.ZTSERVERS;\n+\n+    HashSet<String> all = new HashSet<>(context.getZooCache().getChildren(path));\n+\n+    for (String zPath : all) {\n+      checkServer(context, currentServers, path, zPath);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzM3Mg=="}, "originalCommit": {"oid": "93f69b57af04ac53f21fcf5147bb876da7b7665b"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjA2NTc1OnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/apache/accumulo/test/functional/TabletMetadataIT.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDoxNDoyM1rOIA4xQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDo1MjozMlrOIOArlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMTAyNA==", "bodyText": "I feel like we have some sort of ConfigurableMacIT that is our normal way of doing this. Will that work here instead of this callback?", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r537801024", "createdAt": "2020-12-07T20:14:23Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/functional/TabletMetadataIT.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.test.functional;\n+\n+import static org.apache.accumulo.fate.util.UtilWaitThread.sleepUninterruptibly;\n+import static org.apache.accumulo.minicluster.ServerType.TABLET_SERVER;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.client.Accumulo;\n+import org.apache.accumulo.core.client.AccumuloClient;\n+import org.apache.accumulo.core.clientImpl.ClientContext;\n+import org.apache.accumulo.core.metadata.TServerInstance;\n+import org.apache.accumulo.core.metadata.schema.TabletMetadata;\n+import org.apache.accumulo.harness.MiniClusterConfigurationCallback;\n+import org.apache.accumulo.harness.SharedMiniClusterBase;\n+import org.apache.accumulo.miniclusterImpl.MiniAccumuloConfigImpl;\n+import org.apache.hadoop.conf.Configuration;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Tests features of the Ample TabletMetadata class that can't be tested in TabletMetadataTest\n+ */\n+public class TabletMetadataIT extends SharedMiniClusterBase {\n+  private static final Logger log = LoggerFactory.getLogger(TabletMetadataIT.class);\n+  private static final int NUM_TSERVERS = 4;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    SharedMiniClusterBase.startMiniClusterWithConfig(new Callback());\n+  }\n+\n+  @AfterClass\n+  public static void teardown() {\n+    SharedMiniClusterBase.stopMiniCluster();\n+  }\n+\n+  @Override\n+  protected int defaultTimeoutSeconds() {\n+    return 120;\n+  }\n+\n+  private static class Callback implements MiniClusterConfigurationCallback {\n+    @Override\n+    public void configureMiniCluster(MiniAccumuloConfigImpl cfg, Configuration conf) {\n+      cfg.setNumTservers(NUM_TSERVERS);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93f69b57af04ac53f21fcf5147bb876da7b7665b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjcwOTIwNQ==", "bodyText": "I don't know... despite having figured it out multiple times before, I still never know which IT to use... SharedMiniClusterBase, ConfigurableMacBase or AccumuloClusterHarness.  I just no not to use AccumuloITBase if you want a MiniCluster.", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r542709205", "createdAt": "2020-12-14T19:53:27Z", "author": {"login": "milleruntime"}, "path": "test/src/main/java/org/apache/accumulo/test/functional/TabletMetadataIT.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.test.functional;\n+\n+import static org.apache.accumulo.fate.util.UtilWaitThread.sleepUninterruptibly;\n+import static org.apache.accumulo.minicluster.ServerType.TABLET_SERVER;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.client.Accumulo;\n+import org.apache.accumulo.core.client.AccumuloClient;\n+import org.apache.accumulo.core.clientImpl.ClientContext;\n+import org.apache.accumulo.core.metadata.TServerInstance;\n+import org.apache.accumulo.core.metadata.schema.TabletMetadata;\n+import org.apache.accumulo.harness.MiniClusterConfigurationCallback;\n+import org.apache.accumulo.harness.SharedMiniClusterBase;\n+import org.apache.accumulo.miniclusterImpl.MiniAccumuloConfigImpl;\n+import org.apache.hadoop.conf.Configuration;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Tests features of the Ample TabletMetadata class that can't be tested in TabletMetadataTest\n+ */\n+public class TabletMetadataIT extends SharedMiniClusterBase {\n+  private static final Logger log = LoggerFactory.getLogger(TabletMetadataIT.class);\n+  private static final int NUM_TSERVERS = 4;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    SharedMiniClusterBase.startMiniClusterWithConfig(new Callback());\n+  }\n+\n+  @AfterClass\n+  public static void teardown() {\n+    SharedMiniClusterBase.stopMiniCluster();\n+  }\n+\n+  @Override\n+  protected int defaultTimeoutSeconds() {\n+    return 120;\n+  }\n+\n+  private static class Callback implements MiniClusterConfigurationCallback {\n+    @Override\n+    public void configureMiniCluster(MiniAccumuloConfigImpl cfg, Configuration conf) {\n+      cfg.setNumTservers(NUM_TSERVERS);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMTAyNA=="}, "originalCommit": {"oid": "93f69b57af04ac53f21fcf5147bb876da7b7665b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc2MjkwOQ==", "bodyText": "I always have to look at existing classes to see what they are doing, and then I look at the type-hierarchy just to be sure. I think ConfigurableMacBase is appropriate here.", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r542762909", "createdAt": "2020-12-14T20:44:20Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/functional/TabletMetadataIT.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.test.functional;\n+\n+import static org.apache.accumulo.fate.util.UtilWaitThread.sleepUninterruptibly;\n+import static org.apache.accumulo.minicluster.ServerType.TABLET_SERVER;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.client.Accumulo;\n+import org.apache.accumulo.core.client.AccumuloClient;\n+import org.apache.accumulo.core.clientImpl.ClientContext;\n+import org.apache.accumulo.core.metadata.TServerInstance;\n+import org.apache.accumulo.core.metadata.schema.TabletMetadata;\n+import org.apache.accumulo.harness.MiniClusterConfigurationCallback;\n+import org.apache.accumulo.harness.SharedMiniClusterBase;\n+import org.apache.accumulo.miniclusterImpl.MiniAccumuloConfigImpl;\n+import org.apache.hadoop.conf.Configuration;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Tests features of the Ample TabletMetadata class that can't be tested in TabletMetadataTest\n+ */\n+public class TabletMetadataIT extends SharedMiniClusterBase {\n+  private static final Logger log = LoggerFactory.getLogger(TabletMetadataIT.class);\n+  private static final int NUM_TSERVERS = 4;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    SharedMiniClusterBase.startMiniClusterWithConfig(new Callback());\n+  }\n+\n+  @AfterClass\n+  public static void teardown() {\n+    SharedMiniClusterBase.stopMiniCluster();\n+  }\n+\n+  @Override\n+  protected int defaultTimeoutSeconds() {\n+    return 120;\n+  }\n+\n+  private static class Callback implements MiniClusterConfigurationCallback {\n+    @Override\n+    public void configureMiniCluster(MiniAccumuloConfigImpl cfg, Configuration conf) {\n+      cfg.setNumTservers(NUM_TSERVERS);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMTAyNA=="}, "originalCommit": {"oid": "93f69b57af04ac53f21fcf5147bb876da7b7665b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3MTE5MA==", "bodyText": "This made me think there are some ITs that could save on some code and use ConfigurableMacBase as well.  I will do that as a follow on.", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r543571190", "createdAt": "2020-12-15T18:09:06Z", "author": {"login": "milleruntime"}, "path": "test/src/main/java/org/apache/accumulo/test/functional/TabletMetadataIT.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.test.functional;\n+\n+import static org.apache.accumulo.fate.util.UtilWaitThread.sleepUninterruptibly;\n+import static org.apache.accumulo.minicluster.ServerType.TABLET_SERVER;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.client.Accumulo;\n+import org.apache.accumulo.core.client.AccumuloClient;\n+import org.apache.accumulo.core.clientImpl.ClientContext;\n+import org.apache.accumulo.core.metadata.TServerInstance;\n+import org.apache.accumulo.core.metadata.schema.TabletMetadata;\n+import org.apache.accumulo.harness.MiniClusterConfigurationCallback;\n+import org.apache.accumulo.harness.SharedMiniClusterBase;\n+import org.apache.accumulo.miniclusterImpl.MiniAccumuloConfigImpl;\n+import org.apache.hadoop.conf.Configuration;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Tests features of the Ample TabletMetadata class that can't be tested in TabletMetadataTest\n+ */\n+public class TabletMetadataIT extends SharedMiniClusterBase {\n+  private static final Logger log = LoggerFactory.getLogger(TabletMetadataIT.class);\n+  private static final int NUM_TSERVERS = 4;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    SharedMiniClusterBase.startMiniClusterWithConfig(new Callback());\n+  }\n+\n+  @AfterClass\n+  public static void teardown() {\n+    SharedMiniClusterBase.stopMiniCluster();\n+  }\n+\n+  @Override\n+  protected int defaultTimeoutSeconds() {\n+    return 120;\n+  }\n+\n+  private static class Callback implements MiniClusterConfigurationCallback {\n+    @Override\n+    public void configureMiniCluster(MiniAccumuloConfigImpl cfg, Configuration conf) {\n+      cfg.setNumTservers(NUM_TSERVERS);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMTAyNA=="}, "originalCommit": {"oid": "93f69b57af04ac53f21fcf5147bb876da7b7665b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2MjEzNA==", "bodyText": "So in another branch, I modified BulkNewIT to use ConfigurableMacBase (it is currently using SharedMiniClusterBase) and the test went from being around 30 seconds long to over 4 minutes.  I am not sure of the drastic difference between the two base classes but it seemed odd to me.", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r551562134", "createdAt": "2021-01-04T20:52:32Z", "author": {"login": "milleruntime"}, "path": "test/src/main/java/org/apache/accumulo/test/functional/TabletMetadataIT.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.test.functional;\n+\n+import static org.apache.accumulo.fate.util.UtilWaitThread.sleepUninterruptibly;\n+import static org.apache.accumulo.minicluster.ServerType.TABLET_SERVER;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.client.Accumulo;\n+import org.apache.accumulo.core.client.AccumuloClient;\n+import org.apache.accumulo.core.clientImpl.ClientContext;\n+import org.apache.accumulo.core.metadata.TServerInstance;\n+import org.apache.accumulo.core.metadata.schema.TabletMetadata;\n+import org.apache.accumulo.harness.MiniClusterConfigurationCallback;\n+import org.apache.accumulo.harness.SharedMiniClusterBase;\n+import org.apache.accumulo.miniclusterImpl.MiniAccumuloConfigImpl;\n+import org.apache.hadoop.conf.Configuration;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Tests features of the Ample TabletMetadata class that can't be tested in TabletMetadataTest\n+ */\n+public class TabletMetadataIT extends SharedMiniClusterBase {\n+  private static final Logger log = LoggerFactory.getLogger(TabletMetadataIT.class);\n+  private static final int NUM_TSERVERS = 4;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    SharedMiniClusterBase.startMiniClusterWithConfig(new Callback());\n+  }\n+\n+  @AfterClass\n+  public static void teardown() {\n+    SharedMiniClusterBase.stopMiniCluster();\n+  }\n+\n+  @Override\n+  protected int defaultTimeoutSeconds() {\n+    return 120;\n+  }\n+\n+  private static class Callback implements MiniClusterConfigurationCallback {\n+    @Override\n+    public void configureMiniCluster(MiniAccumuloConfigImpl cfg, Configuration conf) {\n+      cfg.setNumTservers(NUM_TSERVERS);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMTAyNA=="}, "originalCommit": {"oid": "93f69b57af04ac53f21fcf5147bb876da7b7665b"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3999, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}