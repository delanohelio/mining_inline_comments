{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NzM1MjYx", "number": 1816, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowMTowOFrOE-y9YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTozNTowMlrOE-2chg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjgyMDgxOnYy", "diffSide": "RIGHT", "path": "server/base/src/test/java/org/apache/accumulo/server/util/time/SimpleTimerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowMTowOFrOH8JSvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowMTowOFrOH8JSvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyODg2Mw==", "bodyText": "This is the right strategy (albeit with a few extra parenthesis than necessary on that if statement \ud83d\ude09 )", "url": "https://github.com/apache/accumulo/pull/1816#discussion_r532828863", "createdAt": "2020-11-30T19:01:08Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/test/java/org/apache/accumulo/server/util/time/SimpleTimerTest.java", "diffHunk": "@@ -98,11 +97,15 @@ public void testFailure() throws InterruptedException {\n     assertTrue(r.wasRun);\n   }\n \n-  @Test\n-  public void testSingleton() {\n-    assertEquals(1, SimpleTimer.getInstanceThreadPoolSize());\n-    SimpleTimer t2 = SimpleTimer.getInstance(2);\n-    assertSame(t, t2);\n+  @Test(timeout = 5000)\n+  public void testSingleton() throws InterruptedException {\n+    while (true) {\n+      SimpleTimer t2 = SimpleTimer.getInstance(2);\n+      if((SimpleTimer.getInstanceThreadPoolSize() == 1) && (t == t2)) {\n+        break;\n+      }\n+      Thread.sleep(PAD);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd42721be45078e280da69275b8e6e391af0c301"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzM5MjA2OnYy", "diffSide": "RIGHT", "path": "server/base/src/test/java/org/apache/accumulo/server/util/time/SimpleTimerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTozNTowMlrOH8OwNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTozODoyMFrOH8O2wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxODMyNQ==", "bodyText": "Just realized that you can simplify this to while (i.get() != 1) { sleep }; you can do similar things for the other tests as well.", "url": "https://github.com/apache/accumulo/pull/1816#discussion_r532918325", "createdAt": "2020-11-30T21:35:02Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/test/java/org/apache/accumulo/server/util/time/SimpleTimerTest.java", "diffHunk": "@@ -70,35 +69,50 @@ public void run() {\n     }\n   }\n \n-  @Test\n+  @Test(timeout = 5000)\n   public void testOneTimeSchedule() throws InterruptedException {\n     AtomicInteger i = new AtomicInteger();\n     Incrementer r = new Incrementer(i);\n     t.schedule(r, DELAY);\n     Thread.sleep(DELAY + PAD);\n-    assertEquals(1, i.get());\n+    while (true) {\n+      if (i.get() == 1) {\n+        break;\n+      }\n+      Thread.sleep(PAD);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3460b860c0917138733b58748efd783a05bb6f7b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyMDAwMA==", "bodyText": "Was considering that as well. I will add this change.", "url": "https://github.com/apache/accumulo/pull/1816#discussion_r532920000", "createdAt": "2020-11-30T21:38:20Z", "author": {"login": "DomGarguilo"}, "path": "server/base/src/test/java/org/apache/accumulo/server/util/time/SimpleTimerTest.java", "diffHunk": "@@ -70,35 +69,50 @@ public void run() {\n     }\n   }\n \n-  @Test\n+  @Test(timeout = 5000)\n   public void testOneTimeSchedule() throws InterruptedException {\n     AtomicInteger i = new AtomicInteger();\n     Incrementer r = new Incrementer(i);\n     t.schedule(r, DELAY);\n     Thread.sleep(DELAY + PAD);\n-    assertEquals(1, i.get());\n+    while (true) {\n+      if (i.get() == 1) {\n+        break;\n+      }\n+      Thread.sleep(PAD);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxODMyNQ=="}, "originalCommit": {"oid": "3460b860c0917138733b58748efd783a05bb6f7b"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3989, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}