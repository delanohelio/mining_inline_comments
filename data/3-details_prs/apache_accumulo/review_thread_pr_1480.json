{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MTEwMDY5", "number": 1480, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNDo1NTo1NVrODaMxbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMzo0NzoxN1rODaWRCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Nzk4ODMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNDo1NTo1NVrOFhBHoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMjowM1rOFhlx2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2NTY2NA==", "bodyText": "Is there a specific reason for having a method for every message?  I think this class could be written differently so it is more generic and not all hard coded methods.  An enum comes to mind for something like LogType.  Or even something as simple as making the Loggers all public static so there is no need for a method for every different log message.  Then you could just call TabletLogger.locLog.debug(\"Assigned {} to {}\", extent, server);\nI have a feeling, these static methods were intentional for say, log message consistency so perhaps document that if the case.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370165664", "createdAt": "2020-01-23T14:55:55Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.accumulo.core.logging;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.dataImpl.KeyExtent;\n+import org.apache.accumulo.core.metadata.schema.Ample;\n+import org.apache.accumulo.core.tabletserver.log.LogEntry;\n+import org.apache.accumulo.core.util.HostAndPort;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// logs messages about a tablets internal state, like its location, set of files, metadata... operations that cut across multiple tablets should go elsewhere\n+public class TabletLogger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwMDg2NQ==", "bodyText": "The reason I did that was to bring the code into a single place so that user could see it.  This would also make it easy to diff the changes in log messages between releases of Accumulo.  Users use tools to parse log messages from Accumumulo, I am hoping this organization of the code will make that use case easier.  I can add package level javadoc explaining this.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370200865", "createdAt": "2020-01-23T15:51:50Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.accumulo.core.logging;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.dataImpl.KeyExtent;\n+import org.apache.accumulo.core.metadata.schema.Ample;\n+import org.apache.accumulo.core.tabletserver.log.LogEntry;\n+import org.apache.accumulo.core.util.HostAndPort;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// logs messages about a tablets internal state, like its location, set of files, metadata... operations that cut across multiple tablets should go elsewhere\n+public class TabletLogger {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2NTY2NA=="}, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjI5Nw==", "bodyText": "Attempted to clarify this in 2fea1a6", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370766297", "createdAt": "2020-01-24T18:02:03Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.accumulo.core.logging;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.dataImpl.KeyExtent;\n+import org.apache.accumulo.core.metadata.schema.Ample;\n+import org.apache.accumulo.core.tabletserver.log.LogEntry;\n+import org.apache.accumulo.core.util.HostAndPort;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// logs messages about a tablets internal state, like its location, set of files, metadata... operations that cut across multiple tablets should go elsewhere\n+public class TabletLogger {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2NTY2NA=="}, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Nzk5NTkzOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/master/state/LoggingTabletStateStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNDo1Nzo0OVrOFhBMXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDoyMzozNFrOFmLuMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2Njg3Nw==", "bodyText": "Should describe what this class is doing.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370166877", "createdAt": "2020-01-23T14:57:49Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/master/state/LoggingTabletStateStore.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.server.master.state;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.logging.TabletLogger;\n+import org.apache.hadoop.fs.Path;\n+\n+class LoggingTabletStateStore implements TabletStateStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4MjI1Ng==", "bodyText": "Documented in 46de4c6", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r375582256", "createdAt": "2020-02-06T00:23:34Z", "author": {"login": "keith-turner"}, "path": "server/base/src/main/java/org/apache/accumulo/server/master/state/LoggingTabletStateStore.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.server.master.state;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.logging.TabletLogger;\n+import org.apache.hadoop.fs.Path;\n+\n+class LoggingTabletStateStore implements TabletStateStore {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2Njg3Nw=="}, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODAxNjc1OnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/master/state/TabletStateStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTowMzowNVrOFhBZVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDozNDo0NFrOFmL51g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3MDE5Ng==", "bodyText": "All the public and abstract modifiers could be dropped now that this is an interface.  Also, should update the javadac or just simplify since it will be inaccurate... like move the descriptions to their appropriate class.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370170196", "createdAt": "2020-01-23T15:03:05Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/master/state/TabletStateStore.java", "diffHunk": "@@ -33,7 +35,7 @@\n  * ZooTabletStateStore: information about the root tablet is stored in ZooKeeper MetaDataStateStore:\n  * information about the other tablets are stored in the metadata table\n  */\n-public abstract class TabletStateStore implements Iterable<TabletLocationState> {\n+public interface TabletStateStore extends Iterable<TabletLocationState> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4NTIzOA==", "bodyText": "done in 6f568b4", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r375585238", "createdAt": "2020-02-06T00:34:44Z", "author": {"login": "keith-turner"}, "path": "server/base/src/main/java/org/apache/accumulo/server/master/state/TabletStateStore.java", "diffHunk": "@@ -33,7 +35,7 @@\n  * ZooTabletStateStore: information about the root tablet is stored in ZooKeeper MetaDataStateStore:\n  * information about the other tablets are stored in the metadata table\n  */\n-public abstract class TabletStateStore implements Iterable<TabletLocationState> {\n+public interface TabletStateStore extends Iterable<TabletLocationState> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3MDE5Ng=="}, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODA1NTIzOnYy", "diffSide": "RIGHT", "path": "server/master/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToxMjozMVrOFhBwKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToxMjozMVrOFhBwKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3NjA0MQ==", "bodyText": "This change will be great for consolidating or dropping stuff like this.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370176041", "createdAt": "2020-01-23T15:12:31Z", "author": {"login": "milleruntime"}, "path": "server/master/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java", "diffHunk": "@@ -99,8 +100,6 @@\n \n abstract class TabletGroupWatcher extends Daemon {\n   // Constants used to make sure assignment logging isn't excessive in quantity or size\n-  private static final String ASSIGNMENT_BUFFER_SEPARATOR = \", \";\n-  private static final int ASSIGNMENT_BUFFER_MAX_LENGTH = 4096;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODEyOTU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTozMDozN1rOFhCehg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMDoyNjo1M1rOFhQ5gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4NzkxMA==", "bodyText": "Might not need this method if you just do the check in the wal log method.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370187910", "createdAt": "2020-01-23T15:30:37Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.accumulo.core.logging;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.dataImpl.KeyExtent;\n+import org.apache.accumulo.core.metadata.schema.Ample;\n+import org.apache.accumulo.core.tabletserver.log.LogEntry;\n+import org.apache.accumulo.core.util.HostAndPort;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// logs messages about a tablets internal state, like its location, set of files, metadata... operations that cut across multiple tablets should go elsewhere\n+public class TabletLogger {\n+\n+  private static final String PREFIX = Logging.PREFIX + \"tablet.\";\n+\n+  private static final Logger locLog = LoggerFactory.getLogger(PREFIX + \"location\");\n+  private static final Logger fileLog = LoggerFactory.getLogger(PREFIX + \"files\");\n+  private static final Logger recoveryLog = LoggerFactory.getLogger(PREFIX + \"recovery\");\n+  private static final Logger walsLog = LoggerFactory.getLogger(PREFIX + \"wals\");\n+\n+  /**\n+   * A decision was made to assign a tablet to a tablet server process. Accumulo will stick to this\n+   * decision until the tablet server loads the tablet or dies.\n+   */\n+  public static void assigned(KeyExtent extent, Ample.TServer server) {\n+    locLog.debug(\"Assigned {} to {}\", extent, server);\n+  }\n+\n+  /**\n+   * A tablet server has received an assignment message from master and queued the tablet for\n+   * loading.\n+   */\n+  public static void loading(KeyExtent extent, Ample.TServer server) {\n+    locLog.debug(\"Loading {} on {}\", extent, server);\n+  }\n+\n+  public static void suspended(KeyExtent extent, HostAndPort server, long time, TimeUnit timeUnit,\n+      int numWalogs) {\n+    locLog.debug(\"Suspended {} to {} at {} ms with {} walogs\", extent, server,\n+        timeUnit.toMillis(time), numWalogs);\n+  }\n+\n+  public static void unsuspended(KeyExtent extent) {\n+    locLog.debug(\"Unsuspended \" + extent);\n+  }\n+\n+  public static void loaded(KeyExtent extent, Ample.TServer server) {\n+    locLog.debug(\"Loaded {} on {}\", extent, server);\n+  }\n+\n+  public static void unassigned(KeyExtent extent, int logCount) {\n+    locLog.debug(\"Unassigned {} with {} walogs\", extent, logCount);\n+  }\n+\n+  public static void split(KeyExtent parent, KeyExtent lowChild, KeyExtent highChild,\n+      Ample.TServer server) {\n+    locLog.debug(\"Split {} into {} and {} on {}\", parent, lowChild, highChild, server);\n+  }\n+\n+  /**\n+   * Called when a tablet's current assignment state does not match the goal state.\n+   */\n+  public static void missassigned(KeyExtent extent, String goalState, String currentState,\n+      Ample.TServer future, Ample.TServer current, int walogs) {\n+    // usually this is only called when the states are not equal, but for the root tablet this\n+    // method is currently always called\n+    if (!goalState.equals(currentState)) {\n+      locLog.trace(\"Miss-assigned {} goal:{} current:{} future:{} location:{} walogs:{}\", extent,\n+          goalState, currentState, future, current, walogs);\n+    }\n+  }\n+\n+  public static void compacted(KeyExtent extent, Collection<? extends Ample.FileMeta> inputs,\n+      Ample.FileMeta output) {\n+    fileLog.debug(\"Compacted {} created {} from {}\", extent, output, inputs);\n+  }\n+\n+  public static void flushed(KeyExtent extent, Ample.FileMeta absMergeFile,\n+      Ample.FileMeta newDatafile) {\n+    if (absMergeFile == null)\n+      fileLog.debug(\"Flushed {} created {} from [memory]\", extent, newDatafile);\n+    else\n+      fileLog.debug(\"Flushed {} created {} from [memory,{}]\", extent, newDatafile, absMergeFile);\n+  }\n+\n+  public static void bulkImported(KeyExtent extent, Ample.FileMeta file) {\n+    fileLog.debug(\"Imported {} {}  \", extent, file);\n+  }\n+\n+  public static void recovering(KeyExtent extent, List<LogEntry> logEntries) {\n+    if (recoveryLog.isDebugEnabled()) {\n+      List<String> logIds = logEntries.stream().map(LogEntry::getUniqueID).collect(toList());\n+      recoveryLog.debug(\"For {} recovering data from walogs: {}\", extent, logIds);\n+    }\n+  }\n+\n+  public static void recovered(KeyExtent extent, List<LogEntry> logEntries, long numMutation,\n+      long numEntries) {\n+    recoveryLog.info(\"For {} recovered {} mutations creating {} entries from {} walogs\", extent,\n+        numMutation, numEntries, logEntries.size());\n+  }\n+\n+  public static boolean isWalRefLoggingEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxMjg2OQ==", "bodyText": "That's certainly possible with just the one use of the method in this PR. If more complex checks were needed, you might still want to wrap the logger state check with a more descriptive/logical state check, so you don't have to leak the logger outside this class.\nIf such a check were necessary in other, more complex cases than what is in this PR, you might be able to do something with a lambda to avoid unnecessary work if trace logging is disabled.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370412869", "createdAt": "2020-01-23T23:43:11Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.accumulo.core.logging;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.dataImpl.KeyExtent;\n+import org.apache.accumulo.core.metadata.schema.Ample;\n+import org.apache.accumulo.core.tabletserver.log.LogEntry;\n+import org.apache.accumulo.core.util.HostAndPort;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// logs messages about a tablets internal state, like its location, set of files, metadata... operations that cut across multiple tablets should go elsewhere\n+public class TabletLogger {\n+\n+  private static final String PREFIX = Logging.PREFIX + \"tablet.\";\n+\n+  private static final Logger locLog = LoggerFactory.getLogger(PREFIX + \"location\");\n+  private static final Logger fileLog = LoggerFactory.getLogger(PREFIX + \"files\");\n+  private static final Logger recoveryLog = LoggerFactory.getLogger(PREFIX + \"recovery\");\n+  private static final Logger walsLog = LoggerFactory.getLogger(PREFIX + \"wals\");\n+\n+  /**\n+   * A decision was made to assign a tablet to a tablet server process. Accumulo will stick to this\n+   * decision until the tablet server loads the tablet or dies.\n+   */\n+  public static void assigned(KeyExtent extent, Ample.TServer server) {\n+    locLog.debug(\"Assigned {} to {}\", extent, server);\n+  }\n+\n+  /**\n+   * A tablet server has received an assignment message from master and queued the tablet for\n+   * loading.\n+   */\n+  public static void loading(KeyExtent extent, Ample.TServer server) {\n+    locLog.debug(\"Loading {} on {}\", extent, server);\n+  }\n+\n+  public static void suspended(KeyExtent extent, HostAndPort server, long time, TimeUnit timeUnit,\n+      int numWalogs) {\n+    locLog.debug(\"Suspended {} to {} at {} ms with {} walogs\", extent, server,\n+        timeUnit.toMillis(time), numWalogs);\n+  }\n+\n+  public static void unsuspended(KeyExtent extent) {\n+    locLog.debug(\"Unsuspended \" + extent);\n+  }\n+\n+  public static void loaded(KeyExtent extent, Ample.TServer server) {\n+    locLog.debug(\"Loaded {} on {}\", extent, server);\n+  }\n+\n+  public static void unassigned(KeyExtent extent, int logCount) {\n+    locLog.debug(\"Unassigned {} with {} walogs\", extent, logCount);\n+  }\n+\n+  public static void split(KeyExtent parent, KeyExtent lowChild, KeyExtent highChild,\n+      Ample.TServer server) {\n+    locLog.debug(\"Split {} into {} and {} on {}\", parent, lowChild, highChild, server);\n+  }\n+\n+  /**\n+   * Called when a tablet's current assignment state does not match the goal state.\n+   */\n+  public static void missassigned(KeyExtent extent, String goalState, String currentState,\n+      Ample.TServer future, Ample.TServer current, int walogs) {\n+    // usually this is only called when the states are not equal, but for the root tablet this\n+    // method is currently always called\n+    if (!goalState.equals(currentState)) {\n+      locLog.trace(\"Miss-assigned {} goal:{} current:{} future:{} location:{} walogs:{}\", extent,\n+          goalState, currentState, future, current, walogs);\n+    }\n+  }\n+\n+  public static void compacted(KeyExtent extent, Collection<? extends Ample.FileMeta> inputs,\n+      Ample.FileMeta output) {\n+    fileLog.debug(\"Compacted {} created {} from {}\", extent, output, inputs);\n+  }\n+\n+  public static void flushed(KeyExtent extent, Ample.FileMeta absMergeFile,\n+      Ample.FileMeta newDatafile) {\n+    if (absMergeFile == null)\n+      fileLog.debug(\"Flushed {} created {} from [memory]\", extent, newDatafile);\n+    else\n+      fileLog.debug(\"Flushed {} created {} from [memory,{}]\", extent, newDatafile, absMergeFile);\n+  }\n+\n+  public static void bulkImported(KeyExtent extent, Ample.FileMeta file) {\n+    fileLog.debug(\"Imported {} {}  \", extent, file);\n+  }\n+\n+  public static void recovering(KeyExtent extent, List<LogEntry> logEntries) {\n+    if (recoveryLog.isDebugEnabled()) {\n+      List<String> logIds = logEntries.stream().map(LogEntry::getUniqueID).collect(toList());\n+      recoveryLog.debug(\"For {} recovering data from walogs: {}\", extent, logIds);\n+    }\n+  }\n+\n+  public static void recovered(KeyExtent extent, List<LogEntry> logEntries, long numMutation,\n+      long numEntries) {\n+    recoveryLog.info(\"For {} recovered {} mutations creating {} entries from {} walogs\", extent,\n+        numMutation, numEntries, logEntries.size());\n+  }\n+\n+  public static boolean isWalRefLoggingEnabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4NzkxMA=="}, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyNDE5NA==", "bodyText": "I was trying to avoid an expensive computation if tracing was disabled.  I did try using a lambda, but it made the code more complex.  I went with this because I thought it was easier to read.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370424194", "createdAt": "2020-01-24T00:26:53Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.accumulo.core.logging;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.dataImpl.KeyExtent;\n+import org.apache.accumulo.core.metadata.schema.Ample;\n+import org.apache.accumulo.core.tabletserver.log.LogEntry;\n+import org.apache.accumulo.core.util.HostAndPort;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// logs messages about a tablets internal state, like its location, set of files, metadata... operations that cut across multiple tablets should go elsewhere\n+public class TabletLogger {\n+\n+  private static final String PREFIX = Logging.PREFIX + \"tablet.\";\n+\n+  private static final Logger locLog = LoggerFactory.getLogger(PREFIX + \"location\");\n+  private static final Logger fileLog = LoggerFactory.getLogger(PREFIX + \"files\");\n+  private static final Logger recoveryLog = LoggerFactory.getLogger(PREFIX + \"recovery\");\n+  private static final Logger walsLog = LoggerFactory.getLogger(PREFIX + \"wals\");\n+\n+  /**\n+   * A decision was made to assign a tablet to a tablet server process. Accumulo will stick to this\n+   * decision until the tablet server loads the tablet or dies.\n+   */\n+  public static void assigned(KeyExtent extent, Ample.TServer server) {\n+    locLog.debug(\"Assigned {} to {}\", extent, server);\n+  }\n+\n+  /**\n+   * A tablet server has received an assignment message from master and queued the tablet for\n+   * loading.\n+   */\n+  public static void loading(KeyExtent extent, Ample.TServer server) {\n+    locLog.debug(\"Loading {} on {}\", extent, server);\n+  }\n+\n+  public static void suspended(KeyExtent extent, HostAndPort server, long time, TimeUnit timeUnit,\n+      int numWalogs) {\n+    locLog.debug(\"Suspended {} to {} at {} ms with {} walogs\", extent, server,\n+        timeUnit.toMillis(time), numWalogs);\n+  }\n+\n+  public static void unsuspended(KeyExtent extent) {\n+    locLog.debug(\"Unsuspended \" + extent);\n+  }\n+\n+  public static void loaded(KeyExtent extent, Ample.TServer server) {\n+    locLog.debug(\"Loaded {} on {}\", extent, server);\n+  }\n+\n+  public static void unassigned(KeyExtent extent, int logCount) {\n+    locLog.debug(\"Unassigned {} with {} walogs\", extent, logCount);\n+  }\n+\n+  public static void split(KeyExtent parent, KeyExtent lowChild, KeyExtent highChild,\n+      Ample.TServer server) {\n+    locLog.debug(\"Split {} into {} and {} on {}\", parent, lowChild, highChild, server);\n+  }\n+\n+  /**\n+   * Called when a tablet's current assignment state does not match the goal state.\n+   */\n+  public static void missassigned(KeyExtent extent, String goalState, String currentState,\n+      Ample.TServer future, Ample.TServer current, int walogs) {\n+    // usually this is only called when the states are not equal, but for the root tablet this\n+    // method is currently always called\n+    if (!goalState.equals(currentState)) {\n+      locLog.trace(\"Miss-assigned {} goal:{} current:{} future:{} location:{} walogs:{}\", extent,\n+          goalState, currentState, future, current, walogs);\n+    }\n+  }\n+\n+  public static void compacted(KeyExtent extent, Collection<? extends Ample.FileMeta> inputs,\n+      Ample.FileMeta output) {\n+    fileLog.debug(\"Compacted {} created {} from {}\", extent, output, inputs);\n+  }\n+\n+  public static void flushed(KeyExtent extent, Ample.FileMeta absMergeFile,\n+      Ample.FileMeta newDatafile) {\n+    if (absMergeFile == null)\n+      fileLog.debug(\"Flushed {} created {} from [memory]\", extent, newDatafile);\n+    else\n+      fileLog.debug(\"Flushed {} created {} from [memory,{}]\", extent, newDatafile, absMergeFile);\n+  }\n+\n+  public static void bulkImported(KeyExtent extent, Ample.FileMeta file) {\n+    fileLog.debug(\"Imported {} {}  \", extent, file);\n+  }\n+\n+  public static void recovering(KeyExtent extent, List<LogEntry> logEntries) {\n+    if (recoveryLog.isDebugEnabled()) {\n+      List<String> logIds = logEntries.stream().map(LogEntry::getUniqueID).collect(toList());\n+      recoveryLog.debug(\"For {} recovering data from walogs: {}\", extent, logIds);\n+    }\n+  }\n+\n+  public static void recovered(KeyExtent extent, List<LogEntry> logEntries, long numMutation,\n+      long numEntries) {\n+    recoveryLog.info(\"For {} recovered {} mutations creating {} entries from {} walogs\", extent,\n+        numMutation, numEntries, logEntries.size());\n+  }\n+\n+  public static boolean isWalRefLoggingEnabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4NzkxMA=="}, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTIxMjU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/logging/Logging.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMToyMzowOVrOFhNEmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMzoyMzo1NlrOFhP32A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2MTQ5OA==", "bodyText": "\"logs\" here is either redundant (if it refers to the fact that this is a log message), or ambiguous (if it refers to WAL or some other kind of logging).\nIs the intent to have this used for specific kinds of logs, or replace all Accumulo logging? If it is the former, the name might need to be more specific to reflect the category of logs it represents.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370361498", "createdAt": "2020-01-23T21:23:09Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/Logging.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.accumulo.core.logging;\n+\n+public class Logging {\n+  public static final String PREFIX = \"org.apache.accumulo.logs.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM3NzkzMA==", "bodyText": "My goal is to apply a logical structure to logging namespace based on function that cross cuts lots of code, allowing easily adjusting log levels based on function by users.  Also, centralizing important log messages in the source code makes it easier for user interested in automatic parsing of log messages to track changes. I don't think all logs would go here.\nFor the name, I was thinking org.apache.accumulo.logs. would be the prefix for everything in this logical logging namespace.  Under it would have things like org.apache.accumulo.logs.fate, org.apache.accumulo.logs.metadata, org.apache.accumulo.logs.tablet, etc.\nAt first I tried using something like accumulo.tablet for the logical namepsace, but I found this annoying when I tried to turn on debug logging for Accumulo because I had to set two things in the log4j config (log4j.logger.org.apache.accumulo=DEBUG and log4j.logger.accumulo=DEBUG).  Based on this I decided it would be nice to share the prefix org.apache.accumulo  with class loggers, but then add something that is different than all existing packages.  Any suggestions for the namespace prefix would be appreciated.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370377930", "createdAt": "2020-01-23T22:00:51Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/Logging.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.accumulo.core.logging;\n+\n+public class Logging {\n+  public static final String PREFIX = \"org.apache.accumulo.logs.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2MTQ5OA=="}, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQwNzM4NA==", "bodyText": "I like the idea of logical logging, but I don't think we need a global prefix for it to separate it from code-based logging with a separate namespace. It's probably better to just remove the .logs part of the prefix. Over time, more logging should be logical and less code-based, so the question is moot in the long term (because org.apache.accumulo will eventually be the top-level logical logging prefix), and unless there's a conflict, it's not really an issue in the short-term. Using just org.apache.accumulo as the prefix aligns with the current practice of using org.apache.accumulo.audit as the logical logging prefix for auditing.\nI'm fine with sticking to the fully-qualified org.apache.accumulo prefix rather than the more abbreviated accumulo one.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370407384", "createdAt": "2020-01-23T23:23:56Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/Logging.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.accumulo.core.logging;\n+\n+public class Logging {\n+  public static final String PREFIX = \"org.apache.accumulo.logs.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2MTQ5OA=="}, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTUwNzY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMzoyNzoxNlrOFhP73w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDozNjowN1rOFmL7Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQwODQxNQ==", "bodyText": "You went with explicit names, rather than brevity (location instead of loc), for all of these except wals. It'd might be good to try to be consistent here by selecting a more explicit name, like writeaheadlogs or compromise with walogs.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370408415", "createdAt": "2020-01-23T23:27:16Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.accumulo.core.logging;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.dataImpl.KeyExtent;\n+import org.apache.accumulo.core.metadata.schema.Ample;\n+import org.apache.accumulo.core.tabletserver.log.LogEntry;\n+import org.apache.accumulo.core.util.HostAndPort;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// logs messages about a tablets internal state, like its location, set of files, metadata... operations that cut across multiple tablets should go elsewhere\n+public class TabletLogger {\n+\n+  private static final String PREFIX = Logging.PREFIX + \"tablet.\";\n+\n+  private static final Logger locLog = LoggerFactory.getLogger(PREFIX + \"location\");\n+  private static final Logger fileLog = LoggerFactory.getLogger(PREFIX + \"files\");\n+  private static final Logger recoveryLog = LoggerFactory.getLogger(PREFIX + \"recovery\");\n+  private static final Logger walsLog = LoggerFactory.getLogger(PREFIX + \"wals\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4NTU5NQ==", "bodyText": "Done in 2fea1a6", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r375585595", "createdAt": "2020-02-06T00:36:07Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.accumulo.core.logging;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.dataImpl.KeyExtent;\n+import org.apache.accumulo.core.metadata.schema.Ample;\n+import org.apache.accumulo.core.tabletserver.log.LogEntry;\n+import org.apache.accumulo.core.util.HostAndPort;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// logs messages about a tablets internal state, like its location, set of files, metadata... operations that cut across multiple tablets should go elsewhere\n+public class TabletLogger {\n+\n+  private static final String PREFIX = Logging.PREFIX + \"tablet.\";\n+\n+  private static final Logger locLog = LoggerFactory.getLogger(PREFIX + \"location\");\n+  private static final Logger fileLog = LoggerFactory.getLogger(PREFIX + \"files\");\n+  private static final Logger recoveryLog = LoggerFactory.getLogger(PREFIX + \"recovery\");\n+  private static final Logger walsLog = LoggerFactory.getLogger(PREFIX + \"wals\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQwODQxNQ=="}, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTUwOTAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMzoyODowMlrOFhP8rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzoxNToyMVrOFhs34w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQwODYyMQ==", "bodyText": "For all those messages with a KeyExtent, it might be good to put the KeyExtent in the same position in each message, in a more structured way, so it's easier to parse out by log analyzers.\nFor example, any of these:\nlocLog.debug(\"Assigned tablet to server; server={}, tablet={}\", server, extent); // description with named params\nlocLog.debug(\"action=assignment; server={}, tablet={}\", server, extent); // all named params\nlocLog.debug(\"{} assigned to server {}\", extent, server); // KeyExtent always first strategy\nlocLog.debug(\"Tablet({}) assigned to server {}\", extent, server); // KeyExtent always first strategy, with descriptive structure", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370408621", "createdAt": "2020-01-23T23:28:02Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.accumulo.core.logging;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.dataImpl.KeyExtent;\n+import org.apache.accumulo.core.metadata.schema.Ample;\n+import org.apache.accumulo.core.tabletserver.log.LogEntry;\n+import org.apache.accumulo.core.util.HostAndPort;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// logs messages about a tablets internal state, like its location, set of files, metadata... operations that cut across multiple tablets should go elsewhere\n+public class TabletLogger {\n+\n+  private static final String PREFIX = Logging.PREFIX + \"tablet.\";\n+\n+  private static final Logger locLog = LoggerFactory.getLogger(PREFIX + \"location\");\n+  private static final Logger fileLog = LoggerFactory.getLogger(PREFIX + \"files\");\n+  private static final Logger recoveryLog = LoggerFactory.getLogger(PREFIX + \"recovery\");\n+  private static final Logger walsLog = LoggerFactory.getLogger(PREFIX + \"wals\");\n+\n+  /**\n+   * A decision was made to assign a tablet to a tablet server process. Accumulo will stick to this\n+   * decision until the tablet server loads the tablet or dies.\n+   */\n+  public static void assigned(KeyExtent extent, Ample.TServer server) {\n+    locLog.debug(\"Assigned {} to {}\", extent, server);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyNzkyMA==", "bodyText": "I would like to experiment with creating grok patterns to parse these messages and use that experience to refine the messages.  Not sure I will get around to that.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370427920", "createdAt": "2020-01-24T00:42:32Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.accumulo.core.logging;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.dataImpl.KeyExtent;\n+import org.apache.accumulo.core.metadata.schema.Ample;\n+import org.apache.accumulo.core.tabletserver.log.LogEntry;\n+import org.apache.accumulo.core.util.HostAndPort;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// logs messages about a tablets internal state, like its location, set of files, metadata... operations that cut across multiple tablets should go elsewhere\n+public class TabletLogger {\n+\n+  private static final String PREFIX = Logging.PREFIX + \"tablet.\";\n+\n+  private static final Logger locLog = LoggerFactory.getLogger(PREFIX + \"location\");\n+  private static final Logger fileLog = LoggerFactory.getLogger(PREFIX + \"files\");\n+  private static final Logger recoveryLog = LoggerFactory.getLogger(PREFIX + \"recovery\");\n+  private static final Logger walsLog = LoggerFactory.getLogger(PREFIX + \"wals\");\n+\n+  /**\n+   * A decision was made to assign a tablet to a tablet server process. Accumulo will stick to this\n+   * decision until the tablet server loads the tablet or dies.\n+   */\n+  public static void assigned(KeyExtent extent, Ample.TServer server) {\n+    locLog.debug(\"Assigned {} to {}\", extent, server);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQwODYyMQ=="}, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MjUzMQ==", "bodyText": "If the messages are relatively easily parseable with something like LogStash grok patterns, I think it's fine to keep the messages more human-readable. As long as thought is put in to avoid making them too difficult to parse with automation, I'm fine with whatever messages you use.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370882531", "createdAt": "2020-01-24T23:15:21Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/logging/TabletLogger.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.accumulo.core.logging;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.dataImpl.KeyExtent;\n+import org.apache.accumulo.core.metadata.schema.Ample;\n+import org.apache.accumulo.core.tabletserver.log.LogEntry;\n+import org.apache.accumulo.core.util.HostAndPort;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// logs messages about a tablets internal state, like its location, set of files, metadata... operations that cut across multiple tablets should go elsewhere\n+public class TabletLogger {\n+\n+  private static final String PREFIX = Logging.PREFIX + \"tablet.\";\n+\n+  private static final Logger locLog = LoggerFactory.getLogger(PREFIX + \"location\");\n+  private static final Logger fileLog = LoggerFactory.getLogger(PREFIX + \"files\");\n+  private static final Logger recoveryLog = LoggerFactory.getLogger(PREFIX + \"recovery\");\n+  private static final Logger walsLog = LoggerFactory.getLogger(PREFIX + \"wals\");\n+\n+  /**\n+   * A decision was made to assign a tablet to a tablet server process. Accumulo will stick to this\n+   * decision until the tablet server loads the tablet or dies.\n+   */\n+  public static void assigned(KeyExtent extent, Ample.TServer server) {\n+    locLog.debug(\"Assigned {} to {}\", extent, server);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQwODYyMQ=="}, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTU0Mzc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/Ample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMzo0NzoxN1rOFhQRbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMzo0NzoxN1rOFhQRbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxMzkzNA==", "bodyText": "This change makes Ample look even more like it's precurser, MetadataServicer. Ample.of(...) is precisely analogous to MetadataServicer.forTableId(...). \ud83d\ude3a\nOne item on my personal wish list (if I ever get time) is to combine these, taking the best of each, and putting them into one.", "url": "https://github.com/apache/accumulo/pull/1480#discussion_r370413934", "createdAt": "2020-01-23T23:47:17Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/Ample.java", "diffHunk": "@@ -95,6 +95,16 @@ public TableId tableId() {\n         throw new UnsupportedOperationException();\n       return id;\n     }\n+\n+    public static DataLevel of(TableId tableId) {\n+      if (tableId.equals(RootTable.ID)) {\n+        return DataLevel.ROOT;\n+      } else if (tableId.equals(MetadataTable.ID)) {\n+        return DataLevel.METADATA;\n+      } else {\n+        return DataLevel.USER;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290e6fe8992ced471d98b19ac8a1002c05f98bef"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4306, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}