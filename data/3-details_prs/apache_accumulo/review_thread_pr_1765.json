{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MjQwODY0", "number": 1765, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMDozNToyNlrOE0nXvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOToxNjowNVrOE6LZTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjA2NDYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/client/ScannerBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMDozNToyNlrOHscS6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMDozNToyNlrOHscS6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM2Mjk4Ng==", "bodyText": "Needs a @since 2.1.0 javadoc tag.", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r516362986", "createdAt": "2020-11-03T00:35:26Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/client/ScannerBase.java", "diffHunk": "@@ -356,4 +357,10 @@ default void fetchColumn(CharSequence colFam, CharSequence colQual) {\n   default void setExecutionHints(Map<String,String> hints) {\n     throw new UnsupportedOperationException();\n   }\n+\n+  default void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b60b8cb384c3cae7d3b5af9c5ecf9c1411d3225"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDMyMjk1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjozNDozNVrOHwlKCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjozNDozNVrOHwlKCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwMjQ3Mg==", "bodyText": "You don't need to compare CF and CQ, you can compare Key equality directly. That will shorten the test code a bit. You also don't need to call toString() on anything.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Map.Entry<Key,Value> expectedEntry = s.iterator().next();\n          \n          \n            \n                  Key expectedKey = expectedEntry.getKey();\n          \n          \n            \n                  Value expectedValue = expectedEntry.getValue();\n          \n          \n            \n            \n          \n          \n            \n                  String expectedCf = expectedKey.getColumnFamily().toString();\n          \n          \n            \n                  String actualCf = entry.getKey().getColumnFamily().toString();\n          \n          \n            \n            \n          \n          \n            \n                  String expectedCq = expectedKey.getColumnQualifier().toString();\n          \n          \n            \n                  String actualCq = entry.getKey().getColumnQualifier().toString();\n          \n          \n            \n            \n          \n          \n            \n                  String expectedVal = expectedValue.toString();\n          \n          \n            \n                  String actualVal = entry.getValue().toString();\n          \n          \n            \n            \n          \n          \n            \n                  assertEquals(expectedCf, actualCf);\n          \n          \n            \n                  assertEquals(expectedCq, actualCq);\n          \n          \n            \n                  assertEquals(expectedVal, actualVal);\n          \n          \n            \n                  Map.Entry<Key,Value> expectedEntry = s.iterator().next();\n          \n          \n            \n                  assertEquals(expectedEntry.getKey(), entry.getKey());\n          \n          \n            \n                  assertEquals(expectedEntry.getValue(), entry.getValue());", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520702472", "createdAt": "2020-11-10T16:34:35Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private ScannerBase s;\n+  private Map<Key,Value> scannerMap;\n+  private Iterator<Map.Entry<Key,Value>> it;\n+  private Key key;\n+  private Value val;\n+  private BiConsumer<Key,Value> keyValueConsumer;\n+  private forEachTester fet;\n+\n+  private static class forEachTester {\n+\n+    private Map<Key,Value> map;\n+\n+    forEachTester(Map<Key,Value> map) {\n+      this.map = map;\n+    }\n+\n+    public void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {\n+      for (Map.Entry<Key,Value> entry : this.map.entrySet()) {\n+        keyValueConsumer.accept(entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    s = createMock(ScannerBase.class);\n+  }\n+\n+  @Test\n+  public void testScannerBaseForEach() throws Exception {\n+    key = new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\"));\n+    val = new Value(new Text(\"v1\"));\n+    scannerMap = new HashMap<>();\n+\n+    scannerMap.put(key, val);\n+\n+    fet = new forEachTester(scannerMap);\n+\n+    it = scannerMap.entrySet().iterator();\n+\n+    expect(s.iterator()).andReturn(it).times(3);\n+    replay(s);\n+\n+    Map<Key,Value> map = new HashMap<>();\n+\n+    class MyBiConsumer implements BiConsumer<Key,Value> {\n+      @Override\n+      public void accept(Key key, Value value) {\n+        map.put(key, value);\n+      }\n+    }\n+\n+    keyValueConsumer = new MyBiConsumer();\n+\n+    fet.forEach(keyValueConsumer);\n+\n+    // Test the Scanner values put into the map via keyValueConsumer\n+\n+    for (Map.Entry<Key,Value> entry : map.entrySet()) {\n+      Map.Entry<Key,Value> expectedEntry = s.iterator().next();\n+      Key expectedKey = expectedEntry.getKey();\n+      Value expectedValue = expectedEntry.getValue();\n+\n+      String expectedCf = expectedKey.getColumnFamily().toString();\n+      String actualCf = entry.getKey().getColumnFamily().toString();\n+\n+      String expectedCq = expectedKey.getColumnQualifier().toString();\n+      String actualCq = entry.getKey().getColumnQualifier().toString();\n+\n+      String expectedVal = expectedValue.toString();\n+      String actualVal = entry.getValue().toString();\n+\n+      assertEquals(expectedCf, actualCf);\n+      assertEquals(expectedCq, actualCq);\n+      assertEquals(expectedVal, actualVal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7d7007e483fe6ff528b55271fbdb566bca22c3"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDMzMjg5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjozNjozNlrOHwlQDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjozNjozNlrOHwlQDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwNDAxNA==", "bodyText": "I don't think most (if any) of these should be class members. They can be local variables in the test case.", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520704014", "createdAt": "2020-11-10T16:36:36Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private ScannerBase s;\n+  private Map<Key,Value> scannerMap;\n+  private Iterator<Map.Entry<Key,Value>> it;\n+  private Key key;\n+  private Value val;\n+  private BiConsumer<Key,Value> keyValueConsumer;\n+  private forEachTester fet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7d7007e483fe6ff528b55271fbdb566bca22c3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDM0MTg3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjozODozOFrOHwlVrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjozODozOFrOHwlVrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwNTQ1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Map<Key,Value> map = new HashMap<>();\n          \n          \n            \n            \n          \n          \n            \n                class MyBiConsumer implements BiConsumer<Key,Value> {\n          \n          \n            \n                  @Override\n          \n          \n            \n                  public void accept(Key key, Value value) {\n          \n          \n            \n                    map.put(key, value);\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                keyValueConsumer = new MyBiConsumer();\n          \n          \n            \n            \n          \n          \n            \n                fet.forEach(keyValueConsumer);\n          \n          \n            \n                Map<Key,Value> map = new HashMap<>();\n          \n          \n            \n                fet.forEach((k,v) -> map.put(k,v));", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520705452", "createdAt": "2020-11-10T16:38:38Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private ScannerBase s;\n+  private Map<Key,Value> scannerMap;\n+  private Iterator<Map.Entry<Key,Value>> it;\n+  private Key key;\n+  private Value val;\n+  private BiConsumer<Key,Value> keyValueConsumer;\n+  private forEachTester fet;\n+\n+  private static class forEachTester {\n+\n+    private Map<Key,Value> map;\n+\n+    forEachTester(Map<Key,Value> map) {\n+      this.map = map;\n+    }\n+\n+    public void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {\n+      for (Map.Entry<Key,Value> entry : this.map.entrySet()) {\n+        keyValueConsumer.accept(entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    s = createMock(ScannerBase.class);\n+  }\n+\n+  @Test\n+  public void testScannerBaseForEach() throws Exception {\n+    key = new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\"));\n+    val = new Value(new Text(\"v1\"));\n+    scannerMap = new HashMap<>();\n+\n+    scannerMap.put(key, val);\n+\n+    fet = new forEachTester(scannerMap);\n+\n+    it = scannerMap.entrySet().iterator();\n+\n+    expect(s.iterator()).andReturn(it).times(3);\n+    replay(s);\n+\n+    Map<Key,Value> map = new HashMap<>();\n+\n+    class MyBiConsumer implements BiConsumer<Key,Value> {\n+      @Override\n+      public void accept(Key key, Value value) {\n+        map.put(key, value);\n+      }\n+    }\n+\n+    keyValueConsumer = new MyBiConsumer();\n+\n+    fet.forEach(keyValueConsumer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7d7007e483fe6ff528b55271fbdb566bca22c3"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDM0MzUxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjozOTowM1rOHwlWuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjozOTowM1rOHwlWuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwNTcyMQ==", "bodyText": "Should verify mock objects at the end of the test.", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520705721", "createdAt": "2020-11-10T16:39:03Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private ScannerBase s;\n+  private Map<Key,Value> scannerMap;\n+  private Iterator<Map.Entry<Key,Value>> it;\n+  private Key key;\n+  private Value val;\n+  private BiConsumer<Key,Value> keyValueConsumer;\n+  private forEachTester fet;\n+\n+  private static class forEachTester {\n+\n+    private Map<Key,Value> map;\n+\n+    forEachTester(Map<Key,Value> map) {\n+      this.map = map;\n+    }\n+\n+    public void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {\n+      for (Map.Entry<Key,Value> entry : this.map.entrySet()) {\n+        keyValueConsumer.accept(entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    s = createMock(ScannerBase.class);\n+  }\n+\n+  @Test\n+  public void testScannerBaseForEach() throws Exception {\n+    key = new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\"));\n+    val = new Value(new Text(\"v1\"));\n+    scannerMap = new HashMap<>();\n+\n+    scannerMap.put(key, val);\n+\n+    fet = new forEachTester(scannerMap);\n+\n+    it = scannerMap.entrySet().iterator();\n+\n+    expect(s.iterator()).andReturn(it).times(3);\n+    replay(s);\n+\n+    Map<Key,Value> map = new HashMap<>();\n+\n+    class MyBiConsumer implements BiConsumer<Key,Value> {\n+      @Override\n+      public void accept(Key key, Value value) {\n+        map.put(key, value);\n+      }\n+    }\n+\n+    keyValueConsumer = new MyBiConsumer();\n+\n+    fet.forEach(keyValueConsumer);\n+\n+    // Test the Scanner values put into the map via keyValueConsumer\n+\n+    for (Map.Entry<Key,Value> entry : map.entrySet()) {\n+      Map.Entry<Key,Value> expectedEntry = s.iterator().next();\n+      Key expectedKey = expectedEntry.getKey();\n+      Value expectedValue = expectedEntry.getValue();\n+\n+      String expectedCf = expectedKey.getColumnFamily().toString();\n+      String actualCf = entry.getKey().getColumnFamily().toString();\n+\n+      String expectedCq = expectedKey.getColumnQualifier().toString();\n+      String actualCq = entry.getKey().getColumnQualifier().toString();\n+\n+      String expectedVal = expectedValue.toString();\n+      String actualVal = entry.getValue().toString();\n+\n+      assertEquals(expectedCf, actualCf);\n+      assertEquals(expectedCq, actualCq);\n+      assertEquals(expectedVal, actualVal);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7d7007e483fe6ff528b55271fbdb566bca22c3"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDM0NjA0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjozOTozNFrOHwlYSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjozOTozNFrOHwlYSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwNjEyMA==", "bodyText": "This can be done in the test. It doesn't need to be here, unless it's common code for multiple tests.", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520706120", "createdAt": "2020-11-10T16:39:34Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private ScannerBase s;\n+  private Map<Key,Value> scannerMap;\n+  private Iterator<Map.Entry<Key,Value>> it;\n+  private Key key;\n+  private Value val;\n+  private BiConsumer<Key,Value> keyValueConsumer;\n+  private forEachTester fet;\n+\n+  private static class forEachTester {\n+\n+    private Map<Key,Value> map;\n+\n+    forEachTester(Map<Key,Value> map) {\n+      this.map = map;\n+    }\n+\n+    public void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {\n+      for (Map.Entry<Key,Value> entry : this.map.entrySet()) {\n+        keyValueConsumer.accept(entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    s = createMock(ScannerBase.class);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7d7007e483fe6ff528b55271fbdb566bca22c3"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTM3MDA3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDo1NzoxN1rOHwvU-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTowODoxNlrOHwvqvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2OTExMg==", "bodyText": "Didn't notice this before, but Java class names should start uppercase.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static class forEachTester {\n          \n          \n            \n              private static class ForEachTester {", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520869112", "createdAt": "2020-11-10T20:57:17Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private static class forEachTester {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126c53fb1168faa72a1587bf2682663a3b10b12c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3NDY4Nw==", "bodyText": "Later comment makes this suggestion unnecessary. The class isn't needed at all.", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520874687", "createdAt": "2020-11-10T21:08:16Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private static class forEachTester {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2OTExMg=="}, "originalCommit": {"oid": "126c53fb1168faa72a1587bf2682663a3b10b12c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTM4NTQzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTowMjowNFrOHwve1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTowMjowNFrOHwve1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3MTYzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ScannerBase s;\n          \n          \n            \n                Map<Key,Value> scannerMap;\n          \n          \n            \n                Iterator<Map.Entry<Key,Value>> it;\n          \n          \n            \n                Key key;\n          \n          \n            \n                Value val;\n          \n          \n            \n                BiConsumer<Key,Value> keyValueConsumer;\n          \n          \n            \n                forEachTester fet;\n          \n          \n            \n            \n          \n          \n            \n                s = createMock(ScannerBase.class);\n          \n          \n            \n                key = new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\"));\n          \n          \n            \n                val = new Value(new Text(\"v1\"));\n          \n          \n            \n                scannerMap = new HashMap<>();\n          \n          \n            \n            \n          \n          \n            \n                scannerMap.put(key, val);\n          \n          \n            \n            \n          \n          \n            \n                fet = new forEachTester(scannerMap);\n          \n          \n            \n            \n          \n          \n            \n                it = scannerMap.entrySet().iterator();\n          \n          \n            \n                ScannerBase s = createMock(ScannerBase.class);\n          \n          \n            \n                Map<Key,Value> scannerMap = new HashMap<>();\n          \n          \n            \n                scannerMap.put(new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\")), new Value(new Text(\"v1\")));\n          \n          \n            \n                scannerMap.put(new Key(new Text(\"b\"), new Text(\"cf1\"), new Text(\"cq1\")), new Value(new Text(\"v2\")));\n          \n          \n            \n                ForEachTester fet = new ForEachTester(scannerMap);\n          \n          \n            \n            \n          \n          \n            \n                Iterator<Map.Entry<Key,Value>> it = scannerMap.entrySet().iterator();", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520871636", "createdAt": "2020-11-10T21:02:04Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private static class forEachTester {\n+\n+    private Map<Key,Value> map;\n+\n+    forEachTester(Map<Key,Value> map) {\n+      this.map = map;\n+    }\n+\n+    public void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {\n+      for (Map.Entry<Key,Value> entry : this.map.entrySet()) {\n+        keyValueConsumer.accept(entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testScannerBaseForEach() throws Exception {\n+\n+    ScannerBase s;\n+    Map<Key,Value> scannerMap;\n+    Iterator<Map.Entry<Key,Value>> it;\n+    Key key;\n+    Value val;\n+    BiConsumer<Key,Value> keyValueConsumer;\n+    forEachTester fet;\n+\n+    s = createMock(ScannerBase.class);\n+    key = new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\"));\n+    val = new Value(new Text(\"v1\"));\n+    scannerMap = new HashMap<>();\n+\n+    scannerMap.put(key, val);\n+\n+    fet = new forEachTester(scannerMap);\n+\n+    it = scannerMap.entrySet().iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126c53fb1168faa72a1587bf2682663a3b10b12c"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTM5NzMwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTowNTo1MFrOHwvmKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTowNTo1MFrOHwvmKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3MzUxNA==", "bodyText": "After simplifying a bit myself, it seems like that the forEach concept is being tested on the ForEachTester object, but the test is never actually calling the ScannerBase.forEach method... which is the method that this test case should be covering.\nIt would be better if ScannerBase was a partial mock... overriding iterator() (as you've already done), but leaving the implementation of forEach alone, and calling that in your test. The ForEachTester class doesn't seem necessary at all. It can simply be deleted.", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520873514", "createdAt": "2020-11-10T21:05:50Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private static class forEachTester {\n+\n+    private Map<Key,Value> map;\n+\n+    forEachTester(Map<Key,Value> map) {\n+      this.map = map;\n+    }\n+\n+    public void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {\n+      for (Map.Entry<Key,Value> entry : this.map.entrySet()) {\n+        keyValueConsumer.accept(entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testScannerBaseForEach() throws Exception {\n+\n+    ScannerBase s;\n+    Map<Key,Value> scannerMap;\n+    Iterator<Map.Entry<Key,Value>> it;\n+    Key key;\n+    Value val;\n+    BiConsumer<Key,Value> keyValueConsumer;\n+    forEachTester fet;\n+\n+    s = createMock(ScannerBase.class);\n+    key = new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\"));\n+    val = new Value(new Text(\"v1\"));\n+    scannerMap = new HashMap<>();\n+\n+    scannerMap.put(key, val);\n+\n+    fet = new forEachTester(scannerMap);\n+\n+    it = scannerMap.entrySet().iterator();\n+\n+    expect(s.iterator()).andReturn(it).times(1);\n+    replay(s);\n+\n+    Map<Key,Value> map = new HashMap<>();\n+    fet.forEach(map::put);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126c53fb1168faa72a1587bf2682663a3b10b12c"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDM5NTY0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOToxNjowNVrOH1FPow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOToxNjowNVrOH1FPow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyMjQ5OQ==", "bodyText": "Extending List forces you to add implementations for a bunch of methods. You can just implement ScannerBase, and have a constructor that takes a map, which itself is easily constructed, using Map.of(...). MockScanner's iterator() method can just return map.entrySet().iterator().", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r525422499", "createdAt": "2020-11-17T19:16:05Z", "author": {"login": "ctubbsii"}, "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -20,71 +20,121 @@\n \n import static org.easymock.EasyMock.createMock;\n import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.expectLastCall;\n+import static org.easymock.EasyMock.partialMockBuilder;\n import static org.easymock.EasyMock.replay;\n import static org.easymock.EasyMock.verify;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n \n+import java.awt.*;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Scanner;\n+import java.util.concurrent.TimeUnit;\n import java.util.function.BiConsumer;\n \n+import org.apache.accumulo.core.client.AccumuloClient;\n+import org.apache.accumulo.core.client.IteratorSetting;\n import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.client.sample.SamplerConfiguration;\n import org.apache.accumulo.core.data.Key;\n import org.apache.accumulo.core.data.Value;\n+import org.apache.accumulo.core.security.Authorizations;\n import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.shaded.org.mockito.Mockito;\n+import org.easymock.EasyMock;\n import org.junit.Test;\n \n public class ScannerBaseTest {\n \n-  private static class forEachTester {\n-\n-    private Map<Key,Value> map;\n-\n-    forEachTester(Map<Key,Value> map) {\n-      this.map = map;\n-    }\n-\n-    public void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {\n-      for (Map.Entry<Key,Value> entry : this.map.entrySet()) {\n-        keyValueConsumer.accept(entry.getKey(), entry.getValue());\n-      }\n-    }\n-  }\n-\n   @Test\n   public void testScannerBaseForEach() throws Exception {\n \n-    ScannerBase s;\n-    Map<Key,Value> scannerMap;\n-    Iterator<Map.Entry<Key,Value>> it;\n-    Key key;\n-    Value val;\n-    BiConsumer<Key,Value> keyValueConsumer;\n-    forEachTester fet;\n+    //This subclass of ScannerBase contains a List that ScannerBase.forEach() can\n+    //iterate over for testing purposes.\n+    class MockScanner extends List implements ScannerBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc1755fdec7b0366f738f6b0e2db73f16b21d776"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4095, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}