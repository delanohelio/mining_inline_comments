{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MTk2NjUy", "number": 1572, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxNjo1MFrODrqn-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoyMzo0OVrODsLkGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTEzNzIzOnYy", "diffSide": "LEFT", "path": "server/base/src/main/java/org/apache/accumulo/server/conf/TableConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxNjo1MFrOF8JClQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxNjo1MFrOF8JClQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYwNjk5Nw==", "bodyText": "Method was never used.", "url": "https://github.com/apache/accumulo/pull/1572#discussion_r398606997", "createdAt": "2020-03-26T14:16:50Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/conf/TableConfiguration.java", "diffHunk": "@@ -140,13 +140,6 @@ public TableId getTableId() {\n     return tableId;\n   }\n \n-  /**\n-   * returns the actual NamespaceConfiguration that corresponds to the current parent namespace.\n-   */\n-  public NamespaceConfiguration getNamespaceConfiguration() {\n-    return context.getServerConfFactory().getNamespaceConfiguration(parent.namespaceId);\n-  }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bd7946a89508b6fc5c87e510d30d61887fa3cf"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTU1MDA4OnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/tabletserver/LargestFirstMemoryManager.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo0MDo0OVrOF8NH_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoxNTo0NVrOF88zrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3MzkxOA==", "bodyText": "Another option for this update would be to call the new init method:\ninit(((ServerConfigurationFactory) conf).getServerContext());\nBut I put the exception to prevent calling this in Accumulo.  If a user extends this class, I don't think they should be calling this method.  The init currently gets called in TabletServerResourceManager here.", "url": "https://github.com/apache/accumulo/pull/1572#discussion_r398673918", "createdAt": "2020-03-26T15:40:49Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/tabletserver/LargestFirstMemoryManager.java", "diffHunk": "@@ -121,18 +122,16 @@ public void remove(Long key) {\n     }\n   }\n \n-  LargestFirstMemoryManager(long maxMemory, int maxConcurrentMincs, int numWaitingMultiplier) {\n-    this();\n-    this.maxMemory = maxMemory;\n-    this.maxConcurrentMincs = maxConcurrentMincs;\n-    this.numWaitingMultiplier = numWaitingMultiplier;\n+  @Override\n+  public void init(ServerConfiguration conf) {\n+    throw new IllegalStateException(\"Deprecated method, no longer should be used.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efb503ac50fe6b0a424006f3449316d755313d9b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyNDM5MA==", "bodyText": "Rather than override it or call the other method (which won't do anything, since we never call the deprecated one in the tserver), you could make it a deprecated default method in the interface that throws the exception. The exception message, as well as the deprecation message can say that it is scheduled for removal in 3.0.0. Since default methods don't need to be overridden, people can safely delete their current implementation to prepare for its eventual removal.\nHowever, I'm not sure the replacement accepting a ServerContext is any safer. It's still a leak of an internal type (ServerContext) that is subject to change, into what is effectively SPI. We should probably have some other specific MemoryManagerEnvironment type for this.", "url": "https://github.com/apache/accumulo/pull/1572#discussion_r399024390", "createdAt": "2020-03-27T04:07:50Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/tabletserver/LargestFirstMemoryManager.java", "diffHunk": "@@ -121,18 +122,16 @@ public void remove(Long key) {\n     }\n   }\n \n-  LargestFirstMemoryManager(long maxMemory, int maxConcurrentMincs, int numWaitingMultiplier) {\n-    this();\n-    this.maxMemory = maxMemory;\n-    this.maxConcurrentMincs = maxConcurrentMincs;\n-    this.numWaitingMultiplier = numWaitingMultiplier;\n+  @Override\n+  public void init(ServerConfiguration conf) {\n+    throw new IllegalStateException(\"Deprecated method, no longer should be used.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3MzkxOA=="}, "originalCommit": {"oid": "efb503ac50fe6b0a424006f3449316d755313d9b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1Mjg4MQ==", "bodyText": "I like throwing an exception on the default implementation, not sure why I didn't just do that.\nSounds like this interface might be a good candidate to move to the SPI since it deals more with performance and not user data.", "url": "https://github.com/apache/accumulo/pull/1572#discussion_r399252881", "createdAt": "2020-03-27T13:12:04Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/tabletserver/LargestFirstMemoryManager.java", "diffHunk": "@@ -121,18 +122,16 @@ public void remove(Long key) {\n     }\n   }\n \n-  LargestFirstMemoryManager(long maxMemory, int maxConcurrentMincs, int numWaitingMultiplier) {\n-    this();\n-    this.maxMemory = maxMemory;\n-    this.maxConcurrentMincs = maxConcurrentMincs;\n-    this.numWaitingMultiplier = numWaitingMultiplier;\n+  @Override\n+  public void init(ServerConfiguration conf) {\n+    throw new IllegalStateException(\"Deprecated method, no longer should be used.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3MzkxOA=="}, "originalCommit": {"oid": "efb503ac50fe6b0a424006f3449316d755313d9b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NDMyOA==", "bodyText": "I made the change in 1824acd but I made the new method not have a default impl.  My thinking was that since we won't have a way to make them backward compatible, it would be better to error during compilation than runtime in the tserver.", "url": "https://github.com/apache/accumulo/pull/1572#discussion_r399454328", "createdAt": "2020-03-27T18:14:13Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/tabletserver/LargestFirstMemoryManager.java", "diffHunk": "@@ -121,18 +122,16 @@ public void remove(Long key) {\n     }\n   }\n \n-  LargestFirstMemoryManager(long maxMemory, int maxConcurrentMincs, int numWaitingMultiplier) {\n-    this();\n-    this.maxMemory = maxMemory;\n-    this.maxConcurrentMincs = maxConcurrentMincs;\n-    this.numWaitingMultiplier = numWaitingMultiplier;\n+  @Override\n+  public void init(ServerConfiguration conf) {\n+    throw new IllegalStateException(\"Deprecated method, no longer should be used.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3MzkxOA=="}, "originalCommit": {"oid": "efb503ac50fe6b0a424006f3449316d755313d9b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NTE1MA==", "bodyText": "Also, I could make the MemoryManager change in a separate PR, since its the only contentious change here.", "url": "https://github.com/apache/accumulo/pull/1572#discussion_r399455150", "createdAt": "2020-03-27T18:15:45Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/tabletserver/LargestFirstMemoryManager.java", "diffHunk": "@@ -121,18 +122,16 @@ public void remove(Long key) {\n     }\n   }\n \n-  LargestFirstMemoryManager(long maxMemory, int maxConcurrentMincs, int numWaitingMultiplier) {\n-    this();\n-    this.maxMemory = maxMemory;\n-    this.maxConcurrentMincs = maxConcurrentMincs;\n-    this.numWaitingMultiplier = numWaitingMultiplier;\n+  @Override\n+  public void init(ServerConfiguration conf) {\n+    throw new IllegalStateException(\"Deprecated method, no longer should be used.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3MzkxOA=="}, "originalCommit": {"oid": "efb503ac50fe6b0a424006f3449316d755313d9b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjQ3MDUwOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/ServerContext.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODowNTo0MVrOF88dcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTozMDoxMFrOF9Cbng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0OTQ1Nw==", "bodyText": "I don't think there's any reason to load this singleton lazily.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (defaultConfig == null) {\n          \n          \n            \n                  defaultConfig = DefaultConfiguration.getInstance();\n          \n          \n            \n                }\n          \n          \n            \n                return defaultConfig;\n          \n          \n            \n                return DefaultConfiguration.getInstance();", "url": "https://github.com/apache/accumulo/pull/1572#discussion_r399449457", "createdAt": "2020-03-27T18:05:41Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/ServerContext.java", "diffHunk": "@@ -112,7 +125,26 @@ public synchronized ServerConfigurationFactory getServerConfFactory() {\n \n   @Override\n   public AccumuloConfiguration getConfiguration() {\n-    return getServerConfFactory().getSystemConfiguration();\n+    if (systemConfig == null) {\n+      ZooCache propCache = new ZooCache(getZooKeepers(), getZooKeepersSessionTimeOut());\n+      systemConfig = new ZooConfiguration(this, propCache, getSiteConfiguration());\n+    }\n+    return systemConfig;\n+  }\n+\n+  public TableConfiguration getTableConfiguration(TableId id) {\n+    return getServerConfFactory().getTableConfiguration(id);\n+  }\n+\n+  public NamespaceConfiguration getNamespaceConfiguration(NamespaceId namespaceId) {\n+    return getServerConfFactory().getNamespaceConfiguration(namespaceId);\n+  }\n+\n+  public DefaultConfiguration getDefaultConfiguration() {\n+    if (defaultConfig == null) {\n+      defaultConfig = DefaultConfiguration.getInstance();\n+    }\n+    return defaultConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1824acdfed11fd8d8aebc3d09e3c752470dc7833"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2OTI1OQ==", "bodyText": "Perhaps this method is poorly named because it just returns a new object:\npublic static DefaultConfiguration getInstance() {\n    return new DefaultConfiguration();\n  }\n\nI think it is worth storing a local copy to prevent creating too many identical objects.", "url": "https://github.com/apache/accumulo/pull/1572#discussion_r399469259", "createdAt": "2020-03-27T18:41:50Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/ServerContext.java", "diffHunk": "@@ -112,7 +125,26 @@ public synchronized ServerConfigurationFactory getServerConfFactory() {\n \n   @Override\n   public AccumuloConfiguration getConfiguration() {\n-    return getServerConfFactory().getSystemConfiguration();\n+    if (systemConfig == null) {\n+      ZooCache propCache = new ZooCache(getZooKeepers(), getZooKeepersSessionTimeOut());\n+      systemConfig = new ZooConfiguration(this, propCache, getSiteConfiguration());\n+    }\n+    return systemConfig;\n+  }\n+\n+  public TableConfiguration getTableConfiguration(TableId id) {\n+    return getServerConfFactory().getTableConfiguration(id);\n+  }\n+\n+  public NamespaceConfiguration getNamespaceConfiguration(NamespaceId namespaceId) {\n+    return getServerConfFactory().getNamespaceConfiguration(namespaceId);\n+  }\n+\n+  public DefaultConfiguration getDefaultConfiguration() {\n+    if (defaultConfig == null) {\n+      defaultConfig = DefaultConfiguration.getInstance();\n+    }\n+    return defaultConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0OTQ1Nw=="}, "originalCommit": {"oid": "1824acdfed11fd8d8aebc3d09e3c752470dc7833"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MjIxOQ==", "bodyText": "The class is documented as a singleton... but that appears to have stopped being the case as of 37f900b ; it should be a singleton. It doesn't need to do all the synchronization that the commit cleaned up, but it should still save and reuse the single instance.", "url": "https://github.com/apache/accumulo/pull/1572#discussion_r399542219", "createdAt": "2020-03-27T21:17:17Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/ServerContext.java", "diffHunk": "@@ -112,7 +125,26 @@ public synchronized ServerConfigurationFactory getServerConfFactory() {\n \n   @Override\n   public AccumuloConfiguration getConfiguration() {\n-    return getServerConfFactory().getSystemConfiguration();\n+    if (systemConfig == null) {\n+      ZooCache propCache = new ZooCache(getZooKeepers(), getZooKeepersSessionTimeOut());\n+      systemConfig = new ZooConfiguration(this, propCache, getSiteConfiguration());\n+    }\n+    return systemConfig;\n+  }\n+\n+  public TableConfiguration getTableConfiguration(TableId id) {\n+    return getServerConfFactory().getTableConfiguration(id);\n+  }\n+\n+  public NamespaceConfiguration getNamespaceConfiguration(NamespaceId namespaceId) {\n+    return getServerConfFactory().getNamespaceConfiguration(namespaceId);\n+  }\n+\n+  public DefaultConfiguration getDefaultConfiguration() {\n+    if (defaultConfig == null) {\n+      defaultConfig = DefaultConfiguration.getInstance();\n+    }\n+    return defaultConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0OTQ1Nw=="}, "originalCommit": {"oid": "1824acdfed11fd8d8aebc3d09e3c752470dc7833"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0NzI5NA==", "bodyText": "Yeah and since it anything loading the class will use it, I think it could just be created once during class load as a static variable.", "url": "https://github.com/apache/accumulo/pull/1572#discussion_r399547294", "createdAt": "2020-03-27T21:30:10Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/ServerContext.java", "diffHunk": "@@ -112,7 +125,26 @@ public synchronized ServerConfigurationFactory getServerConfFactory() {\n \n   @Override\n   public AccumuloConfiguration getConfiguration() {\n-    return getServerConfFactory().getSystemConfiguration();\n+    if (systemConfig == null) {\n+      ZooCache propCache = new ZooCache(getZooKeepers(), getZooKeepersSessionTimeOut());\n+      systemConfig = new ZooConfiguration(this, propCache, getSiteConfiguration());\n+    }\n+    return systemConfig;\n+  }\n+\n+  public TableConfiguration getTableConfiguration(TableId id) {\n+    return getServerConfFactory().getTableConfiguration(id);\n+  }\n+\n+  public NamespaceConfiguration getNamespaceConfiguration(NamespaceId namespaceId) {\n+    return getServerConfFactory().getNamespaceConfiguration(namespaceId);\n+  }\n+\n+  public DefaultConfiguration getDefaultConfiguration() {\n+    if (defaultConfig == null) {\n+      defaultConfig = DefaultConfiguration.getInstance();\n+    }\n+    return defaultConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0OTQ1Nw=="}, "originalCommit": {"oid": "1824acdfed11fd8d8aebc3d09e3c752470dc7833"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjUyNzUwOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/tabletserver/MemoryManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoyMjowM1rOF89BMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoyMjowM1rOF89BMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1ODYwOA==", "bodyText": "I'd add the note about scheduled for removal in this javadoc tag also.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @deprecated since 2.1 use {@link #init(ServerContext)}\n          \n          \n            \n               * @deprecated since 2.1 use {@link #init(ServerContext)}; to be removed in 3.0.0", "url": "https://github.com/apache/accumulo/pull/1572#discussion_r399458608", "createdAt": "2020-03-27T18:22:03Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/tabletserver/MemoryManager.java", "diffHunk": "@@ -32,8 +33,22 @@\n \n   /**\n    * Initialize the memory manager.\n+   *\n+   * @deprecated since 2.1 use {@link #init(ServerContext)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1824acdfed11fd8d8aebc3d09e3c752470dc7833"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjUzNDAzOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/tabletserver/MemoryManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoyMzo0OVrOF89FPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODo0NDoxN1rOF89v3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1OTY0Nw==", "bodyText": "My only concern with this is that context is not public API any more than ServerConfiguration was. The object has already changed from a ServerConfiguration object to a ServerConfigurationFactory object (which implemented ServerConfiguration, just to make this API happy), and now ServerContext.\nWhile it's unlikely that too many people have implemented their own MemoryManager, it is configurable, and this churn in the API isn't good for implementers. I think it would be cool if we could follow up on this PR with one that promotes this interface to SPI, and uses a stable MemoryManagerEnvironment object to inject here in place of the internal ServerContext.", "url": "https://github.com/apache/accumulo/pull/1572#discussion_r399459647", "createdAt": "2020-03-27T18:23:49Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/tabletserver/MemoryManager.java", "diffHunk": "@@ -32,8 +33,22 @@\n \n   /**\n    * Initialize the memory manager.\n+   *\n+   * @deprecated since 2.1 use {@link #init(ServerContext)}\n+   */\n+  @Deprecated\n+  default void init(ServerConfiguration conf) {\n+    throw new IllegalStateException(\"Deprecated method scheduled for removal in 3.0.0\");\n+  }\n+\n+  /**\n+   * Initialize the memory manager.\n+   *\n+   * @param context\n+   *          ServerContext passed from the Tablet server\n+   * @since 2.1\n    */\n-  void init(ServerConfiguration conf);\n+  void init(ServerContext context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1824acdfed11fd8d8aebc3d09e3c752470dc7833"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3MDU1Nw==", "bodyText": "I will back out the changes to MemoryManager (which won't be hard since I separated the commits) for something better in another PR.", "url": "https://github.com/apache/accumulo/pull/1572#discussion_r399470557", "createdAt": "2020-03-27T18:44:17Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/tabletserver/MemoryManager.java", "diffHunk": "@@ -32,8 +33,22 @@\n \n   /**\n    * Initialize the memory manager.\n+   *\n+   * @deprecated since 2.1 use {@link #init(ServerContext)}\n+   */\n+  @Deprecated\n+  default void init(ServerConfiguration conf) {\n+    throw new IllegalStateException(\"Deprecated method scheduled for removal in 3.0.0\");\n+  }\n+\n+  /**\n+   * Initialize the memory manager.\n+   *\n+   * @param context\n+   *          ServerContext passed from the Tablet server\n+   * @since 2.1\n    */\n-  void init(ServerConfiguration conf);\n+  void init(ServerContext context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1OTY0Nw=="}, "originalCommit": {"oid": "1824acdfed11fd8d8aebc3d09e3c752470dc7833"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4222, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}