{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNzMwODQ4", "number": 1824, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNjoxMToxOVrOFLx_PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMjozNTowNlrOFURz-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3ODk3NjYwOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNjoxMToxOVrOIPJffw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzo0NjoyMVrOIPPaug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjc1NTA3MQ==", "bodyText": "Does anyone know why the print statements are like this as opposed to one/fewer prints with linebreaks (\\n). It seems as though there might be a reason printlns are used in this way, but it seems like it would be cleaner to consolidate this text into less prints if possible. I see that it was this way before this PR so its not quite related but I was just curious.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r552755071", "createdAt": "2021-01-06T16:11:19Z", "author": {"login": "DomGarguilo"}, "path": "server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java", "diffHunk": "@@ -271,19 +273,23 @@ static boolean checkInit(VolumeManager fs, SiteConfiguration sconf, Configuratio\n       return false;\n     }\n     if (sconf.get(Property.INSTANCE_SECRET).equals(Property.INSTANCE_SECRET.getDefaultValue())) {\n-      ConsoleReader c = getConsoleReader();\n-      c.beep();\n-      c.println();\n-      c.println();\n-      c.println(\"Warning!!! Your instance secret is still set to the default,\"\n-          + \" this is not secure. We highly recommend you change it.\");\n-      c.println();\n-      c.println();\n-      c.println(\"You can change the instance secret in accumulo by using:\");\n-      c.println(\"   bin/accumulo \" + org.apache.accumulo.server.util.ChangeSecret.class.getName());\n-      c.println(\"You will also need to edit your secret in your configuration\"\n-          + \" file by adding the property instance.secret to your\"\n-          + \" accumulo.properties. Without this accumulo will not operate\" + \" correctly\");\n+      LineReader c = getLineReader();\n+      c.getTerminal().puts(InfoCmp.Capability.bell);\n+      c.getTerminal().writer().println();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgzODExMg==", "bodyText": "Sometimes this is done for readability, sometimes to reuse a buffer for performance to avoid unnecessary string concatenation (as in StringBuilder append methods), and sometimes to defer to environment-specific implementations (like cross-platform newline differences). It could also just be more convenient for a developer to copy/paste as many println calls as they want, rather than edit in a specific number of \\n in several different String literals.\nI'm not sure why it's used this way in this particular case, but probably some combination of readability and developer convenience. But, it probably also makes sense in this case to defer to the terminal's environment-specific implementation, since the terminal itself is intended as an abstraction around the command-line environment.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r552838112", "createdAt": "2021-01-06T17:30:42Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java", "diffHunk": "@@ -271,19 +273,23 @@ static boolean checkInit(VolumeManager fs, SiteConfiguration sconf, Configuratio\n       return false;\n     }\n     if (sconf.get(Property.INSTANCE_SECRET).equals(Property.INSTANCE_SECRET.getDefaultValue())) {\n-      ConsoleReader c = getConsoleReader();\n-      c.beep();\n-      c.println();\n-      c.println();\n-      c.println(\"Warning!!! Your instance secret is still set to the default,\"\n-          + \" this is not secure. We highly recommend you change it.\");\n-      c.println();\n-      c.println();\n-      c.println(\"You can change the instance secret in accumulo by using:\");\n-      c.println(\"   bin/accumulo \" + org.apache.accumulo.server.util.ChangeSecret.class.getName());\n-      c.println(\"You will also need to edit your secret in your configuration\"\n-          + \" file by adding the property instance.secret to your\"\n-          + \" accumulo.properties. Without this accumulo will not operate\" + \" correctly\");\n+      LineReader c = getLineReader();\n+      c.getTerminal().puts(InfoCmp.Capability.bell);\n+      c.getTerminal().writer().println();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjc1NTA3MQ=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg1MjE1NA==", "bodyText": "Okay great. Thanks for the explanation.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r552852154", "createdAt": "2021-01-06T17:46:21Z", "author": {"login": "DomGarguilo"}, "path": "server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java", "diffHunk": "@@ -271,19 +273,23 @@ static boolean checkInit(VolumeManager fs, SiteConfiguration sconf, Configuratio\n       return false;\n     }\n     if (sconf.get(Property.INSTANCE_SECRET).equals(Property.INSTANCE_SECRET.getDefaultValue())) {\n-      ConsoleReader c = getConsoleReader();\n-      c.beep();\n-      c.println();\n-      c.println();\n-      c.println(\"Warning!!! Your instance secret is still set to the default,\"\n-          + \" this is not secure. We highly recommend you change it.\");\n-      c.println();\n-      c.println();\n-      c.println(\"You can change the instance secret in accumulo by using:\");\n-      c.println(\"   bin/accumulo \" + org.apache.accumulo.server.util.ChangeSecret.class.getName());\n-      c.println(\"You will also need to edit your secret in your configuration\"\n-          + \" file by adding the property instance.secret to your\"\n-          + \" accumulo.properties. Without this accumulo will not operate\" + \" correctly\");\n+      LineReader c = getLineReader();\n+      c.getTerminal().puts(InfoCmp.Capability.bell);\n+      c.getTerminal().writer().println();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjc1NTA3MQ=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTg3NDkzOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/format/DeleterFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTowMToxMFrOIPSriQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxMTowNToyNVrOIcfWlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNTYwOQ==", "bodyText": "Could the portion before && be replaced with more?  I know this is unrelated but thought I would point it out.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    delete = line != null && (line.equalsIgnoreCase(\"y\") || line.equalsIgnoreCase(\"yes\"));\n          \n          \n            \n                    delete = more && (line.equalsIgnoreCase(\"y\") || line.equalsIgnoreCase(\"yes\"));", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r552905609", "createdAt": "2021-01-06T19:01:10Z", "author": {"login": "DomGarguilo"}, "path": "shell/src/main/java/org/apache/accumulo/shell/format/DeleterFormatter.java", "diffHunk": "@@ -79,33 +79,36 @@ public String next() {\n     Mutation m = new Mutation(key.getRow());\n     String entryStr = formatEntry(next, isDoTimestamps());\n     boolean delete = force;\n-    try {\n-      if (!force) {\n-        shellState.getReader().flush();\n+    if (!force) {\n+      try {\n+        shellState.getWriter().flush();\n+        // this will cause end of file Exception for one of the formatter tests\n         String line = shellState.getReader().readLine(\"Delete { \" + entryStr + \" } ? \");\n         more = line != null;\n         delete = line != null && (line.equalsIgnoreCase(\"y\") || line.equalsIgnoreCase(\"yes\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njc0NDcyNQ==", "bodyText": "I will add this. Sorry for the overlook.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r566744725", "createdAt": "2021-01-29T11:05:25Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/format/DeleterFormatter.java", "diffHunk": "@@ -79,33 +79,36 @@ public String next() {\n     Mutation m = new Mutation(key.getRow());\n     String entryStr = formatEntry(next, isDoTimestamps());\n     boolean delete = force;\n-    try {\n-      if (!force) {\n-        shellState.getReader().flush();\n+    if (!force) {\n+      try {\n+        shellState.getWriter().flush();\n+        // this will cause end of file Exception for one of the formatter tests\n         String line = shellState.getReader().readLine(\"Delete { \" + entryStr + \" } ? \");\n         more = line != null;\n         delete = line != null && (line.equalsIgnoreCase(\"y\") || line.equalsIgnoreCase(\"yes\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkwNTYwOQ=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzA5NjcyOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxODo0NzozMFrOIalhEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNDowODowOFrOIbJVtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDc0ODU2MQ==", "bodyText": "I suggest adding a log.warn or log.error here to capture the exception within the logs.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564748561", "createdAt": "2021-01-26T18:47:30Z", "author": {"login": "lbschanno"}, "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "diffHunk": "@@ -584,40 +586,39 @@ public int start() throws IOException {\n \n         // If tab completion is true we need to reset\n         if (tabCompletion) {\n-          if (userCompletor != null) {\n-            reader.removeCompleter(userCompletor);\n-          }\n-\n           userCompletor = setupCompletion();\n-          reader.addCompleter(userCompletor);\n+          ((LineReaderImpl) reader).setCompleter(userCompletor);\n         }\n \n-        reader.setPrompt(getDefaultPrompt());\n-        input = reader.readLine();\n+        input = reader.readLine(getDefaultPrompt());\n         if (input == null) {\n-          reader.println();\n           return exitCode;\n         } // User Canceled (Ctrl+D)\n \n         execCommand(input, disableAuthTimeout, false);\n       } catch (UserInterruptException uie) {\n         // User Cancelled (Ctrl+C)\n-        reader.println();\n+        writer.println();\n \n         String partialLine = uie.getPartialLine();\n         if (partialLine == null || \"\".equals(uie.getPartialLine().trim())) {\n           // No content, actually exit\n           return exitCode;\n         }\n       } finally {\n-        reader.flush();\n+        writer.flush();\n       }\n     }\n   }\n \n   public void shutdown() {\n     if (reader != null) {\n-      reader.close();\n+      try {\n+        terminal.close();\n+        reader = null;\n+      } catch (IOException e) {\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg0MTA1Nw==", "bodyText": "I concur. We don't generally just print stack traces with e.printStackTrace().", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564841057", "createdAt": "2021-01-26T21:21:00Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "diffHunk": "@@ -584,40 +586,39 @@ public int start() throws IOException {\n \n         // If tab completion is true we need to reset\n         if (tabCompletion) {\n-          if (userCompletor != null) {\n-            reader.removeCompleter(userCompletor);\n-          }\n-\n           userCompletor = setupCompletion();\n-          reader.addCompleter(userCompletor);\n+          ((LineReaderImpl) reader).setCompleter(userCompletor);\n         }\n \n-        reader.setPrompt(getDefaultPrompt());\n-        input = reader.readLine();\n+        input = reader.readLine(getDefaultPrompt());\n         if (input == null) {\n-          reader.println();\n           return exitCode;\n         } // User Canceled (Ctrl+D)\n \n         execCommand(input, disableAuthTimeout, false);\n       } catch (UserInterruptException uie) {\n         // User Cancelled (Ctrl+C)\n-        reader.println();\n+        writer.println();\n \n         String partialLine = uie.getPartialLine();\n         if (partialLine == null || \"\".equals(uie.getPartialLine().trim())) {\n           // No content, actually exit\n           return exitCode;\n         }\n       } finally {\n-        reader.flush();\n+        writer.flush();\n       }\n     }\n   }\n \n   public void shutdown() {\n     if (reader != null) {\n-      reader.close();\n+      try {\n+        terminal.close();\n+        reader = null;\n+      } catch (IOException e) {\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDc0ODU2MQ=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTIxODY1MQ==", "bodyText": "I will add.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565218651", "createdAt": "2021-01-27T11:03:20Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "diffHunk": "@@ -584,40 +586,39 @@ public int start() throws IOException {\n \n         // If tab completion is true we need to reset\n         if (tabCompletion) {\n-          if (userCompletor != null) {\n-            reader.removeCompleter(userCompletor);\n-          }\n-\n           userCompletor = setupCompletion();\n-          reader.addCompleter(userCompletor);\n+          ((LineReaderImpl) reader).setCompleter(userCompletor);\n         }\n \n-        reader.setPrompt(getDefaultPrompt());\n-        input = reader.readLine();\n+        input = reader.readLine(getDefaultPrompt());\n         if (input == null) {\n-          reader.println();\n           return exitCode;\n         } // User Canceled (Ctrl+D)\n \n         execCommand(input, disableAuthTimeout, false);\n       } catch (UserInterruptException uie) {\n         // User Cancelled (Ctrl+C)\n-        reader.println();\n+        writer.println();\n \n         String partialLine = uie.getPartialLine();\n         if (partialLine == null || \"\".equals(uie.getPartialLine().trim())) {\n           // No content, actually exit\n           return exitCode;\n         }\n       } finally {\n-        reader.flush();\n+        writer.flush();\n       }\n     }\n   }\n \n   public void shutdown() {\n     if (reader != null) {\n-      reader.close();\n+      try {\n+        terminal.close();\n+        reader = null;\n+      } catch (IOException e) {\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDc0ODU2MQ=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTMzNTQ3Nw==", "bodyText": "I noticed a printExcetion function included in the shell class already so I used that for this. Let me know if that suffices", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565335477", "createdAt": "2021-01-27T14:08:08Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "diffHunk": "@@ -584,40 +586,39 @@ public int start() throws IOException {\n \n         // If tab completion is true we need to reset\n         if (tabCompletion) {\n-          if (userCompletor != null) {\n-            reader.removeCompleter(userCompletor);\n-          }\n-\n           userCompletor = setupCompletion();\n-          reader.addCompleter(userCompletor);\n+          ((LineReaderImpl) reader).setCompleter(userCompletor);\n         }\n \n-        reader.setPrompt(getDefaultPrompt());\n-        input = reader.readLine();\n+        input = reader.readLine(getDefaultPrompt());\n         if (input == null) {\n-          reader.println();\n           return exitCode;\n         } // User Canceled (Ctrl+D)\n \n         execCommand(input, disableAuthTimeout, false);\n       } catch (UserInterruptException uie) {\n         // User Cancelled (Ctrl+C)\n-        reader.println();\n+        writer.println();\n \n         String partialLine = uie.getPartialLine();\n         if (partialLine == null || \"\".equals(uie.getPartialLine().trim())) {\n           // No content, actually exit\n           return exitCode;\n         }\n       } finally {\n-        reader.flush();\n+        writer.flush();\n       }\n     }\n   }\n \n   public void shutdown() {\n     if (reader != null) {\n-      reader.close();\n+      try {\n+        terminal.close();\n+        reader = null;\n+      } catch (IOException e) {\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDc0ODU2MQ=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzQyNzA4OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMDowOTo1N1rOIaor6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxODozMDo1NFrOIbVz9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgwMDQ5MQ==", "bodyText": "Did you test CTRL-C without the lines below? Or kill -2 <pid> ?", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564800491", "createdAt": "2021-01-26T20:09:57Z", "author": {"login": "dlmarion"}, "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "diffHunk": "@@ -543,23 +551,17 @@ public int start() throws IOException {\n     if (!accumuloDir.exists() && !accumuloDir.mkdirs()) {\n       log.warn(\"Unable to make directory for history at {}\", accumuloDir);\n     }\n-    try {\n-      final FileHistory history = new FileHistory(new File(historyPath));\n-      reader.setHistory(history);\n-      // Add shutdown hook to flush file history, per jline javadocs\n-      Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n-        try {\n-          history.flush();\n-        } catch (IOException e) {\n-          log.warn(\"Could not flush history to file.\");\n-        }\n-      }));\n-    } catch (IOException e) {\n-      log.warn(\"Unable to load history file at {}\", historyPath);\n-    }\n+\n+    // Remove Timestamps for history file. Fixes incompatibility issues\n+    reader.unsetOpt(LineReader.Option.HISTORY_TIMESTAMPED);\n+\n+    // Set history file\n+    reader.setVariable(LineReader.HISTORY_FILE, new File(historyPath));\n \n     // Turn Ctrl+C into Exception instead of JVM exit\n-    reader.setHandleUserInterrupt(true);\n+    // Not 100% sure this is necessary anymore.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgyMzM3NA==", "bodyText": "I believe CTRL-C still worked without it but I will double check tomorrow to verify.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564823374", "createdAt": "2021-01-26T20:49:51Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "diffHunk": "@@ -543,23 +551,17 @@ public int start() throws IOException {\n     if (!accumuloDir.exists() && !accumuloDir.mkdirs()) {\n       log.warn(\"Unable to make directory for history at {}\", accumuloDir);\n     }\n-    try {\n-      final FileHistory history = new FileHistory(new File(historyPath));\n-      reader.setHistory(history);\n-      // Add shutdown hook to flush file history, per jline javadocs\n-      Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n-        try {\n-          history.flush();\n-        } catch (IOException e) {\n-          log.warn(\"Could not flush history to file.\");\n-        }\n-      }));\n-    } catch (IOException e) {\n-      log.warn(\"Unable to load history file at {}\", historyPath);\n-    }\n+\n+    // Remove Timestamps for history file. Fixes incompatibility issues\n+    reader.unsetOpt(LineReader.Option.HISTORY_TIMESTAMPED);\n+\n+    // Set history file\n+    reader.setVariable(LineReader.HISTORY_FILE, new File(historyPath));\n \n     // Turn Ctrl+C into Exception instead of JVM exit\n-    reader.setHandleUserInterrupt(true);\n+    // Not 100% sure this is necessary anymore.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgwMDQ5MQ=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTMwNzMyMQ==", "bodyText": "In my testing, both the main branch and these changes do have the same functionality for CTRL-C but they both might be wrong. When I  hit CTRL-C, it exits the shell which I do not think is what we are going for. I tested the jline3 demo and CTRL-C will reset back to the shell but not exit the shell. That is probably the functionality we want. The funny thing is, I am implementing what they did in their demo but for some reason, it does not seem to be working. So this will take some more investigating.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565307321", "createdAt": "2021-01-27T13:29:03Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "diffHunk": "@@ -543,23 +551,17 @@ public int start() throws IOException {\n     if (!accumuloDir.exists() && !accumuloDir.mkdirs()) {\n       log.warn(\"Unable to make directory for history at {}\", accumuloDir);\n     }\n-    try {\n-      final FileHistory history = new FileHistory(new File(historyPath));\n-      reader.setHistory(history);\n-      // Add shutdown hook to flush file history, per jline javadocs\n-      Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n-        try {\n-          history.flush();\n-        } catch (IOException e) {\n-          log.warn(\"Could not flush history to file.\");\n-        }\n-      }));\n-    } catch (IOException e) {\n-      log.warn(\"Unable to load history file at {}\", historyPath);\n-    }\n+\n+    // Remove Timestamps for history file. Fixes incompatibility issues\n+    reader.unsetOpt(LineReader.Option.HISTORY_TIMESTAMPED);\n+\n+    // Set history file\n+    reader.setVariable(LineReader.HISTORY_FILE, new File(historyPath));\n \n     // Turn Ctrl+C into Exception instead of JVM exit\n-    reader.setHandleUserInterrupt(true);\n+    // Not 100% sure this is necessary anymore.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgwMDQ5MQ=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTMxNTY1Ng==", "bodyText": "I did find that when I CTRL-C in the middle of the help command, it does work properly. As in it throws the interrupt exception but doesn't exit the process. It only exits if I CTRL-C when just sitting in the shell. So this signal handle is at least needed for that, unsure on why it still exits when CTRL-C not during a command.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565315656", "createdAt": "2021-01-27T13:41:01Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "diffHunk": "@@ -543,23 +551,17 @@ public int start() throws IOException {\n     if (!accumuloDir.exists() && !accumuloDir.mkdirs()) {\n       log.warn(\"Unable to make directory for history at {}\", accumuloDir);\n     }\n-    try {\n-      final FileHistory history = new FileHistory(new File(historyPath));\n-      reader.setHistory(history);\n-      // Add shutdown hook to flush file history, per jline javadocs\n-      Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n-        try {\n-          history.flush();\n-        } catch (IOException e) {\n-          log.warn(\"Could not flush history to file.\");\n-        }\n-      }));\n-    } catch (IOException e) {\n-      log.warn(\"Unable to load history file at {}\", historyPath);\n-    }\n+\n+    // Remove Timestamps for history file. Fixes incompatibility issues\n+    reader.unsetOpt(LineReader.Option.HISTORY_TIMESTAMPED);\n+\n+    // Set history file\n+    reader.setVariable(LineReader.HISTORY_FILE, new File(historyPath));\n \n     // Turn Ctrl+C into Exception instead of JVM exit\n-    reader.setHandleUserInterrupt(true);\n+    // Not 100% sure this is necessary anymore.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgwMDQ5MQ=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTUzOTgyOQ==", "bodyText": "This is because of the block below. Not sure if this is a feature that we want or not.\ncatch (UserInterruptException uie) {\n        // User Cancelled (Ctrl+C)\n        reader.println();\n        writer.println();\n\n        String partialLine = uie.getPartialLine();\n        if (partialLine == null || \"\".equals(uie.getPartialLine().trim())) {\n          // No content, actually exit\n          return exitCode;\n        }", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565539829", "createdAt": "2021-01-27T18:30:54Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "diffHunk": "@@ -543,23 +551,17 @@ public int start() throws IOException {\n     if (!accumuloDir.exists() && !accumuloDir.mkdirs()) {\n       log.warn(\"Unable to make directory for history at {}\", accumuloDir);\n     }\n-    try {\n-      final FileHistory history = new FileHistory(new File(historyPath));\n-      reader.setHistory(history);\n-      // Add shutdown hook to flush file history, per jline javadocs\n-      Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n-        try {\n-          history.flush();\n-        } catch (IOException e) {\n-          log.warn(\"Could not flush history to file.\");\n-        }\n-      }));\n-    } catch (IOException e) {\n-      log.warn(\"Unable to load history file at {}\", historyPath);\n-    }\n+\n+    // Remove Timestamps for history file. Fixes incompatibility issues\n+    reader.unsetOpt(LineReader.Option.HISTORY_TIMESTAMPED);\n+\n+    // Set history file\n+    reader.setVariable(LineReader.HISTORY_FILE, new File(historyPath));\n \n     // Turn Ctrl+C into Exception instead of JVM exit\n-    reader.setHandleUserInterrupt(true);\n+    // Not 100% sure this is necessary anymore.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgwMDQ5MQ=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzYwNDMwOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMDo1Nzo0MlrOIaqXCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNDoxODoyM1rOIbJ1EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgyNzkxNQ==", "bodyText": "It might make sense to assign the writer to a new variable, so that way all this line wrapping doesn't occur.\nvar w = c.getTerminal().writer();\nw.println(...);", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564827915", "createdAt": "2021-01-26T20:57:42Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java", "diffHunk": "@@ -271,19 +273,23 @@ static boolean checkInit(VolumeManager fs, SiteConfiguration sconf, Configuratio\n       return false;\n     }\n     if (sconf.get(Property.INSTANCE_SECRET).equals(Property.INSTANCE_SECRET.getDefaultValue())) {\n-      ConsoleReader c = getConsoleReader();\n-      c.beep();\n-      c.println();\n-      c.println();\n-      c.println(\"Warning!!! Your instance secret is still set to the default,\"\n-          + \" this is not secure. We highly recommend you change it.\");\n-      c.println();\n-      c.println();\n-      c.println(\"You can change the instance secret in accumulo by using:\");\n-      c.println(\"   bin/accumulo \" + org.apache.accumulo.server.util.ChangeSecret.class.getName());\n-      c.println(\"You will also need to edit your secret in your configuration\"\n-          + \" file by adding the property instance.secret to your\"\n-          + \" accumulo.properties. Without this accumulo will not operate\" + \" correctly\");\n+      LineReader c = getLineReader();\n+      c.getTerminal().puts(InfoCmp.Capability.bell);\n+      c.getTerminal().writer().println();\n+      c.getTerminal().writer().println();\n+\n+      c.getTerminal().writer()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM0MzUwNQ==", "bodyText": "Done in latest commit", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565343505", "createdAt": "2021-01-27T14:18:23Z", "author": {"login": "Manno15"}, "path": "server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java", "diffHunk": "@@ -271,19 +273,23 @@ static boolean checkInit(VolumeManager fs, SiteConfiguration sconf, Configuratio\n       return false;\n     }\n     if (sconf.get(Property.INSTANCE_SECRET).equals(Property.INSTANCE_SECRET.getDefaultValue())) {\n-      ConsoleReader c = getConsoleReader();\n-      c.beep();\n-      c.println();\n-      c.println();\n-      c.println(\"Warning!!! Your instance secret is still set to the default,\"\n-          + \" this is not secure. We highly recommend you change it.\");\n-      c.println();\n-      c.println();\n-      c.println(\"You can change the instance secret in accumulo by using:\");\n-      c.println(\"   bin/accumulo \" + org.apache.accumulo.server.util.ChangeSecret.class.getName());\n-      c.println(\"You will also need to edit your secret in your configuration\"\n-          + \" file by adding the property instance.secret to your\"\n-          + \" accumulo.properties. Without this accumulo will not operate\" + \" correctly\");\n+      LineReader c = getLineReader();\n+      c.getTerminal().puts(InfoCmp.Capability.bell);\n+      c.getTerminal().writer().println();\n+      c.getTerminal().writer().println();\n+\n+      c.getTerminal().writer()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgyNzkxNQ=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzYxMDEyOnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMDo1OToxM1rOIaqagA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNzowNjo0N1rOIbSNyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgyODgwMA==", "bodyText": "These splits should be on separate lines. It seems like either this behavior has changed, or there's a problem with these tests.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564828800", "createdAt": "2021-01-26T20:59:13Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java", "diffHunk": "@@ -895,7 +904,7 @@ public void clonetableOffline() throws Exception {\n     ts.exec(\"scan\", false, \"TableOfflineException\", true);\n     ts.exec(\"constraint --list -t \" + clone, true, \"VisibilityConstraint=2\", true);\n     ts.exec(\"config -t \" + clone + \" -np\", true, \"123M\", true);\n-    ts.exec(\"getsplits -t \" + clone, true, \"a\\nb\\nc\\n\");\n+    ts.exec(\"getsplits -t \" + clone, true, \"abc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ4MDkwNw==", "bodyText": "Yep, that was my mistake. Apparently, in PrintShell I replaced a printLn() with just a print().", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565480907", "createdAt": "2021-01-27T17:06:47Z", "author": {"login": "Manno15"}, "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java", "diffHunk": "@@ -895,7 +904,7 @@ public void clonetableOffline() throws Exception {\n     ts.exec(\"scan\", false, \"TableOfflineException\", true);\n     ts.exec(\"constraint --list -t \" + clone, true, \"VisibilityConstraint=2\", true);\n     ts.exec(\"config -t \" + clone + \" -np\", true, \"123M\", true);\n-    ts.exec(\"getsplits -t \" + clone, true, \"a\\nb\\nc\\n\");\n+    ts.exec(\"getsplits -t \" + clone, true, \"abc\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgyODgwMA=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzYxNzkwOnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMTowMToxOVrOIaqfXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMjo0Mjo0OVrOIcN1Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzMDA0Ng==", "bodyText": "I wonder if it would make more sense to pass in \"terminal\" instead of just the reader?", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564830046", "createdAt": "2021-01-26T21:01:19Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java", "diffHunk": "@@ -182,14 +186,19 @@ public String getErrorMessage() {\n     public TestOutputStream output;\n     public StringInputStream input;\n     public Shell shell;\n+    public LineReader reader;\n+    public Terminal terminal;\n \n     TestShell(String user, String rootPass, String instanceName, String zookeepers, File configFile)\n         throws IOException {\n       ClientInfo info = ClientInfo.from(configFile.toPath());\n       // start the shell\n       output = new TestOutputStream();\n       input = new StringInputStream();\n-      shell = new Shell(new ConsoleReader(input, output));\n+      terminal = new DumbTerminal(input, output);\n+      terminal.setSize(new Size(80, 24));\n+      reader = LineReaderBuilder.builder().terminal(terminal).build();\n+      shell = new Shell(reader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM0ODM5MQ==", "bodyText": "I am unsure if it would change anything since the terminal gets attached to the reader. We could just pass in \"terminal\" and then build the reader inside Shell.java so keep things consistent there. Not sure what that would gain ultimately.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565348391", "createdAt": "2021-01-27T14:24:43Z", "author": {"login": "Manno15"}, "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java", "diffHunk": "@@ -182,14 +186,19 @@ public String getErrorMessage() {\n     public TestOutputStream output;\n     public StringInputStream input;\n     public Shell shell;\n+    public LineReader reader;\n+    public Terminal terminal;\n \n     TestShell(String user, String rootPass, String instanceName, String zookeepers, File configFile)\n         throws IOException {\n       ClientInfo info = ClientInfo.from(configFile.toPath());\n       // start the shell\n       output = new TestOutputStream();\n       input = new StringInputStream();\n-      shell = new Shell(new ConsoleReader(input, output));\n+      terminal = new DumbTerminal(input, output);\n+      terminal.setSize(new Size(80, 24));\n+      reader = LineReaderBuilder.builder().terminal(terminal).build();\n+      shell = new Shell(reader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzMDA0Ng=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQzODA1MA==", "bodyText": "The gain is just more intuitive API semantics (possibly) and maybe exposing a more stable jline API... a terminal being a high level object and line reader a lower level component.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565438050", "createdAt": "2021-01-27T16:12:10Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java", "diffHunk": "@@ -182,14 +186,19 @@ public String getErrorMessage() {\n     public TestOutputStream output;\n     public StringInputStream input;\n     public Shell shell;\n+    public LineReader reader;\n+    public Terminal terminal;\n \n     TestShell(String user, String rootPass, String instanceName, String zookeepers, File configFile)\n         throws IOException {\n       ClientInfo info = ClientInfo.from(configFile.toPath());\n       // start the shell\n       output = new TestOutputStream();\n       input = new StringInputStream();\n-      shell = new Shell(new ConsoleReader(input, output));\n+      terminal = new DumbTerminal(input, output);\n+      terminal.setSize(new Size(80, 24));\n+      reader = LineReaderBuilder.builder().terminal(terminal).build();\n+      shell = new Shell(reader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzMDA0Ng=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ0NjQ0NQ==", "bodyText": "I will look into it further once I get through the rest of the comments.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565446445", "createdAt": "2021-01-27T16:22:53Z", "author": {"login": "Manno15"}, "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java", "diffHunk": "@@ -182,14 +186,19 @@ public String getErrorMessage() {\n     public TestOutputStream output;\n     public StringInputStream input;\n     public Shell shell;\n+    public LineReader reader;\n+    public Terminal terminal;\n \n     TestShell(String user, String rootPass, String instanceName, String zookeepers, File configFile)\n         throws IOException {\n       ClientInfo info = ClientInfo.from(configFile.toPath());\n       // start the shell\n       output = new TestOutputStream();\n       input = new StringInputStream();\n-      shell = new Shell(new ConsoleReader(input, output));\n+      terminal = new DumbTerminal(input, output);\n+      terminal.setSize(new Size(80, 24));\n+      reader = LineReaderBuilder.builder().terminal(terminal).build();\n+      shell = new Shell(reader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzMDA0Ng=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQ1NzYyMw==", "bodyText": "I think your other comment explained that LineReader was more the primary object to interact with, not the terminal. If that's the case, then my suggestion here probably is fine to ignore.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r566457623", "createdAt": "2021-01-28T22:42:49Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/ShellServerIT.java", "diffHunk": "@@ -182,14 +186,19 @@ public String getErrorMessage() {\n     public TestOutputStream output;\n     public StringInputStream input;\n     public Shell shell;\n+    public LineReader reader;\n+    public Terminal terminal;\n \n     TestShell(String user, String rootPass, String instanceName, String zookeepers, File configFile)\n         throws IOException {\n       ClientInfo info = ClientInfo.from(configFile.toPath());\n       // start the shell\n       output = new TestOutputStream();\n       input = new StringInputStream();\n-      shell = new Shell(new ConsoleReader(input, output));\n+      terminal = new DumbTerminal(input, output);\n+      terminal.setSize(new Size(80, 24));\n+      reader = LineReaderBuilder.builder().terminal(terminal).build();\n+      shell = new Shell(reader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzMDA0Ng=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzYxOTg4OnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/apache/accumulo/test/ShellIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMTowMjowM1rOIaqgyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNzoxMjoxNFrOIbSdtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzMDQwOQ==", "bodyText": "If these tests pass without the newline, then that seems like it would indicate a breaking change to getsplits.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564830409", "createdAt": "2021-01-26T21:02:03Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/ShellIT.java", "diffHunk": "@@ -207,9 +215,9 @@ public void addGetSplitsTest() throws IOException {\n     exec(\"addsplits arg\", false, \"java.lang.IllegalStateException: Not in a table context\");\n     exec(\"createtable test\", true);\n     exec(\"addsplits 1 \\\\x80\", true);\n-    exec(\"getsplits\", true, \"1\\n\\\\x80\");\n+    exec(\"getsplits\", true, \"1\\\\x80\");\n     exec(\"getsplits -m 1\", true, \"1\");\n-    exec(\"getsplits -b64\", true, \"MQ==\\ngA==\");\n+    exec(\"getsplits -b64\", true, \"MQ==gA==\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ4NDk4MA==", "bodyText": "Same issue as above. Printed instead of PrintLn", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565484980", "createdAt": "2021-01-27T17:12:14Z", "author": {"login": "Manno15"}, "path": "test/src/main/java/org/apache/accumulo/test/ShellIT.java", "diffHunk": "@@ -207,9 +215,9 @@ public void addGetSplitsTest() throws IOException {\n     exec(\"addsplits arg\", false, \"java.lang.IllegalStateException: Not in a table context\");\n     exec(\"createtable test\", true);\n     exec(\"addsplits 1 \\\\x80\", true);\n-    exec(\"getsplits\", true, \"1\\n\\\\x80\");\n+    exec(\"getsplits\", true, \"1\\\\x80\");\n     exec(\"getsplits -m 1\", true, \"1\");\n-    exec(\"getsplits -b64\", true, \"MQ==\\ngA==\");\n+    exec(\"getsplits -b64\", true, \"MQ==gA==\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzMDQwOQ=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzYyMjI4OnYy", "diffSide": "RIGHT", "path": "shell/src/test/java/org/apache/accumulo/shell/format/DeleterFormatterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMTowMjo0MlrOIaqiNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNDoyNzoyOFrOIbKRHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzMDc3NQ==", "bodyText": "What's this comment about?", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564830775", "createdAt": "2021-01-26T21:02:42Z", "author": {"login": "ctubbsii"}, "path": "shell/src/test/java/org/apache/accumulo/shell/format/DeleterFormatterTest.java", "diffHunk": "@@ -133,6 +141,7 @@ public void testNo() throws IOException {\n     assertTrue(formatter.hasNext());\n   }\n \n+  // Need to properly fix this test.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM1MDY4Ng==", "bodyText": "Related to your other comment below in DeleterFormatter.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565350686", "createdAt": "2021-01-27T14:27:28Z", "author": {"login": "Manno15"}, "path": "shell/src/test/java/org/apache/accumulo/shell/format/DeleterFormatterTest.java", "diffHunk": "@@ -133,6 +141,7 @@ public void testNo() throws IOException {\n     assertTrue(formatter.hasNext());\n   }\n \n+  // Need to properly fix this test.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzMDc3NQ=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzYzNTIxOnYy", "diffSide": "RIGHT", "path": "shell/src/test/java/org/apache/accumulo/shell/commands/HistoryCommandTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMTowNjo0M1rOIaqqnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMjo0MDozMlrOIcNxKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzMjkyNA==", "bodyText": "Is there a way to add the history directly to the terminal, and using its line reader, or do we have to create a new line reader separately from the terminal?", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564832924", "createdAt": "2021-01-26T21:06:43Z", "author": {"login": "ctubbsii"}, "path": "shell/src/test/java/org/apache/accumulo/shell/commands/HistoryCommandTest.java", "diffHunk": "@@ -56,38 +62,41 @@ public void setUp() throws Exception {\n     expect(cl.hasOption(\"np\")).andReturn(true);\n     replay(cl);\n \n-    History history = new MemoryHistory();\n+    History history = new DefaultHistory();\n     history.add(\"foo\");\n     history.add(\"bar\");\n \n     baos = new ByteArrayOutputStream();\n \n     String input = String.format(\"!1%n\"); // Construct a platform dependent new-line\n-    reader = new ConsoleReader(new ByteArrayInputStream(input.getBytes()), baos);\n-    reader.setHistory(history);\n+    terminal = TerminalBuilder.builder().system(false)\n+        .streams(new ByteArrayInputStream(input.getBytes()), baos).build();\n+    reader = LineReaderBuilder.builder().history(history).terminal(terminal).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ5NDgxOQ==", "bodyText": "The line reader is what contains the history and also contains the terminal object. Not the other way around. The line reader seems to be the higher-level object though I agree that it doesn't make the most sense. It is probably like this so it doesn't differentiate itself too much from ConsoleReader in jline2.\nThe reader object in terminal is a bit different than a LineReader and isn't as friendly to use.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565494819", "createdAt": "2021-01-27T17:25:49Z", "author": {"login": "Manno15"}, "path": "shell/src/test/java/org/apache/accumulo/shell/commands/HistoryCommandTest.java", "diffHunk": "@@ -56,38 +62,41 @@ public void setUp() throws Exception {\n     expect(cl.hasOption(\"np\")).andReturn(true);\n     replay(cl);\n \n-    History history = new MemoryHistory();\n+    History history = new DefaultHistory();\n     history.add(\"foo\");\n     history.add(\"bar\");\n \n     baos = new ByteArrayOutputStream();\n \n     String input = String.format(\"!1%n\"); // Construct a platform dependent new-line\n-    reader = new ConsoleReader(new ByteArrayInputStream(input.getBytes()), baos);\n-    reader.setHistory(history);\n+    terminal = TerminalBuilder.builder().system(false)\n+        .streams(new ByteArrayInputStream(input.getBytes()), baos).build();\n+    reader = LineReaderBuilder.builder().history(history).terminal(terminal).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzMjkyNA=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQ1NjYxNg==", "bodyText": "Makes sense! Thanks for the explanation.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r566456616", "createdAt": "2021-01-28T22:40:32Z", "author": {"login": "ctubbsii"}, "path": "shell/src/test/java/org/apache/accumulo/shell/commands/HistoryCommandTest.java", "diffHunk": "@@ -56,38 +62,41 @@ public void setUp() throws Exception {\n     expect(cl.hasOption(\"np\")).andReturn(true);\n     replay(cl);\n \n-    History history = new MemoryHistory();\n+    History history = new DefaultHistory();\n     history.add(\"foo\");\n     history.add(\"bar\");\n \n     baos = new ByteArrayOutputStream();\n \n     String input = String.format(\"!1%n\"); // Construct a platform dependent new-line\n-    reader = new ConsoleReader(new ByteArrayInputStream(input.getBytes()), baos);\n-    reader.setHistory(history);\n+    terminal = TerminalBuilder.builder().system(false)\n+        .streams(new ByteArrayInputStream(input.getBytes()), baos).build();\n+    reader = LineReaderBuilder.builder().history(history).terminal(terminal).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzMjkyNA=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzY0MTQ1OnYy", "diffSide": "RIGHT", "path": "shell/src/test/java/org/apache/accumulo/shell/ShellConfigTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMTowODoxM1rOIaquNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNzoyOTo1MVrOIbTP4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzMzg0Nw==", "bodyText": "Is it safe to use the impl here? Doing so seems fragile.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564833847", "createdAt": "2021-01-26T21:08:13Z", "author": {"login": "ctubbsii"}, "path": "shell/src/test/java/org/apache/accumulo/shell/ShellConfigTest.java", "diffHunk": "@@ -29,14 +29,14 @@\n import java.io.PrintStream;\n import java.nio.file.Files;\n \n+import org.jline.reader.impl.LineReaderImpl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ5NzgyNQ==", "bodyText": "I forgot to update this test to use a dumb terminal like the other tests.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565497825", "createdAt": "2021-01-27T17:29:51Z", "author": {"login": "Manno15"}, "path": "shell/src/test/java/org/apache/accumulo/shell/ShellConfigTest.java", "diffHunk": "@@ -29,14 +29,14 @@\n import java.io.PrintStream;\n import java.nio.file.Files;\n \n+import org.jline.reader.impl.LineReaderImpl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzMzg0Nw=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzY0NTU3OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/format/DeleterFormatter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMTowOToyMFrOIaqwwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMTo1MjoxN1rOIbz-Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzNDQ5Nw==", "bodyText": "Which one? Why? Can it be fixed?", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564834497", "createdAt": "2021-01-26T21:09:20Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/format/DeleterFormatter.java", "diffHunk": "@@ -79,33 +79,36 @@ public String next() {\n     Mutation m = new Mutation(key.getRow());\n     String entryStr = formatEntry(next, isDoTimestamps());\n     boolean delete = force;\n-    try {\n-      if (!force) {\n-        shellState.getReader().flush();\n+    if (!force) {\n+      try {\n+        shellState.getWriter().flush();\n+        // this will cause end of file Exception for one of the formatter tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM1MDM1Ng==", "bodyText": "This is related to the other comment you mentioned in the DeleterFormatterTest. I will have to refresh my memory on it a bit.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565350356", "createdAt": "2021-01-27T14:27:07Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/format/DeleterFormatter.java", "diffHunk": "@@ -79,33 +79,36 @@ public String next() {\n     Mutation m = new Mutation(key.getRow());\n     String entryStr = formatEntry(next, isDoTimestamps());\n     boolean delete = force;\n-    try {\n-      if (!force) {\n-        shellState.getReader().flush();\n+    if (!force) {\n+      try {\n+        shellState.getWriter().flush();\n+        // this will cause end of file Exception for one of the formatter tests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzNDQ5Nw=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM1ODQ4OA==", "bodyText": "the failure happens on line 86 where it tries to read the delete prompt.  When DeleterFormatterTest.testNoConfirmation() is ran, it hits that line but gets an end of file marker instead.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565358488", "createdAt": "2021-01-27T14:37:07Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/format/DeleterFormatter.java", "diffHunk": "@@ -79,33 +79,36 @@ public String next() {\n     Mutation m = new Mutation(key.getRow());\n     String entryStr = formatEntry(next, isDoTimestamps());\n     boolean delete = force;\n-    try {\n-      if (!force) {\n-        shellState.getReader().flush();\n+    if (!force) {\n+      try {\n+        shellState.getWriter().flush();\n+        // this will cause end of file Exception for one of the formatter tests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzNDQ5Nw=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQwODQyMg==", "bodyText": "It is possible that Jline3 changed something behind the scenes. On the main branch, line returns null when trying to read the prompt. Currently, it reads the end of file. Not sure what the best approach to fix it yet but I am trying to get it to where it returns null.\nEDIT: Looks like the EndOfFile Exception is new to jline3 and is thrown by readLine now. I should have noticed that difference earlier. Not sure the best way to adapt DeleterFormatter to take that into consideration.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565408422", "createdAt": "2021-01-27T15:36:23Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/format/DeleterFormatter.java", "diffHunk": "@@ -79,33 +79,36 @@ public String next() {\n     Mutation m = new Mutation(key.getRow());\n     String entryStr = formatEntry(next, isDoTimestamps());\n     boolean delete = force;\n-    try {\n-      if (!force) {\n-        shellState.getReader().flush();\n+    if (!force) {\n+      try {\n+        shellState.getWriter().flush();\n+        // this will cause end of file Exception for one of the formatter tests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzNDQ5Nw=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjAzNDAyMw==", "bodyText": "I added a potential fix for this in my latest commit. It is probably good enough without completely rewriting DeleterFormatter", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r566034023", "createdAt": "2021-01-28T11:52:17Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/format/DeleterFormatter.java", "diffHunk": "@@ -79,33 +79,36 @@ public String next() {\n     Mutation m = new Mutation(key.getRow());\n     String entryStr = formatEntry(next, isDoTimestamps());\n     boolean delete = force;\n-    try {\n-      if (!force) {\n-        shellState.getReader().flush();\n+    if (!force) {\n+      try {\n+        shellState.getWriter().flush();\n+        // this will cause end of file Exception for one of the formatter tests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzNDQ5Nw=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzY2MjA1OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/commands/HistoryCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMToxNDoyMVrOIaq7Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNzo1NDo1N1rOIbUUiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzNzE4Ng==", "bodyText": "It looks like Iterator was used here previously because .entries() returned a type of Iterator. However, it now looks like .getHistory() returns a type of Iterable, which gives an opportunity to write this differently, using Java streams or something, and to avoid the use of Guava's Iterators.transform() in favor of Java built-ins. It's not important, though. It's fine either way.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564837186", "createdAt": "2021-01-26T21:14:21Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/HistoryCommand.java", "diffHunk": "@@ -39,11 +39,11 @@\n   public int execute(final String fullCommand, final CommandLine cl, final Shell shellState)\n       throws IOException {\n     if (cl.hasOption(clearHist.getOpt())) {\n-      shellState.getReader().getHistory().clear();\n+      shellState.getReader().getHistory().purge();\n     } else {\n-      Iterator<Entry> source = shellState.getReader().getHistory().entries();\n+      Iterator<History.Entry> source = shellState.getReader().getHistory().iterator();\n       Iterator<String> historyIterator = Iterators.transform(source,\n-          input -> String.format(\"%d: %s\", input.index() + 1, input.value()));\n+          input -> String.format(\"%d: %s\", input.index() + 1, input.line()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTUxNTQwMw==", "bodyText": "This is something I can look for additional work after this PR. I did briefly look at trying to implement it and noticed a decent amount of code to change at where we interpret the results and print to shell.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565515403", "createdAt": "2021-01-27T17:54:57Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/HistoryCommand.java", "diffHunk": "@@ -39,11 +39,11 @@\n   public int execute(final String fullCommand, final CommandLine cl, final Shell shellState)\n       throws IOException {\n     if (cl.hasOption(clearHist.getOpt())) {\n-      shellState.getReader().getHistory().clear();\n+      shellState.getReader().getHistory().purge();\n     } else {\n-      Iterator<Entry> source = shellState.getReader().getHistory().entries();\n+      Iterator<History.Entry> source = shellState.getReader().getHistory().iterator();\n       Iterator<String> historyIterator = Iterators.transform(source,\n-          input -> String.format(\"%d: %s\", input.index() + 1, input.value()));\n+          input -> String.format(\"%d: %s\", input.index() + 1, input.line()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzNzE4Ng=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzY2NTg4OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/commands/HiddenCommand.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMToxNTozM1rOIaq9xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNjo0OTo1NlrOIbRbKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzNzgyOA==", "bodyText": "Have you tested the bell to make sure it actually rings? (might depend on your local development environment).", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564837828", "createdAt": "2021-01-26T21:15:33Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/HiddenCommand.java", "diffHunk": "@@ -42,9 +43,9 @@ public String description() {\n   public int execute(final String fullCommand, final CommandLine cl, final Shell shellState)\n       throws Exception {\n     if (rand.nextInt(10) == 0) {\n-      shellState.getReader().beep();\n-      shellState.getReader().println();\n-      shellState.getReader()\n+      shellState.getTerminal().puts(InfoCmp.Capability.bell);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTIzOTczOA==", "bodyText": "I have not but I will try on my end. This was how the devs on the mailing list said to do it. I never heard the bell on the old shell so I am not sure if I will hear this one.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565239738", "createdAt": "2021-01-27T11:37:45Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/HiddenCommand.java", "diffHunk": "@@ -42,9 +43,9 @@ public String description() {\n   public int execute(final String fullCommand, final CommandLine cl, final Shell shellState)\n       throws Exception {\n     if (rand.nextInt(10) == 0) {\n-      shellState.getReader().beep();\n-      shellState.getReader().println();\n-      shellState.getReader()\n+      shellState.getTerminal().puts(InfoCmp.Capability.bell);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzNzgyOA=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQzNTE4NQ==", "bodyText": "The bell should be the same one you hear in Linux if you got backspace repeatedly on an empty line. If you can't hear it by trying that, then it's probably configurable in your system sound settings to enable it.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565435185", "createdAt": "2021-01-27T16:08:35Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/HiddenCommand.java", "diffHunk": "@@ -42,9 +43,9 @@ public String description() {\n   public int execute(final String fullCommand, final CommandLine cl, final Shell shellState)\n       throws Exception {\n     if (rand.nextInt(10) == 0) {\n-      shellState.getReader().beep();\n-      shellState.getReader().println();\n-      shellState.getReader()\n+      shellState.getTerminal().puts(InfoCmp.Capability.bell);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzNzgyOA=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ2Nzk0NQ==", "bodyText": "Confirmed that the bell is there with these changes. Had to do a bit of settings adjustments in my terminal to make it audible.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565467945", "createdAt": "2021-01-27T16:49:56Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/HiddenCommand.java", "diffHunk": "@@ -42,9 +43,9 @@ public String description() {\n   public int execute(final String fullCommand, final CommandLine cl, final Shell shellState)\n       throws Exception {\n     if (rand.nextInt(10) == 0) {\n-      shellState.getReader().beep();\n-      shellState.getReader().println();\n-      shellState.getReader()\n+      shellState.getTerminal().puts(InfoCmp.Capability.bell);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzNzgyOA=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzY3OTI3OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/ShellCompletor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMToxODo0OVrOIarFog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxODowMjo1MlrOIbUqQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzOTg0Mg==", "bodyText": "These warning suppressions might not make sense anymore, now that you've added the appropriate generics to the candidates list.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564839842", "createdAt": "2021-01-26T21:18:49Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/ShellCompletor.java", "diffHunk": "@@ -45,13 +48,16 @@ public ShellCompletor(Token rootToken, Map<CompletionSet,Set<String>> options) {\n \n   @Override\n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTUyMDk2Mg==", "bodyText": "Removed in the latest commit", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565520962", "createdAt": "2021-01-27T18:02:52Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/ShellCompletor.java", "diffHunk": "@@ -45,13 +48,16 @@ public ShellCompletor(Token rootToken, Map<CompletionSet,Set<String>> options) {\n \n   @Override\n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgzOTg0Mg=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzY5Mzk0OnYy", "diffSide": "LEFT", "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMToyMzowNlrOIarOug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxMjo0NjoxM1rOIcii5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg0MjE3MA==", "bodyText": "This println previously existed, so the user's bash shell or whatever, wouldn't print its prompt at the end of Accumulo's prompt, when existing by closing the input stream. I assume by removing this println, that no longer occurs? If it does, that should probably be put back.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r564842170", "createdAt": "2021-01-26T21:23:06Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "diffHunk": "@@ -584,40 +586,39 @@ public int start() throws IOException {\n \n         // If tab completion is true we need to reset\n         if (tabCompletion) {\n-          if (userCompletor != null) {\n-            reader.removeCompleter(userCompletor);\n-          }\n-\n           userCompletor = setupCompletion();\n-          reader.addCompleter(userCompletor);\n+          ((LineReaderImpl) reader).setCompleter(userCompletor);\n         }\n \n-        reader.setPrompt(getDefaultPrompt());\n-        input = reader.readLine();\n+        input = reader.readLine(getDefaultPrompt());\n         if (input == null) {\n-          reader.println();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTUzMzg3OQ==", "bodyText": "I don't believe this still occurs but I will add it back because I don't have a great way to test and a println doesn't hurt. I also just noticed that CTRL-D will throw an EndOfFileException if I do it on a blank line so I'll add a catch for that exception. This might make that if statement redundant if that is the only situation input could be null.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r565533879", "createdAt": "2021-01-27T18:22:14Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "diffHunk": "@@ -584,40 +586,39 @@ public int start() throws IOException {\n \n         // If tab completion is true we need to reset\n         if (tabCompletion) {\n-          if (userCompletor != null) {\n-            reader.removeCompleter(userCompletor);\n-          }\n-\n           userCompletor = setupCompletion();\n-          reader.addCompleter(userCompletor);\n+          ((LineReaderImpl) reader).setCompleter(userCompletor);\n         }\n \n-        reader.setPrompt(getDefaultPrompt());\n-        input = reader.readLine();\n+        input = reader.readLine(getDefaultPrompt());\n         if (input == null) {\n-          reader.println();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg0MjE3MA=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQ1NjA2MQ==", "bodyText": "I don't believe this still occurs but I will add it back because I don't have a great way to test and a println doesn't hurt.\n\nManually/visual testing for this is sufficient.\n\nI also just noticed that CTRL-D will throw an EndOfFileException if I do it on a blank line so I'll add a catch for that exception. This might make that if statement redundant if that is the only situation input could be null.\n\nHmm, yeah, if it's causing that to explicitly be thrown, then it might be redundant. Handling it by catching the exception is much more clear. As long as the output doesn't get jumbled, and we get a new line when Ctrl-D is entered, I'm not too concerned about how the handling is implemented, as long as the behavior works.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r566456061", "createdAt": "2021-01-28T22:39:18Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "diffHunk": "@@ -584,40 +586,39 @@ public int start() throws IOException {\n \n         // If tab completion is true we need to reset\n         if (tabCompletion) {\n-          if (userCompletor != null) {\n-            reader.removeCompleter(userCompletor);\n-          }\n-\n           userCompletor = setupCompletion();\n-          reader.addCompleter(userCompletor);\n+          ((LineReaderImpl) reader).setCompleter(userCompletor);\n         }\n \n-        reader.setPrompt(getDefaultPrompt());\n-        input = reader.readLine();\n+        input = reader.readLine(getDefaultPrompt());\n         if (input == null) {\n-          reader.println();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg0MjE3MA=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njc0NDI1OQ==", "bodyText": "I will do more testing to confirm then push out my findings, CTRL-D for sure is hit by the exception and everything looks good there. I just need to make sure there is no other case input will equal null and to see what happens if something like that does happen.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r566744259", "createdAt": "2021-01-29T11:04:23Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "diffHunk": "@@ -584,40 +586,39 @@ public int start() throws IOException {\n \n         // If tab completion is true we need to reset\n         if (tabCompletion) {\n-          if (userCompletor != null) {\n-            reader.removeCompleter(userCompletor);\n-          }\n-\n           userCompletor = setupCompletion();\n-          reader.addCompleter(userCompletor);\n+          ((LineReaderImpl) reader).setCompleter(userCompletor);\n         }\n \n-        reader.setPrompt(getDefaultPrompt());\n-        input = reader.readLine();\n+        input = reader.readLine(getDefaultPrompt());\n         if (input == null) {\n-          reader.println();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg0MjE3MA=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njc5NzAzMQ==", "bodyText": "From my testing, there is no reasonable way for a user to make input null beyond hitting CTRL-D, which sends a EOF exception. I interpret that as the user wanting to exit (which is standard for BASH but we can change that if we want). My latest commit reflects that idea.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r566797031", "createdAt": "2021-01-29T12:46:13Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/Shell.java", "diffHunk": "@@ -584,40 +586,39 @@ public int start() throws IOException {\n \n         // If tab completion is true we need to reset\n         if (tabCompletion) {\n-          if (userCompletor != null) {\n-            reader.removeCompleter(userCompletor);\n-          }\n-\n           userCompletor = setupCompletion();\n-          reader.addCompleter(userCompletor);\n+          ((LineReaderImpl) reader).setCompleter(userCompletor);\n         }\n \n-        reader.setPrompt(getDefaultPrompt());\n-        input = reader.readLine();\n+        input = reader.readLine(getDefaultPrompt());\n         if (input == null) {\n-          reader.println();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg0MjE3MA=="}, "originalCommit": {"oid": "61a1755547fc0f9fd6290eb4abe704b775657618"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2ODA3NjczOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/format/DeleterFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMjozNTowNlrOIcNmug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxMTowMjoyOVrOIcfRBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQ1Mzk0Ng==", "bodyText": "I think this suggestion was made previously, but may have been overlooked.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  delete = line != null && (line.equalsIgnoreCase(\"y\") || line.equalsIgnoreCase(\"yes\"));\n          \n          \n            \n                  delete = more && (line.equalsIgnoreCase(\"y\") || line.equalsIgnoreCase(\"yes\"));", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r566453946", "createdAt": "2021-01-28T22:35:06Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/format/DeleterFormatter.java", "diffHunk": "@@ -79,33 +79,36 @@ public String next() {\n     Mutation m = new Mutation(key.getRow());\n     String entryStr = formatEntry(next, isDoTimestamps());\n     boolean delete = force;\n-    try {\n-      if (!force) {\n-        shellState.getReader().flush();\n-        String line = shellState.getReader().readLine(\"Delete { \" + entryStr + \" } ? \");\n-        more = line != null;\n-        delete = line != null && (line.equalsIgnoreCase(\"y\") || line.equalsIgnoreCase(\"yes\"));\n+    String line;\n+    if (!force) {\n+      try {\n+        shellState.getWriter().flush();\n+        String prompt = \"Delete { \" + entryStr + \" } ? \";\n+        line = shellState.getReader().readLine(prompt);\n+      } catch (EndOfFileException ignored) {\n+        // Reached the end of file. Line is null to keep old functionality.\n+        line = null;\n       }\n-      if (delete) {\n-        m.putDelete(key.getColumnFamily(), key.getColumnQualifier(),\n-            new ColumnVisibility(key.getColumnVisibility()), key.getTimestamp());\n-        try {\n-          writer.addMutation(m);\n-        } catch (MutationsRejectedException e) {\n-          log.error(e.toString());\n-          if (Shell.log.isTraceEnabled()) {\n-            for (ConstraintViolationSummary cvs : e.getConstraintViolationSummaries()) {\n-              log.trace(cvs.toString());\n-            }\n+      more = line != null;\n+      delete = line != null && (line.equalsIgnoreCase(\"y\") || line.equalsIgnoreCase(\"yes\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4af962b245021735f31b96baccf744d7c67198f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njc0MzMwMA==", "bodyText": "You are correct. I will add that in.", "url": "https://github.com/apache/accumulo/pull/1824#discussion_r566743300", "createdAt": "2021-01-29T11:02:29Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/format/DeleterFormatter.java", "diffHunk": "@@ -79,33 +79,36 @@ public String next() {\n     Mutation m = new Mutation(key.getRow());\n     String entryStr = formatEntry(next, isDoTimestamps());\n     boolean delete = force;\n-    try {\n-      if (!force) {\n-        shellState.getReader().flush();\n-        String line = shellState.getReader().readLine(\"Delete { \" + entryStr + \" } ? \");\n-        more = line != null;\n-        delete = line != null && (line.equalsIgnoreCase(\"y\") || line.equalsIgnoreCase(\"yes\"));\n+    String line;\n+    if (!force) {\n+      try {\n+        shellState.getWriter().flush();\n+        String prompt = \"Delete { \" + entryStr + \" } ? \";\n+        line = shellState.getReader().readLine(prompt);\n+      } catch (EndOfFileException ignored) {\n+        // Reached the end of file. Line is null to keep old functionality.\n+        line = null;\n       }\n-      if (delete) {\n-        m.putDelete(key.getColumnFamily(), key.getColumnQualifier(),\n-            new ColumnVisibility(key.getColumnVisibility()), key.getTimestamp());\n-        try {\n-          writer.addMutation(m);\n-        } catch (MutationsRejectedException e) {\n-          log.error(e.toString());\n-          if (Shell.log.isTraceEnabled()) {\n-            for (ConstraintViolationSummary cvs : e.getConstraintViolationSummaries()) {\n-              log.trace(cvs.toString());\n-            }\n+      more = line != null;\n+      delete = line != null && (line.equalsIgnoreCase(\"y\") || line.equalsIgnoreCase(\"yes\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQ1Mzk0Ng=="}, "originalCommit": {"oid": "e4af962b245021735f31b96baccf744d7c67198f"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4007, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}