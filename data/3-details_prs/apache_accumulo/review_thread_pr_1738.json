{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MTg2NzQz", "number": 1738, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTozODo1NFrOEuDmuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo1MTozN1rOEuD89A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzI5MDE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/volume/Volume.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTozODo1NFrOHiOExA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo1MzozNVrOHiOt7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NDIyOA==", "bodyText": "It looks like you are just clarifying what should be in the string parameter and did not change the behavior correct?", "url": "https://github.com/apache/accumulo/pull/1738#discussion_r505644228", "createdAt": "2020-10-15T15:38:54Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/volume/Volume.java", "diffHunk": "@@ -38,26 +38,25 @@\n   String getBasePath();\n \n   /**\n-   * Convert the given Path into a Path that is relative to the base path for this Volume\n+   * Convert the given child path into a Path that is relative to the base path for this Volume. The\n+   * supplied path should not include any scheme (such as <code>file:</code> or <code>hdfs:</code>),\n+   * and should not contain any relative path \"breakout\" patterns, such as <code>../</code>. If the\n+   * path begins with a single slash, it will be preserved while prefixing this volume. If it does\n+   * not begin with a single slash, one will be inserted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f56442220df5bb45f16a3d28adb3dc061be5881"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1NDc2NA==", "bodyText": "The only behavior change is the stricter checking of params. Previously, it wouldn't work right... if you passed in a param that had a leading slash, it would not prefix it correctly.", "url": "https://github.com/apache/accumulo/pull/1738#discussion_r505654764", "createdAt": "2020-10-15T15:53:35Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/volume/Volume.java", "diffHunk": "@@ -38,26 +38,25 @@\n   String getBasePath();\n \n   /**\n-   * Convert the given Path into a Path that is relative to the base path for this Volume\n+   * Convert the given child path into a Path that is relative to the base path for this Volume. The\n+   * supplied path should not include any scheme (such as <code>file:</code> or <code>hdfs:</code>),\n+   * and should not contain any relative path \"breakout\" patterns, such as <code>../</code>. If the\n+   * path begins with a single slash, it will be preserved while prefixing this volume. If it does\n+   * not begin with a single slash, one will be inserted.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NDIyOA=="}, "originalCommit": {"oid": "8f56442220df5bb45f16a3d28adb3dc061be5881"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzMxMTk4OnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo0Mzo0M1rOHiOSZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo0Mzo0M1rOHiOSZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NzcxNg==", "bodyText": "Nice, this is much more clear.", "url": "https://github.com/apache/accumulo/pull/1738#discussion_r505647716", "createdAt": "2020-10-15T15:43:43Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManager.java", "diffHunk": "@@ -179,12 +179,14 @@ void bulkRename(Map<Path,Path> oldToNewPathMap, int poolSize, String poolName,\n   boolean canSyncAndFlush(Path path);\n \n   /**\n-   * Fetch the default Volume\n+   * Fetch the first configured instance Volume\n    */\n-  Volume getDefaultVolume();\n+  default Volume getFirst() {\n+    return getVolumes().iterator().next();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f56442220df5bb45f16a3d28adb3dc061be5881"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzMzOTEwOnYy", "diffSide": "LEFT", "path": "server/manager/src/main/java/org/apache/accumulo/master/FateServiceHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo0OTo0OFrOHiOjMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo1NTowNFrOHiOyTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1MjAxNg==", "bodyText": "Any idea why this temp file was created? Sounds like it was created to help with failover somewhere.", "url": "https://github.com/apache/accumulo/pull/1738#discussion_r505652016", "createdAt": "2020-10-15T15:49:48Z", "author": {"login": "milleruntime"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/FateServiceHandler.java", "diffHunk": "@@ -779,65 +781,37 @@ private String validateNewNamespaceArgument(ByteBuffer namespaceArg, TableOperat\n   /**\n    * Create a file on the file system to hold the splits to be created at table creation.\n    */\n-  private String writeSplitsToFile(final long opid, final List<ByteBuffer> arguments,\n+  private void writeSplitsToFile(Path splitsPath, final List<ByteBuffer> arguments,\n       final int splitCount, final int splitOffset) throws IOException {\n-    String opidStr = String.format(\"%016x\", opid);\n-    String splitsPath = getSplitPath(\"/tmp/splits-\" + opidStr);\n-    removeAndCreateTempFile(splitsPath);\n-    try (FSDataOutputStream stream = master.getOutputStream(splitsPath)) {\n-      writeSplitsToFileSystem(stream, arguments, splitCount, splitOffset);\n+    FileSystem fs = splitsPath.getFileSystem(master.getContext().getHadoopConf());\n+    try (FSDataOutputStream stream = fs.create(splitsPath)) {\n+      // base64 encode because splits can contain binary\n+      for (int i = splitOffset; i < splitCount + splitOffset; i++) {\n+        byte[] splitBytes = ByteBufferUtil.toBytes(arguments.get(i));\n+        String encodedSplit = Base64.getEncoder().encodeToString(splitBytes);\n+        stream.writeBytes(encodedSplit + '\\n');\n+      }\n     } catch (IOException e) {\n-      log.error(\"Error in FateServiceHandler while writing splits for opid: \" + opidStr + \": \"\n-          + e.getMessage());\n+      log.error(\"Error in FateServiceHandler while writing splits to {}: {}\", splitsPath,\n+          e.getMessage());\n       throw e;\n     }\n-    return splitsPath;\n-  }\n-\n-  /**\n-   * Always check for and delete the splits file if it exists to prevent issues in case of server\n-   * failure and/or FateServiceHandler retries.\n-   */\n-  private void removeAndCreateTempFile(String path) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f56442220df5bb45f16a3d28adb3dc061be5881"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1NTg4NA==", "bodyText": "This was part of the CreateTable FaTE operation if you created a pre-split table. It would delete the file so it could get recreated. I inline'd this and changed it to create a directory in mkTempDir instead.", "url": "https://github.com/apache/accumulo/pull/1738#discussion_r505655884", "createdAt": "2020-10-15T15:55:04Z", "author": {"login": "ctubbsii"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/FateServiceHandler.java", "diffHunk": "@@ -779,65 +781,37 @@ private String validateNewNamespaceArgument(ByteBuffer namespaceArg, TableOperat\n   /**\n    * Create a file on the file system to hold the splits to be created at table creation.\n    */\n-  private String writeSplitsToFile(final long opid, final List<ByteBuffer> arguments,\n+  private void writeSplitsToFile(Path splitsPath, final List<ByteBuffer> arguments,\n       final int splitCount, final int splitOffset) throws IOException {\n-    String opidStr = String.format(\"%016x\", opid);\n-    String splitsPath = getSplitPath(\"/tmp/splits-\" + opidStr);\n-    removeAndCreateTempFile(splitsPath);\n-    try (FSDataOutputStream stream = master.getOutputStream(splitsPath)) {\n-      writeSplitsToFileSystem(stream, arguments, splitCount, splitOffset);\n+    FileSystem fs = splitsPath.getFileSystem(master.getContext().getHadoopConf());\n+    try (FSDataOutputStream stream = fs.create(splitsPath)) {\n+      // base64 encode because splits can contain binary\n+      for (int i = splitOffset; i < splitCount + splitOffset; i++) {\n+        byte[] splitBytes = ByteBufferUtil.toBytes(arguments.get(i));\n+        String encodedSplit = Base64.getEncoder().encodeToString(splitBytes);\n+        stream.writeBytes(encodedSplit + '\\n');\n+      }\n     } catch (IOException e) {\n-      log.error(\"Error in FateServiceHandler while writing splits for opid: \" + opidStr + \": \"\n-          + e.getMessage());\n+      log.error(\"Error in FateServiceHandler while writing splits to {}: {}\", splitsPath,\n+          e.getMessage());\n       throw e;\n     }\n-    return splitsPath;\n-  }\n-\n-  /**\n-   * Always check for and delete the splits file if it exists to prevent issues in case of server\n-   * failure and/or FateServiceHandler retries.\n-   */\n-  private void removeAndCreateTempFile(String path) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1MjAxNg=="}, "originalCommit": {"oid": "8f56442220df5bb45f16a3d28adb3dc061be5881"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzM0NzA4OnYy", "diffSide": "RIGHT", "path": "server/manager/src/main/java/org/apache/accumulo/master/tableOps/Utils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo1MTozN1rOHiOoNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo1NTozOFrOHiO0Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1MzMwMw==", "bodyText": "Looks like the comments are outdated now that you changed the parameters.", "url": "https://github.com/apache/accumulo/pull/1738#discussion_r505653303", "createdAt": "2020-10-15T15:51:37Z", "author": {"login": "milleruntime"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/tableOps/Utils.java", "diffHunk": "@@ -198,19 +197,21 @@ public static void checkNamespaceDoesNotExist(ServerContext context, String name\n    * Given an input stream and a flag indicating if the file info is base64 encoded or not, retrieve\n    * the data from a file on the file system. It is assumed that the file is textual and not binary\n    * data.\n+   *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f56442220df5bb45f16a3d28adb3dc061be5881"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1NjM1MA==", "bodyText": "Oh, probably. I can check.", "url": "https://github.com/apache/accumulo/pull/1738#discussion_r505656350", "createdAt": "2020-10-15T15:55:38Z", "author": {"login": "ctubbsii"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/tableOps/Utils.java", "diffHunk": "@@ -198,19 +197,21 @@ public static void checkNamespaceDoesNotExist(ServerContext context, String name\n    * Given an input stream and a flag indicating if the file info is base64 encoded or not, retrieve\n    * the data from a file on the file system. It is assumed that the file is textual and not binary\n    * data.\n+   *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1MzMwMw=="}, "originalCommit": {"oid": "8f56442220df5bb45f16a3d28adb3dc061be5881"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4067, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}