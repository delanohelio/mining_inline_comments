{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NzM2NjM1", "number": 1798, "title": "Hash upgrade", "bodyText": "Switch to crypt(3) hashing when storing user passwords in zk\nExtending authentication to recognize users with outdated hash and after a warning at startup update them on successful authentication.", "createdAt": "2020-11-20T14:20:12Z", "url": "https://github.com/apache/accumulo/pull/1798", "merged": true, "mergeCommit": {"oid": "c2c47b3127fa897edfad125687fc08b4821d9541"}, "closed": true, "closedAt": "2020-12-08T21:35:31Z", "author": {"login": "BukrosSzabolcs"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdddWF6gH2gAyNTI0NzM2NjM1OmY4YmEyMjE0MjRmNTQ2ODhhMjBhNzJkNWM3ODU2OTIwYjNhMGQ1NTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkPaPmgH2gAyNTI0NzM2NjM1OmQ0MjZhNGZkNjM2ZWY2M2M0M2E4NGI4ZmY1ZDI5ZTA1MTdlMzVhNWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f8ba221424f54688a20a72d5c7856920b3a0d555", "author": {"user": null}, "url": "https://github.com/apache/accumulo/commit/f8ba221424f54688a20a72d5c7856920b3a0d555", "committedDate": "2020-11-17T17:52:25Z", "message": "Upgrade PW_HASH_ALGORITHM\n\nThe use of less robust hashes would prevent a system deploying Accumulo\nfrom meeting FIPS requirements so by updating it we avoid forcing\ndownstream users seeking FIPS certification from getting an exception."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "603d1933d250c77bdd5987dcbcf89b0c2514b4b9", "author": {"user": null}, "url": "https://github.com/apache/accumulo/commit/603d1933d250c77bdd5987dcbcf89b0c2514b4b9", "committedDate": "2020-11-20T14:13:45Z", "message": "Ability to update password hash\n\nSwitch to crypt(3) hashing when storing user passwords in zk\nExtending authentication to recognize users with outdated hash and\nupdate them on successful authentication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebed3839c09ab1cbab087e719a4d414f8008fbd5", "author": {"user": null}, "url": "https://github.com/apache/accumulo/commit/ebed3839c09ab1cbab087e719a4d414f8008fbd5", "committedDate": "2020-11-20T14:23:32Z", "message": "Hash upgrade\n\nadd missing return"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f7c48d1fe5be07512fec8f0b7313fa505586a0e", "author": {"user": null}, "url": "https://github.com/apache/accumulo/commit/8f7c48d1fe5be07512fec8f0b7313fa505586a0e", "committedDate": "2020-11-20T15:12:59Z", "message": "Hash upgrade\n\nfix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d71c162ad1e9e684e7c59ba5b734fef9b6455513", "author": {"user": null}, "url": "https://github.com/apache/accumulo/commit/d71c162ad1e9e684e7c59ba5b734fef9b6455513", "committedDate": "2020-11-20T16:05:19Z", "message": "Hash upgrade\n\nfix checkstyle\nfix unsafe comparison of hash"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f", "author": {"user": null}, "url": "https://github.com/apache/accumulo/commit/4c8fedce90487c40ec4b740bc98dc181177cc71f", "committedDate": "2020-11-20T17:41:02Z", "message": "Hash upgrade\n\nanother checkstyle fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NDYzNDE0", "url": "https://github.com/apache/accumulo/pull/1798#pullrequestreview-536463414", "createdAt": "2020-11-23T13:19:02Z", "commit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzoxOTowMlrOH4NFTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzozNTo0N1rOH4NtcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjY1NA==", "bodyText": "since we aren't including any details about which user(s) are impacted, I'd rather we not get a WARN for each user. could we move this to after we finish iterating with a summary of how many users?\nIf an operator needed to move towards eliminating these warn messages, how would they get the list of users that need to authenticate to the system?", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528696654", "createdAt": "2020-11-23T13:19:02Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NzAyMA==", "bodyText": "log a DEBUG message with these details.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528697020", "createdAt": "2020-11-23T13:19:34Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");\n+          return;\n+        }\n+      });\n+    } catch (NullPointerException e) {\n+      // initializeSecurity was not called yet, there could be no outdated passwords stored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5Nzg2NQ==", "bodyText": "could we log a WARN message that this method has been used? that way it would show up in operator logs should we mistakenly use it in a non-test context.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528697865", "createdAt": "2020-11-23T13:20:54Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -116,6 +133,31 @@ public void createUser(String principal, AuthenticationToken token)\n     }\n   }\n \n+  /**\n+   * Creates user with outdated password hash for testing\n+   *\n+   * @deprecated since 2.1.0, only present for testing DO NOT USE!\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTgyMw==", "bodyText": "if we fail to update the password for some reason (like a transient zk write failure), at this point shouldn't we still return that they correctly authenticated?", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528699823", "createdAt": "2020-11-23T13:24:11Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -180,18 +222,43 @@ public boolean authenticateUser(String principal, AuthenticationToken token)\n     if (!(token instanceof PasswordToken))\n       throw new AccumuloSecurityException(principal, SecurityErrorCode.INVALID_TOKEN);\n     PasswordToken pt = (PasswordToken) token;\n-    byte[] pass;\n+    byte[] zkData;\n     String zpath = ZKUserPath + \"/\" + principal;\n-    pass = zooCache.get(zpath);\n-    boolean result = ZKSecurityTool.checkPass(pt.getPassword(), pass);\n+    zkData = zooCache.get(zpath);\n+    boolean result = authenticateUser(principal, pt, zkData);\n     if (!result) {\n       zooCache.clear(zpath);\n-      pass = zooCache.get(zpath);\n-      result = ZKSecurityTool.checkPass(pt.getPassword(), pass);\n+      zkData = zooCache.get(zpath);\n+      result = authenticateUser(principal, pt, zkData);\n     }\n     return result;\n   }\n \n+  private boolean authenticateUser(String principal, PasswordToken pt, byte[] zkData) {\n+    if (zkData == null) {\n+      return false;\n+    }\n+\n+    // if the hash does not match the outdated format use Crypt to verify it\n+    if (!ZKSecurityTool.isOutdatedPass(zkData)) {\n+      return ZKSecurityTool.checkCryptPass(pt.getPassword(), zkData);\n+    }\n+\n+    if (!ZKSecurityTool.checkPass(pt.getPassword(), zkData)) {\n+      // if password does not match we are done\n+      return false;\n+    }\n+\n+    // if the password is correct we have to update the stored hash with new algorithm\n+    try {\n+      changePassword(principal, pt);\n+      return true;\n+    } catch (AccumuloSecurityException e) {\n+      log.error(\"Failed to update hashed user password for user: {}\", principal, e);\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMTU5Mw==", "bodyText": "add a comment about why a new Charset instead of relying on StandardCharsets.UTF_8", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528701593", "createdAt": "2020-11-23T13:26:59Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -47,6 +49,7 @@\n class ZKSecurityTool {\n   private static final Logger log = LoggerFactory.getLogger(ZKSecurityTool.class);\n   private static final int SALT_LENGTH = 8;\n+  private static final Charset CRYPT_CHARSET = Charset.forName(\"UTF-8\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMzYzNw==", "bodyText": "just to make sure I understand the reasoning here, the removal of this check is because ZKSecurityTool is package private and all current calls ensure zkData isn't null?\nif that's correct please add javadocs that say zkData can't be null. an alternative is to leave the check in place and rely on the jit to optimize it away.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528703637", "createdAt": "2020-11-23T13:30:25Z", "author": {"login": "busbey"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -56,16 +59,26 @@\n     return salt;\n   }\n \n+  // only present for testing DO NOT USE!\n+  @Deprecated(since = \"2.1.0\")\n+  static byte[] createOutdatedPass(byte[] password) throws AccumuloException {\n+    byte[] salt = generateSalt();\n+    try {\n+      return convertPass(password, salt);\n+    } catch (NoSuchAlgorithmException e) {\n+      log.error(\"Count not create hashed password\", e);\n+      throw new AccumuloException(\"Count not create hashed password\", e);\n+    }\n+  }\n+\n   private static byte[] hash(byte[] raw) throws NoSuchAlgorithmException {\n-    MessageDigest md = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM);\n+    MessageDigest md = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM_OUTDATED);\n     md.update(raw);\n     return md.digest();\n   }\n \n+  @Deprecated(since = \"2.1.0\")\n   public static boolean checkPass(byte[] password, byte[] zkData) {\n-    if (zkData == null)\n-      return false;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNDQ3Mg==", "bodyText": "We still need this constant updated because we rely on it for hashing the system credentials? won't that prevent a rolling upgrade?\nCould we have system credentials fall back to SHA-256 with a warning? or require a configurable flag to switch it?", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528704472", "createdAt": "2020-11-23T13:31:49Z", "author": {"login": "busbey"}, "path": "core/src/main/java/org/apache/accumulo/core/Constants.java", "diffHunk": "@@ -99,7 +99,8 @@\n   public static final long SCANNER_DEFAULT_READAHEAD_THRESHOLD = 3L;\n \n   // Security configuration\n-  public static final String PW_HASH_ALGORITHM = \"SHA-256\";\n+  public static final String PW_HASH_ALGORITHM = \"SHA-512\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNjkyOQ==", "bodyText": "changing this is also going to change some non-security uses, e.g. we optionally use it to obscure values printed from rfile metrics gathering. We'll need to enumerate these and release note the change in behavior. (or we could make something like a NON_CRYPTO_USE_HASH_ALGORITHM that we keep as SHA-256)", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528706929", "createdAt": "2020-11-23T13:35:47Z", "author": {"login": "busbey"}, "path": "core/src/main/java/org/apache/accumulo/core/Constants.java", "diffHunk": "@@ -99,7 +99,8 @@\n   public static final long SCANNER_DEFAULT_READAHEAD_THRESHOLD = 3L;\n \n   // Security configuration\n-  public static final String PW_HASH_ALGORITHM = \"SHA-256\";\n+  public static final String PW_HASH_ALGORITHM = \"SHA-512\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNDQ3Mg=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NjY0NTcw", "url": "https://github.com/apache/accumulo/pull/1798#pullrequestreview-536664570", "createdAt": "2020-11-23T16:52:28Z", "commit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjo1MjoyOFrOH4WkSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzowNToxNFrOH4XGug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1MjA0MQ==", "bodyText": "One option is to provide the user name during these warnings. Another is to provide single warning, rather than one per user, and then provide some other mechanism to list outdated entries.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528852041", "createdAt": "2020-11-23T16:52:28Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjY1NA=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1MjYwMw==", "bodyText": "Could also avoid this by checking if the zk node exists first.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528852603", "createdAt": "2020-11-23T16:53:19Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");\n+          return;\n+        }\n+      });\n+    } catch (NullPointerException e) {\n+      // initializeSecurity was not called yet, there could be no outdated passwords stored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NzAyMA=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1ODYwNw==", "bodyText": "What's the advantage of using MessageDigest.isEqual, vs. comparing as Strings or comparing as the UTF-8 byte-array?", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528858607", "createdAt": "2020-11-23T17:01:45Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -99,6 +102,24 @@ public static boolean checkPass(byte[] password, byte[] zkData) {\n     return saltedHash; // contains salt+hash(password+salt)\n   }\n \n+  public static byte[] createPass(byte[] password) throws AccumuloException {\n+    // we rely on default algorithm and hash length (SHA-512 and 8 byte)\n+    String cryptHash = Crypt.crypt(password);\n+    return cryptHash.getBytes(CRYPT_CHARSET);\n+  }\n+\n+  public static boolean checkCryptPass(byte[] password, byte[] zkData) {\n+    String zkDataString = new String(zkData, CRYPT_CHARSET);\n+    String cryptHash;\n+    try {\n+      cryptHash = Crypt.crypt(password, zkDataString);\n+    } catch (IllegalArgumentException e) {\n+      log.error(\"Unrecognized hash format\", e);\n+      return false;\n+    }\n+    return MessageDigest.isEqual(zkData, cryptHash.getBytes(CRYPT_CHARSET));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1OTUwNg==", "bodyText": "You can simplify this JUnit test by just throwing this out of the method. JUnit will show the details of the exception in its logs.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528859506", "createdAt": "2020-11-23T17:03:10Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/test/java/org/apache/accumulo/server/security/handler/ZKAuthenticatorTest.java", "diffHunk": "@@ -88,14 +90,40 @@ public void testTableConversion() {\n \n   @Test\n   public void testEncryption() {\n+    byte[] rawPass = \"myPassword\".getBytes(Charset.forName(\"UTF-8\"));\n+    byte[] storedBytes;\n+    try {\n+      storedBytes = ZKSecurityTool.createPass(rawPass.clone());\n+      assertTrue(ZKSecurityTool.checkCryptPass(rawPass.clone(), storedBytes));\n+    } catch (AccumuloException e) {\n+      log.error(\"{}\", e.getMessage(), e);\n+      fail();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MDg1OA==", "bodyText": "If we can avoid running a full ZK instance using Mini, I think we should. I think ZKAuthenticator can be tested fully using unit tests with mocking, without a need to start up an instance of a cluster.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528860858", "createdAt": "2020-11-23T17:05:14Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/ZKAuthenticatorIT.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.nio.charset.Charset;\n+\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.apache.accumulo.harness.AccumuloClusterHarness;\n+import org.apache.accumulo.server.security.handler.ZKAuthenticator;\n+import org.junit.Test;\n+\n+public class ZKAuthenticatorIT extends AccumuloClusterHarness {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "author": {"user": null}, "url": "https://github.com/apache/accumulo/commit/b10b77a3de8a942374de90caafbbf52ce07dd0a1", "committedDate": "2020-11-24T18:14:35Z", "message": "Hash upgrade\n\nMoving outdated hash check to Master startup\nMaking hash used in SystemToken configurable\nReworking ZKAuthenticatorIT into unit tests\nother small changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODM4NTgw", "url": "https://github.com/apache/accumulo/pull/1798#pullrequestreview-537838580", "createdAt": "2020-11-24T19:29:38Z", "commit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOToyOTozOFrOH5SCsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDozMDozNVrOH5UDJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjQ4Mg==", "bodyText": "Since system credentials are not serialized anywhere, but we do want them to be a strong hash, I think it might be best to make use of crypt(3) here also, so we're using the default best hash available in the commons-codec library.\nWe can use a fixed salt for this. We could make the salt configurable or based on instance.secret, but there's no additional security added by doing so, since instance.secret is configurable and is already included in the message digest. So, a fixed salt would suffice here. If you're not interested in pursuing this, here, it can be done as a follow-on issue. Just let me know if that's the case, so I can create a new issue for it.\nAs you've identified, the one benefit to making it configurable and preserving the current one is to support rolling restart. However, we don't support rolling restarts very well already, and certainly not across major or minor releases, and we've likely already broken compatibility of that sort during 2.1's development (or will, if we upgrade Thrift). Also, I think having a strong has for the system user is important enough to break that, even if it did otherwise work. So, I'm inclined to favor not making it configurable.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529826482", "createdAt": "2020-11-24T19:29:38Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/SystemCredentials.java", "diffHunk": "@@ -103,7 +102,8 @@ private static SystemToken get(String instanceID, SiteConfiguration siteConfig)\n       byte[] confChecksum;\n       MessageDigest md;\n       try {\n-        md = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM);\n+        String hashAlgorithm = siteConfig.get(Property.SYSTEM_TOKEN_HASH_TYPE);\n+        md = MessageDigest.getInstance(hashAlgorithm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNzk4OA==", "bodyText": "If it makes more readable code in the callers (fewer negations), you could also flip the return values, and call this method areHashesCurrent() or similar.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529827988", "createdAt": "2020-11-24T19:32:12Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -54,6 +56,33 @@ public void initialize(ServerContext context) {\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n   }\n \n+  /**\n+   * Checks stored users and logs a warning containing the ones with outdated hashes.\n+   */\n+  public boolean hasOutdatedHashes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyODU5NA==", "bodyText": "Could inline this constant, to avoid the extra CRYPT_CHARSET variable and corresponding Charset import.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529828594", "createdAt": "2020-11-24T19:33:20Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -47,6 +51,7 @@\n class ZKSecurityTool {\n   private static final Logger log = LoggerFactory.getLogger(ZKSecurityTool.class);\n   private static final int SALT_LENGTH = 8;\n+  private static final Charset CRYPT_CHARSET = UTF_8;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MTkwOQ==", "bodyText": "Okay. Fair enough.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529841909", "createdAt": "2020-11-24T19:57:30Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -99,6 +102,24 @@ public static boolean checkPass(byte[] password, byte[] zkData) {\n     return saltedHash; // contains salt+hash(password+salt)\n   }\n \n+  public static byte[] createPass(byte[] password) throws AccumuloException {\n+    // we rely on default algorithm and hash length (SHA-512 and 8 byte)\n+    String cryptHash = Crypt.crypt(password);\n+    return cryptHash.getBytes(CRYPT_CHARSET);\n+  }\n+\n+  public static boolean checkCryptPass(byte[] password, byte[] zkData) {\n+    String zkDataString = new String(zkData, CRYPT_CHARSET);\n+    String cryptHash;\n+    try {\n+      cryptHash = Crypt.crypt(password, zkDataString);\n+    } catch (IllegalArgumentException e) {\n+      log.error(\"Unrecognized hash format\", e);\n+      return false;\n+    }\n+    return MessageDigest.isEqual(zkData, cryptHash.getBytes(CRYPT_CHARSET));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1ODYwNw=="}, "originalCommit": {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NzcxNA==", "bodyText": "See my other comment about not making this configurable. However, since it is configurable, it must be the same across all servers, or they won't be able to talk to each other. In general, that would mean making this an instance.* property. However, since the way we enforce these is through the same-ness of the system credentials, if this is different across the cluster, then they won't be able to talk to each other anyway. The other property prefix we use for system-wide properties that can be different are general.*.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529847714", "createdAt": "2020-11-24T20:08:26Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -83,6 +83,14 @@\n   RPC_SASL_QOP(\"rpc.sasl.qop\", \"auth\", PropertyType.STRING,\n       \"The quality of protection to be used with SASL. Valid values are 'auth', 'auth-int',\"\n           + \" and 'auth-conf'\"),\n+  /**\n+   * @since 2.1.0\n+   */\n+  SYSTEM_TOKEN_HASH_TYPE(\"system.token.hash.type\", Constants.PW_HASH_ALGORITHM_OUTDATED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg1MDQ2Mw==", "bodyText": "Since this use of the digest is specific to this specific metric utility's serialization, we can probably just use a local constant, rather than one in Constants.java (which I'd personally like to phase out over time).", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529850463", "createdAt": "2020-11-24T20:14:04Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java", "diffHunk": "@@ -136,12 +136,12 @@ public void printMetrics(boolean hash, String metricWord, PrintStream out) {\n         if (hash) {\n           String encodedKey = \"\";\n           try {\n-            byte[] encodedBytes = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM)\n+            byte[] encodedBytes = MessageDigest.getInstance(Constants.NON_CRYPTO_USE_HASH_ALGORITHM)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg1OTM2NA==", "bodyText": "It looks like we have this exact same algorithm for creating obscured tablet identifiers implemented in at least two places. Creating a new issue (#1805) to address that separately.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529859364", "createdAt": "2020-11-24T20:30:35Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/GetSplitsCommand.java", "diffHunk": "@@ -113,7 +113,7 @@ private static String encode(final boolean encode, final Text text) {\n   private static String obscuredTabletName(final KeyExtent extent) {\n     MessageDigest digester;\n     try {\n-      digester = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM);\n+      digester = MessageDigest.getInstance(Constants.NON_CRYPTO_USE_HASH_ALGORITHM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046", "author": {"user": null}, "url": "https://github.com/apache/accumulo/commit/1ccfe8fd1348ee1a6f661369e57d4836efe29046", "committedDate": "2020-11-25T15:20:20Z", "message": "Hash upgrade\n\nremove unused method\nrename security cred hash property\nuse inline charset constans\nseparate VisMetricsGatherer hashing from general solution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzIxOTQ5", "url": "https://github.com/apache/accumulo/pull/1798#pullrequestreview-538721949", "createdAt": "2020-11-25T17:34:49Z", "commit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMjYyMTEy", "url": "https://github.com/apache/accumulo/pull/1798#pullrequestreview-541262112", "createdAt": "2020-11-30T20:18:18Z", "commit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjEwMDU4", "url": "https://github.com/apache/accumulo/pull/1798#pullrequestreview-542210058", "createdAt": "2020-12-01T19:05:58Z", "commit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTowNTo1OFrOH87oqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTowNTo1OFrOH87oqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MzY3NQ==", "bodyText": "This is an odd one.  I am not sure what we are using the HASH to encrypt here.  If it is just to prevent leaking data then I think it would be OK to use the NON_CRYPTO_USE_HASH_ALGORITHM", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533653675", "createdAt": "2020-12-01T19:05:58Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java", "diffHunk": "@@ -47,6 +46,7 @@\n  */\n public class VisMetricsGatherer\n     implements MetricsGatherer<Map<String,ArrayList<VisibilityMetric>>> {\n+  static final String KEY_HASH_ALGORITHM = \"SHA-256\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzE4MTAy", "url": "https://github.com/apache/accumulo/pull/1798#pullrequestreview-542318102", "createdAt": "2020-12-01T21:39:21Z", "commit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozOToyMVrOH9AzmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozOToyMVrOH9AzmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczODM5Mg==", "bodyText": "I am wondering if this is the best place to validate all user creds.  On one hand, it may be better to do this for some situations every time Master starts up but on the other, it may be sufficient and more efficient to only check once on upgrade.", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533738392", "createdAt": "2020-12-01T21:39:21Z", "author": {"login": "milleruntime"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java", "diffHunk": "@@ -1178,6 +1178,9 @@ boolean canSuspendTablets() {\n       log.info(\"All metrics modules registered\");\n     }\n \n+    // checking stored user hashes if any of them uses an outdated algorithm\n+    security.validateStoredUserCreditentials();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzIzODc2", "url": "https://github.com/apache/accumulo/pull/1798#pullrequestreview-542323876", "createdAt": "2020-12-01T21:48:11Z", "commit": {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "789fc0ff35d1023a404a411e5771fd76164d9681", "author": {"user": {"login": "ctubbsii", "name": "Christopher Tubbs"}}, "url": "https://github.com/apache/accumulo/commit/789fc0ff35d1023a404a411e5771fd76164d9681", "committedDate": "2020-12-08T14:17:53Z", "message": "Merge branch 'main' into hash-upgrade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "456d1557395d2441854e042e7dcd4194be28fa4c", "author": {"user": {"login": "ctubbsii", "name": "Christopher Tubbs"}}, "url": "https://github.com/apache/accumulo/commit/456d1557395d2441854e042e7dcd4194be28fa4c", "committedDate": "2020-12-08T14:18:30Z", "message": "Resolve compiler warnings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MzIwMDky", "url": "https://github.com/apache/accumulo/pull/1798#pullrequestreview-547320092", "createdAt": "2020-12-08T15:03:16Z", "commit": {"oid": "456d1557395d2441854e042e7dcd4194be28fa4c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d426a4fd636ef63c43a84b8ff5d29e0517e35a5e", "author": {"user": {"login": "ctubbsii", "name": "Christopher Tubbs"}}, "url": "https://github.com/apache/accumulo/commit/d426a4fd636ef63c43a84b8ff5d29e0517e35a5e", "committedDate": "2020-12-08T19:35:45Z", "message": "Add debug statement before attempting upgrade"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1818, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}