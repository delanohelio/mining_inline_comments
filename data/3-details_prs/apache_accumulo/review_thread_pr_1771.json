{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2OTA5NjA1", "number": 1771, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDozMDowNFrOE2OskA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjoyMzowNFrOE3ThAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk5MzQ0OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDozMDowNFrOHu8myA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjoxMToyOVrOHv2Huw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4OTUxMg==", "bodyText": "This command should use the table specified, but it should not update the table state for the entire shell. All you need to do is set a local variable to either the specified table, or default to the current shell state's table, and use that local variable in the line below that creates the batch writer.", "url": "https://github.com/apache/accumulo/pull/1771#discussion_r518989512", "createdAt": "2020-11-06T20:30:04Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java", "diffHunk": "@@ -63,81 +64,96 @@ protected long getTimeout(final CommandLine cl) {\n   public int execute(final String fullCommand, final CommandLine cl, final Shell shellState)\n       throws AccumuloException, AccumuloSecurityException, TableNotFoundException, IOException,\n       ConstraintViolationException {\n-    shellState.checkTableState();\n \n-    final Mutation m = new Mutation(new Text(cl.getArgs()[0].getBytes(Shell.CHARSET)));\n-    final Text colf = new Text(cl.getArgs()[1].getBytes(Shell.CHARSET));\n-    final Text colq = new Text(cl.getArgs()[2].getBytes(Shell.CHARSET));\n-    final Value val = new Value(cl.getArgs()[3].getBytes(Shell.CHARSET));\n-\n-    if (cl.hasOption(insertOptAuths.getOpt())) {\n-      final ColumnVisibility le = new ColumnVisibility(cl.getOptionValue(insertOptAuths.getOpt()));\n-      Shell.log.debug(\"Authorization label will be set to: {}\", le);\n-\n-      if (cl.hasOption(timestampOpt.getOpt()))\n-        m.put(colf, colq, le, Long.parseLong(cl.getOptionValue(timestampOpt.getOpt())), val);\n-      else\n-        m.put(colf, colq, le, val);\n-    } else if (cl.hasOption(timestampOpt.getOpt()))\n-      m.put(colf, colq, Long.parseLong(cl.getOptionValue(timestampOpt.getOpt())), val);\n-    else\n-      m.put(colf, colq, val);\n-\n-    final BatchWriterConfig cfg =\n-        new BatchWriterConfig().setMaxMemory(Math.max(m.estimatedMemoryUsed(), 1024))\n-            .setMaxWriteThreads(1).setTimeout(getTimeout(cl), TimeUnit.MILLISECONDS);\n-    if (cl.hasOption(durabilityOption.getOpt())) {\n-      String userDurability = cl.getOptionValue(durabilityOption.getOpt());\n-      switch (userDurability) {\n-        case \"sync\":\n-          cfg.setDurability(Durability.SYNC);\n-          break;\n-        case \"flush\":\n-          cfg.setDurability(Durability.FLUSH);\n-          break;\n-        case \"none\":\n-          cfg.setDurability(Durability.NONE);\n-          break;\n-        case \"log\":\n-          cfg.setDurability(Durability.NONE);\n-          break;\n-        default:\n-          throw new IllegalArgumentException(\"Unknown durability: \" + userDurability);\n-      }\n-    }\n-    final BatchWriter bw =\n-        shellState.getAccumuloClient().createBatchWriter(shellState.getTableName(), cfg);\n-    bw.addMutation(m);\n+    String initialTable = null;\n     try {\n-      bw.close();\n-    } catch (MutationsRejectedException e) {\n-      final ArrayList<String> lines = new ArrayList<>();\n-      if (!e.getSecurityErrorCodes().isEmpty()) {\n-        lines.add(\"\\tAuthorization Failures:\");\n+      if (cl.hasOption(tableNameOption.getOpt())) {\n+        initialTable = shellState.getTableName();\n+        shellState.setTableName(cl.getOptionValue(tableNameOption.getOpt()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eaf446003a743bc1ebf99b95025a25e219dcb0a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzMTgzNQ==", "bodyText": "Thanks for pointing that out @ctubbsii. I've updated the code to use a temp variable and left the shellstate as is.", "url": "https://github.com/apache/accumulo/pull/1771#discussion_r519931835", "createdAt": "2020-11-09T16:11:29Z", "author": {"login": "jmark99"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java", "diffHunk": "@@ -63,81 +64,96 @@ protected long getTimeout(final CommandLine cl) {\n   public int execute(final String fullCommand, final CommandLine cl, final Shell shellState)\n       throws AccumuloException, AccumuloSecurityException, TableNotFoundException, IOException,\n       ConstraintViolationException {\n-    shellState.checkTableState();\n \n-    final Mutation m = new Mutation(new Text(cl.getArgs()[0].getBytes(Shell.CHARSET)));\n-    final Text colf = new Text(cl.getArgs()[1].getBytes(Shell.CHARSET));\n-    final Text colq = new Text(cl.getArgs()[2].getBytes(Shell.CHARSET));\n-    final Value val = new Value(cl.getArgs()[3].getBytes(Shell.CHARSET));\n-\n-    if (cl.hasOption(insertOptAuths.getOpt())) {\n-      final ColumnVisibility le = new ColumnVisibility(cl.getOptionValue(insertOptAuths.getOpt()));\n-      Shell.log.debug(\"Authorization label will be set to: {}\", le);\n-\n-      if (cl.hasOption(timestampOpt.getOpt()))\n-        m.put(colf, colq, le, Long.parseLong(cl.getOptionValue(timestampOpt.getOpt())), val);\n-      else\n-        m.put(colf, colq, le, val);\n-    } else if (cl.hasOption(timestampOpt.getOpt()))\n-      m.put(colf, colq, Long.parseLong(cl.getOptionValue(timestampOpt.getOpt())), val);\n-    else\n-      m.put(colf, colq, val);\n-\n-    final BatchWriterConfig cfg =\n-        new BatchWriterConfig().setMaxMemory(Math.max(m.estimatedMemoryUsed(), 1024))\n-            .setMaxWriteThreads(1).setTimeout(getTimeout(cl), TimeUnit.MILLISECONDS);\n-    if (cl.hasOption(durabilityOption.getOpt())) {\n-      String userDurability = cl.getOptionValue(durabilityOption.getOpt());\n-      switch (userDurability) {\n-        case \"sync\":\n-          cfg.setDurability(Durability.SYNC);\n-          break;\n-        case \"flush\":\n-          cfg.setDurability(Durability.FLUSH);\n-          break;\n-        case \"none\":\n-          cfg.setDurability(Durability.NONE);\n-          break;\n-        case \"log\":\n-          cfg.setDurability(Durability.NONE);\n-          break;\n-        default:\n-          throw new IllegalArgumentException(\"Unknown durability: \" + userDurability);\n-      }\n-    }\n-    final BatchWriter bw =\n-        shellState.getAccumuloClient().createBatchWriter(shellState.getTableName(), cfg);\n-    bw.addMutation(m);\n+    String initialTable = null;\n     try {\n-      bw.close();\n-    } catch (MutationsRejectedException e) {\n-      final ArrayList<String> lines = new ArrayList<>();\n-      if (!e.getSecurityErrorCodes().isEmpty()) {\n-        lines.add(\"\\tAuthorization Failures:\");\n+      if (cl.hasOption(tableNameOption.getOpt())) {\n+        initialTable = shellState.getTableName();\n+        shellState.setTableName(cl.getOptionValue(tableNameOption.getOpt()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4OTUxMg=="}, "originalCommit": {"oid": "9eaf446003a743bc1ebf99b95025a25e219dcb0a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDUxMzIwOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDo0NzoxOVrOHwA_Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMzoyNjo0NlrOHwKUqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwOTg1NA==", "bodyText": "What's the reason for not supporting -t short name?", "url": "https://github.com/apache/accumulo/pull/1771#discussion_r520109854", "createdAt": "2020-11-09T20:47:19Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java", "diffHunk": "@@ -171,6 +180,11 @@ public Options getOptions() {\n         \"durability to use for insert, should be one of \\\"none\\\" \\\"log\\\" \\\"flush\\\" or \\\"sync\\\"\");\n     o.addOption(durabilityOption);\n \n+    tableNameOption =\n+        new Option(\"\", \"tablename\", true, \"name of table in which data is being inserted\");\n+    tableNameOption.setArgName(\"tablename\");\n+    o.addOption(tableNameOption);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f867c74b182b330b6ee4eb4566268250ff566c50"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDExNTM5NA==", "bodyText": "I chose not to use the short form to minimize any confusion with the timestamp parameter (-ts). There is also a timeout parameter that does not off a shortened name. If you think it would be nice to include one, I have no problem adding one. Could always use '-n' for 'name' perhaps. Let me know your thoughts.", "url": "https://github.com/apache/accumulo/pull/1771#discussion_r520115394", "createdAt": "2020-11-09T20:57:33Z", "author": {"login": "jmark99"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java", "diffHunk": "@@ -171,6 +180,11 @@ public Options getOptions() {\n         \"durability to use for insert, should be one of \\\"none\\\" \\\"log\\\" \\\"flush\\\" or \\\"sync\\\"\");\n     o.addOption(durabilityOption);\n \n+    tableNameOption =\n+        new Option(\"\", \"tablename\", true, \"name of table in which data is being inserted\");\n+    tableNameOption.setArgName(\"tablename\");\n+    o.addOption(tableNameOption);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwOTg1NA=="}, "originalCommit": {"oid": "f867c74b182b330b6ee4eb4566268250ff566c50"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2MjgyNA==", "bodyText": "If there's not already a -t, I don't think it's a problem. I don't think there's any concern over conflicting with -ts. In fact, most commands use the standard OptUtil.tableOpt. See  https://github.com/apache/accumulo/blob/main/shell/src/main/java/org/apache/accumulo/shell/commands/ScanCommand.java#L93 and https://github.com/apache/accumulo/blob/main/shell/src/main/java/org/apache/accumulo/shell/commands/ScanCommand.java#L395.\nI would recommend doing the same here, if there's no existing -t.", "url": "https://github.com/apache/accumulo/pull/1771#discussion_r520262824", "createdAt": "2020-11-10T03:26:46Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java", "diffHunk": "@@ -171,6 +180,11 @@ public Options getOptions() {\n         \"durability to use for insert, should be one of \\\"none\\\" \\\"log\\\" \\\"flush\\\" or \\\"sync\\\"\");\n     o.addOption(durabilityOption);\n \n+    tableNameOption =\n+        new Option(\"\", \"tablename\", true, \"name of table in which data is being inserted\");\n+    tableNameOption.setArgName(\"tablename\");\n+    o.addOption(tableNameOption);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwOTg1NA=="}, "originalCommit": {"oid": "f867c74b182b330b6ee4eb4566268250ff566c50"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDI2ODgwOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjoyMzowNFrOHwkodw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjoyOTowNlrOHwk6bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5Mzg3OQ==", "bodyText": "Minor grammatical nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                o.addOption(OptUtil.tableOpt(\"table in which data is to be inserted\"));\n          \n          \n            \n                o.addOption(OptUtil.tableOpt(\"table into which data will be inserted\"));", "url": "https://github.com/apache/accumulo/pull/1771#discussion_r520693879", "createdAt": "2020-11-10T16:23:04Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java", "diffHunk": "@@ -171,6 +171,8 @@ public Options getOptions() {\n         \"durability to use for insert, should be one of \\\"none\\\" \\\"log\\\" \\\"flush\\\" or \\\"sync\\\"\");\n     o.addOption(durabilityOption);\n \n+    o.addOption(OptUtil.tableOpt(\"table in which data is to be inserted\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d2254f0e0d181bb0fd7f1d2714718d793a83b9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5ODQ3Ng==", "bodyText": "No problem. Didn't quite sound right to me, but I was blanking on how to re-word it.", "url": "https://github.com/apache/accumulo/pull/1771#discussion_r520698476", "createdAt": "2020-11-10T16:29:06Z", "author": {"login": "jmark99"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java", "diffHunk": "@@ -171,6 +171,8 @@ public Options getOptions() {\n         \"durability to use for insert, should be one of \\\"none\\\" \\\"log\\\" \\\"flush\\\" or \\\"sync\\\"\");\n     o.addOption(durabilityOption);\n \n+    o.addOption(OptUtil.tableOpt(\"table in which data is to be inserted\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5Mzg3OQ=="}, "originalCommit": {"oid": "52d2254f0e0d181bb0fd7f1d2714718d793a83b9"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4104, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}