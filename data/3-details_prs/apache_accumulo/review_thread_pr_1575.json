{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTYzNDA3", "number": 1575, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMzoyMzoyNVrODsX_VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDo0MDoxNVrODt_Bbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODU2OTgxOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMzoyMzoyNVrOF9OHkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoxMzoxNFrOF9xbMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODc3MQ==", "bodyText": "enum comparisons in Java should always use == and not .equals(Object)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      if (p.getType().equals(PropertyType.PORT)) {\n          \n          \n            \n                      if (p.getType() == PropertyType.PORT) {", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r399738771", "createdAt": "2020-03-29T03:23:25Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "diffHunk": "@@ -168,10 +171,33 @@ public static ServerAddress startServer(MetricsSystem metricsSystem, ServerConte\n           addresses);\n     } catch (TTransportException e) {\n       if (portSearch) {\n+        // Build a list of reserved ports - as identified by properties of type PropertyType.PORT\n+        ArrayList<Integer> restrictedPorts = new ArrayList<Integer>();\n+        for (Property p : Property.values()) {\n+          if (p.getType().equals(PropertyType.PORT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3817718b089e6396264774f9d9f6cdbd427da602"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczOTUzNw==", "bodyText": "Also, you might be able to do something shorter with streams. Something like:\nList<Integer> restrictedPorts = EnumSet.allOf(Property.class).stream()\n        .filter(p -> p.getType() == HttpMethod.TRACE)\n        .map(config::getPort).collect(Collectors.toList());", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r399739537", "createdAt": "2020-03-29T03:34:07Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "diffHunk": "@@ -168,10 +171,33 @@ public static ServerAddress startServer(MetricsSystem metricsSystem, ServerConte\n           addresses);\n     } catch (TTransportException e) {\n       if (portSearch) {\n+        // Build a list of reserved ports - as identified by properties of type PropertyType.PORT\n+        ArrayList<Integer> restrictedPorts = new ArrayList<Integer>();\n+        for (Property p : Property.values()) {\n+          if (p.getType().equals(PropertyType.PORT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODc3MQ=="}, "originalCommit": {"oid": "3817718b089e6396264774f9d9f6cdbd427da602"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczOTcyMg==", "bodyText": "If we \"remember\" which config proper where we found each integer (by collecting as Map<Integer,Property>, perhaps), then we could also have more informative debug log messages when ports are skipped.", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r399739722", "createdAt": "2020-03-29T03:37:44Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "diffHunk": "@@ -168,10 +171,33 @@ public static ServerAddress startServer(MetricsSystem metricsSystem, ServerConte\n           addresses);\n     } catch (TTransportException e) {\n       if (portSearch) {\n+        // Build a list of reserved ports - as identified by properties of type PropertyType.PORT\n+        ArrayList<Integer> restrictedPorts = new ArrayList<Integer>();\n+        for (Property p : Property.values()) {\n+          if (p.getType().equals(PropertyType.PORT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODc3MQ=="}, "originalCommit": {"oid": "3817718b089e6396264774f9d9f6cdbd427da602"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc1Nzg3MQ==", "bodyText": "Thanks! Will incorporate these. I also realized that TSERV_CLIENTPORT should not be skipped as it is a valid port for the TServer to use even if port search is enabled.", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r399757871", "createdAt": "2020-03-29T07:22:57Z", "author": {"login": "arvindshmicrosoft"}, "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "diffHunk": "@@ -168,10 +171,33 @@ public static ServerAddress startServer(MetricsSystem metricsSystem, ServerConte\n           addresses);\n     } catch (TTransportException e) {\n       if (portSearch) {\n+        // Build a list of reserved ports - as identified by properties of type PropertyType.PORT\n+        ArrayList<Integer> restrictedPorts = new ArrayList<Integer>();\n+        for (Property p : Property.values()) {\n+          if (p.getType().equals(PropertyType.PORT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODc3MQ=="}, "originalCommit": {"oid": "3817718b089e6396264774f9d9f6cdbd427da602"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzODg0Mw==", "bodyText": "TSERV_CLIENTPORT should be the starting point before incrementing, so I don't think it would be a problem anyway, but it wouldn't hurt to skip it too, just in case the code is changed, or reused for other services.", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r399838843", "createdAt": "2020-03-29T19:02:22Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "diffHunk": "@@ -168,10 +171,33 @@ public static ServerAddress startServer(MetricsSystem metricsSystem, ServerConte\n           addresses);\n     } catch (TTransportException e) {\n       if (portSearch) {\n+        // Build a list of reserved ports - as identified by properties of type PropertyType.PORT\n+        ArrayList<Integer> restrictedPorts = new ArrayList<Integer>();\n+        for (Property p : Property.values()) {\n+          if (p.getType().equals(PropertyType.PORT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODc3MQ=="}, "originalCommit": {"oid": "3817718b089e6396264774f9d9f6cdbd427da602"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNzIzNQ==", "bodyText": "Done. The debug logs now include port numbers, the config setting and the description as well.\n2020-03-30T08:57:25,201 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:9997. Error: Could not create ServerSocket on address /0.0.0.0:9997.\n2020-03-30T08:57:25,214 [rpc.TServerUtils] DEBUG: During port search, skipping reserved port 9998 - property gc.port.client (The listening port for the garbage collector's monitor service)\n2020-03-30T08:57:25,215 [rpc.TServerUtils] DEBUG: During port search, skipping reserved port 9999 - property master.port.client (The port used for handling client connections on the master)\n2020-03-30T08:57:25,215 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server\n2020-03-30T08:57:25,215 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:10000. Error: Could not create ServerSocket on address /0.0.0.0:10000.\n2020-03-30T08:57:25,215 [rpc.TServerUtils] INFO : Unable to use port 10000, retrying. (Thread Name = Thrift Client Server)\n2020-03-30T08:57:25,215 [rpc.TServerUtils] DEBUG: During port search, skipping reserved port 10001 - property master.replication.coordinator.port (Port for the replication coordinator service)\n2020-03-30T08:57:25,216 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server\n2020-03-30T08:57:25,216 [rpc.TServerUtils] WARN : Error attempting to create server at 0.0.0.0:10002. Error: Could not create ServerSocket on address /0.0.0.0:10002.\n2020-03-30T08:57:25,216 [rpc.TServerUtils] INFO : Unable to use port 10002, retrying. (Thread Name = Thrift Client Server)\n2020-03-30T08:57:25,216 [rpc.TServerUtils] DEBUG: Instantiating unsecure custom half-async Thrift server\n2020-03-30T08:57:25,223 [tserver.TabletServer] INFO : address = dev-ub18:10003", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r400317235", "createdAt": "2020-03-30T16:13:14Z", "author": {"login": "arvindshmicrosoft"}, "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "diffHunk": "@@ -168,10 +171,33 @@ public static ServerAddress startServer(MetricsSystem metricsSystem, ServerConte\n           addresses);\n     } catch (TTransportException e) {\n       if (portSearch) {\n+        // Build a list of reserved ports - as identified by properties of type PropertyType.PORT\n+        ArrayList<Integer> restrictedPorts = new ArrayList<Integer>();\n+        for (Property p : Property.values()) {\n+          if (p.getType().equals(PropertyType.PORT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODc3MQ=="}, "originalCommit": {"oid": "3817718b089e6396264774f9d9f6cdbd427da602"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODU3NzExOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMzozNTo1N1rOF9OK7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoxMzozOFrOF9xcGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczOTYyOA==", "bodyText": "I don't think we need this debug statement here, but if there's an easy way to unit test the code with a mock configuration, that might be nice. Might need to move some of this port search logic into a separate method to make that easier.", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r399739628", "createdAt": "2020-03-29T03:35:57Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "diffHunk": "@@ -168,10 +171,33 @@ public static ServerAddress startServer(MetricsSystem metricsSystem, ServerConte\n           addresses);\n     } catch (TTransportException e) {\n       if (portSearch) {\n+        // Build a list of reserved ports - as identified by properties of type PropertyType.PORT\n+        ArrayList<Integer> restrictedPorts = new ArrayList<Integer>();\n+        for (Property p : Property.values()) {\n+          if (p.getType().equals(PropertyType.PORT)) {\n+            for (int element : config.getPort(p)) {\n+              restrictedPorts.add(element);\n+              if (log.isDebugEnabled()) {\n+                log.debug(\"Adding port {} to list of restricted ports\", element);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3817718b089e6396264774f9d9f6cdbd427da602"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNzQ2NA==", "bodyText": "Done. I added what I think is a pretty comprehensive unit test. Please take a look when possible.", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r400317464", "createdAt": "2020-03-30T16:13:38Z", "author": {"login": "arvindshmicrosoft"}, "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "diffHunk": "@@ -168,10 +171,33 @@ public static ServerAddress startServer(MetricsSystem metricsSystem, ServerConte\n           addresses);\n     } catch (TTransportException e) {\n       if (portSearch) {\n+        // Build a list of reserved ports - as identified by properties of type PropertyType.PORT\n+        ArrayList<Integer> restrictedPorts = new ArrayList<Integer>();\n+        for (Property p : Property.values()) {\n+          if (p.getType().equals(PropertyType.PORT)) {\n+            for (int element : config.getPort(p)) {\n+              restrictedPorts.add(element);\n+              if (log.isDebugEnabled()) {\n+                log.debug(\"Adding port {} to list of restricted ports\", element);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczOTYyOA=="}, "originalCommit": {"oid": "3817718b089e6396264774f9d9f6cdbd427da602"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODU4MDA4OnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMzo0MTozMFrOF9OMVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwNzoyNToyMVrOF9PTWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczOTk4OQ==", "bodyText": "There is no need to guard log messages with .isLEVELEnabled() calls when merely printing a log statement, since the logging framework already does this itself (it's also why we use the format string instead of using String.format or string concatenation ourselves). We only need to do that if we're doing extra work to prepare the log messages.\nSee previous comment on suggestion to improve this log message with the specific service that has reserved it. Could print Property.getKey() here.", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r399739989", "createdAt": "2020-03-29T03:41:30Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "diffHunk": "@@ -168,10 +171,33 @@ public static ServerAddress startServer(MetricsSystem metricsSystem, ServerConte\n           addresses);\n     } catch (TTransportException e) {\n       if (portSearch) {\n+        // Build a list of reserved ports - as identified by properties of type PropertyType.PORT\n+        ArrayList<Integer> restrictedPorts = new ArrayList<Integer>();\n+        for (Property p : Property.values()) {\n+          if (p.getType().equals(PropertyType.PORT)) {\n+            for (int element : config.getPort(p)) {\n+              restrictedPorts.add(element);\n+              if (log.isDebugEnabled()) {\n+                log.debug(\"Adding port {} to list of restricted ports\", element);\n+              }\n+            }\n+          }\n+        }\n+\n         HostAndPort last = addresses[addresses.length - 1];\n         // Attempt to allocate a port outside of the specified port property\n         // Search sequentially over the next 1000 ports\n         for (int port = last.getPort() + 1; port < last.getPort() + 1001; port++) {\n+          if (restrictedPorts.contains(port)) {\n+            if (log.isDebugEnabled()) {\n+              log.debug(\n+                  \"During port search, skipping port {} as it is reserved for another service\",\n+                  port);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3817718b089e6396264774f9d9f6cdbd427da602"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc1ODE2OA==", "bodyText": "Thanks, I was doing this based on suggestions to do so from @keith-turner for a previous PR - but I realize now that the suggestion was related to the extra work in that case (joining a list) to prep the log message. Will rework.", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r399758168", "createdAt": "2020-03-29T07:25:21Z", "author": {"login": "arvindshmicrosoft"}, "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "diffHunk": "@@ -168,10 +171,33 @@ public static ServerAddress startServer(MetricsSystem metricsSystem, ServerConte\n           addresses);\n     } catch (TTransportException e) {\n       if (portSearch) {\n+        // Build a list of reserved ports - as identified by properties of type PropertyType.PORT\n+        ArrayList<Integer> restrictedPorts = new ArrayList<Integer>();\n+        for (Property p : Property.values()) {\n+          if (p.getType().equals(PropertyType.PORT)) {\n+            for (int element : config.getPort(p)) {\n+              restrictedPorts.add(element);\n+              if (log.isDebugEnabled()) {\n+                log.debug(\"Adding port {} to list of restricted ports\", element);\n+              }\n+            }\n+          }\n+        }\n+\n         HostAndPort last = addresses[addresses.length - 1];\n         // Attempt to allocate a port outside of the specified port property\n         // Search sequentially over the next 1000 ports\n         for (int port = last.getPort() + 1; port < last.getPort() + 1001; port++) {\n+          if (restrictedPorts.contains(port)) {\n+            if (log.isDebugEnabled()) {\n+              log.debug(\n+                  \"During port search, skipping port {} as it is reserved for another service\",\n+                  port);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczOTk4OQ=="}, "originalCommit": {"oid": "3817718b089e6396264774f9d9f6cdbd427da602"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDMxODk2OnYy", "diffSide": "RIGHT", "path": "server/base/src/test/java/org/apache/accumulo/server/util/TServerUtilsTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMjozNDoyMFrOF-DH5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDowNzozMlrOH78pJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwNzIwNA==", "bodyText": "I think I have an idea to simplify the unit testing logic for the port search behavior by putting all the port search logic into a single method that accepts a starting port and a config, and returns a selected port, but I can experiment with that idea after we merge in the functionality you've added.", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r400607204", "createdAt": "2020-03-31T02:34:20Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/test/java/org/apache/accumulo/server/util/TServerUtilsTest.java", "diffHunk": "@@ -233,6 +234,72 @@ public void testStartServerUsedPortWithSearch() throws Exception {\n     }\n   }\n \n+  @SuppressFBWarnings(value = \"UNENCRYPTED_SERVER_SOCKET\", justification = \"socket for testing\")\n+  @Test\n+  public void testStartServerNonDefaultPorts() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df3f67c52b8cc7dc671f634470837edb2e0be7e9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3MjA2OQ==", "bodyText": "It would be nice to rework this entire unit test to use less static stuff and pass more, but that would be follow on work.  Not something for this PR.", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r402372069", "createdAt": "2020-04-02T14:47:11Z", "author": {"login": "keith-turner"}, "path": "server/base/src/test/java/org/apache/accumulo/server/util/TServerUtilsTest.java", "diffHunk": "@@ -233,6 +234,72 @@ public void testStartServerUsedPortWithSearch() throws Exception {\n     }\n   }\n \n+  @SuppressFBWarnings(value = \"UNENCRYPTED_SERVER_SOCKET\", justification = \"socket for testing\")\n+  @Test\n+  public void testStartServerNonDefaultPorts() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwNzIwNA=="}, "originalCommit": {"oid": "df3f67c52b8cc7dc671f634470837edb2e0be7e9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyMTYwNA==", "bodyText": "I can't remember the entire idea I had to simplify the logic for this test. I looked over the existing test, and it seems fine as-is, but I did open #1815 to clean up some of the static stuff and EasyMock code a bit.", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r532621604", "createdAt": "2020-11-30T14:07:32Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/test/java/org/apache/accumulo/server/util/TServerUtilsTest.java", "diffHunk": "@@ -233,6 +234,72 @@ public void testStartServerUsedPortWithSearch() throws Exception {\n     }\n   }\n \n+  @SuppressFBWarnings(value = \"UNENCRYPTED_SERVER_SOCKET\", justification = \"socket for testing\")\n+  @Test\n+  public void testStartServerNonDefaultPorts() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwNzIwNA=="}, "originalCommit": {"oid": "df3f67c52b8cc7dc671f634470837edb2e0be7e9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTQ1MDcwOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDo0MDoxNVrOF_ufpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo1MTo0OFrOF_x2LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2NjM3Mw==", "bodyText": "May be able to do the following.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      if (reservedPorts.keySet().contains(port)) {\n          \n          \n            \n                      if (reservedPorts.containsKey(port)) {", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r402366373", "createdAt": "2020-04-02T14:40:15Z", "author": {"login": "keith-turner"}, "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "diffHunk": "@@ -168,10 +189,20 @@ public static ServerAddress startServer(MetricsSystem metricsSystem, ServerConte\n           addresses);\n     } catch (TTransportException e) {\n       if (portSearch) {\n+        // Build a list of reserved ports - as identified by properties of type PropertyType.PORT\n+        Map<Integer,Property> reservedPorts = getReservedPorts(config);\n+\n         HostAndPort last = addresses[addresses.length - 1];\n         // Attempt to allocate a port outside of the specified port property\n         // Search sequentially over the next 1000 ports\n         for (int port = last.getPort() + 1; port < last.getPort() + 1001; port++) {\n+          if (reservedPorts.keySet().contains(port)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df3f67c52b8cc7dc671f634470837edb2e0be7e9"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwOTc2MQ==", "bodyText": "Will do! Allow me a few hours to add a commit and push this change.", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r402409761", "createdAt": "2020-04-02T15:35:38Z", "author": {"login": "arvindshmicrosoft"}, "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "diffHunk": "@@ -168,10 +189,20 @@ public static ServerAddress startServer(MetricsSystem metricsSystem, ServerConte\n           addresses);\n     } catch (TTransportException e) {\n       if (portSearch) {\n+        // Build a list of reserved ports - as identified by properties of type PropertyType.PORT\n+        Map<Integer,Property> reservedPorts = getReservedPorts(config);\n+\n         HostAndPort last = addresses[addresses.length - 1];\n         // Attempt to allocate a port outside of the specified port property\n         // Search sequentially over the next 1000 ports\n         for (int port = last.getPort() + 1; port < last.getPort() + 1001; port++) {\n+          if (reservedPorts.keySet().contains(port)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2NjM3Mw=="}, "originalCommit": {"oid": "df3f67c52b8cc7dc671f634470837edb2e0be7e9"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMTI5Mg==", "bodyText": "I'm going to merge now. I can make this change subsequently.", "url": "https://github.com/apache/accumulo/pull/1575#discussion_r402421292", "createdAt": "2020-04-02T15:51:48Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/rpc/TServerUtils.java", "diffHunk": "@@ -168,10 +189,20 @@ public static ServerAddress startServer(MetricsSystem metricsSystem, ServerConte\n           addresses);\n     } catch (TTransportException e) {\n       if (portSearch) {\n+        // Build a list of reserved ports - as identified by properties of type PropertyType.PORT\n+        Map<Integer,Property> reservedPorts = getReservedPorts(config);\n+\n         HostAndPort last = addresses[addresses.length - 1];\n         // Attempt to allocate a port outside of the specified port property\n         // Search sequentially over the next 1000 ports\n         for (int port = last.getPort() + 1; port < last.getPort() + 1001; port++) {\n+          if (reservedPorts.keySet().contains(port)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2NjM3Mw=="}, "originalCommit": {"oid": "df3f67c52b8cc7dc671f634470837edb2e0be7e9"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4225, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}