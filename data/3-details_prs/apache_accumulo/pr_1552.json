{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDU1NTMz", "number": 1552, "title": "Fix and simplify TransportCachingIT", "bodyText": "", "createdAt": "2020-03-06T22:51:22Z", "url": "https://github.com/apache/accumulo/pull/1552", "merged": true, "mergeCommit": {"oid": "77b515f088209f384b5ae9ac32d22d267c947ff6"}, "closed": true, "closedAt": "2020-03-09T20:21:20Z", "author": {"login": "keith-turner"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLIGgoAH2gAyMzg1MDU1NTMzOjE4YmU2NDkyYzg1YzE0MmU2ZWJmNmNjMWVkNDU5ZmI5NDU2ZjhjNGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMDSgRAFqTM3MTQ3NjA3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "18be6492c85c142e6ebf6cc1ed459fb9456f8c4e", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/18be6492c85c142e6ebf6cc1ed459fb9456f8c4e", "committedDate": "2020-03-06T22:45:36Z", "message": "Fix and simplify TransportCachingIT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjc1OTI4", "url": "https://github.com/apache/accumulo/pull/1552#pullrequestreview-370675928", "createdAt": "2020-03-06T22:57:09Z", "commit": {"oid": "18be6492c85c142e6ebf6cc1ed459fb9456f8c4e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjo1NzowOVrOFzJ5NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzowNjowOFrOFzKDmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4Mzc5Nw==", "bodyText": "Instead of waiting for non-empty, could wait for the expected number to start (I think mini starts up 2 by default, but this number can probably be retrieved from the config).", "url": "https://github.com/apache/accumulo/pull/1552#discussion_r389183797", "createdAt": "2020-03-06T22:57:09Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/TransportCachingIT.java", "diffHunk": "@@ -18,87 +18,53 @@\n  */\n package org.apache.accumulo.test;\n \n-import static java.nio.charset.StandardCharsets.UTF_8;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNotSame;\n import static org.junit.Assert.assertSame;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.accumulo.core.Constants;\n import org.apache.accumulo.core.client.Accumulo;\n import org.apache.accumulo.core.client.AccumuloClient;\n import org.apache.accumulo.core.clientImpl.ClientContext;\n import org.apache.accumulo.core.clientImpl.ThriftTransportKey;\n import org.apache.accumulo.core.clientImpl.ThriftTransportPool;\n import org.apache.accumulo.core.conf.ConfigurationTypeHelper;\n import org.apache.accumulo.core.conf.Property;\n-import org.apache.accumulo.core.util.ServerServices;\n-import org.apache.accumulo.core.util.ServerServices.Service;\n-import org.apache.accumulo.fate.zookeeper.ZooCache;\n+import org.apache.accumulo.core.util.HostAndPort;\n import org.apache.accumulo.harness.AccumuloClusterHarness;\n import org.apache.thrift.transport.TTransport;\n import org.apache.thrift.transport.TTransportException;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.collect.Lists;\n+\n /**\n  * Test that {@link ThriftTransportPool} actually adheres to the cachedConnection argument\n  */\n public class TransportCachingIT extends AccumuloClusterHarness {\n   private static final Logger log = LoggerFactory.getLogger(TransportCachingIT.class);\n-  private static int ATTEMPTS = 0;\n \n   @Test\n   public void testCachedTransport() throws InterruptedException {\n     try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {\n-      while (client.instanceOperations().getTabletServers().isEmpty()) {\n+\n+      List<String> tservers;\n+\n+      while ((tservers = client.instanceOperations().getTabletServers()).isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18be6492c85c142e6ebf6cc1ed459fb9456f8c4e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4NTQ4NQ==", "bodyText": "This might snag on the modernizer plugin. Even if it doesn't, I think the pure Java streams form looks a little cleaner (or maybe I've just been using streams a lot to have acquired an affinity for them):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  List<ThriftTransportKey> servers = Lists.transform(tservers,\n          \n          \n            \n                      serverStr -> new ThriftTransportKey(HostAndPort.fromString(serverStr), rpcTimeout,\n          \n          \n            \n                          context));\n          \n          \n            \n                  List<ThriftTransportKey> servers = tservers.stream().map(serverStr -> {\n          \n          \n            \n                    return new ThriftTransportKey(HostAndPort.fromString(serverStr), rpcTimeout, context);\n          \n          \n            \n                  }).collect(Collectors.toList());\n          \n      \n    \n    \n  \n\n(not necessarily formatted)", "url": "https://github.com/apache/accumulo/pull/1552#discussion_r389185485", "createdAt": "2020-03-06T23:03:09Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/TransportCachingIT.java", "diffHunk": "@@ -18,87 +18,53 @@\n  */\n package org.apache.accumulo.test;\n \n-import static java.nio.charset.StandardCharsets.UTF_8;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNotSame;\n import static org.junit.Assert.assertSame;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.accumulo.core.Constants;\n import org.apache.accumulo.core.client.Accumulo;\n import org.apache.accumulo.core.client.AccumuloClient;\n import org.apache.accumulo.core.clientImpl.ClientContext;\n import org.apache.accumulo.core.clientImpl.ThriftTransportKey;\n import org.apache.accumulo.core.clientImpl.ThriftTransportPool;\n import org.apache.accumulo.core.conf.ConfigurationTypeHelper;\n import org.apache.accumulo.core.conf.Property;\n-import org.apache.accumulo.core.util.ServerServices;\n-import org.apache.accumulo.core.util.ServerServices.Service;\n-import org.apache.accumulo.fate.zookeeper.ZooCache;\n+import org.apache.accumulo.core.util.HostAndPort;\n import org.apache.accumulo.harness.AccumuloClusterHarness;\n import org.apache.thrift.transport.TTransport;\n import org.apache.thrift.transport.TTransportException;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.collect.Lists;\n+\n /**\n  * Test that {@link ThriftTransportPool} actually adheres to the cachedConnection argument\n  */\n public class TransportCachingIT extends AccumuloClusterHarness {\n   private static final Logger log = LoggerFactory.getLogger(TransportCachingIT.class);\n-  private static int ATTEMPTS = 0;\n \n   @Test\n   public void testCachedTransport() throws InterruptedException {\n     try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {\n-      while (client.instanceOperations().getTabletServers().isEmpty()) {\n+\n+      List<String> tservers;\n+\n+      while ((tservers = client.instanceOperations().getTabletServers()).isEmpty()) {\n         // sleep until a tablet server is up\n         Thread.sleep(50);\n       }\n+\n       ClientContext context = (ClientContext) client;\n       long rpcTimeout =\n           ConfigurationTypeHelper.getTimeInMillis(Property.GENERAL_RPC_TIMEOUT.getDefaultValue());\n \n-      ZooCache zc = context.getZooCache();\n-      final String zkRoot = context.getZooKeeperRoot();\n-\n-      // wait until Zookeeper is populated\n-      List<String> children = zc.getChildren(zkRoot + Constants.ZTSERVERS);\n-      while (children.isEmpty()) {\n-        Thread.sleep(100);\n-        children = zc.getChildren(zkRoot + Constants.ZTSERVERS);\n-      }\n-\n-      ArrayList<ThriftTransportKey> servers = new ArrayList<>();\n-      while (servers.isEmpty()) {\n-        for (String tserver : children) {\n-          String path = zkRoot + Constants.ZTSERVERS + \"/\" + tserver;\n-          byte[] data = zc.getLockData(path);\n-          if (data != null) {\n-            String strData = new String(data, UTF_8);\n-            if (!strData.equals(\"master\"))\n-              servers.add(new ThriftTransportKey(\n-                  new ServerServices(strData).getAddress(Service.TSERV_CLIENT), rpcTimeout,\n-                  context));\n-          }\n-        }\n-        ATTEMPTS++;\n-        if (!servers.isEmpty())\n-          break;\n-        else {\n-          if (ATTEMPTS < 100) {\n-            log.warn(\"Making another attempt to add ThriftTransportKey servers\");\n-            Thread.sleep(100);\n-          } else {\n-            log.error(\"Failed to add ThriftTransportKey servers - Failing TransportCachingIT test\");\n-            org.junit.Assert\n-                .fail(\"Failed to add ThriftTransportKey servers - Failing TransportCachingIT test\");\n-          }\n-        }\n-      }\n+      List<ThriftTransportKey> servers = Lists.transform(tservers,\n+          serverStr -> new ThriftTransportKey(HostAndPort.fromString(serverStr), rpcTimeout,\n+              context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18be6492c85c142e6ebf6cc1ed459fb9456f8c4e"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4NjQ1OA==", "bodyText": "Do we want this to loop indefinitely? If this is null, could it ever become non-null?", "url": "https://github.com/apache/accumulo/pull/1552#discussion_r389186458", "createdAt": "2020-03-06T23:06:08Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/TransportCachingIT.java", "diffHunk": "@@ -158,7 +124,7 @@ public void testCachedTransport() throws InterruptedException {\n       while (fifth == null) {\n         try {\n           // Get a cached transport\n-          fifth = pool.getAnyTransport(servers, true).getSecond();\n+          fifth = pool.getAnyTransport(servers.subList(0, 1), true).getSecond();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18be6492c85c142e6ebf6cc1ed459fb9456f8c4e"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "766851b81c5620cc52559f0561929c0552cd9de0", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/766851b81c5620cc52559f0561929c0552cd9de0", "committedDate": "2020-03-06T23:11:05Z", "message": "Update test/src/main/java/org/apache/accumulo/test/TransportCachingIT.java\n\nCo-Authored-By: Christopher Tubbs <ctubbsii@apache.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjkyNDk0", "url": "https://github.com/apache/accumulo/pull/1552#pullrequestreview-370692494", "createdAt": "2020-03-06T23:54:40Z", "commit": {"oid": "766851b81c5620cc52559f0561929c0552cd9de0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo1NDo0MVrOFzKwRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo1NDo0MVrOFzKwRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5Nzg5NA==", "bodyText": "I think the imports need to be cleaned up after applying the suggested change to use Java streams. After that, this PR should be good to merge.", "url": "https://github.com/apache/accumulo/pull/1552#discussion_r389197894", "createdAt": "2020-03-06T23:54:41Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/TransportCachingIT.java", "diffHunk": "@@ -18,87 +18,53 @@\n  */\n package org.apache.accumulo.test;\n \n-import static java.nio.charset.StandardCharsets.UTF_8;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNotSame;\n import static org.junit.Assert.assertSame;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.accumulo.core.Constants;\n import org.apache.accumulo.core.client.Accumulo;\n import org.apache.accumulo.core.client.AccumuloClient;\n import org.apache.accumulo.core.clientImpl.ClientContext;\n import org.apache.accumulo.core.clientImpl.ThriftTransportKey;\n import org.apache.accumulo.core.clientImpl.ThriftTransportPool;\n import org.apache.accumulo.core.conf.ConfigurationTypeHelper;\n import org.apache.accumulo.core.conf.Property;\n-import org.apache.accumulo.core.util.ServerServices;\n-import org.apache.accumulo.core.util.ServerServices.Service;\n-import org.apache.accumulo.fate.zookeeper.ZooCache;\n+import org.apache.accumulo.core.util.HostAndPort;\n import org.apache.accumulo.harness.AccumuloClusterHarness;\n import org.apache.thrift.transport.TTransport;\n import org.apache.thrift.transport.TTransportException;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.collect.Lists;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "766851b81c5620cc52559f0561929c0552cd9de0"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTc2MzAy", "url": "https://github.com/apache/accumulo/pull/1552#pullrequestreview-371176302", "createdAt": "2020-03-09T13:21:24Z", "commit": {"oid": "766851b81c5620cc52559f0561929c0552cd9de0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoyMToyNFrOFzmsHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoyMToyNFrOFzmsHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1NTU4MQ==", "bodyText": "How does getting the same transport from a list of one test anything?  The last assertSame now doesn't seem like it is testing anything.", "url": "https://github.com/apache/accumulo/pull/1552#discussion_r389655581", "createdAt": "2020-03-09T13:21:24Z", "author": {"login": "milleruntime"}, "path": "test/src/main/java/org/apache/accumulo/test/TransportCachingIT.java", "diffHunk": "@@ -148,7 +114,7 @@ public void testCachedTransport() throws InterruptedException {\n       while (fourth == null) {\n         try {\n           // Get a non-cached transport\n-          fourth = pool.getAnyTransport(servers, false).getSecond();\n+          fourth = pool.getAnyTransport(servers.subList(0, 1), false).getSecond();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "766851b81c5620cc52559f0561929c0552cd9de0"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4028704774f12419a6b945b318f352a6d72bdf3f", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/4028704774f12419a6b945b318f352a6d72bdf3f", "committedDate": "2020-03-09T15:48:31Z", "message": "Improve test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "188c60ee4cd0478992b39a7ccf4b15bd3152cf16", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/188c60ee4cd0478992b39a7ccf4b15bd3152cf16", "committedDate": "2020-03-09T15:56:37Z", "message": "Improve test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMzczMTcz", "url": "https://github.com/apache/accumulo/pull/1552#pullrequestreview-371373173", "createdAt": "2020-03-09T17:15:14Z", "commit": {"oid": "188c60ee4cd0478992b39a7ccf4b15bd3152cf16"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoxNToxNVrOFzxv7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoxNToxNVrOFzxv7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzNjc4Mg==", "bodyText": "Comment is incorrect:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  assertSame(\"Expected third and sixth transport to be the same instance\", second, seventh);\n          \n          \n            \n                  assertSame(\"Expected second and seventh transport to be the same instance\", second, seventh);", "url": "https://github.com/apache/accumulo/pull/1552#discussion_r389836782", "createdAt": "2020-03-09T17:15:15Z", "author": {"login": "ctubbsii"}, "path": "test/src/main/java/org/apache/accumulo/test/TransportCachingIT.java", "diffHunk": "@@ -49,122 +45,78 @@\n  */\n public class TransportCachingIT extends AccumuloClusterHarness {\n   private static final Logger log = LoggerFactory.getLogger(TransportCachingIT.class);\n-  private static int ATTEMPTS = 0;\n \n   @Test\n   public void testCachedTransport() throws InterruptedException {\n     try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {\n-      while (client.instanceOperations().getTabletServers().isEmpty()) {\n+\n+      List<String> tservers;\n+\n+      while ((tservers = client.instanceOperations().getTabletServers()).isEmpty()) {\n         // sleep until a tablet server is up\n         Thread.sleep(50);\n       }\n+\n       ClientContext context = (ClientContext) client;\n       long rpcTimeout =\n           ConfigurationTypeHelper.getTimeInMillis(Property.GENERAL_RPC_TIMEOUT.getDefaultValue());\n \n-      ZooCache zc = context.getZooCache();\n-      final String zkRoot = context.getZooKeeperRoot();\n+      List<ThriftTransportKey> servers = tservers.stream().map(serverStr -> {\n+        return new ThriftTransportKey(HostAndPort.fromString(serverStr), rpcTimeout, context);\n+      }).collect(Collectors.toList());\n \n-      // wait until Zookeeper is populated\n-      List<String> children = zc.getChildren(zkRoot + Constants.ZTSERVERS);\n-      while (children.isEmpty()) {\n-        Thread.sleep(100);\n-        children = zc.getChildren(zkRoot + Constants.ZTSERVERS);\n-      }\n-\n-      ArrayList<ThriftTransportKey> servers = new ArrayList<>();\n-      while (servers.isEmpty()) {\n-        for (String tserver : children) {\n-          String path = zkRoot + Constants.ZTSERVERS + \"/\" + tserver;\n-          byte[] data = zc.getLockData(path);\n-          if (data != null) {\n-            String strData = new String(data, UTF_8);\n-            if (!strData.equals(\"master\"))\n-              servers.add(new ThriftTransportKey(\n-                  new ServerServices(strData).getAddress(Service.TSERV_CLIENT), rpcTimeout,\n-                  context));\n-          }\n-        }\n-        ATTEMPTS++;\n-        if (!servers.isEmpty())\n-          break;\n-        else {\n-          if (ATTEMPTS < 100) {\n-            log.warn(\"Making another attempt to add ThriftTransportKey servers\");\n-            Thread.sleep(100);\n-          } else {\n-            log.error(\"Failed to add ThriftTransportKey servers - Failing TransportCachingIT test\");\n-            org.junit.Assert\n-                .fail(\"Failed to add ThriftTransportKey servers - Failing TransportCachingIT test\");\n-          }\n-        }\n-      }\n+      // only want to use one server for all subsequent test\n+      servers = servers.subList(0, 1);\n \n       ThriftTransportPool pool = ThriftTransportPool.getInstance();\n-      TTransport first = null;\n-      while (first == null) {\n-        try {\n-          // Get a transport (cached or not)\n-          first = pool.getAnyTransport(servers, true).getSecond();\n-        } catch (TTransportException e) {\n-          log.warn(\"Failed to obtain transport to {}\", servers);\n-        }\n-      }\n+      TTransport first = getAnyTransport(servers, pool, true);\n \n       assertNotNull(first);\n       // Return it to unreserve it\n       pool.returnTransport(first);\n \n-      TTransport second = null;\n-      while (second == null) {\n-        try {\n-          // Get a cached transport (should be the first)\n-          second = pool.getAnyTransport(servers, true).getSecond();\n-        } catch (TTransportException e) {\n-          log.warn(\"Failed obtain 2nd transport to {}\", servers);\n-        }\n-      }\n+      TTransport second = getAnyTransport(servers, pool, true);\n \n       // We should get the same transport\n       assertSame(\"Expected the first and second to be the same instance\", first, second);\n-      // Return the 2nd\n       pool.returnTransport(second);\n \n-      TTransport third = null;\n-      while (third == null) {\n-        try {\n-          // Get a non-cached transport\n-          third = pool.getAnyTransport(servers, false).getSecond();\n-        } catch (TTransportException e) {\n-          log.warn(\"Failed obtain 3rd transport to {}\", servers);\n-        }\n-      }\n-\n+      // Ensure does not get cached connection just returned\n+      TTransport third = getAnyTransport(servers, pool, false);\n       assertNotSame(\"Expected second and third transport to be different instances\", second, third);\n-      pool.returnTransport(third);\n \n-      // ensure the LIFO scheme with a fourth and fifth entry\n-      TTransport fourth = null;\n-      while (fourth == null) {\n-        try {\n-          // Get a non-cached transport\n-          fourth = pool.getAnyTransport(servers, false).getSecond();\n-        } catch (TTransportException e) {\n-          log.warn(\"Failed obtain 4th transport to {}\", servers);\n-        }\n-      }\n+      TTransport fourth = getAnyTransport(servers, pool, false);\n+      assertNotSame(\"Expected third and fourth transport to be different instances\", third, fourth);\n+\n+      pool.returnTransport(third);\n       pool.returnTransport(fourth);\n-      TTransport fifth = null;\n-      while (fifth == null) {\n-        try {\n-          // Get a cached transport\n-          fifth = pool.getAnyTransport(servers, true).getSecond();\n-        } catch (TTransportException e) {\n-          log.warn(\"Failed obtain 5th transport to {}\", servers);\n-        }\n-      }\n+\n+      // The following three asserts ensure the per server queue is LIFO\n+      TTransport fifth = getAnyTransport(servers, pool, true);\n       assertSame(\"Expected fourth and fifth transport to be the same instance\", fourth, fifth);\n+\n+      TTransport sixth = getAnyTransport(servers, pool, true);\n+      assertSame(\"Expected third and sixth transport to be the same instance\", third, sixth);\n+\n+      TTransport seventh = getAnyTransport(servers, pool, true);\n+      assertSame(\"Expected third and sixth transport to be the same instance\", second, seventh);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "188c60ee4cd0478992b39a7ccf4b15bd3152cf16"}, "originalPosition": 173}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f389e73205905fb6e93c49160f6625aee064429", "author": {"user": {"login": "keith-turner", "name": "Keith Turner"}}, "url": "https://github.com/apache/accumulo/commit/5f389e73205905fb6e93c49160f6625aee064429", "committedDate": "2020-03-09T17:32:03Z", "message": "Update test/src/main/java/org/apache/accumulo/test/TransportCachingIT.java\n\nCo-Authored-By: Christopher Tubbs <ctubbsii@apache.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDA1OTA1", "url": "https://github.com/apache/accumulo/pull/1552#pullrequestreview-371405905", "createdAt": "2020-03-09T17:57:38Z", "commit": {"oid": "5f389e73205905fb6e93c49160f6625aee064429"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDc2MDc4", "url": "https://github.com/apache/accumulo/pull/1552#pullrequestreview-371476078", "createdAt": "2020-03-09T19:43:06Z", "commit": {"oid": "5f389e73205905fb6e93c49160f6625aee064429"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1879, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}