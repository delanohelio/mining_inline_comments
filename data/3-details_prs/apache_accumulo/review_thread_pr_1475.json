{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyODMwOTI4", "number": 1475, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTowNzo1MFrODX_QLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNToxMTozOFrODbQaZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDgwMTc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTowNzo1MFrOFdl0YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDo1MzoyNlrOFhgJFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MjY0MQ==", "bodyText": "need a since 2.1 javadoc tag", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r366572641", "createdAt": "2020-01-14T21:07:50Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4Mjg5MQ==", "bodyText": "I think he is targeting the 1.9 branch, which will be 1.10.  So I guess it should be a since 1.10 javadoc tag, which may be the only one haha.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r366582891", "createdAt": "2020-01-14T21:31:56Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MjY0MQ=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4NTc1Mw==", "bodyText": "Interesting, API in 1.10, not in 2.0, and in 2.1.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r366585753", "createdAt": "2020-01-14T21:38:22Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MjY0MQ=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMjU4OA==", "bodyText": "so what should I do in this case?", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r366602588", "createdAt": "2020-01-14T22:18:07Z", "author": {"login": "ivakegg"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MjY0MQ=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNjAwNg==", "bodyText": "I am not sure... maybe it could be @since 1.10 2.1.0", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r366606006", "createdAt": "2020-01-14T22:26:55Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MjY0MQ=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNzg3MQ==", "bodyText": "@since 1.10.0 and 2.1.0 works. Or, since we don't generally add new APIs in bugfix/patch releases, it might suffice to put @since 1.10 and 2.1", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r367727871", "createdAt": "2020-01-17T01:12:43Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MjY0MQ=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3Mzk0Mw==", "bodyText": "will do", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r370673943", "createdAt": "2020-01-24T14:53:26Z", "author": {"login": "ivakegg"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MjY0MQ=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDgzNzcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToyMToyNVrOFdmKkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDo1MjoyMVrOFin5Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODMyMw==", "bodyText": "Would be nice to create a simple class for clone configuration so in the future we do not need to add more overloaded methods.  Something like the following.\n/**\n * @since 2.1.0\n */\nvoid clone(String srcTableName, String newTableName, CloneConfiguration config);\nCould possibly have the following API for CloneConfiguration.\n/**\n * @since 2.1.0\n */\npublic class CloneConfiguration {\n  Map<String,String> getPropertiesToSet();\n\n  Set<String> getPropertiesToExclude();\n\n  boolean flush();\n\n  InitialTableState getInitialState();\n\n  /**\n   * @since 2.1.0\n   */\n  public static interface Builder {\n\n    /**\n     * props to set on the clone. If not set defaults to empty map.\n     */\n    Builder setProperties(Map<String,String> props);\n\n    /**\n     * Props to exclude form the source table.  If not set defaults to empty set.\n     * \n     */\n    Builder excludeProperties(Set<String> props);\n\n    /**\n     * The initial table state for the clone. If not set defaults to ONLINE.\n     */\n    Builder setInitialTableState(InitialTableState init);\n\n    /**\n     * Determines if source tables in memory data is flushed before cloning. Unflushed data will not be in clone.  If not set defaults to true.\n     */\n    Builder setFlush(boolean flush);\n\n    // builds an immutable CloneConfiguration\n    CloneConfiguration build();\n  }\n\n  public static Builder builder() {\n    // TODO return a new builder obj that is not visible in the public API.. see ScanDirectivesImpl\n    // for an example of simple way to implement\n    return null;\n  }\n}", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r366578323", "createdAt": "2020-01-14T21:21:25Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */\n+\n+  void clone(String srcTableName, String newTableName, boolean flush,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMjczNQ==", "bodyText": "I like it, but perhaps I do this only in the 2.1 line?", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r366602735", "createdAt": "2020-01-14T22:18:30Z", "author": {"login": "ivakegg"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */\n+\n+  void clone(String srcTableName, String newTableName, boolean flush,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODMyMw=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyODg3Mw==", "bodyText": "Keeping the change minimal in 1.x is a nice goal, but adding an overloaded method now, that we won't need in 2.1 because the builder is added to 2.1 seems to only add unnecessary bloat. It would probably make sense to add the builder for both 1.10 and 2.1, or only add this entire feature to 2.1, so we never need to add the overloaded version of the method anywhere.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r367728873", "createdAt": "2020-01-17T01:17:07Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */\n+\n+  void clone(String srcTableName, String newTableName, boolean flush,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODMyMw=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMjg5OQ==", "bodyText": "I agree.  There shouldn't be anything in this change that can't go into 1.10 (now that it is java 1.8).  It should then be fairly easy to merge forward and no need for #1476", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r369122899", "createdAt": "2020-01-21T16:56:09Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */\n+\n+  void clone(String srcTableName, String newTableName, boolean flush,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODMyMw=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3NTI2OA==", "bodyText": "ok, adding into the 1.10 line.  Change will be coming soon.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r370675268", "createdAt": "2020-01-24T14:55:49Z", "author": {"login": "ivakegg"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */\n+\n+  void clone(String srcTableName, String newTableName, boolean flush,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODMyMw=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQxNzkxMA==", "bodyText": "@keith-turner : I have implemented a CloneConfiguration and CloneConfigurationImpl.  However I left the impl public to enable creating a new instance in the CloneConfiguration.builder() implementation.  Looking at your ScanDirectives.builder(), it appears to always return the same instance of a builder and hence the configuration object.  Hence that is really not usable across threads.  Was that intentional?", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r371417910", "createdAt": "2020-01-27T18:50:57Z", "author": {"login": "ivakegg"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */\n+\n+  void clone(String srcTableName, String newTableName, boolean flush,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODMyMw=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0MDMzMw==", "bodyText": "FYI ScanDirectives were added in #1440", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r371440333", "createdAt": "2020-01-27T19:35:39Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */\n+\n+  void clone(String srcTableName, String newTableName, boolean flush,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODMyMw=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ5OTUyOA==", "bodyText": "@ivakegg I think I figured out what is going on with the ScanDirectives.builder()... the setters in DefaultScanDirectives will return a new object of the parent class.\nreturn new ScanDirectivesImpl().setExecutorName(name);\nSo the builder will always return DefaultScanDirectives first with the builder() method and then only if something needs to be set return a new ScanDirectivesImpl object.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r371499528", "createdAt": "2020-01-27T21:44:46Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */\n+\n+  void clone(String srcTableName, String newTableName, boolean flush,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODMyMw=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxOTY1OA==", "bodyText": "Ah, I see it now.  So should I change to the same pattern for the builder()?  I guess I would at least be able to make the CloneConfigurationImpl package private if I did but I am not sure it is worth the extra class.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r371819658", "createdAt": "2020-01-28T14:04:19Z", "author": {"login": "ivakegg"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */\n+\n+  void clone(String srcTableName, String newTableName, boolean flush,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODMyMw=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgzOTg5NA==", "bodyText": "The pattern I chose for ScanDirectives builder is complex because I thought it would be called very frequently and wanted it to be efficient.  For CloneConfiguration builder, I don't think efficiency would be a concern so personally I would go with the simplest implementation.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r371839894", "createdAt": "2020-01-28T14:37:13Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */\n+\n+  void clone(String srcTableName, String newTableName, boolean flush,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODMyMw=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg0OTUwMw==", "bodyText": "OK, then I will leave it as is.  Thanks @keith-turner.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r371849503", "createdAt": "2020-01-28T14:52:21Z", "author": {"login": "ivakegg"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -433,6 +433,33 @@ void clone(String srcTableName, String newTableName, boolean flush,\n       Map<String,String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException,\n       AccumuloSecurityException, TableNotFoundException, TableExistsException;\n \n+  /**\n+   * Clone a table from an existing table. The cloned table will have the same data as the source\n+   * table it was created from. After cloning, the two tables can mutate independently. Initially\n+   * the cloned table should not use any extra space, however as the source table and cloned table\n+   * major compact extra space will be used by the clone.\n+   *\n+   * Initially the cloned table is only readable and writable by the user who created it.\n+   *\n+   * @param srcTableName\n+   *          the table to clone\n+   * @param newTableName\n+   *          the name of the clone\n+   * @param flush\n+   *          determines if memory is flushed in the source table before cloning.\n+   * @param propertiesToSet\n+   *          the sources tables properties are copied, this allows overriding of those properties\n+   * @param propertiesToExclude\n+   *          do not copy these properties from the source table, just revert to system defaults\n+   * @param keepOffline\n+   *          do not bring the table online after cloning\n+   */\n+\n+  void clone(String srcTableName, String newTableName, boolean flush,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODMyMw=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDg0MTg0OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/commands/CloneTableCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToyMzowM1rOFdmNJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoxNzozNlrOFdnonQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODk4MA==", "bodyText": "Probably better to name the option \"o\", to be consistent with other offline commands.  For example, that is what CreateTableCommand uses in 2.X", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r366578980", "createdAt": "2020-01-14T21:23:03Z", "author": {"login": "milleruntime"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/CloneTableCommand.java", "diffHunk": "@@ -99,6 +105,8 @@ public Options getOptions() {\n     noFlushOption =\n         new Option(\"nf\", \"noFlush\", false, \"do not flush table data in memory before cloning.\");\n     o.addOption(noFlushOption);\n+    keepOfflineOption =\n+        new Option(\"k\", \"keepOffline\", false, \"do not bring the table online after cloning.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMjM5Nw==", "bodyText": "done", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r366602397", "createdAt": "2020-01-14T22:17:36Z", "author": {"login": "ivakegg"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/CloneTableCommand.java", "diffHunk": "@@ -99,6 +105,8 @@ public Options getOptions() {\n     noFlushOption =\n         new Option(\"nf\", \"noFlush\", false, \"do not flush table data in memory before cloning.\");\n     o.addOption(noFlushOption);\n+    keepOfflineOption =\n+        new Option(\"k\", \"keepOffline\", false, \"do not bring the table online after cloning.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODk4MA=="}, "originalCommit": {"oid": "bf46842032e04bbb85f87811e5bae633c3e3974b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzgwMDk4OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/commands/CloneTableCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODo0MjozN1rOFeChGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDo1Nzo0M1rOFhgSUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0Mjg0Mg==", "bodyText": "keepOfflineOption wasn't added to 'o' so it won't show up on the shell command line as an option.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r367042842", "createdAt": "2020-01-15T18:42:37Z", "author": {"login": "Manno15"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/CloneTableCommand.java", "diffHunk": "@@ -99,6 +105,8 @@ public Options getOptions() {\n     noFlushOption =\n         new Option(\"nf\", \"noFlush\", false, \"do not flush table data in memory before cloning.\");\n     o.addOption(noFlushOption);\n+    keepOfflineOption =\n+        new Option(\"o\", \"offline\", false, \"do not bring the table online after cloning.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c426c3993f67da13fb723db1978be2b5d6428e30"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMTA1OA==", "bodyText": "This could be tested with ShellServerIT", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r367731058", "createdAt": "2020-01-17T01:27:03Z", "author": {"login": "ctubbsii"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/CloneTableCommand.java", "diffHunk": "@@ -99,6 +105,8 @@ public Options getOptions() {\n     noFlushOption =\n         new Option(\"nf\", \"noFlush\", false, \"do not flush table data in memory before cloning.\");\n     o.addOption(noFlushOption);\n+    keepOfflineOption =\n+        new Option(\"o\", \"offline\", false, \"do not bring the table online after cloning.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0Mjg0Mg=="}, "originalCommit": {"oid": "c426c3993f67da13fb723db1978be2b5d6428e30"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3NjMwNg==", "bodyText": "doh", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r370676306", "createdAt": "2020-01-24T14:57:43Z", "author": {"login": "ivakegg"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/CloneTableCommand.java", "diffHunk": "@@ -99,6 +105,8 @@ public Options getOptions() {\n     noFlushOption =\n         new Option(\"nf\", \"noFlush\", false, \"do not flush table data in memory before cloning.\");\n     o.addOption(noFlushOption);\n+    keepOfflineOption =\n+        new Option(\"o\", \"offline\", false, \"do not bring the table online after cloning.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0Mjg0Mg=="}, "originalCommit": {"oid": "c426c3993f67da13fb723db1978be2b5d6428e30"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjE2NjkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMToyNTo0NVrOFesgTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo1NDoyNlrOFhnLgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMDc2Nw==", "bodyText": "INFO-only: The standard built-in Java exception here is UnsupportedOperationException, not the commons-lang subclass. This is fine for consistency with the rest of the class, but it's a bad idea to use the commons-lang version in general (especially since it has been added and removed there, so it depends on what version of the library you're using). We replaced all these occurrences that in the 2.x branch when we switched to commons-lang3.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r367730767", "createdAt": "2020-01-17T01:25:45Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java", "diffHunk": "@@ -474,6 +474,14 @@ public void clone(String srcTableName, String newTableName, boolean flush,\n     throw new NotImplementedException();\n   }\n \n+  @Override\n+  public void clone(String srcTableName, String newTableName, boolean flush,\n+      Map<String,String> propertiesToSet, Set<String> propertiesToExclude, boolean keepOffline)\n+      throws AccumuloException, AccumuloSecurityException, TableNotFoundException,\n+      TableExistsException {\n+    throw new NotImplementedException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c426c3993f67da13fb723db1978be2b5d6428e30"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3NTc0OA==", "bodyText": "ok, I will have to remember this when I merge into 2.1.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r370675748", "createdAt": "2020-01-24T14:56:43Z", "author": {"login": "ivakegg"}, "path": "core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java", "diffHunk": "@@ -474,6 +474,14 @@ public void clone(String srcTableName, String newTableName, boolean flush,\n     throw new NotImplementedException();\n   }\n \n+  @Override\n+  public void clone(String srcTableName, String newTableName, boolean flush,\n+      Map<String,String> propertiesToSet, Set<String> propertiesToExclude, boolean keepOffline)\n+      throws AccumuloException, AccumuloSecurityException, TableNotFoundException,\n+      TableExistsException {\n+    throw new NotImplementedException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMDc2Nw=="}, "originalCommit": {"oid": "c426c3993f67da13fb723db1978be2b5d6428e30"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4OTI0OA==", "bodyText": "Actually there is no MockTableOperations in 2.1, so this is a moot point.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r370789248", "createdAt": "2020-01-24T18:54:26Z", "author": {"login": "ivakegg"}, "path": "core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java", "diffHunk": "@@ -474,6 +474,14 @@ public void clone(String srcTableName, String newTableName, boolean flush,\n     throw new NotImplementedException();\n   }\n \n+  @Override\n+  public void clone(String srcTableName, String newTableName, boolean flush,\n+      Map<String,String> propertiesToSet, Set<String> propertiesToExclude, boolean keepOffline)\n+      throws AccumuloException, AccumuloSecurityException, TableNotFoundException,\n+      TableExistsException {\n+    throw new NotImplementedException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMDc2Nw=="}, "originalCommit": {"oid": "c426c3993f67da13fb723db1978be2b5d6428e30"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTI2MDAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/CloneConfigurationImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDoyMToxMlrOFiEROw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNzo1MDowNlrOFiLyHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2NTg1MQ==", "bodyText": "The Impl class should be in the client.impl package.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r371265851", "createdAt": "2020-01-27T14:21:12Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/CloneConfigurationImpl.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.client.admin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4314d1c4531ef54185ef47770fece5ec97ddae"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM4ODk1OA==", "bodyText": "ah, ok", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r371388958", "createdAt": "2020-01-27T17:50:06Z", "author": {"login": "ivakegg"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/CloneConfigurationImpl.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.client.admin;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2NTg1MQ=="}, "originalCommit": {"oid": "fe4314d1c4531ef54185ef47770fece5ec97ddae"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTI4MzE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/CloneConfigurationImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDoyNzoyNVrOFiEfWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODoyMzoyNVrOFiMvww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2OTQ2NQ==", "bodyText": "This method should be in the CloneConfiguration interface so users don't need to touch the Impl class.  With Java 1.8 you can make this a default method too.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r371269465", "createdAt": "2020-01-27T14:27:25Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/CloneConfigurationImpl.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.client.admin;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * A {@link CloneConfiguration} implementation which also implements the builder thereof\n+ *\n+ * @since 1.10 and 2.1\n+ */\n+public class CloneConfigurationImpl implements CloneConfiguration, CloneConfiguration.Builder {\n+\n+  // The purpose of this is to allow building an immutable CloneConfiguration object without\n+  // creating\n+  // separate Builder and CloneConfiguration objects. This is done to reduce object creation and\n+  // copying. This could easily be changed to two objects without changing the interfaces.\n+  private boolean built = false;\n+\n+  // determines if memory is flushed in the source table before cloning.\n+  private boolean flush = true;\n+\n+  // the sources table properties are copied, this allows overriding of those properties\n+  private Map<String,String> propertiesToSet = null;\n+\n+  // do not copy these properties from the source table, just revert to system defaults\n+  private Set<String> propertiesToExclude = null;\n+\n+  // do not bring the table online after cloning\n+  private boolean keepOffline = false;\n+\n+  private CloneConfigurationImpl() {}\n+\n+  public boolean isFlush() {\n+    Preconditions.checkState(built);\n+    return flush;\n+  }\n+\n+  public Map<String,String> getPropertiesToSet() {\n+    Preconditions.checkState(built);\n+    return (propertiesToSet == null ? Collections.<String,String>emptyMap()\n+        : Collections.unmodifiableMap(propertiesToSet));\n+  }\n+\n+  public Set<String> getPropertiesToExclude() {\n+    Preconditions.checkState(built);\n+    return (propertiesToExclude == null ? Collections.<String>emptySet()\n+        : Collections.unmodifiableSet(propertiesToExclude));\n+  }\n+\n+  public boolean isKeepOffline() {\n+    Preconditions.checkState(built);\n+    return keepOffline;\n+  }\n+\n+  @Override\n+  public Builder setFlush(boolean flush) {\n+    Preconditions.checkState(!built);\n+    this.flush = flush;\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder setPropertiesToSet(Map<String,String> propertiesToSet) {\n+    Preconditions.checkState(!built);\n+    this.propertiesToSet = propertiesToSet;\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder setPropertiesToExclude(Set<String> propertiesToExclude) {\n+    Preconditions.checkState(!built);\n+    this.propertiesToExclude = propertiesToExclude;\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder setKeepOffline(boolean keepOffline) {\n+    Preconditions.checkState(!built);\n+    this.keepOffline = keepOffline;\n+    return this;\n+  }\n+\n+  @Override\n+  public CloneConfiguration build() {\n+    Preconditions.checkState(!built);\n+    built = true;\n+    return this;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"{flush=\" + flush + \", propertiesToSet=\" + propertiesToSet + \", propertiesToExclude=\"\n+        + propertiesToExclude + \", keepOffline=\" + keepOffline + \", built=\" + built + \"}\";\n+  }\n+\n+  /**\n+   * @return a {@link CloneConfiguration} builder\n+   */\n+  public static CloneConfiguration.Builder builder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4314d1c4531ef54185ef47770fece5ec97ddae"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM4OTgxNg==", "bodyText": "If the pom was not forcing 1.7 source compatibility, then I would.  In the top level pom of the 1.9 branch I see:\n<maven.compiler.release>7</maven.compiler.release>\n<maven.compiler.source>1.7</maven.compiler.source>\n<maven.compiler.target>1.7</maven.compiler.target>", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r371389816", "createdAt": "2020-01-27T17:51:52Z", "author": {"login": "ivakegg"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/CloneConfigurationImpl.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.client.admin;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * A {@link CloneConfiguration} implementation which also implements the builder thereof\n+ *\n+ * @since 1.10 and 2.1\n+ */\n+public class CloneConfigurationImpl implements CloneConfiguration, CloneConfiguration.Builder {\n+\n+  // The purpose of this is to allow building an immutable CloneConfiguration object without\n+  // creating\n+  // separate Builder and CloneConfiguration objects. This is done to reduce object creation and\n+  // copying. This could easily be changed to two objects without changing the interfaces.\n+  private boolean built = false;\n+\n+  // determines if memory is flushed in the source table before cloning.\n+  private boolean flush = true;\n+\n+  // the sources table properties are copied, this allows overriding of those properties\n+  private Map<String,String> propertiesToSet = null;\n+\n+  // do not copy these properties from the source table, just revert to system defaults\n+  private Set<String> propertiesToExclude = null;\n+\n+  // do not bring the table online after cloning\n+  private boolean keepOffline = false;\n+\n+  private CloneConfigurationImpl() {}\n+\n+  public boolean isFlush() {\n+    Preconditions.checkState(built);\n+    return flush;\n+  }\n+\n+  public Map<String,String> getPropertiesToSet() {\n+    Preconditions.checkState(built);\n+    return (propertiesToSet == null ? Collections.<String,String>emptyMap()\n+        : Collections.unmodifiableMap(propertiesToSet));\n+  }\n+\n+  public Set<String> getPropertiesToExclude() {\n+    Preconditions.checkState(built);\n+    return (propertiesToExclude == null ? Collections.<String>emptySet()\n+        : Collections.unmodifiableSet(propertiesToExclude));\n+  }\n+\n+  public boolean isKeepOffline() {\n+    Preconditions.checkState(built);\n+    return keepOffline;\n+  }\n+\n+  @Override\n+  public Builder setFlush(boolean flush) {\n+    Preconditions.checkState(!built);\n+    this.flush = flush;\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder setPropertiesToSet(Map<String,String> propertiesToSet) {\n+    Preconditions.checkState(!built);\n+    this.propertiesToSet = propertiesToSet;\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder setPropertiesToExclude(Set<String> propertiesToExclude) {\n+    Preconditions.checkState(!built);\n+    this.propertiesToExclude = propertiesToExclude;\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder setKeepOffline(boolean keepOffline) {\n+    Preconditions.checkState(!built);\n+    this.keepOffline = keepOffline;\n+    return this;\n+  }\n+\n+  @Override\n+  public CloneConfiguration build() {\n+    Preconditions.checkState(!built);\n+    built = true;\n+    return this;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"{flush=\" + flush + \", propertiesToSet=\" + propertiesToSet + \", propertiesToExclude=\"\n+        + propertiesToExclude + \", keepOffline=\" + keepOffline + \", built=\" + built + \"}\";\n+  }\n+\n+  /**\n+   * @return a {@link CloneConfiguration} builder\n+   */\n+  public static CloneConfiguration.Builder builder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2OTQ2NQ=="}, "originalCommit": {"oid": "fe4314d1c4531ef54185ef47770fece5ec97ddae"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM5MzQ3Mw==", "bodyText": "Probably need to update your branch... I added Java 1.8 in 9c957ab for the 1.10 release.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r371393473", "createdAt": "2020-01-27T17:59:20Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/CloneConfigurationImpl.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.client.admin;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * A {@link CloneConfiguration} implementation which also implements the builder thereof\n+ *\n+ * @since 1.10 and 2.1\n+ */\n+public class CloneConfigurationImpl implements CloneConfiguration, CloneConfiguration.Builder {\n+\n+  // The purpose of this is to allow building an immutable CloneConfiguration object without\n+  // creating\n+  // separate Builder and CloneConfiguration objects. This is done to reduce object creation and\n+  // copying. This could easily be changed to two objects without changing the interfaces.\n+  private boolean built = false;\n+\n+  // determines if memory is flushed in the source table before cloning.\n+  private boolean flush = true;\n+\n+  // the sources table properties are copied, this allows overriding of those properties\n+  private Map<String,String> propertiesToSet = null;\n+\n+  // do not copy these properties from the source table, just revert to system defaults\n+  private Set<String> propertiesToExclude = null;\n+\n+  // do not bring the table online after cloning\n+  private boolean keepOffline = false;\n+\n+  private CloneConfigurationImpl() {}\n+\n+  public boolean isFlush() {\n+    Preconditions.checkState(built);\n+    return flush;\n+  }\n+\n+  public Map<String,String> getPropertiesToSet() {\n+    Preconditions.checkState(built);\n+    return (propertiesToSet == null ? Collections.<String,String>emptyMap()\n+        : Collections.unmodifiableMap(propertiesToSet));\n+  }\n+\n+  public Set<String> getPropertiesToExclude() {\n+    Preconditions.checkState(built);\n+    return (propertiesToExclude == null ? Collections.<String>emptySet()\n+        : Collections.unmodifiableSet(propertiesToExclude));\n+  }\n+\n+  public boolean isKeepOffline() {\n+    Preconditions.checkState(built);\n+    return keepOffline;\n+  }\n+\n+  @Override\n+  public Builder setFlush(boolean flush) {\n+    Preconditions.checkState(!built);\n+    this.flush = flush;\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder setPropertiesToSet(Map<String,String> propertiesToSet) {\n+    Preconditions.checkState(!built);\n+    this.propertiesToSet = propertiesToSet;\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder setPropertiesToExclude(Set<String> propertiesToExclude) {\n+    Preconditions.checkState(!built);\n+    this.propertiesToExclude = propertiesToExclude;\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder setKeepOffline(boolean keepOffline) {\n+    Preconditions.checkState(!built);\n+    this.keepOffline = keepOffline;\n+    return this;\n+  }\n+\n+  @Override\n+  public CloneConfiguration build() {\n+    Preconditions.checkState(!built);\n+    built = true;\n+    return this;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"{flush=\" + flush + \", propertiesToSet=\" + propertiesToSet + \", propertiesToExclude=\"\n+        + propertiesToExclude + \", keepOffline=\" + keepOffline + \", built=\" + built + \"}\";\n+  }\n+\n+  /**\n+   * @return a {@link CloneConfiguration} builder\n+   */\n+  public static CloneConfiguration.Builder builder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2OTQ2NQ=="}, "originalCommit": {"oid": "fe4314d1c4531ef54185ef47770fece5ec97ddae"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQwNDczOQ==", "bodyText": "I see it now.... ok moving static method into interface", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r371404739", "createdAt": "2020-01-27T18:23:25Z", "author": {"login": "ivakegg"}, "path": "core/src/main/java/org/apache/accumulo/core/client/admin/CloneConfigurationImpl.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.client.admin;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * A {@link CloneConfiguration} implementation which also implements the builder thereof\n+ *\n+ * @since 1.10 and 2.1\n+ */\n+public class CloneConfigurationImpl implements CloneConfiguration, CloneConfiguration.Builder {\n+\n+  // The purpose of this is to allow building an immutable CloneConfiguration object without\n+  // creating\n+  // separate Builder and CloneConfiguration objects. This is done to reduce object creation and\n+  // copying. This could easily be changed to two objects without changing the interfaces.\n+  private boolean built = false;\n+\n+  // determines if memory is flushed in the source table before cloning.\n+  private boolean flush = true;\n+\n+  // the sources table properties are copied, this allows overriding of those properties\n+  private Map<String,String> propertiesToSet = null;\n+\n+  // do not copy these properties from the source table, just revert to system defaults\n+  private Set<String> propertiesToExclude = null;\n+\n+  // do not bring the table online after cloning\n+  private boolean keepOffline = false;\n+\n+  private CloneConfigurationImpl() {}\n+\n+  public boolean isFlush() {\n+    Preconditions.checkState(built);\n+    return flush;\n+  }\n+\n+  public Map<String,String> getPropertiesToSet() {\n+    Preconditions.checkState(built);\n+    return (propertiesToSet == null ? Collections.<String,String>emptyMap()\n+        : Collections.unmodifiableMap(propertiesToSet));\n+  }\n+\n+  public Set<String> getPropertiesToExclude() {\n+    Preconditions.checkState(built);\n+    return (propertiesToExclude == null ? Collections.<String>emptySet()\n+        : Collections.unmodifiableSet(propertiesToExclude));\n+  }\n+\n+  public boolean isKeepOffline() {\n+    Preconditions.checkState(built);\n+    return keepOffline;\n+  }\n+\n+  @Override\n+  public Builder setFlush(boolean flush) {\n+    Preconditions.checkState(!built);\n+    this.flush = flush;\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder setPropertiesToSet(Map<String,String> propertiesToSet) {\n+    Preconditions.checkState(!built);\n+    this.propertiesToSet = propertiesToSet;\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder setPropertiesToExclude(Set<String> propertiesToExclude) {\n+    Preconditions.checkState(!built);\n+    this.propertiesToExclude = propertiesToExclude;\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder setKeepOffline(boolean keepOffline) {\n+    Preconditions.checkState(!built);\n+    this.keepOffline = keepOffline;\n+    return this;\n+  }\n+\n+  @Override\n+  public CloneConfiguration build() {\n+    Preconditions.checkState(!built);\n+    built = true;\n+    return this;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"{flush=\" + flush + \", propertiesToSet=\" + propertiesToSet + \", propertiesToExclude=\"\n+        + propertiesToExclude + \", keepOffline=\" + keepOffline + \", built=\" + built + \"}\";\n+  }\n+\n+  /**\n+   * @return a {@link CloneConfiguration} builder\n+   */\n+  public static CloneConfiguration.Builder builder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2OTQ2NQ=="}, "originalCommit": {"oid": "fe4314d1c4531ef54185ef47770fece5ec97ddae"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTA3MDQ2OnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/apache/accumulo/test/functional/CloneTestIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNToxMTozOFrOFiop_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNToxNjo1NFrOFio3Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2MjAxMw==", "bodyText": "Purely pedantic, so I'm sure this is ignorable - consider naming this assertTableState because it actually performs the assertion and will fail if the assertion fails.", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r371862013", "createdAt": "2020-01-28T15:11:38Z", "author": {"login": "drewfarris"}, "path": "test/src/main/java/org/apache/accumulo/test/functional/CloneTestIT.java", "diffHunk": "@@ -121,6 +125,12 @@ public void testProps() throws Exception {\n \n   }\n \n+  private void checkTableState(String table, Connector c, TableState expected) throws TException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc40d079edad6098a7c04ff0147a1bd9b4cdbf17"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2NTM5MA==", "bodyText": "done", "url": "https://github.com/apache/accumulo/pull/1475#discussion_r371865390", "createdAt": "2020-01-28T15:16:54Z", "author": {"login": "ivakegg"}, "path": "test/src/main/java/org/apache/accumulo/test/functional/CloneTestIT.java", "diffHunk": "@@ -121,6 +125,12 @@ public void testProps() throws Exception {\n \n   }\n \n+  private void checkTableState(String table, Connector c, TableState expected) throws TException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2MjAxMw=="}, "originalCommit": {"oid": "dc40d079edad6098a7c04ff0147a1bd9b4cdbf17"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4299, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}