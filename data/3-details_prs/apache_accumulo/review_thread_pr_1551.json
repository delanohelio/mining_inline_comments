{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NjE4MTEx", "number": 1551, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTowMzoyNVrODl0_3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNToyOTozMFrODl1mXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTkyMjIxOnYy", "diffSide": "RIGHT", "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/CreateImportDir.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTowMzoyNVrOFy72_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo1NjoyN1rOFy__tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1Mzg1Mw==", "bodyText": "Could use sl4j parameterized log statement.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                log.info(\"Looking for matching filesystem for \" + exportDir + \" from options \" + tableDirs);\n          \n          \n            \n                log.info(\"Looking for matching filesystem for {} from options {}\", exportDir, tableDirs);", "url": "https://github.com/apache/accumulo/pull/1551#discussion_r388953853", "createdAt": "2020-03-06T15:03:25Z", "author": {"login": "milleruntime"}, "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/CreateImportDir.java", "diffHunk": "@@ -47,10 +47,9 @@\n     UniqueNameAllocator namer = master.getContext().getUniqueNameAllocator();\n \n     Path exportDir = new Path(tableInfo.exportDir);\n-    String[] tableDirs = ServerConstants.getTablesDirs(master.getContext());\n+    Set<String> tableDirs = ServerConstants.getTablesDirs(master.getContext());\n \n-    log.info(\"Looking for matching filesystem for \" + exportDir + \" from options \"\n-        + Arrays.toString(tableDirs));\n+    log.info(\"Looking for matching filesystem for \" + exportDir + \" from options \" + tableDirs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d886d869e628874054379f2b5ecdad702d9e0881"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyMTYyMw==", "bodyText": "This was preexisting, but good to change while we're in there.", "url": "https://github.com/apache/accumulo/pull/1551#discussion_r389021623", "createdAt": "2020-03-06T16:56:27Z", "author": {"login": "ctubbsii"}, "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/CreateImportDir.java", "diffHunk": "@@ -47,10 +47,9 @@\n     UniqueNameAllocator namer = master.getContext().getUniqueNameAllocator();\n \n     Path exportDir = new Path(tableInfo.exportDir);\n-    String[] tableDirs = ServerConstants.getTablesDirs(master.getContext());\n+    Set<String> tableDirs = ServerConstants.getTablesDirs(master.getContext());\n \n-    log.info(\"Looking for matching filesystem for \" + exportDir + \" from options \"\n-        + Arrays.toString(tableDirs));\n+    log.info(\"Looking for matching filesystem for \" + exportDir + \" from options \" + tableDirs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1Mzg1Mw=="}, "originalCommit": {"oid": "d886d869e628874054379f2b5ecdad702d9e0881"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTk0MDYzOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTowODo0OVrOFy8Cxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo1NzoxNFrOFzABVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1Njg3MQ==", "bodyText": "Could make ViewFSUtils take a Set as well.  Looks like this is the only class that uses it.", "url": "https://github.com/apache/accumulo/pull/1551#discussion_r388956871", "createdAt": "2020-03-06T15:08:49Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -385,10 +385,10 @@ public boolean isReady() throws IOException {\n   }\n \n   @Override\n-  public Path matchingFileSystem(Path source, String[] options) {\n+  public Path matchingFileSystem(Path source, Set<String> options) {\n     try {\n       if (ViewFSUtils.isViewFS(source, hadoopConf)) {\n-        return ViewFSUtils.matchingFileSystem(source, options, hadoopConf);\n+        return ViewFSUtils.matchingFileSystem(source, options.toArray(new String[0]), hadoopConf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d886d869e628874054379f2b5ecdad702d9e0881"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyMjAzOA==", "bodyText": "I'm going to deal with this class separately... I think we can rip out the viewfs support tooling... since we explicitly ban it.", "url": "https://github.com/apache/accumulo/pull/1551#discussion_r389022038", "createdAt": "2020-03-06T16:57:14Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -385,10 +385,10 @@ public boolean isReady() throws IOException {\n   }\n \n   @Override\n-  public Path matchingFileSystem(Path source, String[] options) {\n+  public Path matchingFileSystem(Path source, Set<String> options) {\n     try {\n       if (ViewFSUtils.isViewFS(source, hadoopConf)) {\n-        return ViewFSUtils.matchingFileSystem(source, options, hadoopConf);\n+        return ViewFSUtils.matchingFileSystem(source, options.toArray(new String[0]), hadoopConf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1Njg3MQ=="}, "originalCommit": {"oid": "d886d869e628874054379f2b5ecdad702d9e0881"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTk5OTgzOnYy", "diffSide": "RIGHT", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/InterfaceEvolutionWarner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNToyMzo1MFrOFy8nWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo1ODozNlrOFzAGCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2NjIzMg==", "bodyText": "This is neat.  The name is a little long though, could just call it ApiWarner or ApiNotifier.  I wonder if there are other deprecated APIs that we want to warn about?  Could be a follow on task.", "url": "https://github.com/apache/accumulo/pull/1551#discussion_r388966232", "createdAt": "2020-03-06T15:23:50Z", "author": {"login": "milleruntime"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/InterfaceEvolutionWarner.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.server.fs;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class InterfaceEvolutionWarner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d886d869e628874054379f2b5ecdad702d9e0881"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyMzI0Mg==", "bodyText": "Nothing is tied to the name, not even its logger, so we can rename, move, and reuse it however we want, as needed.", "url": "https://github.com/apache/accumulo/pull/1551#discussion_r389023242", "createdAt": "2020-03-06T16:58:36Z", "author": {"login": "ctubbsii"}, "path": "server/base/src/main/java/org/apache/accumulo/server/fs/InterfaceEvolutionWarner.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.server.fs;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class InterfaceEvolutionWarner {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2NjIzMg=="}, "originalCommit": {"oid": "d886d869e628874054379f2b5ecdad702d9e0881"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDAyMDc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/volume/VolumeConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNToyOTozMFrOFy80mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzowMToxOVrOFzARhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2OTYyNA==", "bodyText": "Can never have enough sanity checks!  Could create unit tests for these checks, one where two configured Volumes get normalized to the same Path.", "url": "https://github.com/apache/accumulo/pull/1551#discussion_r388969624", "createdAt": "2020-03-06T15:29:30Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/volume/VolumeConfiguration.java", "diffHunk": "@@ -107,29 +110,31 @@ public static String getConfiguredBaseDir(AccumuloConfiguration conf,\n \n         try {\n           // pass through URI to unescape hex encoded chars (e.g. convert %2C to \",\" char)\n-          configuredBaseDirs[i++] = new Path(new URI(namespace)).toString();\n+          configuredBaseDirs.add(new Path(new URI(namespace)).toString());\n         } catch (URISyntaxException e) {\n           throw new IllegalArgumentException(Property.INSTANCE_VOLUMES.getKey() + \" contains \"\n               + namespace + \" which has a syntax error\", e);\n         }\n       }\n     }\n \n-    return configuredBaseDirs;\n+    LinkedHashSet<String> deduplicated = new LinkedHashSet<>();\n+    deduplicated.addAll(configuredBaseDirs);\n+    if (deduplicated.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          Property.INSTANCE_VOLUMES.getKey() + \" contains no volumes (\" + ns + \")\");\n+    }\n+    if (deduplicated.size() < configuredBaseDirs.size()) {\n+      throw new IllegalArgumentException(\n+          Property.INSTANCE_VOLUMES.getKey() + \" contains duplicate volumes (\" + ns + \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d886d869e628874054379f2b5ecdad702d9e0881"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyNjE4MQ==", "bodyText": "This code is likely to change with #1397, so I didn't want to spend too much time adding more stuff like that just yet, but can do so with #1397.", "url": "https://github.com/apache/accumulo/pull/1551#discussion_r389026181", "createdAt": "2020-03-06T17:01:19Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/volume/VolumeConfiguration.java", "diffHunk": "@@ -107,29 +110,31 @@ public static String getConfiguredBaseDir(AccumuloConfiguration conf,\n \n         try {\n           // pass through URI to unescape hex encoded chars (e.g. convert %2C to \",\" char)\n-          configuredBaseDirs[i++] = new Path(new URI(namespace)).toString();\n+          configuredBaseDirs.add(new Path(new URI(namespace)).toString());\n         } catch (URISyntaxException e) {\n           throw new IllegalArgumentException(Property.INSTANCE_VOLUMES.getKey() + \" contains \"\n               + namespace + \" which has a syntax error\", e);\n         }\n       }\n     }\n \n-    return configuredBaseDirs;\n+    LinkedHashSet<String> deduplicated = new LinkedHashSet<>();\n+    deduplicated.addAll(configuredBaseDirs);\n+    if (deduplicated.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          Property.INSTANCE_VOLUMES.getKey() + \" contains no volumes (\" + ns + \")\");\n+    }\n+    if (deduplicated.size() < configuredBaseDirs.size()) {\n+      throw new IllegalArgumentException(\n+          Property.INSTANCE_VOLUMES.getKey() + \" contains duplicate volumes (\" + ns + \")\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2OTYyNA=="}, "originalCommit": {"oid": "d886d869e628874054379f2b5ecdad702d9e0881"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4189, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}