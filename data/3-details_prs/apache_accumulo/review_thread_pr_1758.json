{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNzA1MDU3", "number": 1758, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoyMjowM1rOEz3V0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDozNDozNFrOEz81aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODE5NTM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooReaderWriter.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoyMjowM1rOHrWeLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjoxNzo1N1rOHrh6iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxODk4OQ==", "bodyText": "Should describe what this method is doing.  While this is an improvement over the previous method, it is not clear that it has anything to do with ACL's.  Perhaps mention it on one of the other methods?  I am not sure but we should describe somewhere what we are doing with the permissions on the node.", "url": "https://github.com/apache/accumulo/pull/1758#discussion_r515218989", "createdAt": "2020-10-30T16:22:03Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooReaderWriter.java", "diffHunk": "@@ -138,6 +128,24 @@ public void recursiveCopyPersistentOverwrite(String source, String destination)\n     }, e -> e.code() == Code.BADVERSION); // always retry if bad version\n   }\n \n+  public byte[] createPublicOrMutate(String zPath, byte[] createValue, Mutator mutator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5733a660f429549ac0ea1774311de02f6fc2c3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzODk3OA==", "bodyText": "The original method that I split didn't have a javadoc, presumably because it's only used internally and its function is obvious from the method signature. However, I can add a basic javadoc to both the two new methods to help clarify the purpose, and to make it more obvious what the permissions will be on the created method.", "url": "https://github.com/apache/accumulo/pull/1758#discussion_r515338978", "createdAt": "2020-10-30T19:44:47Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooReaderWriter.java", "diffHunk": "@@ -138,6 +128,24 @@ public void recursiveCopyPersistentOverwrite(String source, String destination)\n     }, e -> e.code() == Code.BADVERSION); // always retry if bad version\n   }\n \n+  public byte[] createPublicOrMutate(String zPath, byte[] createValue, Mutator mutator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxODk4OQ=="}, "originalCommit": {"oid": "5d5733a660f429549ac0ea1774311de02f6fc2c3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0MzU0NA==", "bodyText": "I was thinking whatever methods end up being the top level or entry methods to these classes would be good.  No need to javadoc all the methods, especially private ones.", "url": "https://github.com/apache/accumulo/pull/1758#discussion_r515343544", "createdAt": "2020-10-30T19:51:03Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooReaderWriter.java", "diffHunk": "@@ -138,6 +128,24 @@ public void recursiveCopyPersistentOverwrite(String source, String destination)\n     }, e -> e.code() == Code.BADVERSION); // always retry if bad version\n   }\n \n+  public byte[] createPublicOrMutate(String zPath, byte[] createValue, Mutator mutator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxODk4OQ=="}, "originalCommit": {"oid": "5d5733a660f429549ac0ea1774311de02f6fc2c3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NDg2NQ==", "bodyText": "I was only going to add the javadoc to the two I split this original one into. I'm not going to be an overachiever \ud83d\ude3a", "url": "https://github.com/apache/accumulo/pull/1758#discussion_r515344865", "createdAt": "2020-10-30T19:54:03Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooReaderWriter.java", "diffHunk": "@@ -138,6 +128,24 @@ public void recursiveCopyPersistentOverwrite(String source, String destination)\n     }, e -> e.code() == Code.BADVERSION); // always retry if bad version\n   }\n \n+  public byte[] createPublicOrMutate(String zPath, byte[] createValue, Mutator mutator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxODk4OQ=="}, "originalCommit": {"oid": "5d5733a660f429549ac0ea1774311de02f6fc2c3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwNjQ3NQ==", "bodyText": "I ended up updating all the javadocs in this class... \ud83d\ude3a", "url": "https://github.com/apache/accumulo/pull/1758#discussion_r515406475", "createdAt": "2020-10-30T22:17:57Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooReaderWriter.java", "diffHunk": "@@ -138,6 +128,24 @@ public void recursiveCopyPersistentOverwrite(String source, String destination)\n     }, e -> e.code() == Code.BADVERSION); // always retry if bad version\n   }\n \n+  public byte[] createPublicOrMutate(String zPath, byte[] createValue, Mutator mutator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxODk4OQ=="}, "originalCommit": {"oid": "5d5733a660f429549ac0ea1774311de02f6fc2c3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTA2NzM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooReaderWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDoyNDo1NlrOHre-Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjo0MDoxNVrOHriQTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1ODIxOA==", "bodyText": "Feel free to ignore this comment, its very subjective. It would be nice if both mutate methods had the same prefix, for the case when completing in IDE.  Also, if there was javadoc I would drop public from the method name and put that in javadoc.  With those two thoughts, I like the name mutateOrCreate.", "url": "https://github.com/apache/accumulo/pull/1758#discussion_r515358218", "createdAt": "2020-10-30T20:24:56Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooReaderWriter.java", "diffHunk": "@@ -138,6 +128,24 @@ public void recursiveCopyPersistentOverwrite(String source, String destination)\n     }, e -> e.code() == Code.BADVERSION); // always retry if bad version\n   }\n \n+  public byte[] createPublicOrMutate(String zPath, byte[] createValue, Mutator mutator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5733a660f429549ac0ea1774311de02f6fc2c3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwNjIwNQ==", "bodyText": "Alike minds... I had the same thoughts and shortened the name after adding the javadoc. I'm still a bit torn on mutateOrCreate or createOrMutate, though... I'm not sure I like the implication that we might try to mutate first, if I call it mutateOrCreate, but the argument from auto-complete is a compelling one, so I'll just go with that. \ud83d\ude3a", "url": "https://github.com/apache/accumulo/pull/1758#discussion_r515406205", "createdAt": "2020-10-30T22:16:52Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooReaderWriter.java", "diffHunk": "@@ -138,6 +128,24 @@ public void recursiveCopyPersistentOverwrite(String source, String destination)\n     }, e -> e.code() == Code.BADVERSION); // always retry if bad version\n   }\n \n+  public byte[] createPublicOrMutate(String zPath, byte[] createValue, Mutator mutator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1ODIxOA=="}, "originalCommit": {"oid": "5d5733a660f429549ac0ea1774311de02f6fc2c3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxMjA0Ng==", "bodyText": "I was thinking about the ordering too.  I think it does not matter, because the implication of the OR is that it will only do one of create or mutate.  How it only does one is an implementation detail.  So the fact that the implementation attempts create first is not important to the method name.", "url": "https://github.com/apache/accumulo/pull/1758#discussion_r515412046", "createdAt": "2020-10-30T22:40:15Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/fate/zookeeper/ZooReaderWriter.java", "diffHunk": "@@ -138,6 +128,24 @@ public void recursiveCopyPersistentOverwrite(String source, String destination)\n     }, e -> e.code() == Code.BADVERSION); // always retry if bad version\n   }\n \n+  public byte[] createPublicOrMutate(String zPath, byte[] createValue, Mutator mutator)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1ODIxOA=="}, "originalCommit": {"oid": "5d5733a660f429549ac0ea1774311de02f6fc2c3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTA5NTQ0OnYy", "diffSide": "RIGHT", "path": "server/manager/src/main/java/org/apache/accumulo/master/tableOps/namespace/rename/RenameNamespace.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDozNDozNFrOHrfOzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDozNDozNFrOHrfOzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM2MjUxMQ==", "bodyText": "Nice catch.  Yuck, this should have been using UTF8.  If the current persisted name is encoded w/ something else it likely would not matter w/ the restrictions on what characters could go into a namespace.", "url": "https://github.com/apache/accumulo/pull/1758#discussion_r515362511", "createdAt": "2020-10-30T20:34:34Z", "author": {"login": "keith-turner"}, "path": "server/manager/src/main/java/org/apache/accumulo/master/tableOps/namespace/rename/RenameNamespace.java", "diffHunk": "@@ -62,15 +64,15 @@ public RenameNamespace(NamespaceId namespaceId, String oldName, String newName)\n       final String tap = master.getZooKeeperRoot() + Constants.ZNAMESPACES + \"/\" + namespaceId\n           + Constants.ZNAMESPACE_NAME;\n \n-      zoo.mutate(tap, null, null, current -> {\n-        final String currentName = new String(current);\n+      zoo.mutateExisting(tap, current -> {\n+        final String currentName = new String(current, UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5733a660f429549ac0ea1774311de02f6fc2c3"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4080, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}