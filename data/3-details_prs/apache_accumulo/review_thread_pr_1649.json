{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNzQ0Nzc1", "number": 1649, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzozMzozN1rOEPIcsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1Mzo0MFrOEVkskg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzAyNTEyOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/org/apache/accumulo/shell/commands/CompactCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzozMzozN1rOGyrJwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMzowOTozOVrOGzlRKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc4ODk5Mw==", "bodyText": "If the new options can't be set along with a strategy, shouldn't these two if statements be in an else?", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r455788993", "createdAt": "2020-07-16T13:33:37Z", "author": {"login": "milleruntime"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/CompactCommand.java", "diffHunk": "@@ -147,30 +170,28 @@ public int execute(final String fullCommand, final CommandLine cl, final Shell s\n       compactionConfig.setIterators(new ArrayList<>(iterators));\n     }\n \n-    Map<String,String> selectorOpts = new HashMap<>();\n-    Map<String,String> configurerOpts = new HashMap<>();\n-    getConfigurableCompactionStrategyOpts(cl, selectorOpts, configurerOpts);\n+    setupConfigurableCompaction(cl, compactionConfig);\n \n     if (cl.hasOption(strategyOpt.getOpt())) {\n-      if (!selectorOpts.isEmpty() || !configurerOpts.isEmpty())\n+      if (cl.hasOption(selectorOpt.getLongOpt()) || cl.hasOption(configurerOpt.getLongOpt())) {\n         throw new IllegalArgumentException(\n-            \"Can not specify compaction strategy with file selection and file output options.\");\n-\n+            \"Can not specify a strategy with a selector or configurer\");\n+      }\n       configureCompactionStrat(cl);\n     }\n \n-    if (!selectorOpts.isEmpty()) {\n-      PluginConfig selectorCfg = new PluginConfig(\n-          \"org.apache.accumulo.tserver.compaction.strategies.ConfigurableCompactionStrategy\",\n-          selectorOpts);\n-      compactionConfig.setSelector(selectorCfg);\n+    if (cl.hasOption(selectorOpt.getLongOpt())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efc751824bc035c66215ccc737078cd0135b12ee"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc0MTE2Mw==", "bodyText": "Fixed in abc961a", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r456741163", "createdAt": "2020-07-18T03:09:39Z", "author": {"login": "keith-turner"}, "path": "shell/src/main/java/org/apache/accumulo/shell/commands/CompactCommand.java", "diffHunk": "@@ -147,30 +170,28 @@ public int execute(final String fullCommand, final CommandLine cl, final Shell s\n       compactionConfig.setIterators(new ArrayList<>(iterators));\n     }\n \n-    Map<String,String> selectorOpts = new HashMap<>();\n-    Map<String,String> configurerOpts = new HashMap<>();\n-    getConfigurableCompactionStrategyOpts(cl, selectorOpts, configurerOpts);\n+    setupConfigurableCompaction(cl, compactionConfig);\n \n     if (cl.hasOption(strategyOpt.getOpt())) {\n-      if (!selectorOpts.isEmpty() || !configurerOpts.isEmpty())\n+      if (cl.hasOption(selectorOpt.getLongOpt()) || cl.hasOption(configurerOpt.getLongOpt())) {\n         throw new IllegalArgumentException(\n-            \"Can not specify compaction strategy with file selection and file output options.\");\n-\n+            \"Can not specify a strategy with a selector or configurer\");\n+      }\n       configureCompactionStrat(cl);\n     }\n \n-    if (!selectorOpts.isEmpty()) {\n-      PluginConfig selectorCfg = new PluginConfig(\n-          \"org.apache.accumulo.tserver.compaction.strategies.ConfigurableCompactionStrategy\",\n-          selectorOpts);\n-      compactionConfig.setSelector(selectorCfg);\n+    if (cl.hasOption(selectorOpt.getLongOpt())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc4ODk5Mw=="}, "originalCommit": {"oid": "efc751824bc035c66215ccc737078cd0135b12ee"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzE2MTQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDowMzoyNVrOGyse1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMzowOToxNFrOGzlRCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxMDc3Mg==", "bodyText": "I think a property that is easier to spell is more user friendly.  The last part of the property could be \"limit\" or \"rate.limit\".  As a bad speller, I know a word like \"throughput\" would trip me up.", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r455810772", "createdAt": "2020-07-16T14:03:25Z", "author": {"login": "milleruntime"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -415,6 +415,10 @@\n   TSERV_COMPACTION_SERVICE_ROOT_PLANNER(\"tserver.compaction.major.service.root.planner\",\n       DefaultCompactionPlanner.class.getName(), PropertyType.CLASSNAME,\n       \"Compaction planner for root tablet service\"),\n+  TSERV_COMPACTION_SERVICE_ROOT_THROUGHPUT(\"tserver.compaction.major.service.root.throughput\", \"0B\",\n+      PropertyType.BYTES,\n+      \"Maximum number of bytes to read or write per second over all major\"\n+          + \" compactions in this compaction service, or 0B for unlimited.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ead55c83f111bbdf9262a01c0bd2b7a47a53845"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc0MTEzMQ==", "bodyText": "I like rate.limit better.  Changed to rate.limit in abc961a", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r456741131", "createdAt": "2020-07-18T03:09:14Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -415,6 +415,10 @@\n   TSERV_COMPACTION_SERVICE_ROOT_PLANNER(\"tserver.compaction.major.service.root.planner\",\n       DefaultCompactionPlanner.class.getName(), PropertyType.CLASSNAME,\n       \"Compaction planner for root tablet service\"),\n+  TSERV_COMPACTION_SERVICE_ROOT_THROUGHPUT(\"tserver.compaction.major.service.root.throughput\", \"0B\",\n+      PropertyType.BYTES,\n+      \"Maximum number of bytes to read or write per second over all major\"\n+          + \" compactions in this compaction service, or 0B for unlimited.\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxMDc3Mg=="}, "originalCommit": {"oid": "7ead55c83f111bbdf9262a01c0bd2b7a47a53845"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzE4MDA0OnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/apache/accumulo/test/CompactionRateLimitingIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDowNzoyMVrOGysqIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMzowODozN1rOGzlQ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxMzY2NQ==", "bodyText": "Comment got awkward by the formatter.", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r455813665", "createdAt": "2020-07-16T14:07:21Z", "author": {"login": "milleruntime"}, "path": "test/src/main/java/org/apache/accumulo/test/CompactionRateLimitingIT.java", "diffHunk": "@@ -37,50 +40,74 @@\n   public static final long BYTES_TO_WRITE = 10 * 1024 * 1024;\n   public static final long RATE = 1 * 1024 * 1024;\n \n+  protected Property getThroughputProp() {\n+    return Property.TSERV_COMPACTION_SERVICE_DEFAULT_THROUGHPUT;\n+  }\n+\n   @Override\n   public void configure(MiniAccumuloConfigImpl cfg, Configuration fsConf) {\n-    cfg.setProperty(Property.TSERV_MAJC_THROUGHPUT, RATE + \"B\");\n+    cfg.setProperty(getThroughputProp(), RATE + \"B\");\n     cfg.setProperty(Property.TABLE_MAJC_RATIO, \"20\");\n     cfg.setProperty(Property.TABLE_FILE_COMPRESSION_TYPE, \"none\");\n+\n+    cfg.setProperty(\"tserver.compaction.major.service.test.throughput\", RATE + \"B\");\n+    cfg.setProperty(\"tserver.compaction.major.service.test.planner\",\n+        DefaultCompactionPlanner.class.getName());\n+    cfg.setProperty(\"tserver.compaction.major.service.test.planner.opts.executors\",\n+        \"[{'name':'all','numThreads':2}]\".replaceAll(\"'\", \"\\\"\"));\n+\n   }\n \n   @Test\n   public void majorCompactionsAreRateLimited() throws Exception {\n     long bytesWritten = 0;\n-    String tableName = getUniqueNames(1)[0];\n-    AccumuloClient client =\n-        getCluster().createAccumuloClient(\"root\", new PasswordToken(ROOT_PASSWORD));\n-    client.tableOperations().create(tableName);\n-    try (BatchWriter bw = client.createBatchWriter(tableName)) {\n-      Random r = new SecureRandom();\n-      while (bytesWritten < BYTES_TO_WRITE) {\n-        byte[] rowKey = new byte[32];\n-        r.nextBytes(rowKey);\n-\n-        byte[] qual = new byte[32];\n-        r.nextBytes(qual);\n-\n-        byte[] value = new byte[1024];\n-        r.nextBytes(value);\n-\n-        Mutation m = new Mutation(rowKey);\n-        m.put(new byte[0], qual, value);\n-        bw.addMutation(m);\n-\n-        bytesWritten += rowKey.length + qual.length + value.length;\n+    String[] tableNames = getUniqueNames(1);\n+\n+    try (AccumuloClient client =\n+        getCluster().createAccumuloClient(\"root\", new PasswordToken(ROOT_PASSWORD))) {\n+\n+      for (int i = 0; i < tableNames.length; i++) {\n+        String tableName = tableNames[i];\n+\n+        NewTableConfiguration ntc = new NewTableConfiguration();\n+        if (i == 1) {\n+          ntc.setProperties(Map.of(\"table.compaction.dispatcher.opts.service\", \"test\"));\n+        }\n+\n+        client.tableOperations().create(tableName, ntc);\n+        try (BatchWriter bw = client.createBatchWriter(tableName)) {\n+          Random r = new SecureRandom();\n+          while (bytesWritten < BYTES_TO_WRITE) {\n+            byte[] rowKey = new byte[32];\n+            r.nextBytes(rowKey);\n+\n+            byte[] qual = new byte[32];\n+            r.nextBytes(qual);\n+\n+            byte[] value = new byte[1024];\n+            r.nextBytes(value);\n+\n+            Mutation m = new Mutation(rowKey);\n+            m.put(new byte[0], qual, value);\n+            bw.addMutation(m);\n+\n+            bytesWritten += rowKey.length + qual.length + value.length;\n+          }\n+        }\n+\n+        client.tableOperations().flush(tableName, null, null, true);\n+\n+        long compactionStart = System.currentTimeMillis();\n+        client.tableOperations().compact(tableName, null, null, false, true);\n+        long duration = System.currentTimeMillis() - compactionStart;\n+        // The rate will be \"bursty\", try to account for that by taking 80% of the expected rate\n+        // (allow\n+        // for 20% under the maximum expected duration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ead55c83f111bbdf9262a01c0bd2b7a47a53845"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc0MTA3NQ==", "bodyText": "fixed in abc961a", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r456741075", "createdAt": "2020-07-18T03:08:37Z", "author": {"login": "keith-turner"}, "path": "test/src/main/java/org/apache/accumulo/test/CompactionRateLimitingIT.java", "diffHunk": "@@ -37,50 +40,74 @@\n   public static final long BYTES_TO_WRITE = 10 * 1024 * 1024;\n   public static final long RATE = 1 * 1024 * 1024;\n \n+  protected Property getThroughputProp() {\n+    return Property.TSERV_COMPACTION_SERVICE_DEFAULT_THROUGHPUT;\n+  }\n+\n   @Override\n   public void configure(MiniAccumuloConfigImpl cfg, Configuration fsConf) {\n-    cfg.setProperty(Property.TSERV_MAJC_THROUGHPUT, RATE + \"B\");\n+    cfg.setProperty(getThroughputProp(), RATE + \"B\");\n     cfg.setProperty(Property.TABLE_MAJC_RATIO, \"20\");\n     cfg.setProperty(Property.TABLE_FILE_COMPRESSION_TYPE, \"none\");\n+\n+    cfg.setProperty(\"tserver.compaction.major.service.test.throughput\", RATE + \"B\");\n+    cfg.setProperty(\"tserver.compaction.major.service.test.planner\",\n+        DefaultCompactionPlanner.class.getName());\n+    cfg.setProperty(\"tserver.compaction.major.service.test.planner.opts.executors\",\n+        \"[{'name':'all','numThreads':2}]\".replaceAll(\"'\", \"\\\"\"));\n+\n   }\n \n   @Test\n   public void majorCompactionsAreRateLimited() throws Exception {\n     long bytesWritten = 0;\n-    String tableName = getUniqueNames(1)[0];\n-    AccumuloClient client =\n-        getCluster().createAccumuloClient(\"root\", new PasswordToken(ROOT_PASSWORD));\n-    client.tableOperations().create(tableName);\n-    try (BatchWriter bw = client.createBatchWriter(tableName)) {\n-      Random r = new SecureRandom();\n-      while (bytesWritten < BYTES_TO_WRITE) {\n-        byte[] rowKey = new byte[32];\n-        r.nextBytes(rowKey);\n-\n-        byte[] qual = new byte[32];\n-        r.nextBytes(qual);\n-\n-        byte[] value = new byte[1024];\n-        r.nextBytes(value);\n-\n-        Mutation m = new Mutation(rowKey);\n-        m.put(new byte[0], qual, value);\n-        bw.addMutation(m);\n-\n-        bytesWritten += rowKey.length + qual.length + value.length;\n+    String[] tableNames = getUniqueNames(1);\n+\n+    try (AccumuloClient client =\n+        getCluster().createAccumuloClient(\"root\", new PasswordToken(ROOT_PASSWORD))) {\n+\n+      for (int i = 0; i < tableNames.length; i++) {\n+        String tableName = tableNames[i];\n+\n+        NewTableConfiguration ntc = new NewTableConfiguration();\n+        if (i == 1) {\n+          ntc.setProperties(Map.of(\"table.compaction.dispatcher.opts.service\", \"test\"));\n+        }\n+\n+        client.tableOperations().create(tableName, ntc);\n+        try (BatchWriter bw = client.createBatchWriter(tableName)) {\n+          Random r = new SecureRandom();\n+          while (bytesWritten < BYTES_TO_WRITE) {\n+            byte[] rowKey = new byte[32];\n+            r.nextBytes(rowKey);\n+\n+            byte[] qual = new byte[32];\n+            r.nextBytes(qual);\n+\n+            byte[] value = new byte[1024];\n+            r.nextBytes(value);\n+\n+            Mutation m = new Mutation(rowKey);\n+            m.put(new byte[0], qual, value);\n+            bw.addMutation(m);\n+\n+            bytesWritten += rowKey.length + qual.length + value.length;\n+          }\n+        }\n+\n+        client.tableOperations().flush(tableName, null, null, true);\n+\n+        long compactionStart = System.currentTimeMillis();\n+        client.tableOperations().compact(tableName, null, null, false, true);\n+        long duration = System.currentTimeMillis() - compactionStart;\n+        // The rate will be \"bursty\", try to account for that by taking 80% of the expected rate\n+        // (allow\n+        // for 20% under the maximum expected duration)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxMzY2NQ=="}, "originalCommit": {"oid": "7ead55c83f111bbdf9262a01c0bd2b7a47a53845"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Nzk0ODgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDozMjozN1rOG5JFOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNToyMzoyN1rOG6953g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MDgxMQ==", "bodyText": "I worry that we have added far too many new configuration properties for compactions, and that this might create a terrible user experience around compactions. I wonder if some of these could be consolidated into a pluggable configuration strategy object that is less complicated to configure.", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r462570811", "createdAt": "2020-07-29T20:32:37Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -415,6 +415,10 @@\n   TSERV_COMPACTION_SERVICE_ROOT_PLANNER(\"tserver.compaction.major.service.root.planner\",\n       DefaultCompactionPlanner.class.getName(), PropertyType.CLASSNAME,\n       \"Compaction planner for root tablet service\"),\n+  TSERV_COMPACTION_SERVICE_ROOT_RATE_LIMIT(\"tserver.compaction.major.service.root.rate.limit\", \"0B\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MTg4Nw==", "bodyText": "Also, what does \"root\" refer to here for this property? The description should leave that obvious, rather than require users to refer to the descriptions of other properties that have similar naming schemes in order to guess at what it might mean for this property.", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r462571887", "createdAt": "2020-07-29T20:34:40Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -415,6 +415,10 @@\n   TSERV_COMPACTION_SERVICE_ROOT_PLANNER(\"tserver.compaction.major.service.root.planner\",\n       DefaultCompactionPlanner.class.getName(), PropertyType.CLASSNAME,\n       \"Compaction planner for root tablet service\"),\n+  TSERV_COMPACTION_SERVICE_ROOT_RATE_LIMIT(\"tserver.compaction.major.service.root.rate.limit\", \"0B\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MDgxMQ=="}, "originalCommit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3MDg1NA==", "bodyText": "I worry that we have added far too many new configuration properties for compactions, and that this might create a terrible user experience around compactions.\n\nCould open a new issue and discuss a course of action.\n\nAlso, what does \"root\" refer to here for this property?\n\nThis is a compaction service for the root table.", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r464470854", "createdAt": "2020-08-03T15:01:16Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -415,6 +415,10 @@\n   TSERV_COMPACTION_SERVICE_ROOT_PLANNER(\"tserver.compaction.major.service.root.planner\",\n       DefaultCompactionPlanner.class.getName(), PropertyType.CLASSNAME,\n       \"Compaction planner for root tablet service\"),\n+  TSERV_COMPACTION_SERVICE_ROOT_RATE_LIMIT(\"tserver.compaction.major.service.root.rate.limit\", \"0B\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MDgxMQ=="}, "originalCommit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ4MDk2MQ==", "bodyText": "The previous property that shares the same prefix mentions the root table.", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r464480961", "createdAt": "2020-08-03T15:17:07Z", "author": {"login": "keith-turner"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -415,6 +415,10 @@\n   TSERV_COMPACTION_SERVICE_ROOT_PLANNER(\"tserver.compaction.major.service.root.planner\",\n       DefaultCompactionPlanner.class.getName(), PropertyType.CLASSNAME,\n       \"Compaction planner for root tablet service\"),\n+  TSERV_COMPACTION_SERVICE_ROOT_RATE_LIMIT(\"tserver.compaction.major.service.root.rate.limit\", \"0B\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MDgxMQ=="}, "originalCommit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ4NDgzMA==", "bodyText": "I worry that we have added far too many new configuration properties for compactions, and that this might create a terrible user experience around compactions.\n\nCould open a new issue and discuss a course of action.\n\nFor the larger issue, yes. But I'm struggling to keep up with the pace of all these changes, and am raising the point here, to step back and ask the more narrow question of whether these specific properties are needed. If they are, that's fine... we can move on. But, I don't know if I have the mental capacity to circle back and form a coherent discussion around the larger issue that a separate ticket would serve. The time to do that was probably several weeks ago before the wave of new properties got introduced, and that ship may have sailed.\n\n\nAlso, what does \"root\" refer to here for this property?\n\nThis is a compaction service for the root table.\n\nOkay, cool. Thanks. However, I suppose the point of my feedback wasn't to get a response here, but to get a response in the form of an improved description field in the code.", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r464484830", "createdAt": "2020-08-03T15:23:27Z", "author": {"login": "ctubbsii"}, "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -415,6 +415,10 @@\n   TSERV_COMPACTION_SERVICE_ROOT_PLANNER(\"tserver.compaction.major.service.root.planner\",\n       DefaultCompactionPlanner.class.getName(), PropertyType.CLASSNAME,\n       \"Compaction planner for root tablet service\"),\n+  TSERV_COMPACTION_SERVICE_ROOT_RATE_LIMIT(\"tserver.compaction.major.service.root.rate.limit\", \"0B\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MDgxMQ=="}, "originalCommit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Nzk2NzIzOnYy", "diffSide": "RIGHT", "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionExecutor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDozODoyMVrOG5JQ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNToyNDoxNlrOG6970Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MzgwMg==", "bodyText": "This sentence could be cleaned up to make it more understandable. What does \"it\" refer to? And does it mean it could \"contain a canceled task\", or that it could \"have canceled a task\"?", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r462573802", "createdAt": "2020-07-29T20:38:21Z", "author": {"login": "ctubbsii"}, "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionExecutor.java", "diffHunk": "@@ -94,8 +112,11 @@ public boolean cancel(Status expectedStatus) {\n         canceled = status.compareAndSet(expectedStatus, Status.CANCELED);\n       }\n \n+      if (canceled)\n+        queuedTask.remove(this);\n+\n       if (canceled && cancelCount.incrementAndGet() % 1024 == 0) {\n-        // nMeed to occasionally clean the queue, it could have canceled task with low priority that\n+        // need to occasionally clean the queue, it could have canceled task with low priority that\n         // hang around. Avoid cleaning it every time something is canceled as that could be\n         // expensive.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3MjA0NQ==", "bodyText": "it refers to the queue.. I can clean this up", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r464472045", "createdAt": "2020-08-03T15:02:55Z", "author": {"login": "keith-turner"}, "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionExecutor.java", "diffHunk": "@@ -94,8 +112,11 @@ public boolean cancel(Status expectedStatus) {\n         canceled = status.compareAndSet(expectedStatus, Status.CANCELED);\n       }\n \n+      if (canceled)\n+        queuedTask.remove(this);\n+\n       if (canceled && cancelCount.incrementAndGet() % 1024 == 0) {\n-        // nMeed to occasionally clean the queue, it could have canceled task with low priority that\n+        // need to occasionally clean the queue, it could have canceled task with low priority that\n         // hang around. Avoid cleaning it every time something is canceled as that could be\n         // expensive.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MzgwMg=="}, "originalCommit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ4MDE1Mw==", "bodyText": "Changed comment in 79611ee", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r464480153", "createdAt": "2020-08-03T15:15:44Z", "author": {"login": "keith-turner"}, "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionExecutor.java", "diffHunk": "@@ -94,8 +112,11 @@ public boolean cancel(Status expectedStatus) {\n         canceled = status.compareAndSet(expectedStatus, Status.CANCELED);\n       }\n \n+      if (canceled)\n+        queuedTask.remove(this);\n+\n       if (canceled && cancelCount.incrementAndGet() % 1024 == 0) {\n-        // nMeed to occasionally clean the queue, it could have canceled task with low priority that\n+        // need to occasionally clean the queue, it could have canceled task with low priority that\n         // hang around. Avoid cleaning it every time something is canceled as that could be\n         // expensive.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MzgwMg=="}, "originalCommit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ4NTMyOQ==", "bodyText": "Awesome, thanks! A minor cleanup would be great!", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r464485329", "createdAt": "2020-08-03T15:24:16Z", "author": {"login": "ctubbsii"}, "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/compactions/CompactionExecutor.java", "diffHunk": "@@ -94,8 +112,11 @@ public boolean cancel(Status expectedStatus) {\n         canceled = status.compareAndSet(expectedStatus, Status.CANCELED);\n       }\n \n+      if (canceled)\n+        queuedTask.remove(this);\n+\n       if (canceled && cancelCount.incrementAndGet() % 1024 == 0) {\n-        // nMeed to occasionally clean the queue, it could have canceled task with low priority that\n+        // need to occasionally clean the queue, it could have canceled task with low priority that\n         // hang around. Avoid cleaning it every time something is canceled as that could be\n         // expensive.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MzgwMg=="}, "originalCommit": {"oid": "abc961a9c742dad47b54ee5d5b1932d26e6a991a"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDU2Nzg2OnYy", "diffSide": "RIGHT", "path": "test/src/main/java/org/apache/accumulo/test/CompactionRateLimitingIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1Mzo0MFrOG8aOSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1Mzo0MFrOG8aOSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NzM4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        (int) 0.8d * RATE, 1000.0 * bytesWritten / duration),\n          \n          \n            \n                        (int) (0.8d * RATE), 1000.0 * bytesWritten / duration),", "url": "https://github.com/apache/accumulo/pull/1649#discussion_r465997384", "createdAt": "2020-08-05T20:53:40Z", "author": {"login": "EdColeman"}, "path": "test/src/main/java/org/apache/accumulo/test/CompactionRateLimitingIT.java", "diffHunk": "@@ -37,50 +40,73 @@\n   public static final long BYTES_TO_WRITE = 10 * 1024 * 1024;\n   public static final long RATE = 1 * 1024 * 1024;\n \n+  protected Property getThroughputProp() {\n+    return Property.TSERV_COMPACTION_SERVICE_DEFAULT_RATE_LIMIT;\n+  }\n+\n   @Override\n   public void configure(MiniAccumuloConfigImpl cfg, Configuration fsConf) {\n-    cfg.setProperty(Property.TSERV_MAJC_THROUGHPUT, RATE + \"B\");\n+    cfg.setProperty(getThroughputProp(), RATE + \"B\");\n     cfg.setProperty(Property.TABLE_MAJC_RATIO, \"20\");\n     cfg.setProperty(Property.TABLE_FILE_COMPRESSION_TYPE, \"none\");\n+\n+    cfg.setProperty(\"tserver.compaction.major.service.test.rate.limit\", RATE + \"B\");\n+    cfg.setProperty(\"tserver.compaction.major.service.test.planner\",\n+        DefaultCompactionPlanner.class.getName());\n+    cfg.setProperty(\"tserver.compaction.major.service.test.planner.opts.executors\",\n+        \"[{'name':'all','numThreads':2}]\".replaceAll(\"'\", \"\\\"\"));\n+\n   }\n \n   @Test\n   public void majorCompactionsAreRateLimited() throws Exception {\n     long bytesWritten = 0;\n-    String tableName = getUniqueNames(1)[0];\n-    AccumuloClient client =\n-        getCluster().createAccumuloClient(\"root\", new PasswordToken(ROOT_PASSWORD));\n-    client.tableOperations().create(tableName);\n-    try (BatchWriter bw = client.createBatchWriter(tableName)) {\n-      Random r = new SecureRandom();\n-      while (bytesWritten < BYTES_TO_WRITE) {\n-        byte[] rowKey = new byte[32];\n-        r.nextBytes(rowKey);\n-\n-        byte[] qual = new byte[32];\n-        r.nextBytes(qual);\n-\n-        byte[] value = new byte[1024];\n-        r.nextBytes(value);\n-\n-        Mutation m = new Mutation(rowKey);\n-        m.put(new byte[0], qual, value);\n-        bw.addMutation(m);\n-\n-        bytesWritten += rowKey.length + qual.length + value.length;\n+    String[] tableNames = getUniqueNames(1);\n+\n+    try (AccumuloClient client =\n+        getCluster().createAccumuloClient(\"root\", new PasswordToken(ROOT_PASSWORD))) {\n+\n+      for (int i = 0; i < tableNames.length; i++) {\n+        String tableName = tableNames[i];\n+\n+        NewTableConfiguration ntc = new NewTableConfiguration();\n+        if (i == 1) {\n+          ntc.setProperties(Map.of(\"table.compaction.dispatcher.opts.service\", \"test\"));\n+        }\n+\n+        client.tableOperations().create(tableName, ntc);\n+        try (BatchWriter bw = client.createBatchWriter(tableName)) {\n+          Random r = new SecureRandom();\n+          while (bytesWritten < BYTES_TO_WRITE) {\n+            byte[] rowKey = new byte[32];\n+            r.nextBytes(rowKey);\n+\n+            byte[] qual = new byte[32];\n+            r.nextBytes(qual);\n+\n+            byte[] value = new byte[1024];\n+            r.nextBytes(value);\n+\n+            Mutation m = new Mutation(rowKey);\n+            m.put(new byte[0], qual, value);\n+            bw.addMutation(m);\n+\n+            bytesWritten += rowKey.length + qual.length + value.length;\n+          }\n+        }\n+\n+        client.tableOperations().flush(tableName, null, null, true);\n+\n+        long compactionStart = System.currentTimeMillis();\n+        client.tableOperations().compact(tableName, null, null, false, true);\n+        long duration = System.currentTimeMillis() - compactionStart;\n+        // The rate will be \"bursty\", try to account for that by taking 80% of the expected rate\n+        // (allow for 20% under the maximum expected duration)\n+        assertTrue(String.format(\n+            \"Expected a compaction rate of no more than %,d bytes/sec, but saw a rate of %,f bytes/sec\",\n+            (int) 0.8d * RATE, 1000.0 * bytesWritten / duration),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79611eef97c07e3605c221812792644008e0c86a"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4287, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}