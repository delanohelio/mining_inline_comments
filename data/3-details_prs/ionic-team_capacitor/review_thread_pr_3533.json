{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMjc1MDg5", "number": 3533, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxMTozMFrOEk7JSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjoyNjoyN1rOElofDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTUzMjI2OnYy", "diffSide": "RIGHT", "path": "cli/src/config.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxMTozMFrOHUIn9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxMTozMFrOHUIn9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NDg2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                cordovaSwiftVersion: '5.0',\n          \n          \n            \n                cordovaSwiftVersion: '5.1',\n          \n      \n    \n    \n  \n\nWe updated the Capacitor version to 5.1, so this one should be probably updated too", "url": "https://github.com/ionic-team/capacitor/pull/3533#discussion_r490874868", "createdAt": "2020-09-18T11:11:30Z", "author": {"login": "jcesarmobile"}, "path": "cli/src/config.ts", "diffHunk": "@@ -1,354 +1,156 @@\n-/* eslint-disable */\n-import { accessSync, readFileSync } from 'fs';\n-import { basename, join, resolve } from 'path';\n-import prompts from 'prompts';\n-\n-import c from './colors';\n-import { logFatal, readJSON } from './common';\n-import { CliConfig, ExternalConfig, OS, PackageJson } from './definitions';\n+import { readJSON } from 'fs-extra';\n+import { dirname, join, resolve } from 'path';\n+\n+import type {\n+  Config,\n+  ExternalConfig,\n+  CLIConfig,\n+  AndroidConfig,\n+  IOSConfig,\n+  PackageJson,\n+} from './definitions';\n+import { OS } from './definitions';\n+\n+export const EXTERNAL_CONFIG_FILE = 'capacitor.config.json';\n+\n+export async function loadConfig(): Promise<Config> {\n+  const appRootDir = process.cwd();\n+  const cliRootDir = dirname(__dirname);\n+  const extConfig = await loadExternalConfig(\n+    resolve(appRootDir, EXTERNAL_CONFIG_FILE),\n+  );\n+\n+  const appId = extConfig.appId ?? '';\n+  const appName = extConfig.appName ?? '';\n+  const webDir = extConfig.webDir ?? 'www';\n+  const cli = await loadCLIConfig(cliRootDir);\n+\n+  return {\n+    windows: {\n+      androidStudioPath:\n+        'C:\\\\Program Files\\\\Android\\\\Android Studio\\\\bin\\\\studio64.exe',\n+    },\n+    linux: {\n+      androidStudioPath: '/usr/local/android-studio/bin/studio.sh',\n+    },\n+    android: await loadAndroidConfig(appRootDir, cli.assetsDir),\n+    ios: await loadIOSConfig(appRootDir, cli.assetsDir),\n+    web: {\n+      name: 'web',\n+    },\n+    cli,\n+    app: {\n+      rootDir: appRootDir,\n+      appId,\n+      appName,\n+      webDir,\n+      webDirAbs: resolve(appRootDir, webDir),\n+      package: (await readPackageJSON(resolve(appRootDir, 'package.json'))) ?? {\n+        name: appName,\n+        version: '1.0.0',\n+      },\n+      extConfigName: EXTERNAL_CONFIG_FILE,\n+      extConfigFilePath: resolve(appRootDir, EXTERNAL_CONFIG_FILE),\n+      extConfig,\n+      bundledWebRuntime: extConfig.bundledWebRuntime ?? false,\n+    },\n+  };\n+}\n \n-let Package: PackageJson;\n-let ExtConfig: ExternalConfig;\n+async function loadCLIConfig(rootDir: string): Promise<CLIConfig> {\n+  const assetsName = 'assets';\n \n-export class Config implements CliConfig {\n-  windows = {\n-    androidStudioPath:\n-      'C:\\\\Program Files\\\\Android\\\\Android Studio\\\\bin\\\\studio64.exe',\n+  return {\n+    rootDir,\n+    assetsName,\n+    assetsDir: join(rootDir, assetsName),\n+    package: await readJSON(resolve(rootDir, 'package.json')),\n+    os: determineOS(process.platform),\n   };\n+}\n \n-  linux = {\n-    androidStudioPath: '/usr/local/android-studio/bin/studio.sh',\n-  };\n+async function loadAndroidConfig(\n+  rootDir: string,\n+  assetDir: string,\n+): Promise<AndroidConfig> {\n+  const name = 'android';\n+  const platformDir = resolve(rootDir, name);\n+  const webDir = 'app/src/main/assets/public';\n+  const resDir = 'app/src/main/res';\n+\n+  const templateName = 'android-template';\n+  const pluginsFolderName = 'capacitor-cordova-android-plugins';\n \n-  android = {\n-    name: 'android',\n+  return {\n+    name,\n     minVersion: '21',\n-    platformDir: '',\n-    webDir: 'app/src/main/assets/public',\n-    webDirAbs: '',\n-    resDir: 'app/src/main/res',\n-    resDirAbs: '',\n+    platformDir,\n+    webDir,\n+    webDirAbs: resolve(platformDir, webDir),\n+    resDir,\n+    resDirAbs: resolve(platformDir, resDir),\n     assets: {\n-      templateName: 'android-template',\n-      pluginsFolderName: 'capacitor-cordova-android-plugins',\n-      templateDir: '',\n-      pluginsDir: '',\n+      templateName,\n+      pluginsFolderName,\n+      templateDir: resolve(assetDir, templateName),\n+      pluginsDir: resolve(assetDir, pluginsFolderName),\n     },\n   };\n+}\n \n-  ios = {\n-    name: 'ios',\n+async function loadIOSConfig(\n+  rootDir: string,\n+  assetDir: string,\n+): Promise<IOSConfig> {\n+  const name = 'ios';\n+  const platformDir = resolve(rootDir, name);\n+  const webDir = 'public';\n+  const nativeProjectName = 'App';\n+  const templateName = 'ios-template';\n+  const pluginsFolderName = 'capacitor-cordova-ios-plugins';\n+\n+  return {\n+    name,\n     minVersion: '11.0',\n     cordovaSwiftVersion: '5.0',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ce02cae9808249907030745c9aefc740db34ec"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODk2MDc5OnYy", "diffSide": "RIGHT", "path": "cli/src/common.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjoyNjoyN1rOHVNc7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoyOToyMFrOHVdX0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMjU0Mw==", "bodyText": "It's still showing the plugins first because on first execution oldConfig is empty and just adds the plugin entry to it\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  ...oldConfig,\n          \n          \n            \n                  ...extConfig,\n          \n          \n            \n                  ...extConfig,\n          \n          \n            \n                  ...oldConfig,", "url": "https://github.com/ionic-team/capacitor/pull/3533#discussion_r492002543", "createdAt": "2020-09-21T12:26:27Z", "author": {"login": "jcesarmobile"}, "path": "cli/src/common.ts", "diffHunk": "@@ -222,47 +206,28 @@ export function buildXmlElement(configElement: any, rootName: string): string {\n   return builder.buildObject(configElement);\n }\n \n-/**\n- * Check for or create our main configuration file.\n- * @param config\n- */\n-export async function getOrCreateConfig(\n+export async function mergeConfig(\n   config: Config,\n-): Promise<string | undefined> {\n-  const configPath = join(config.app.rootDir, config.app.extConfigName);\n-  if (await existsAsync(configPath)) {\n-    return configPath;\n-  }\n+  extConfig: ExternalConfig,\n+): Promise<void> {\n+  const oldConfig = { ...config.app.extConfig };\n \n-  await writePrettyJSON(config.app.extConfigFilePath, {\n-    appId: config.app.appId,\n-    appName: config.app.appName,\n-    bundledWebRuntime: config.app.bundledWebRuntime,\n-    webDir: basename(resolve(config.app.rootDir, config.app.webDir)),\n-    plugins: {\n+  if (!oldConfig.plugins) {\n+    oldConfig.plugins = {\n       SplashScreen: {\n         launchShowDuration: 0,\n       },\n-    },\n-  });\n-\n-  // Store our newly created or found external config as the default\n-  config.loadExternalConfig();\n-}\n-\n-export async function mergeConfig(\n-  config: Config,\n-  settings: any,\n-): Promise<void> {\n-  const configPath = join(config.app.rootDir, config.app.extConfigName);\n-\n-  await writePrettyJSON(config.app.extConfigFilePath, {\n-    ...config.app.extConfig,\n-    ...settings,\n-  });\n+    };\n+  }\n \n-  // Store our newly created or found external config as the default\n-  config.loadExternalConfig();\n+  await writeJSON(\n+    config.app.extConfigFilePath,\n+    {\n+      ...oldConfig,\n+      ...extConfig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf2ac8f3e6b48cb6682e4770860a45e4478c089"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2MzM3OA==", "bodyText": "Unfortunately we want extConfig to overwrite keys on oldConfig, so this suggestion won't work", "url": "https://github.com/ionic-team/capacitor/pull/3533#discussion_r492263378", "createdAt": "2020-09-21T18:29:20Z", "author": {"login": "imhoffd"}, "path": "cli/src/common.ts", "diffHunk": "@@ -222,47 +206,28 @@ export function buildXmlElement(configElement: any, rootName: string): string {\n   return builder.buildObject(configElement);\n }\n \n-/**\n- * Check for or create our main configuration file.\n- * @param config\n- */\n-export async function getOrCreateConfig(\n+export async function mergeConfig(\n   config: Config,\n-): Promise<string | undefined> {\n-  const configPath = join(config.app.rootDir, config.app.extConfigName);\n-  if (await existsAsync(configPath)) {\n-    return configPath;\n-  }\n+  extConfig: ExternalConfig,\n+): Promise<void> {\n+  const oldConfig = { ...config.app.extConfig };\n \n-  await writePrettyJSON(config.app.extConfigFilePath, {\n-    appId: config.app.appId,\n-    appName: config.app.appName,\n-    bundledWebRuntime: config.app.bundledWebRuntime,\n-    webDir: basename(resolve(config.app.rootDir, config.app.webDir)),\n-    plugins: {\n+  if (!oldConfig.plugins) {\n+    oldConfig.plugins = {\n       SplashScreen: {\n         launchShowDuration: 0,\n       },\n-    },\n-  });\n-\n-  // Store our newly created or found external config as the default\n-  config.loadExternalConfig();\n-}\n-\n-export async function mergeConfig(\n-  config: Config,\n-  settings: any,\n-): Promise<void> {\n-  const configPath = join(config.app.rootDir, config.app.extConfigName);\n-\n-  await writePrettyJSON(config.app.extConfigFilePath, {\n-    ...config.app.extConfig,\n-    ...settings,\n-  });\n+    };\n+  }\n \n-  // Store our newly created or found external config as the default\n-  config.loadExternalConfig();\n+  await writeJSON(\n+    config.app.extConfigFilePath,\n+    {\n+      ...oldConfig,\n+      ...extConfig,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMjU0Mw=="}, "originalCommit": {"oid": "8cf2ac8f3e6b48cb6682e4770860a45e4478c089"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3512, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}