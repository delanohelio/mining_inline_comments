{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3Mzc5MjI0", "number": 3778, "title": "feat(Android): Refactoring configuration", "bodyText": "This branch seeks to improve the config use in Android similar to #3759.\n\nConfig can now be initialized from capacitor.config.json and programmatically via ConfigBuilder for embedded use case\nThe existing config getters like getInt and getString are deprecated.\n\nFor plugins, use getPluginInt and getPluginString.\nFor core config values, use the new direct accessor like getServerUrl and getBackgroundColor\n\n\nAdded tests for the Builder and JSON Reading use cases.", "createdAt": "2020-11-08T22:13:48Z", "url": "https://github.com/ionic-team/capacitor/pull/3778", "merged": true, "mergeCommit": {"oid": "9820a30688f0a774eced1676f1927cacde53301f"}, "closed": true, "closedAt": "2020-12-15T00:35:54Z", "author": {"login": "carlpoole"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdane-mAH2gAyNTE3Mzc5MjI0OjMyNWEyMjU0Y2Q1YTVkNzRjMTIzZGZlYzQ0NWYyMGY4ZWExZmUzNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmPSWzgFqTU1MjAxNjE0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "325a2254cd5a5d74c123dfec445f20f8ea1fe378", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/325a2254cd5a5d74c123dfec445f20f8ea1fe378", "committedDate": "2020-11-08T21:59:24Z", "message": "Deserialize config into object and use object throughout Capacitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2756f5728c6335dc5dc740ba68e21823dc79cb4", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/e2756f5728c6335dc5dc740ba68e21823dc79cb4", "committedDate": "2020-11-08T22:12:35Z", "message": "Use new Config object to initialize for embedded"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5a055dc9acf9e845b90588e3d12d2f496334c31", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/b5a055dc9acf9e845b90588e3d12d2f496334c31", "committedDate": "2020-11-08T23:02:38Z", "message": "Config is immutable and can be created programatically with a builder for embedded"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cc167b6fa8880ea08c51cd84c3c34a14fdea38a", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/9cc167b6fa8880ea08c51cd84c3c34a14fdea38a", "committedDate": "2020-11-08T23:04:33Z", "message": "Merge branch 'main' into android-config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f131dd00df75857638c338aa8616fec80fb68044", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/f131dd00df75857638c338aa8616fec80fb68044", "committedDate": "2020-11-25T15:21:25Z", "message": "Merge branch 'main' into android-config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c3548d0623ad1f6afff19522346fafb741054d1", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/2c3548d0623ad1f6afff19522346fafb741054d1", "committedDate": "2020-11-25T17:23:21Z", "message": "Plugin config separation, refactor, comments + more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40a7833bb125bc2cad1857d034acf49456729132", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/40a7833bb125bc2cad1857d034acf49456729132", "committedDate": "2020-11-25T19:59:55Z", "message": "deprecated direct config object accessors and added plugin versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76c5bb808860f3977d883e72e9495f2ef4ef2813", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/76c5bb808860f3977d883e72e9495f2ef4ef2813", "committedDate": "2020-11-25T22:28:35Z", "message": "Config building tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e9b04dc597e543d2bba71303d6476b776de40ea", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/7e9b04dc597e543d2bba71303d6476b776de40ea", "committedDate": "2020-11-25T22:29:58Z", "message": "Merge branch 'main' into android-config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f81cda9486ac2ec63582173447effbcbff005318", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/f81cda9486ac2ec63582173447effbcbff005318", "committedDate": "2020-11-30T15:59:17Z", "message": "Merge branch 'main' into android-config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc0f47a38d8e17bf3efb5d939536462fe409b733", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/fc0f47a38d8e17bf3efb5d939536462fe409b733", "committedDate": "2020-12-01T18:05:28Z", "message": "Updated tests and minor refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "504082856aff2ce8bde35381ca05a33afe09b4f4", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/504082856aff2ce8bde35381ca05a33afe09b4f4", "committedDate": "2020-12-01T18:06:54Z", "message": "Merge branch 'android-config' of github.com:ionic-team/capacitor into android-config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fca908b47f1e9edb5dd9a4aac01320d77431313d", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/fca908b47f1e9edb5dd9a4aac01320d77431313d", "committedDate": "2020-12-01T18:20:21Z", "message": "Merge branch 'main' into android-config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15d11f7a50edfb576e298202b3841da6bc6669a7", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/15d11f7a50edfb576e298202b3841da6bc6669a7", "committedDate": "2020-12-01T18:32:47Z", "message": "Changed config to use context and get the asset manager itself"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6a59f68d0667a02b55264fb59c4df95e3ee2cc4", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/c6a59f68d0667a02b55264fb59c4df95e3ee2cc4", "committedDate": "2020-12-01T18:39:41Z", "message": "Added null check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "982b12632a045a6cc196cb53e636c78b8766a2c4", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/982b12632a045a6cc196cb53e636c78b8766a2c4", "committedDate": "2020-12-01T18:44:18Z", "message": "Allow fragment users to set config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b1ea330079abf733846b5339413af535390b8c8", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/0b1ea330079abf733846b5339413af535390b8c8", "committedDate": "2020-12-01T22:44:56Z", "message": "Fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43f127e5c705e137d97f68c4adcfe2c7e9782c04", "author": {"user": {"login": "imhoffd", "name": "Dan Imhoff"}}, "url": "https://github.com/ionic-team/capacitor/commit/43f127e5c705e137d97f68c4adcfe2c7e9782c04", "committedDate": "2020-12-03T21:36:38Z", "message": "Merge branch 'main' into android-config\n\nConflicts:\n\tandroid/capacitor/src/main/java/com/getcapacitor/Bridge.java\n\tandroid/capacitor/src/main/java/com/getcapacitor/BridgeActivity.java\n\tandroid/capacitor/src/main/java/com/getcapacitor/WebViewLocalServer.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NDg3NjE3", "url": "https://github.com/ionic-team/capacitor/pull/3778#pullrequestreview-544487617", "createdAt": "2020-12-03T21:58:38Z", "commit": {"oid": "43f127e5c705e137d97f68c4adcfe2c7e9782c04"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo1ODozOFrOH-2yBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1NjowNlrOH-49VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY3MTMwMA==", "bodyText": "Why does webContentsDebuggingEnabled get special treatment? Can this constructor just be public CapConfig(Context context)?", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r535671300", "createdAt": "2020-12-03T21:58:38Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/CapConfig.java", "diffHunk": "@@ -9,21 +12,82 @@\n import org.json.JSONObject;\n \n /**\n- * Management interface for accessing values in capacitor.config.json\n+ * Represents the configuration options for Capacitor\n  */\n public class CapConfig {\n \n-    private JSONObject config = new JSONObject();\n+    // Server Config\n+    private boolean html5mode = true;\n+    private String serverUrl;\n+    private String hostname = \"localhost\";\n+    private String androidScheme = CAPACITOR_HTTP_SCHEME;\n+    private String[] allowNavigation;\n+\n+    // Android Config\n+    private String overriddenUserAgentString;\n+    private String appendedUserAgentString;\n+    private String backgroundColor;\n+    private boolean allowMixedContent = false;\n+    private boolean captureInput = false;\n+    private Boolean webContentsDebuggingEnabled;\n+    private boolean hideLogs = false;\n+\n+    // Plugins\n+    private JSONObject pluginConfigurations = new JSONObject();\n \n-    public CapConfig(AssetManager assetManager, JSONObject config) {\n-        if (config != null) {\n-            this.config = config;\n-        } else {\n-            // Load our capacitor.config.json\n-            this.loadConfig(assetManager);\n+    // Config Object JSON (legacy)\n+    private JSONObject configJSON = new JSONObject();\n+\n+    /**\n+     * Constructs a Capacitor Configuration from file.\n+     *\n+     * @param context The current context\n+     * @param defaultDebuggable Enable dev mode flag\n+     */\n+    public CapConfig(Context context, boolean defaultDebuggable) {\n+        if (context == null) {\n+            Logger.error(\"Capacitor Config could not be created. Context must not be null.\");\n+            return;\n         }\n+\n+        AssetManager assetManager = context.getAssets();\n+        webContentsDebuggingEnabled = defaultDebuggable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f127e5c705e137d97f68c4adcfe2c7e9782c04"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY5MjE0NQ==", "bodyText": "Should all this be happening in the constructor? Maybe we can take this opportunity to practice some separation of concerns. The iOS side now has a few different classes that separate \"loading from a JSON file\" and \"containing the configuration\".", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r535692145", "createdAt": "2020-12-03T22:32:41Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/CapConfig.java", "diffHunk": "@@ -9,21 +12,82 @@\n import org.json.JSONObject;\n \n /**\n- * Management interface for accessing values in capacitor.config.json\n+ * Represents the configuration options for Capacitor\n  */\n public class CapConfig {\n \n-    private JSONObject config = new JSONObject();\n+    // Server Config\n+    private boolean html5mode = true;\n+    private String serverUrl;\n+    private String hostname = \"localhost\";\n+    private String androidScheme = CAPACITOR_HTTP_SCHEME;\n+    private String[] allowNavigation;\n+\n+    // Android Config\n+    private String overriddenUserAgentString;\n+    private String appendedUserAgentString;\n+    private String backgroundColor;\n+    private boolean allowMixedContent = false;\n+    private boolean captureInput = false;\n+    private Boolean webContentsDebuggingEnabled;\n+    private boolean hideLogs = false;\n+\n+    // Plugins\n+    private JSONObject pluginConfigurations = new JSONObject();\n \n-    public CapConfig(AssetManager assetManager, JSONObject config) {\n-        if (config != null) {\n-            this.config = config;\n-        } else {\n-            // Load our capacitor.config.json\n-            this.loadConfig(assetManager);\n+    // Config Object JSON (legacy)\n+    private JSONObject configJSON = new JSONObject();\n+\n+    /**\n+     * Constructs a Capacitor Configuration from file.\n+     *\n+     * @param context The current context\n+     * @param defaultDebuggable Enable dev mode flag\n+     */\n+    public CapConfig(Context context, boolean defaultDebuggable) {\n+        if (context == null) {\n+            Logger.error(\"Capacitor Config could not be created. Context must not be null.\");\n+            return;\n         }\n+\n+        AssetManager assetManager = context.getAssets();\n+        webContentsDebuggingEnabled = defaultDebuggable;\n+\n+        // Load capacitor.config.json\n+        loadConfig(assetManager);\n+        deserializeConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f127e5c705e137d97f68c4adcfe2c7e9782c04"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY5Mjg4Mw==", "bodyText": "I think this should follow the getter pattern: getHTML5Mode() or isHTML5Mode()", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r535692883", "createdAt": "2020-12-03T22:34:13Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/CapConfig.java", "diffHunk": "@@ -52,81 +116,341 @@ private void loadConfig(AssetManager assetManager) {\n         }\n     }\n \n+    /**\n+     * Deserializes the config from JSON into a Capacitor Configuration object.\n+     */\n+    private void deserializeConfig() {\n+        // Server\n+        html5mode = getBoolean(configJSON, \"server.html5mode\", html5mode);\n+        serverUrl = getString(configJSON, \"server.url\", null);\n+        hostname = getString(configJSON, \"server.hostname\", hostname);\n+        androidScheme = getString(configJSON, \"server.androidScheme\", androidScheme);\n+        allowNavigation = getArray(configJSON, \"server.allowNavigation\", null);\n+\n+        // Android\n+        overriddenUserAgentString = getString(configJSON, \"android.overrideUserAgent\", getString(configJSON, \"overrideUserAgent\", null));\n+        appendedUserAgentString = getString(configJSON, \"android.appendUserAgent\", getString(configJSON, \"appendUserAgent\", null));\n+        backgroundColor = getString(configJSON, \"android.backgroundColor\", getString(configJSON, \"backgroundColor\", null));\n+        allowMixedContent =\n+            getBoolean(configJSON, \"android.allowMixedContent\", getBoolean(configJSON, \"allowMixedContent\", allowMixedContent));\n+        captureInput = getBoolean(configJSON, \"android.captureInput\", captureInput);\n+        webContentsDebuggingEnabled = getBoolean(configJSON, \"android.webContentsDebuggingEnabled\", webContentsDebuggingEnabled);\n+        hideLogs = getBoolean(configJSON, \"android.hideLogs\", getBoolean(configJSON, \"hideLogs\", hideLogs));\n+\n+        // Plugins\n+        pluginConfigurations = getObject(configJSON, \"plugins\");\n+    }\n+\n+    public boolean html5mode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f127e5c705e137d97f68c4adcfe2c7e9782c04"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY5MzU0NA==", "bodyText": "I think these should follow the setter pattern: setHTML5Mode(), setServerURL(), etc.", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r535693544", "createdAt": "2020-12-03T22:35:29Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/CapConfig.java", "diffHunk": "@@ -141,7 +465,163 @@ private String getConfigKey(String key) {\n             }\n \n             return value;\n-        } catch (Exception ex) {}\n+        } catch (Exception ignore) {\n+            // value was not found\n+        }\n         return defaultValue;\n     }\n+\n+    /**\n+     * Get a JSON object value from the given JSON object.\n+     *\n+     * @param jsonObject A JSON object to search\n+     * @param key A key to fetch from the JSON object\n+     * @return The value from the config, if exists. Null if not\n+     */\n+    private JSONObject getObject(JSONObject jsonObject, String key) {\n+        String k = getDeepestKey(key);\n+        try {\n+            JSONObject o = getDeepestObject(jsonObject, key);\n+\n+            return o.getJSONObject(k);\n+        } catch (Exception ignore) {\n+            // value was not found\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Given a JSON key path, gets the deepest key.\n+     *\n+     * @param key The key path\n+     * @return The deepest key\n+     */\n+    private String getDeepestKey(String key) {\n+        String[] parts = key.split(\"\\\\.\");\n+        if (parts.length > 0) {\n+            return parts[parts.length - 1];\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Given a JSON object and key path, gets the deepest object in the path.\n+     *\n+     * @param jsonObject A JSON object\n+     * @param key The key path to follow\n+     * @return The deepest object along the key path\n+     * @throws JSONException Thrown if any JSON errors\n+     */\n+    private JSONObject getDeepestObject(JSONObject jsonObject, String key) throws JSONException {\n+        String[] parts = key.split(\"\\\\.\");\n+        JSONObject o = jsonObject;\n+\n+        // Search until the second to last part of the key\n+        for (int i = 0; i < parts.length - 1; i++) {\n+            String k = parts[i];\n+            o = o.getJSONObject(k);\n+        }\n+\n+        return o;\n+    }\n+\n+    /**\n+     * Builds a Capacitor Configuration in code\n+     */\n+    public static class Builder {\n+\n+        // Server Config Values\n+        private boolean html5mode = true;\n+        private String serverUrl;\n+        private String hostname = \"localhost\";\n+        private String androidScheme = CAPACITOR_HTTP_SCHEME;\n+        private String[] allowNavigation;\n+\n+        // Android Config Values\n+        private String overriddenUserAgentString;\n+        private String appendedUserAgentString;\n+        private String backgroundColor;\n+        private boolean allowMixedContent = false;\n+        private boolean captureInput = false;\n+        private Boolean webContentsDebuggingEnabled;\n+        private boolean hideLogs = false;\n+\n+        // Plugins Config Object\n+        private JSONObject pluginConfigurations = new JSONObject();\n+\n+        /**\n+         * Builds a Capacitor Config from the builder.\n+         *\n+         * @return A new Capacitor Config\n+         */\n+        public CapConfig create() {\n+            return new CapConfig(this);\n+        }\n+\n+        public Builder pluginConfigurations(JSONObject pluginConfigurations) {\n+            this.pluginConfigurations = pluginConfigurations;\n+            return this;\n+        }\n+\n+        public Builder html5mode(boolean html5mode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f127e5c705e137d97f68c4adcfe2c7e9782c04"}, "originalPosition": 594}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMDg0Ng==", "bodyText": "I don't think we should add these methods here. Is the intended usage this.bridge.config.getPluginString() in the Plugin class? If so, it would be a nicer API if it was just this.config.getString() (or this.pluginConfig.getString()), etc. We could make a PluginConfig class to keep classes smaller and purposeful.", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r535700846", "createdAt": "2020-12-03T22:47:38Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/CapConfig.java", "diffHunk": "@@ -52,81 +116,341 @@ private void loadConfig(AssetManager assetManager) {\n         }\n     }\n \n+    /**\n+     * Deserializes the config from JSON into a Capacitor Configuration object.\n+     */\n+    private void deserializeConfig() {\n+        // Server\n+        html5mode = getBoolean(configJSON, \"server.html5mode\", html5mode);\n+        serverUrl = getString(configJSON, \"server.url\", null);\n+        hostname = getString(configJSON, \"server.hostname\", hostname);\n+        androidScheme = getString(configJSON, \"server.androidScheme\", androidScheme);\n+        allowNavigation = getArray(configJSON, \"server.allowNavigation\", null);\n+\n+        // Android\n+        overriddenUserAgentString = getString(configJSON, \"android.overrideUserAgent\", getString(configJSON, \"overrideUserAgent\", null));\n+        appendedUserAgentString = getString(configJSON, \"android.appendUserAgent\", getString(configJSON, \"appendUserAgent\", null));\n+        backgroundColor = getString(configJSON, \"android.backgroundColor\", getString(configJSON, \"backgroundColor\", null));\n+        allowMixedContent =\n+            getBoolean(configJSON, \"android.allowMixedContent\", getBoolean(configJSON, \"allowMixedContent\", allowMixedContent));\n+        captureInput = getBoolean(configJSON, \"android.captureInput\", captureInput);\n+        webContentsDebuggingEnabled = getBoolean(configJSON, \"android.webContentsDebuggingEnabled\", webContentsDebuggingEnabled);\n+        hideLogs = getBoolean(configJSON, \"android.hideLogs\", getBoolean(configJSON, \"hideLogs\", hideLogs));\n+\n+        // Plugins\n+        pluginConfigurations = getObject(configJSON, \"plugins\");\n+    }\n+\n+    public boolean html5mode() {\n+        return html5mode;\n+    }\n+\n+    public String getServerUrl() {\n+        return serverUrl;\n+    }\n+\n+    public String getHostname() {\n+        return hostname;\n+    }\n+\n+    public String getAndroidScheme() {\n+        return androidScheme;\n+    }\n+\n+    public String[] getAllowNavigation() {\n+        return allowNavigation;\n+    }\n+\n+    public String getOverriddenUserAgentString() {\n+        return overriddenUserAgentString;\n+    }\n+\n+    public String getAppendedUserAgentString() {\n+        return appendedUserAgentString;\n+    }\n+\n+    public String getBackgroundColor() {\n+        return backgroundColor;\n+    }\n+\n+    public boolean allowMixedContent() {\n+        return allowMixedContent;\n+    }\n+\n+    public boolean captureInput() {\n+        return captureInput;\n+    }\n+\n+    public Boolean getWebContentsDebuggingEnabled() {\n+        return webContentsDebuggingEnabled;\n+    }\n+\n+    public boolean hideLogs() {\n+        return hideLogs;\n+    }\n+\n+    public JSONObject getPluginConfigurations() {\n+        return pluginConfigurations;\n+    }\n+\n+    /**\n+     * Get a string value for a plugin in the Capacitor config.\n+     *\n+     * @param pluginId The ID of the plugin used in the config\n+     * @param configKey The key of the value to retrieve\n+     * @return The value from the config, if exists. Null if not\n+     */\n+    public String getPluginString(String pluginId, String configKey) {\n+        return getPluginString(pluginId, configKey, null);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f127e5c705e137d97f68c4adcfe2c7e9782c04"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMjIwMA==", "bodyText": "I would phrase this as isMixedContentAllowed(), otherwise the allow verb makes it seem like this method allows mixed content in the config. Same with captureInput() and hideLogs()", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r535702200", "createdAt": "2020-12-03T22:49:18Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/CapConfig.java", "diffHunk": "@@ -52,81 +116,341 @@ private void loadConfig(AssetManager assetManager) {\n         }\n     }\n \n+    /**\n+     * Deserializes the config from JSON into a Capacitor Configuration object.\n+     */\n+    private void deserializeConfig() {\n+        // Server\n+        html5mode = getBoolean(configJSON, \"server.html5mode\", html5mode);\n+        serverUrl = getString(configJSON, \"server.url\", null);\n+        hostname = getString(configJSON, \"server.hostname\", hostname);\n+        androidScheme = getString(configJSON, \"server.androidScheme\", androidScheme);\n+        allowNavigation = getArray(configJSON, \"server.allowNavigation\", null);\n+\n+        // Android\n+        overriddenUserAgentString = getString(configJSON, \"android.overrideUserAgent\", getString(configJSON, \"overrideUserAgent\", null));\n+        appendedUserAgentString = getString(configJSON, \"android.appendUserAgent\", getString(configJSON, \"appendUserAgent\", null));\n+        backgroundColor = getString(configJSON, \"android.backgroundColor\", getString(configJSON, \"backgroundColor\", null));\n+        allowMixedContent =\n+            getBoolean(configJSON, \"android.allowMixedContent\", getBoolean(configJSON, \"allowMixedContent\", allowMixedContent));\n+        captureInput = getBoolean(configJSON, \"android.captureInput\", captureInput);\n+        webContentsDebuggingEnabled = getBoolean(configJSON, \"android.webContentsDebuggingEnabled\", webContentsDebuggingEnabled);\n+        hideLogs = getBoolean(configJSON, \"android.hideLogs\", getBoolean(configJSON, \"hideLogs\", hideLogs));\n+\n+        // Plugins\n+        pluginConfigurations = getObject(configJSON, \"plugins\");\n+    }\n+\n+    public boolean html5mode() {\n+        return html5mode;\n+    }\n+\n+    public String getServerUrl() {\n+        return serverUrl;\n+    }\n+\n+    public String getHostname() {\n+        return hostname;\n+    }\n+\n+    public String getAndroidScheme() {\n+        return androidScheme;\n+    }\n+\n+    public String[] getAllowNavigation() {\n+        return allowNavigation;\n+    }\n+\n+    public String getOverriddenUserAgentString() {\n+        return overriddenUserAgentString;\n+    }\n+\n+    public String getAppendedUserAgentString() {\n+        return appendedUserAgentString;\n+    }\n+\n+    public String getBackgroundColor() {\n+        return backgroundColor;\n+    }\n+\n+    public boolean allowMixedContent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f127e5c705e137d97f68c4adcfe2c7e9782c04"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMjk4MQ==", "bodyText": "Can this be narrowed to only JSON exceptions?", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r535702981", "createdAt": "2020-12-03T22:50:13Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/CapConfig.java", "diffHunk": "@@ -141,7 +465,163 @@ private String getConfigKey(String key) {\n             }\n \n             return value;\n-        } catch (Exception ex) {}\n+        } catch (Exception ignore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f127e5c705e137d97f68c4adcfe2c7e9782c04"}, "originalPosition": 495}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNDQxOQ==", "bodyText": "Little nitpick: this method is returning the plugins configuration. getPluginsConfiguration() might be a more suitable name.", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r535704419", "createdAt": "2020-12-03T22:51:52Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/CapConfig.java", "diffHunk": "@@ -52,81 +116,341 @@ private void loadConfig(AssetManager assetManager) {\n         }\n     }\n \n+    /**\n+     * Deserializes the config from JSON into a Capacitor Configuration object.\n+     */\n+    private void deserializeConfig() {\n+        // Server\n+        html5mode = getBoolean(configJSON, \"server.html5mode\", html5mode);\n+        serverUrl = getString(configJSON, \"server.url\", null);\n+        hostname = getString(configJSON, \"server.hostname\", hostname);\n+        androidScheme = getString(configJSON, \"server.androidScheme\", androidScheme);\n+        allowNavigation = getArray(configJSON, \"server.allowNavigation\", null);\n+\n+        // Android\n+        overriddenUserAgentString = getString(configJSON, \"android.overrideUserAgent\", getString(configJSON, \"overrideUserAgent\", null));\n+        appendedUserAgentString = getString(configJSON, \"android.appendUserAgent\", getString(configJSON, \"appendUserAgent\", null));\n+        backgroundColor = getString(configJSON, \"android.backgroundColor\", getString(configJSON, \"backgroundColor\", null));\n+        allowMixedContent =\n+            getBoolean(configJSON, \"android.allowMixedContent\", getBoolean(configJSON, \"allowMixedContent\", allowMixedContent));\n+        captureInput = getBoolean(configJSON, \"android.captureInput\", captureInput);\n+        webContentsDebuggingEnabled = getBoolean(configJSON, \"android.webContentsDebuggingEnabled\", webContentsDebuggingEnabled);\n+        hideLogs = getBoolean(configJSON, \"android.hideLogs\", getBoolean(configJSON, \"hideLogs\", hideLogs));\n+\n+        // Plugins\n+        pluginConfigurations = getObject(configJSON, \"plugins\");\n+    }\n+\n+    public boolean html5mode() {\n+        return html5mode;\n+    }\n+\n+    public String getServerUrl() {\n+        return serverUrl;\n+    }\n+\n+    public String getHostname() {\n+        return hostname;\n+    }\n+\n+    public String getAndroidScheme() {\n+        return androidScheme;\n+    }\n+\n+    public String[] getAllowNavigation() {\n+        return allowNavigation;\n+    }\n+\n+    public String getOverriddenUserAgentString() {\n+        return overriddenUserAgentString;\n+    }\n+\n+    public String getAppendedUserAgentString() {\n+        return appendedUserAgentString;\n+    }\n+\n+    public String getBackgroundColor() {\n+        return backgroundColor;\n+    }\n+\n+    public boolean allowMixedContent() {\n+        return allowMixedContent;\n+    }\n+\n+    public boolean captureInput() {\n+        return captureInput;\n+    }\n+\n+    public Boolean getWebContentsDebuggingEnabled() {\n+        return webContentsDebuggingEnabled;\n+    }\n+\n+    public boolean hideLogs() {\n+        return hideLogs;\n+    }\n+\n+    public JSONObject getPluginConfigurations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f127e5c705e137d97f68c4adcfe2c7e9782c04"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNjM0OA==", "bodyText": "This is a breaking change. Can you add back the other implementation that accepts JSON and deprecate it similar to how the other ones are?", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r535706348", "createdAt": "2020-12-03T22:54:56Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/BridgeActivity.java", "diffHunk": "@@ -39,7 +47,7 @@ protected void init(Bundle savedInstanceState, List<Class<? extends Plugin>> plu\n      * use {@link BridgeActivity#bridgeBuilder}.\n      */\n     @Deprecated\n-    protected void init(Bundle savedInstanceState, List<Class<? extends Plugin>> plugins, JSONObject config) {\n+    protected void init(Bundle savedInstanceState, List<Class<? extends Plugin>> plugins, CapConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f127e5c705e137d97f68c4adcfe2c7e9782c04"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNjk2NQ==", "bodyText": "These appear to be unused. (Might have been my fault when main was merged in)", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r535706965", "createdAt": "2020-12-03T22:56:06Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/BridgeActivity.java", "diffHunk": "@@ -4,15 +4,23 @@\n import android.os.Bundle;\n import androidx.appcompat.app.AppCompatActivity;\n import com.getcapacitor.android.R;\n+import com.getcapacitor.cordova.MockCordovaWebViewImpl;\n import java.util.ArrayList;\n import java.util.List;\n-import org.json.JSONObject;\n+import org.apache.cordova.CordovaPreferences;\n+import org.apache.cordova.PluginEntry;\n+import org.apache.cordova.PluginManager;\n \n public class BridgeActivity extends AppCompatActivity {\n \n     protected Bridge bridge;\n     protected boolean keepRunning = true;\n-    private JSONObject config;\n+    private ArrayList<PluginEntry> pluginEntries;\n+    private PluginManager pluginManager;\n+    private CordovaPreferences preferences;\n+    private MockCordovaWebViewImpl mockWebView;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f127e5c705e137d97f68c4adcfe2c7e9782c04"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a697a2a9bd2c83d2933c3d85bc03633e516c745", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/6a697a2a9bd2c83d2933c3d85bc03633e516c745", "committedDate": "2020-12-08T16:47:42Z", "message": "remove unrelated change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55f4299a83212be5461057e9bb818c1ad97fbf75", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/55f4299a83212be5461057e9bb818c1ad97fbf75", "committedDate": "2020-12-08T16:49:50Z", "message": "remove unused"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f44a737906c57c6d6f5d1bfc4d4d4ec7a61a258", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/1f44a737906c57c6d6f5d1bfc4d4d4ec7a61a258", "committedDate": "2020-12-08T16:53:34Z", "message": "test import cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTU2MzI4", "url": "https://github.com/ionic-team/capacitor/pull/3778#pullrequestreview-547556328", "createdAt": "2020-12-08T19:22:35Z", "commit": {"oid": "1f44a737906c57c6d6f5d1bfc4d4d4ec7a61a258"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bb57af3f2ee71f6fcd7757f735fa41c868f5392", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/5bb57af3f2ee71f6fcd7757f735fa41c868f5392", "committedDate": "2020-12-08T23:05:18Z", "message": "Moved default debug value, renamed some methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8457e83de29a890f38273e1f71a8741d75bb5585", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/8457e83de29a890f38273e1f71a8741d75bb5585", "committedDate": "2020-12-08T23:09:47Z", "message": "Exception exclusivly json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e589b4adcde61d1331134d7847c43b7aa25950c6", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/e589b4adcde61d1331134d7847c43b7aa25950c6", "committedDate": "2020-12-08T23:13:08Z", "message": "pluginsconfiguration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MDYyMTY1", "url": "https://github.com/ionic-team/capacitor/pull/3778#pullrequestreview-549062165", "createdAt": "2020-12-10T10:35:57Z", "commit": {"oid": "e589b4adcde61d1331134d7847c43b7aa25950c6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdc4db07bb76583d2cd7e9002ec5e531b9280c1e", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/fdc4db07bb76583d2cd7e9002ec5e531b9280c1e", "committedDate": "2020-12-10T17:05:17Z", "message": "Consolidated plaintext file loading to FileUtils and refactored config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd97b37f8aa8c5a1e7a95ee313ef38e4f3547918", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/dd97b37f8aa8c5a1e7a95ee313ef38e4f3547918", "committedDate": "2020-12-10T19:37:29Z", "message": "fmt issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b7048abe7a3bd28166251e49a8ac4b6d551898e", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/6b7048abe7a3bd28166251e49a8ac4b6d551898e", "committedDate": "2020-12-10T22:07:53Z", "message": "Split out plugins config into its own object and JSON utils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21dd356305356216de39e76a5c5bb19f5380fbaa", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/21dd356305356216de39e76a5c5bb19f5380fbaa", "committedDate": "2020-12-10T22:10:16Z", "message": "are -> is for futureproof"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b11983348db00e8a56e019fa420d10f8ef57c487", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/b11983348db00e8a56e019fa420d10f8ef57c487", "committedDate": "2020-12-11T00:04:52Z", "message": "Javadoc to bring attention to the CapConfig change in BridgeActivity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93804bda45818979ccfb24549d44720ade3b8cb2", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/93804bda45818979ccfb24549d44720ade3b8cb2", "committedDate": "2020-12-11T00:15:31Z", "message": "Merge branch 'main' into android-config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzA2MDcy", "url": "https://github.com/ionic-team/capacitor/pull/3778#pullrequestreview-549706072", "createdAt": "2020-12-10T23:59:05Z", "commit": {"oid": "21dd356305356216de39e76a5c5bb19f5380fbaa"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo1OTowNVrOIDi9Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoxOTozM1rOIDjdGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4OTM4Ng==", "bodyText": "Since this is already a breaking change, we should just remove it. init() is the deprecated way of initializing the Android bridge.", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r540589386", "createdAt": "2020-12-10T23:59:05Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/BridgeActivity.java", "diffHunk": "@@ -39,7 +39,7 @@ protected void init(Bundle savedInstanceState, List<Class<? extends Plugin>> plu\n      * use {@link BridgeActivity#bridgeBuilder}.\n      */\n     @Deprecated\n-    protected void init(Bundle savedInstanceState, List<Class<? extends Plugin>> plugins, JSONObject config) {\n+    protected void init(Bundle savedInstanceState, List<Class<? extends Plugin>> plugins, CapConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21dd356305356216de39e76a5c5bb19f5380fbaa"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4OTgyMg==", "bodyText": "This looks like a setter, should it be setConfig() ?", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r540589822", "createdAt": "2020-12-11T00:00:00Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/BridgeFragment.java", "diffHunk": "@@ -50,6 +51,10 @@ public void addPlugin(Class<? extends Plugin> plugin) {\n         this.initialPlugins.add(plugin);\n     }\n \n+    public void configure(CapConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21dd356305356216de39e76a5c5bb19f5380fbaa"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5MTcyMA==", "bodyText": "reader.close() is never called. new code should use try-with-resources: https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r540591720", "createdAt": "2020-12-11T00:04:51Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/FileUtils.java", "diffHunk": "@@ -134,6 +137,26 @@ else if (\"file\".equalsIgnoreCase(uri.getScheme())) {\n         return null;\n     }\n \n+    /**\n+     * Read a plaintext file.\n+     *\n+     * @param context Used to get access to the asset manager to open the file.\n+     * @param fileName The path of the file to read.\n+     * @return The contents of the file path.\n+     * @throws IOException Thrown if any issues reading the provided file path.\n+     */\n+    static String readFile(Context context, String fileName) throws IOException {\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(context.getAssets().open(fileName)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21dd356305356216de39e76a5c5bb19f5380fbaa"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5MjY5Mg==", "bodyText": "Is this supposed to be Boolean?\nAlso, if other boolean getters use is, should this as well?", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r540592692", "createdAt": "2020-12-11T00:07:21Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/CapConfig.java", "diffHunk": "@@ -1,147 +1,384 @@\n package com.getcapacitor;\n \n-import android.content.res.AssetManager;\n-import java.io.BufferedReader;\n+import static com.getcapacitor.Bridge.CAPACITOR_HTTP_SCHEME;\n+import static com.getcapacitor.FileUtils.readFile;\n+\n+import android.content.Context;\n+import android.content.pm.ApplicationInfo;\n import java.io.IOException;\n-import java.io.InputStreamReader;\n-import org.json.JSONArray;\n import org.json.JSONException;\n import org.json.JSONObject;\n \n /**\n- * Management interface for accessing values in capacitor.config.json\n+ * Represents the configuration options for Capacitor\n  */\n public class CapConfig {\n \n-    private JSONObject config = new JSONObject();\n+    // Server Config\n+    private boolean html5mode = true;\n+    private String serverUrl;\n+    private String hostname = \"localhost\";\n+    private String androidScheme = CAPACITOR_HTTP_SCHEME;\n+    private String[] allowNavigation;\n+\n+    // Android Config\n+    private String overriddenUserAgentString;\n+    private String appendedUserAgentString;\n+    private String backgroundColor;\n+    private boolean allowMixedContent = false;\n+    private boolean captureInput = false;\n+    private boolean webContentsDebuggingEnabled = false;\n+    private boolean hideLogs = false;\n+\n+    // Plugins\n+    private PluginsConfig pluginsConfiguration = null;\n+\n+    // Config Object JSON (legacy)\n+    private JSONObject configJSON = new JSONObject();\n+\n+    /**\n+     * Constructs an empty config file.\n+     */\n+    private CapConfig() {}\n+\n+    /**\n+     * Constructs a Capacitor Configuration from config.json file.\n+     *\n+     * @param context The context.\n+     * @return A loaded config file, if successful.\n+     */\n+    static CapConfig fromFile(Context context) {\n+        CapConfig config = new CapConfig();\n \n-    public CapConfig(AssetManager assetManager, JSONObject config) {\n-        if (config != null) {\n-            this.config = config;\n-        } else {\n-            // Load our capacitor.config.json\n-            this.loadConfig(assetManager);\n+        if (context == null) {\n+            Logger.error(\"Capacitor Config could not be created from file. Context must not be null.\");\n+            return config;\n         }\n+\n+        config.loadConfig(context);\n+        config.deserializeConfig(context);\n+        return config;\n+    }\n+\n+    /**\n+     * Constructs a Capacitor Configuration using ConfigBuilder.\n+     *\n+     * @param builder A config builder initialized with values\n+     */\n+    private CapConfig(Builder builder) {\n+        // Server Config\n+        this.html5mode = builder.html5mode;\n+        this.serverUrl = builder.serverUrl;\n+        this.hostname = builder.hostname;\n+        this.androidScheme = builder.androidScheme;\n+        this.allowNavigation = builder.allowNavigation;\n+\n+        // Android Config\n+        this.overriddenUserAgentString = builder.overriddenUserAgentString;\n+        this.appendedUserAgentString = builder.appendedUserAgentString;\n+        this.backgroundColor = builder.backgroundColor;\n+        this.allowMixedContent = builder.allowMixedContent;\n+        this.captureInput = builder.captureInput;\n+        this.webContentsDebuggingEnabled = builder.webContentsDebuggingEnabled;\n+        this.hideLogs = builder.hideLogs;\n+\n+        // Plugins Config\n+        this.pluginsConfiguration = new PluginsConfig(builder.pluginsConfiguration);\n     }\n \n-    private void loadConfig(AssetManager assetManager) {\n-        BufferedReader reader = null;\n+    /**\n+     * Loads a Capacitor Configuration JSON file into a Capacitor Configuration object.\n+     */\n+    private void loadConfig(Context context) {\n         try {\n-            reader = new BufferedReader(new InputStreamReader(assetManager.open(\"capacitor.config.json\")));\n-\n-            // do reading, usually loop until end of file reading\n-            StringBuilder b = new StringBuilder();\n-            String line;\n-            while ((line = reader.readLine()) != null) {\n-                //process line\n-                b.append(line);\n-            }\n-\n-            String jsonString = b.toString();\n-            this.config = new JSONObject(jsonString);\n+            String jsonString = readFile(context, \"capacitor.config.json\");\n+            configJSON = new JSONObject(jsonString);\n         } catch (IOException ex) {\n             Logger.error(\"Unable to load capacitor.config.json. Run npx cap copy first\", ex);\n         } catch (JSONException ex) {\n             Logger.error(\"Unable to parse capacitor.config.json. Make sure it's valid json\", ex);\n-        } finally {\n-            if (reader != null) {\n-                try {\n-                    reader.close();\n-                } catch (IOException e) {}\n-            }\n         }\n     }\n \n-    public JSONObject getObject(String key) {\n-        try {\n-            return this.config.getJSONObject(key);\n-        } catch (Exception ex) {}\n-        return null;\n+    /**\n+     * Deserializes the config from JSON into a Capacitor Configuration object.\n+     */\n+    private void deserializeConfig(Context context) {\n+        // Server\n+        html5mode = JSONUtils.getBoolean(configJSON, \"server.html5mode\", html5mode);\n+        serverUrl = JSONUtils.getString(configJSON, \"server.url\", null);\n+        hostname = JSONUtils.getString(configJSON, \"server.hostname\", hostname);\n+        androidScheme = JSONUtils.getString(configJSON, \"server.androidScheme\", androidScheme);\n+        allowNavigation = JSONUtils.getArray(configJSON, \"server.allowNavigation\", null);\n+\n+        // Android\n+        overriddenUserAgentString =\n+            JSONUtils.getString(configJSON, \"android.overrideUserAgent\", JSONUtils.getString(configJSON, \"overrideUserAgent\", null));\n+        appendedUserAgentString =\n+            JSONUtils.getString(configJSON, \"android.appendUserAgent\", JSONUtils.getString(configJSON, \"appendUserAgent\", null));\n+        backgroundColor =\n+            JSONUtils.getString(configJSON, \"android.backgroundColor\", JSONUtils.getString(configJSON, \"backgroundColor\", null));\n+        allowMixedContent =\n+            JSONUtils.getBoolean(\n+                configJSON,\n+                \"android.allowMixedContent\",\n+                JSONUtils.getBoolean(configJSON, \"allowMixedContent\", allowMixedContent)\n+            );\n+        captureInput = JSONUtils.getBoolean(configJSON, \"android.captureInput\", captureInput);\n+        hideLogs = JSONUtils.getBoolean(configJSON, \"android.hideLogs\", JSONUtils.getBoolean(configJSON, \"hideLogs\", hideLogs));\n+        webContentsDebuggingEnabled = (context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;\n+        webContentsDebuggingEnabled = JSONUtils.getBoolean(configJSON, \"android.webContentsDebuggingEnabled\", webContentsDebuggingEnabled);\n+\n+        // Plugins\n+        pluginsConfiguration = new PluginsConfig(JSONUtils.getObject(configJSON, \"plugins\"));\n     }\n \n-    private JSONObject getConfigObjectDeepest(String key) throws JSONException {\n-        // Split on periods\n-        String[] parts = key.split(\"\\\\.\");\n+    public boolean isHTML5Mode() {\n+        return html5mode;\n+    }\n \n-        JSONObject o = this.config;\n-        // Search until the second to last part of the key\n-        for (int i = 0; i < parts.length - 1; i++) {\n-            String k = parts[i];\n-            o = o.getJSONObject(k);\n-        }\n-        return o;\n+    public String getServerUrl() {\n+        return serverUrl;\n     }\n \n-    public String getString(String key) {\n-        return getString(key, null);\n+    public String getHostname() {\n+        return hostname;\n     }\n \n-    public String getString(String key, String defaultValue) {\n-        String k = getConfigKey(key);\n-        try {\n-            JSONObject o = this.getConfigObjectDeepest(key);\n+    public String getAndroidScheme() {\n+        return androidScheme;\n+    }\n \n-            String value = o.getString(k);\n-            if (value == null) {\n-                return defaultValue;\n-            }\n-            return value;\n-        } catch (Exception ex) {}\n-        return defaultValue;\n+    public String[] getAllowNavigation() {\n+        return allowNavigation;\n     }\n \n-    public boolean getBoolean(String key, boolean defaultValue) {\n-        String k = getConfigKey(key);\n-        try {\n-            JSONObject o = this.getConfigObjectDeepest(key);\n+    public String getOverriddenUserAgentString() {\n+        return overriddenUserAgentString;\n+    }\n \n-            return o.getBoolean(k);\n-        } catch (Exception ex) {}\n-        return defaultValue;\n+    public String getAppendedUserAgentString() {\n+        return appendedUserAgentString;\n     }\n \n-    public int getInt(String key, int defaultValue) {\n-        String k = getConfigKey(key);\n-        try {\n-            JSONObject o = this.getConfigObjectDeepest(key);\n-            return o.getInt(k);\n-        } catch (Exception ignore) {\n-            // value was not found\n-        }\n-        return defaultValue;\n+    public String getBackgroundColor() {\n+        return backgroundColor;\n     }\n \n-    private String getConfigKey(String key) {\n-        String[] parts = key.split(\"\\\\.\");\n-        if (parts.length > 0) {\n-            return parts[parts.length - 1];\n-        }\n+    public boolean isMixedContentAllowed() {\n+        return allowMixedContent;\n+    }\n+\n+    public boolean isInputCaptured() {\n+        return captureInput;\n+    }\n+\n+    public Boolean getWebContentsDebuggingEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b11983348db00e8a56e019fa420d10f8ef57c487"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5Mzc1Ng==", "bodyText": "Even though this not the same class, it's referring to the same property, essentially. Should we call it setLogsHidden() to match isLogsHidden()?", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r540593756", "createdAt": "2020-12-11T00:10:11Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/CapConfig.java", "diffHunk": "@@ -1,147 +1,384 @@\n package com.getcapacitor;\n \n-import android.content.res.AssetManager;\n-import java.io.BufferedReader;\n+import static com.getcapacitor.Bridge.CAPACITOR_HTTP_SCHEME;\n+import static com.getcapacitor.FileUtils.readFile;\n+\n+import android.content.Context;\n+import android.content.pm.ApplicationInfo;\n import java.io.IOException;\n-import java.io.InputStreamReader;\n-import org.json.JSONArray;\n import org.json.JSONException;\n import org.json.JSONObject;\n \n /**\n- * Management interface for accessing values in capacitor.config.json\n+ * Represents the configuration options for Capacitor\n  */\n public class CapConfig {\n \n-    private JSONObject config = new JSONObject();\n+    // Server Config\n+    private boolean html5mode = true;\n+    private String serverUrl;\n+    private String hostname = \"localhost\";\n+    private String androidScheme = CAPACITOR_HTTP_SCHEME;\n+    private String[] allowNavigation;\n+\n+    // Android Config\n+    private String overriddenUserAgentString;\n+    private String appendedUserAgentString;\n+    private String backgroundColor;\n+    private boolean allowMixedContent = false;\n+    private boolean captureInput = false;\n+    private boolean webContentsDebuggingEnabled = false;\n+    private boolean hideLogs = false;\n+\n+    // Plugins\n+    private PluginsConfig pluginsConfiguration = null;\n+\n+    // Config Object JSON (legacy)\n+    private JSONObject configJSON = new JSONObject();\n+\n+    /**\n+     * Constructs an empty config file.\n+     */\n+    private CapConfig() {}\n+\n+    /**\n+     * Constructs a Capacitor Configuration from config.json file.\n+     *\n+     * @param context The context.\n+     * @return A loaded config file, if successful.\n+     */\n+    static CapConfig fromFile(Context context) {\n+        CapConfig config = new CapConfig();\n \n-    public CapConfig(AssetManager assetManager, JSONObject config) {\n-        if (config != null) {\n-            this.config = config;\n-        } else {\n-            // Load our capacitor.config.json\n-            this.loadConfig(assetManager);\n+        if (context == null) {\n+            Logger.error(\"Capacitor Config could not be created from file. Context must not be null.\");\n+            return config;\n         }\n+\n+        config.loadConfig(context);\n+        config.deserializeConfig(context);\n+        return config;\n+    }\n+\n+    /**\n+     * Constructs a Capacitor Configuration using ConfigBuilder.\n+     *\n+     * @param builder A config builder initialized with values\n+     */\n+    private CapConfig(Builder builder) {\n+        // Server Config\n+        this.html5mode = builder.html5mode;\n+        this.serverUrl = builder.serverUrl;\n+        this.hostname = builder.hostname;\n+        this.androidScheme = builder.androidScheme;\n+        this.allowNavigation = builder.allowNavigation;\n+\n+        // Android Config\n+        this.overriddenUserAgentString = builder.overriddenUserAgentString;\n+        this.appendedUserAgentString = builder.appendedUserAgentString;\n+        this.backgroundColor = builder.backgroundColor;\n+        this.allowMixedContent = builder.allowMixedContent;\n+        this.captureInput = builder.captureInput;\n+        this.webContentsDebuggingEnabled = builder.webContentsDebuggingEnabled;\n+        this.hideLogs = builder.hideLogs;\n+\n+        // Plugins Config\n+        this.pluginsConfiguration = new PluginsConfig(builder.pluginsConfiguration);\n     }\n \n-    private void loadConfig(AssetManager assetManager) {\n-        BufferedReader reader = null;\n+    /**\n+     * Loads a Capacitor Configuration JSON file into a Capacitor Configuration object.\n+     */\n+    private void loadConfig(Context context) {\n         try {\n-            reader = new BufferedReader(new InputStreamReader(assetManager.open(\"capacitor.config.json\")));\n-\n-            // do reading, usually loop until end of file reading\n-            StringBuilder b = new StringBuilder();\n-            String line;\n-            while ((line = reader.readLine()) != null) {\n-                //process line\n-                b.append(line);\n-            }\n-\n-            String jsonString = b.toString();\n-            this.config = new JSONObject(jsonString);\n+            String jsonString = readFile(context, \"capacitor.config.json\");\n+            configJSON = new JSONObject(jsonString);\n         } catch (IOException ex) {\n             Logger.error(\"Unable to load capacitor.config.json. Run npx cap copy first\", ex);\n         } catch (JSONException ex) {\n             Logger.error(\"Unable to parse capacitor.config.json. Make sure it's valid json\", ex);\n-        } finally {\n-            if (reader != null) {\n-                try {\n-                    reader.close();\n-                } catch (IOException e) {}\n-            }\n         }\n     }\n \n-    public JSONObject getObject(String key) {\n-        try {\n-            return this.config.getJSONObject(key);\n-        } catch (Exception ex) {}\n-        return null;\n+    /**\n+     * Deserializes the config from JSON into a Capacitor Configuration object.\n+     */\n+    private void deserializeConfig(Context context) {\n+        // Server\n+        html5mode = JSONUtils.getBoolean(configJSON, \"server.html5mode\", html5mode);\n+        serverUrl = JSONUtils.getString(configJSON, \"server.url\", null);\n+        hostname = JSONUtils.getString(configJSON, \"server.hostname\", hostname);\n+        androidScheme = JSONUtils.getString(configJSON, \"server.androidScheme\", androidScheme);\n+        allowNavigation = JSONUtils.getArray(configJSON, \"server.allowNavigation\", null);\n+\n+        // Android\n+        overriddenUserAgentString =\n+            JSONUtils.getString(configJSON, \"android.overrideUserAgent\", JSONUtils.getString(configJSON, \"overrideUserAgent\", null));\n+        appendedUserAgentString =\n+            JSONUtils.getString(configJSON, \"android.appendUserAgent\", JSONUtils.getString(configJSON, \"appendUserAgent\", null));\n+        backgroundColor =\n+            JSONUtils.getString(configJSON, \"android.backgroundColor\", JSONUtils.getString(configJSON, \"backgroundColor\", null));\n+        allowMixedContent =\n+            JSONUtils.getBoolean(\n+                configJSON,\n+                \"android.allowMixedContent\",\n+                JSONUtils.getBoolean(configJSON, \"allowMixedContent\", allowMixedContent)\n+            );\n+        captureInput = JSONUtils.getBoolean(configJSON, \"android.captureInput\", captureInput);\n+        hideLogs = JSONUtils.getBoolean(configJSON, \"android.hideLogs\", JSONUtils.getBoolean(configJSON, \"hideLogs\", hideLogs));\n+        webContentsDebuggingEnabled = (context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;\n+        webContentsDebuggingEnabled = JSONUtils.getBoolean(configJSON, \"android.webContentsDebuggingEnabled\", webContentsDebuggingEnabled);\n+\n+        // Plugins\n+        pluginsConfiguration = new PluginsConfig(JSONUtils.getObject(configJSON, \"plugins\"));\n     }\n \n-    private JSONObject getConfigObjectDeepest(String key) throws JSONException {\n-        // Split on periods\n-        String[] parts = key.split(\"\\\\.\");\n+    public boolean isHTML5Mode() {\n+        return html5mode;\n+    }\n \n-        JSONObject o = this.config;\n-        // Search until the second to last part of the key\n-        for (int i = 0; i < parts.length - 1; i++) {\n-            String k = parts[i];\n-            o = o.getJSONObject(k);\n-        }\n-        return o;\n+    public String getServerUrl() {\n+        return serverUrl;\n     }\n \n-    public String getString(String key) {\n-        return getString(key, null);\n+    public String getHostname() {\n+        return hostname;\n     }\n \n-    public String getString(String key, String defaultValue) {\n-        String k = getConfigKey(key);\n-        try {\n-            JSONObject o = this.getConfigObjectDeepest(key);\n+    public String getAndroidScheme() {\n+        return androidScheme;\n+    }\n \n-            String value = o.getString(k);\n-            if (value == null) {\n-                return defaultValue;\n-            }\n-            return value;\n-        } catch (Exception ex) {}\n-        return defaultValue;\n+    public String[] getAllowNavigation() {\n+        return allowNavigation;\n     }\n \n-    public boolean getBoolean(String key, boolean defaultValue) {\n-        String k = getConfigKey(key);\n-        try {\n-            JSONObject o = this.getConfigObjectDeepest(key);\n+    public String getOverriddenUserAgentString() {\n+        return overriddenUserAgentString;\n+    }\n \n-            return o.getBoolean(k);\n-        } catch (Exception ex) {}\n-        return defaultValue;\n+    public String getAppendedUserAgentString() {\n+        return appendedUserAgentString;\n     }\n \n-    public int getInt(String key, int defaultValue) {\n-        String k = getConfigKey(key);\n-        try {\n-            JSONObject o = this.getConfigObjectDeepest(key);\n-            return o.getInt(k);\n-        } catch (Exception ignore) {\n-            // value was not found\n-        }\n-        return defaultValue;\n+    public String getBackgroundColor() {\n+        return backgroundColor;\n     }\n \n-    private String getConfigKey(String key) {\n-        String[] parts = key.split(\"\\\\.\");\n-        if (parts.length > 0) {\n-            return parts[parts.length - 1];\n-        }\n+    public boolean isMixedContentAllowed() {\n+        return allowMixedContent;\n+    }\n+\n+    public boolean isInputCaptured() {\n+        return captureInput;\n+    }\n+\n+    public Boolean getWebContentsDebuggingEnabled() {\n+        return webContentsDebuggingEnabled;\n+    }\n+\n+    public boolean isLogsHidden() {\n+        return hideLogs;\n+    }\n+\n+    public PluginsConfig getPluginsConfiguration() {\n+        return pluginsConfiguration;\n+    }\n+\n+    /**\n+     * Get a JSON object value from the Capacitor config.\n+     * @deprecated use {@link PluginsConfig#getObject(String, String)}  to access plugin config values.\n+     * For main Capacitor config values, use the appropriate getter.\n+     *\n+     * @param key A key to fetch from the config\n+     * @return The value from the config, if exists. Null if not\n+     */\n+    @Deprecated\n+    public JSONObject getObject(String key) {\n+        try {\n+            return configJSON.getJSONObject(key);\n+        } catch (Exception ex) {}\n         return null;\n     }\n \n+    /**\n+     * Get a string value from the Capacitor config.\n+     * @deprecated use {@link PluginsConfig#getString(String, String)} to access plugin config\n+     * values. For main Capacitor config values, use the appropriate getter.\n+     *\n+     * @param key A key to fetch from the config\n+     * @return The value from the config, if exists. Null if not\n+     */\n+    @Deprecated\n+    public String getString(String key) {\n+        return JSONUtils.getString(configJSON, key, null);\n+    }\n+\n+    /**\n+     * Get a string value from the Capacitor config.\n+     * @deprecated use {@link PluginsConfig#getString(String, String, String)} to access plugin config\n+     * values. For main Capacitor config values, use the appropriate getter.\n+     *\n+     * @param key A key to fetch from the config\n+     * @param defaultValue A default value to return if the key does not exist in the config\n+     * @return The value from the config, if key exists. Default value returned if not\n+     */\n+    @Deprecated\n+    public String getString(String key, String defaultValue) {\n+        return JSONUtils.getString(configJSON, key, defaultValue);\n+    }\n+\n+    /**\n+     * Get a boolean value from the Capacitor config.\n+     * @deprecated use {@link PluginsConfig#getBoolean(String, String, boolean)} to access plugin config\n+     * values. For main Capacitor config values, use the appropriate getter.\n+     *\n+     * @param key A key to fetch from the config\n+     * @param defaultValue A default value to return if the key does not exist in the config\n+     * @return The value from the config, if key exists. Default value returned if not\n+     */\n+    @Deprecated\n+    public boolean getBoolean(String key, boolean defaultValue) {\n+        return JSONUtils.getBoolean(configJSON, key, defaultValue);\n+    }\n+\n+    /**\n+     * Get an integer value from the Capacitor config.\n+     * @deprecated use {@link PluginsConfig#getInt(String, String, int)}  to access the plugin config\n+     * values. For main Capacitor config values, use the appropriate getter.\n+     *\n+     * @param key A key to fetch from the config\n+     * @param defaultValue A default value to return if the key does not exist in the config\n+     * @return The value from the config, if key exists. Default value returned if not\n+     */\n+    @Deprecated\n+    public int getInt(String key, int defaultValue) {\n+        return JSONUtils.getInt(configJSON, key, defaultValue);\n+    }\n+\n+    /**\n+     * Get a string array value from the Capacitor config.\n+     * @deprecated use {@link PluginsConfig#getArray(String, String)}  to access the plugin config\n+     * values. For main Capacitor config values, use the appropriate getter.\n+     *\n+     * @param key A key to fetch from the config\n+     * @return The value from the config, if exists. Null if not\n+     */\n+    @Deprecated\n     public String[] getArray(String key) {\n-        return getArray(key, null);\n+        return JSONUtils.getArray(configJSON, key, null);\n     }\n \n+    /**\n+     * Get a string array value from the Capacitor config.\n+     * @deprecated use {@link PluginsConfig#getArray(String, String, String[])}  to access the plugin\n+     * config values. For main Capacitor config values, use the appropriate getter.\n+     *\n+     * @param key A key to fetch from the config\n+     * @param defaultValue A default value to return if the key does not exist in the config\n+     * @return The value from the config, if key exists. Default value returned if not\n+     */\n+    @Deprecated\n     public String[] getArray(String key, String[] defaultValue) {\n-        String k = getConfigKey(key);\n-        try {\n-            JSONObject o = this.getConfigObjectDeepest(key);\n+        return JSONUtils.getArray(configJSON, key, defaultValue);\n+    }\n \n-            JSONArray a = o.getJSONArray(k);\n-            if (a == null) {\n-                return defaultValue;\n-            }\n+    /**\n+     * Builds a Capacitor Configuration in code\n+     */\n+    public static class Builder {\n \n-            int l = a.length();\n-            String[] value = new String[l];\n+        // Server Config Values\n+        private boolean html5mode = true;\n+        private String serverUrl;\n+        private String hostname = \"localhost\";\n+        private String androidScheme = CAPACITOR_HTTP_SCHEME;\n+        private String[] allowNavigation;\n \n-            for (int i = 0; i < l; i++) {\n-                value[i] = (String) a.get(i);\n-            }\n+        // Android Config Values\n+        private String overriddenUserAgentString;\n+        private String appendedUserAgentString;\n+        private String backgroundColor;\n+        private boolean allowMixedContent = false;\n+        private boolean captureInput = false;\n+        private boolean webContentsDebuggingEnabled = false;\n+        private boolean hideLogs = false;\n \n-            return value;\n-        } catch (Exception ex) {}\n-        return defaultValue;\n+        // Plugins Config Object\n+        private JSONObject pluginsConfiguration = new JSONObject();\n+\n+        /**\n+         * Builds a Capacitor Config from the builder.\n+         *\n+         * @return A new Capacitor Config\n+         */\n+        public CapConfig create() {\n+            return new CapConfig(this);\n+        }\n+\n+        public Builder setPluginsConfiguration(JSONObject pluginsConfiguration) {\n+            this.pluginsConfiguration = pluginsConfiguration;\n+            return this;\n+        }\n+\n+        public Builder setHTML5mode(boolean html5mode) {\n+            this.html5mode = html5mode;\n+            return this;\n+        }\n+\n+        public Builder setServerUrl(String serverUrl) {\n+            this.serverUrl = serverUrl;\n+            return this;\n+        }\n+\n+        public Builder setHostname(String hostname) {\n+            this.hostname = hostname;\n+            return this;\n+        }\n+\n+        public Builder setAndroidScheme(String androidScheme) {\n+            this.androidScheme = androidScheme;\n+            return this;\n+        }\n+\n+        public Builder setAllowNavigation(String[] allowNavigation) {\n+            this.allowNavigation = allowNavigation;\n+            return this;\n+        }\n+\n+        public Builder setOverriddenUserAgentString(String overriddenUserAgentString) {\n+            this.overriddenUserAgentString = overriddenUserAgentString;\n+            return this;\n+        }\n+\n+        public Builder setAppendedUserAgentString(String appendedUserAgentString) {\n+            this.appendedUserAgentString = appendedUserAgentString;\n+            return this;\n+        }\n+\n+        public Builder setBackgroundColor(String backgroundColor) {\n+            this.backgroundColor = backgroundColor;\n+            return this;\n+        }\n+\n+        public Builder setAllowMixedContent(boolean allowMixedContent) {\n+            this.allowMixedContent = allowMixedContent;\n+            return this;\n+        }\n+\n+        public Builder setCaptureInput(boolean captureInput) {\n+            this.captureInput = captureInput;\n+            return this;\n+        }\n+\n+        public Builder setWebContentsDebuggingEnabled(boolean webContentsDebuggingEnabled) {\n+            this.webContentsDebuggingEnabled = webContentsDebuggingEnabled;\n+            return this;\n+        }\n+\n+        public Builder setHideLogs(boolean hideLogs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b11983348db00e8a56e019fa420d10f8ef57c487"}, "originalPosition": 476}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5NDQ2NQ==", "bodyText": "Love this class, but should it go in com.getcapacitor.util?", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r540594465", "createdAt": "2020-12-11T00:11:57Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/JSONUtils.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.getcapacitor;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+/**\n+ * Helper methods for parsing JSON objects.\n+ */\n+public class JSONUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b11983348db00e8a56e019fa420d10f8ef57c487"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5NzUzMA==", "bodyText": "I think we may have misunderstood each other. I was envisioning a reusable PluginConfig class that would correspond to a single plugin's configuration within the Capacitor config file.\nUsage would look like this:\nconfig.getPluginConfig(TEST_PLUGIN_NAME).getString(\"var2\")", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r540597530", "createdAt": "2020-12-11T00:19:33Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/PluginsConfig.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.getcapacitor;\n+\n+import org.json.JSONObject;\n+\n+/**\n+ * Represents the configuration options for plugins used by Capacitor\n+ */\n+public class PluginsConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93804bda45818979ccfb24549d44720ade3b8cb2"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b121eea142e69c105b07573e135bb72cfe530834", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/b121eea142e69c105b07573e135bb72cfe530834", "committedDate": "2020-12-14T21:19:18Z", "message": "Changed PluginConfig to be plugin specific, refactored based on PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7def9c90f49d0be1efe6223fd7f13b0b1a0f08b1", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/7def9c90f49d0be1efe6223fd7f13b0b1a0f08b1", "committedDate": "2020-12-14T21:19:38Z", "message": "Merge branch 'main' into android-config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac1e5f7eaa56aa5d8279895db8b097a62b60ea23", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/ac1e5f7eaa56aa5d8279895db8b097a62b60ea23", "committedDate": "2020-12-14T22:54:41Z", "message": "missed tag, and comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxOTg3NTY4", "url": "https://github.com/ionic-team/capacitor/pull/3778#pullrequestreview-551987568", "createdAt": "2020-12-14T23:47:58Z", "commit": {"oid": "ac1e5f7eaa56aa5d8279895db8b097a62b60ea23"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzo0Nzo1OVrOIFx0JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzo0ODoxM1rOIFx0ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkyOTk1Nw==", "bodyText": "Would it make sense to return an empty PluginConfig to avoid possible null exceptions?", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r542929957", "createdAt": "2020-12-14T23:47:59Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Plugin.java", "diffHunk": "@@ -168,14 +167,32 @@ public PluginCall getSavedCall() {\n         return this.savedLastCall;\n     }\n \n+    /**\n+     * Get the config options for this plugin.\n+     *\n+     * @return a config object representing the plugin config options\n+     */\n+    public PluginConfig getConfig() {\n+        return bridge.getConfig().getPluginConfiguration(handle.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1e5f7eaa56aa5d8279895db8b097a62b60ea23"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzMDA0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        PluginConfig pluginConfig = bridge.getConfig().getPluginConfiguration(handle.getId());\n          \n          \n            \n                        PluginConfig pluginConfig = getConfig();", "url": "https://github.com/ionic-team/capacitor/pull/3778#discussion_r542930043", "createdAt": "2020-12-14T23:48:13Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Plugin.java", "diffHunk": "@@ -168,14 +167,32 @@ public PluginCall getSavedCall() {\n         return this.savedLastCall;\n     }\n \n+    /**\n+     * Get the config options for this plugin.\n+     *\n+     * @return a config object representing the plugin config options\n+     */\n+    public PluginConfig getConfig() {\n+        return bridge.getConfig().getPluginConfiguration(handle.getId());\n+    }\n+\n+    /**\n+     * Get the value for a key on the config for this plugin.\n+     * @deprecated use {@link #getConfig()} and access config values using the methods available\n+     * depending on the type.\n+     *\n+     * @param key the key for the config value\n+     * @return some object containing the value from the config\n+     */\n+    @Deprecated\n     public Object getConfigValue(String key) {\n         try {\n-            JSONObject plugins = bridge.getConfig().getObject(\"plugins\");\n-            if (plugins == null) {\n+            PluginConfig pluginConfig = bridge.getConfig().getPluginConfiguration(handle.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1e5f7eaa56aa5d8279895db8b097a62b60ea23"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de857783db81d6d22f1021c1a6fd9a64d5b40917", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/de857783db81d6d22f1021c1a6fd9a64d5b40917", "committedDate": "2020-12-14T23:58:46Z", "message": "Getconfig returns empty config if does not exist, improves usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59321379b525d35b170aee58376b6b4ad6c259d4", "author": {"user": {"login": "carlpoole", "name": "Carl Poole"}}, "url": "https://github.com/ionic-team/capacitor/commit/59321379b525d35b170aee58376b6b4ad6c259d4", "committedDate": "2020-12-15T00:08:05Z", "message": "Moved null check into CapConfig"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMDE2MTQw", "url": "https://github.com/ionic-team/capacitor/pull/3778#pullrequestreview-552016140", "createdAt": "2020-12-15T00:34:59Z", "commit": {"oid": "59321379b525d35b170aee58376b6b4ad6c259d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1094, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}