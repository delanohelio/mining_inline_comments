{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MDAxMTIx", "number": 2666, "title": "feat(android): implement BridgeFragment for easier embedding using Fragments", "bodyText": "", "createdAt": "2020-03-31T01:18:08Z", "url": "https://github.com/ionic-team/capacitor/pull/2666", "merged": true, "mergeCommit": {"oid": "a8d9591ba9fa7d6e99295580d25cbb1a6ba77b1e"}, "closed": true, "closedAt": "2020-04-03T15:58:31Z", "author": {"login": "mlynch"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTAq3kAFqTM4NDYwNzA3NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUCq4egFqTM4NzM2MjE0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjA3MDc1", "url": "https://github.com/ionic-team/capacitor/pull/2666#pullrequestreview-384607075", "createdAt": "2020-03-31T10:37:28Z", "commit": {"oid": "993fbec22aee11efccd369400371b9feb667108d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjA3MzM1", "url": "https://github.com/ionic-team/capacitor/pull/2666#pullrequestreview-384607335", "createdAt": "2020-03-31T10:37:49Z", "commit": {"oid": "993fbec22aee11efccd369400371b9feb667108d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozNzo0OVrOF-PmTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozNzo0OVrOF-PmTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMTU5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n            /**", "url": "https://github.com/ionic-team/capacitor/pull/2666#discussion_r400811597", "createdAt": "2020-03-31T10:37:49Z", "author": {"login": "jcesarmobile"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Bridge.java", "diffHunk": "@@ -58,7 +58,7 @@\n import java.util.ArrayList;\n \n \n-/**\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "993fbec22aee11efccd369400371b9feb667108d"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b08b108935b6720dea259a9e0090b6982e804047", "author": {"user": {"login": "jcesarmobile", "name": "jcesarmobile"}}, "url": "https://github.com/ionic-team/capacitor/commit/b08b108935b6720dea259a9e0090b6982e804047", "committedDate": "2020-03-31T10:38:01Z", "message": "add removed *"}, "afterCommit": {"oid": "987d0acfb1bf151a41dc5eb723f4431bace2deba", "author": {"user": {"login": "mlynch", "name": "Max Lynch"}}, "url": "https://github.com/ionic-team/capacitor/commit/987d0acfb1bf151a41dc5eb723f4431bace2deba", "committedDate": "2020-03-31T14:46:36Z", "message": "Merged in master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NTI2MjIx", "url": "https://github.com/ionic-team/capacitor/pull/2666#pullrequestreview-385526221", "createdAt": "2020-04-01T12:16:11Z", "commit": {"oid": "f0b7707054dc640da33a1919677c786af932d52b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoxNjoxMVrOF-91rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozNDoyOVrOF--eKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2OTE5Nw==", "bodyText": "Why do you do this? the preferences are being set on line 125, so this reset them", "url": "https://github.com/ionic-team/capacitor/pull/2666#discussion_r401569197", "createdAt": "2020-04-01T12:16:11Z", "author": {"login": "jcesarmobile"}, "path": "android/capacitor/src/main/java/com/getcapacitor/BridgeFragment.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.getcapacitor;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.res.TypedArray;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.AttributeSet;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.webkit.WebView;\n+\n+import androidx.fragment.app.Fragment;\n+\n+import com.getcapacitor.android.R;\n+import com.getcapacitor.cordova.MockCordovaInterfaceImpl;\n+import com.getcapacitor.cordova.MockCordovaWebViewImpl;\n+\n+import org.apache.cordova.ConfigXmlParser;\n+import org.apache.cordova.CordovaPreferences;\n+import org.apache.cordova.PluginEntry;\n+import org.apache.cordova.PluginManager;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * A simple {@link Fragment} subclass.\n+ * Activities that contain this fragment must implement the\n+ * {@link BridgeFragment.OnFragmentInteractionListener} interface\n+ * to handle interaction events.\n+ * Use the {@link BridgeFragment#newInstance} factory method to\n+ * create an instance of this fragment.\n+ */\n+public class BridgeFragment extends Fragment {\n+  private static final String ARG_START_DIR = \"startDir\";\n+\n+  private String startDir;\n+\n+  private OnFragmentInteractionListener mListener;\n+\n+  private WebView webView;\n+  protected Bridge bridge;\n+  protected MockCordovaInterfaceImpl cordovaInterface;\n+  protected boolean keepRunning = true;\n+  private ArrayList<PluginEntry> pluginEntries;\n+  private PluginManager pluginManager;\n+  private CordovaPreferences preferences;\n+  private MockCordovaWebViewImpl mockWebView;\n+  private int activityDepth = 0;\n+  private String bridgeStartDir;\n+\n+  private String lastActivityPlugin;\n+\n+  private List<Class<? extends Plugin>> initialPlugins = new ArrayList<>();\n+\n+\n+  public BridgeFragment() {\n+    // Required empty public constructor\n+  }\n+\n+  /**\n+   * Use this factory method to create a new instance of\n+   * this fragment using the provided parameters.\n+   *\n+   * @param startDir the directory to serve content from\n+   * @return A new instance of fragment BridgeFragment.\n+   */\n+  public static BridgeFragment newInstance(String startDir) {\n+    BridgeFragment fragment = new BridgeFragment();\n+    Bundle args = new Bundle();\n+    args.putString(ARG_START_DIR, startDir);\n+    fragment.setArguments(args);\n+    return fragment;\n+  }\n+\n+  protected void init(Bundle savedInstanceState) {\n+    loadConfig(this.getActivity().getApplicationContext(), this.getActivity());\n+  }\n+\n+  /**\n+   * Load the WebView and create the Bridge\n+   */\n+  protected void load(Bundle savedInstanceState) {\n+    Log.d(LogUtils.getCoreTag(), \"Starting BridgeActivity\");\n+\n+    Bundle args = getArguments();\n+    String startDir = null;\n+\n+    if (args != null) {\n+      startDir = getArguments().getString(ARG_START_DIR);\n+    }\n+\n+    webView = getView().findViewById(R.id.webview);\n+    cordovaInterface = new MockCordovaInterfaceImpl(this.getActivity());\n+    if (savedInstanceState != null) {\n+      cordovaInterface.restoreInstanceState(savedInstanceState);\n+    }\n+\n+    mockWebView = new MockCordovaWebViewImpl(getActivity().getApplicationContext());\n+    mockWebView.init(cordovaInterface, pluginEntries, preferences, webView);\n+\n+    pluginManager = mockWebView.getPluginManager();\n+    cordovaInterface.onCordovaInit(pluginManager);\n+\n+    preferences = new CordovaPreferences();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b7707054dc640da33a1919677c786af932d52b"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MDE0Mg==", "bodyText": "is this needed or forgot to uncomment? If not needed just delete it", "url": "https://github.com/ionic-team/capacitor/pull/2666#discussion_r401570142", "createdAt": "2020-04-01T12:17:52Z", "author": {"login": "jcesarmobile"}, "path": "android/capacitor/src/main/java/com/getcapacitor/BridgeFragment.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.getcapacitor;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.res.TypedArray;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.AttributeSet;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.webkit.WebView;\n+\n+import androidx.fragment.app.Fragment;\n+\n+import com.getcapacitor.android.R;\n+import com.getcapacitor.cordova.MockCordovaInterfaceImpl;\n+import com.getcapacitor.cordova.MockCordovaWebViewImpl;\n+\n+import org.apache.cordova.ConfigXmlParser;\n+import org.apache.cordova.CordovaPreferences;\n+import org.apache.cordova.PluginEntry;\n+import org.apache.cordova.PluginManager;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * A simple {@link Fragment} subclass.\n+ * Activities that contain this fragment must implement the\n+ * {@link BridgeFragment.OnFragmentInteractionListener} interface\n+ * to handle interaction events.\n+ * Use the {@link BridgeFragment#newInstance} factory method to\n+ * create an instance of this fragment.\n+ */\n+public class BridgeFragment extends Fragment {\n+  private static final String ARG_START_DIR = \"startDir\";\n+\n+  private String startDir;\n+\n+  private OnFragmentInteractionListener mListener;\n+\n+  private WebView webView;\n+  protected Bridge bridge;\n+  protected MockCordovaInterfaceImpl cordovaInterface;\n+  protected boolean keepRunning = true;\n+  private ArrayList<PluginEntry> pluginEntries;\n+  private PluginManager pluginManager;\n+  private CordovaPreferences preferences;\n+  private MockCordovaWebViewImpl mockWebView;\n+  private int activityDepth = 0;\n+  private String bridgeStartDir;\n+\n+  private String lastActivityPlugin;\n+\n+  private List<Class<? extends Plugin>> initialPlugins = new ArrayList<>();\n+\n+\n+  public BridgeFragment() {\n+    // Required empty public constructor\n+  }\n+\n+  /**\n+   * Use this factory method to create a new instance of\n+   * this fragment using the provided parameters.\n+   *\n+   * @param startDir the directory to serve content from\n+   * @return A new instance of fragment BridgeFragment.\n+   */\n+  public static BridgeFragment newInstance(String startDir) {\n+    BridgeFragment fragment = new BridgeFragment();\n+    Bundle args = new Bundle();\n+    args.putString(ARG_START_DIR, startDir);\n+    fragment.setArguments(args);\n+    return fragment;\n+  }\n+\n+  protected void init(Bundle savedInstanceState) {\n+    loadConfig(this.getActivity().getApplicationContext(), this.getActivity());\n+  }\n+\n+  /**\n+   * Load the WebView and create the Bridge\n+   */\n+  protected void load(Bundle savedInstanceState) {\n+    Log.d(LogUtils.getCoreTag(), \"Starting BridgeActivity\");\n+\n+    Bundle args = getArguments();\n+    String startDir = null;\n+\n+    if (args != null) {\n+      startDir = getArguments().getString(ARG_START_DIR);\n+    }\n+\n+    webView = getView().findViewById(R.id.webview);\n+    cordovaInterface = new MockCordovaInterfaceImpl(this.getActivity());\n+    if (savedInstanceState != null) {\n+      cordovaInterface.restoreInstanceState(savedInstanceState);\n+    }\n+\n+    mockWebView = new MockCordovaWebViewImpl(getActivity().getApplicationContext());\n+    mockWebView.init(cordovaInterface, pluginEntries, preferences, webView);\n+\n+    pluginManager = mockWebView.getPluginManager();\n+    cordovaInterface.onCordovaInit(pluginManager);\n+\n+    preferences = new CordovaPreferences();\n+    bridge = new Bridge(this.getActivity(), webView, initialPlugins, cordovaInterface, pluginManager, preferences);\n+\n+    if (startDir != null) {\n+      bridge.setServerAssetPath(startDir);\n+    }\n+\n+    if (savedInstanceState != null) {\n+      bridge.restoreInstanceState(savedInstanceState);\n+    }\n+    this.keepRunning = preferences.getBoolean(\"KeepRunning\", true);\n+    // this.onNewIntent(getIntent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b7707054dc640da33a1919677c786af932d52b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3OTU2MQ==", "bodyText": "I guess this is to prevent some crash, but if the splash is not found it still crash on line 267\nCan be prevented by changing to\n} catch (IllegalStateException | IllegalArgumentException ex) {\n  Log.d(LogUtils.getCoreTag(), \"Could not add splash view\");\n  return;\n}", "url": "https://github.com/ionic-team/capacitor/pull/2666#discussion_r401579561", "createdAt": "2020-04-01T12:34:29Z", "author": {"login": "jcesarmobile"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Splash.java", "diffHunk": "@@ -47,7 +48,14 @@ private static void buildViews(Context c) {\n       String splashResourceName = Config.getString(CONFIG_KEY_PREFIX + \"androidSplashResourceName\", \"splash\");\n \n       int splashId = c.getResources().getIdentifier(splashResourceName, \"drawable\", c.getPackageName());\n-      Drawable splash = c.getResources().getDrawable(splashId, c.getTheme());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b7707054dc640da33a1919677c786af932d52b"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d865d623895dac4efb7afb710e210ccbce92d7e1", "author": {"user": {"login": "mlynch", "name": "Max Lynch"}}, "url": "https://github.com/ionic-team/capacitor/commit/d865d623895dac4efb7afb710e210ccbce92d7e1", "committedDate": "2020-04-01T21:53:05Z", "message": "Add android fragment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0b7707054dc640da33a1919677c786af932d52b", "author": {"user": {"login": "mlynch", "name": "Max Lynch"}}, "url": "https://github.com/ionic-team/capacitor/commit/f0b7707054dc640da33a1919677c786af932d52b", "committedDate": "2020-03-31T15:26:28Z", "message": "Fix comment mistake"}, "afterCommit": {"oid": "d865d623895dac4efb7afb710e210ccbce92d7e1", "author": {"user": {"login": "mlynch", "name": "Max Lynch"}}, "url": "https://github.com/ionic-team/capacitor/commit/d865d623895dac4efb7afb710e210ccbce92d7e1", "committedDate": "2020-04-01T21:53:05Z", "message": "Add android fragment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84e6eb958469938456b7476d6071c5a3e0085e0a", "author": {"user": {"login": "jcesarmobile", "name": "jcesarmobile"}}, "url": "https://github.com/ionic-team/capacitor/commit/84e6eb958469938456b7476d6071c5a3e0085e0a", "committedDate": "2020-04-03T15:19:45Z", "message": "add head tag so Capacitor can be injected"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90f8a0cb4990084c28de9ea2ecac23608be12177", "author": {"user": {"login": "jcesarmobile", "name": "jcesarmobile"}}, "url": "https://github.com/ionic-team/capacitor/commit/90f8a0cb4990084c28de9ea2ecac23608be12177", "committedDate": "2020-04-03T15:27:46Z", "message": "use MainActivity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2753a83850c71bd0a59efd3a2d6611e9351eaca", "author": {"user": {"login": "jcesarmobile", "name": "jcesarmobile"}}, "url": "https://github.com/ionic-team/capacitor/commit/c2753a83850c71bd0a59efd3a2d6611e9351eaca", "committedDate": "2020-04-03T15:28:12Z", "message": "Avoid crash if splash is not found"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "983425862e1476af3c68c0373c41527479c577ec", "author": {"user": {"login": "jcesarmobile", "name": "jcesarmobile"}}, "url": "https://github.com/ionic-team/capacitor/commit/983425862e1476af3c68c0373c41527479c577ec", "committedDate": "2020-04-03T15:28:40Z", "message": "remove unused line"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MzYyMTQ4", "url": "https://github.com/ionic-team/capacitor/pull/2666#pullrequestreview-387362148", "createdAt": "2020-04-03T15:31:13Z", "commit": {"oid": "983425862e1476af3c68c0373c41527479c577ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1264, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}