{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MDAxMTIx", "number": 2666, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozNzo0OVrODtDDDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozNDoyOVrODtgt4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTYyNDQ1OnYy", "diffSide": "RIGHT", "path": "android/capacitor/src/main/java/com/getcapacitor/Bridge.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozNzo0OVrOF-PmTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozNzo0OVrOF-PmTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMTU5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n            /**", "url": "https://github.com/ionic-team/capacitor/pull/2666#discussion_r400811597", "createdAt": "2020-03-31T10:37:49Z", "author": {"login": "jcesarmobile"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Bridge.java", "diffHunk": "@@ -58,7 +58,7 @@\n import java.util.ArrayList;\n \n \n-/**\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "993fbec22aee11efccd369400371b9feb667108d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDQyMDE1OnYy", "diffSide": "RIGHT", "path": "android/capacitor/src/main/java/com/getcapacitor/BridgeFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoxNjoxMVrOF-91rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoxNjoxMVrOF-91rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2OTE5Nw==", "bodyText": "Why do you do this? the preferences are being set on line 125, so this reset them", "url": "https://github.com/ionic-team/capacitor/pull/2666#discussion_r401569197", "createdAt": "2020-04-01T12:16:11Z", "author": {"login": "jcesarmobile"}, "path": "android/capacitor/src/main/java/com/getcapacitor/BridgeFragment.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.getcapacitor;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.res.TypedArray;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.AttributeSet;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.webkit.WebView;\n+\n+import androidx.fragment.app.Fragment;\n+\n+import com.getcapacitor.android.R;\n+import com.getcapacitor.cordova.MockCordovaInterfaceImpl;\n+import com.getcapacitor.cordova.MockCordovaWebViewImpl;\n+\n+import org.apache.cordova.ConfigXmlParser;\n+import org.apache.cordova.CordovaPreferences;\n+import org.apache.cordova.PluginEntry;\n+import org.apache.cordova.PluginManager;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * A simple {@link Fragment} subclass.\n+ * Activities that contain this fragment must implement the\n+ * {@link BridgeFragment.OnFragmentInteractionListener} interface\n+ * to handle interaction events.\n+ * Use the {@link BridgeFragment#newInstance} factory method to\n+ * create an instance of this fragment.\n+ */\n+public class BridgeFragment extends Fragment {\n+  private static final String ARG_START_DIR = \"startDir\";\n+\n+  private String startDir;\n+\n+  private OnFragmentInteractionListener mListener;\n+\n+  private WebView webView;\n+  protected Bridge bridge;\n+  protected MockCordovaInterfaceImpl cordovaInterface;\n+  protected boolean keepRunning = true;\n+  private ArrayList<PluginEntry> pluginEntries;\n+  private PluginManager pluginManager;\n+  private CordovaPreferences preferences;\n+  private MockCordovaWebViewImpl mockWebView;\n+  private int activityDepth = 0;\n+  private String bridgeStartDir;\n+\n+  private String lastActivityPlugin;\n+\n+  private List<Class<? extends Plugin>> initialPlugins = new ArrayList<>();\n+\n+\n+  public BridgeFragment() {\n+    // Required empty public constructor\n+  }\n+\n+  /**\n+   * Use this factory method to create a new instance of\n+   * this fragment using the provided parameters.\n+   *\n+   * @param startDir the directory to serve content from\n+   * @return A new instance of fragment BridgeFragment.\n+   */\n+  public static BridgeFragment newInstance(String startDir) {\n+    BridgeFragment fragment = new BridgeFragment();\n+    Bundle args = new Bundle();\n+    args.putString(ARG_START_DIR, startDir);\n+    fragment.setArguments(args);\n+    return fragment;\n+  }\n+\n+  protected void init(Bundle savedInstanceState) {\n+    loadConfig(this.getActivity().getApplicationContext(), this.getActivity());\n+  }\n+\n+  /**\n+   * Load the WebView and create the Bridge\n+   */\n+  protected void load(Bundle savedInstanceState) {\n+    Log.d(LogUtils.getCoreTag(), \"Starting BridgeActivity\");\n+\n+    Bundle args = getArguments();\n+    String startDir = null;\n+\n+    if (args != null) {\n+      startDir = getArguments().getString(ARG_START_DIR);\n+    }\n+\n+    webView = getView().findViewById(R.id.webview);\n+    cordovaInterface = new MockCordovaInterfaceImpl(this.getActivity());\n+    if (savedInstanceState != null) {\n+      cordovaInterface.restoreInstanceState(savedInstanceState);\n+    }\n+\n+    mockWebView = new MockCordovaWebViewImpl(getActivity().getApplicationContext());\n+    mockWebView.init(cordovaInterface, pluginEntries, preferences, webView);\n+\n+    pluginManager = mockWebView.getPluginManager();\n+    cordovaInterface.onCordovaInit(pluginManager);\n+\n+    preferences = new CordovaPreferences();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b7707054dc640da33a1919677c786af932d52b"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDQyNTkzOnYy", "diffSide": "RIGHT", "path": "android/capacitor/src/main/java/com/getcapacitor/BridgeFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoxNzo1MlrOF-95Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoxNzo1MlrOF-95Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MDE0Mg==", "bodyText": "is this needed or forgot to uncomment? If not needed just delete it", "url": "https://github.com/ionic-team/capacitor/pull/2666#discussion_r401570142", "createdAt": "2020-04-01T12:17:52Z", "author": {"login": "jcesarmobile"}, "path": "android/capacitor/src/main/java/com/getcapacitor/BridgeFragment.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.getcapacitor;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.res.TypedArray;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.AttributeSet;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.webkit.WebView;\n+\n+import androidx.fragment.app.Fragment;\n+\n+import com.getcapacitor.android.R;\n+import com.getcapacitor.cordova.MockCordovaInterfaceImpl;\n+import com.getcapacitor.cordova.MockCordovaWebViewImpl;\n+\n+import org.apache.cordova.ConfigXmlParser;\n+import org.apache.cordova.CordovaPreferences;\n+import org.apache.cordova.PluginEntry;\n+import org.apache.cordova.PluginManager;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * A simple {@link Fragment} subclass.\n+ * Activities that contain this fragment must implement the\n+ * {@link BridgeFragment.OnFragmentInteractionListener} interface\n+ * to handle interaction events.\n+ * Use the {@link BridgeFragment#newInstance} factory method to\n+ * create an instance of this fragment.\n+ */\n+public class BridgeFragment extends Fragment {\n+  private static final String ARG_START_DIR = \"startDir\";\n+\n+  private String startDir;\n+\n+  private OnFragmentInteractionListener mListener;\n+\n+  private WebView webView;\n+  protected Bridge bridge;\n+  protected MockCordovaInterfaceImpl cordovaInterface;\n+  protected boolean keepRunning = true;\n+  private ArrayList<PluginEntry> pluginEntries;\n+  private PluginManager pluginManager;\n+  private CordovaPreferences preferences;\n+  private MockCordovaWebViewImpl mockWebView;\n+  private int activityDepth = 0;\n+  private String bridgeStartDir;\n+\n+  private String lastActivityPlugin;\n+\n+  private List<Class<? extends Plugin>> initialPlugins = new ArrayList<>();\n+\n+\n+  public BridgeFragment() {\n+    // Required empty public constructor\n+  }\n+\n+  /**\n+   * Use this factory method to create a new instance of\n+   * this fragment using the provided parameters.\n+   *\n+   * @param startDir the directory to serve content from\n+   * @return A new instance of fragment BridgeFragment.\n+   */\n+  public static BridgeFragment newInstance(String startDir) {\n+    BridgeFragment fragment = new BridgeFragment();\n+    Bundle args = new Bundle();\n+    args.putString(ARG_START_DIR, startDir);\n+    fragment.setArguments(args);\n+    return fragment;\n+  }\n+\n+  protected void init(Bundle savedInstanceState) {\n+    loadConfig(this.getActivity().getApplicationContext(), this.getActivity());\n+  }\n+\n+  /**\n+   * Load the WebView and create the Bridge\n+   */\n+  protected void load(Bundle savedInstanceState) {\n+    Log.d(LogUtils.getCoreTag(), \"Starting BridgeActivity\");\n+\n+    Bundle args = getArguments();\n+    String startDir = null;\n+\n+    if (args != null) {\n+      startDir = getArguments().getString(ARG_START_DIR);\n+    }\n+\n+    webView = getView().findViewById(R.id.webview);\n+    cordovaInterface = new MockCordovaInterfaceImpl(this.getActivity());\n+    if (savedInstanceState != null) {\n+      cordovaInterface.restoreInstanceState(savedInstanceState);\n+    }\n+\n+    mockWebView = new MockCordovaWebViewImpl(getActivity().getApplicationContext());\n+    mockWebView.init(cordovaInterface, pluginEntries, preferences, webView);\n+\n+    pluginManager = mockWebView.getPluginManager();\n+    cordovaInterface.onCordovaInit(pluginManager);\n+\n+    preferences = new CordovaPreferences();\n+    bridge = new Bridge(this.getActivity(), webView, initialPlugins, cordovaInterface, pluginManager, preferences);\n+\n+    if (startDir != null) {\n+      bridge.setServerAssetPath(startDir);\n+    }\n+\n+    if (savedInstanceState != null) {\n+      bridge.restoreInstanceState(savedInstanceState);\n+    }\n+    this.keepRunning = preferences.getBoolean(\"KeepRunning\", true);\n+    // this.onNewIntent(getIntent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b7707054dc640da33a1919677c786af932d52b"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDQ4NTQ0OnYy", "diffSide": "RIGHT", "path": "android/capacitor/src/main/java/com/getcapacitor/Splash.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozNDoyOVrOF--eKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozNDoyOVrOF--eKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3OTU2MQ==", "bodyText": "I guess this is to prevent some crash, but if the splash is not found it still crash on line 267\nCan be prevented by changing to\n} catch (IllegalStateException | IllegalArgumentException ex) {\n  Log.d(LogUtils.getCoreTag(), \"Could not add splash view\");\n  return;\n}", "url": "https://github.com/ionic-team/capacitor/pull/2666#discussion_r401579561", "createdAt": "2020-04-01T12:34:29Z", "author": {"login": "jcesarmobile"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Splash.java", "diffHunk": "@@ -47,7 +48,14 @@ private static void buildViews(Context c) {\n       String splashResourceName = Config.getString(CONFIG_KEY_PREFIX + \"androidSplashResourceName\", \"splash\");\n \n       int splashId = c.getResources().getIdentifier(splashResourceName, \"drawable\", c.getPackageName());\n-      Drawable splash = c.getResources().getDrawable(splashId, c.getTheme());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b7707054dc640da33a1919677c786af932d52b"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3579, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}