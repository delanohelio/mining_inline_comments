{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MTgzNjUx", "number": 3842, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowMToyOFrOE8Ws-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTo0OToxOVrOE9XvrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzIxOTc5OnYy", "diffSide": "RIGHT", "path": "ios/Capacitor/Capacitor/CAPFile.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowMToyOFrOH4bTwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowMToyOFrOH4bTwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyOTczMA==", "bodyText": "Can this just return a URL? CAPFile is a pretty useless wrapper since it only has one property. In addition, using that object means that this method can't be exported to Obj-C because CAPFile is Swift-only.", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r528929730", "createdAt": "2020-11-23T19:01:28Z", "author": {"login": "ikeith"}, "path": "ios/Capacitor/Capacitor/CAPFile.swift", "diffHunk": "@@ -11,7 +11,7 @@ public class CAPFile {\n  * disk, in a bundle, or in another location.\n  */\n @objc public class CAPFileManager: NSObject {\n-    static func get(path: String) -> CAPFile? {\n+    public static func get(path: String) -> CAPFile? {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bdd18bec87011ab8dadbbfc93ca09d81c5772b1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzIyNTkzOnYy", "diffSide": "RIGHT", "path": "ios/Capacitor/Capacitor/CAPFile.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowMzowN1rOH4bXag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTowMzowN1rOH4bXag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzMDY2Ng==", "bodyText": "I think this would benefit from a more descriptive name. This isn't getting \"getting\" anything; CAPFileManager doesn't store data. This is transforming the parameter that gets passed in but it's impossible to tell what it is expected do to from the name.", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r528930666", "createdAt": "2020-11-23T19:03:07Z", "author": {"login": "ikeith"}, "path": "ios/Capacitor/Capacitor/CAPFile.swift", "diffHunk": "@@ -11,7 +11,7 @@ public class CAPFile {\n  * disk, in a bundle, or in another location.\n  */\n @objc public class CAPFileManager: NSObject {\n-    static func get(path: String) -> CAPFile? {\n+    public static func get(path: String) -> CAPFile? {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bdd18bec87011ab8dadbbfc93ca09d81c5772b1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODA1ODQ5OnYy", "diffSide": "RIGHT", "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzoxNTo0N1rOH4jIEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzozOToxMVrOH5N99A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1NzgxMQ==", "bodyText": "@ikeith This is questionable. I kept the old behavior, but I'm thinking we should remove this check and let it fail whenever the file is actually used, vs when we transform the path.", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r529057811", "createdAt": "2020-11-23T23:15:47Z", "author": {"login": "imhoffd"}, "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "diffHunk": "@@ -537,6 +537,57 @@ internal class CapacitorBridge: NSObject, CAPBridgeProtocol {\n         }\n     }\n \n+    // MARK: - CAPBridgeProtocol: Paths, Files, Assets\n+\n+    /**\n+     * Translate a URL from the web view into a file URL for native iOS.\n+     *\n+     * The web view may be handling several different types of URLs:\n+     *   - res:// (shortcut scheme to web assets)\n+     *   - file:// (fully qualified URL to file on the local device)\n+     *   - base64:// (to be implemented)\n+     *   - [web view scheme]:// (already converted once to load in the web view, to be implemented)\n+     */\n+    public func localURL(fromWebURL webURL: URL?) -> URL? {\n+        guard let inputURL = webURL else {\n+            return nil\n+        }\n+\n+        let manager = FileManager.default\n+        let url: URL\n+\n+        switch inputURL.scheme {\n+        case \"res\":\n+            let bundle = Bundle.main\n+            let resourcePath = bundle.resourcePath!\n+            url = URL(fileURLWithPath: resourcePath + \"/public\" + inputURL.path)\n+        case \"file\":\n+            url = inputURL\n+        default:\n+            return nil\n+        }\n+\n+        guard manager.fileExists(atPath: url.absoluteString.replacingOccurrences(of: \"file://\", with: \"\")) else {\n+            return nil\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "511462c56dfd408e9e8728018df8715a861d211c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1OTczMg==", "bodyText": "I would be in favor of removing this. If we did keep it, though, it should simply pass url.path to fileExist(atPath:) instead of getting the absolute string and modifying it.", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r529759732", "createdAt": "2020-11-24T17:39:11Z", "author": {"login": "ikeith"}, "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "diffHunk": "@@ -537,6 +537,57 @@ internal class CapacitorBridge: NSObject, CAPBridgeProtocol {\n         }\n     }\n \n+    // MARK: - CAPBridgeProtocol: Paths, Files, Assets\n+\n+    /**\n+     * Translate a URL from the web view into a file URL for native iOS.\n+     *\n+     * The web view may be handling several different types of URLs:\n+     *   - res:// (shortcut scheme to web assets)\n+     *   - file:// (fully qualified URL to file on the local device)\n+     *   - base64:// (to be implemented)\n+     *   - [web view scheme]:// (already converted once to load in the web view, to be implemented)\n+     */\n+    public func localURL(fromWebURL webURL: URL?) -> URL? {\n+        guard let inputURL = webURL else {\n+            return nil\n+        }\n+\n+        let manager = FileManager.default\n+        let url: URL\n+\n+        switch inputURL.scheme {\n+        case \"res\":\n+            let bundle = Bundle.main\n+            let resourcePath = bundle.resourcePath!\n+            url = URL(fileURLWithPath: resourcePath + \"/public\" + inputURL.path)\n+        case \"file\":\n+            url = inputURL\n+        default:\n+            return nil\n+        }\n+\n+        guard manager.fileExists(atPath: url.absoluteString.replacingOccurrences(of: \"file://\", with: \"\")) else {\n+            return nil\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1NzgxMQ=="}, "originalCommit": {"oid": "511462c56dfd408e9e8728018df8715a861d211c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODA3Njk5OnYy", "diffSide": "RIGHT", "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzoyMjozNlrOH4jTDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzo0MzowNFrOH5OHYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2MDYyMg==", "bodyText": "@ikeith What do you think about this also returning a proper URL, and then documenting that the plugin can use url.absoluteString?", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r529060622", "createdAt": "2020-11-23T23:22:36Z", "author": {"login": "imhoffd"}, "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "diffHunk": "@@ -537,6 +537,60 @@ internal class CapacitorBridge: NSObject, CAPBridgeProtocol {\n         }\n     }\n \n+    // MARK: - CAPBridgeProtocol: Paths, Files, Assets\n+\n+    /**\n+     * Translate a URL from the web view into a file URL for native iOS.\n+     *\n+     * The web view may be handling several different types of URLs:\n+     *   - res:// (shortcut scheme to web assets)\n+     *   - file:// (fully qualified URL to file on the local device)\n+     *   - base64:// (to be implemented)\n+     *   - [web view scheme]:// (already converted once to load in the web view, to be implemented)\n+     */\n+    public func localURL(fromWebURL webURL: URL?) -> URL? {\n+        guard let inputURL = webURL else {\n+            return nil\n+        }\n+\n+        let manager = FileManager.default\n+        let url: URL\n+\n+        switch inputURL.scheme {\n+        case \"res\":\n+            let bundle = Bundle.main\n+            let resourcePath = bundle.resourcePath!\n+            url = URL(fileURLWithPath: resourcePath + \"/public\" + inputURL.path)\n+        case \"file\":\n+            url = inputURL\n+        default:\n+            return nil\n+        }\n+\n+        guard manager.fileExists(atPath: url.absoluteString.replacingOccurrences(of: \"file://\", with: \"\")) else {\n+            return nil\n+        }\n+\n+        return url\n+    }\n+\n+    /**\n+     * Translate a file URL for native iOS into a URL to load in the web view.\n+     */\n+    public func portablePath(fromLocalURL localURL: URL?) -> String? {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b21029f0cb914a67f682b1796f385d186482fd99"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2MjE0Ng==", "bodyText": "I like that better.", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r529762146", "createdAt": "2020-11-24T17:43:04Z", "author": {"login": "ikeith"}, "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "diffHunk": "@@ -537,6 +537,60 @@ internal class CapacitorBridge: NSObject, CAPBridgeProtocol {\n         }\n     }\n \n+    // MARK: - CAPBridgeProtocol: Paths, Files, Assets\n+\n+    /**\n+     * Translate a URL from the web view into a file URL for native iOS.\n+     *\n+     * The web view may be handling several different types of URLs:\n+     *   - res:// (shortcut scheme to web assets)\n+     *   - file:// (fully qualified URL to file on the local device)\n+     *   - base64:// (to be implemented)\n+     *   - [web view scheme]:// (already converted once to load in the web view, to be implemented)\n+     */\n+    public func localURL(fromWebURL webURL: URL?) -> URL? {\n+        guard let inputURL = webURL else {\n+            return nil\n+        }\n+\n+        let manager = FileManager.default\n+        let url: URL\n+\n+        switch inputURL.scheme {\n+        case \"res\":\n+            let bundle = Bundle.main\n+            let resourcePath = bundle.resourcePath!\n+            url = URL(fileURLWithPath: resourcePath + \"/public\" + inputURL.path)\n+        case \"file\":\n+            url = inputURL\n+        default:\n+            return nil\n+        }\n+\n+        guard manager.fileExists(atPath: url.absoluteString.replacingOccurrences(of: \"file://\", with: \"\")) else {\n+            return nil\n+        }\n+\n+        return url\n+    }\n+\n+    /**\n+     * Translate a file URL for native iOS into a URL to load in the web view.\n+     */\n+    public func portablePath(fromLocalURL localURL: URL?) -> String? {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2MDYyMg=="}, "originalCommit": {"oid": "b21029f0cb914a67f682b1796f385d186482fd99"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjM5NjM3OnYy", "diffSide": "RIGHT", "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzozNzowOVrOH5N40w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzozNzowOVrOH5N40w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1ODQxOQ==", "bodyText": "URL's path manipulation methods are more robust than string modifications. Also, force-unwraps are bad.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        let bundle = Bundle.main\n          \n          \n            \n                        let resourcePath = bundle.resourcePath!\n          \n          \n            \n                        url = URL(fileURLWithPath: resourcePath + \"/public\" + inputURL.path)\n          \n          \n            \n                        guard let resourcePath = Bundle.main.resourcePath else {\n          \n          \n            \n                            return nil\n          \n          \n            \n                        }\n          \n          \n            \n                        url = URL(fileURLWithPath: resourcePath).appendingPathComponent(\"public\").appendingPathComponent(inputURL.path)", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r529758419", "createdAt": "2020-11-24T17:37:09Z", "author": {"login": "ikeith"}, "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "diffHunk": "@@ -537,6 +537,60 @@ internal class CapacitorBridge: NSObject, CAPBridgeProtocol {\n         }\n     }\n \n+    // MARK: - CAPBridgeProtocol: Paths, Files, Assets\n+\n+    /**\n+     * Translate a URL from the web view into a file URL for native iOS.\n+     *\n+     * The web view may be handling several different types of URLs:\n+     *   - res:// (shortcut scheme to web assets)\n+     *   - file:// (fully qualified URL to file on the local device)\n+     *   - base64:// (to be implemented)\n+     *   - [web view scheme]:// (already converted once to load in the web view, to be implemented)\n+     */\n+    public func localURL(fromWebURL webURL: URL?) -> URL? {\n+        guard let inputURL = webURL else {\n+            return nil\n+        }\n+\n+        let manager = FileManager.default\n+        let url: URL\n+\n+        switch inputURL.scheme {\n+        case \"res\":\n+            let bundle = Bundle.main\n+            let resourcePath = bundle.resourcePath!\n+            url = URL(fileURLWithPath: resourcePath + \"/public\" + inputURL.path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b21029f0cb914a67f682b1796f385d186482fd99"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjQyNjEwOnYy", "diffSide": "RIGHT", "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzo0NDoyNFrOH5OKyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzo0NDoyNFrOH5OKyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2MzAxOA==", "bodyText": "Same reasoning.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    guard let inputURL = localURL else {\n          \n          \n            \n                        return nil\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    guard let portableSchemeAndHost = self.localUrl else {\n          \n          \n            \n                        return nil\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    let url = URL(string: portableSchemeAndHost + CapacitorBridge.fileStartIdentifier + inputURL.path)\n          \n          \n            \n            \n          \n          \n            \n                    return url?.absoluteString\n          \n          \n            \n                    guard let inputURL = localURL else {\n          \n          \n            \n                        return nil\n          \n          \n            \n                    }\n          \n          \n            \n                    guard let urlString = self.localUrl, let portableURL = URL(string: urlString) else {\n          \n          \n            \n                        return nil\n          \n          \n            \n                    }\n          \n          \n            \n                    return portableURL.appendingPathComponent(CapacitorBridge.fileStartIdentifier).appendingPathComponent(inputURL.path).absoluteString", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r529763018", "createdAt": "2020-11-24T17:44:24Z", "author": {"login": "ikeith"}, "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "diffHunk": "@@ -537,6 +537,60 @@ internal class CapacitorBridge: NSObject, CAPBridgeProtocol {\n         }\n     }\n \n+    // MARK: - CAPBridgeProtocol: Paths, Files, Assets\n+\n+    /**\n+     * Translate a URL from the web view into a file URL for native iOS.\n+     *\n+     * The web view may be handling several different types of URLs:\n+     *   - res:// (shortcut scheme to web assets)\n+     *   - file:// (fully qualified URL to file on the local device)\n+     *   - base64:// (to be implemented)\n+     *   - [web view scheme]:// (already converted once to load in the web view, to be implemented)\n+     */\n+    public func localURL(fromWebURL webURL: URL?) -> URL? {\n+        guard let inputURL = webURL else {\n+            return nil\n+        }\n+\n+        let manager = FileManager.default\n+        let url: URL\n+\n+        switch inputURL.scheme {\n+        case \"res\":\n+            let bundle = Bundle.main\n+            let resourcePath = bundle.resourcePath!\n+            url = URL(fileURLWithPath: resourcePath + \"/public\" + inputURL.path)\n+        case \"file\":\n+            url = inputURL\n+        default:\n+            return nil\n+        }\n+\n+        guard manager.fileExists(atPath: url.absoluteString.replacingOccurrences(of: \"file://\", with: \"\")) else {\n+            return nil\n+        }\n+\n+        return url\n+    }\n+\n+    /**\n+     * Translate a file URL for native iOS into a URL to load in the web view.\n+     */\n+    public func portablePath(fromLocalURL localURL: URL?) -> String? {\n+        guard let inputURL = localURL else {\n+            return nil\n+        }\n+\n+        guard let portableSchemeAndHost = self.localUrl else {\n+            return nil\n+        }\n+\n+        let url = URL(string: portableSchemeAndHost + CapacitorBridge.fileStartIdentifier + inputURL.path)\n+\n+        return url?.absoluteString", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b21029f0cb914a67f682b1796f385d186482fd99"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzg3NjI4OnYy", "diffSide": "RIGHT", "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTo0OToxOVrOH6BzLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTo0OToxOVrOH6BzLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwODk0MQ==", "bodyText": "To support the embedded case, this should use the configuration's web app location instead of the native app bundle/public path.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        guard let resourcePath = Bundle.main.resourcePath else {\n          \n          \n            \n                            return nil\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        url = URL(fileURLWithPath: resourcePath).appendingPathComponent(\"public\").appendingPathComponent(inputURL.path)\n          \n          \n            \n                        url = config.appLocation.appendingPathComponent(inputURL.path)", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r530608941", "createdAt": "2020-11-25T19:49:19Z", "author": {"login": "ikeith"}, "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "diffHunk": "@@ -533,6 +533,51 @@ internal class CapacitorBridge: NSObject, CAPBridgeProtocol {\n         }\n     }\n \n+    // MARK: - CAPBridgeProtocol: Paths, Files, Assets\n+\n+    /**\n+     * Translate a URL from the web view into a file URL for native iOS.\n+     *\n+     * The web view may be handling several different types of URLs:\n+     *   - res:// (shortcut scheme to web assets)\n+     *   - file:// (fully qualified URL to file on the local device)\n+     *   - base64:// (to be implemented)\n+     *   - [web view scheme]:// (already converted once to load in the web view, to be implemented)\n+     */\n+    public func localURL(fromWebURL webURL: URL?) -> URL? {\n+        guard let inputURL = webURL else {\n+            return nil\n+        }\n+\n+        let url: URL\n+\n+        switch inputURL.scheme {\n+        case \"res\":\n+            guard let resourcePath = Bundle.main.resourcePath else {\n+                return nil\n+            }\n+\n+            url = URL(fileURLWithPath: resourcePath).appendingPathComponent(\"public\").appendingPathComponent(inputURL.path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cccf378bfd2b918200beaaf925e0f3e0166beca"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3477, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}