{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNDM4NDM5", "number": 3748, "title": "refactor(core): merge native-bridge.js into core runtime", "bodyText": "Porting runtime-bridge to typescript and breaking it out\nCurrently adding more tests\nPublic api should be identical\nWill minify a lot smaller\nAbility to lazy load the platform implementation it'll actually use\nWill add more tests for v2 plugin api with the goal there will be no breaking changes for the JS API\nCapacitor interface is the public api, and CapacitorInstance is the internal one which also includes the methods the native layer calls.\nBetter handle SSR environments", "createdAt": "2020-10-29T17:23:08Z", "url": "https://github.com/ionic-team/capacitor/pull/3748", "merged": true, "mergeCommit": {"oid": "32206bfc7ec450345270b7b69a377653f544088a"}, "closed": true, "closedAt": "2020-11-24T19:04:49Z", "author": {"login": "adamdbradley"}, "timelineItems": {"totalCount": 65, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXU2AXgH2gAyNTEyNDM4NDM5OjQxZTJkMGIzNTg0YzYwMGY3OGU3MDg2NWNmNjQ5Mzg4ZTIyZTQzYWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfuBN5gH2gAyNTEyNDM4NDM5OmZiYzRiYzQ2ODJhZDMzMDYxY2U3ZWIzYzg0ZGJmNmU5YzE5MDYzZmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "41e2d0b3584c600f78e70865cf649388e22e43aa", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/41e2d0b3584c600f78e70865cf649388e22e43aa", "committedDate": "2020-10-29T16:34:35Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6582e0f618367ba878f35df990c1adc27e8b16d", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/d6582e0f618367ba878f35df990c1adc27e8b16d", "committedDate": "2020-10-29T16:39:44Z", "message": "\ud83c\udf35"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3f195fe96f7d91a3224f968ab00e849d555e671", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/c3f195fe96f7d91a3224f968ab00e849d555e671", "committedDate": "2020-10-29T17:10:48Z", "message": "\u2668\ufe0f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3eb713c67fe70120b9275e5f43286cebd13d3a5", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/d3eb713c67fe70120b9275e5f43286cebd13d3a5", "committedDate": "2020-10-29T17:22:19Z", "message": "\ud83d\ude82"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8339010e21b77bf105060e728e95a5e6a11db705", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/8339010e21b77bf105060e728e95a5e6a11db705", "committedDate": "2020-10-29T18:05:14Z", "message": "\ud83c\udfcf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b218738dae3618bd878a628ce0af337922979541", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/b218738dae3618bd878a628ce0af337922979541", "committedDate": "2020-10-29T18:32:13Z", "message": "\ud83d\udc2d"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5OTU4Mzgx", "url": "https://github.com/ionic-team/capacitor/pull/3748#pullrequestreview-519958381", "createdAt": "2020-10-29T18:27:27Z", "commit": {"oid": "8339010e21b77bf105060e728e95a5e6a11db705"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxODoyNzoyN1rOHqpMFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOTowMzoxMFrOHqqgYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3NzA3Nw==", "bodyText": "Now there's a magic number if ever I saw one!\nFor the sake of others who may have to maintain this code in the future, any chance you could put that number in a named constant and document how you came up with it?", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514477077", "createdAt": "2020-10-29T18:27:27Z", "author": {"login": "aparajita"}, "path": "core/src/bridge.ts", "diffHunk": "@@ -0,0 +1,184 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+  PluginResult,\n+  StoredCallback,\n+} from './definitions';\n+import { initLogger } from './logger';\n+\n+export const initBridge = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+): void => {\n+  // keep a collection of callbacks for native response data\n+  const callbacks = new Map<string, StoredCallback>();\n+\n+  // Counter of callback ids, randomized to avoid\n+  // any issues during reloads if a call comes back with\n+  // an existing callback id from an old session\n+  let callbackIdCount = Math.floor(Math.random() * 134217728);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339010e21b77bf105060e728e95a5e6a11db705"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3ODY2Nw==", "bodyText": "JSON.stringify can throw TypeError, be sure to catch it.", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514478667", "createdAt": "2020-10-29T18:29:58Z", "author": {"login": "aparajita"}, "path": "core/src/bridge.ts", "diffHunk": "@@ -0,0 +1,184 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+  PluginResult,\n+  StoredCallback,\n+} from './definitions';\n+import { initLogger } from './logger';\n+\n+export const initBridge = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+): void => {\n+  // keep a collection of callbacks for native response data\n+  const callbacks = new Map<string, StoredCallback>();\n+\n+  // Counter of callback ids, randomized to avoid\n+  // any issues during reloads if a call comes back with\n+  // an existing callback id from an old session\n+  let callbackIdCount = Math.floor(Math.random() * 134217728);\n+\n+  let postToNative: (data: CallData) => void | null = null;\n+\n+  // create the postToNative() fn if needed\n+  if (gbl.androidBridge) {\n+    // android platform\n+    postToNative = (data: any) => {\n+      gbl.androidBridge.postMessage(JSON.stringify(data));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339010e21b77bf105060e728e95a5e6a11db705"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4MDMzNQ==", "bodyText": "logToNative is declared as an optional function, so it can't be any other type. Using optional chaining is simpler, cleaner, and faster at runtime:\n        if (instance.DEBUG && pluginId !== 'Console') {\n          instance.logToNative?.(callData);\n        }", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514480335", "createdAt": "2020-10-29T18:32:41Z", "author": {"login": "aparajita"}, "path": "core/src/bridge.ts", "diffHunk": "@@ -0,0 +1,184 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+  PluginResult,\n+  StoredCallback,\n+} from './definitions';\n+import { initLogger } from './logger';\n+\n+export const initBridge = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+): void => {\n+  // keep a collection of callbacks for native response data\n+  const callbacks = new Map<string, StoredCallback>();\n+\n+  // Counter of callback ids, randomized to avoid\n+  // any issues during reloads if a call comes back with\n+  // an existing callback id from an old session\n+  let callbackIdCount = Math.floor(Math.random() * 134217728);\n+\n+  let postToNative: (data: CallData) => void | null = null;\n+\n+  // create the postToNative() fn if needed\n+  if (gbl.androidBridge) {\n+    // android platform\n+    postToNative = (data: any) => {\n+      gbl.androidBridge.postMessage(JSON.stringify(data));\n+    };\n+    state.isNative = true;\n+    state.platform = 'android';\n+  } else if (\n+    gbl.webkit &&\n+    gbl.webkit.messageHandlers &&\n+    gbl.webkit.messageHandlers.bridge\n+  ) {\n+    // ios platform\n+    postToNative = (data: any) => {\n+      data.type = 'message';\n+      gbl.webkit.messageHandlers.bridge.postMessage(data);\n+    };\n+    state.isNative = true;\n+    state.platform = 'ios';\n+  }\n+\n+  const logger = initLogger(gbl, instance, state, postToNative);\n+\n+  /**\n+   * Send a plugin method call to the native layer\n+   */\n+  instance.toNative = (\n+    pluginId: string,\n+    methodName: string,\n+    options: any,\n+    storedCallback: StoredCallback,\n+  ) => {\n+    try {\n+      if (typeof postToNative === 'function') {\n+        let callbackId = '-1';\n+\n+        if (\n+          storedCallback &&\n+          (typeof storedCallback.callback === 'function' ||\n+            typeof storedCallback.resolve === 'function')\n+        ) {\n+          // store the call for later lookup\n+          callbackId = String(++callbackIdCount);\n+          callbacks.set(callbackId, storedCallback);\n+        }\n+\n+        const callData: CallData = {\n+          callbackId: callbackId,\n+          pluginId: pluginId,\n+          methodName: methodName,\n+          options: options || {},\n+        };\n+\n+        if (\n+          instance.DEBUG &&\n+          pluginId !== 'Console' &&\n+          typeof instance.logToNative === 'function'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339010e21b77bf105060e728e95a5e6a11db705"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4MTkwOQ==", "bodyText": "Since this is TypeScript, it would be nicer to use an enum for the level instead of a raw string. Or even better, create logger.warn, logger.error functions that set the level. That is a much more natural (and familiar) syntax.", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514481909", "createdAt": "2020-10-29T18:35:11Z", "author": {"login": "aparajita"}, "path": "core/src/bridge.ts", "diffHunk": "@@ -0,0 +1,184 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+  PluginResult,\n+  StoredCallback,\n+} from './definitions';\n+import { initLogger } from './logger';\n+\n+export const initBridge = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+): void => {\n+  // keep a collection of callbacks for native response data\n+  const callbacks = new Map<string, StoredCallback>();\n+\n+  // Counter of callback ids, randomized to avoid\n+  // any issues during reloads if a call comes back with\n+  // an existing callback id from an old session\n+  let callbackIdCount = Math.floor(Math.random() * 134217728);\n+\n+  let postToNative: (data: CallData) => void | null = null;\n+\n+  // create the postToNative() fn if needed\n+  if (gbl.androidBridge) {\n+    // android platform\n+    postToNative = (data: any) => {\n+      gbl.androidBridge.postMessage(JSON.stringify(data));\n+    };\n+    state.isNative = true;\n+    state.platform = 'android';\n+  } else if (\n+    gbl.webkit &&\n+    gbl.webkit.messageHandlers &&\n+    gbl.webkit.messageHandlers.bridge\n+  ) {\n+    // ios platform\n+    postToNative = (data: any) => {\n+      data.type = 'message';\n+      gbl.webkit.messageHandlers.bridge.postMessage(data);\n+    };\n+    state.isNative = true;\n+    state.platform = 'ios';\n+  }\n+\n+  const logger = initLogger(gbl, instance, state, postToNative);\n+\n+  /**\n+   * Send a plugin method call to the native layer\n+   */\n+  instance.toNative = (\n+    pluginId: string,\n+    methodName: string,\n+    options: any,\n+    storedCallback: StoredCallback,\n+  ) => {\n+    try {\n+      if (typeof postToNative === 'function') {\n+        let callbackId = '-1';\n+\n+        if (\n+          storedCallback &&\n+          (typeof storedCallback.callback === 'function' ||\n+            typeof storedCallback.resolve === 'function')\n+        ) {\n+          // store the call for later lookup\n+          callbackId = String(++callbackIdCount);\n+          callbacks.set(callbackId, storedCallback);\n+        }\n+\n+        const callData: CallData = {\n+          callbackId: callbackId,\n+          pluginId: pluginId,\n+          methodName: methodName,\n+          options: options || {},\n+        };\n+\n+        if (\n+          instance.DEBUG &&\n+          pluginId !== 'Console' &&\n+          typeof instance.logToNative === 'function'\n+        ) {\n+          instance.logToNative(callData);\n+        }\n+\n+        // post the call data to native\n+        postToNative(callData);\n+\n+        return callbackId;\n+      } else {\n+        logger('warn', `implementation unavailable for: ${pluginId}`);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339010e21b77bf105060e728e95a5e6a11db705"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4OTQ4Ng==", "bodyText": "logFromNative is declared as an optional function, so it can't be any other type. Using optional chaining is simpler, cleaner, and faster at runtime:\n        if (instance.DEBUG && result.pluginId !== 'Console') {\n          instance.logFromNative?.(result);\n        }", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514489486", "createdAt": "2020-10-29T18:48:57Z", "author": {"login": "aparajita"}, "path": "core/src/bridge.ts", "diffHunk": "@@ -0,0 +1,184 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+  PluginResult,\n+  StoredCallback,\n+} from './definitions';\n+import { initLogger } from './logger';\n+\n+export const initBridge = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+): void => {\n+  // keep a collection of callbacks for native response data\n+  const callbacks = new Map<string, StoredCallback>();\n+\n+  // Counter of callback ids, randomized to avoid\n+  // any issues during reloads if a call comes back with\n+  // an existing callback id from an old session\n+  let callbackIdCount = Math.floor(Math.random() * 134217728);\n+\n+  let postToNative: (data: CallData) => void | null = null;\n+\n+  // create the postToNative() fn if needed\n+  if (gbl.androidBridge) {\n+    // android platform\n+    postToNative = (data: any) => {\n+      gbl.androidBridge.postMessage(JSON.stringify(data));\n+    };\n+    state.isNative = true;\n+    state.platform = 'android';\n+  } else if (\n+    gbl.webkit &&\n+    gbl.webkit.messageHandlers &&\n+    gbl.webkit.messageHandlers.bridge\n+  ) {\n+    // ios platform\n+    postToNative = (data: any) => {\n+      data.type = 'message';\n+      gbl.webkit.messageHandlers.bridge.postMessage(data);\n+    };\n+    state.isNative = true;\n+    state.platform = 'ios';\n+  }\n+\n+  const logger = initLogger(gbl, instance, state, postToNative);\n+\n+  /**\n+   * Send a plugin method call to the native layer\n+   */\n+  instance.toNative = (\n+    pluginId: string,\n+    methodName: string,\n+    options: any,\n+    storedCallback: StoredCallback,\n+  ) => {\n+    try {\n+      if (typeof postToNative === 'function') {\n+        let callbackId = '-1';\n+\n+        if (\n+          storedCallback &&\n+          (typeof storedCallback.callback === 'function' ||\n+            typeof storedCallback.resolve === 'function')\n+        ) {\n+          // store the call for later lookup\n+          callbackId = String(++callbackIdCount);\n+          callbacks.set(callbackId, storedCallback);\n+        }\n+\n+        const callData: CallData = {\n+          callbackId: callbackId,\n+          pluginId: pluginId,\n+          methodName: methodName,\n+          options: options || {},\n+        };\n+\n+        if (\n+          instance.DEBUG &&\n+          pluginId !== 'Console' &&\n+          typeof instance.logToNative === 'function'\n+        ) {\n+          instance.logToNative(callData);\n+        }\n+\n+        // post the call data to native\n+        postToNative(callData);\n+\n+        return callbackId;\n+      } else {\n+        logger('warn', `implementation unavailable for: ${pluginId}`);\n+      }\n+    } catch (e) {\n+      logger('error', e);\n+    }\n+\n+    return null;\n+  };\n+\n+  /**\n+   * Process a response from the native layer.\n+   */\n+  instance.fromNative = (result: PluginResult) => {\n+    if (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339010e21b77bf105060e728e95a5e6a11db705"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MDkyMg==", "bodyText": "I'm assuming storedCall.callback is typed as an optional function, so this would suffice:\nif (storedCall.callback) {", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514490922", "createdAt": "2020-10-29T18:51:25Z", "author": {"login": "aparajita"}, "path": "core/src/bridge.ts", "diffHunk": "@@ -0,0 +1,184 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+  PluginResult,\n+  StoredCallback,\n+} from './definitions';\n+import { initLogger } from './logger';\n+\n+export const initBridge = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+): void => {\n+  // keep a collection of callbacks for native response data\n+  const callbacks = new Map<string, StoredCallback>();\n+\n+  // Counter of callback ids, randomized to avoid\n+  // any issues during reloads if a call comes back with\n+  // an existing callback id from an old session\n+  let callbackIdCount = Math.floor(Math.random() * 134217728);\n+\n+  let postToNative: (data: CallData) => void | null = null;\n+\n+  // create the postToNative() fn if needed\n+  if (gbl.androidBridge) {\n+    // android platform\n+    postToNative = (data: any) => {\n+      gbl.androidBridge.postMessage(JSON.stringify(data));\n+    };\n+    state.isNative = true;\n+    state.platform = 'android';\n+  } else if (\n+    gbl.webkit &&\n+    gbl.webkit.messageHandlers &&\n+    gbl.webkit.messageHandlers.bridge\n+  ) {\n+    // ios platform\n+    postToNative = (data: any) => {\n+      data.type = 'message';\n+      gbl.webkit.messageHandlers.bridge.postMessage(data);\n+    };\n+    state.isNative = true;\n+    state.platform = 'ios';\n+  }\n+\n+  const logger = initLogger(gbl, instance, state, postToNative);\n+\n+  /**\n+   * Send a plugin method call to the native layer\n+   */\n+  instance.toNative = (\n+    pluginId: string,\n+    methodName: string,\n+    options: any,\n+    storedCallback: StoredCallback,\n+  ) => {\n+    try {\n+      if (typeof postToNative === 'function') {\n+        let callbackId = '-1';\n+\n+        if (\n+          storedCallback &&\n+          (typeof storedCallback.callback === 'function' ||\n+            typeof storedCallback.resolve === 'function')\n+        ) {\n+          // store the call for later lookup\n+          callbackId = String(++callbackIdCount);\n+          callbacks.set(callbackId, storedCallback);\n+        }\n+\n+        const callData: CallData = {\n+          callbackId: callbackId,\n+          pluginId: pluginId,\n+          methodName: methodName,\n+          options: options || {},\n+        };\n+\n+        if (\n+          instance.DEBUG &&\n+          pluginId !== 'Console' &&\n+          typeof instance.logToNative === 'function'\n+        ) {\n+          instance.logToNative(callData);\n+        }\n+\n+        // post the call data to native\n+        postToNative(callData);\n+\n+        return callbackId;\n+      } else {\n+        logger('warn', `implementation unavailable for: ${pluginId}`);\n+      }\n+    } catch (e) {\n+      logger('error', e);\n+    }\n+\n+    return null;\n+  };\n+\n+  /**\n+   * Process a response from the native layer.\n+   */\n+  instance.fromNative = (result: PluginResult) => {\n+    if (\n+      instance.DEBUG &&\n+      result.pluginId !== 'Console' &&\n+      typeof instance.logFromNative === 'function'\n+    ) {\n+      instance.logFromNative(result);\n+    }\n+\n+    // get the stored call, if it exists\n+    try {\n+      const storedCall = callbacks.get(result.callbackId);\n+\n+      if (storedCall) {\n+        // looks like we've got a stored call\n+\n+        if (result.error) {\n+          // ensure stacktraces by copying error properties to an Error\n+          result.error = Object.keys(result.error).reduce((err, key) => {\n+            err[key] = (result.error as any)[key];\n+            return err;\n+          }, new instance.Exception('') as any);\n+        }\n+\n+        if (typeof storedCall.callback === 'function') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339010e21b77bf105060e728e95a5e6a11db705"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MTA4MA==", "bodyText": "Same here as above.", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514491080", "createdAt": "2020-10-29T18:51:41Z", "author": {"login": "aparajita"}, "path": "core/src/bridge.ts", "diffHunk": "@@ -0,0 +1,184 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+  PluginResult,\n+  StoredCallback,\n+} from './definitions';\n+import { initLogger } from './logger';\n+\n+export const initBridge = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+): void => {\n+  // keep a collection of callbacks for native response data\n+  const callbacks = new Map<string, StoredCallback>();\n+\n+  // Counter of callback ids, randomized to avoid\n+  // any issues during reloads if a call comes back with\n+  // an existing callback id from an old session\n+  let callbackIdCount = Math.floor(Math.random() * 134217728);\n+\n+  let postToNative: (data: CallData) => void | null = null;\n+\n+  // create the postToNative() fn if needed\n+  if (gbl.androidBridge) {\n+    // android platform\n+    postToNative = (data: any) => {\n+      gbl.androidBridge.postMessage(JSON.stringify(data));\n+    };\n+    state.isNative = true;\n+    state.platform = 'android';\n+  } else if (\n+    gbl.webkit &&\n+    gbl.webkit.messageHandlers &&\n+    gbl.webkit.messageHandlers.bridge\n+  ) {\n+    // ios platform\n+    postToNative = (data: any) => {\n+      data.type = 'message';\n+      gbl.webkit.messageHandlers.bridge.postMessage(data);\n+    };\n+    state.isNative = true;\n+    state.platform = 'ios';\n+  }\n+\n+  const logger = initLogger(gbl, instance, state, postToNative);\n+\n+  /**\n+   * Send a plugin method call to the native layer\n+   */\n+  instance.toNative = (\n+    pluginId: string,\n+    methodName: string,\n+    options: any,\n+    storedCallback: StoredCallback,\n+  ) => {\n+    try {\n+      if (typeof postToNative === 'function') {\n+        let callbackId = '-1';\n+\n+        if (\n+          storedCallback &&\n+          (typeof storedCallback.callback === 'function' ||\n+            typeof storedCallback.resolve === 'function')\n+        ) {\n+          // store the call for later lookup\n+          callbackId = String(++callbackIdCount);\n+          callbacks.set(callbackId, storedCallback);\n+        }\n+\n+        const callData: CallData = {\n+          callbackId: callbackId,\n+          pluginId: pluginId,\n+          methodName: methodName,\n+          options: options || {},\n+        };\n+\n+        if (\n+          instance.DEBUG &&\n+          pluginId !== 'Console' &&\n+          typeof instance.logToNative === 'function'\n+        ) {\n+          instance.logToNative(callData);\n+        }\n+\n+        // post the call data to native\n+        postToNative(callData);\n+\n+        return callbackId;\n+      } else {\n+        logger('warn', `implementation unavailable for: ${pluginId}`);\n+      }\n+    } catch (e) {\n+      logger('error', e);\n+    }\n+\n+    return null;\n+  };\n+\n+  /**\n+   * Process a response from the native layer.\n+   */\n+  instance.fromNative = (result: PluginResult) => {\n+    if (\n+      instance.DEBUG &&\n+      result.pluginId !== 'Console' &&\n+      typeof instance.logFromNative === 'function'\n+    ) {\n+      instance.logFromNative(result);\n+    }\n+\n+    // get the stored call, if it exists\n+    try {\n+      const storedCall = callbacks.get(result.callbackId);\n+\n+      if (storedCall) {\n+        // looks like we've got a stored call\n+\n+        if (result.error) {\n+          // ensure stacktraces by copying error properties to an Error\n+          result.error = Object.keys(result.error).reduce((err, key) => {\n+            err[key] = (result.error as any)[key];\n+            return err;\n+          }, new instance.Exception('') as any);\n+        }\n+\n+        if (typeof storedCall.callback === 'function') {\n+          // callback\n+          if (result.success) {\n+            storedCall.callback(result.data);\n+          } else {\n+            storedCall.callback(null, result.error);\n+          }\n+        } else if (typeof storedCall.resolve === 'function') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339010e21b77bf105060e728e95a5e6a11db705"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MzM3MQ==", "bodyText": "Is this in fact any or is it actually strictly a function or an object? If that is the case it could be typed as such.", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514493371", "createdAt": "2020-10-29T18:55:05Z", "author": {"login": "aparajita"}, "path": "core/src/definitions.ts", "diffHunk": "@@ -101,40 +86,235 @@ declare const CapacitorException: {\n };\n \n export interface Capacitor {\n+  /**\n+   * Utility function to convert a file path into\n+   * a useful src depending on the value and environment.\n+   */\n+  convertFileSrc: (filePath: string) => string;\n+\n+  /**\n+   * The Exception class used when generating plugin Exceptions\n+   * from bridge calls.\n+   */\n   Exception: typeof CapacitorException;\n-  isNative?: boolean;\n-  platform?: string;\n+\n+  /**\n+   * Boolean if the platform is native or not. `android` and `ios`\n+   * would return `true`, otherwise `false`.\n+   */\n+  isNativePlatform: () => boolean;\n+\n+  /**\n+   * Used to check if a platform is registered and available.\n+   */\n   isPluginAvailable: (name: string) => boolean;\n-  convertFileSrc: (filePath: string) => string;\n+\n+  /**\n+   * Gets the name of the platform, such as `android`, `ios`, or `web`.\n+   */\n   getPlatform: () => string;\n-  toNative?: (\n-    pluginId: string,\n-    methodName: string,\n-    options: any,\n-    storedCallback?: StoredCallback,\n-  ) => void;\n-  fromNative?: (result: PluginResult) => void;\n-  withPlugin?: (pluginId: string, fn: (...args: any[]) => any) => void;\n+\n+  /**\n+   * Sends data over the bridge to the native layer.\n+   * Returns the Callback Id.\n+   */\n   nativeCallback?: (\n     pluginId: string,\n     methodName: string,\n     options?: any,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339010e21b77bf105060e728e95a5e6a11db705"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5NTY0Mg==", "bodyText": "What does \"Advance\" mean here?", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514495642", "createdAt": "2020-10-29T18:58:11Z", "author": {"login": "aparajita"}, "path": "core/src/logger.ts", "diffHunk": "@@ -0,0 +1,196 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+} from './definitions';\n+\n+export const initLogger = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+  postToNative: (data: any) => void | null,\n+) => {\n+  // patch window.console on iOS and store original console fns\n+  const isIos = state.platform === 'ios';\n+  const orgConsole = (isIos ? {} : gbl.console) as any;\n+\n+  const useFallbackLogging =\n+    !!gbl.console && Object.keys(gbl.console).length === 0;\n+  if (useFallbackLogging && gbl.console) {\n+    gbl.console.warn('Advance console logging disabled.');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339010e21b77bf105060e728e95a5e6a11db705"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5ODM1Mg==", "bodyText": "Shouldn't this logging only be done if instance.DEBUG? There's a few reasons why:\n\n\nWe really don't want to see this info most of the time. If we are doing our own logging, the spam from native calls obscures our own logs.\n\n\nThere is a very real cost at runtime. You have to go through the JS<->Native bridge code, then the bridge has to parse the call and execute a dynamic dispatch.", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514498352", "createdAt": "2020-10-29T19:02:36Z", "author": {"login": "aparajita"}, "path": "core/src/logger.ts", "diffHunk": "@@ -0,0 +1,196 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+} from './definitions';\n+\n+export const initLogger = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+  postToNative: (data: any) => void | null,\n+) => {\n+  // patch window.console on iOS and store original console fns\n+  const isIos = state.platform === 'ios';\n+  const orgConsole = (isIos ? {} : gbl.console) as any;\n+\n+  const useFallbackLogging =\n+    !!gbl.console && Object.keys(gbl.console).length === 0;\n+  if (useFallbackLogging && gbl.console) {\n+    gbl.console.warn('Advance console logging disabled.');\n+  }\n+\n+  // list log functions bridged to native log\n+  const bridgedLevels: { [key: string]: boolean } = {\n+    debug: true,\n+    error: true,\n+    info: true,\n+    log: true,\n+    trace: true,\n+    warn: true,\n+  };\n+\n+  if (isIos && gbl.console) {\n+    Object.keys(gbl.console).forEach(level => {\n+      if (typeof gbl.console[level] === 'function') {\n+        // loop through all the console functions and keep references to the original\n+        orgConsole[level] = gbl.console[level];\n+        gbl.console[level] = function capacitorConsole() {\n+          let msgs: any[] = Array.prototype.slice.call(arguments);\n+\n+          // console log to browser\n+          orgConsole[level].apply(gbl.console, msgs);\n+\n+          if (bridgedLevels[level]) {\n+            // send log to native to print\n+            try {\n+              // convert all args to strings\n+              msgs = msgs.map(arg => {\n+                if (typeof arg === 'object') {\n+                  try {\n+                    arg = JSON.stringify(arg);\n+                  } catch (e) {}\n+                }\n+                // convert to string\n+                return String(arg);\n+              });\n+              instance.toNative('Console', 'log', {\n+                level: level,\n+                message: msgs.join(' '),\n+              });\n+            } catch (e) {\n+              // error converting/posting console messages\n+              orgConsole.error.apply(gbl.console, e);\n+            }\n+          }\n+        };\n+      }\n+    });\n+  }\n+\n+  instance.logJs = (message, level) => {\n+    switch (level) {\n+      case 'error':\n+        gbl.console.error(message);\n+        break;\n+      case 'warn':\n+        gbl.console.warn(message);\n+        break;\n+      case 'info':\n+        gbl.console.info(message);\n+        break;\n+      default:\n+        gbl.console.log(message);\n+    }\n+  };\n+\n+  instance.handleError = (e: Error) => gbl.console.error(e);\n+\n+  instance.handleWindowError = (msg, url, lineNo, columnNo, error) => {\n+    const str = msg.toLowerCase();\n+    const substring = 'script error';\n+\n+    if (str.indexOf(substring) > -1) {\n+      // Some IE issue?\n+    } else {\n+      const errObj = {\n+        type: 'js.error',\n+        error: {\n+          message: msg,\n+          url: url,\n+          line: lineNo,\n+          col: columnNo,\n+          errorObject: JSON.stringify(error),\n+        },\n+      };\n+\n+      if (error !== null) {\n+        instance.handleError(error);\n+      }\n+\n+      if (postToNative) {\n+        postToNative(errObj);\n+      }\n+    }\n+\n+    return false;\n+  };\n+\n+  if (instance.DEBUG) {\n+    window.onerror = instance.handleWindowError;\n+  }\n+\n+  instance.logToNative = (call: CallData) => {\n+    if (!useFallbackLogging) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339010e21b77bf105060e728e95a5e6a11db705"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5ODY1Ng==", "bodyText": "Same comments here as for logToNative.", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514498656", "createdAt": "2020-10-29T19:03:10Z", "author": {"login": "aparajita"}, "path": "core/src/logger.ts", "diffHunk": "@@ -0,0 +1,196 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+} from './definitions';\n+\n+export const initLogger = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+  postToNative: (data: any) => void | null,\n+) => {\n+  // patch window.console on iOS and store original console fns\n+  const isIos = state.platform === 'ios';\n+  const orgConsole = (isIos ? {} : gbl.console) as any;\n+\n+  const useFallbackLogging =\n+    !!gbl.console && Object.keys(gbl.console).length === 0;\n+  if (useFallbackLogging && gbl.console) {\n+    gbl.console.warn('Advance console logging disabled.');\n+  }\n+\n+  // list log functions bridged to native log\n+  const bridgedLevels: { [key: string]: boolean } = {\n+    debug: true,\n+    error: true,\n+    info: true,\n+    log: true,\n+    trace: true,\n+    warn: true,\n+  };\n+\n+  if (isIos && gbl.console) {\n+    Object.keys(gbl.console).forEach(level => {\n+      if (typeof gbl.console[level] === 'function') {\n+        // loop through all the console functions and keep references to the original\n+        orgConsole[level] = gbl.console[level];\n+        gbl.console[level] = function capacitorConsole() {\n+          let msgs: any[] = Array.prototype.slice.call(arguments);\n+\n+          // console log to browser\n+          orgConsole[level].apply(gbl.console, msgs);\n+\n+          if (bridgedLevels[level]) {\n+            // send log to native to print\n+            try {\n+              // convert all args to strings\n+              msgs = msgs.map(arg => {\n+                if (typeof arg === 'object') {\n+                  try {\n+                    arg = JSON.stringify(arg);\n+                  } catch (e) {}\n+                }\n+                // convert to string\n+                return String(arg);\n+              });\n+              instance.toNative('Console', 'log', {\n+                level: level,\n+                message: msgs.join(' '),\n+              });\n+            } catch (e) {\n+              // error converting/posting console messages\n+              orgConsole.error.apply(gbl.console, e);\n+            }\n+          }\n+        };\n+      }\n+    });\n+  }\n+\n+  instance.logJs = (message, level) => {\n+    switch (level) {\n+      case 'error':\n+        gbl.console.error(message);\n+        break;\n+      case 'warn':\n+        gbl.console.warn(message);\n+        break;\n+      case 'info':\n+        gbl.console.info(message);\n+        break;\n+      default:\n+        gbl.console.log(message);\n+    }\n+  };\n+\n+  instance.handleError = (e: Error) => gbl.console.error(e);\n+\n+  instance.handleWindowError = (msg, url, lineNo, columnNo, error) => {\n+    const str = msg.toLowerCase();\n+    const substring = 'script error';\n+\n+    if (str.indexOf(substring) > -1) {\n+      // Some IE issue?\n+    } else {\n+      const errObj = {\n+        type: 'js.error',\n+        error: {\n+          message: msg,\n+          url: url,\n+          line: lineNo,\n+          col: columnNo,\n+          errorObject: JSON.stringify(error),\n+        },\n+      };\n+\n+      if (error !== null) {\n+        instance.handleError(error);\n+      }\n+\n+      if (postToNative) {\n+        postToNative(errObj);\n+      }\n+    }\n+\n+    return false;\n+  };\n+\n+  if (instance.DEBUG) {\n+    window.onerror = instance.handleWindowError;\n+  }\n+\n+  instance.logToNative = (call: CallData) => {\n+    if (!useFallbackLogging) {\n+      orgConsole.groupCollapsed(\n+        '%cnative %c' +\n+          call.pluginId +\n+          '.' +\n+          call.methodName +\n+          ' (#' +\n+          call.callbackId +\n+          ')',\n+        'font-weight: lighter; color: gray',\n+        'font-weight: bold; color: #000',\n+      );\n+      orgConsole.dir(call);\n+      orgConsole.groupEnd();\n+    } else {\n+      gbl.console.log('LOG TO NATIVE: ', call);\n+      if (state.platform === 'ios') {\n+        try {\n+          instance.toNative('Console', 'log', {\n+            message: JSON.stringify(call),\n+          });\n+        } catch (e) {\n+          gbl.console.log('Error converting/posting console messages');\n+        }\n+      }\n+    }\n+  };\n+\n+  instance.logFromNative = result => {\n+    if (!useFallbackLogging) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339010e21b77bf105060e728e95a5e6a11db705"}, "originalPosition": 154}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61512b0c2fa97ac4a45506a056cab5b5eb0fcd59", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/61512b0c2fa97ac4a45506a056cab5b5eb0fcd59", "committedDate": "2020-10-30T15:29:27Z", "message": "\ud83d\udc3a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8122cb63e4f164dfa4644753182fbaa8364acf8", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/e8122cb63e4f164dfa4644753182fbaa8364acf8", "committedDate": "2020-10-30T16:07:29Z", "message": "\ud83c\udf7f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f27bce3eed03d0ec1dfccc3c72a3a923cc322f24", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/f27bce3eed03d0ec1dfccc3c72a3a923cc322f24", "committedDate": "2020-10-30T16:31:26Z", "message": "\ud83d\ude96"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7f0807e70e99c08fa2efeb180ec27845f345bf6", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/f7f0807e70e99c08fa2efeb180ec27845f345bf6", "committedDate": "2020-10-30T17:05:08Z", "message": "\ud83c\udf7b"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bca7bc27b635cfc2f77867f124ec0615ca8c933a", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/bca7bc27b635cfc2f77867f124ec0615ca8c933a", "committedDate": "2020-10-30T18:29:59Z", "message": "\u26f7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb1687c5bc96c5d7c4da1446f30b069ad03a9833", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/fb1687c5bc96c5d7c4da1446f30b069ad03a9833", "committedDate": "2020-10-30T18:44:04Z", "message": "\ud83c\udf5e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bada0f9f8296fae81ee221a9e83c1ffefa54423c", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/bada0f9f8296fae81ee221a9e83c1ffefa54423c", "committedDate": "2020-10-30T18:49:32Z", "message": "\ud83d\udc0f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9541619493ad3034903a3db274a10e6148196da", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/c9541619493ad3034903a3db274a10e6148196da", "committedDate": "2020-10-30T18:53:50Z", "message": "\ud83d\udd4a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1ffd6295ce9af204ddc015cf976aed40eb762c3", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/a1ffd6295ce9af204ddc015cf976aed40eb762c3", "committedDate": "2020-10-30T19:18:36Z", "message": "\ud83c\udf0d"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9078918ccb542d12267f378926ef33f4e8dc5a17", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/9078918ccb542d12267f378926ef33f4e8dc5a17", "committedDate": "2020-10-30T19:30:05Z", "message": "\ud83d\udc1f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57301e3b82d9351d7d7befd5522e8eddb55dc8e7", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/57301e3b82d9351d7d7befd5522e8eddb55dc8e7", "committedDate": "2020-11-03T20:45:00Z", "message": "\ud83d\ude92"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5166910075fdd737bbcefb8d5d11d2fc593fb4b0", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/5166910075fdd737bbcefb8d5d11d2fc593fb4b0", "committedDate": "2020-11-04T16:12:13Z", "message": "\ud83c\udf68"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f06f8ad57c276ad54742a12383b9fdfcfc182b0b", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/f06f8ad57c276ad54742a12383b9fdfcfc182b0b", "committedDate": "2020-11-04T22:43:14Z", "message": "\ud83c\udf75"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7575d7655fddff18cb3e399c5a6435dee406ffe8", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/7575d7655fddff18cb3e399c5a6435dee406ffe8", "committedDate": "2020-11-04T22:58:51Z", "message": "\ud83c\udfbe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4680588ccb658e2c10e410270fc04af0c79df0f", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/f4680588ccb658e2c10e410270fc04af0c79df0f", "committedDate": "2020-11-04T23:13:28Z", "message": "\ud83c\udf81"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1d78474b4ef05b9307c7c5469554a6abf9d1308", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/b1d78474b4ef05b9307c7c5469554a6abf9d1308", "committedDate": "2020-11-05T04:13:48Z", "message": "\ud83d\udc20"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58ea9ae6c27e40e844c8557608974d279a1e6db5", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/58ea9ae6c27e40e844c8557608974d279a1e6db5", "committedDate": "2020-11-05T04:21:29Z", "message": "Merge branch 'main' into runtime-refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16e1aa518ae231efd36f5cc9901b7d005f30d75a", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/16e1aa518ae231efd36f5cc9901b7d005f30d75a", "committedDate": "2020-11-05T04:21:45Z", "message": "\ud83d\udd2c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43c5e9ea68e7c0ae2af75d4b22c3cbc0ec434258", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/43c5e9ea68e7c0ae2af75d4b22c3cbc0ec434258", "committedDate": "2020-11-05T04:40:37Z", "message": "\ud83d\udc12"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a0db7d02ac3f400a9bd61711c460fd9d2576728", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/1a0db7d02ac3f400a9bd61711c460fd9d2576728", "committedDate": "2020-11-05T16:10:08Z", "message": "\ud83d\udef0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "621758407f35564a278ff636886c4ae112ac422e", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/621758407f35564a278ff636886c4ae112ac422e", "committedDate": "2020-11-05T16:23:12Z", "message": "\ud83d\udca5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c306ef4ca52e132a7ccd8706ca0999b0dcc56606", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/c306ef4ca52e132a7ccd8706ca0999b0dcc56606", "committedDate": "2020-11-05T16:36:30Z", "message": "\ud83c\udf6f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4de1b09c079a715d9964d645faab12034002bc20", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/4de1b09c079a715d9964d645faab12034002bc20", "committedDate": "2020-11-05T19:16:31Z", "message": "\ud83c\udfcf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ba1dbd37fecd6cd47dd717c934d48b17e637a66", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/1ba1dbd37fecd6cd47dd717c934d48b17e637a66", "committedDate": "2020-11-05T19:31:43Z", "message": "Merge branch 'main' into runtime-refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "923c0e2d72bc81181c670ba91d092eef17c3600c", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/923c0e2d72bc81181c670ba91d092eef17c3600c", "committedDate": "2020-11-05T21:44:49Z", "message": "\u26f8"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad12f3c7b6bcee2c23cbc0ff04bb0a2f4d02a9bf", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/ad12f3c7b6bcee2c23cbc0ff04bb0a2f4d02a9bf", "committedDate": "2020-11-06T18:55:43Z", "message": "\ud83c\udfb9"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9f06900d0399de0c4795bc8f1ae9387121826d8", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/a9f06900d0399de0c4795bc8f1ae9387121826d8", "committedDate": "2020-11-06T19:36:38Z", "message": "\u26c4\ufe0f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e7746fbb5e600183d97f3a4d404723092770803", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/1e7746fbb5e600183d97f3a4d404723092770803", "committedDate": "2020-11-09T17:13:44Z", "message": "Merge branch 'main' into runtime-refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3892d115894a5e2fd63e25ac10c90e7ab835c524", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/3892d115894a5e2fd63e25ac10c90e7ab835c524", "committedDate": "2020-11-09T18:01:41Z", "message": "\ud83c\udf08"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84f6eec965520d917b99293ce653c96ac47641b6", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/84f6eec965520d917b99293ce653c96ac47641b6", "committedDate": "2020-11-10T11:33:39Z", "message": "\ud83c\udf4e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5220934c98c529eca190d00d11d9342559a8e43f", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/5220934c98c529eca190d00d11d9342559a8e43f", "committedDate": "2020-11-10T14:34:07Z", "message": "chore: update capacitor site url"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7d458f74f0667171c39281d75948c622292ffad", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/e7d458f74f0667171c39281d75948c622292ffad", "committedDate": "2020-11-10T14:40:42Z", "message": "chore: set platform package publish files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a6e21e3e4cdfb3937fc41612a6f5048479e1c12", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/0a6e21e3e4cdfb3937fc41612a6f5048479e1c12", "committedDate": "2020-11-10T14:45:14Z", "message": "Merge branch 'pkg-files' into runtime-refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "010a4147c0cf4d546ac2b40b6495eb10a7ec5a60", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/010a4147c0cf4d546ac2b40b6495eb10a7ec5a60", "committedDate": "2020-11-10T14:45:27Z", "message": "Merge branch 'site-url' into runtime-refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8001a34e560e08d2d41299c4d3d9a039298851f5", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/8001a34e560e08d2d41299c4d3d9a039298851f5", "committedDate": "2020-11-10T15:31:08Z", "message": "feat(cli): bundle cli for faster startup, less deps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ed4a43bb259c49621bc25d3a8b110c05645ae5", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/45ed4a43bb259c49621bc25d3a8b110c05645ae5", "committedDate": "2020-11-10T15:40:23Z", "message": "writeBundle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "526121fb613bd75ad861d1d57dada79bf4794fb2", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/526121fb613bd75ad861d1d57dada79bf4794fb2", "committedDate": "2020-11-10T16:26:01Z", "message": "Merge branch 'cli-bundle' into runtime-refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bac26717541a2b0664cbcb70ebd7ba34fa83900", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/5bac26717541a2b0664cbcb70ebd7ba34fa83900", "committedDate": "2020-11-10T19:18:28Z", "message": "Merge branch 'main' into runtime-refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b9270436e47de7196ac43999414aade0d607fe9", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/9b9270436e47de7196ac43999414aade0d607fe9", "committedDate": "2020-11-10T21:12:06Z", "message": "\ud83d\udc15"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf4d7644846e8807eaa0b284db3d1032681be3ce", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/cf4d7644846e8807eaa0b284db3d1032681be3ce", "committedDate": "2020-11-10T21:22:32Z", "message": "\ud83d\udd14"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f522ae506f51c0c05fbed5c88f39114dd04e8975", "author": {"user": {"login": "imhoffd", "name": "Dan Imhoff"}}, "url": "https://github.com/ionic-team/capacitor/commit/f522ae506f51c0c05fbed5c88f39114dd04e8975", "committedDate": "2020-11-11T19:39:06Z", "message": "prettierignore types dir"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b65c94b06d73b79783cc91abad792f3283695e6", "author": {"user": {"login": "imhoffd", "name": "Dan Imhoff"}}, "url": "https://github.com/ionic-team/capacitor/commit/7b65c94b06d73b79783cc91abad792f3283695e6", "committedDate": "2020-11-11T19:40:43Z", "message": "fix lint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDI4NjEx", "url": "https://github.com/ionic-team/capacitor/pull/3748#pullrequestreview-528428611", "createdAt": "2020-11-11T18:25:17Z", "commit": {"oid": "cf4d7644846e8807eaa0b284db3d1032681be3ce"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxODoyNToxN1rOHxZL2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTo1MzoyNlrOHxcCKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NDkwNQ==", "bodyText": "We can take this opportunity to switch to types (the documented way) vs typings.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              \"typings\": \"types/index.d.ts\",\n          \n          \n            \n              \"types\": \"types/index.d.ts\",", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521554905", "createdAt": "2020-11-11T18:25:17Z", "author": {"login": "imhoffd"}, "path": "core/package.json", "diffHunk": "@@ -7,36 +7,33 @@\n   \"license\": \"MIT\",\n   \"files\": [\n     \"dist/\",\n-    \"cordova.js\",\n-    \"native-bridge.js\"\n+    \"types/\",\n+    \"cordova.js\"\n   ],\n   \"scripts\": {\n-    \"docs\": \"./node_modules/.bin/typedoc --exclude **/__test__/*.ts --json dist/docs.json --mode modules src/core-plugin-definitions.ts && node scripts/docs.js\",\n-    \"build\": \"npm run clean && npm run transpile && npm run rollup && npm run minify\",\n+    \"build\": \"npm run clean && npm run transpile && npm run rollup\",\n     \"clean\": \"rimraf dist\",\n-    \"minify\": \"terser --mangle --compress --source-map \\\"content='dist/capacitor.js.map',url='capacitor.js.map'\\\" --comments '/^/*!/' --output dist/capacitor.js dist/capacitor.js\",\n     \"prepublishOnly\": \"npm run build\",\n     \"rollup\": \"rollup --config rollup.config.js\",\n     \"transpile\": \"tsc\",\n-    \"test\": \"jest\"\n+    \"test\": \"jest\",\n+    \"test.watch\": \"jest --watchAll\",\n+    \"test.treeshaking\": \"node src/tests/build-treeshaking.js\"\n   },\n   \"main\": \"dist/index.js\",\n-  \"module\": \"dist/esm/index.js\",\n+  \"typings\": \"types/index.d.ts\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4d7644846e8807eaa0b284db3d1032681be3ce"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NTg5MQ==", "bodyText": "We're using colons in other places. I don't care which we use, but we should be consistent\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"test.watch\": \"jest --watchAll\",\n          \n          \n            \n                \"test.treeshaking\": \"node src/tests/build-treeshaking.js\"\n          \n          \n            \n                \"test:watch\": \"jest --watchAll\",\n          \n          \n            \n                \"test:treeshaking\": \"node src/tests/build-treeshaking.js\"", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521555891", "createdAt": "2020-11-11T18:27:05Z", "author": {"login": "imhoffd"}, "path": "core/package.json", "diffHunk": "@@ -7,36 +7,33 @@\n   \"license\": \"MIT\",\n   \"files\": [\n     \"dist/\",\n-    \"cordova.js\",\n-    \"native-bridge.js\"\n+    \"types/\",\n+    \"cordova.js\"\n   ],\n   \"scripts\": {\n-    \"docs\": \"./node_modules/.bin/typedoc --exclude **/__test__/*.ts --json dist/docs.json --mode modules src/core-plugin-definitions.ts && node scripts/docs.js\",\n-    \"build\": \"npm run clean && npm run transpile && npm run rollup && npm run minify\",\n+    \"build\": \"npm run clean && npm run transpile && npm run rollup\",\n     \"clean\": \"rimraf dist\",\n-    \"minify\": \"terser --mangle --compress --source-map \\\"content='dist/capacitor.js.map',url='capacitor.js.map'\\\" --comments '/^/*!/' --output dist/capacitor.js dist/capacitor.js\",\n     \"prepublishOnly\": \"npm run build\",\n     \"rollup\": \"rollup --config rollup.config.js\",\n     \"transpile\": \"tsc\",\n-    \"test\": \"jest\"\n+    \"test\": \"jest\",\n+    \"test.watch\": \"jest --watchAll\",\n+    \"test.treeshaking\": \"node src/tests/build-treeshaking.js\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4d7644846e8807eaa0b284db3d1032681be3ce"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NjMyMg==", "bodyText": "What's the reason for removing this? If it's annoying while working in PRs, you can do git commit -n for \"no verify\"", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521556322", "createdAt": "2020-11-11T18:27:56Z", "author": {"login": "imhoffd"}, "path": "package.json", "diffHunk": "@@ -9,11 +9,6 @@\n     \"swiftlint\": \"node-swiftlint\",\n     \"postinstall\": \"lerna bootstrap\"\n   },\n-  \"husky\": {\n-    \"hooks\": {\n-      \"pre-commit\": \"npm run lint\"\n-    }\n-  },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4d7644846e8807eaa0b284db3d1032681be3ce"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NzMzNw==", "bodyText": "This may need updating", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521557337", "createdAt": "2020-11-11T18:29:49Z", "author": {"login": "imhoffd"}, "path": "core/src/tests/fixtures/network-plugin/index.ts", "diffHunk": "@@ -0,0 +1,11 @@\n+import { registerPlugin, NativePlugin } from '../../../index';\n+\n+import type { NetworkPlugin } from './definitions';\n+\n+const Network = registerPlugin<NetworkPlugin>('Network', {\n+  android: NativePlugin,\n+  ios: NativePlugin,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4d7644846e8807eaa0b284db3d1032681be3ce"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMTU3Nw==", "bodyText": "I don't think we can deprecate this because this is how app developers would import their own in-app plugins.\njava:\n@CapacitorPlugin(name = \"CoolThing\")\npublic class ...\njs:\nimport { Plugins } from '@capacitor/core';\nconst { CoolThing } = Plugins;", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521601577", "createdAt": "2020-11-11T19:53:26Z", "author": {"login": "imhoffd"}, "path": "core/src/global.ts", "diffHunk": "@@ -1,25 +1,38 @@\n-import type { Capacitor as _Capacitor } from './definitions';\n-import { CapacitorWeb } from './web-runtime';\n+import { legacyRegisterWebPlugin } from './legacy/legacy-web-plugin-merge';\n+import { initCapacitorGlobal } from './runtime';\n+import type { WebPlugin } from './web-plugin';\n \n-// Create our default Capacitor instance, which will be\n-// overridden on native platforms\n-const Capacitor = ((globalThis: any): _Capacitor => {\n-  // Create a new CapacitorWeb instance if one doesn't already exist on globalThis\n-  // Ensure the global is assigned the same Capacitor instance,\n-  // then export Capacitor so it can be imported in other modules\n-  return (globalThis.Capacitor = globalThis.Capacitor || new CapacitorWeb());\n-})(\n-  // figure out the current globalThis, such as \"window\", \"self\" or \"global\"\n-  // ensure errors are not thrown in an node SSR environment or web worker\n-  typeof self !== 'undefined'\n+export const Capacitor = /*#__PURE__*/ initCapacitorGlobal(\n+  (typeof globalThis !== 'undefined'\n+    ? globalThis\n+    : typeof self !== 'undefined'\n     ? self\n     : typeof window !== 'undefined'\n     ? window\n     : typeof global !== 'undefined'\n     ? global\n-    : {},\n+    : {}) as any,\n );\n \n-const Plugins = Capacitor.Plugins;\n+export const registerPlugin = Capacitor.registerPlugin;\n \n-export { Capacitor, Plugins };\n+/**\n+ * @deprecated Provided for backwards compatibility for Capacitor v2 plugins.\n+ * Capacitor v3 plugins should import the plugin directly. This \"Plugins\"\n+ * export is deprecated in v3, and will be removed in v4.\n+ */\n+export const Plugins = Capacitor.Plugins;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4d7644846e8807eaa0b284db3d1032681be3ce"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d1380bddf2e4fe856ad70faad93365c12bf8a10", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/8d1380bddf2e4fe856ad70faad93365c12bf8a10", "committedDate": "2020-11-11T20:31:08Z", "message": "Update core/package.json\n\nCo-authored-by: Dan Imhoff <dwieeb@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d430c1175061c9a73421c75d77fdd6d124b5894a", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/d430c1175061c9a73421c75d77fdd6d124b5894a", "committedDate": "2020-11-11T20:32:44Z", "message": "husky"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "034d0952c12c7351f3ceeb5688ff2de592bb68da", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/034d0952c12c7351f3ceeb5688ff2de592bb68da", "committedDate": "2020-11-11T20:34:26Z", "message": "remove unused test fixtures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a11d5c4742cfe3ed1befc1b7c64fa517a886ec9d", "author": {"user": {"login": "imhoffd", "name": "Dan Imhoff"}}, "url": "https://github.com/ionic-team/capacitor/commit/a11d5c4742cfe3ed1befc1b7c64fa517a886ec9d", "committedDate": "2020-11-11T23:57:59Z", "message": "redundant types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa52c7178f6eca127d75e1d0ea4bef6dd45dc6b1", "author": {"user": {"login": "imhoffd", "name": "Dan Imhoff"}}, "url": "https://github.com/ionic-team/capacitor/commit/fa52c7178f6eca127d75e1d0ea4bef6dd45dc6b1", "committedDate": "2020-11-12T00:03:10Z", "message": "Merge remote-tracking branch 'origin/main' into runtime-refactor\n\nConflicts:\n\tios/Capacitor/Capacitor/CAPBridge.swift\n\tios/Capacitor/Capacitor/JSExport.swift"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d2f78dd7e0aa86b28236784c43c5936197087b7", "author": {"user": {"login": "imhoffd", "name": "Dan Imhoff"}}, "url": "https://github.com/ionic-team/capacitor/commit/2d2f78dd7e0aa86b28236784c43c5936197087b7", "committedDate": "2020-11-12T00:12:58Z", "message": "typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7f80fb0324c1c339c1d132c5f8f6cdb3a83e625", "author": {"user": {"login": "imhoffd", "name": "Dan Imhoff"}}, "url": "https://github.com/ionic-team/capacitor/commit/b7f80fb0324c1c339c1d132c5f8f6cdb3a83e625", "committedDate": "2020-11-12T00:18:44Z", "message": "no bundle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NjUxNzcy", "url": "https://github.com/ionic-team/capacitor/pull/3748#pullrequestreview-528651772", "createdAt": "2020-11-12T00:31:42Z", "commit": {"oid": "b7f80fb0324c1c339c1d132c5f8f6cdb3a83e625"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMDozMTo0MlrOHxkE4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMDozMTo0MlrOHxkE4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTczMzM0Nw==", "bodyText": "Is this a typo? I'm pretty sure this line does nothing.", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521733347", "createdAt": "2020-11-12T00:31:42Z", "author": {"login": "imhoffd"}, "path": "core/src/legacy/legacy-handlers.ts", "diffHunk": "@@ -0,0 +1,43 @@\n+import type {\n+  CapacitorInstance,\n+  WindowCapacitor,\n+} from '../definitions-internal';\n+import { noop } from '../util';\n+\n+export const initLegacyHandlers = (\n+  win: WindowCapacitor,\n+  cap: CapacitorInstance,\n+): void => {\n+  // define cordova if it's not there already\n+  win.cordova = win.cordova || {};\n+\n+  const doc = win.document;\n+  const nav = win.navigator;\n+\n+  if (nav) {\n+    nav.app = nav.app || {};\n+    nav.app.exitApp = () => {\n+      cap.nativeCallback('App', 'exitApp', {});\n+    };\n+  }\n+\n+  if (doc) {\n+    const docAddEventListener = doc.addEventListener;\n+    doc.addEventListener = (...args: any[]) => {\n+      const eventName = args[0];\n+      const handler = args[1];\n+      if (eventName === 'deviceready' && handler) {\n+        Promise.resolve(handler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f80fb0324c1c339c1d132c5f8f6cdb3a83e625"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da7b796e09d20294d7dc717b72f238d912b960e2", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/da7b796e09d20294d7dc717b72f238d912b960e2", "committedDate": "2020-11-14T16:50:15Z", "message": "\ud83d\udc29"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a256e8bde01c5b7b2513116c78e030e9342b0d7", "author": {"user": {"login": "imhoffd", "name": "Dan Imhoff"}}, "url": "https://github.com/ionic-team/capacitor/commit/3a256e8bde01c5b7b2513116c78e030e9342b0d7", "committedDate": "2020-11-14T22:53:02Z", "message": "Merge branch 'main' into runtime-refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNjEwMDE3", "url": "https://github.com/ionic-team/capacitor/pull/3748#pullrequestreview-530610017", "createdAt": "2020-11-14T22:54:31Z", "commit": {"oid": "3a256e8bde01c5b7b2513116c78e030e9342b0d7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd2e4917e68b3a1ef20ce52f8e162b02da28c43b", "author": {"user": {"login": "adamdbradley", "name": "Adam Bradley"}}, "url": "https://github.com/ionic-team/capacitor/commit/bd2e4917e68b3a1ef20ce52f8e162b02da28c43b", "committedDate": "2020-11-16T13:10:46Z", "message": "always implement nativeCallback/nativePromise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7cd023e6f6cb0e5ddae02234bfece67cf5d685c", "author": {"user": {"login": "imhoffd", "name": "Dan Imhoff"}}, "url": "https://github.com/ionic-team/capacitor/commit/b7cd023e6f6cb0e5ddae02234bfece67cf5d685c", "committedDate": "2020-11-21T21:13:20Z", "message": "Merge branch 'main' into runtime-refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NzYxMTcz", "url": "https://github.com/ionic-team/capacitor/pull/3748#pullrequestreview-537761173", "createdAt": "2020-11-24T17:45:46Z", "commit": {"oid": "b7cd023e6f6cb0e5ddae02234bfece67cf5d685c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbc4bc4682ad33061ce7eb3c84dbf6e9c19063ff", "author": {"user": {"login": "imhoffd", "name": "Dan Imhoff"}}, "url": "https://github.com/ionic-team/capacitor/commit/fbc4bc4682ad33061ce7eb3c84dbf6e9c19063ff", "committedDate": "2020-11-24T18:25:51Z", "message": "Merge branch 'main' into runtime-refactor"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1082, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}