{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODA4MzY3", "number": 3787, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxODowOTozNFrOE7qNwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTo1ODozNVrOE8X9nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTkzMDg4OnYy", "diffSide": "RIGHT", "path": "android/capacitor/src/main/java/com/getcapacitor/Plugin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxODowOTozNFrOH3bh1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxODoyMDozOFrOH3b4zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg4NDc1Ng==", "bodyText": "Do you think this still promotes an undesirable workflow where plugin devs are using a single variable to store multiple call IDs? I am almost of the opinion the plugin dev should be fully responsible for managing their call IDs. What do you think?", "url": "https://github.com/ionic-team/capacitor/pull/3787#discussion_r527884756", "createdAt": "2020-11-20T18:09:34Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Plugin.java", "diffHunk": "@@ -46,10 +46,24 @@\n     // Reference to the PluginHandle wrapper for this Plugin\n     protected PluginHandle handle;\n \n-    // A way for plugins to quickly save a call that they will\n-    // need to reference between activity/permissions starts/requests\n+    /**\n+     * A way for plugins to quickly save a call that they will need to reference\n+     * between activity/permissions starts/requests\n+     *\n+     * @deprecated use {@link #savedLastCallId} instead in conjunction with bridge methods\n+     * {@link com.getcapacitor.Bridge#saveCall(PluginCall)},\n+     * {@link com.getcapacitor.Bridge#getSavedCall(String)} and\n+     * {@link com.getcapacitor.Bridge#releaseCall(PluginCall)}\n+     */\n+    @Deprecated\n     protected PluginCall savedLastCall;\n \n+    /**\n+     * The call ID of a saved plugin call on the Bridge. This can be used to persist a call\n+     * between activity lifecycle changes or permission requests.\n+     */\n+    protected String savedLastCallId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96448d93a5f59bfd52d65b64a4aa9f665bf5012d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg4Njc0NQ==", "bodyText": "We still need to store an ID for the last call for permission to work, but I'm currently refactoring this slightly to indicate its more tied to permissions, like permissionsCallId. Do you think that would make a good distinction that this is just used internally for permissions and it shouldn't be used by plugin author?\nIm deprecating the freeSavedCall, saveCall and getSavedCall methods in addition to that, and making specific ones tied to permissions so the intent is clearer.\nThoughts?", "url": "https://github.com/ionic-team/capacitor/pull/3787#discussion_r527886745", "createdAt": "2020-11-20T18:13:27Z", "author": {"login": "carlpoole"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Plugin.java", "diffHunk": "@@ -46,10 +46,24 @@\n     // Reference to the PluginHandle wrapper for this Plugin\n     protected PluginHandle handle;\n \n-    // A way for plugins to quickly save a call that they will\n-    // need to reference between activity/permissions starts/requests\n+    /**\n+     * A way for plugins to quickly save a call that they will need to reference\n+     * between activity/permissions starts/requests\n+     *\n+     * @deprecated use {@link #savedLastCallId} instead in conjunction with bridge methods\n+     * {@link com.getcapacitor.Bridge#saveCall(PluginCall)},\n+     * {@link com.getcapacitor.Bridge#getSavedCall(String)} and\n+     * {@link com.getcapacitor.Bridge#releaseCall(PluginCall)}\n+     */\n+    @Deprecated\n     protected PluginCall savedLastCall;\n \n+    /**\n+     * The call ID of a saved plugin call on the Bridge. This can be used to persist a call\n+     * between activity lifecycle changes or permission requests.\n+     */\n+    protected String savedLastCallId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg4NDc1Ng=="}, "originalCommit": {"oid": "96448d93a5f59bfd52d65b64a4aa9f665bf5012d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg5MDYzOQ==", "bodyText": "Yes, perfect!", "url": "https://github.com/ionic-team/capacitor/pull/3787#discussion_r527890639", "createdAt": "2020-11-20T18:20:38Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Plugin.java", "diffHunk": "@@ -46,10 +46,24 @@\n     // Reference to the PluginHandle wrapper for this Plugin\n     protected PluginHandle handle;\n \n-    // A way for plugins to quickly save a call that they will\n-    // need to reference between activity/permissions starts/requests\n+    /**\n+     * A way for plugins to quickly save a call that they will need to reference\n+     * between activity/permissions starts/requests\n+     *\n+     * @deprecated use {@link #savedLastCallId} instead in conjunction with bridge methods\n+     * {@link com.getcapacitor.Bridge#saveCall(PluginCall)},\n+     * {@link com.getcapacitor.Bridge#getSavedCall(String)} and\n+     * {@link com.getcapacitor.Bridge#releaseCall(PluginCall)}\n+     */\n+    @Deprecated\n     protected PluginCall savedLastCall;\n \n+    /**\n+     * The call ID of a saved plugin call on the Bridge. This can be used to persist a call\n+     * between activity lifecycle changes or permission requests.\n+     */\n+    protected String savedLastCallId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg4NDc1Ng=="}, "originalCommit": {"oid": "96448d93a5f59bfd52d65b64a4aa9f665bf5012d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDYyNDE1OnYy", "diffSide": "RIGHT", "path": "android/capacitor/src/main/java/com/getcapacitor/Plugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMTo1ODozNFrOH3iI1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMTo1ODozNFrOH3iI1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5MzA0NQ==", "bodyText": "We should document that this dequeues the call ID now. Since this is no longer idempotent, a rename may be warranted as well.", "url": "https://github.com/ionic-team/capacitor/pull/3787#discussion_r527993045", "createdAt": "2020-11-20T21:58:34Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Plugin.java", "diffHunk": "@@ -184,7 +184,7 @@ public PluginCall getSavedCall() {\n      * @return The saved plugin call\n      */\n     protected PluginCall getPermissionCall() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4cc0d056d170dab63f64edef85aaaf404792466"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzAyMTA3OnYy", "diffSide": "RIGHT", "path": "android/capacitor/src/main/java/com/getcapacitor/Bridge.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODowNjoyMlrOH4ZcpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODowNjoyMlrOH4ZcpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5OTIzNg==", "bodyText": "I don't think this is accurate any longer", "url": "https://github.com/ionic-team/capacitor/pull/3787#discussion_r528899236", "createdAt": "2020-11-23T18:06:22Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Bridge.java", "diffHunk": "@@ -713,13 +758,136 @@ public void onRequestPermissionsResult(int requestCode, String[] permissions, in\n         }\n \n         if (plugin.getPluginAnnotation() != null) {\n-            plugin.getInstance().onRequestPermissionsResult(requestCode, permissions, grantResults);\n+            // Handle for @CapacitorPlugin permissions\n+            PluginCall savedPermissionCall = getPermissionCall(plugin.getId());\n+            if (savedPermissionCall != null) {\n+                if (validatePermissions(plugin.getInstance(), savedPermissionCall, permissions, grantResults)) {\n+                    // handle request permissions call\n+                    if (savedPermissionCall.getMethodName().equals(\"requestPermissions\")) {\n+                        savedPermissionCall.resolve(getPermissionStates(plugin.getInstance()));\n+                    } else {\n+                        // handle permission requests by other methods on the plugin\n+                        plugin.getInstance().onRequestPermissionsResult(savedPermissionCall, requestCode, permissions, grantResults);\n+\n+                        if (!savedPermissionCall.isReleased()) {\n+                            savedPermissionCall.release(this);\n+                        }\n+                    }\n+                }\n+            }\n         } else {\n             // Call deprecated method if using deprecated NativePlugin annotation\n             plugin.getInstance().handleRequestPermissionsResult(requestCode, permissions, grantResults);\n         }\n     }\n \n+    /**\n+     * Saves permission states and rejects if permissions were not correctly defined in\n+     * the AndroidManifest.xml file.\n+     *\n+     * Plugins overriding {@link #onRequestPermissionsResult(int, String[], int[])} should call\n+     * this method to save permission states correctly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdea1b0d83e0597649ab2b55e4e25743c91a7ea6"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzAyNzE3OnYy", "diffSide": "RIGHT", "path": "android/capacitor/src/main/java/com/getcapacitor/Bridge.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODowODoxMVrOH4ZgWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTozNzozNFrOH4ciNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwMDE4Ng==", "bodyText": "Does this need to be public?", "url": "https://github.com/ionic-team/capacitor/pull/3787#discussion_r528900186", "createdAt": "2020-11-23T18:08:11Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Bridge.java", "diffHunk": "@@ -614,6 +627,38 @@ public void releaseCall(PluginCall call) {\n         this.savedCalls.remove(call.getCallbackId());\n     }\n \n+    /**\n+     * Removes the earliest saved call prior to a permissions request for a given plugin and\n+     * returns it.\n+     *\n+     * @return The saved plugin call\n+     */\n+    protected PluginCall getPermissionCall(String pluginId) {\n+        LinkedList<String> permissionCallIds = this.savedPermissionCallIds.get(pluginId);\n+        String savedCallId = null;\n+        if (permissionCallIds != null) {\n+            savedCallId = permissionCallIds.poll();\n+        }\n+\n+        return getSavedCall(savedCallId);\n+    }\n+\n+    /**\n+     * Save a call to be retrieved after requesting permissions. Calls are saved in order.\n+     *\n+     * @param call The plugin call to save.\n+     */\n+    public void savePermissionCall(PluginCall call) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdea1b0d83e0597649ab2b55e4e25743c91a7ea6"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0OTgxNQ==", "bodyText": "Not any more, I can also refine the permission requesting helpers on Plugin to save the call so the plugin author won't need to call this at all", "url": "https://github.com/ionic-team/capacitor/pull/3787#discussion_r528949815", "createdAt": "2020-11-23T19:37:34Z", "author": {"login": "carlpoole"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Bridge.java", "diffHunk": "@@ -614,6 +627,38 @@ public void releaseCall(PluginCall call) {\n         this.savedCalls.remove(call.getCallbackId());\n     }\n \n+    /**\n+     * Removes the earliest saved call prior to a permissions request for a given plugin and\n+     * returns it.\n+     *\n+     * @return The saved plugin call\n+     */\n+    protected PluginCall getPermissionCall(String pluginId) {\n+        LinkedList<String> permissionCallIds = this.savedPermissionCallIds.get(pluginId);\n+        String savedCallId = null;\n+        if (permissionCallIds != null) {\n+            savedCallId = permissionCallIds.poll();\n+        }\n+\n+        return getSavedCall(savedCallId);\n+    }\n+\n+    /**\n+     * Save a call to be retrieved after requesting permissions. Calls are saved in order.\n+     *\n+     * @param call The plugin call to save.\n+     */\n+    public void savePermissionCall(PluginCall call) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwMDE4Ng=="}, "originalCommit": {"oid": "cdea1b0d83e0597649ab2b55e4e25743c91a7ea6"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzA0MDUzOnYy", "diffSide": "RIGHT", "path": "android/capacitor/src/main/java/com/getcapacitor/Bridge.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODoxMTo1MlrOH4Zofw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTozNDo0MVrOH4ccCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwMjI3MQ==", "bodyText": "We should make this protected. If the API needs to be exposed to the plugin developer, we can make a helper in the Plugin class that just does this.bridge.getPermissionStates(this) (so the usage would be this.getPermissionStates(), much cleaner).", "url": "https://github.com/ionic-team/capacitor/pull/3787#discussion_r528902271", "createdAt": "2020-11-23T18:11:52Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Bridge.java", "diffHunk": "@@ -713,13 +758,136 @@ public void onRequestPermissionsResult(int requestCode, String[] permissions, in\n         }\n \n         if (plugin.getPluginAnnotation() != null) {\n-            plugin.getInstance().onRequestPermissionsResult(requestCode, permissions, grantResults);\n+            // Handle for @CapacitorPlugin permissions\n+            PluginCall savedPermissionCall = getPermissionCall(plugin.getId());\n+            if (savedPermissionCall != null) {\n+                if (validatePermissions(plugin.getInstance(), savedPermissionCall, permissions, grantResults)) {\n+                    // handle request permissions call\n+                    if (savedPermissionCall.getMethodName().equals(\"requestPermissions\")) {\n+                        savedPermissionCall.resolve(getPermissionStates(plugin.getInstance()));\n+                    } else {\n+                        // handle permission requests by other methods on the plugin\n+                        plugin.getInstance().onRequestPermissionsResult(savedPermissionCall, requestCode, permissions, grantResults);\n+\n+                        if (!savedPermissionCall.isReleased()) {\n+                            savedPermissionCall.release(this);\n+                        }\n+                    }\n+                }\n+            }\n         } else {\n             // Call deprecated method if using deprecated NativePlugin annotation\n             plugin.getInstance().handleRequestPermissionsResult(requestCode, permissions, grantResults);\n         }\n     }\n \n+    /**\n+     * Saves permission states and rejects if permissions were not correctly defined in\n+     * the AndroidManifest.xml file.\n+     *\n+     * Plugins overriding {@link #onRequestPermissionsResult(int, String[], int[])} should call\n+     * this method to save permission states correctly.\n+     *\n+     * @param plugin\n+     * @param savedCall\n+     * @param permissions\n+     * @param grantResults\n+     * @return true if permissions were saved and defined correctly, false if not\n+     */\n+    protected boolean validatePermissions(Plugin plugin, PluginCall savedCall, String[] permissions, int[] grantResults) {\n+        SharedPreferences prefs = getContext().getSharedPreferences(PERMISSION_PREFS_NAME, Activity.MODE_PRIVATE);\n+\n+        if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n+            // Permission granted. If previously denied, remove cached state\n+            for (String permission : permissions) {\n+                String state = prefs.getString(permission, null);\n+\n+                if (state != null) {\n+                    SharedPreferences.Editor editor = prefs.edit();\n+                    editor.remove(permission);\n+                    editor.apply();\n+                }\n+            }\n+        } else {\n+            for (String permission : permissions) {\n+                SharedPreferences.Editor editor = prefs.edit();\n+\n+                if (ActivityCompat.shouldShowRequestPermissionRationale(getActivity(), permission)) {\n+                    // Permission denied, can prompt again with rationale\n+                    editor.putString(permission, \"prompt-with-rationale\");\n+                } else {\n+                    // Permission denied permanently, store this state for future reference\n+                    editor.putString(permission, \"denied\");\n+                }\n+\n+                editor.apply();\n+            }\n+        }\n+\n+        if (!plugin.hasDefinedPermissions(permissions)) {\n+            StringBuilder builder = new StringBuilder();\n+            builder.append(\"Missing the following permissions in AndroidManifest.xml:\\n\");\n+            String[] missing = PermissionHelper.getUndefinedPermissions(getContext(), permissions);\n+            for (String perm : missing) {\n+                builder.append(perm + \"\\n\");\n+            }\n+            savedCall.reject(builder.toString());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Helper to check all permissions and see the current states of each permission.\n+     *\n+     * @since 3.0.0\n+     * @return A mapping of permissions to the associated granted status.\n+     */\n+    public JSObject getPermissionStates(Plugin plugin) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdea1b0d83e0597649ab2b55e4e25743c91a7ea6"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0ODIzNQ==", "bodyText": "I will do that. We have the new code in permission states that indicates if its a prompt-with-rationale or hard deny, and I think that could be useful for plugin authors to know from this helper.", "url": "https://github.com/ionic-team/capacitor/pull/3787#discussion_r528948235", "createdAt": "2020-11-23T19:34:41Z", "author": {"login": "carlpoole"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Bridge.java", "diffHunk": "@@ -713,13 +758,136 @@ public void onRequestPermissionsResult(int requestCode, String[] permissions, in\n         }\n \n         if (plugin.getPluginAnnotation() != null) {\n-            plugin.getInstance().onRequestPermissionsResult(requestCode, permissions, grantResults);\n+            // Handle for @CapacitorPlugin permissions\n+            PluginCall savedPermissionCall = getPermissionCall(plugin.getId());\n+            if (savedPermissionCall != null) {\n+                if (validatePermissions(plugin.getInstance(), savedPermissionCall, permissions, grantResults)) {\n+                    // handle request permissions call\n+                    if (savedPermissionCall.getMethodName().equals(\"requestPermissions\")) {\n+                        savedPermissionCall.resolve(getPermissionStates(plugin.getInstance()));\n+                    } else {\n+                        // handle permission requests by other methods on the plugin\n+                        plugin.getInstance().onRequestPermissionsResult(savedPermissionCall, requestCode, permissions, grantResults);\n+\n+                        if (!savedPermissionCall.isReleased()) {\n+                            savedPermissionCall.release(this);\n+                        }\n+                    }\n+                }\n+            }\n         } else {\n             // Call deprecated method if using deprecated NativePlugin annotation\n             plugin.getInstance().handleRequestPermissionsResult(requestCode, permissions, grantResults);\n         }\n     }\n \n+    /**\n+     * Saves permission states and rejects if permissions were not correctly defined in\n+     * the AndroidManifest.xml file.\n+     *\n+     * Plugins overriding {@link #onRequestPermissionsResult(int, String[], int[])} should call\n+     * this method to save permission states correctly.\n+     *\n+     * @param plugin\n+     * @param savedCall\n+     * @param permissions\n+     * @param grantResults\n+     * @return true if permissions were saved and defined correctly, false if not\n+     */\n+    protected boolean validatePermissions(Plugin plugin, PluginCall savedCall, String[] permissions, int[] grantResults) {\n+        SharedPreferences prefs = getContext().getSharedPreferences(PERMISSION_PREFS_NAME, Activity.MODE_PRIVATE);\n+\n+        if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n+            // Permission granted. If previously denied, remove cached state\n+            for (String permission : permissions) {\n+                String state = prefs.getString(permission, null);\n+\n+                if (state != null) {\n+                    SharedPreferences.Editor editor = prefs.edit();\n+                    editor.remove(permission);\n+                    editor.apply();\n+                }\n+            }\n+        } else {\n+            for (String permission : permissions) {\n+                SharedPreferences.Editor editor = prefs.edit();\n+\n+                if (ActivityCompat.shouldShowRequestPermissionRationale(getActivity(), permission)) {\n+                    // Permission denied, can prompt again with rationale\n+                    editor.putString(permission, \"prompt-with-rationale\");\n+                } else {\n+                    // Permission denied permanently, store this state for future reference\n+                    editor.putString(permission, \"denied\");\n+                }\n+\n+                editor.apply();\n+            }\n+        }\n+\n+        if (!plugin.hasDefinedPermissions(permissions)) {\n+            StringBuilder builder = new StringBuilder();\n+            builder.append(\"Missing the following permissions in AndroidManifest.xml:\\n\");\n+            String[] missing = PermissionHelper.getUndefinedPermissions(getContext(), permissions);\n+            for (String perm : missing) {\n+                builder.append(perm + \"\\n\");\n+            }\n+            savedCall.reject(builder.toString());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Helper to check all permissions and see the current states of each permission.\n+     *\n+     * @since 3.0.0\n+     * @return A mapping of permissions to the associated granted status.\n+     */\n+    public JSObject getPermissionStates(Plugin plugin) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwMjI3MQ=="}, "originalCommit": {"oid": "cdea1b0d83e0597649ab2b55e4e25743c91a7ea6"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzM3ODY0OnYy", "diffSide": "RIGHT", "path": "android/capacitor/src/main/java/com/getcapacitor/Plugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTo0NTowMVrOH4cx3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTo0NTowMVrOH4cx3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1MzgyMQ==", "bodyText": "This may need to be documented for plugin devs", "url": "https://github.com/ionic-team/capacitor/pull/3787#discussion_r528953821", "createdAt": "2020-11-23T19:45:01Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Plugin.java", "diffHunk": "@@ -255,105 +267,87 @@ public boolean hasRequiredPermissions() {\n     }\n \n     /**\n-     * Exported plugin call for checking the granted status for each permission\n-     * declared on the plugin. This plugin call responds with a mapping of permissions to\n-     * the associated granted status.\n+     * Helper to make requesting individual permissions easy\n      *\n      * @since 3.0.0\n+     * @param call the plugin call\n+     * @param permission the permission to request\n+     * @param requestCode the requestCode to use to associate the result with the plugin\n      */\n-    @PluginMethod\n-    public void checkPermissions(PluginCall pluginCall) {\n-        JSObject permissionsResult = getPermissionStates();\n-        pluginCall.resolve(permissionsResult);\n+    public void requestPermission(PluginCall call, String permission, int requestCode) {\n+        requestPermissions(call, new String[] { permission }, requestCode);\n     }\n \n     /**\n-     * Helper to check all permissions and see the current states of each permission.\n+     * Helper to make requesting permissions\n      *\n      * @since 3.0.0\n-     * @return A mapping of permissions to the associated granted status.\n+     * @param call the plugin call\n+     * @param permissions the set of permissions to request\n+     * @param requestCode the requestCode to use to associate the result with the plugin\n      */\n-    public JSObject getPermissionStates() {\n-        JSObject permissionsResults = new JSObject();\n-        CapacitorPlugin annotation = handle.getPluginAnnotation();\n-        for (Permission perm : annotation.permissions()) {\n-            // If a permission is defined with no permission constants, return \"granted\" for it.\n-            // Otherwise, get its true state.\n-            if (perm.strings().length == 0 || (perm.strings().length == 1 && perm.strings()[0].isEmpty())) {\n-                String key = perm.alias();\n-                if (!key.isEmpty()) {\n-                    String existingResult = permissionsResults.getString(key);\n-\n-                    // auto set permission state to granted if the alias is empty.\n-                    if (existingResult == null) {\n-                        permissionsResults.put(key, \"granted\");\n-                    }\n-                }\n-            } else {\n-                for (String permString : perm.strings()) {\n-                    String key = perm.alias().isEmpty() ? permString : perm.alias();\n-                    String permissionStatus = hasPermission(permString) ? \"granted\" : \"prompt\";\n-\n-                    // Check if there is a cached permission state for the \"Never ask again\" state\n-                    if (permissionStatus.equals(\"prompt\")) {\n-                        SharedPreferences prefs = getContext().getSharedPreferences(PERMISSION_PREFS, Activity.MODE_PRIVATE);\n-                        String state = prefs.getString(permString, null);\n-\n-                        if (state != null) {\n-                            permissionStatus = state;\n-                        }\n-                    }\n-\n-                    String existingResult = permissionsResults.getString(key);\n+    public void requestPermissions(PluginCall call, String[] permissions, int requestCode) {\n+        bridge.savePermissionCall(call);\n+        ActivityCompat.requestPermissions(getActivity(), permissions, requestCode);\n+    }\n \n-                    // multiple permissions with the same alias must all be true, otherwise all false.\n-                    if (existingResult == null || existingResult.equals(\"granted\")) {\n-                        permissionsResults.put(key, permissionStatus);\n-                    }\n-                }\n+    /**\n+     * Request all of the specified permissions in the CapacitorPlugin annotation (if any)\n+     *\n+     * @since 3.0.0\n+     * @param call the plugin call\n+     */\n+    public void requestAllPermissions(PluginCall call) {\n+        CapacitorPlugin annotation = handle.getPluginAnnotation();\n+        if (annotation != null) {\n+            HashSet<String> perms = new HashSet<>();\n+            for (Permission perm : annotation.permissions()) {\n+                perms.addAll(Arrays.asList(perm.strings()));\n             }\n-        }\n \n-        return permissionsResults;\n+            bridge.savePermissionCall(call);\n+            ActivityCompat.requestPermissions(getActivity(), perms.toArray(new String[0]), annotation.permissionRequestCode());\n+        }\n     }\n \n     /**\n      * Helper to make requesting permissions easy\n+     * @deprecated use {@link #requestPermissions(PluginCall)} in conjunction with @CapacitorPlugin\n+     *\n      * @param permissions the set of permissions to request\n      * @param requestCode the requestCode to use to associate the result with the plugin\n      */\n+    @Deprecated\n     public void pluginRequestPermissions(String[] permissions, int requestCode) {\n         ActivityCompat.requestPermissions(getActivity(), permissions, requestCode);\n     }\n \n     /**\n      * Request all of the specified permissions in the CapacitorPlugin annotation (if any)\n+     * @deprecated use {@link #requestAllPermissions(PluginCall)} in conjunction with @CapacitorPlugin\n      */\n+    @Deprecated\n     public void pluginRequestAllPermissions() {\n-        CapacitorPlugin annotation = handle.getPluginAnnotation();\n-        if (annotation == null) {\n-            NativePlugin legacyAnnotation = handle.getLegacyPluginAnnotation();\n-            ActivityCompat.requestPermissions(getActivity(), legacyAnnotation.permissions(), legacyAnnotation.permissionRequestCode());\n-            return;\n-        }\n-\n-        HashSet<String> perms = new HashSet<>();\n-        for (Permission perm : annotation.permissions()) {\n-            perms.addAll(Arrays.asList(perm.strings()));\n-        }\n-\n-        ActivityCompat.requestPermissions(getActivity(), perms.toArray(new String[0]), annotation.permissionRequestCode());\n+        NativePlugin legacyAnnotation = handle.getLegacyPluginAnnotation();\n+        ActivityCompat.requestPermissions(getActivity(), legacyAnnotation.permissions(), legacyAnnotation.permissionRequestCode());\n     }\n \n     /**\n      * Helper to make requesting individual permissions easy\n+     * @deprecated use {@link #requestPermission(PluginCall, String, int)} in conjunction with @CapacitorPlugin\n+     *\n      * @param permission the permission to request\n      * @param requestCode the requestCode to use to associate the result with the plugin\n      */\n+    @Deprecated\n     public void pluginRequestPermission(String permission, int requestCode) {\n         ActivityCompat.requestPermissions(getActivity(), new String[] { permission }, requestCode);\n     }\n \n+    public JSObject getPermissionStates() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abce56a4f308c8c548349a83b26e10a68f1a1b1c"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzQyNjIzOnYy", "diffSide": "RIGHT", "path": "android/capacitor/src/main/java/com/getcapacitor/Plugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTo1ODozNVrOH4dOng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDowMTo1NlrOH4dWBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2MTE4Mg==", "bodyText": "Is this intended for plugins devs to use?", "url": "https://github.com/ionic-team/capacitor/pull/3787#discussion_r528961182", "createdAt": "2020-11-23T19:58:35Z", "author": {"login": "imhoffd"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Plugin.java", "diffHunk": "@@ -255,105 +267,93 @@ public boolean hasRequiredPermissions() {\n     }\n \n     /**\n-     * Exported plugin call for checking the granted status for each permission\n-     * declared on the plugin. This plugin call responds with a mapping of permissions to\n-     * the associated granted status.\n+     * Helper for requesting a specific permission\n      *\n      * @since 3.0.0\n+     * @param call the plugin call\n+     * @param permission the permission to request\n+     * @param requestCode the requestCode to use to associate the result with the plugin\n      */\n-    @PluginMethod\n-    public void checkPermissions(PluginCall pluginCall) {\n-        JSObject permissionsResult = getPermissionStates();\n-        pluginCall.resolve(permissionsResult);\n+    public void requestPermission(PluginCall call, String permission, int requestCode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f52a1163f0e9bf116322bc0501d10c96ecffd774"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2MzA3Nw==", "bodyText": "Yes, its a refactor of the existing pluginRequestPermission that includes the savePermissionCall", "url": "https://github.com/ionic-team/capacitor/pull/3787#discussion_r528963077", "createdAt": "2020-11-23T20:01:56Z", "author": {"login": "carlpoole"}, "path": "android/capacitor/src/main/java/com/getcapacitor/Plugin.java", "diffHunk": "@@ -255,105 +267,93 @@ public boolean hasRequiredPermissions() {\n     }\n \n     /**\n-     * Exported plugin call for checking the granted status for each permission\n-     * declared on the plugin. This plugin call responds with a mapping of permissions to\n-     * the associated granted status.\n+     * Helper for requesting a specific permission\n      *\n      * @since 3.0.0\n+     * @param call the plugin call\n+     * @param permission the permission to request\n+     * @param requestCode the requestCode to use to associate the result with the plugin\n      */\n-    @PluginMethod\n-    public void checkPermissions(PluginCall pluginCall) {\n-        JSObject permissionsResult = getPermissionStates();\n-        pluginCall.resolve(permissionsResult);\n+    public void requestPermission(PluginCall call, String permission, int requestCode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2MTE4Mg=="}, "originalCommit": {"oid": "f52a1163f0e9bf116322bc0501d10c96ecffd774"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3455, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}