{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNjkzNjQz", "number": 3678, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTowODoxOFrOEw594g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMTozMTozMFrOE0jrgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzE2ODM0OnYy", "diffSide": "RIGHT", "path": "ios/Capacitor/Capacitor/CAPLog.swift", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTowODoxOFrOHmv_NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoyNzoyOVrOHmyk_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5NDE2NA==", "bodyText": "I really don't understand why this is checked dynamically on every single log call \u2014 it's enormously wasteful, because the value can't change during runtime. It really should be a static value.", "url": "https://github.com/ionic-team/capacitor/pull/3678#discussion_r510394164", "createdAt": "2020-10-22T19:08:18Z", "author": {"login": "aparajita"}, "path": "ios/Capacitor/Capacitor/CAPLog.swift", "diffHunk": "@@ -1,26 +1,19 @@\n public class CAPLog {\n-    public static var enableLogging: Bool = true\n-    \n-    private static var oneTimeConfigCheck: () -> () = {\n-        // `dispatch_once` is not available since Swift 3. but, since static properties are implicitly lazy,\n-        // this code will only execute once which is sufficient for our needs here. but since we need to do an\n-        // async dispatch, there is a window of time where the default value will be valid before the config\n-        // value(s) can be loaded.\n-        DispatchQueue.main.async {\n-            let config = CAPConfig()\n-            if let configFlag = (config.getValue(\"ios.hideLogs\") as? Bool) ?? (config.getValue(\"hideLogs\") as? Bool) {\n-                enableLogging = !configFlag\n-            }\n-        }\n-        return {}\n-    }()\n-    \n+\n+    public static let config = CAPConfig()\n+\n     public static func print(_ items: Any..., separator: String = \" \", terminator: String = \"\\n\") {\n-        oneTimeConfigCheck()\n-        if enableLogging {\n+        if !self.hideLogs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a9cb120972fa65ddba6bf6a67d7d623c6dffdd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwMjQxNA==", "bodyText": "This is reverting a workaround for a bug that appeared during testing (a different workaround is used for the time being). Eventually, it will be a static flag as configuration is revisited in support of #3182", "url": "https://github.com/ionic-team/capacitor/pull/3678#discussion_r510402414", "createdAt": "2020-10-22T19:23:49Z", "author": {"login": "ikeith"}, "path": "ios/Capacitor/Capacitor/CAPLog.swift", "diffHunk": "@@ -1,26 +1,19 @@\n public class CAPLog {\n-    public static var enableLogging: Bool = true\n-    \n-    private static var oneTimeConfigCheck: () -> () = {\n-        // `dispatch_once` is not available since Swift 3. but, since static properties are implicitly lazy,\n-        // this code will only execute once which is sufficient for our needs here. but since we need to do an\n-        // async dispatch, there is a window of time where the default value will be valid before the config\n-        // value(s) can be loaded.\n-        DispatchQueue.main.async {\n-            let config = CAPConfig()\n-            if let configFlag = (config.getValue(\"ios.hideLogs\") as? Bool) ?? (config.getValue(\"hideLogs\") as? Bool) {\n-                enableLogging = !configFlag\n-            }\n-        }\n-        return {}\n-    }()\n-    \n+\n+    public static let config = CAPConfig()\n+\n     public static func print(_ items: Any..., separator: String = \" \", terminator: String = \"\\n\") {\n-        oneTimeConfigCheck()\n-        if enableLogging {\n+        if !self.hideLogs() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5NDE2NA=="}, "originalCommit": {"oid": "60a9cb120972fa65ddba6bf6a67d7d623c6dffdd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNjYwNA==", "bodyText": "Cool, thanks for letting me know.", "url": "https://github.com/ionic-team/capacitor/pull/3678#discussion_r510436604", "createdAt": "2020-10-22T20:27:29Z", "author": {"login": "aparajita"}, "path": "ios/Capacitor/Capacitor/CAPLog.swift", "diffHunk": "@@ -1,26 +1,19 @@\n public class CAPLog {\n-    public static var enableLogging: Bool = true\n-    \n-    private static var oneTimeConfigCheck: () -> () = {\n-        // `dispatch_once` is not available since Swift 3. but, since static properties are implicitly lazy,\n-        // this code will only execute once which is sufficient for our needs here. but since we need to do an\n-        // async dispatch, there is a window of time where the default value will be valid before the config\n-        // value(s) can be loaded.\n-        DispatchQueue.main.async {\n-            let config = CAPConfig()\n-            if let configFlag = (config.getValue(\"ios.hideLogs\") as? Bool) ?? (config.getValue(\"hideLogs\") as? Bool) {\n-                enableLogging = !configFlag\n-            }\n-        }\n-        return {}\n-    }()\n-    \n+\n+    public static let config = CAPConfig()\n+\n     public static func print(_ items: Any..., separator: String = \" \", terminator: String = \"\\n\") {\n-        oneTimeConfigCheck()\n-        if enableLogging {\n+        if !self.hideLogs() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5NDE2NA=="}, "originalCommit": {"oid": "60a9cb120972fa65ddba6bf6a67d7d623c6dffdd"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTQ1OTg3OnYy", "diffSide": "RIGHT", "path": "ios/Capacitor/Capacitor/CAPBridgeProtocol.swift", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMTozMTozMFrOHsWXew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTo1Mjo0OVrOHs-NzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI2NTg1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // varidic parameters cannot be exposed to Obj-C\n          \n          \n            \n                // variadic parameters cannot be exposed to Obj-C", "url": "https://github.com/ionic-team/capacitor/pull/3678#discussion_r516265851", "createdAt": "2020-11-02T21:31:30Z", "author": {"login": "aparajita"}, "path": "ios/Capacitor/Capacitor/CAPBridgeProtocol.swift", "diffHunk": "@@ -0,0 +1,124 @@\n+import Foundation\n+import WebKit\n+\n+@objc public protocol CAPBridgeProtocol: NSObjectProtocol {\n+    // MARK: Environment Properties\n+    var viewController: UIViewController? { get }\n+    var config: CAPConfig { get }\n+    var webView: WKWebView? { get }\n+    var isSimEnvironment: Bool { get }\n+    var isDevEnvironment: Bool { get }\n+    @available(iOS 12.0, *)\n+    var userInterfaceStyle: UIUserInterfaceStyle { get }\n+    var statusBarVisible: Bool { get set }\n+    var statusBarStyle: UIStatusBarStyle { get set }\n+    var statusBarAnimation: UIStatusBarAnimation { get set }\n+\n+    // MARK: - Deprecated\n+    @available(*, deprecated, renamed: \"webView\")\n+    func getWebView() -> WKWebView?\n+\n+    @available(*, deprecated, renamed: \"isSimEnvironment\")\n+    func isSimulator() -> Bool\n+\n+    @available(*, deprecated, renamed: \"isDevEnvironment\")\n+    func isDevMode() -> Bool\n+\n+    @available(*, deprecated, renamed: \"statusBarVisible\")\n+    func getStatusBarVisible() -> Bool\n+\n+    @available(*, deprecated, renamed: \"statusBarStyle\")\n+    func getStatusBarStyle() -> UIStatusBarStyle\n+\n+    @available(iOS 12.0, *)\n+    @available(*, deprecated, renamed: \"userInterfaceStyle\")\n+    func getUserInterfaceStyle() -> UIUserInterfaceStyle\n+\n+    // MARK: Call Management\n+    func getSavedCall(_ callbackId: String) -> CAPPluginCall?\n+    func releaseCall(_ call: CAPPluginCall)\n+    func releaseCall(callbackId: String)\n+\n+    // MARK: JavaScript Handling\n+    func evalWithPlugin(_ plugin: CAPPlugin, js: String)\n+    func eval(js: String)\n+\n+    func triggerJSEvent(eventName: String, target: String)\n+    func triggerJSEvent(eventName: String, target: String, data: String)\n+\n+    func triggerWindowJSEvent(eventName: String)\n+    func triggerWindowJSEvent(eventName: String, data: String)\n+\n+    func triggerDocumentJSEvent(eventName: String)\n+    func triggerDocumentJSEvent(eventName: String, data: String)\n+\n+    // MARK: - Logging\n+    func print(message: String, for plugin: CAPPlugin)\n+\n+    // MARK: View Presentation\n+    func showAlertWith(title: String, message: String, buttonTitle: String)\n+    func presentVC(_ viewControllerToPresent: UIViewController, animated flag: Bool, completion: (() -> Void)?)\n+    func dismissVC(animated flag: Bool, completion: (() -> Void)?)\n+}\n+\n+/*\n+ Extensions to Obj-C protocols are not exposed to Obj-C code because of limitations in the runtime. Therefore these methods\n+ are implicitly Swift-only.\n+\n+ The methods marked as deprecated are here because they can be declared without interfering with the synthesized Obj-C setters\n+ for the respective properties (e.g. `setStatusBarVisible:` for 'statusBarVisible`).\n+ */\n+extension CAPBridgeProtocol {\n+    // varidic parameters cannot be exposed to Obj-C", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c4bccdeb5ad338a4df6e1b1145136a65992735"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxODczMg==", "bodyText": "Oops", "url": "https://github.com/ionic-team/capacitor/pull/3678#discussion_r516918732", "createdAt": "2020-11-03T19:52:49Z", "author": {"login": "ikeith"}, "path": "ios/Capacitor/Capacitor/CAPBridgeProtocol.swift", "diffHunk": "@@ -0,0 +1,124 @@\n+import Foundation\n+import WebKit\n+\n+@objc public protocol CAPBridgeProtocol: NSObjectProtocol {\n+    // MARK: Environment Properties\n+    var viewController: UIViewController? { get }\n+    var config: CAPConfig { get }\n+    var webView: WKWebView? { get }\n+    var isSimEnvironment: Bool { get }\n+    var isDevEnvironment: Bool { get }\n+    @available(iOS 12.0, *)\n+    var userInterfaceStyle: UIUserInterfaceStyle { get }\n+    var statusBarVisible: Bool { get set }\n+    var statusBarStyle: UIStatusBarStyle { get set }\n+    var statusBarAnimation: UIStatusBarAnimation { get set }\n+\n+    // MARK: - Deprecated\n+    @available(*, deprecated, renamed: \"webView\")\n+    func getWebView() -> WKWebView?\n+\n+    @available(*, deprecated, renamed: \"isSimEnvironment\")\n+    func isSimulator() -> Bool\n+\n+    @available(*, deprecated, renamed: \"isDevEnvironment\")\n+    func isDevMode() -> Bool\n+\n+    @available(*, deprecated, renamed: \"statusBarVisible\")\n+    func getStatusBarVisible() -> Bool\n+\n+    @available(*, deprecated, renamed: \"statusBarStyle\")\n+    func getStatusBarStyle() -> UIStatusBarStyle\n+\n+    @available(iOS 12.0, *)\n+    @available(*, deprecated, renamed: \"userInterfaceStyle\")\n+    func getUserInterfaceStyle() -> UIUserInterfaceStyle\n+\n+    // MARK: Call Management\n+    func getSavedCall(_ callbackId: String) -> CAPPluginCall?\n+    func releaseCall(_ call: CAPPluginCall)\n+    func releaseCall(callbackId: String)\n+\n+    // MARK: JavaScript Handling\n+    func evalWithPlugin(_ plugin: CAPPlugin, js: String)\n+    func eval(js: String)\n+\n+    func triggerJSEvent(eventName: String, target: String)\n+    func triggerJSEvent(eventName: String, target: String, data: String)\n+\n+    func triggerWindowJSEvent(eventName: String)\n+    func triggerWindowJSEvent(eventName: String, data: String)\n+\n+    func triggerDocumentJSEvent(eventName: String)\n+    func triggerDocumentJSEvent(eventName: String, data: String)\n+\n+    // MARK: - Logging\n+    func print(message: String, for plugin: CAPPlugin)\n+\n+    // MARK: View Presentation\n+    func showAlertWith(title: String, message: String, buttonTitle: String)\n+    func presentVC(_ viewControllerToPresent: UIViewController, animated flag: Bool, completion: (() -> Void)?)\n+    func dismissVC(animated flag: Bool, completion: (() -> Void)?)\n+}\n+\n+/*\n+ Extensions to Obj-C protocols are not exposed to Obj-C code because of limitations in the runtime. Therefore these methods\n+ are implicitly Swift-only.\n+\n+ The methods marked as deprecated are here because they can be declared without interfering with the synthesized Obj-C setters\n+ for the respective properties (e.g. `setStatusBarVisible:` for 'statusBarVisible`).\n+ */\n+extension CAPBridgeProtocol {\n+    // varidic parameters cannot be exposed to Obj-C", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI2NTg1MQ=="}, "originalCommit": {"oid": "84c4bccdeb5ad338a4df6e1b1145136a65992735"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3429, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}