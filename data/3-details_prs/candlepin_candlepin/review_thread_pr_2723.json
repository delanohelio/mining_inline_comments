{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwOTEyMTQx", "number": 2723, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDowMTozNFrOEDdyfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxNjoyM1rOEDeUqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDY5MjQ1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDowMTozNFrOGgf5ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo1NzoyNVrOGgik-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjczMDI1MA==", "bodyText": "I'm torn on this one. I can see a temporary \"FAILED\" output being useful, but it's still kind of \"RUNNING\" since it'll get picked up again unless something breaks internally.", "url": "https://github.com/candlepin/candlepin/pull/2723#discussion_r436730250", "createdAt": "2020-06-08T14:01:34Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java", "diffHunk": "@@ -72,14 +71,54 @@ public AsyncJobStatusDTO populate(ModelTranslator translator, AsyncJobStatus sou\n         destination.setAttempts(source.getAttempts());\n         destination.setMaxAttempts(source.getMaxAttempts());\n         destination.setResult(source.getJobResult());\n+        destination.setState(stateToString(mapState(source.getState())));\n+        destination.setPreviousState(stateToString(mapState(source.getPreviousState())));\n \n-        JobState state = source.getState();\n-        destination.setState(state != null ? state.name() : null);\n+        return destination;\n+    }\n \n-        JobState pstate = source.getPreviousState();\n-        destination.setPreviousState(pstate != null ? pstate.name() : null);\n+    private String stateToString(PublicJobState state) {\n+        if (state == null) {\n+            return null;\n+        }\n+        return state.name();\n+    }\n \n-        return destination;\n+    public static PublicJobState mapState(JobState state) {\n+        if (state == null) {\n+            return null;\n+        }\n+        PublicJobState publicJobState;\n+        switch (state) {\n+            case FINISHED:\n+                publicJobState = PublicJobState.FINISHED;\n+                break;\n+            case CREATED:\n+                publicJobState = PublicJobState.CREATED;\n+                break;\n+            case QUEUED:\n+            case RUNNING:\n+            case SCHEDULED:\n+            case WAITING:\n+                publicJobState = PublicJobState.RUNNING;\n+                break;\n+            case ABORTED:\n+            case CANCELED:\n+            case FAILED:\n+            case FAILED_WITH_RETRY:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10663fde0a6da529aba62d6d194faa72b64bc1e1"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3NDEzNg==", "bodyText": "I haven't thought of that. It makes sense to map it to failed only once it reaches terminal state. Done.", "url": "https://github.com/candlepin/candlepin/pull/2723#discussion_r436774136", "createdAt": "2020-06-08T14:57:25Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java", "diffHunk": "@@ -72,14 +71,54 @@ public AsyncJobStatusDTO populate(ModelTranslator translator, AsyncJobStatus sou\n         destination.setAttempts(source.getAttempts());\n         destination.setMaxAttempts(source.getMaxAttempts());\n         destination.setResult(source.getJobResult());\n+        destination.setState(stateToString(mapState(source.getState())));\n+        destination.setPreviousState(stateToString(mapState(source.getPreviousState())));\n \n-        JobState state = source.getState();\n-        destination.setState(state != null ? state.name() : null);\n+        return destination;\n+    }\n \n-        JobState pstate = source.getPreviousState();\n-        destination.setPreviousState(pstate != null ? pstate.name() : null);\n+    private String stateToString(PublicJobState state) {\n+        if (state == null) {\n+            return null;\n+        }\n+        return state.name();\n+    }\n \n-        return destination;\n+    public static PublicJobState mapState(JobState state) {\n+        if (state == null) {\n+            return null;\n+        }\n+        PublicJobState publicJobState;\n+        switch (state) {\n+            case FINISHED:\n+                publicJobState = PublicJobState.FINISHED;\n+                break;\n+            case CREATED:\n+                publicJobState = PublicJobState.CREATED;\n+                break;\n+            case QUEUED:\n+            case RUNNING:\n+            case SCHEDULED:\n+            case WAITING:\n+                publicJobState = PublicJobState.RUNNING;\n+                break;\n+            case ABORTED:\n+            case CANCELED:\n+            case FAILED:\n+            case FAILED_WITH_RETRY:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjczMDI1MA=="}, "originalCommit": {"oid": "10663fde0a6da529aba62d6d194faa72b64bc1e1"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDc3NjgwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxNTo0MlrOGggsgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo1Nzo0MlrOGgiltg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzI5Nw==", "bodyText": "Should QUEUED be part of RUNNING or CREATED? This is another one where I can see arguments for either case.", "url": "https://github.com/candlepin/candlepin/pull/2723#discussion_r436743297", "createdAt": "2020-06-08T14:15:42Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java", "diffHunk": "@@ -72,14 +71,54 @@ public AsyncJobStatusDTO populate(ModelTranslator translator, AsyncJobStatus sou\n         destination.setAttempts(source.getAttempts());\n         destination.setMaxAttempts(source.getMaxAttempts());\n         destination.setResult(source.getJobResult());\n+        destination.setState(stateToString(mapState(source.getState())));\n+        destination.setPreviousState(stateToString(mapState(source.getPreviousState())));\n \n-        JobState state = source.getState();\n-        destination.setState(state != null ? state.name() : null);\n+        return destination;\n+    }\n \n-        JobState pstate = source.getPreviousState();\n-        destination.setPreviousState(pstate != null ? pstate.name() : null);\n+    private String stateToString(PublicJobState state) {\n+        if (state == null) {\n+            return null;\n+        }\n+        return state.name();\n+    }\n \n-        return destination;\n+    public static PublicJobState mapState(JobState state) {\n+        if (state == null) {\n+            return null;\n+        }\n+        PublicJobState publicJobState;\n+        switch (state) {\n+            case FINISHED:\n+                publicJobState = PublicJobState.FINISHED;\n+                break;\n+            case CREATED:\n+                publicJobState = PublicJobState.CREATED;\n+                break;\n+            case QUEUED:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10663fde0a6da529aba62d6d194faa72b64bc1e1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3NDMyNg==", "bodyText": "I guess you are right. Queued job is not running yet so we can merge the state into the CREATED instead of RUNNING. Done.", "url": "https://github.com/candlepin/candlepin/pull/2723#discussion_r436774326", "createdAt": "2020-06-08T14:57:42Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/AsyncJobStatusTranslator.java", "diffHunk": "@@ -72,14 +71,54 @@ public AsyncJobStatusDTO populate(ModelTranslator translator, AsyncJobStatus sou\n         destination.setAttempts(source.getAttempts());\n         destination.setMaxAttempts(source.getMaxAttempts());\n         destination.setResult(source.getJobResult());\n+        destination.setState(stateToString(mapState(source.getState())));\n+        destination.setPreviousState(stateToString(mapState(source.getPreviousState())));\n \n-        JobState state = source.getState();\n-        destination.setState(state != null ? state.name() : null);\n+        return destination;\n+    }\n \n-        JobState pstate = source.getPreviousState();\n-        destination.setPreviousState(pstate != null ? pstate.name() : null);\n+    private String stateToString(PublicJobState state) {\n+        if (state == null) {\n+            return null;\n+        }\n+        return state.name();\n+    }\n \n-        return destination;\n+    public static PublicJobState mapState(JobState state) {\n+        if (state == null) {\n+            return null;\n+        }\n+        PublicJobState publicJobState;\n+        switch (state) {\n+            case FINISHED:\n+                publicJobState = PublicJobState.FINISHED;\n+                break;\n+            case CREATED:\n+                publicJobState = PublicJobState.CREATED;\n+                break;\n+            case QUEUED:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzI5Nw=="}, "originalCommit": {"oid": "10663fde0a6da529aba62d6d194faa72b64bc1e1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDc3OTkzOnYy", "diffSide": "LEFT", "path": "server/spec/job_status_spec.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxNjoyM1rOGggufA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo1Nzo1N1rOGgimfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzgwNA==", "bodyText": "As mentioned in IRC, let's hang on to the CANCELED state, since it doesn't fit into either of the two completion states from the request, and it was preexisting so we won't break clients.", "url": "https://github.com/candlepin/candlepin/pull/2723#discussion_r436743804", "createdAt": "2020-06-08T14:16:23Z", "author": {"login": "Ceiu"}, "path": "server/spec/job_status_spec.rb", "diffHunk": "@@ -123,18 +123,18 @@\n       job = @user.autoheal_org(@owner['key'])\n       #make sure we see a job waiting to go\n       joblist = @cp.list_jobs(@owner['key'])\n-      expect(joblist.find { |j| j['id'] == job['id'] }['state']).to eq('QUEUED')\n+      expect(joblist.find { |j| j['id'] == job['id'] }['state']).to eq('RUNNING')\n \n       @user.cancel_job(job['id'])\n       #make sure we see a job canceled\n       joblist = @cp.list_jobs(@owner['key'])\n-      expect(joblist.find { |j| j['id'] == job['id'] }['state']).to eq('CANCELED')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10663fde0a6da529aba62d6d194faa72b64bc1e1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3NDUyNw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2723#discussion_r436774527", "createdAt": "2020-06-08T14:57:57Z", "author": {"login": "Januson"}, "path": "server/spec/job_status_spec.rb", "diffHunk": "@@ -123,18 +123,18 @@\n       job = @user.autoheal_org(@owner['key'])\n       #make sure we see a job waiting to go\n       joblist = @cp.list_jobs(@owner['key'])\n-      expect(joblist.find { |j| j['id'] == job['id'] }['state']).to eq('QUEUED')\n+      expect(joblist.find { |j| j['id'] == job['id'] }['state']).to eq('RUNNING')\n \n       @user.cancel_job(job['id'])\n       #make sure we see a job canceled\n       joblist = @cp.list_jobs(@owner['key'])\n-      expect(joblist.find { |j| j['id'] == job['id'] }['state']).to eq('CANCELED')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzgwNA=="}, "originalCommit": {"oid": "10663fde0a6da529aba62d6d194faa72b64bc1e1"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4207, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}