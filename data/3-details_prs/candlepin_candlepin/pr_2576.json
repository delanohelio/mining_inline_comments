{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1Njk3NTgw", "number": 2576, "title": "[F] ENT-1828 Update account refresh flow to populate new tables.", "bodyText": "Removed logic for setting provided and derived provided product from CandlepinPoolManager.\nRemoved logic for setting provided and derived provided product from ImportedEntityCompiler, since Subscription Info adapter now does not support Provided products.\nModified ProductManager to support applying provided product changes to Product entity for account refresh flow.\nPoolRules class modified, not to detect provide product changes, since provided products are the part of a main product these changes are detected in Product Manger itself.\nOverride annotation is removed from manifest/v1/SubscriptionDTO.java for Get/Set providedProducts methods.\ngetProvidedProducts & getDerivedProvidedProducts methods are now removed from SubscriptionInfo interface.\nModified HostedTestSubscriptionResource & HostedTestSubscriptionServiceAdapter to support the change related to provided products being part of mkt products.\nBunch of JPQL and hibernate criteria queries are modified to correctly reference/fetch the provided products from new table cp2_product_provided_products\nwe do not need to accumulate provided products in case of stacked entitlement as marketing product and stack id has one to one relationship i.e. different marketing product will not have the same stacking id and all the required provided products will be available in marketing product itself from adapter. Accumulator logic from StackedSubPoolValueAccumulator is now removed.", "createdAt": "2020-01-22T07:04:04Z", "url": "https://github.com/candlepin/candlepin/pull/2576", "merged": true, "mergeCommit": {"oid": "94dc008a3c50bdd9274c52167e6cbaa1821e67a6"}, "closed": true, "closedAt": "2020-03-12T07:53:42Z", "author": {"login": "wolfdale"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8wYoeAFqTM0NjM4MDg3OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcM273PAFqTM3MzMzNzQ0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MzgwODc4", "url": "https://github.com/candlepin/candlepin/pull/2576#pullrequestreview-346380878", "createdAt": "2020-01-22T07:12:44Z", "commit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzoxMjo0NFrOFgSU7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzoxMjo0NFrOFgSU7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5OTAyMQ==", "bodyText": "The functionality is not supported now. Currently this test is ignored and finally will remove this if we have consensus on it.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r369399021", "createdAt": "2020-01-22T07:12:44Z", "author": {"login": "wolfdale"}, "path": "server/src/test/java/org/candlepin/policy/PoolRulesStackDerivedTest.java", "diffHunk": "@@ -323,6 +324,7 @@ public void mergedProductAttributes() {\n     }\n \n     @Test\n+    @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3Mzk4MjM5", "url": "https://github.com/candlepin/candlepin/pull/2576#pullrequestreview-347398239", "createdAt": "2020-01-23T15:42:18Z", "commit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTo0MjoxOVrOFhC6CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTo1NzowNFrOFhDdXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5NDk1Mw==", "bodyText": "You can do this logic without collecting them into another collection by using .forEach if you want to continue using a stream, or by simply using a normal for loop in place of all of this.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r370194953", "createdAt": "2020-01-23T15:42:19Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/manifest/v1/ProductDTO.java", "diffHunk": "@@ -922,6 +1028,13 @@ public ProductDTO clone() {\n         copy.setDependentProductIds(this.getDependentProductIds());\n         copy.setBranding(this.getBranding());\n \n+        if (this.getProvidedProducts() != null) {\n+            copy.providedProducts = new HashSet<>();\n+            copy.providedProducts.addAll(this.getProvidedProducts().stream()\n+                .map(prodDTO -> prodDTO.clone())\n+                .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5NTQzMw==", "bodyText": "Same thing here: this logic can be done without the creation, buildup and teardown of another collection.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r370195433", "createdAt": "2020-01-23T15:43:05Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/manifest/v1/ProductDTO.java", "diffHunk": "@@ -949,6 +1062,12 @@ public ProductDTO populate(ProductDTO source) {\n         this.setDependentProductIds(source.getDependentProductIds());\n         this.setBranding(source.getBranding());\n \n+        if (source.getProvidedProducts() != null) {\n+            this.setProvidedProducts(source.getProvidedProducts().stream()\n+                .map(prod -> new ProductDTO(prod))\n+                .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5ODcyNg==", "bodyText": "I don't believe we need to manually calculate everything here. We should be able to just throw the collection at the HashCodeBuilder like we do with content.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r370198726", "createdAt": "2020-01-23T15:48:20Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -982,14 +1044,28 @@ public boolean equals(Object obj) {\n             .append(this.content, that.content)\n             .append(this.dependentProductIds, that.dependentProductIds)\n             .append(this.branding, that.branding)\n+            .append(this.providedProducts, that.providedProducts)\n             .append(this.href, that.href)\n             .append(this.locked, that.locked);\n \n-        return super.equals(obj) && builder.isEquals();\n+        boolean equals = super.equals(obj) && builder.isEquals();\n+        equals = equals && Util.collectionsAreEqual(this.providedProducts, that.providedProducts);\n+\n+        return equals;\n+\n     }\n \n     @Override\n     public int hashCode() {\n+        int ppHashCode = 0;\n+        Collection<ProductData> providedProducts = this.getProvidedProducts();\n+\n+        if (providedProducts != null) {\n+            for (ProductData pProduct : providedProducts) {\n+                ppHashCode = 31 * ppHashCode + (pProduct != null ? pProduct.hashCode() : 0);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5OTEzMg==", "bodyText": "Just like the manifest product DTO: we don't want to incur the cost of building another collection if we don't have to.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r370199132", "createdAt": "2020-01-23T15:49:01Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -1034,6 +1111,13 @@ public Object clone() {\n                 this.branding.stream().map(Branding::clone).collect(Collectors.toSet()));\n         }\n \n+        if (this.providedProducts != null) {\n+            copy.providedProducts = new HashSet<>();\n+            copy.providedProducts.addAll(this.providedProducts.stream()\n+                .map(prodData -> (ProductData) prodData.clone())\n+                .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5OTI5Nw==", "bodyText": "Since we're offloading to the setProvidedProducts method, this is probably entirely extraneous.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r370199297", "createdAt": "2020-01-23T15:49:17Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -1068,6 +1152,12 @@ public ProductData populate(ProductData source) {\n         this.setDependentProductIds(source.getDependentProductIds());\n         this.setBranding(source.getBranding());\n \n+        if (source.getProvidedProducts() != null) {\n+            this.setProvidedProducts(source.getProvidedProducts().stream()\n+                .map(prod -> new ProductData(prod))\n+                .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwMzk5Ng==", "bodyText": "If we're going to boil this down to one check, we should use the UUID, since we can lean on the fact our products are singletons and will only see new UUIDs if the product itself has already been found to change elsewhere. We should also document why that single check is okay.\nIt would also be good to identify what the exact intent is. I feel we're starting to lose sight of what these methods were originally intended to do, and a lot of them can be refactored down to one or two lines of code. For instance, this particular method looks like it could be:\nboolean changed = incomingProduct.getUuid() == null ||\n  !incomingProduct.getUuid().equals(existingProduct.getUuid());\n\nif (changed) {\n  existingPool.setProduct(incomingProduct);\n}\n\nreturn changed;\n\nI'm not sure what value the changedProducts bits has these days. The entire flow looks like it could use a review.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r370203996", "createdAt": "2020-01-23T15:57:04Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,\n+        Product> changedProducts) {\n \n         Product existingProduct = existingPool.getProduct();\n-        Set<Product> currentProvided = productCurator.getPoolProvidedProductsCached(existingPool);\n         String pid = existingProduct.getId();\n \n         // TODO: ideally we would differentiate between these different product changes\n         // a little, but in the end it probably doesn't matter:\n-        boolean productsChanged =\n-            (pid != null && !pid.equals(incomingProduct.getId())) ||\n-            !currentProvided.equals(incomingProvided);\n+        boolean productsChanged = pid != null && !pid.equals(incomingProduct.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ce1a32af1957a34ab083ae8d4f55882dcdeccfd", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/5ce1a32af1957a34ab083ae8d4f55882dcdeccfd", "committedDate": "2020-01-26T14:07:06Z", "message": "Merge branch 'prak/refresher' of https://github.com/candlepin/candlepin into prak/refresher"}, "afterCommit": {"oid": "a4d42be84b342c222d9dd55881fe8a8ef2fce5b2", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/a4d42be84b342c222d9dd55881fe8a8ef2fce5b2", "committedDate": "2020-01-26T15:31:05Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4d42be84b342c222d9dd55881fe8a8ef2fce5b2", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/a4d42be84b342c222d9dd55881fe8a8ef2fce5b2", "committedDate": "2020-01-26T15:31:05Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}, "afterCommit": {"oid": "7aa492a82fdabfd698e136161474d2fb990f55d2", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/7aa492a82fdabfd698e136161474d2fb990f55d2", "committedDate": "2020-01-28T04:10:50Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7aa492a82fdabfd698e136161474d2fb990f55d2", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/7aa492a82fdabfd698e136161474d2fb990f55d2", "committedDate": "2020-01-28T04:10:50Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}, "afterCommit": {"oid": "daf03657c78f8a304f653d57ec090d6f8aa82162", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/daf03657c78f8a304f653d57ec090d6f8aa82162", "committedDate": "2020-02-02T12:22:26Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "daf03657c78f8a304f653d57ec090d6f8aa82162", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/daf03657c78f8a304f653d57ec090d6f8aa82162", "committedDate": "2020-02-02T12:22:26Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}, "afterCommit": {"oid": "62390ae75c5ef4bf5a02a1ba6b3dc3094570d435", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/62390ae75c5ef4bf5a02a1ba6b3dc3094570d435", "committedDate": "2020-02-02T12:26:35Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62390ae75c5ef4bf5a02a1ba6b3dc3094570d435", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/62390ae75c5ef4bf5a02a1ba6b3dc3094570d435", "committedDate": "2020-02-02T12:26:35Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}, "afterCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/1ef257e9fa01fed4210870c0247de75734125bd1", "committedDate": "2020-02-03T09:51:10Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzM4NjYy", "url": "https://github.com/candlepin/candlepin/pull/2576#pullrequestreview-352338662", "createdAt": "2020-02-03T15:27:33Z", "commit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyNzozM1rOFk1VRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjowMjoyMVrOFk2owg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2Njg1Mg==", "bodyText": "These two methods are identical outside of the product reference. Whether or not we even need to bulk fetch early now since we're fetching it through the model rather than the hitting the DB every time is up for debate, and would come down to whether or not the product lookup on pools is lazy and if it needs to be populated at call time.\nAnyway, if we still end up wanting to keep this bulk behavior, there's no need to break it up into two virtually-identical methods when we don't use them independently. This should be merged into one method that either populates two maps, or returns an array of maps or something. There's no reason to iterate through the pools twice for the same work.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374166852", "createdAt": "2020-02-03T15:27:33Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java", "diffHunk": "@@ -1432,6 +1375,44 @@ public Pool get(String poolId) {\n         return enforced;\n     }\n \n+    private Map<String, Set<String>> getAllProvidedProductsFromPool(Collection<Pool> pools) {\n+        Map<String, Set<String>> providedProductMap = new HashMap<>();\n+\n+        if (pools != null && !pools.isEmpty()) {\n+            for (Pool pool : pools) {\n+                if (pool != null && pool.getId() != null && pool.getProduct() != null &&\n+                    pool.getProduct().getProvidedProducts() != null) {\n+\n+                    Set<String> listOfIds = pool.getProduct().getProvidedProducts().stream()\n+                        .map(Product::getId).collect(Collectors.toSet());\n+\n+                    providedProductMap.put(pool.getId(), listOfIds);\n+                }\n+            }\n+        }\n+\n+        return providedProductMap;\n+    }\n+\n+    private Map<String, Set<String>> getAllDerivedProvidedProductsFromPool(Collection<Pool> pools) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3MjQ0OA==", "bodyText": "This block has shown up in another PR, which is a sign that we have dependent work, and is something we should strive to avoid in most cases.\nAdditionally, database operations are slow, and lookups should be avoided in loops if at all possible. Change this to a bulk lookup.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374172448", "createdAt": "2020-02-03T15:36:41Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -629,18 +704,57 @@ private Product applyProductChanges(Product entity, ProductDTO update, Owner own\n     private Product applyProvidedProductChanges(Product entity, ProductDTO update, Owner owner) {\n \n         if (update.getProvidedProducts() != null && !update.getProvidedProducts().isEmpty()) {\n-            entity.getProvidedProducts().clear();\n+            Set<Product> product = new HashSet<>();\n \n             for (ProductDTO providedProductDTO : update.getProvidedProducts()) {\n                 if (providedProductDTO != null && providedProductDTO.getId() != null) {\n                     Product newProd = this.ownerProductCurator.getProductById(owner,\n                         providedProductDTO.getId());\n \n                     if (newProd != null) {\n-                        entity.addProvidedProduct(newProd);\n+                        product.add(newProd);\n                     }\n                 }\n             }\n+\n+            entity.setProvidedProducts(product);\n+        }\n+\n+        return entity;\n+    }\n+\n+    /**\n+     * Applies the changes related to provided products from the given productInfo to the specified entity.\n+     *\n+     * @param entity\n+     *  The entity to modify.\n+     *\n+     * @param update\n+     *  The productInfo interface.\n+     *\n+     * @param owner\n+     *  An owner to use for resolving entity references.\n+     *\n+     * @return\n+     *  The updated product entity.\n+     */\n+    private Product applyProvidedProductChanges(Product entity, ProductInfo update, Owner owner) {\n+\n+        if (update.getProvidedProducts() != null && !update.getProvidedProducts().isEmpty()) {\n+            Set<Product> product = new HashSet<>();\n+\n+            for (ProductInfo pInfo : update.getProvidedProducts()) {\n+                if (pInfo != null && pInfo.getId() != null) {\n+                    Product newProd = this.ownerProductCurator.getProductById(owner,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3Mzg2NA==", "bodyText": "Use a set here; we're not interested in maintaining duplicate references.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374173864", "createdAt": "2020-02-03T15:39:10Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -978,6 +1092,17 @@ public int compare(Object lhs, Object rhs) {\n             }\n         }\n \n+        if (update.getProvidedProducts() != null) {\n+            if (!Util.collectionsAreEqual(entity.getProvidedProducts().stream()\n+                .map(Product::getId)\n+                .collect(Collectors.toList()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3ODQ5MA==", "bodyText": "This is a bit of an odd case, and I'm not 100% sure how to handle it.\nI feel like if we're setting the product at all, we should set it wholesale, which includes its provided products in a more concrete way (that is, not using partial information).\nThe thing that gives me pause here is I don't recall if we have a legitimate use-case where we change the provided products on a pool independently from the product itself. Perhaps that's a question to pose to a wider audience and then, depending on that discussion, making changes accordingly.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374178490", "createdAt": "2020-02-03T15:46:43Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -169,24 +177,34 @@ public SubscriptionInfo updateSubscription(String subscriptionId, SubscriptionIn\n \n         // Do product resolution here\n         ProductData product = this.resolveProduct(sinfo.getProduct());\n-        Collection<ProductData> providedProducts = this.resolveProducts(sinfo.getProvidedProducts());\n+\n+        if (sinfo.getProduct() != null) {\n+            Collection<ProductData> providedProducts =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4Mzk3NQ==", "bodyText": "This method should not exist. Products should only be referenced if they already exist in the system, which prevents one product from providing a product that doesn't exist. Every usage of this method should be replaced with the existing resolveProducts method instead.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374183975", "createdAt": "2020-02-03T15:55:30Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -820,6 +842,35 @@ protected ProductData resolveProduct(ProductInfo pinfo) {\n         return null;\n     }\n \n+    protected Collection<ProductData> resolveProvidedProducts(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4ODIyNg==", "bodyText": "We probably don't need both anymore (if a derived product changed, the product itself changed and should show up in changedProducts); hence why I said the whole flow could use a review. The original intent is slowly getting lost, and it would do us some good to re-evaluate and refactor this whole area.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374188226", "createdAt": "2020-02-03T16:02:21Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,\n+        Product> changedProducts) {\n \n         Product existingProduct = existingPool.getProduct();\n-        Set<Product> currentProvided = productCurator.getPoolProvidedProductsCached(existingPool);\n         String pid = existingProduct.getId();\n \n         // TODO: ideally we would differentiate between these different product changes\n         // a little, but in the end it probably doesn't matter:\n-        boolean productsChanged =\n-            (pid != null && !pid.equals(incomingProduct.getId())) ||\n-            !currentProvided.equals(incomingProvided);\n+        boolean productsChanged = pid != null && !pid.equals(incomingProduct.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwMzk5Ng=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMjI5OTE5", "url": "https://github.com/candlepin/candlepin/pull/2576#pullrequestreview-352229919", "createdAt": "2020-02-03T12:52:20Z", "commit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMjo1MjoyMFrOFkwUQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzoyNToxNlrOFkxMGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4NDY3Mg==", "bodyText": "There is no need to create this method. The existing resolveProduct/resolveProducts methods can be used instead. spec tests should explicitly make sure that provided products are created first, and then any marketing products that are referencing them.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374084672", "createdAt": "2020-02-03T12:52:20Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -820,6 +842,35 @@ protected ProductData resolveProduct(ProductInfo pinfo) {\n         return null;\n     }\n \n+    protected Collection<ProductData> resolveProvidedProducts(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4NzM4OA==", "bodyText": "There is no need for all this, since this.setProvidedProducts is already doing all these exact checks.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374087388", "createdAt": "2020-02-03T12:58:43Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -1139,9 +1140,19 @@ public ProductData populate(ProductData source) {\n         this.setBranding(source.getBranding());\n \n         if (source.getProvidedProducts() != null) {\n-            this.setProvidedProducts(source.getProvidedProducts().stream()\n-                .map(prod -> new ProductData(prod))\n-                .collect(Collectors.toSet()));\n+            if (this.providedProducts == null) {\n+                this.providedProducts = new HashSet<>();\n+            }\n+            else {\n+                this.providedProducts.clear();\n+            }\n+\n+            for (ProductData pData : source.getProvidedProducts()) {\n+                this.providedProducts.add(new ProductData(pData));\n+            }\n+        }\n+        else {\n+            this.setProvidedProducts(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4ODE1NQ==", "bodyText": "Same here: duplicating what this.setProvidedProducts is already doing", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374088155", "createdAt": "2020-02-03T13:00:33Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -1195,9 +1206,19 @@ public ProductData populate(Product source) {\n         this.setBranding(source.getBranding());\n \n         if (source.getProvidedProducts() != null) {\n-            this.setProvidedProducts(source.getProvidedProducts().stream()\n-                .map(prod -> new ProductData(prod))\n-                .collect(Collectors.toSet()));\n+            if (this.providedProducts == null) {\n+                this.providedProducts = new HashSet<>();\n+            }\n+            else {\n+                this.providedProducts.clear();\n+            }\n+\n+            for (Product pData : source.getProvidedProducts()) {\n+                this.providedProducts.add(new ProductData(pData));\n+            }\n+        }\n+        else {\n+            this.setProvidedProducts(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4ODkxNw==", "bodyText": "This can be removed completely", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374088917", "createdAt": "2020-02-03T13:02:27Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolHelper.java", "diffHunk": "@@ -264,25 +191,23 @@ public static Pool clonePool(Pool sourcePool, Product product, String quantity,\n \n     private static Pool createPool(Product product, Owner owner, String quantity, Date startDate,\n         Date endDate, String contractNumber, String accountNumber, String orderNumber,\n-        Set<Product> providedProducts, Entitlement sourceEntitlement, Consumer sourceConsumer,\n+        Entitlement sourceEntitlement, Consumer sourceConsumer,\n         Pool sourcePool) {\n \n         Long q = Pool.parseQuantity(quantity);\n \n-        Pool pool = new Pool(\n-            owner,\n-            product,\n-            new HashSet<>(),\n-            q,\n-            startDate,\n-            endDate,\n-            contractNumber,\n-            accountNumber,\n-            orderNumber\n-        );\n+        Pool pool = new Pool();\n+        pool.setOwner(owner);\n+        pool.setProduct(product);\n+        pool.setQuantity(q);\n+        pool.setStartDate(startDate);\n+        pool.setEndDate(endDate);\n+        pool.setContractNumber(contractNumber);\n+        pool.setAccountNumber(accountNumber);\n+        pool.setOrderNumber(orderNumber);\n \n         // Must be sure to copy the provided products, not try to re-use them directly:\n-        pool.setProvidedProducts(providedProducts);\n+        // pool.getProduct().setProvidedProducts(product.getProvidedProducts());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5ODk3MQ==", "bodyText": "It's better to move the whole element (Map<String, Product> changedProducts) to the next line, instead of breaking it in the middle here", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374098971", "createdAt": "2020-02-03T13:25:16Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/1ef257e9fa01fed4210870c0247de75734125bd1", "committedDate": "2020-02-03T09:51:10Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}, "afterCommit": {"oid": "0b803047891c3ff9fb3735ba47b233411e472271", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/0b803047891c3ff9fb3735ba47b233411e472271", "committedDate": "2020-02-06T14:01:30Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b803047891c3ff9fb3735ba47b233411e472271", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/0b803047891c3ff9fb3735ba47b233411e472271", "committedDate": "2020-02-06T14:01:30Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}, "afterCommit": {"oid": "6780d7dae2aa20864e7e168dda13d99952df19f0", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/6780d7dae2aa20864e7e168dda13d99952df19f0", "committedDate": "2020-02-11T07:07:29Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6780d7dae2aa20864e7e168dda13d99952df19f0", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/6780d7dae2aa20864e7e168dda13d99952df19f0", "committedDate": "2020-02-11T07:07:29Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}, "afterCommit": {"oid": "82995c9e425cc457fbe7ce84048e53dcb0501d72", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/82995c9e425cc457fbe7ce84048e53dcb0501d72", "committedDate": "2020-02-11T13:25:22Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82995c9e425cc457fbe7ce84048e53dcb0501d72", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/82995c9e425cc457fbe7ce84048e53dcb0501d72", "committedDate": "2020-02-11T13:25:22Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}, "afterCommit": {"oid": "cbbf4bf1d01efcdc3dbd51691c61596d966f33a9", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/cbbf4bf1d01efcdc3dbd51691c61596d966f33a9", "committedDate": "2020-02-12T08:31:17Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cbbf4bf1d01efcdc3dbd51691c61596d966f33a9", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/cbbf4bf1d01efcdc3dbd51691c61596d966f33a9", "committedDate": "2020-02-12T08:31:17Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}, "afterCommit": {"oid": "26637b1844bf68431ad0cde15854de7596cef1fc", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/26637b1844bf68431ad0cde15854de7596cef1fc", "committedDate": "2020-02-12T18:03:46Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d28fdc5849370ba6004426bfb1800c0bb261ad71", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/d28fdc5849370ba6004426bfb1800c0bb261ad71", "committedDate": "2020-02-17T09:52:21Z", "message": "Junit Itr 3"}, "afterCommit": {"oid": "5c7cdeb634b036153fe84018c374e35241ab1b7a", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/5c7cdeb634b036153fe84018c374e35241ab1b7a", "committedDate": "2020-02-25T15:01:14Z", "message": "fix for refresh/content"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76d51aafd89242424615827da9e86ab826409460", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/76d51aafd89242424615827da9e86ab826409460", "committedDate": "2020-02-26T06:59:00Z", "message": "Refactor & format fix"}, "afterCommit": {"oid": "cb487552c38090f3a9e6a56bad28e7daf61cada7", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/cb487552c38090f3a9e6a56bad28e7daf61cada7", "committedDate": "2020-02-26T10:11:49Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb487552c38090f3a9e6a56bad28e7daf61cada7", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/cb487552c38090f3a9e6a56bad28e7daf61cada7", "committedDate": "2020-02-26T10:11:49Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}, "afterCommit": {"oid": "b95481aa9d8a3ed1f46a4f2dd5a3f60ea59944e7", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/b95481aa9d8a3ed1f46a4f2dd5a3f60ea59944e7", "committedDate": "2020-02-26T10:26:13Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01dbbaad6341a723185ab8d318ea0868162ddcf1", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/01dbbaad6341a723185ab8d318ea0868162ddcf1", "committedDate": "2020-02-26T14:18:11Z", "message": "fix for mysql"}, "afterCommit": {"oid": "f214d0c2b6abb542f4ffb7c15f5667d0d761d580", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/f214d0c2b6abb542f4ffb7c15f5667d0d761d580", "committedDate": "2020-02-26T15:32:21Z", "message": "fix for mysql"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f214d0c2b6abb542f4ffb7c15f5667d0d761d580", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/f214d0c2b6abb542f4ffb7c15f5667d0d761d580", "committedDate": "2020-02-26T15:32:21Z", "message": "fix for mysql"}, "afterCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/60847589110205e76715604b3e354e5b404b1129", "committedDate": "2020-02-27T06:51:15Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NDY2NjYz", "url": "https://github.com/candlepin/candlepin/pull/2576#pullrequestreview-366466663", "createdAt": "2020-02-28T15:10:48Z", "commit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxMDo0OFrOFv4NEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo1MToxNlrOFv5sRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0ODI0Mw==", "bodyText": "This is very bad. Never modify an encapsulated collection directly unless absolutely necessary.\nFor reference, Java doesn't have a scope keyword for indicating \"subclasses only\"; and protected is the next closest thing to it. Whenever you encounter something declared as protected, try to analyze whether or not it's intended to be used outside of its class hierarchy or not.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385748243", "createdAt": "2020-02-28T15:10:48Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionResource.java", "diffHunk": "@@ -128,6 +130,32 @@ protected void createSubscriptionObjects(Subscription subscription) {\n                 this.adapter.createProduct(product);\n             }\n         }\n+\n+        if (subscription.getProduct() != null && subscription.getProvidedProducts() != null) {\n+            ProductData mktProduct = (ProductData) this.adapter.getProduct(subscription.getProduct().getId());\n+            Set<ProductData> provided = new HashSet<>();\n+\n+            for (ProductInfo providedProduct : subscription.getProvidedProducts()) {\n+                provided.add((ProductData) this.adapter.getProduct(providedProduct.getId()));\n+            }\n+\n+            mktProduct.setProvidedProducts(provided);\n+            this.adapter.productMap.put(mktProduct.getId(), mktProduct);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTcxNQ==", "bodyText": "ProductData is a ProductInfo. Also, since we're just using this to feed back into the adapter's map, the casting seems unnecessary.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385749715", "createdAt": "2020-02-28T15:13:21Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionResource.java", "diffHunk": "@@ -128,6 +130,32 @@ protected void createSubscriptionObjects(Subscription subscription) {\n                 this.adapter.createProduct(product);\n             }\n         }\n+\n+        if (subscription.getProduct() != null && subscription.getProvidedProducts() != null) {\n+            ProductData mktProduct = (ProductData) this.adapter.getProduct(subscription.getProduct().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MDA4OA==", "bodyText": "Same deal here. We're using a lot of implementation-specific details about how the adapter works to make changes to its internals outside of its scope, which is very bad, and technically broken.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385750088", "createdAt": "2020-02-28T15:14:02Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionResource.java", "diffHunk": "@@ -128,6 +130,32 @@ protected void createSubscriptionObjects(Subscription subscription) {\n                 this.adapter.createProduct(product);\n             }\n         }\n+\n+        if (subscription.getProduct() != null && subscription.getProvidedProducts() != null) {\n+            ProductData mktProduct = (ProductData) this.adapter.getProduct(subscription.getProduct().getId());\n+            Set<ProductData> provided = new HashSet<>();\n+\n+            for (ProductInfo providedProduct : subscription.getProvidedProducts()) {\n+                provided.add((ProductData) this.adapter.getProduct(providedProduct.getId()));\n+            }\n+\n+            mktProduct.setProvidedProducts(provided);\n+            this.adapter.productMap.put(mktProduct.getId(), mktProduct);\n+        }\n+\n+        if (subscription.getDerivedProduct() != null && subscription.getDerivedProvidedProducts() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NTQ0Nw==", "bodyText": "Same here; subscription should be updated to do redirection rather than forcing everything that uses it to manage it.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385755447", "createdAt": "2020-02-28T15:23:13Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -124,9 +124,17 @@ public SubscriptionInfo createSubscription(SubscriptionInfo sinfo) {\n         sdata.setOwner(this.resolveOwner(sinfo.getOwner()));\n \n         sdata.setProduct(this.resolveProduct(sinfo.getProduct()));\n-        sdata.setProvidedProducts(this.resolveProducts(sinfo.getProvidedProducts()));\n+\n+        if (sdata.getProduct() != null) {\n+            sdata.setProvidedProducts(sdata.getProduct().getProvidedProducts());\n+        }\n+\n         sdata.setDerivedProduct(this.resolveProduct(sinfo.getDerivedProduct()));\n-        sdata.setDerivedProvidedProducts(this.resolveProducts(sinfo.getDerivedProvidedProducts()));\n+\n+        if (sdata.getDerivedProduct() != null) {\n+            sdata.setDerivedProvidedProducts(\n+                sdata.getDerivedProduct().getProvidedProducts());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NzM3MQ==", "bodyText": "This is probably entirely unnecessary. Rather than doing an assignment in every case, Subscription should be updated to not have a mutator for provided products, and return the product's provided products from its accessor.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385757371", "createdAt": "2020-02-28T15:26:27Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -124,9 +124,17 @@ public SubscriptionInfo createSubscription(SubscriptionInfo sinfo) {\n         sdata.setOwner(this.resolveOwner(sinfo.getOwner()));\n \n         sdata.setProduct(this.resolveProduct(sinfo.getProduct()));\n-        sdata.setProvidedProducts(this.resolveProducts(sinfo.getProvidedProducts()));\n+\n+        if (sdata.getProduct() != null) {\n+            sdata.setProvidedProducts(sdata.getProduct().getProvidedProducts());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1ODMzMw==", "bodyText": "As above, let's just let the subscription handle all the redirection for us.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385758333", "createdAt": "2020-02-28T15:27:55Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -169,24 +177,34 @@ public SubscriptionInfo updateSubscription(String subscriptionId, SubscriptionIn\n \n         // Do product resolution here\n         ProductData product = this.resolveProduct(sinfo.getProduct());\n-        Collection<ProductData> providedProducts = this.resolveProducts(sinfo.getProvidedProducts());\n-\n-        ProductData dProduct = this.resolveProduct(sinfo.getDerivedProduct());\n-        Collection<ProductData> dpProvidedProducts = this.resolveProducts(sinfo.getDerivedProvidedProducts());\n \n         // If they all resolved, set the products\n         if (product != null) {\n             sdata.setProduct(product);\n-        }\n+            Collection<ProductData> providedProducts =\n+                this.resolveProducts(product.getProvidedProducts());\n \n-        if (providedProducts != null) {\n-            sdata.setProvidedProducts(providedProducts);\n+            if (providedProducts != null) {\n+                sdata.setProvidedProducts(providedProducts);\n+            }\n+        }\n+        else {\n+            sdata.setProvidedProducts(null);\n         }\n \n+        ProductData dProduct = this.resolveProduct(sinfo.getDerivedProduct());\n         sdata.setDerivedProduct(dProduct);\n \n-        if (dpProvidedProducts != null) {\n-            sdata.setDerivedProvidedProducts(dpProvidedProducts);\n+        if (dProduct != null) {\n+            Collection<ProductData> dpProvidedProducts =\n+                this.resolveProducts(dProduct.getProvidedProducts());\n+\n+            if (dpProvidedProducts != null) {\n+                sdata.setDerivedProvidedProducts(dpProvidedProducts);\n+            }\n+        }\n+        else {\n+            sdata.setDerivedProvidedProducts(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1ODg5Nw==", "bodyText": "Both of these should be unnecessary with an update to subscription.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385758897", "createdAt": "2020-02-28T15:28:55Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -601,24 +623,24 @@ protected void updateSubscriptionProductMappings(Subscription sdata) {\n \n         if (sdata.getProduct() != null && sdata.getProduct().getId() != null) {\n             pids.add(sdata.getProduct().getId());\n-        }\n \n-        if (sdata.getProvidedProducts() != null) {\n-            for (ProductData pdata : sdata.getProvidedProducts()) {\n-                if (pdata != null && pdata.getId() != null) {\n-                    pids.add(pdata.getId());\n+            if (sdata.getProduct().getProvidedProducts() != null) {\n+                for (ProductData pdata : sdata.getProduct().getProvidedProducts()) {\n+                    if (pdata != null && pdata.getId() != null) {\n+                        pids.add(pdata.getId());\n+                    }\n                 }\n             }\n         }\n \n         if (sdata.getDerivedProduct() != null && sdata.getDerivedProduct().getId() != null) {\n             pids.add(sdata.getDerivedProduct().getId());\n-        }\n \n-        if (sdata.getDerivedProvidedProducts() != null) {\n-            for (ProductData pdata : sdata.getDerivedProvidedProducts()) {\n-                if (pdata != null && pdata.getId() != null) {\n-                    pids.add(pdata.getId());\n+            if (sdata.getDerivedProduct().getProvidedProducts() != null) {\n+                for (ProductData pdata : sdata.getDerivedProduct().getProvidedProducts()) {\n+                    if (pdata != null && pdata.getId() != null) {\n+                        pids.add(pdata.getId());\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1OTY2OA==", "bodyText": "Leave the comment lines in here, the SQL itself does not make clear what each join is doing or why it's necessary.\nAlso, couldn't hurt to add a note about this not supporting N-tier.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385759668", "createdAt": "2020-02-28T15:30:06Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "diffHunk": "@@ -962,18 +962,19 @@ public Entitlement findUpstreamEntitlementForStack(Consumer consumer, String sta\n         String queryStr = \"SELECT DISTINCT e2.id \" +\n             // Required entitlement\n             \"FROM cp_entitlement e1 \" +\n-            // Required entitlement => required pool\n-            \"JOIN cp2_pool_provided_products ppp1 ON ppp1.pool_id = e1.pool_id \" +\n-            // Required pool => required product\n-            \"JOIN cp2_products p ON p.uuid = ppp1.product_uuid \" +\n+            \"JOIN cp_pool pl1 on pl1.id = e1.pool_id \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2Mzk4OA==", "bodyText": "Pool is our top-level object in this case. Start from pool and drill down. Also, like before, keep the comments for massive join blobs like these.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385763988", "createdAt": "2020-02-28T15:36:56Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "diffHunk": "@@ -1095,19 +1099,22 @@ public Entitlement findUpstreamEntitlementForStack(Consumer consumer, String sta\n             if (ctype.isManifest()) {\n                 querySql = \"SELECT DISTINCT e.id \" +\n                     // Required pool\n-                    \"FROM cp2_pool_derprov_products ppp1 \" +\n-                    // Required pool => required product\n-                    \"JOIN cp2_products p ON p.uuid = ppp1.product_uuid \" +\n+                    \"FROM cp2_product_provided_products ppp1 \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NDc1NQ==", "bodyText": "\"products\" should be singular here.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385764755", "createdAt": "2020-02-28T15:38:11Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/OwnerCurator.java", "diffHunk": "@@ -164,7 +164,8 @@ public Owner getByUpstreamUuid(String upstreamUuid) {\n     public CandlepinQuery<Owner> getOwnersByActiveProduct(Collection<String> productIds) {\n         // NOTE: only used by superadmin API calls, no permissions filtering needed here.\n         DetachedCriteria poolIdQuery = DetachedCriteria.forClass(Pool.class, \"pool\")\n-            .createAlias(\"pool.providedProducts\", \"providedProducts\")\n+            .createAlias(\"pool.product\", \"products\")\n+            .createAlias(\"products.providedProducts\", \"providedProducts\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2Nzg4Mw==", "bodyText": "We lost a level of indentation here.\nAlso, in the future, when we come across criteria queries like this that need lots of adjusting, it'll be preferable to just rewrite them in HQL, JPQL, or JPA criteria.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385767883", "createdAt": "2020-02-28T15:43:12Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/ProductCurator.java", "diffHunk": "@@ -398,17 +407,20 @@ public void delete(Product entity) {\n      *  true if the product is linked to one or more subscriptions; false otherwise.\n      */\n     public boolean productHasSubscriptions(Owner owner, Product product) {\n-        return ((Long) currentSession().createCriteria(Pool.class)\n-            .createAlias(\"providedProducts\", \"providedProd\", JoinType.LEFT_OUTER_JOIN)\n-            .createAlias(\"derivedProvidedProducts\", \"derivedProvidedProd\", JoinType.LEFT_OUTER_JOIN)\n-            .add(Restrictions.eq(\"owner\", owner))\n-            .add(Restrictions.or(\n-                Restrictions.eq(\"product.uuid\", product.getUuid()),\n-                Restrictions.eq(\"derivedProduct.uuid\", product.getUuid()),\n-                Restrictions.eq(\"providedProd.uuid\", product.getUuid()),\n-                Restrictions.eq(\"derivedProvidedProd.uuid\", product.getUuid())))\n-            .setProjection(Projections.count(\"id\"))\n-            .uniqueResult()) > 0;\n+        return ((Long) currentSession().createCriteria(Pool.class, \"Pool\")\n+        .createAlias(\"Pool.product\", \"Product\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MjYxMg==", "bodyText": "The map just feels like an old way of doing the same kind of logic. We know that since products are singletons, the UUIDs are unique to a given product state; especially since we've decided that changes to children is going to affect the parents' version. So long as the UUID is set on both entities, this could act as a sufficient \"did the product change\" check and we can ignore the changedProducts map entirely for this particular check.\nI would like to see a comment to that effect if that's what we end up doing.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385772612", "createdAt": "2020-02-28T15:51:16Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,\n+        Product> changedProducts) {\n \n         Product existingProduct = existingPool.getProduct();\n-        Set<Product> currentProvided = productCurator.getPoolProvidedProductsCached(existingPool);\n         String pid = existingProduct.getId();\n \n         // TODO: ideally we would differentiate between these different product changes\n         // a little, but in the end it probably doesn't matter:\n-        boolean productsChanged =\n-            (pid != null && !pid.equals(incomingProduct.getId())) ||\n-            !currentProvided.equals(incomingProvided);\n+        boolean productsChanged = pid != null && !pid.equals(incomingProduct.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwMzk5Ng=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f168a7a101ceaef11c90b6d376abbfe15c8be223", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/f168a7a101ceaef11c90b6d376abbfe15c8be223", "committedDate": "2020-03-03T05:56:56Z", "message": "Fix Iteration 3"}, "afterCommit": {"oid": "0423d84c9738ac63c0af14968dc29069c6657b9a", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/0423d84c9738ac63c0af14968dc29069c6657b9a", "committedDate": "2020-03-03T07:36:36Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDM4MjIx", "url": "https://github.com/candlepin/candlepin/pull/2576#pullrequestreview-368038221", "createdAt": "2020-03-03T14:45:44Z", "commit": {"oid": "0423d84c9738ac63c0af14968dc29069c6657b9a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo0NTo0NFrOFxItJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo1MDozOFrOFxI8HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2NzE3NQ==", "bodyText": "This can fit on the previous line without a mid-statement break.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387067175", "createdAt": "2020-03-03T14:45:44Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/ProductCurator.java", "diffHunk": "@@ -398,9 +407,13 @@ public void delete(Product entity) {\n      *  true if the product is linked to one or more subscriptions; false otherwise.\n      */\n     public boolean productHasSubscriptions(Owner owner, Product product) {\n-        return ((Long) currentSession().createCriteria(Pool.class)\n-            .createAlias(\"providedProducts\", \"providedProd\", JoinType.LEFT_OUTER_JOIN)\n-            .createAlias(\"derivedProvidedProducts\", \"derivedProvidedProd\", JoinType.LEFT_OUTER_JOIN)\n+        return ((Long) currentSession().createCriteria(Pool.class, \"Pool\")\n+            .createAlias(\"Pool.product\", \"Product\")\n+            .createAlias(\"Pool.derivedProduct\", \"DProduct\")\n+            .createAlias(\"Product.providedProducts\",\n+            \"providedProd\", JoinType.LEFT_OUTER_JOIN)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0423d84c9738ac63c0af14968dc29069c6657b9a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2NzMxMQ==", "bodyText": "Same here", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387067311", "createdAt": "2020-03-03T14:45:51Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/ProductCurator.java", "diffHunk": "@@ -398,9 +407,13 @@ public void delete(Product entity) {\n      *  true if the product is linked to one or more subscriptions; false otherwise.\n      */\n     public boolean productHasSubscriptions(Owner owner, Product product) {\n-        return ((Long) currentSession().createCriteria(Pool.class)\n-            .createAlias(\"providedProducts\", \"providedProd\", JoinType.LEFT_OUTER_JOIN)\n-            .createAlias(\"derivedProvidedProducts\", \"derivedProvidedProd\", JoinType.LEFT_OUTER_JOIN)\n+        return ((Long) currentSession().createCriteria(Pool.class, \"Pool\")\n+            .createAlias(\"Pool.product\", \"Product\")\n+            .createAlias(\"Pool.derivedProduct\", \"DProduct\")\n+            .createAlias(\"Product.providedProducts\",\n+            \"providedProd\", JoinType.LEFT_OUTER_JOIN)\n+            .createAlias(\"DProduct.providedProducts\",\n+            \"derivedProvidedProd\", JoinType.LEFT_OUTER_JOIN)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0423d84c9738ac63c0af14968dc29069c6657b9a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3MTAwNQ==", "bodyText": "This inner block down here belongs up with the first block which starts setting productsChanged. The lower if block makes changes based on that state and should no longer be flipping the value anymore.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387071005", "createdAt": "2020-03-03T14:50:38Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -617,13 +561,12 @@ private boolean checkForChangedDerivedProducts(Pool pool, Pool existingPool,\n             if (pool.getDerivedProduct() != null) {\n                 existingPool.setDerivedProduct(pool.getDerivedProduct());\n             }\n-            else {\n-                // subscription no longer has a derived product\n+        }\n+        else {\n+            // check if subscription no longer has a derived product\n+            if (pool.getDerivedProduct() == null && existingPool.getDerivedProduct() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0423d84c9738ac63c0af14968dc29069c6657b9a"}, "originalPosition": 126}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec66caab39033ac2e35d44a3226b6362ef59c809", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/ec66caab39033ac2e35d44a3226b6362ef59c809", "committedDate": "2020-03-04T16:50:27Z", "message": "Fix Iteration 2"}, "afterCommit": {"oid": "8c3d8343fa1ef7a94d6e05bd376ec3206e2ffb12", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/8c3d8343fa1ef7a94d6e05bd376ec3206e2ffb12", "committedDate": "2020-03-04T17:01:39Z", "message": "Fix Iteration 2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NjkwMzYx", "url": "https://github.com/candlepin/candlepin/pull/2576#pullrequestreview-369690361", "createdAt": "2020-03-05T15:55:06Z", "commit": {"oid": "8c3d8343fa1ef7a94d6e05bd376ec3206e2ffb12"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1NTowN1rOFyZOQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1NTowN1rOFyZOQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NjM2OQ==", "bodyText": "This works, but still kinda violates the separation from the original implementation. Also, why did the access change?\nIn the interest of time, this is kind of what I was suggesting:\nprivate boolean checkForChangedDerivedProducts(Pool pool, Pool existingPool, Map<String, Product> changedProducts) {\n\n  boolean dpChanged = false;\n  Product existingDerived = existingPool.getDerivedProduct();\n  Product incomingDerived = pool.getDerivedProduct();\n\n  if (incomingDerived != null) {\n    dpChanged = (existingDerived == null) ||\n      (existingDerived.getId() != null && !existingDerived.getId().equals(incomingDerived.getId())) ||\n      (changedProducts != null && changedProducts.containsKey(existingDerived.getId()));\n  }\n  else {\n    dpChanged = existingDerived != null;\n  }\n\n  if (dpChanged) {\n    existingPool.setDerivedProduct(incomingDerived);\n  }\n\n  return dpChanged;\n}\n\nThis still keeps the evaluation in one block, and the action to take on that evaluation result in another.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r388386369", "createdAt": "2020-03-05T15:55:07Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -541,33 +541,24 @@ private boolean checkForChangedProducts(Product incomingProduct, Pool existingPo\n         return productsChanged;\n     }\n \n-    private boolean checkForChangedDerivedProducts(Pool pool, Pool existingPool,\n+    public boolean checkForChangedDerivedProducts(Pool pool, Pool existingPool,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c3d8343fa1ef7a94d6e05bd376ec3206e2ffb12"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODE5OTQ0", "url": "https://github.com/candlepin/candlepin/pull/2576#pullrequestreview-369819944", "createdAt": "2020-03-05T18:42:50Z", "commit": {"oid": "c22b24502372ece1e3880ec16812e59a8697fcfe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e02423d50c7ff4ffd644200ffca7e0f99539b0b", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/2e02423d50c7ff4ffd644200ffca7e0f99539b0b", "committedDate": "2020-03-06T05:48:05Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c22b24502372ece1e3880ec16812e59a8697fcfe", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/c22b24502372ece1e3880ec16812e59a8697fcfe", "committedDate": "2020-03-05T18:07:53Z", "message": "Fix Iteration 3"}, "afterCommit": {"oid": "2e02423d50c7ff4ffd644200ffca7e0f99539b0b", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/2e02423d50c7ff4ffd644200ffca7e0f99539b0b", "committedDate": "2020-03-06T05:48:05Z", "message": "[F] ENT-1828: refresh flow updated to support moving provided product from pool to products."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMzM3NDQ5", "url": "https://github.com/candlepin/candlepin/pull/2576#pullrequestreview-373337449", "createdAt": "2020-03-12T07:53:26Z", "commit": {"oid": "2e02423d50c7ff4ffd644200ffca7e0f99539b0b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2462, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}