{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MDM1MTc4", "number": 2730, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTozNzowNlrOEH7d7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTozNzowNlrOEH7d7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzQ5ODA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/async/JobManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTozNzowNlrOGnlL-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjo1MToxNlrOGnnsbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE1NjkyMQ==", "bodyText": "Do you think we should add a condition to check if Candlepin is in SUSPEND mode and not allow job to be executed.", "url": "https://github.com/candlepin/candlepin/pull/2730#discussion_r444156921", "createdAt": "2020-06-23T11:37:06Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -168,6 +169,37 @@ public void execute(org.quartz.JobExecutionContext context) throws org.quartz.Jo\n                 throw new org.quartz.JobExecutionException(errmsg, e);\n             }\n         }\n+\n+        @Override\n+        public String getName() {\n+            return this.getClass().getSimpleName();\n+        }\n+\n+        @Override\n+        public void triggerComplete(Trigger trigger, org.quartz.JobExecutionContext context,\n+            Trigger.CompletedExecutionInstruction triggerInstructionCode) {\n+            // Intentionally left empty\n+        }\n+\n+        @Override\n+        public void triggerFired(Trigger trigger, org.quartz.JobExecutionContext context) {\n+            // Intentionally left empty\n+        }\n+\n+        @Override\n+        public void triggerMisfired(Trigger trigger) {\n+            String jobKey = trigger.getKey().getName();\n+\n+            log.warn(\"Trigger misfired for job: {} [start: {}, end: {}, next fire time: {}, \" +\n+                \"final fire time: {}, priority: {}, misfire instruction: {}]\",\n+                jobKey, trigger.getStartTime(), trigger.getEndTime(), trigger.getNextFireTime(),\n+                trigger.getFinalFireTime(), trigger.getPriority(), trigger.getMisfireInstruction());\n+        }\n+\n+        @Override\n+        public boolean vetoJobExecution(Trigger trigger, org.quartz.JobExecutionContext context) {\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2111f49be69733476adf43502dab75ceb978f9b4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE5Nzk5OQ==", "bodyText": "Nah. Suspend mode is already handled by pausing both the scheduler and the message receiver. We don't need explicit handling here.", "url": "https://github.com/candlepin/candlepin/pull/2730#discussion_r444197999", "createdAt": "2020-06-23T12:51:16Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -168,6 +169,37 @@ public void execute(org.quartz.JobExecutionContext context) throws org.quartz.Jo\n                 throw new org.quartz.JobExecutionException(errmsg, e);\n             }\n         }\n+\n+        @Override\n+        public String getName() {\n+            return this.getClass().getSimpleName();\n+        }\n+\n+        @Override\n+        public void triggerComplete(Trigger trigger, org.quartz.JobExecutionContext context,\n+            Trigger.CompletedExecutionInstruction triggerInstructionCode) {\n+            // Intentionally left empty\n+        }\n+\n+        @Override\n+        public void triggerFired(Trigger trigger, org.quartz.JobExecutionContext context) {\n+            // Intentionally left empty\n+        }\n+\n+        @Override\n+        public void triggerMisfired(Trigger trigger) {\n+            String jobKey = trigger.getKey().getName();\n+\n+            log.warn(\"Trigger misfired for job: {} [start: {}, end: {}, next fire time: {}, \" +\n+                \"final fire time: {}, priority: {}, misfire instruction: {}]\",\n+                jobKey, trigger.getStartTime(), trigger.getEndTime(), trigger.getNextFireTime(),\n+                trigger.getFinalFireTime(), trigger.getPriority(), trigger.getMisfireInstruction());\n+        }\n+\n+        @Override\n+        public boolean vetoJobExecution(Trigger trigger, org.quartz.JobExecutionContext context) {\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE1NjkyMQ=="}, "originalCommit": {"oid": "2111f49be69733476adf43502dab75ceb978f9b4"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4223, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}