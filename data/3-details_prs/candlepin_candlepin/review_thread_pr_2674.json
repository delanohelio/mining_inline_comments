{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMjg2NDQ0", "number": 2674, "reviewThreads": {"totalCount": 72, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo1Mjo0M1rODyFQEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1NDowMVrOD1RPNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODQxNDI3OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo1Mjo0M1rOGF6w8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMjoyMVrOGGgrQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1ODg2Ng==", "bodyText": "General comment for all of these: If this description is presented anywhere public (say in some generated API documentation), we should probably lean more toward explaining what the structure is rather than how we use it internally.\nAs far as this specific line goes, the API and DTO are not used with the adapters. That the DTOs implement an adapter interface is an implementation detail.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408858866", "createdAt": "2020-04-15T13:52:43Z", "author": {"login": "Ceiu"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1133,7 +1296,7 @@ components:\n               type: boolean\n \n     ContentDTO:\n-      description: Represents the content data exposed to the API.\n+      description: Represents the content data exposed to the API and adapter layers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MDAwMw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409480003", "createdAt": "2020-04-16T11:22:21Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1133,7 +1296,7 @@ components:\n               type: boolean\n \n     ContentDTO:\n-      description: Represents the content data exposed to the API.\n+      description: Represents the content data exposed to the API and adapter layers.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1ODg2Ng=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODQ1NDk4OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDowMDo1OVrOGF7Kfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMjoyNVrOGGgrZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NTQwNg==", "bodyText": "Incorrect description", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408865406", "createdAt": "2020-04-15T14:00:59Z", "author": {"login": "Ceiu"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API.\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductLegacyDTO:\n+      description: Version and Status information about running Candlepin server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 310}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MDAzNw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409480037", "createdAt": "2020-04-16T11:22:25Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API.\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductLegacyDTO:\n+      description: Version and Status information about running Candlepin server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NTQwNg=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 310}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODQ1NjA2OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDowMToxNFrOGF7LIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMjozMVrOGGgrkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NTU3MA==", "bodyText": "Incorrect description", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408865570", "createdAt": "2020-04-15T14:01:14Z", "author": {"login": "Ceiu"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API.\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductLegacyDTO:\n+      description: Version and Status information about running Candlepin server\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+              example: 5051\n+            uuid:\n+              type: string\n+              example: ff808081554a3e4101554a3e9033005d\n+            name:\n+              type: string\n+              example: Admin OS Developer Bits\n+            multiplier:\n+              type: integer\n+              format: int64\n+              example: 1\n+            attributes:\n+              type: array\n+              items:\n+                type: object\n+                additionalProperties:\n+                  type: string\n+            productContent:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/ProductContentDTO\"\n+            dependentProductIds:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+            branding:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/BrandingDTO\"\n+            href:\n+              type: string\n+              example: /products/ff808081554a3e4101554a3e9033005d\n+            locked:\n+              type: boolean\n+\n+    ProductDTO:\n+      description: Version and Status information about running Candlepin server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 358}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MDA4Mg==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409480082", "createdAt": "2020-04-16T11:22:31Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API.\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductLegacyDTO:\n+      description: Version and Status information about running Candlepin server\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+              example: 5051\n+            uuid:\n+              type: string\n+              example: ff808081554a3e4101554a3e9033005d\n+            name:\n+              type: string\n+              example: Admin OS Developer Bits\n+            multiplier:\n+              type: integer\n+              format: int64\n+              example: 1\n+            attributes:\n+              type: array\n+              items:\n+                type: object\n+                additionalProperties:\n+                  type: string\n+            productContent:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/ProductContentDTO\"\n+            dependentProductIds:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+            branding:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/BrandingDTO\"\n+            href:\n+              type: string\n+              example: /products/ff808081554a3e4101554a3e9033005d\n+            locked:\n+              type: boolean\n+\n+    ProductDTO:\n+      description: Version and Status information about running Candlepin server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NTU3MA=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 358}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODQ1NjMxOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDowMToxOFrOGF7LUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMjo0MFrOGGgr5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NTYxNw==", "bodyText": "Incorrect description", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408865617", "createdAt": "2020-04-15T14:01:18Z", "author": {"login": "Ceiu"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API.\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductLegacyDTO:\n+      description: Version and Status information about running Candlepin server\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+              example: 5051\n+            uuid:\n+              type: string\n+              example: ff808081554a3e4101554a3e9033005d\n+            name:\n+              type: string\n+              example: Admin OS Developer Bits\n+            multiplier:\n+              type: integer\n+              format: int64\n+              example: 1\n+            attributes:\n+              type: array\n+              items:\n+                type: object\n+                additionalProperties:\n+                  type: string\n+            productContent:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/ProductContentDTO\"\n+            dependentProductIds:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+            branding:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/BrandingDTO\"\n+            href:\n+              type: string\n+              example: /products/ff808081554a3e4101554a3e9033005d\n+            locked:\n+              type: boolean\n+\n+    ProductDTO:\n+      description: Version and Status information about running Candlepin server\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/ProductLegacyDTO'\n+        - type: object\n+          properties:\n+            attributes:\n+              $ref: '#/components/schemas/AttributesDTO'\n+\n+    AttributesDTO:\n+      description: Version and Status information about running Candlepin server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 369}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MDE2NA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409480164", "createdAt": "2020-04-16T11:22:40Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API.\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductLegacyDTO:\n+      description: Version and Status information about running Candlepin server\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+              example: 5051\n+            uuid:\n+              type: string\n+              example: ff808081554a3e4101554a3e9033005d\n+            name:\n+              type: string\n+              example: Admin OS Developer Bits\n+            multiplier:\n+              type: integer\n+              format: int64\n+              example: 1\n+            attributes:\n+              type: array\n+              items:\n+                type: object\n+                additionalProperties:\n+                  type: string\n+            productContent:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/ProductContentDTO\"\n+            dependentProductIds:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+            branding:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/BrandingDTO\"\n+            href:\n+              type: string\n+              example: /products/ff808081554a3e4101554a3e9033005d\n+            locked:\n+              type: boolean\n+\n+    ProductDTO:\n+      description: Version and Status information about running Candlepin server\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/ProductLegacyDTO'\n+        - type: object\n+          properties:\n+            attributes:\n+              $ref: '#/components/schemas/AttributesDTO'\n+\n+    AttributesDTO:\n+      description: Version and Status information about running Candlepin server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NTYxNw=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 369}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODQ1OTQyOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDowMjowMVrOGF7NPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMjo0NVrOGGgsFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NjExMA==", "bodyText": "Unnecessary punctuation at the end", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408866110", "createdAt": "2020-04-15T14:02:01Z", "author": {"login": "Ceiu"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 300}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MDIxNQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409480215", "createdAt": "2020-04-16T11:22:45Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NjExMA=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 300}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODQ3MzA1OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDowNDo1N1rOGF7Vvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMjo1MVrOGGgsWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2ODI4Ng==", "bodyText": "We're defining two subscription objects, but we only ever use the \"legacy\" version. We should drop one of these, and then drop the legacy naming.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408868286", "createdAt": "2020-04-15T14:04:57Z", "author": {"login": "Ceiu"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1411,6 +1669,80 @@ components:\n         keycloakResource:\n           type: string\n \n+    SubscriptionLegacyDTO:\n+      description: Version and Status information about running Candlepin server\n+      properties:\n+        id:\n+          type: string\n+        owner:\n+          $ref: \"#/components/schemas/NestedOwnerDTO\"\n+        product:\n+          $ref: \"#/components/schemas/ProductLegacyDTO\"\n+        derivedProduct:\n+          $ref: \"#/components/schemas/ProductLegacyDTO\"\n+        providedProducts:\n+          type: array\n+          uniqueItems: true\n+          items:\n+            \"$ref\": \"#/components/schemas/ProductLegacyDTO\"\n+        derivedProvidedProducts:\n+          type: array\n+          uniqueItems: true\n+          items:\n+            $ref: \"#/components/schemas/ProductLegacyDTO\"\n+        quantity:\n+          type: integer\n+          format: int64\n+        startDate:\n+          type: string\n+          format: date-time\n+          example: \"2019-05-08 09:42:37.000\"\n+        endDate:\n+          type: string\n+          format: date-time\n+          example: \"2019-05-08 09:42:37.000\"\n+        contractNumber:\n+          type: string\n+        accountNumber:\n+          type: string\n+        modified:\n+          type: string\n+          format: date-time\n+          example: \"2019-05-08 09:42:37.000\"\n+        orderNumber:\n+          type: string\n+        upstreamPoolId:\n+          type: string\n+        upstreamEntitlementId:\n+          type: string\n+        upstreamConsumerId:\n+          type: string\n+        cert:\n+          $ref: \"#/components/schemas/CertificateDTO\"\n+        cdn:\n+          $ref: \"#/components/schemas/CdnDTO\"\n+\n+    SubscriptionDTO:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 443}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MDI4MQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409480281", "createdAt": "2020-04-16T11:22:51Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1411,6 +1669,80 @@ components:\n         keycloakResource:\n           type: string\n \n+    SubscriptionLegacyDTO:\n+      description: Version and Status information about running Candlepin server\n+      properties:\n+        id:\n+          type: string\n+        owner:\n+          $ref: \"#/components/schemas/NestedOwnerDTO\"\n+        product:\n+          $ref: \"#/components/schemas/ProductLegacyDTO\"\n+        derivedProduct:\n+          $ref: \"#/components/schemas/ProductLegacyDTO\"\n+        providedProducts:\n+          type: array\n+          uniqueItems: true\n+          items:\n+            \"$ref\": \"#/components/schemas/ProductLegacyDTO\"\n+        derivedProvidedProducts:\n+          type: array\n+          uniqueItems: true\n+          items:\n+            $ref: \"#/components/schemas/ProductLegacyDTO\"\n+        quantity:\n+          type: integer\n+          format: int64\n+        startDate:\n+          type: string\n+          format: date-time\n+          example: \"2019-05-08 09:42:37.000\"\n+        endDate:\n+          type: string\n+          format: date-time\n+          example: \"2019-05-08 09:42:37.000\"\n+        contractNumber:\n+          type: string\n+        accountNumber:\n+          type: string\n+        modified:\n+          type: string\n+          format: date-time\n+          example: \"2019-05-08 09:42:37.000\"\n+        orderNumber:\n+          type: string\n+        upstreamPoolId:\n+          type: string\n+        upstreamEntitlementId:\n+          type: string\n+        upstreamConsumerId:\n+          type: string\n+        cert:\n+          $ref: \"#/components/schemas/CertificateDTO\"\n+        cdn:\n+          $ref: \"#/components/schemas/CdnDTO\"\n+\n+    SubscriptionDTO:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2ODI4Ng=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 443}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODU1NjU4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyMzowMlrOGF8KbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMzowMFrOGGgsvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4MTc3Mg==", "bodyText": "Encapsulation violation. This would also lead to duplicate product content references since we're not removing the original.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408881772", "createdAt": "2020-04-15T14:23:02Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -318,18 +320,32 @@ public Content updateContent(ContentDTO update, Owner owner, boolean regenerateE\n             log.debug(\"Updating affected product: {}\", product);\n             ProductDTO pdto = this.modelTranslator.translate(product, ProductDTO.class);\n \n-            ProductContentDTO pcdto = pdto.getProductContent(cdto.getId());\n-            if (pcdto != null) {\n-                pdto.addContent(cdto, pcdto.isEnabled());\n+            pdto.getProductContent().stream()\n+                .filter(content -> content.getContent().getId().equals(cdto.getId()))\n+                .findFirst()\n+                .ifPresent(content -> {\n+                    addContent(pdto, cdto, content.getEnabled());\n \n-                // Impl note: This should also take care of our entitlement cert regeneration\n-                this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n-            }\n+                    // Impl note: This should also take care of our entitlement cert regeneration\n+                    this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+                });\n         }\n \n         return updated;\n     }\n \n+    private void addContent(ProductDTO product, ContentDTO dto, boolean enabled) {\n+        if (dto == null || dto.getId() == null) {\n+            throw new IllegalArgumentException(\"dto references incomplete content\");\n+        }\n+\n+        ProductContentDTO content = new ProductContentDTO();\n+        content.setContent(dto);\n+        content.setEnabled(enabled);\n+\n+        product.getProductContent().add(content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MDM4MA==", "bodyText": "Done. Removed the original before insert.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409480380", "createdAt": "2020-04-16T11:23:00Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -318,18 +320,32 @@ public Content updateContent(ContentDTO update, Owner owner, boolean regenerateE\n             log.debug(\"Updating affected product: {}\", product);\n             ProductDTO pdto = this.modelTranslator.translate(product, ProductDTO.class);\n \n-            ProductContentDTO pcdto = pdto.getProductContent(cdto.getId());\n-            if (pcdto != null) {\n-                pdto.addContent(cdto, pcdto.isEnabled());\n+            pdto.getProductContent().stream()\n+                .filter(content -> content.getContent().getId().equals(cdto.getId()))\n+                .findFirst()\n+                .ifPresent(content -> {\n+                    addContent(pdto, cdto, content.getEnabled());\n \n-                // Impl note: This should also take care of our entitlement cert regeneration\n-                this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n-            }\n+                    // Impl note: This should also take care of our entitlement cert regeneration\n+                    this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+                });\n         }\n \n         return updated;\n     }\n \n+    private void addContent(ProductDTO product, ContentDTO dto, boolean enabled) {\n+        if (dto == null || dto.getId() == null) {\n+            throw new IllegalArgumentException(\"dto references incomplete content\");\n+        }\n+\n+        ProductContentDTO content = new ProductContentDTO();\n+        content.setContent(dto);\n+        content.setEnabled(enabled);\n+\n+        product.getProductContent().add(content);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4MTc3Mg=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODU2NzU5OnYy", "diffSide": "LEFT", "path": "server/spec/autobind_disabled_for_owner_spec.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyNToyMVrOGF8Rgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MzoxOFrOGI1Law==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4MzU4Ng==", "bodyText": "This has already been removed in master branch, so I'd not remove it from here too, just to avoid the merge conflict when we get to merge the feature branch", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408883586", "createdAt": "2020-04-15T14:25:21Z", "author": {"login": "nikosmoum"}, "path": "server/spec/autobind_disabled_for_owner_spec.rb", "diffHunk": "@@ -37,7 +37,6 @@\n     @owner['autobindHypervisorDisabled'] = true\n     @cp.update_owner(@owner['key'], @owner)\n     @owner = @cp.get_owner(@owner['key'])\n-    puts (@owner.inspect())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMzA2Nw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411913067", "createdAt": "2020-04-21T06:43:18Z", "author": {"login": "Januson"}, "path": "server/spec/autobind_disabled_for_owner_spec.rb", "diffHunk": "@@ -37,7 +37,6 @@\n     @owner['autobindHypervisorDisabled'] = true\n     @cp.update_owner(@owner['key'], @owner)\n     @owner = @cp.get_owner(@owner['key'])\n-    puts (@owner.inspect())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4MzU4Ng=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODU4OTgzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozMDowNlrOGF8f4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMzoxMVrOGGgtIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4NzI2NQ==", "bodyText": "nack on this block\nI understand that we're likely losing some functionality due to the spec-first bits, but we can do better than throwing an iterative stream and closures at it and inheriting the DTO's structure management.\nThe product manager side is a mess, but we should do something like grabbing the list, stepping through it and finding the content in question, removing it from the list, adding the new reference, and then setting the new list wholesale.\nAlternatively, we can update the content reference in place since that's effectively what will happen above, but even that's a bit janky and subject to breaking when the managers finally get updated to no longer use the DTOs as inputs.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408887265", "createdAt": "2020-04-15T14:30:06Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -257,13 +257,15 @@ public Content updateContent(ContentDTO update, Owner owner, boolean regenerateE\n                     log.debug(\"Updating affected product: {}\", product);\n                     ProductDTO pdto = this.modelTranslator.translate(product, ProductDTO.class);\n \n-                    ProductContentDTO pcdto = pdto.getProductContent(cdto.getId());\n-                    if (pcdto != null) {\n-                        pdto.addContent(cdto, pcdto.isEnabled());\n+                    pdto.getProductContent().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MDQ4MQ==", "bodyText": "You are right, that stream was a bit sloppy. I refactored it a bit.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409480481", "createdAt": "2020-04-16T11:23:11Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -257,13 +257,15 @@ public Content updateContent(ContentDTO update, Owner owner, boolean regenerateE\n                     log.debug(\"Updating affected product: {}\", product);\n                     ProductDTO pdto = this.modelTranslator.translate(product, ProductDTO.class);\n \n-                    ProductContentDTO pcdto = pdto.getProductContent(cdto.getId());\n-                    if (pcdto != null) {\n-                        pdto.addContent(cdto, pcdto.isEnabled());\n+                    pdto.getProductContent().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4NzI2NQ=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODU5MTYyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozMDozMVrOGF8hEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMzoyNlrOGGgtpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4NzU2OQ==", "bodyText": "Same as above here: we should rework this.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408887569", "createdAt": "2020-04-15T14:30:31Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -318,18 +320,32 @@ public Content updateContent(ContentDTO update, Owner owner, boolean regenerateE\n             log.debug(\"Updating affected product: {}\", product);\n             ProductDTO pdto = this.modelTranslator.translate(product, ProductDTO.class);\n \n-            ProductContentDTO pcdto = pdto.getProductContent(cdto.getId());\n-            if (pcdto != null) {\n-                pdto.addContent(cdto, pcdto.isEnabled());\n+            pdto.getProductContent().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MDYxMw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409480613", "createdAt": "2020-04-16T11:23:26Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -318,18 +320,32 @@ public Content updateContent(ContentDTO update, Owner owner, boolean regenerateE\n             log.debug(\"Updating affected product: {}\", product);\n             ProductDTO pdto = this.modelTranslator.translate(product, ProductDTO.class);\n \n-            ProductContentDTO pcdto = pdto.getProductContent(cdto.getId());\n-            if (pcdto != null) {\n-                pdto.addContent(cdto, pcdto.isEnabled());\n+            pdto.getProductContent().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4NzU2OQ=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODYwMTUzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozMjo1MVrOGF8nvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMzozNlrOGGgt-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4OTI3OA==", "bodyText": "Why do we pull the collection from the DTO again when we already have it locally?", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408889278", "createdAt": "2020-04-15T14:32:51Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -817,17 +823,17 @@ public static boolean isChangedBy(Product entity, ProductDTO dto) {\n             };\n \n             if (!Util.collectionsAreEqual((Collection) entity.getProductContent(),\n-                (Collection) productContent, comparator)) {\n+                (Collection) dto.getProductContent(), comparator)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MDY5Ng==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409480696", "createdAt": "2020-04-16T11:23:36Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -817,17 +823,17 @@ public static boolean isChangedBy(Product entity, ProductDTO dto) {\n             };\n \n             if (!Util.collectionsAreEqual((Collection) entity.getProductContent(),\n-                (Collection) productContent, comparator)) {\n+                (Collection) dto.getProductContent(), comparator)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4OTI3OA=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODYwMzQ4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozMzoxNVrOGF8pBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMzo0MVrOGGguKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4OTYwNQ==", "bodyText": "None of the code changes below require knowledge of the specific collection the DTO returns.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408889605", "createdAt": "2020-04-15T14:33:15Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -783,12 +786,15 @@ public static boolean isChangedBy(Product entity, ProductDTO dto) {\n         // case-insensitive key/value comparison and similiarities (i.e. management_enabled: 1 is\n         // functionally identical to Management_Enabled: true, but it will be detected as a change\n         // in attributes.\n-        Map<String, String> attributes = dto.getAttributes();\n+        Map<String, String> attributes = null;\n+        if (dto.getAttributes() != null) {\n+            attributes = dto.getAttributes().getAttributes();\n+        }\n         if (attributes != null && !attributes.equals(entity.getAttributes())) {\n             return true;\n         }\n \n-        Collection<ProductContentDTO> productContent = dto.getProductContent();\n+        Set<ProductContentDTO> productContent = dto.getProductContent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MDc0Nw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409480747", "createdAt": "2020-04-16T11:23:41Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -783,12 +786,15 @@ public static boolean isChangedBy(Product entity, ProductDTO dto) {\n         // case-insensitive key/value comparison and similiarities (i.e. management_enabled: 1 is\n         // functionally identical to Management_Enabled: true, but it will be detected as a change\n         // in attributes.\n-        Map<String, String> attributes = dto.getAttributes();\n+        Map<String, String> attributes = null;\n+        if (dto.getAttributes() != null) {\n+            attributes = dto.getAttributes().getAttributes();\n+        }\n         if (attributes != null && !attributes.equals(entity.getAttributes())) {\n             return true;\n         }\n \n-        Collection<ProductContentDTO> productContent = dto.getProductContent();\n+        Set<ProductContentDTO> productContent = dto.getProductContent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4OTYwNQ=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODYwNjQwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resteasy/JsonProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozMzo0MlrOGF8qqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MzoxNFrOGI1LSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MDAyNg==", "bodyText": "All the DTOs that were ported/introduced in the spec file also need to have jackson mix-ins added in the addMixInAnnotationsForDTOs method in this class.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408890026", "createdAt": "2020-04-15T14:33:42Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resteasy/JsonProvider.java", "diffHunk": "@@ -113,6 +115,7 @@ public JsonProvider(boolean indentJson, ProductCachedSerializationModule product\n         customModule.addSerializer(Date.class, new DateSerializer());\n         // Ensure we handle releaseVer fields properly\n         customModule.addDeserializer(ReleaseVerDTO.class, new ReleaseVersionWrapDeserializer());\n+        customModule.addDeserializer(AttributesDTO.class, new CandlepinAttributesDeserializer());\n         mapper.registerModule(customModule);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMzAzNQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411913035", "createdAt": "2020-04-21T06:43:14Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/resteasy/JsonProvider.java", "diffHunk": "@@ -113,6 +115,7 @@ public JsonProvider(boolean indentJson, ProductCachedSerializationModule product\n         customModule.addSerializer(Date.class, new DateSerializer());\n         // Ensure we handle releaseVer fields properly\n         customModule.addDeserializer(ReleaseVerDTO.class, new ReleaseVersionWrapDeserializer());\n+        customModule.addDeserializer(AttributesDTO.class, new CandlepinAttributesDeserializer());\n         mapper.registerModule(customModule);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MDAyNg=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODYxMDUyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozNDozMVrOGF8tOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMzo0OVrOGGguaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MDY4Mg==", "bodyText": "This needs to stay as BrandingDTO, since this method is working with DTOs, not the adapter layer. The code below that uses the adapter interface erroneously is what should change instead.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408890682", "createdAt": "2020-04-15T14:34:31Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -817,17 +823,17 @@ public static boolean isChangedBy(Product entity, ProductDTO dto) {\n             };\n \n             if (!Util.collectionsAreEqual((Collection) entity.getProductContent(),\n-                (Collection) productContent, comparator)) {\n+                (Collection) dto.getProductContent(), comparator)) {\n \n                 return true;\n             }\n         }\n \n-        Collection<BrandingDTO> brandingDTOs = dto.getBranding();\n+        Collection<BrandingInfo> brandingDTOs = getBranding(dto);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MDgwOQ==", "bodyText": "Done. Replaced the use of adapter with a new comparator.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409480809", "createdAt": "2020-04-16T11:23:49Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -817,17 +823,17 @@ public static boolean isChangedBy(Product entity, ProductDTO dto) {\n             };\n \n             if (!Util.collectionsAreEqual((Collection) entity.getProductContent(),\n-                (Collection) productContent, comparator)) {\n+                (Collection) dto.getProductContent(), comparator)) {\n \n                 return true;\n             }\n         }\n \n-        Collection<BrandingDTO> brandingDTOs = dto.getBranding();\n+        Collection<BrandingInfo> brandingDTOs = getBranding(dto);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MDY4Mg=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODYzMjk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductCertificateDTO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozOToyNFrOGF88Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODozOToxNFrOGI51LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NDQ4Mw==", "bodyText": "Why are we no longer using the standard product model here?", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408894483", "createdAt": "2020-04-15T14:39:24Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductCertificateDTO.java", "diffHunk": "@@ -35,7 +35,7 @@\n     protected String id;\n     protected String key;\n     protected String cert;\n-    private ProductDTO product;\n+    private ProductLegacyDTO product;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4OTI5Mg==", "bodyText": "Done. Removed ProductLegacyDTO", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411989292", "createdAt": "2020-04-21T08:39:14Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductCertificateDTO.java", "diffHunk": "@@ -35,7 +35,7 @@\n     protected String id;\n     protected String key;\n     protected String cert;\n-    private ProductDTO product;\n+    private ProductLegacyDTO product;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NDQ4Mw=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODYzOTI0OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo0MDo1NlrOGF9AYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MzoxMFrOGI1LHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NTU4Ng==", "bodyText": "I am not aware of any existing validation on the max length of either of the 3 properties on this DTO, so I don't think we should be adding this. What they all are validated on (on methods like isNullOrIncomplete on ProductDTO/PoolDTO), is that they are not empty strings, so we want to set minLength: 1 on all 3 instead", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408895586", "createdAt": "2020-04-15T14:40:56Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1070,21 +1229,25 @@ components:\n           type: integer\n           format: int64\n \n-    ReleaseVerDTO:\n-      properties:\n-        releaseVer:\n-          type: string\n-\n-    NestedOwnerDTO:\n-      properties:\n-        id:\n-          type: string\n-        key:\n-          type: string\n-        displayName:\n-          type: string\n-        href:\n-          type: string\n+    BrandingDTO:\n+      description: Represents the branding\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          required:\n+            - productId\n+            - name\n+            - type\n+          properties:\n+            productId:\n+              type: string\n+              maxLength: 255", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzMjc3MQ==", "bodyText": "I took the maxLength validation from Branding entity", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411232771", "createdAt": "2020-04-20T09:31:53Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1070,21 +1229,25 @@ components:\n           type: integer\n           format: int64\n \n-    ReleaseVerDTO:\n-      properties:\n-        releaseVer:\n-          type: string\n-\n-    NestedOwnerDTO:\n-      properties:\n-        id:\n-          type: string\n-        key:\n-          type: string\n-        displayName:\n-          type: string\n-        href:\n-          type: string\n+    BrandingDTO:\n+      description: Represents the branding\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          required:\n+            - productId\n+            - name\n+            - type\n+          properties:\n+            productId:\n+              type: string\n+              maxLength: 255", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NTU4Ng=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3NzU0NA==", "bodyText": "Ah, I see. Then we can leave the maxLength as they are and just add the minLength: 1", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411277544", "createdAt": "2020-04-20T10:45:10Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1070,21 +1229,25 @@ components:\n           type: integer\n           format: int64\n \n-    ReleaseVerDTO:\n-      properties:\n-        releaseVer:\n-          type: string\n-\n-    NestedOwnerDTO:\n-      properties:\n-        id:\n-          type: string\n-        key:\n-          type: string\n-        displayName:\n-          type: string\n-        href:\n-          type: string\n+    BrandingDTO:\n+      description: Represents the branding\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          required:\n+            - productId\n+            - name\n+            - type\n+          properties:\n+            productId:\n+              type: string\n+              maxLength: 255", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NTU4Ng=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjk5MQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912991", "createdAt": "2020-04-21T06:43:10Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1070,21 +1229,25 @@ components:\n           type: integer\n           format: int64\n \n-    ReleaseVerDTO:\n-      properties:\n-        releaseVer:\n-          type: string\n-\n-    NestedOwnerDTO:\n-      properties:\n-        id:\n-          type: string\n-        key:\n-          type: string\n-        displayName:\n-          type: string\n-        href:\n-          type: string\n+    BrandingDTO:\n+      description: Represents the branding\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          required:\n+            - productId\n+            - name\n+            - type\n+          properties:\n+            productId:\n+              type: string\n+              maxLength: 255", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NTU4Ng=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODY0NzMwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo0MjozNFrOGF9Fkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyNDowMVrOGGgu7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NjkxNQ==", "bodyText": "Encapsulation violation", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408896915", "createdAt": "2020-04-15T14:42:34Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductTranslator.java", "diffHunk": "@@ -104,11 +118,37 @@ public ProductDTO populate(ModelTranslator modelTranslator, Product source, Prod\n             }\n         }\n         else {\n-            destination.setProductContent(Collections.emptyList());\n+            destination.productContent(Collections.emptySet());\n             destination.setBranding(Collections.emptySet());\n         }\n \n         return destination;\n     }\n \n+    private AttributesDTO createAttributes(Map<String, String> attributes) {\n+        AttributesDTO dto = new AttributesDTO();\n+        if (attributes == null) {\n+            dto.attributes(new HashMap<>());\n+        }\n+        else {\n+            dto.attributes(attributes);\n+        }\n+        return dto;\n+    }\n+\n+    private void addBranding(ProductDTO product, BrandingDTO branding) {\n+        if (isNullOrIncomplete(branding)) {\n+            throw new IllegalArgumentException(\"branding is null or incomplete\");\n+        }\n+\n+        product.getBranding().add(branding);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MDk0MQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409480941", "createdAt": "2020-04-16T11:24:01Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductTranslator.java", "diffHunk": "@@ -104,11 +118,37 @@ public ProductDTO populate(ModelTranslator modelTranslator, Product source, Prod\n             }\n         }\n         else {\n-            destination.setProductContent(Collections.emptyList());\n+            destination.productContent(Collections.emptySet());\n             destination.setBranding(Collections.emptySet());\n         }\n \n         return destination;\n     }\n \n+    private AttributesDTO createAttributes(Map<String, String> attributes) {\n+        AttributesDTO dto = new AttributesDTO();\n+        if (attributes == null) {\n+            dto.attributes(new HashMap<>());\n+        }\n+        else {\n+            dto.attributes(attributes);\n+        }\n+        return dto;\n+    }\n+\n+    private void addBranding(ProductDTO product, BrandingDTO branding) {\n+        if (isNullOrIncomplete(branding)) {\n+            throw new IllegalArgumentException(\"branding is null or incomplete\");\n+        }\n+\n+        product.getBranding().add(branding);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NjkxNQ=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODY1MTQ0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo0MzoyNlrOGF9IZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyNDoxMFrOGGgvRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NzYzOA==", "bodyText": "Rather than offload this to an inherited method (and all the baggage that comes with it), we should follow the model used by the content block above and set the collection all at once directly.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408897638", "createdAt": "2020-04-15T14:43:26Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductTranslator.java", "diffHunk": "@@ -61,41 +63,53 @@ public ProductDTO populate(Product source, ProductDTO destination) {\n      */\n     @Override\n     public ProductDTO populate(ModelTranslator modelTranslator, Product source, ProductDTO destination) {\n-        destination = super.populate(modelTranslator, source, destination);\n+        if (source == null) {\n+            throw new IllegalArgumentException(\"source is null\");\n+        }\n \n-        destination.setUuid(source.getUuid());\n-        destination.setId(source.getId());\n-        destination.setName(source.getName());\n-        destination.setMultiplier(source.getMultiplier());\n-        destination.setHref(source.getHref());\n-        destination.setLocked(source.isLocked());\n-        destination.setAttributes(source.getAttributes());\n-        destination.setDependentProductIds(source.getDependentProductIds());\n+        if (destination == null) {\n+            throw new IllegalArgumentException(\"destination is null\");\n+        }\n+\n+        destination.created(Util.toDateTime(source.getCreated()))\n+            .updated(Util.toDateTime(source.getUpdated()))\n+            .uuid(source.getUuid())\n+            .id(source.getId())\n+            .name(source.getName())\n+            .multiplier(source.getMultiplier())\n+            .href(source.getHref())\n+            .locked(source.isLocked())\n+            .attributes(createAttributes(source.getAttributes()))\n+            .productContent(new HashSet<>())\n+            .branding(new HashSet<>())\n+            .dependentProductIds(new HashSet<>(source.getDependentProductIds()));\n \n         if (modelTranslator != null) {\n             Collection<ProductContent> productContent = source.getProductContent();\n-            destination.setProductContent(Collections.emptyList());\n-\n             if (productContent != null) {\n-                ObjectTranslator<Content, ContentDTO> contentTranslator = modelTranslator\n-                    .findTranslatorByClass(Content.class, ContentDTO.class);\n+                ObjectTranslator<ProductContent, ProductContentDTO> contentTranslator = modelTranslator\n+                    .findTranslatorByClass(ProductContent.class, ProductContentDTO.class);\n \n+                Set<ProductContentDTO> content = new HashSet<>();\n                 for (ProductContent pc : productContent) {\n                     if (pc != null) {\n-                        ContentDTO dto = contentTranslator.translate(modelTranslator, pc.getContent());\n-\n+                        ProductContentDTO dto = contentTranslator.translate(modelTranslator, pc);\n                         if (dto != null) {\n-                            destination.addContent(dto, pc.isEnabled());\n+                            content.add(dto);\n                         }\n                     }\n                 }\n+                destination.productContent(content);\n+            }\n+            else {\n+                destination.productContent(Collections.emptySet());\n             }\n \n             Collection<Branding> branding = source.getBranding();\n             if (branding != null && !branding.isEmpty()) {\n                 for (Branding brand : branding) {\n                     if (brand != null) {\n-                        destination.addBranding(modelTranslator.translate(brand, BrandingDTO.class));\n+                        addBranding(destination, modelTranslator.translate(brand, BrandingDTO.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MTAyOQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409481029", "createdAt": "2020-04-16T11:24:10Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductTranslator.java", "diffHunk": "@@ -61,41 +63,53 @@ public ProductDTO populate(Product source, ProductDTO destination) {\n      */\n     @Override\n     public ProductDTO populate(ModelTranslator modelTranslator, Product source, ProductDTO destination) {\n-        destination = super.populate(modelTranslator, source, destination);\n+        if (source == null) {\n+            throw new IllegalArgumentException(\"source is null\");\n+        }\n \n-        destination.setUuid(source.getUuid());\n-        destination.setId(source.getId());\n-        destination.setName(source.getName());\n-        destination.setMultiplier(source.getMultiplier());\n-        destination.setHref(source.getHref());\n-        destination.setLocked(source.isLocked());\n-        destination.setAttributes(source.getAttributes());\n-        destination.setDependentProductIds(source.getDependentProductIds());\n+        if (destination == null) {\n+            throw new IllegalArgumentException(\"destination is null\");\n+        }\n+\n+        destination.created(Util.toDateTime(source.getCreated()))\n+            .updated(Util.toDateTime(source.getUpdated()))\n+            .uuid(source.getUuid())\n+            .id(source.getId())\n+            .name(source.getName())\n+            .multiplier(source.getMultiplier())\n+            .href(source.getHref())\n+            .locked(source.isLocked())\n+            .attributes(createAttributes(source.getAttributes()))\n+            .productContent(new HashSet<>())\n+            .branding(new HashSet<>())\n+            .dependentProductIds(new HashSet<>(source.getDependentProductIds()));\n \n         if (modelTranslator != null) {\n             Collection<ProductContent> productContent = source.getProductContent();\n-            destination.setProductContent(Collections.emptyList());\n-\n             if (productContent != null) {\n-                ObjectTranslator<Content, ContentDTO> contentTranslator = modelTranslator\n-                    .findTranslatorByClass(Content.class, ContentDTO.class);\n+                ObjectTranslator<ProductContent, ProductContentDTO> contentTranslator = modelTranslator\n+                    .findTranslatorByClass(ProductContent.class, ProductContentDTO.class);\n \n+                Set<ProductContentDTO> content = new HashSet<>();\n                 for (ProductContent pc : productContent) {\n                     if (pc != null) {\n-                        ContentDTO dto = contentTranslator.translate(modelTranslator, pc.getContent());\n-\n+                        ProductContentDTO dto = contentTranslator.translate(modelTranslator, pc);\n                         if (dto != null) {\n-                            destination.addContent(dto, pc.isEnabled());\n+                            content.add(dto);\n                         }\n                     }\n                 }\n+                destination.productContent(content);\n+            }\n+            else {\n+                destination.productContent(Collections.emptySet());\n             }\n \n             Collection<Branding> branding = source.getBranding();\n             if (branding != null && !branding.isEmpty()) {\n                 for (Branding brand : branding) {\n                     if (brand != null) {\n-                        destination.addBranding(modelTranslator.translate(brand, BrandingDTO.class));\n+                        addBranding(destination, modelTranslator.translate(brand, BrandingDTO.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NzYzOA=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODY1ODIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo0NDo1M1rOGF9M5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyNDoxNFrOGGgvaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5ODc4OQ==", "bodyText": "Like the other instances of this, just build the collection and set it directly.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408898789", "createdAt": "2020-04-15T14:44:53Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "diffHunk": "@@ -70,40 +74,43 @@ public ProductDTO populate(ModelTranslator modelTranslator, ProductData source,\n             throw new IllegalArgumentException(\"dest is null\");\n         }\n \n-        dest.setCreated(source.getCreated());\n-        dest.setUpdated(source.getUpdated());\n-\n-        dest.setUuid(source.getUuid());\n-        dest.setId(source.getId());\n-        dest.setName(source.getName());\n-        dest.setMultiplier(source.getMultiplier());\n-        dest.setAttributes(source.getAttributes());\n-        dest.setDependentProductIds(source.getDependentProductIds());\n-        dest.setHref(source.getHref());\n-        dest.setLocked(source.isLocked());\n-\n+        dest.id(source.getId())\n+            .uuid(source.getUuid())\n+            .name(source.getName())\n+            .multiplier(source.getMultiplier())\n+            .created(Util.toDateTime(source.getCreated()))\n+            .updated(Util.toDateTime(source.getUpdated()))\n+            .attributes(Util.split(source.getAttributes()))\n+            .productContent(new HashSet<>())\n+            .branding(new HashSet<>())\n+            .dependentProductIds(toSet(source))\n+            .href(source.getHref())\n+            .locked(source.isLocked());\n \n         if (modelTranslator != null) {\n             Collection<ProductContentData> productContentData = source.getProductContent();\n-            dest.setProductContent(null);\n             if (productContentData != null) {\n                 ObjectTranslator<ContentData, ContentDTO> contentTranslator = modelTranslator\n                     .findTranslatorByClass(ContentData.class, ContentDTO.class);\n \n-                for (ProductContentData pcd : productContentData) {\n-                    if (pcd != null && pcd.getContent() != null) {\n-                        ContentDTO dto = contentTranslator.translate(modelTranslator, pcd.getContent());\n-                        dest.addContent(dto, pcd.isEnabled());\n+                for (ProductContentData productContent : productContentData) {\n+                    if (productContent != null && productContent.getContent() != null) {\n+                        ContentDTO dto = contentTranslator\n+                            .translate(modelTranslator, productContent.getContent());\n+                        addContent(dest, dto, productContent.isEnabled());\n                     }\n                 }\n             }\n+            else {\n+                dest.productContent(null);\n+            }\n \n             Collection<Branding> productBrandings = source.getBranding();\n             dest.setBranding(null);\n             if (productBrandings != null) {\n                 for (Branding brand : productBrandings) {\n                     if (brand != null) {\n-                        dest.addBranding(modelTranslator.translate(brand, BrandingDTO.class));\n+                        addBranding(dest, modelTranslator.translate(brand, BrandingDTO.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MTA2NQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409481065", "createdAt": "2020-04-16T11:24:14Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "diffHunk": "@@ -70,40 +74,43 @@ public ProductDTO populate(ModelTranslator modelTranslator, ProductData source,\n             throw new IllegalArgumentException(\"dest is null\");\n         }\n \n-        dest.setCreated(source.getCreated());\n-        dest.setUpdated(source.getUpdated());\n-\n-        dest.setUuid(source.getUuid());\n-        dest.setId(source.getId());\n-        dest.setName(source.getName());\n-        dest.setMultiplier(source.getMultiplier());\n-        dest.setAttributes(source.getAttributes());\n-        dest.setDependentProductIds(source.getDependentProductIds());\n-        dest.setHref(source.getHref());\n-        dest.setLocked(source.isLocked());\n-\n+        dest.id(source.getId())\n+            .uuid(source.getUuid())\n+            .name(source.getName())\n+            .multiplier(source.getMultiplier())\n+            .created(Util.toDateTime(source.getCreated()))\n+            .updated(Util.toDateTime(source.getUpdated()))\n+            .attributes(Util.split(source.getAttributes()))\n+            .productContent(new HashSet<>())\n+            .branding(new HashSet<>())\n+            .dependentProductIds(toSet(source))\n+            .href(source.getHref())\n+            .locked(source.isLocked());\n \n         if (modelTranslator != null) {\n             Collection<ProductContentData> productContentData = source.getProductContent();\n-            dest.setProductContent(null);\n             if (productContentData != null) {\n                 ObjectTranslator<ContentData, ContentDTO> contentTranslator = modelTranslator\n                     .findTranslatorByClass(ContentData.class, ContentDTO.class);\n \n-                for (ProductContentData pcd : productContentData) {\n-                    if (pcd != null && pcd.getContent() != null) {\n-                        ContentDTO dto = contentTranslator.translate(modelTranslator, pcd.getContent());\n-                        dest.addContent(dto, pcd.isEnabled());\n+                for (ProductContentData productContent : productContentData) {\n+                    if (productContent != null && productContent.getContent() != null) {\n+                        ContentDTO dto = contentTranslator\n+                            .translate(modelTranslator, productContent.getContent());\n+                        addContent(dest, dto, productContent.isEnabled());\n                     }\n                 }\n             }\n+            else {\n+                dest.productContent(null);\n+            }\n \n             Collection<Branding> productBrandings = source.getBranding();\n             dest.setBranding(null);\n             if (productBrandings != null) {\n                 for (Branding brand : productBrandings) {\n                     if (brand != null) {\n-                        dest.addBranding(modelTranslator.translate(brand, BrandingDTO.class));\n+                        addBranding(dest, modelTranslator.translate(brand, BrandingDTO.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5ODc4OQ=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODY1OTUyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo0NTowOVrOGF9N0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyNDoxOVrOGGgvjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTAyNg==", "bodyText": "Build and set the collection directly", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408899026", "createdAt": "2020-04-15T14:45:09Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "diffHunk": "@@ -70,40 +74,43 @@ public ProductDTO populate(ModelTranslator modelTranslator, ProductData source,\n             throw new IllegalArgumentException(\"dest is null\");\n         }\n \n-        dest.setCreated(source.getCreated());\n-        dest.setUpdated(source.getUpdated());\n-\n-        dest.setUuid(source.getUuid());\n-        dest.setId(source.getId());\n-        dest.setName(source.getName());\n-        dest.setMultiplier(source.getMultiplier());\n-        dest.setAttributes(source.getAttributes());\n-        dest.setDependentProductIds(source.getDependentProductIds());\n-        dest.setHref(source.getHref());\n-        dest.setLocked(source.isLocked());\n-\n+        dest.id(source.getId())\n+            .uuid(source.getUuid())\n+            .name(source.getName())\n+            .multiplier(source.getMultiplier())\n+            .created(Util.toDateTime(source.getCreated()))\n+            .updated(Util.toDateTime(source.getUpdated()))\n+            .attributes(Util.split(source.getAttributes()))\n+            .productContent(new HashSet<>())\n+            .branding(new HashSet<>())\n+            .dependentProductIds(toSet(source))\n+            .href(source.getHref())\n+            .locked(source.isLocked());\n \n         if (modelTranslator != null) {\n             Collection<ProductContentData> productContentData = source.getProductContent();\n-            dest.setProductContent(null);\n             if (productContentData != null) {\n                 ObjectTranslator<ContentData, ContentDTO> contentTranslator = modelTranslator\n                     .findTranslatorByClass(ContentData.class, ContentDTO.class);\n \n-                for (ProductContentData pcd : productContentData) {\n-                    if (pcd != null && pcd.getContent() != null) {\n-                        ContentDTO dto = contentTranslator.translate(modelTranslator, pcd.getContent());\n-                        dest.addContent(dto, pcd.isEnabled());\n+                for (ProductContentData productContent : productContentData) {\n+                    if (productContent != null && productContent.getContent() != null) {\n+                        ContentDTO dto = contentTranslator\n+                            .translate(modelTranslator, productContent.getContent());\n+                        addContent(dest, dto, productContent.isEnabled());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MTEwMw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409481103", "createdAt": "2020-04-16T11:24:19Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "diffHunk": "@@ -70,40 +74,43 @@ public ProductDTO populate(ModelTranslator modelTranslator, ProductData source,\n             throw new IllegalArgumentException(\"dest is null\");\n         }\n \n-        dest.setCreated(source.getCreated());\n-        dest.setUpdated(source.getUpdated());\n-\n-        dest.setUuid(source.getUuid());\n-        dest.setId(source.getId());\n-        dest.setName(source.getName());\n-        dest.setMultiplier(source.getMultiplier());\n-        dest.setAttributes(source.getAttributes());\n-        dest.setDependentProductIds(source.getDependentProductIds());\n-        dest.setHref(source.getHref());\n-        dest.setLocked(source.isLocked());\n-\n+        dest.id(source.getId())\n+            .uuid(source.getUuid())\n+            .name(source.getName())\n+            .multiplier(source.getMultiplier())\n+            .created(Util.toDateTime(source.getCreated()))\n+            .updated(Util.toDateTime(source.getUpdated()))\n+            .attributes(Util.split(source.getAttributes()))\n+            .productContent(new HashSet<>())\n+            .branding(new HashSet<>())\n+            .dependentProductIds(toSet(source))\n+            .href(source.getHref())\n+            .locked(source.isLocked());\n \n         if (modelTranslator != null) {\n             Collection<ProductContentData> productContentData = source.getProductContent();\n-            dest.setProductContent(null);\n             if (productContentData != null) {\n                 ObjectTranslator<ContentData, ContentDTO> contentTranslator = modelTranslator\n                     .findTranslatorByClass(ContentData.class, ContentDTO.class);\n \n-                for (ProductContentData pcd : productContentData) {\n-                    if (pcd != null && pcd.getContent() != null) {\n-                        ContentDTO dto = contentTranslator.translate(modelTranslator, pcd.getContent());\n-                        dest.addContent(dto, pcd.isEnabled());\n+                for (ProductContentData productContent : productContentData) {\n+                    if (productContent != null && productContent.getContent() != null) {\n+                        ContentDTO dto = contentTranslator\n+                            .translate(modelTranslator, productContent.getContent());\n+                        addContent(dest, dto, productContent.isEnabled());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTAyNg=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODY2MDQyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo0NToyM1rOGF9OdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyNDoyNVrOGGgvsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTE4OQ==", "bodyText": "encapsulation", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408899189", "createdAt": "2020-04-15T14:45:23Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "diffHunk": "@@ -114,4 +121,42 @@ public ProductDTO populate(ModelTranslator modelTranslator, ProductData source,\n \n         return dest;\n     }\n+\n+    private HashSet<String> toSet(ProductData source) {\n+        if (source == null || source.getDependentProductIds() == null) {\n+            return null;\n+        }\n+        return new HashSet<>(source.getDependentProductIds());\n+    }\n+\n+    private void addContent(ProductLegacyDTO product, ContentDTO dto, boolean enabled) {\n+        if (dto == null || dto.getId() == null) {\n+            throw new IllegalArgumentException(\"dto references incomplete content\");\n+        }\n+\n+        ProductContentDTO content = new ProductContentDTO();\n+        content.setContent(dto);\n+        content.setEnabled(enabled);\n+\n+        product.getProductContent().add(content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MTEzOQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409481139", "createdAt": "2020-04-16T11:24:25Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "diffHunk": "@@ -114,4 +121,42 @@ public ProductDTO populate(ModelTranslator modelTranslator, ProductData source,\n \n         return dest;\n     }\n+\n+    private HashSet<String> toSet(ProductData source) {\n+        if (source == null || source.getDependentProductIds() == null) {\n+            return null;\n+        }\n+        return new HashSet<>(source.getDependentProductIds());\n+    }\n+\n+    private void addContent(ProductLegacyDTO product, ContentDTO dto, boolean enabled) {\n+        if (dto == null || dto.getId() == null) {\n+            throw new IllegalArgumentException(\"dto references incomplete content\");\n+        }\n+\n+        ProductContentDTO content = new ProductContentDTO();\n+        content.setContent(dto);\n+        content.setEnabled(enabled);\n+\n+        product.getProductContent().add(content);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTE4OQ=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODY2MDc2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo0NToyN1rOGF9OrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyNDoyOVrOGGgv1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTI0NQ==", "bodyText": "encapsulation", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408899245", "createdAt": "2020-04-15T14:45:27Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "diffHunk": "@@ -114,4 +121,42 @@ public ProductDTO populate(ModelTranslator modelTranslator, ProductData source,\n \n         return dest;\n     }\n+\n+    private HashSet<String> toSet(ProductData source) {\n+        if (source == null || source.getDependentProductIds() == null) {\n+            return null;\n+        }\n+        return new HashSet<>(source.getDependentProductIds());\n+    }\n+\n+    private void addContent(ProductLegacyDTO product, ContentDTO dto, boolean enabled) {\n+        if (dto == null || dto.getId() == null) {\n+            throw new IllegalArgumentException(\"dto references incomplete content\");\n+        }\n+\n+        ProductContentDTO content = new ProductContentDTO();\n+        content.setContent(dto);\n+        content.setEnabled(enabled);\n+\n+        product.getProductContent().add(content);\n+    }\n+\n+    private boolean addBranding(ProductLegacyDTO product, BrandingDTO branding) {\n+        if (isNullOrIncomplete(branding)) {\n+            throw new IllegalArgumentException(\"branding is null or incomplete\");\n+        }\n+\n+        if (product.getBranding() == null) {\n+            product.setBranding(new HashSet<>());\n+        }\n+\n+        return product.getBranding().add(branding);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MTE3NQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409481175", "createdAt": "2020-04-16T11:24:29Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "diffHunk": "@@ -114,4 +121,42 @@ public ProductDTO populate(ModelTranslator modelTranslator, ProductData source,\n \n         return dest;\n     }\n+\n+    private HashSet<String> toSet(ProductData source) {\n+        if (source == null || source.getDependentProductIds() == null) {\n+            return null;\n+        }\n+        return new HashSet<>(source.getDependentProductIds());\n+    }\n+\n+    private void addContent(ProductLegacyDTO product, ContentDTO dto, boolean enabled) {\n+        if (dto == null || dto.getId() == null) {\n+            throw new IllegalArgumentException(\"dto references incomplete content\");\n+        }\n+\n+        ProductContentDTO content = new ProductContentDTO();\n+        content.setContent(dto);\n+        content.setEnabled(enabled);\n+\n+        product.getProductContent().add(content);\n+    }\n+\n+    private boolean addBranding(ProductLegacyDTO product, BrandingDTO branding) {\n+        if (isNullOrIncomplete(branding)) {\n+            throw new IllegalArgumentException(\"branding is null or incomplete\");\n+        }\n+\n+        if (product.getBranding() == null) {\n+            product.setBranding(new HashSet<>());\n+        }\n+\n+        return product.getBranding().add(branding);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTI0NQ=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODY2NDQ1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/hostedtest/BrandingInfoAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo0NjoxNFrOGF9RMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyNDozNlrOGGgwFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTg4OA==", "bodyText": "This should be unnecessary. The places where we'd need such a thing are probably already doing something bad and should be updated rather than adding more to the Jenga tower.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408899888", "createdAt": "2020-04-15T14:46:14Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/BrandingInfoAdapter.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.hostedtest;\n+\n+import org.candlepin.dto.api.v1.BrandingDTO;\n+import org.candlepin.service.model.BrandingInfo;\n+\n+public class BrandingInfoAdapter implements BrandingInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MTIzOA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409481238", "createdAt": "2020-04-16T11:24:36Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/hostedtest/BrandingInfoAdapter.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.hostedtest;\n+\n+import org.candlepin.dto.api.v1.BrandingDTO;\n+import org.candlepin.service.model.BrandingInfo;\n+\n+public class BrandingInfoAdapter implements BrandingInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTg4OA=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODc5NTY0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/jackson/CandlepinAttributesDeserializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxMzoyNFrOGF-kqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODowMjo1NVrOGI4QSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMTI1OA==", "bodyText": "Does this have value when we're explicitly defining the structure via objects (and inheriting oddities such as the .getAttributes().getAttributes() as above?)", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408921258", "createdAt": "2020-04-15T15:13:24Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/jackson/CandlepinAttributesDeserializer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) 2009 - 2016 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.jackson;\n+\n+import org.candlepin.common.exceptions.CandlepinJsonProcessingException;\n+import org.candlepin.dto.api.v1.AttributesDTO;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.TreeNode;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+\n+/**\n+ * The CandlepinAttributeDeserializer handles the deserialization of attributes, processing both\n+ * the current attribute mapping style and obsoleted formats.\n+ */\n+public class CandlepinAttributesDeserializer extends StdDeserializer<AttributesDTO> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2MzQ2NA==", "bodyText": "Done. Not needed anymore after removal of ProductLegacyDTO.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411963464", "createdAt": "2020-04-21T08:02:55Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/jackson/CandlepinAttributesDeserializer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) 2009 - 2016 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.jackson;\n+\n+import org.candlepin.common.exceptions.CandlepinJsonProcessingException;\n+import org.candlepin.dto.api.v1.AttributesDTO;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.TreeNode;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+\n+/**\n+ * The CandlepinAttributeDeserializer handles the deserialization of attributes, processing both\n+ * the current attribute mapping style and obsoleted formats.\n+ */\n+public class CandlepinAttributesDeserializer extends StdDeserializer<AttributesDTO> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMTI1OA=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODgxNTg4OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/candlepin/resource/CdnResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxNzo0M1rOGF-xbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyNDo0MlrOGGgwTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNDUyNw==", "bodyText": "Keep this whitespace", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408924527", "createdAt": "2020-04-15T15:17:43Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/CdnResource.java", "diffHunk": "@@ -51,7 +51,6 @@ public CdnResource(I18n i18n, CdnCurator curator, CdnManager manager, ModelTrans\n         this.cdnManager = manager;\n         this.translator = translator;\n     }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MTI5Mw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409481293", "createdAt": "2020-04-16T11:24:42Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/resource/CdnResource.java", "diffHunk": "@@ -51,7 +51,6 @@ public CdnResource(I18n i18n, CdnCurator curator, CdnManager manager, ModelTrans\n         this.cdnManager = manager;\n         this.translator = translator;\n     }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNDUyNw=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODgxOTk4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resource/OwnerProductResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxODozOVrOGF-0CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo0NjozMFrOGJJxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNTE5Mg==", "bodyText": "encapsulation", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408925192", "createdAt": "2020-04-15T15:18:39Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/OwnerProductResource.java", "diffHunk": "@@ -346,14 +351,36 @@ public ProductDTO addBatchContent(\n \n             ContentDTO cdto = this.translator.translate(content, ContentDTO.class);\n \n-            changed |= pdto.addContent(cdto, enabled);\n+            changed |= addContent(pdto, cdto, enabled);\n         }\n \n         if (changed) {\n             product = this.productManager.updateProduct(pdto, owner, true);\n         }\n \n-        return this.translator.translate(product, ProductDTO.class);\n+        return this.translator.translate(product, ProductLegacyDTO.class);\n+    }\n+\n+\n+    private boolean addContent(ProductDTO product, ContentDTO dto, boolean enabled) {\n+        if (dto == null || dto.getId() == null) {\n+            throw new IllegalArgumentException(\"dto references incomplete content\");\n+        }\n+\n+        ProductContentDTO content = new ProductContentDTO();\n+        content.setContent(dto);\n+        content.setEnabled(enabled);\n+\n+        boolean changed = product.getProductContent()\n+            .stream()\n+            .filter(contentDTO -> contentDTO.getContent().getId().equals(content.getContent().getId()))\n+            .noneMatch(contentDTO -> contentDTO.equals(content));\n+\n+        if (changed) {\n+            product.getProductContent().add(content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1MDQyMA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r412250420", "createdAt": "2020-04-21T14:46:30Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/resource/OwnerProductResource.java", "diffHunk": "@@ -346,14 +351,36 @@ public ProductDTO addBatchContent(\n \n             ContentDTO cdto = this.translator.translate(content, ContentDTO.class);\n \n-            changed |= pdto.addContent(cdto, enabled);\n+            changed |= addContent(pdto, cdto, enabled);\n         }\n \n         if (changed) {\n             product = this.productManager.updateProduct(pdto, owner, true);\n         }\n \n-        return this.translator.translate(product, ProductDTO.class);\n+        return this.translator.translate(product, ProductLegacyDTO.class);\n+    }\n+\n+\n+    private boolean addContent(ProductDTO product, ContentDTO dto, boolean enabled) {\n+        if (dto == null || dto.getId() == null) {\n+            throw new IllegalArgumentException(\"dto references incomplete content\");\n+        }\n+\n+        ProductContentDTO content = new ProductContentDTO();\n+        content.setContent(dto);\n+        content.setEnabled(enabled);\n+\n+        boolean changed = product.getProductContent()\n+            .stream()\n+            .filter(contentDTO -> contentDTO.getContent().getId().equals(content.getContent().getId()))\n+            .noneMatch(contentDTO -> contentDTO.equals(content));\n+\n+        if (changed) {\n+            product.getProductContent().add(content);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNTE5Mg=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODgyNzc0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resource/OwnerProductResource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyMDowNlrOGF-46w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODowMDozM1rOGI4J9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNjQ0Mw==", "bodyText": "We seem to be heavily using the \"Legacy\" product here and aren't using the base product at all, which implies it's not actually legacy.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408926443", "createdAt": "2020-04-15T15:20:06Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/OwnerProductResource.java", "diffHunk": "@@ -196,7 +201,7 @@ protected Content fetchContent(Owner owner, String contentId) {\n         response = Product.class, responseContainer = \"list\")\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n-    public CandlepinQuery<ProductDTO> listProducts(\n+    public CandlepinQuery<ProductLegacyDTO> listProducts(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5NTE3Ng==", "bodyText": "We are using both. ProductLegacyDTO and CandlepinAttributesDeserializer are my attempt to preserve current functionallity of @JsonSerialize/Deserialize we use for attributes.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409495176", "createdAt": "2020-04-16T11:51:44Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/resource/OwnerProductResource.java", "diffHunk": "@@ -196,7 +201,7 @@ protected Content fetchContent(Owner owner, String contentId) {\n         response = Product.class, responseContainer = \"list\")\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n-    public CandlepinQuery<ProductDTO> listProducts(\n+    public CandlepinQuery<ProductLegacyDTO> listProducts(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNjQ0Mw=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2MTg0NQ==", "bodyText": "Removed *LegacyDTOs", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411961845", "createdAt": "2020-04-21T08:00:33Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/resource/OwnerProductResource.java", "diffHunk": "@@ -196,7 +201,7 @@ protected Content fetchContent(Owner owner, String contentId) {\n         response = Product.class, responseContainer = \"list\")\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n-    public CandlepinQuery<ProductDTO> listProducts(\n+    public CandlepinQuery<ProductLegacyDTO> listProducts(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNjQ0Mw=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODgyOTgwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resource/OwnerProductResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyMDozMlrOGF-6Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyMDo0OFrOGJIZoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNjc2Nw==", "bodyText": "encapsulation", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408926767", "createdAt": "2020-04-15T15:20:32Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/OwnerProductResource.java", "diffHunk": "@@ -407,30 +434,44 @@ public ProductDTO removeBatchContent(\n         // Alternatively, we can shut off Hibernate's auto-commit junk and get in the habit of\n         // calling commit methods as necessary so we don't have to work with DTOs internally.\n \n-        boolean changed = false;\n-        for (String contentId : contentIds) {\n-            changed |= pdto.removeContent(contentId);\n-        }\n+        boolean changed = removeContent(pdto, new HashSet<>(contentIds));\n \n         if (changed) {\n             product = this.productManager.updateProduct(pdto, owner, true);\n         }\n \n-        return this.translator.translate(product, ProductDTO.class);\n+        return this.translator.translate(product, ProductLegacyDTO.class);\n+    }\n+\n+    public boolean removeContent(ProductDTO product, Set<String> contentIds) {\n+        if (contentIds == null) {\n+            throw new IllegalArgumentException(\"contentId is null\");\n+        }\n+        if (contentIds.isEmpty()) {\n+            return false;\n+        }\n+\n+        Set<ProductContentDTO> toRemove = product.getProductContent().stream()\n+            .filter(content -> contentIds.contains(content.getContent().getId()))\n+            .collect(Collectors.toSet());\n+\n+        product.getProductContent().removeAll(toRemove);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyODAwMA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r412228000", "createdAt": "2020-04-21T14:20:48Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/resource/OwnerProductResource.java", "diffHunk": "@@ -407,30 +434,44 @@ public ProductDTO removeBatchContent(\n         // Alternatively, we can shut off Hibernate's auto-commit junk and get in the habit of\n         // calling commit methods as necessary so we don't have to work with DTOs internally.\n \n-        boolean changed = false;\n-        for (String contentId : contentIds) {\n-            changed |= pdto.removeContent(contentId);\n-        }\n+        boolean changed = removeContent(pdto, new HashSet<>(contentIds));\n \n         if (changed) {\n             product = this.productManager.updateProduct(pdto, owner, true);\n         }\n \n-        return this.translator.translate(product, ProductDTO.class);\n+        return this.translator.translate(product, ProductLegacyDTO.class);\n+    }\n+\n+    public boolean removeContent(ProductDTO product, Set<String> contentIds) {\n+        if (contentIds == null) {\n+            throw new IllegalArgumentException(\"contentId is null\");\n+        }\n+        if (contentIds.isEmpty()) {\n+            return false;\n+        }\n+\n+        Set<ProductContentDTO> toRemove = product.getProductContent().stream()\n+            .filter(content -> contentIds.contains(content.getContent().getId()))\n+            .collect(Collectors.toSet());\n+\n+        product.getProductContent().removeAll(toRemove);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNjc2Nw=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODg0MTUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/util/Util.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyMzowMVrOGF_BZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyNDo1OVrOGGgw_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyODYxNQ==", "bodyText": "This is unrelated to your PR, but can we put a TODO on this to axe this entirely? I don't think anyone knows it exists, and it doesn't provide any real value other than saving two lines of code.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408928615", "createdAt": "2020-04-15T15:23:01Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/util/Util.java", "diffHunk": "@@ -143,6 +147,13 @@ public static Date toDate(String dt) {\n         }\n     }\n \n+    public static Date toDate(OffsetDateTime dt) {\n+        if (dt == null) {\n+            return null;\n+        }\n+        return Date.from(dt.toInstant());\n+    }\n+\n     public static <T> T assertNotNull(T value, String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MTQ2OQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409481469", "createdAt": "2020-04-16T11:24:59Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/util/Util.java", "diffHunk": "@@ -143,6 +147,13 @@ public static Date toDate(String dt) {\n         }\n     }\n \n+    public static Date toDate(OffsetDateTime dt) {\n+        if (dt == null) {\n+            return null;\n+        }\n+        return Date.from(dt.toInstant());\n+    }\n+\n     public static <T> T assertNotNull(T value, String message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyODYxNQ=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODg1MTczOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/util/Util.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyNToxMlrOGF_HwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyNTowOFrOGGgxRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzMDI0MA==", "bodyText": "This method is already defined in java.util.Collections with the exact same name and arguments, but is generically typed.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r408930240", "createdAt": "2020-04-15T15:25:12Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/util/Util.java", "diffHunk": "@@ -547,4 +558,37 @@ public static String getHostname() {\n     public static OffsetDateTime toDateTime(Date date) {\n         return date != null ? date.toInstant().atOffset(ZoneOffset.UTC) : null;\n     }\n+\n+    /**\n+     * Takes a map and splits it into a list of maps each with one item from the given map.\n+     *\n+     * @param map a map to be split\n+     * @return a list of single item maps\n+     */\n+    public static List<Map<String, String>> split(Map<String, String> map) {\n+        if (map == null) {\n+            return Collections.emptyList();\n+        }\n+        return map.entrySet().stream()\n+            .map(Util::singletonMap)\n+            .collect(Collectors.toList());\n+    }\n+\n+    private static Map<String, String> singletonMap(Map.Entry<String, String> entry) {\n+        return singletonMap(entry.getKey(), entry.getValue());\n+    }\n+\n+    /**\n+     * Takes a key value pair and returns a map with a single entry.\n+     *\n+     * @param key a key of the single entry\n+     * @param value a value of the single entry\n+     * @return a map with a single entry\n+     */\n+    public static Map<String, String> singletonMap(String key, String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4MTU0MQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409481541", "createdAt": "2020-04-16T11:25:08Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/util/Util.java", "diffHunk": "@@ -547,4 +558,37 @@ public static String getHostname() {\n     public static OffsetDateTime toDateTime(Date date) {\n         return date != null ? date.toInstant().atOffset(ZoneOffset.UTC) : null;\n     }\n+\n+    /**\n+     * Takes a map and splits it into a list of maps each with one item from the given map.\n+     *\n+     * @param map a map to be split\n+     * @return a list of single item maps\n+     */\n+    public static List<Map<String, String>> split(Map<String, String> map) {\n+        if (map == null) {\n+            return Collections.emptyList();\n+        }\n+        return map.entrySet().stream()\n+            .map(Util::singletonMap)\n+            .collect(Collectors.toList());\n+    }\n+\n+    private static Map<String, String> singletonMap(Map.Entry<String, String> entry) {\n+        return singletonMap(entry.getKey(), entry.getValue());\n+    }\n+\n+    /**\n+     * Takes a key value pair and returns a map with a single entry.\n+     *\n+     * @param key a key of the single entry\n+     * @param value a value of the single entry\n+     * @return a map with a single entry\n+     */\n+    public static Map<String, String> singletonMap(String key, String value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzMDI0MA=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjE5MDc3OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDozNTo1N1rOGGfK3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MzowNVrOGI1LAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1NTMyNg==", "bodyText": "wrong description for this dto", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409455326", "createdAt": "2020-04-16T10:35:57Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1411,6 +1669,80 @@ components:\n         keycloakResource:\n           type: string\n \n+    SubscriptionLegacyDTO:\n+      description: Version and Status information about running Candlepin server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 391}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjk2Mg==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912962", "createdAt": "2020-04-21T06:43:05Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1411,6 +1669,80 @@ components:\n         keycloakResource:\n           type: string\n \n+    SubscriptionLegacyDTO:\n+      description: Version and Status information about running Candlepin server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1NTMyNg=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 391}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjIwMzAzOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDozOTozMVrOGGfSig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MzowMVrOGI1K2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1NzI5MA==", "bodyText": "This DTO also needs to inherit TimestampedEntity like others:\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n\nEven though it did not extend TimestampedCandlepinDTO, it extends the legacy org.candlepin.model.dto.CandlepinDTO which has created/updated Dates on it.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409457290", "createdAt": "2020-04-16T10:39:31Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1411,6 +1669,80 @@ components:\n         keycloakResource:\n           type: string\n \n+    SubscriptionLegacyDTO:\n+      description: Version and Status information about running Candlepin server\n+      properties:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjkyMw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912923", "createdAt": "2020-04-21T06:43:01Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1411,6 +1669,80 @@ components:\n         keycloakResource:\n           type: string\n \n+    SubscriptionLegacyDTO:\n+      description: Version and Status information about running Candlepin server\n+      properties:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1NzI5MA=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 392}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjMxODcyOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToxMzozNlrOGGgZrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0Mjo1NlrOGI1KoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3NTUwMw==", "bodyText": "There are a few fields missing from this DTO. You've included all the member elements, but the output is being serialized based on the available getters, and the original DTO has some getters like that which will have to be added as fields here, namely: stacked and stackId.\nThere are 2 more: lastModified and ownerId, but these are getters that were added later (not legacy), so I wouldn't expect them to be used by clients. (e.g. one of them is due to us adding the SubscriptionInfo interface on the Subscription class)", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409475503", "createdAt": "2020-04-16T11:13:36Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1411,6 +1669,80 @@ components:\n         keycloakResource:\n           type: string\n \n+    SubscriptionLegacyDTO:\n+      description: Version and Status information about running Candlepin server\n+      properties:\n+        id:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 393}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjg2NQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912865", "createdAt": "2020-04-21T06:42:56Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1411,6 +1669,80 @@ components:\n         keycloakResource:\n           type: string\n \n+    SubscriptionLegacyDTO:\n+      description: Version and Status information about running Candlepin server\n+      properties:\n+        id:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3NTUwMw=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 393}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjMyODEwOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToxNjo0MVrOGGgfpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0Mjo1MlrOGI1KdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3NzAzMA==", "bodyText": "The attributesDTO doesn't have a field called id, so the required section should be removed", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409477030", "createdAt": "2020-04-16T11:16:41Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API.\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductLegacyDTO:\n+      description: Version and Status information about running Candlepin server\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+              example: 5051\n+            uuid:\n+              type: string\n+              example: ff808081554a3e4101554a3e9033005d\n+            name:\n+              type: string\n+              example: Admin OS Developer Bits\n+            multiplier:\n+              type: integer\n+              format: int64\n+              example: 1\n+            attributes:\n+              type: array\n+              items:\n+                type: object\n+                additionalProperties:\n+                  type: string\n+            productContent:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/ProductContentDTO\"\n+            dependentProductIds:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+            branding:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/BrandingDTO\"\n+            href:\n+              type: string\n+              example: /products/ff808081554a3e4101554a3e9033005d\n+            locked:\n+              type: boolean\n+\n+    ProductDTO:\n+      description: Version and Status information about running Candlepin server\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/ProductLegacyDTO'\n+        - type: object\n+          properties:\n+            attributes:\n+              $ref: '#/components/schemas/AttributesDTO'\n+\n+    AttributesDTO:\n+      description: Version and Status information about running Candlepin server\n+      required:\n+        - id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 371}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjgyMA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912820", "createdAt": "2020-04-21T06:42:52Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API.\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductLegacyDTO:\n+      description: Version and Status information about running Candlepin server\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+              example: 5051\n+            uuid:\n+              type: string\n+              example: ff808081554a3e4101554a3e9033005d\n+            name:\n+              type: string\n+              example: Admin OS Developer Bits\n+            multiplier:\n+              type: integer\n+              format: int64\n+              example: 1\n+            attributes:\n+              type: array\n+              items:\n+                type: object\n+                additionalProperties:\n+                  type: string\n+            productContent:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/ProductContentDTO\"\n+            dependentProductIds:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+            branding:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/BrandingDTO\"\n+            href:\n+              type: string\n+              example: /products/ff808081554a3e4101554a3e9033005d\n+            locked:\n+              type: boolean\n+\n+    ProductDTO:\n+      description: Version and Status information about running Candlepin server\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/ProductLegacyDTO'\n+        - type: object\n+          properties:\n+            attributes:\n+              $ref: '#/components/schemas/AttributesDTO'\n+\n+    AttributesDTO:\n+      description: Version and Status information about running Candlepin server\n+      required:\n+        - id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3NzAzMA=="}, "originalCommit": {"oid": "21da61f71057203caa366ad7c3dd28cb0438bc21"}, "originalPosition": 371}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjQxOTUyOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo0NDoyOVrOGGhYBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0Mjo0N1rOGI1KVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MTQ2Mw==", "bodyText": "The original DTO is throwing an exception if the id is empty, so the id field here needs a minLength: 1 property to enforce that\nEdit: also scratch this one. I was making these comments under the impression this is the legacy dto, but we've decided it's going to be used for both ProductData and ProductDTO, thus we can't do validation on the id (so we should not add minLength: 1, and also remove it from the required list) because then we wouldn't be able to create a ProductDTO (this is a database id after all, and it is supposed to be null on a POST request that is going to create a new product).", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409491463", "createdAt": "2020-04-16T11:44:29Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductLegacyDTO:\n+      description: DTO representing the product data exposed to the API\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52822d9cea012f292073800b657c94b497b66af7"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjc4OQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912789", "createdAt": "2020-04-21T06:42:47Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductLegacyDTO:\n+      description: DTO representing the product data exposed to the API\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MTQ2Mw=="}, "originalCommit": {"oid": "52822d9cea012f292073800b657c94b497b66af7"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjUyNzMyOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoxNjoxMlrOGGiaoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0Mjo0MlrOGI1KJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwODUxMw==", "bodyText": "I am very confused here. I assume this is the main ProductDTO, and that the ProductLegacyDTO is supposed to be the DTO for ProductData. If this is supposed to be the original ProductDTO, then it definitly should not be inheriting from the ProductLegacyDTO, and ProductLegacyDTO should definitely NOT be used throughout our codebase as a replacement for ProductDTO. ProductLegacyDTO should be used only for the member fields on the SubscriptionDTO (since this is a legacy dto structure and should go away eventually).\nI feel we should not be blending/inheriting these two. We should do either of:\n\nThere should be a ProductDTO specified fully based on what our current ProductDTO looks like, and then a ProductLegacyDTO that is separate and fully based on what ProductData look like now.\nIf we chose to do inheritance (even though I think we shouldn't), then it would have to go the other way: Define ProductDTO based on what the current ProductDTO looks like, and then ProductLegacyDTO can inherit from that (if needed).\nIdeally, we could specify ONLY ProductDTO, which will be used for both purposes, since the structure is almost the same for our current ProductDTO and ProductData.\n\n@Januson @Ceiu what do you think?\nAlso I'm not sure what's happening with the AttributesDTO, why is it added here, while there's already an attributes field on the legacyDTO.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409508513", "createdAt": "2020-04-16T12:16:12Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductLegacyDTO:\n+      description: DTO representing the product data exposed to the API\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+              example: 5051\n+            uuid:\n+              type: string\n+              example: ff808081554a3e4101554a3e9033005d\n+            name:\n+              type: string\n+              example: Admin OS Developer Bits\n+            multiplier:\n+              type: integer\n+              format: int64\n+              example: 1\n+            attributes:\n+              type: array\n+              items:\n+                type: object\n+                additionalProperties:\n+                  type: string\n+            productContent:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/ProductContentDTO\"\n+            dependentProductIds:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+            branding:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/BrandingDTO\"\n+            href:\n+              type: string\n+              example: /products/ff808081554a3e4101554a3e9033005d\n+            locked:\n+              type: boolean\n+\n+    ProductDTO:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52822d9cea012f292073800b657c94b497b66af7"}, "originalPosition": 348}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjc0MQ==", "bodyText": "Done. *LegacyDTO dtos were removed", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912741", "createdAt": "2020-04-21T06:42:42Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductLegacyDTO:\n+      description: DTO representing the product data exposed to the API\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+              example: 5051\n+            uuid:\n+              type: string\n+              example: ff808081554a3e4101554a3e9033005d\n+            name:\n+              type: string\n+              example: Admin OS Developer Bits\n+            multiplier:\n+              type: integer\n+              format: int64\n+              example: 1\n+            attributes:\n+              type: array\n+              items:\n+                type: object\n+                additionalProperties:\n+                  type: string\n+            productContent:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/ProductContentDTO\"\n+            dependentProductIds:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+            branding:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/BrandingDTO\"\n+            href:\n+              type: string\n+              example: /products/ff808081554a3e4101554a3e9033005d\n+            locked:\n+              type: boolean\n+\n+    ProductDTO:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwODUxMw=="}, "originalCommit": {"oid": "52822d9cea012f292073800b657c94b497b66af7"}, "originalPosition": 348}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjUyOTM5OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoxNjo0MlrOGGib3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MjozOVrOGI1KDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwODgyOA==", "bodyText": "Why does this not just use AttributesDTO instead?", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409508828", "createdAt": "2020-04-16T12:16:42Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductLegacyDTO:\n+      description: DTO representing the product data exposed to the API\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+              example: 5051\n+            uuid:\n+              type: string\n+              example: ff808081554a3e4101554a3e9033005d\n+            name:\n+              type: string\n+              example: Admin OS Developer Bits\n+            multiplier:\n+              type: integer\n+              format: int64\n+              example: 1\n+            attributes:\n+              type: array\n+              items:\n+                type: object\n+                additionalProperties:\n+                  type: string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52822d9cea012f292073800b657c94b497b66af7"}, "originalPosition": 326}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjcxNw==", "bodyText": "Done. *LegacyDTO dtos were removed", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912717", "createdAt": "2020-04-21T06:42:39Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductLegacyDTO:\n+      description: DTO representing the product data exposed to the API\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+              example: 5051\n+            uuid:\n+              type: string\n+              example: ff808081554a3e4101554a3e9033005d\n+            name:\n+              type: string\n+              example: Admin OS Developer Bits\n+            multiplier:\n+              type: integer\n+              format: int64\n+              example: 1\n+            attributes:\n+              type: array\n+              items:\n+                type: object\n+                additionalProperties:\n+                  type: string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwODgyOA=="}, "originalCommit": {"oid": "52822d9cea012f292073800b657c94b497b66af7"}, "originalPosition": 326}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjUzNTQ2OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoxODoxNVrOGGifiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTozMjozOFrOGI8PLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwOTc2OQ==", "bodyText": "this DTO does not have an id field, so the required section should be removed\nEdit: Actually, looking again, we should keep the required section but add the content field to it, because we want to validate that it is not null (still remove the id though)", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r409509769", "createdAt": "2020-04-16T12:18:15Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52822d9cea012f292073800b657c94b497b66af7"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjY2Nw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912667", "createdAt": "2020-04-21T06:42:33Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwOTc2OQ=="}, "originalCommit": {"oid": "52822d9cea012f292073800b657c94b497b66af7"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAyODcxOA==", "bodyText": "The required section still has the id field here. We should remove the id, but add the content field to it", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r412028718", "createdAt": "2020-04-21T09:32:38Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1517,90 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwOTc2OQ=="}, "originalCommit": {"oid": "52822d9cea012f292073800b657c94b497b66af7"}, "originalPosition": 293}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjMxNzg3OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo0MDoxOVrOGHHNnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MjoyN1rOGI1JrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExMTM4OQ==", "bodyText": "Since we're trying to have this spec also be a good source of documentation, we should provide better descriptions.\nA good guideline for all descriptions is: Try to use information from the model entity's class javadoc comment (in this case Branding.java), instead of from the DTO, because our DTOs don't have useful documentation (it's always something like \"A DTO representation of X entity\"). Then, take that and try to distill it to not have any implementation details, and be concise. In this case it could be something like: \"Represents a rebranding of a provided product to the specified name\"", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410111389", "createdAt": "2020-04-17T09:40:19Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1070,22 +1229,34 @@ components:\n           type: integer\n           format: int64\n \n-    ReleaseVerDTO:\n+    AttributeDTO:\n+      description: todo\n       properties:\n-        releaseVer:\n-          type: string\n-\n-    NestedOwnerDTO:\n-      properties:\n-        id:\n-          type: string\n-        key:\n-          type: string\n-        displayName:\n+        name:\n           type: string\n-        href:\n+        value:\n           type: string\n \n+    BrandingDTO:\n+      description: Represents the branding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjYyMA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912620", "createdAt": "2020-04-21T06:42:27Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1070,22 +1229,34 @@ components:\n           type: integer\n           format: int64\n \n-    ReleaseVerDTO:\n+    AttributeDTO:\n+      description: todo\n       properties:\n-        releaseVer:\n-          type: string\n-\n-    NestedOwnerDTO:\n-      properties:\n-        id:\n-          type: string\n-        key:\n-          type: string\n-        displayName:\n+        name:\n           type: string\n-        href:\n+        value:\n           type: string\n \n+    BrandingDTO:\n+      description: Represents the branding", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExMTM4OQ=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjQzOTUzOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMDoxODo0OVrOGHIayA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MjoyMFrOGI1JdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEzMTE0NA==", "bodyText": "as per my other comment, we should remove the id from the required section", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410131144", "createdAt": "2020-04-17T10:18:49Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1525,67 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductDTO:\n+      description: DTO representing the product data exposed to the API\n+      required:\n+        - id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjU2NA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912564", "createdAt": "2020-04-21T06:42:20Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1525,67 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductDTO:\n+      description: DTO representing the product data exposed to the API\n+      required:\n+        - id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEzMTE0NA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Njc1NzE5OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoxNDozM1rOGHLjFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTozOTo0OFrOGI8iaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MjQyMg==", "bodyText": "Looking at the current ProductDTO, it's also throwing exceptions if both the ContentDTO's id and uuid are null (and it should probably also do it if they're empty strings), so we should alter ContentDTO spec to add the id and uuid to the required: list, and also mark them with minLength: 1. And after that, we should add DTOValidator.validateConstraints() calls for the ProductDTOs on the OwnerProductResource.createProduct/updateProduct methods.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410182422", "createdAt": "2020-04-17T12:14:33Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1525,67 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjUxOA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912518", "createdAt": "2020-04-21T06:42:15Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1525,67 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MjQyMg=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAzMzY0MA==", "bodyText": "OwnerProductResource.createProduct/updateProduct still not calling this.validator.validateConstraints() (in addition to it calling validateCollectionElementsNotNull)", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r412033640", "createdAt": "2020-04-21T09:39:48Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1525,67 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MjQyMg=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 302}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Njc2OTM4OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoxODozNlrOGHLqnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MjoxMFrOGI1JKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NDM0OQ==", "bodyText": "The current ProductDTO is throwing an exception if any of the elements in either of these 3 collections is null: productContent, dependenProductIds, branding, so we should add a DTOValidator.validateCollectionElementsNotNull for those 3 collections on the OwnerProductResource.createProduct/updateProduct methods", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410184349", "createdAt": "2020-04-17T12:18:36Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1525,67 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductDTO:\n+      description: DTO representing the product data exposed to the API\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+              example: 5051\n+            uuid:\n+              type: string\n+              example: ff808081554a3e4101554a3e9033005d\n+            name:\n+              type: string\n+              example: Admin OS Developer Bits\n+            multiplier:\n+              type: integer\n+              format: int64\n+              example: 1\n+            attributes:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/AttributeDTO'\n+            productContent:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/ProductContentDTO\"\n+            dependentProductIds:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+            branding:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 341}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjQ5MQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912491", "createdAt": "2020-04-21T06:42:10Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1525,67 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductDTO:\n+      description: DTO representing the product data exposed to the API\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+              example: 5051\n+            uuid:\n+              type: string\n+              example: ff808081554a3e4101554a3e9033005d\n+            name:\n+              type: string\n+              example: Admin OS Developer Bits\n+            multiplier:\n+              type: integer\n+              format: int64\n+              example: 1\n+            attributes:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/AttributeDTO'\n+            productContent:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/ProductContentDTO\"\n+            dependentProductIds:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+            branding:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NDM0OQ=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 341}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjgyNTg4OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjozNzoxN1rOGHMN4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MDozOVrOGI1Fyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MzM3OA==", "bodyText": "This field is ignored on output (with @XmlTransient) on both ProductDTO and ProductData currently, and we completely ignore it on input (because when creating/updating custom products we don't allow them to be locked/unlocked), so it should be removed from the DTO.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410193378", "createdAt": "2020-04-17T12:37:17Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1525,67 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductDTO:\n+      description: DTO representing the product data exposed to the API\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+              example: 5051\n+            uuid:\n+              type: string\n+              example: ff808081554a3e4101554a3e9033005d\n+            name:\n+              type: string\n+              example: Admin OS Developer Bits\n+            multiplier:\n+              type: integer\n+              format: int64\n+              example: 1\n+            attributes:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/AttributeDTO'\n+            productContent:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/ProductContentDTO\"\n+            dependentProductIds:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+            branding:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/BrandingDTO\"\n+            href:\n+              type: string\n+              example: /products/ff808081554a3e4101554a3e9033005d\n+            locked:\n+              type: boolean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMTYyNw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411911627", "createdAt": "2020-04-21T06:40:39Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1343,6 +1525,67 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    ProductContentDTO:\n+      description: Product content mapping exposed to the API\n+      required:\n+        - id\n+      properties:\n+        content:\n+          $ref: \"#/components/schemas/ContentDTO\"\n+        enabled:\n+          type: boolean\n+\n+    ProductDTO:\n+      description: DTO representing the product data exposed to the API\n+      required:\n+        - id\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+              example: 5051\n+            uuid:\n+              type: string\n+              example: ff808081554a3e4101554a3e9033005d\n+            name:\n+              type: string\n+              example: Admin OS Developer Bits\n+            multiplier:\n+              type: integer\n+              format: int64\n+              example: 1\n+            attributes:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/AttributeDTO'\n+            productContent:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/ProductContentDTO\"\n+            dependentProductIds:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+            branding:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: \"#/components/schemas/BrandingDTO\"\n+            href:\n+              type: string\n+              example: /products/ff808081554a3e4101554a3e9033005d\n+            locked:\n+              type: boolean", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MzM3OA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 350}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjkwNDA2OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzowMDozM1rOGHM-Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODozODoyMFrOGI5yfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIwNTc2Mg==", "bodyText": "In the current code this field is marked with jax-rs @QueryParam(\"consumer_uuid\"), which means it handles a POST like this: /subscriptions?consumer_uuid=2e0g2e02bj2nb0j2, so changing it to consumerUuid will break the API (Unfortunately, this is one of the calls that are definitely used in Hosted, and for some reason we don't have spec tests for it, which is why this change didn't cause any problems). We should also add a spec test for this call to catch these types of changes in the future", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410205762", "createdAt": "2020-04-17T13:00:33Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,152 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumerUuid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4ODYwNg==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411988606", "createdAt": "2020-04-21T08:38:20Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,152 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumerUuid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIwNTc2Mg=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjkwNDkyOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzowMDo1MVrOGHM-4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MTo1NVrOGI1IpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIwNTkyMg==", "bodyText": "Same for this field: it should be email_locale", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410205922", "createdAt": "2020-04-17T13:00:51Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,152 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumerUuid\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: emailLocale", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjM1Ng==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912356", "createdAt": "2020-04-21T06:41:55Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,152 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumerUuid\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: emailLocale", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIwNTkyMg=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjkxOTYyOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzowNTowOVrOGHNH6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MTo0N1rOGI1IZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIwODIzNA==", "bodyText": "Wrong description, it should be something like Subscription is being activated", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410208234", "createdAt": "2020-04-17T13:05:09Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,152 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumerUuid\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: emailLocale\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        202:\n+          description: A list of subscriptions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjI5NA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912294", "createdAt": "2020-04-21T06:41:47Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,152 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumerUuid\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: emailLocale\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        202:\n+          description: A list of subscriptions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIwODIzNA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzAzNDkyOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzozNjo1NVrOGHOSUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MTozN1rOGI1IAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyNzI4MQ==", "bodyText": "We should contact Hosted & Katello to find out if this is used, and if not, we should remove it entirely  (same for the other calls in the resource that throw HTTP 303)", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410227281", "createdAt": "2020-04-17T13:36:55Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,152 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumerUuid\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: emailLocale\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        202:\n+          description: A list of subscriptions\n+        400:\n+          description: Invalid request such as missing email/locale or when the consumer with the given uuid was not found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /subscriptions/{id}:\n+    get:\n+      description: Retrieves a single Subscription\n+      tags:\n+        - Subscription\n+      operationId: getSubscription\n+      security: []\n+      parameters:\n+        - name: id\n+          in: path\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Status information about running Candlepin server\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SubscriptionDTO'\n+        404:\n+          description: Subscription could not be found using the provided ID\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Subscription\n+      tags:\n+        - Subscription\n+      operationId: deleteSubscription\n+      security: []\n+      parameters:\n+        - name: id\n+          in: path\n+          description: The ID of the subscription to remove\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: Subscription was successfully deleted\n+        404:\n+          description: Subscription could not be found using the provided ID\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /subscriptions/{id}/cert:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjE5NA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912194", "createdAt": "2020-04-21T06:41:37Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,152 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumerUuid\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: emailLocale\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        202:\n+          description: A list of subscriptions\n+        400:\n+          description: Invalid request such as missing email/locale or when the consumer with the given uuid was not found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /subscriptions/{id}:\n+    get:\n+      description: Retrieves a single Subscription\n+      tags:\n+        - Subscription\n+      operationId: getSubscription\n+      security: []\n+      parameters:\n+        - name: id\n+          in: path\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Status information about running Candlepin server\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SubscriptionDTO'\n+        404:\n+          description: Subscription could not be found using the provided ID\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Subscription\n+      tags:\n+        - Subscription\n+      operationId: deleteSubscription\n+      security: []\n+      parameters:\n+        - name: id\n+          in: path\n+          description: The ID of the subscription to remove\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: Subscription was successfully deleted\n+        404:\n+          description: Subscription could not be found using the provided ID\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /subscriptions/{id}/cert:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyNzI4MQ=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzA0MTQzOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzozODo0MFrOGHOWow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MToyOFrOGI1Hwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyODM4Nw==", "bodyText": "If this endpoint does not end up being removed entirely, then it should have no 200 or 404 responses, only 303, since that's what it's always throwing", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410228387", "createdAt": "2020-04-17T13:38:40Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,152 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumerUuid\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: emailLocale\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        202:\n+          description: A list of subscriptions\n+        400:\n+          description: Invalid request such as missing email/locale or when the consumer with the given uuid was not found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /subscriptions/{id}:\n+    get:\n+      description: Retrieves a single Subscription\n+      tags:\n+        - Subscription\n+      operationId: getSubscription\n+      security: []\n+      parameters:\n+        - name: id\n+          in: path\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Status information about running Candlepin server\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SubscriptionDTO'\n+        404:\n+          description: Subscription could not be found using the provided ID\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Subscription\n+      tags:\n+        - Subscription\n+      operationId: deleteSubscription\n+      security: []\n+      parameters:\n+        - name: id\n+          in: path\n+          description: The ID of the subscription to remove\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: Subscription was successfully deleted\n+        404:\n+          description: Subscription could not be found using the provided ID\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /subscriptions/{id}/cert:\n+    get:\n+      description: Retrieves a Subscription Certificate As a PEM\n+      tags:\n+        - Subscription\n+      operationId: getSubCertAsPem\n+      security: []\n+      parameters:\n+        - name: id\n+          in: path\n+          description: The ID of the subscription certificate to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Status information about running Candlepin server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjEzMA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912130", "createdAt": "2020-04-21T06:41:28Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,152 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumerUuid\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: emailLocale\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        202:\n+          description: A list of subscriptions\n+        400:\n+          description: Invalid request such as missing email/locale or when the consumer with the given uuid was not found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /subscriptions/{id}:\n+    get:\n+      description: Retrieves a single Subscription\n+      tags:\n+        - Subscription\n+      operationId: getSubscription\n+      security: []\n+      parameters:\n+        - name: id\n+          in: path\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Status information about running Candlepin server\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SubscriptionDTO'\n+        404:\n+          description: Subscription could not be found using the provided ID\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Subscription\n+      tags:\n+        - Subscription\n+      operationId: deleteSubscription\n+      security: []\n+      parameters:\n+        - name: id\n+          in: path\n+          description: The ID of the subscription to remove\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: Subscription was successfully deleted\n+        404:\n+          description: Subscription could not be found using the provided ID\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /subscriptions/{id}/cert:\n+    get:\n+      description: Retrieves a Subscription Certificate As a PEM\n+      tags:\n+        - Subscription\n+      operationId: getSubCertAsPem\n+      security: []\n+      parameters:\n+        - name: id\n+          in: path\n+          description: The ID of the subscription certificate to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Status information about running Candlepin server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyODM4Nw=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzA0NjMyOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzozOTo1NFrOGHOZ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MToyMFrOGI1Hcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyOTIxMQ==", "bodyText": "Same here: If this endpoint does not end up being removed entirely, then it should have no 200 or 404 responses, only 303, since that's what it's always throwing", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410229211", "createdAt": "2020-04-17T13:39:54Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,152 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumerUuid\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: emailLocale\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        202:\n+          description: A list of subscriptions\n+        400:\n+          description: Invalid request such as missing email/locale or when the consumer with the given uuid was not found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /subscriptions/{id}:\n+    get:\n+      description: Retrieves a single Subscription\n+      tags:\n+        - Subscription\n+      operationId: getSubscription\n+      security: []\n+      parameters:\n+        - name: id\n+          in: path\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMjA1MQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411912051", "createdAt": "2020-04-21T06:41:20Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,152 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumerUuid\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+        - name: emailLocale\n+          in: query\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        202:\n+          description: A list of subscriptions\n+        400:\n+          description: Invalid request such as missing email/locale or when the consumer with the given uuid was not found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /subscriptions/{id}:\n+    get:\n+      description: Retrieves a single Subscription\n+      tags:\n+        - Subscription\n+      operationId: getSubscription\n+      security: []\n+      parameters:\n+        - name: id\n+          in: path\n+          description: The ID of the subscription to retrieve\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyOTIxMQ=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzExMzI1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzo1NjoyM1rOGHPDtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MTowOFrOGI1HCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIzOTkyNQ==", "bodyText": "Comment needs an update, since BrandingDTO no longer implements BrandingInfo, it should mention something like \"...for Branding and BrandingDTO objects\"", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410239925", "createdAt": "2020-04-17T13:56:23Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -825,16 +834,39 @@ public static boolean isChangedBy(Product entity, ProductDTO dto) {\n \n         Collection<BrandingDTO> brandingDTOs = dto.getBranding();\n         if (brandingDTOs != null) {\n-            Comparator<BrandingInfo> comparator = BrandingInfo.getBrandingInfoComparator();\n-            if (!Util.collectionsAreEqual((Collection) entity.getBranding(), (Collection) brandingDTOs,\n-                comparator)) {\n+            Comparator comparator = getBrandingDTOComparator();\n+            if (!Util.collectionsAreEqual((Collection) entity.getBranding(),\n+                (Collection) brandingDTOs, comparator)) {\n                 return true;\n             }\n         }\n \n         return false;\n     }\n \n+\n+    /**\n+     * Utility method that returns a Comparator for objects that implement BrandingInfo.\n+     *\n+     * @return A comparator for BrandingInfo objects.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMTk0Nw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411911947", "createdAt": "2020-04-21T06:41:08Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -825,16 +834,39 @@ public static boolean isChangedBy(Product entity, ProductDTO dto) {\n \n         Collection<BrandingDTO> brandingDTOs = dto.getBranding();\n         if (brandingDTOs != null) {\n-            Comparator<BrandingInfo> comparator = BrandingInfo.getBrandingInfoComparator();\n-            if (!Util.collectionsAreEqual((Collection) entity.getBranding(), (Collection) brandingDTOs,\n-                comparator)) {\n+            Comparator comparator = getBrandingDTOComparator();\n+            if (!Util.collectionsAreEqual((Collection) entity.getBranding(),\n+                (Collection) brandingDTOs, comparator)) {\n                 return true;\n             }\n         }\n \n         return false;\n     }\n \n+\n+    /**\n+     * Utility method that returns a Comparator for objects that implement BrandingInfo.\n+     *\n+     * @return A comparator for BrandingInfo objects.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIzOTkyNQ=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzE0MDUyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductContentTranslator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDowMzoxNlrOGHPU4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MDoyOVrOGI1FhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI0NDMyMw==", "bodyText": "Wrong comment", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410244323", "createdAt": "2020-04-17T14:03:16Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductContentTranslator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.ObjectTranslator;\n+import org.candlepin.model.ProductContent;\n+\n+\n+/**\n+ * The ContentTranslator provides translation from Content model objects to\n+ * ContentDTOs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMTU1Nw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411911557", "createdAt": "2020-04-21T06:40:29Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductContentTranslator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.ObjectTranslator;\n+import org.candlepin.model.ProductContent;\n+\n+\n+/**\n+ * The ContentTranslator provides translation from Content model objects to\n+ * ContentDTOs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI0NDMyMw=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzE5NzgwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductTranslator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoxODoyM1rOGHP58Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MDoyNlrOGI1FWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1MzgwOQ==", "bodyText": "I don't think we should be throwing exceptions in translators. This kind of thing is for when we receive a DTO in a POST/PUT request and we have to validate the client data. Here, we're just translating the data we know is already valid (Branding) to be output back, so we don't need any validation", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410253809", "createdAt": "2020-04-17T14:18:23Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductTranslator.java", "diffHunk": "@@ -61,54 +64,94 @@ public ProductDTO populate(Product source, ProductDTO destination) {\n      */\n     @Override\n     public ProductDTO populate(ModelTranslator modelTranslator, Product source, ProductDTO destination) {\n-        destination = super.populate(modelTranslator, source, destination);\n+        if (source == null) {\n+            throw new IllegalArgumentException(\"source is null\");\n+        }\n+\n+        if (destination == null) {\n+            throw new IllegalArgumentException(\"destination is null\");\n+        }\n \n-        destination.setUuid(source.getUuid());\n-        destination.setId(source.getId());\n-        destination.setName(source.getName());\n-        destination.setMultiplier(source.getMultiplier());\n-        destination.setHref(source.getHref());\n-        destination.setLocked(source.isLocked());\n-        destination.setAttributes(source.getAttributes());\n-        destination.setDependentProductIds(source.getDependentProductIds());\n+        destination.created(Util.toDateTime(source.getCreated()))\n+            .updated(Util.toDateTime(source.getUpdated()))\n+            .uuid(source.getUuid())\n+            .id(source.getId())\n+            .name(source.getName())\n+            .multiplier(source.getMultiplier())\n+            .href(source.getHref())\n+            .locked(source.isLocked())\n+            .attributes(toAttributes(source.getAttributes()))\n+            .productContent(new HashSet<>())\n+            .branding(new HashSet<>())\n+            .dependentProductIds(new HashSet<>(source.getDependentProductIds()));\n \n         if (modelTranslator != null) {\n             Collection<ProductContent> productContent = source.getProductContent();\n-            destination.setProductContent(Collections.emptyList());\n-\n             if (productContent != null) {\n-                ObjectTranslator<Content, ContentDTO> contentTranslator = modelTranslator\n-                    .findTranslatorByClass(Content.class, ContentDTO.class);\n+                ObjectTranslator<ProductContent, ProductContentDTO> contentTranslator = modelTranslator\n+                    .findTranslatorByClass(ProductContent.class, ProductContentDTO.class);\n \n+                Set<ProductContentDTO> content = new HashSet<>();\n                 for (ProductContent pc : productContent) {\n                     if (pc != null) {\n-                        ContentDTO dto = contentTranslator.translate(modelTranslator, pc.getContent());\n-\n+                        ProductContentDTO dto = contentTranslator.translate(modelTranslator, pc);\n                         if (dto != null) {\n-                            destination.addContent(dto, pc.isEnabled());\n+                            content.add(dto);\n                         }\n                     }\n                 }\n+                destination.productContent(content);\n+            }\n+            else {\n+                destination.productContent(Collections.emptySet());\n             }\n \n             Collection<Branding> branding = source.getBranding();\n             if (branding != null && !branding.isEmpty()) {\n+                Set<BrandingDTO> dtos = new HashSet<>();\n                 for (Branding brand : branding) {\n                     if (brand != null) {\n-                        destination.addBranding(modelTranslator.translate(brand, BrandingDTO.class));\n+                        BrandingDTO dto = modelTranslator.translate(brand, BrandingDTO.class);\n+                        if (isNullOrIncomplete(dto)) {\n+                            throw new IllegalArgumentException(\"branding is null or incomplete\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMTUxMw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411911513", "createdAt": "2020-04-21T06:40:26Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductTranslator.java", "diffHunk": "@@ -61,54 +64,94 @@ public ProductDTO populate(Product source, ProductDTO destination) {\n      */\n     @Override\n     public ProductDTO populate(ModelTranslator modelTranslator, Product source, ProductDTO destination) {\n-        destination = super.populate(modelTranslator, source, destination);\n+        if (source == null) {\n+            throw new IllegalArgumentException(\"source is null\");\n+        }\n+\n+        if (destination == null) {\n+            throw new IllegalArgumentException(\"destination is null\");\n+        }\n \n-        destination.setUuid(source.getUuid());\n-        destination.setId(source.getId());\n-        destination.setName(source.getName());\n-        destination.setMultiplier(source.getMultiplier());\n-        destination.setHref(source.getHref());\n-        destination.setLocked(source.isLocked());\n-        destination.setAttributes(source.getAttributes());\n-        destination.setDependentProductIds(source.getDependentProductIds());\n+        destination.created(Util.toDateTime(source.getCreated()))\n+            .updated(Util.toDateTime(source.getUpdated()))\n+            .uuid(source.getUuid())\n+            .id(source.getId())\n+            .name(source.getName())\n+            .multiplier(source.getMultiplier())\n+            .href(source.getHref())\n+            .locked(source.isLocked())\n+            .attributes(toAttributes(source.getAttributes()))\n+            .productContent(new HashSet<>())\n+            .branding(new HashSet<>())\n+            .dependentProductIds(new HashSet<>(source.getDependentProductIds()));\n \n         if (modelTranslator != null) {\n             Collection<ProductContent> productContent = source.getProductContent();\n-            destination.setProductContent(Collections.emptyList());\n-\n             if (productContent != null) {\n-                ObjectTranslator<Content, ContentDTO> contentTranslator = modelTranslator\n-                    .findTranslatorByClass(Content.class, ContentDTO.class);\n+                ObjectTranslator<ProductContent, ProductContentDTO> contentTranslator = modelTranslator\n+                    .findTranslatorByClass(ProductContent.class, ProductContentDTO.class);\n \n+                Set<ProductContentDTO> content = new HashSet<>();\n                 for (ProductContent pc : productContent) {\n                     if (pc != null) {\n-                        ContentDTO dto = contentTranslator.translate(modelTranslator, pc.getContent());\n-\n+                        ProductContentDTO dto = contentTranslator.translate(modelTranslator, pc);\n                         if (dto != null) {\n-                            destination.addContent(dto, pc.isEnabled());\n+                            content.add(dto);\n                         }\n                     }\n                 }\n+                destination.productContent(content);\n+            }\n+            else {\n+                destination.productContent(Collections.emptySet());\n             }\n \n             Collection<Branding> branding = source.getBranding();\n             if (branding != null && !branding.isEmpty()) {\n+                Set<BrandingDTO> dtos = new HashSet<>();\n                 for (Branding brand : branding) {\n                     if (brand != null) {\n-                        destination.addBranding(modelTranslator.translate(brand, BrandingDTO.class));\n+                        BrandingDTO dto = modelTranslator.translate(brand, BrandingDTO.class);\n+                        if (isNullOrIncomplete(dto)) {\n+                            throw new IllegalArgumentException(\"branding is null or incomplete\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1MzgwOQ=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzIwMzMxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/api/v1/SubscriptionTranslator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoxOTo0M1rOGHP9cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MDoyM1rOGI1FNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NDcwNg==", "bodyText": "wrong comment", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410254706", "createdAt": "2020-04-17T14:19:43Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/SubscriptionTranslator.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.ObjectTranslator;\n+import org.candlepin.model.Cdn;\n+import org.candlepin.model.Certificate;\n+import org.candlepin.model.Owner;\n+import org.candlepin.model.dto.ProductData;\n+import org.candlepin.model.dto.Subscription;\n+import org.candlepin.util.Util;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+\n+/**\n+ * The RoleTranslator provides translation from Role model objects to\n+ * RoleDTOs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMTQ3Ng==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411911476", "createdAt": "2020-04-21T06:40:23Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/SubscriptionTranslator.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.ObjectTranslator;\n+import org.candlepin.model.Cdn;\n+import org.candlepin.model.Certificate;\n+import org.candlepin.model.Owner;\n+import org.candlepin.model.dto.ProductData;\n+import org.candlepin.model.dto.Subscription;\n+import org.candlepin.util.Util;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+\n+/**\n+ * The RoleTranslator provides translation from Role model objects to\n+ * RoleDTOs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NDcwNg=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzIzMzM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoyNzoyOFrOGHQRXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MDoyMVrOGI1FHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1OTgwNA==", "bodyText": "Same here: no need for validation at this point", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410259804", "createdAt": "2020-04-17T14:27:28Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "diffHunk": "@@ -70,42 +79,51 @@ public ProductDTO populate(ModelTranslator modelTranslator, ProductData source,\n             throw new IllegalArgumentException(\"dest is null\");\n         }\n \n-        dest.setCreated(source.getCreated());\n-        dest.setUpdated(source.getUpdated());\n-\n-        dest.setUuid(source.getUuid());\n-        dest.setId(source.getId());\n-        dest.setName(source.getName());\n-        dest.setMultiplier(source.getMultiplier());\n-        dest.setAttributes(source.getAttributes());\n-        dest.setDependentProductIds(source.getDependentProductIds());\n-        dest.setHref(source.getHref());\n-        dest.setLocked(source.isLocked());\n-\n+        dest.id(source.getId())\n+            .uuid(source.getUuid())\n+            .name(source.getName())\n+            .multiplier(source.getMultiplier())\n+            .created(Util.toDateTime(source.getCreated()))\n+            .updated(Util.toDateTime(source.getUpdated()))\n+            .attributes(toAttributes(source.getAttributes()))\n+            .productContent(new HashSet<>())\n+            .branding(new HashSet<>())\n+            .dependentProductIds(toSet(source))\n+            .href(source.getHref())\n+            .locked(source.isLocked());\n \n         if (modelTranslator != null) {\n             Collection<ProductContentData> productContentData = source.getProductContent();\n-            dest.setProductContent(null);\n-            if (productContentData != null) {\n+            if (productContentData != null && !productContentData.isEmpty()) {\n                 ObjectTranslator<ContentData, ContentDTO> contentTranslator = modelTranslator\n                     .findTranslatorByClass(ContentData.class, ContentDTO.class);\n-\n-                for (ProductContentData pcd : productContentData) {\n-                    if (pcd != null && pcd.getContent() != null) {\n-                        ContentDTO dto = contentTranslator.translate(modelTranslator, pcd.getContent());\n-                        dest.addContent(dto, pcd.isEnabled());\n+                Set<ProductContentDTO> dtos = new HashSet<>();\n+                for (ProductContentData productContent : productContentData) {\n+                    if (productContent != null && productContent.getContent() != null) {\n+                        ContentDTO dto = contentTranslator\n+                            .translate(modelTranslator, productContent.getContent());\n+                        dtos.add(createContent(dto, productContent.isEnabled()));\n                     }\n                 }\n+                dest.productContent(dtos);\n+            }\n+            else {\n+                dest.productContent(Collections.emptySet());\n             }\n \n             Collection<Branding> productBrandings = source.getBranding();\n-            dest.setBranding(null);\n-            if (productBrandings != null) {\n+            if (productBrandings != null && !productBrandings.isEmpty()) {\n+                Set<BrandingDTO> dtos = new HashSet<>();\n                 for (Branding brand : productBrandings) {\n                     if (brand != null) {\n-                        dest.addBranding(modelTranslator.translate(brand, BrandingDTO.class));\n+                        BrandingDTO dto = modelTranslator.translate(brand, BrandingDTO.class);\n+                        if (isNullOrIncomplete(dto)) {\n+                            throw new IllegalArgumentException(\"branding is null or incomplete\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMTQ1Mg==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411911452", "createdAt": "2020-04-21T06:40:21Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/dto/shim/ProductDataTranslator.java", "diffHunk": "@@ -70,42 +79,51 @@ public ProductDTO populate(ModelTranslator modelTranslator, ProductData source,\n             throw new IllegalArgumentException(\"dest is null\");\n         }\n \n-        dest.setCreated(source.getCreated());\n-        dest.setUpdated(source.getUpdated());\n-\n-        dest.setUuid(source.getUuid());\n-        dest.setId(source.getId());\n-        dest.setName(source.getName());\n-        dest.setMultiplier(source.getMultiplier());\n-        dest.setAttributes(source.getAttributes());\n-        dest.setDependentProductIds(source.getDependentProductIds());\n-        dest.setHref(source.getHref());\n-        dest.setLocked(source.isLocked());\n-\n+        dest.id(source.getId())\n+            .uuid(source.getUuid())\n+            .name(source.getName())\n+            .multiplier(source.getMultiplier())\n+            .created(Util.toDateTime(source.getCreated()))\n+            .updated(Util.toDateTime(source.getUpdated()))\n+            .attributes(toAttributes(source.getAttributes()))\n+            .productContent(new HashSet<>())\n+            .branding(new HashSet<>())\n+            .dependentProductIds(toSet(source))\n+            .href(source.getHref())\n+            .locked(source.isLocked());\n \n         if (modelTranslator != null) {\n             Collection<ProductContentData> productContentData = source.getProductContent();\n-            dest.setProductContent(null);\n-            if (productContentData != null) {\n+            if (productContentData != null && !productContentData.isEmpty()) {\n                 ObjectTranslator<ContentData, ContentDTO> contentTranslator = modelTranslator\n                     .findTranslatorByClass(ContentData.class, ContentDTO.class);\n-\n-                for (ProductContentData pcd : productContentData) {\n-                    if (pcd != null && pcd.getContent() != null) {\n-                        ContentDTO dto = contentTranslator.translate(modelTranslator, pcd.getContent());\n-                        dest.addContent(dto, pcd.isEnabled());\n+                Set<ProductContentDTO> dtos = new HashSet<>();\n+                for (ProductContentData productContent : productContentData) {\n+                    if (productContent != null && productContent.getContent() != null) {\n+                        ContentDTO dto = contentTranslator\n+                            .translate(modelTranslator, productContent.getContent());\n+                        dtos.add(createContent(dto, productContent.isEnabled()));\n                     }\n                 }\n+                dest.productContent(dtos);\n+            }\n+            else {\n+                dest.productContent(Collections.emptySet());\n             }\n \n             Collection<Branding> productBrandings = source.getBranding();\n-            dest.setBranding(null);\n-            if (productBrandings != null) {\n+            if (productBrandings != null && !productBrandings.isEmpty()) {\n+                Set<BrandingDTO> dtos = new HashSet<>();\n                 for (Branding brand : productBrandings) {\n                     if (brand != null) {\n-                        dest.addBranding(modelTranslator.translate(brand, BrandingDTO.class));\n+                        BrandingDTO dto = modelTranslator.translate(brand, BrandingDTO.class);\n+                        if (isNullOrIncomplete(dto)) {\n+                            throw new IllegalArgumentException(\"branding is null or incomplete\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1OTgwNA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzI2NjI4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resource/SubscriptionResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozNTozMlrOGHQmdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MDoxN1rOGI1FBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NTIwNA==", "bodyText": "We're moving this resource to the spec file, which means all these annotations should be removed from all endpoints here (since they will be auto-generated in SubscriptionApi)", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410265204", "createdAt": "2020-04-17T14:35:32Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resource/SubscriptionResource.java", "diffHunk": "@@ -63,34 +65,37 @@\n @Path(\"/subscriptions\")\n @Api(value = \"subscriptions\", authorizations = { @Authorization(\"basic\") })\n @Consumes(MediaType.APPLICATION_JSON)\n-public class SubscriptionResource {\n+public class SubscriptionResource implements SubscriptionsApi {\n     private static Logger log = LoggerFactory.getLogger(SubscriptionResource.class);\n \n-    private SubscriptionServiceAdapter subService;\n-    private ConsumerCurator consumerCurator;\n-    private PoolManager poolManager;\n-\n-    private I18n i18n;\n+    private final SubscriptionServiceAdapter subService;\n+    private final ConsumerCurator consumerCurator;\n+    private final PoolManager poolManager;\n+    private final I18n i18n;\n+    private final ModelTranslator translator;\n \n     @Inject\n     public SubscriptionResource(SubscriptionServiceAdapter subService,\n-        ConsumerCurator consumerCurator, PoolManager poolManager, I18n i18n) {\n-\n-        this.subService = subService;\n-        this.consumerCurator = consumerCurator;\n-        this.poolManager = poolManager;\n-\n-        this.i18n = i18n;\n+        ConsumerCurator consumerCurator, PoolManager poolManager, I18n i18n,\n+        ModelTranslator translator) {\n+\n+        this.subService = Objects.requireNonNull(subService);\n+        this.consumerCurator = Objects.requireNonNull(consumerCurator);\n+        this.poolManager = Objects.requireNonNull(poolManager);\n+        this.i18n = Objects.requireNonNull(i18n);\n+        this.translator = Objects.requireNonNull(translator);\n     }\n \n     @ApiOperation(notes = \"Retrieves a list of Subscriptions\", value = \"getSubscriptions\")\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMTQzMQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411911431", "createdAt": "2020-04-21T06:40:17Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/resource/SubscriptionResource.java", "diffHunk": "@@ -63,34 +65,37 @@\n @Path(\"/subscriptions\")\n @Api(value = \"subscriptions\", authorizations = { @Authorization(\"basic\") })\n @Consumes(MediaType.APPLICATION_JSON)\n-public class SubscriptionResource {\n+public class SubscriptionResource implements SubscriptionsApi {\n     private static Logger log = LoggerFactory.getLogger(SubscriptionResource.class);\n \n-    private SubscriptionServiceAdapter subService;\n-    private ConsumerCurator consumerCurator;\n-    private PoolManager poolManager;\n-\n-    private I18n i18n;\n+    private final SubscriptionServiceAdapter subService;\n+    private final ConsumerCurator consumerCurator;\n+    private final PoolManager poolManager;\n+    private final I18n i18n;\n+    private final ModelTranslator translator;\n \n     @Inject\n     public SubscriptionResource(SubscriptionServiceAdapter subService,\n-        ConsumerCurator consumerCurator, PoolManager poolManager, I18n i18n) {\n-\n-        this.subService = subService;\n-        this.consumerCurator = consumerCurator;\n-        this.poolManager = poolManager;\n-\n-        this.i18n = i18n;\n+        ConsumerCurator consumerCurator, PoolManager poolManager, I18n i18n,\n+        ModelTranslator translator) {\n+\n+        this.subService = Objects.requireNonNull(subService);\n+        this.consumerCurator = Objects.requireNonNull(consumerCurator);\n+        this.poolManager = Objects.requireNonNull(poolManager);\n+        this.i18n = Objects.requireNonNull(i18n);\n+        this.translator = Objects.requireNonNull(translator);\n     }\n \n     @ApiOperation(notes = \"Retrieves a list of Subscriptions\", value = \"getSubscriptions\")\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NTIwNA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzc0MTQ2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0NDowMlrOGHVXQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMTozNzo0N1rOGKkyeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0MzIzNA==", "bodyText": "We're still violating encapsulation principles here. We don't want to modify the collection and assume that's going to be retained.\nWe should be building up the content and then throwing a new collection at the DTO, or figuring out a way to return the addContent method back to the OpenAPI DTOs.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r410343234", "createdAt": "2020-04-17T16:44:02Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -306,28 +303,56 @@ public Content updateContent(ContentDTO update, Owner owner, boolean regenerateE\n         updated = this.contentCurator.create(updated);\n \n         this.ownerContentCurator.updateOwnerContentReferences(owner,\n-            Collections.<String, String>singletonMap(entity.getUuid(), updated.getUuid()));\n+            Collections.singletonMap(entity.getUuid(), updated.getUuid()));\n \n         // Impl note:\n         // This block is a consequence of products and contents not being strongly related.\n         log.debug(\"Updating {} affected products\", affectedProducts.size());\n-        ContentDTO cdto = this.modelTranslator.translate(updated, ContentDTO.class);\n+        ContentDTO updatedContent = this.modelTranslator.translate(updated, ContentDTO.class);\n \n         // TODO: Should we bulk this up like we do in importContent? Probably.\n         for (Product product : affectedProducts) {\n             log.debug(\"Updating affected product: {}\", product);\n+\n             ProductDTO pdto = this.modelTranslator.translate(product, ProductDTO.class);\n+            addContent(pdto, updatedContent);\n \n-            ProductContentDTO pcdto = pdto.getProductContent(cdto.getId());\n-            if (pcdto != null) {\n-                pdto.addContent(cdto, pcdto.isEnabled());\n+            // Impl note: This should also take care of our entitlement cert regeneration\n+            this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+        }\n \n-                // Impl note: This should also take care of our entitlement cert regeneration\n-                this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+        return updated;\n+    }\n+\n+    private ProductContentDTO findContent(Set<ProductContentDTO> contents, String id) {\n+        if (id == null) {\n+            return null;\n+        }\n+        for (ProductContentDTO content : contents) {\n+            if (id.equals(content.getContent().getId())) {\n+                return content;\n             }\n         }\n+        return null;\n+    }\n \n-        return updated;\n+    private void addContent(ProductDTO product, ContentDTO update) {\n+        if (update == null || update.getId() == null) {\n+            throw new IllegalArgumentException(\"update references incomplete content\");\n+        }\n+\n+        Set<ProductContentDTO> productContent = product.getProductContent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3MDI5OQ==", "bodyText": "That is a problem with our current use of dtos. DTO is breaking encapsulation by definition. Using them as a makeshift domain objects is only making it worse. We are modifying the all over the place which we should not do.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411970299", "createdAt": "2020-04-21T08:12:47Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -306,28 +303,56 @@ public Content updateContent(ContentDTO update, Owner owner, boolean regenerateE\n         updated = this.contentCurator.create(updated);\n \n         this.ownerContentCurator.updateOwnerContentReferences(owner,\n-            Collections.<String, String>singletonMap(entity.getUuid(), updated.getUuid()));\n+            Collections.singletonMap(entity.getUuid(), updated.getUuid()));\n \n         // Impl note:\n         // This block is a consequence of products and contents not being strongly related.\n         log.debug(\"Updating {} affected products\", affectedProducts.size());\n-        ContentDTO cdto = this.modelTranslator.translate(updated, ContentDTO.class);\n+        ContentDTO updatedContent = this.modelTranslator.translate(updated, ContentDTO.class);\n \n         // TODO: Should we bulk this up like we do in importContent? Probably.\n         for (Product product : affectedProducts) {\n             log.debug(\"Updating affected product: {}\", product);\n+\n             ProductDTO pdto = this.modelTranslator.translate(product, ProductDTO.class);\n+            addContent(pdto, updatedContent);\n \n-            ProductContentDTO pcdto = pdto.getProductContent(cdto.getId());\n-            if (pcdto != null) {\n-                pdto.addContent(cdto, pcdto.isEnabled());\n+            // Impl note: This should also take care of our entitlement cert regeneration\n+            this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+        }\n \n-                // Impl note: This should also take care of our entitlement cert regeneration\n-                this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+        return updated;\n+    }\n+\n+    private ProductContentDTO findContent(Set<ProductContentDTO> contents, String id) {\n+        if (id == null) {\n+            return null;\n+        }\n+        for (ProductContentDTO content : contents) {\n+            if (id.equals(content.getContent().getId())) {\n+                return content;\n             }\n         }\n+        return null;\n+    }\n \n-        return updated;\n+    private void addContent(ProductDTO product, ContentDTO update) {\n+        if (update == null || update.getId() == null) {\n+            throw new IllegalArgumentException(\"update references incomplete content\");\n+        }\n+\n+        Set<ProductContentDTO> productContent = product.getProductContent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0MzIzNA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5NzM0OQ==", "bodyText": "We've already run into problems a number of times before by doing this. Making assumptions about how the DTOs map their data isn't a good practice here. As soon as you do, you're coupling the internal logic of two completely separate things -- one of which we have very little control over now.\nShould ContentManager be using DTOs these days? Absolutely not. It's an area that's very deserving of a refactor. But that's not reason enough to exacerbate the problem.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r412397349", "createdAt": "2020-04-21T18:35:22Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -306,28 +303,56 @@ public Content updateContent(ContentDTO update, Owner owner, boolean regenerateE\n         updated = this.contentCurator.create(updated);\n \n         this.ownerContentCurator.updateOwnerContentReferences(owner,\n-            Collections.<String, String>singletonMap(entity.getUuid(), updated.getUuid()));\n+            Collections.singletonMap(entity.getUuid(), updated.getUuid()));\n \n         // Impl note:\n         // This block is a consequence of products and contents not being strongly related.\n         log.debug(\"Updating {} affected products\", affectedProducts.size());\n-        ContentDTO cdto = this.modelTranslator.translate(updated, ContentDTO.class);\n+        ContentDTO updatedContent = this.modelTranslator.translate(updated, ContentDTO.class);\n \n         // TODO: Should we bulk this up like we do in importContent? Probably.\n         for (Product product : affectedProducts) {\n             log.debug(\"Updating affected product: {}\", product);\n+\n             ProductDTO pdto = this.modelTranslator.translate(product, ProductDTO.class);\n+            addContent(pdto, updatedContent);\n \n-            ProductContentDTO pcdto = pdto.getProductContent(cdto.getId());\n-            if (pcdto != null) {\n-                pdto.addContent(cdto, pcdto.isEnabled());\n+            // Impl note: This should also take care of our entitlement cert regeneration\n+            this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+        }\n \n-                // Impl note: This should also take care of our entitlement cert regeneration\n-                this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+        return updated;\n+    }\n+\n+    private ProductContentDTO findContent(Set<ProductContentDTO> contents, String id) {\n+        if (id == null) {\n+            return null;\n+        }\n+        for (ProductContentDTO content : contents) {\n+            if (id.equals(content.getContent().getId())) {\n+                return content;\n             }\n         }\n+        return null;\n+    }\n \n-        return updated;\n+    private void addContent(ProductDTO product, ContentDTO update) {\n+        if (update == null || update.getId() == null) {\n+            throw new IllegalArgumentException(\"update references incomplete content\");\n+        }\n+\n+        Set<ProductContentDTO> productContent = product.getProductContent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0MzIzNA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwOTY0Mw==", "bodyText": "We are apparently agreeing about the problem. What do you suggest w should do? I refactored the code so that the collection are at least not modified in place, but coupling is still there.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r412709643", "createdAt": "2020-04-22T06:38:54Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -306,28 +303,56 @@ public Content updateContent(ContentDTO update, Owner owner, boolean regenerateE\n         updated = this.contentCurator.create(updated);\n \n         this.ownerContentCurator.updateOwnerContentReferences(owner,\n-            Collections.<String, String>singletonMap(entity.getUuid(), updated.getUuid()));\n+            Collections.singletonMap(entity.getUuid(), updated.getUuid()));\n \n         // Impl note:\n         // This block is a consequence of products and contents not being strongly related.\n         log.debug(\"Updating {} affected products\", affectedProducts.size());\n-        ContentDTO cdto = this.modelTranslator.translate(updated, ContentDTO.class);\n+        ContentDTO updatedContent = this.modelTranslator.translate(updated, ContentDTO.class);\n \n         // TODO: Should we bulk this up like we do in importContent? Probably.\n         for (Product product : affectedProducts) {\n             log.debug(\"Updating affected product: {}\", product);\n+\n             ProductDTO pdto = this.modelTranslator.translate(product, ProductDTO.class);\n+            addContent(pdto, updatedContent);\n \n-            ProductContentDTO pcdto = pdto.getProductContent(cdto.getId());\n-            if (pcdto != null) {\n-                pdto.addContent(cdto, pcdto.isEnabled());\n+            // Impl note: This should also take care of our entitlement cert regeneration\n+            this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+        }\n \n-                // Impl note: This should also take care of our entitlement cert regeneration\n-                this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+        return updated;\n+    }\n+\n+    private ProductContentDTO findContent(Set<ProductContentDTO> contents, String id) {\n+        if (id == null) {\n+            return null;\n+        }\n+        for (ProductContentDTO content : contents) {\n+            if (id.equals(content.getContent().getId())) {\n+                return content;\n             }\n         }\n+        return null;\n+    }\n \n-        return updated;\n+    private void addContent(ProductDTO product, ContentDTO update) {\n+        if (update == null || update.getId() == null) {\n+            throw new IllegalArgumentException(\"update references incomplete content\");\n+        }\n+\n+        Set<ProductContentDTO> productContent = product.getProductContent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0MzIzNA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MDQxOA==", "bodyText": "In the interest of getting this PR merged, and not adding additional work, I think the solution for now is good. But we should find a better way of doing this in another task.\nI spent sometime trying to understand why we even use DTOs in this way in the ContentManager. Firstly, using DTOs in Product/ContentManager is no problem in itself, if what we're doing is simply accepting a DTO as an update from a resource endpoint and only call getters on it. And I agree with both of you, we shouldn't be altering the data on the DTO. The reason (which seems uniquely affecting ContentManager but not ProductManager) looks to me to be:\nWhat we want to do:\n\nWe're fetching entities from the DB (Content and Product) and want to process them (involves altering the data on them).\nThen we want to pass on that data to the ProductManager (because they're intrinsically connected), BUT, the ProductManager\naccepts DTOs as input, so we have to translate the entities into DTOs and then pass them to ProductManager.\n\nWhat we're actually doing:\n\nFetching entities from the DB (alternate versions of content, affected products etc.)\nWe're explicitly using a translator and turning them into DTOs (ONLY because we want to later send them to ProductManager, which accepts DTOs)\nWe're processing/altering them (here is the current problem).\nSending them off to ProductManager.\n\nWhat I think we should be doing:\n\nFetching entities from DB.\nWe're processing/altering them. **\nWe're translating them to DTOs.\nSending them to ProductManager.\n\n** If we have hibernate issues in step 2 here, as some comments in the code imply,\nwhere altering collections on entities is a problem, then we have some alternatives:\na. Up until now we used DTOs (but now this is a problem, so something else should be used)\nb. We can clone the entities (so that they are not hibernate-managed, and alter freely)\nc. We can create new data containers (you could call them DTOs) that provide the encapsulation\nwe need.\nI think a is not an option, and c is overkill (because we'd still need to re-translate into api DTOs), and prefer option b.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r412780418", "createdAt": "2020-04-22T08:29:20Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -306,28 +303,56 @@ public Content updateContent(ContentDTO update, Owner owner, boolean regenerateE\n         updated = this.contentCurator.create(updated);\n \n         this.ownerContentCurator.updateOwnerContentReferences(owner,\n-            Collections.<String, String>singletonMap(entity.getUuid(), updated.getUuid()));\n+            Collections.singletonMap(entity.getUuid(), updated.getUuid()));\n \n         // Impl note:\n         // This block is a consequence of products and contents not being strongly related.\n         log.debug(\"Updating {} affected products\", affectedProducts.size());\n-        ContentDTO cdto = this.modelTranslator.translate(updated, ContentDTO.class);\n+        ContentDTO updatedContent = this.modelTranslator.translate(updated, ContentDTO.class);\n \n         // TODO: Should we bulk this up like we do in importContent? Probably.\n         for (Product product : affectedProducts) {\n             log.debug(\"Updating affected product: {}\", product);\n+\n             ProductDTO pdto = this.modelTranslator.translate(product, ProductDTO.class);\n+            addContent(pdto, updatedContent);\n \n-            ProductContentDTO pcdto = pdto.getProductContent(cdto.getId());\n-            if (pcdto != null) {\n-                pdto.addContent(cdto, pcdto.isEnabled());\n+            // Impl note: This should also take care of our entitlement cert regeneration\n+            this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+        }\n \n-                // Impl note: This should also take care of our entitlement cert regeneration\n-                this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+        return updated;\n+    }\n+\n+    private ProductContentDTO findContent(Set<ProductContentDTO> contents, String id) {\n+        if (id == null) {\n+            return null;\n+        }\n+        for (ProductContentDTO content : contents) {\n+            if (id.equals(content.getContent().getId())) {\n+                return content;\n             }\n         }\n+        return null;\n+    }\n \n-        return updated;\n+    private void addContent(ProductDTO product, ContentDTO update) {\n+        if (update == null || update.getId() == null) {\n+            throw new IllegalArgumentException(\"update references incomplete content\");\n+        }\n+\n+        Set<ProductContentDTO> productContent = product.getProductContent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0MzIzNA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5ODE1NA==", "bodyText": "@Januson\nWe should be avoiding directly modifying the collection and assuming it will update the DTO's state. That last part is what makes this class dependent on the inner workings of the DTO. We should, instead, create a new collection of the content we want, and assign that to the DTO.\n@nikosmoum\nSome history on why DTOs were ever used in the Product/Content manager:\nOriginally, it only accepted model objects, as the expectation was that it would take a modified product, fetch a new instance from the DB exactly how it's represented on the backend, and do all its calculations based on the modified local (potentially attached) instance, and the detached instance it fetched representing the current DB state.\nHowever, due to how we've configured Hibernate (primarily, auto-commit/flush), there are a number of operations which cause Hibernate to be \"helpful\" and persist some changes to managed objects, even if we haven't explicitly called .merge or .update. The first version had a number of weird bugs where collections on products and content would not be reflected in version comparisons, because Hibernate had persisted the change for us as soon as we did any select on the DB against the table owning the object -- even if it was for a different entity/instance.\nThis led to a number of choices, and after weighing the pros/cons of them, we, perhaps erroneously, opted to use DTOs at this layer to allow us to pass in the changes without risking putting a managed object in an unknown state.\nSince then, we've made a number of other changes, such as making product and content immutable, which may fix the issue entirely by means of telling Hibernate to never change the object; we've added the service adapter model, which is how most of these changes are made today; and I'm currently working on a refresh refactor which pulls much of the work out of these managers.\nIt's entirely probable that in the very near future, we'll have a clear view of what these managers need to do, and how we should go about using them. The resource refactor should be the final nail in the coffin of passing the DTOs into the managers, and will likely be the optimal point for addressing the remaining components of the managers in question.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r413098154", "createdAt": "2020-04-22T15:46:06Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -306,28 +303,56 @@ public Content updateContent(ContentDTO update, Owner owner, boolean regenerateE\n         updated = this.contentCurator.create(updated);\n \n         this.ownerContentCurator.updateOwnerContentReferences(owner,\n-            Collections.<String, String>singletonMap(entity.getUuid(), updated.getUuid()));\n+            Collections.singletonMap(entity.getUuid(), updated.getUuid()));\n \n         // Impl note:\n         // This block is a consequence of products and contents not being strongly related.\n         log.debug(\"Updating {} affected products\", affectedProducts.size());\n-        ContentDTO cdto = this.modelTranslator.translate(updated, ContentDTO.class);\n+        ContentDTO updatedContent = this.modelTranslator.translate(updated, ContentDTO.class);\n \n         // TODO: Should we bulk this up like we do in importContent? Probably.\n         for (Product product : affectedProducts) {\n             log.debug(\"Updating affected product: {}\", product);\n+\n             ProductDTO pdto = this.modelTranslator.translate(product, ProductDTO.class);\n+            addContent(pdto, updatedContent);\n \n-            ProductContentDTO pcdto = pdto.getProductContent(cdto.getId());\n-            if (pcdto != null) {\n-                pdto.addContent(cdto, pcdto.isEnabled());\n+            // Impl note: This should also take care of our entitlement cert regeneration\n+            this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+        }\n \n-                // Impl note: This should also take care of our entitlement cert regeneration\n-                this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+        return updated;\n+    }\n+\n+    private ProductContentDTO findContent(Set<ProductContentDTO> contents, String id) {\n+        if (id == null) {\n+            return null;\n+        }\n+        for (ProductContentDTO content : contents) {\n+            if (id.equals(content.getContent().getId())) {\n+                return content;\n             }\n         }\n+        return null;\n+    }\n \n-        return updated;\n+    private void addContent(ProductDTO product, ContentDTO update) {\n+        if (update == null || update.getId() == null) {\n+            throw new IllegalArgumentException(\"update references incomplete content\");\n+        }\n+\n+        Set<ProductContentDTO> productContent = product.getProductContent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0MzIzNA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0MTY4OQ==", "bodyText": "@Ceiu @Januson Alright, we can address the long term impact after those changes. For the short-term changes in this PR then, the change should be: iterate the DTO collection items and add them to an entirely new collection, modify the new collection as needed, then add it back to the DTO, right?\nEdit: It looks like the updated code is using the HashSet copy constructor, which internally is doing just that, so no need for more changes?", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r413741689", "createdAt": "2020-04-23T11:37:47Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -306,28 +303,56 @@ public Content updateContent(ContentDTO update, Owner owner, boolean regenerateE\n         updated = this.contentCurator.create(updated);\n \n         this.ownerContentCurator.updateOwnerContentReferences(owner,\n-            Collections.<String, String>singletonMap(entity.getUuid(), updated.getUuid()));\n+            Collections.singletonMap(entity.getUuid(), updated.getUuid()));\n \n         // Impl note:\n         // This block is a consequence of products and contents not being strongly related.\n         log.debug(\"Updating {} affected products\", affectedProducts.size());\n-        ContentDTO cdto = this.modelTranslator.translate(updated, ContentDTO.class);\n+        ContentDTO updatedContent = this.modelTranslator.translate(updated, ContentDTO.class);\n \n         // TODO: Should we bulk this up like we do in importContent? Probably.\n         for (Product product : affectedProducts) {\n             log.debug(\"Updating affected product: {}\", product);\n+\n             ProductDTO pdto = this.modelTranslator.translate(product, ProductDTO.class);\n+            addContent(pdto, updatedContent);\n \n-            ProductContentDTO pcdto = pdto.getProductContent(cdto.getId());\n-            if (pcdto != null) {\n-                pdto.addContent(cdto, pcdto.isEnabled());\n+            // Impl note: This should also take care of our entitlement cert regeneration\n+            this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+        }\n \n-                // Impl note: This should also take care of our entitlement cert regeneration\n-                this.productManager.updateProduct(pdto, owner, regenerateEntitlementCerts);\n+        return updated;\n+    }\n+\n+    private ProductContentDTO findContent(Set<ProductContentDTO> contents, String id) {\n+        if (id == null) {\n+            return null;\n+        }\n+        for (ProductContentDTO content : contents) {\n+            if (id.equals(content.getContent().getId())) {\n+                return content;\n             }\n         }\n+        return null;\n+    }\n \n-        return updated;\n+    private void addContent(ProductDTO product, ContentDTO update) {\n+        if (update == null || update.getId() == null) {\n+            throw new IllegalArgumentException(\"update references incomplete content\");\n+        }\n+\n+        Set<ProductContentDTO> productContent = product.getProductContent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0MzIzNA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTA5ODEzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/util/Util.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMToxMTowNVrOGIPS_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MDoxMlrOGI1E3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5MjQxMw==", "bodyText": "Where exactly is this needed? I can't find where this is used in your changes?", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411292413", "createdAt": "2020-04-20T11:11:05Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/util/Util.java", "diffHunk": "@@ -547,4 +550,24 @@ public static String getHostname() {\n     public static OffsetDateTime toDateTime(Date date) {\n         return date != null ? date.toInstant().atOffset(ZoneOffset.UTC) : null;\n     }\n+\n+    /**\n+     * Takes a map and splits it into a list of maps each with one item from the given map.\n+     *\n+     * @param map a map to be split\n+     * @return a list of single item maps\n+     */\n+    public static List<Map<String, String>> split(Map<String, String> map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMTM4OQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411911389", "createdAt": "2020-04-21T06:40:12Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/util/Util.java", "diffHunk": "@@ -547,4 +550,24 @@ public static String getHostname() {\n     public static OffsetDateTime toDateTime(Date date) {\n         return date != null ? date.toInstant().atOffset(ZoneOffset.UTC) : null;\n     }\n+\n+    /**\n+     * Takes a map and splits it into a list of maps each with one item from the given map.\n+     *\n+     * @param map a map to be split\n+     * @return a list of single item maps\n+     */\n+    public static List<Map<String, String>> split(Map<String, String> map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5MjQxMw=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTE0NDU0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/candlepin/dto/api/v1/ProductContentTranslatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMToyMzoxOVrOGIPtpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MDowOFrOGI1Eqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5OTIzOQ==", "bodyText": "Code duplication: This can be replaced by instantiating a ContentTranslatorTest and calling initSourceObject()", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411299239", "createdAt": "2020-04-20T11:23:19Z", "author": {"login": "nikosmoum"}, "path": "server/src/test/java/org/candlepin/dto/api/v1/ProductContentTranslatorTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.AbstractTranslatorTest;\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.model.Content;\n+import org.candlepin.model.ProductContent;\n+\n+import java.util.Arrays;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+\n+/**\n+ * Test suite for the ContentTranslator class\n+ */\n+public class ProductContentTranslatorTest extends\n+    AbstractTranslatorTest<ProductContent, ProductContentDTO, ProductContentTranslator> {\n+\n+    protected ProductContentTranslator translator = new ProductContentTranslator();\n+\n+    @Override\n+    protected void initModelTranslator(ModelTranslator modelTranslator) {\n+        modelTranslator.registerTranslator(new ContentTranslator(), Content.class, ContentDTO.class);\n+        modelTranslator.registerTranslator(this.translator, ProductContent.class, ProductContentDTO.class);\n+    }\n+\n+    @Override\n+    protected ProductContentTranslator initObjectTranslator() {\n+        return this.translator;\n+    }\n+\n+    @Override\n+    protected ProductContent initSourceObject() {\n+        Content content = new Content();\n+\n+        content.setUuid(\"test_value\");\n+        content.setId(\"test_value\");\n+        content.setType(\"test_value\");\n+        content.setLabel(\"test_value\");\n+        content.setName(\"test_value\");\n+        content.setVendor(\"test_value\");\n+        content.setContentUrl(\"test_value\");\n+        content.setRequiredTags(\"test_value\");\n+        content.setReleaseVersion(\"test_value\");\n+        content.setGpgUrl(\"test_value\");\n+        content.setMetadataExpiration(1234L);\n+        content.setModifiedProductIds(Arrays.asList(\"1\", \"2\", \"3\"));\n+        content.setArches(\"test_value\");\n+        content.setLocked(Boolean.TRUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMTMzOA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411911338", "createdAt": "2020-04-21T06:40:08Z", "author": {"login": "Januson"}, "path": "server/src/test/java/org/candlepin/dto/api/v1/ProductContentTranslatorTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.AbstractTranslatorTest;\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.model.Content;\n+import org.candlepin.model.ProductContent;\n+\n+import java.util.Arrays;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+\n+/**\n+ * Test suite for the ContentTranslator class\n+ */\n+public class ProductContentTranslatorTest extends\n+    AbstractTranslatorTest<ProductContent, ProductContentDTO, ProductContentTranslator> {\n+\n+    protected ProductContentTranslator translator = new ProductContentTranslator();\n+\n+    @Override\n+    protected void initModelTranslator(ModelTranslator modelTranslator) {\n+        modelTranslator.registerTranslator(new ContentTranslator(), Content.class, ContentDTO.class);\n+        modelTranslator.registerTranslator(this.translator, ProductContent.class, ProductContentDTO.class);\n+    }\n+\n+    @Override\n+    protected ProductContentTranslator initObjectTranslator() {\n+        return this.translator;\n+    }\n+\n+    @Override\n+    protected ProductContent initSourceObject() {\n+        Content content = new Content();\n+\n+        content.setUuid(\"test_value\");\n+        content.setId(\"test_value\");\n+        content.setType(\"test_value\");\n+        content.setLabel(\"test_value\");\n+        content.setName(\"test_value\");\n+        content.setVendor(\"test_value\");\n+        content.setContentUrl(\"test_value\");\n+        content.setRequiredTags(\"test_value\");\n+        content.setReleaseVersion(\"test_value\");\n+        content.setGpgUrl(\"test_value\");\n+        content.setMetadataExpiration(1234L);\n+        content.setModifiedProductIds(Arrays.asList(\"1\", \"2\", \"3\"));\n+        content.setArches(\"test_value\");\n+        content.setLocked(Boolean.TRUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5OTIzOQ=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTE0OTAyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/candlepin/dto/api/v1/ProductContentTranslatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMToyNDoyOVrOGIPwLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MDowNVrOGI1Elw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5OTg4NA==", "bodyText": "Code duplication: This can be replaced by calling ContentTranslatorTest's verifyOutput method", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411299884", "createdAt": "2020-04-20T11:24:29Z", "author": {"login": "nikosmoum"}, "path": "server/src/test/java/org/candlepin/dto/api/v1/ProductContentTranslatorTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.AbstractTranslatorTest;\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.model.Content;\n+import org.candlepin.model.ProductContent;\n+\n+import java.util.Arrays;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+\n+/**\n+ * Test suite for the ContentTranslator class\n+ */\n+public class ProductContentTranslatorTest extends\n+    AbstractTranslatorTest<ProductContent, ProductContentDTO, ProductContentTranslator> {\n+\n+    protected ProductContentTranslator translator = new ProductContentTranslator();\n+\n+    @Override\n+    protected void initModelTranslator(ModelTranslator modelTranslator) {\n+        modelTranslator.registerTranslator(new ContentTranslator(), Content.class, ContentDTO.class);\n+        modelTranslator.registerTranslator(this.translator, ProductContent.class, ProductContentDTO.class);\n+    }\n+\n+    @Override\n+    protected ProductContentTranslator initObjectTranslator() {\n+        return this.translator;\n+    }\n+\n+    @Override\n+    protected ProductContent initSourceObject() {\n+        Content content = new Content();\n+\n+        content.setUuid(\"test_value\");\n+        content.setId(\"test_value\");\n+        content.setType(\"test_value\");\n+        content.setLabel(\"test_value\");\n+        content.setName(\"test_value\");\n+        content.setVendor(\"test_value\");\n+        content.setContentUrl(\"test_value\");\n+        content.setRequiredTags(\"test_value\");\n+        content.setReleaseVersion(\"test_value\");\n+        content.setGpgUrl(\"test_value\");\n+        content.setMetadataExpiration(1234L);\n+        content.setModifiedProductIds(Arrays.asList(\"1\", \"2\", \"3\"));\n+        content.setArches(\"test_value\");\n+        content.setLocked(Boolean.TRUE);\n+\n+        ProductContent source = new ProductContent();\n+        source.setContent(content);\n+        source.setEnabled(true);\n+\n+        return source;\n+    }\n+\n+    @Override\n+    protected ProductContentDTO initDestinationObject() {\n+        // Nothing fancy to do here.\n+        return new ProductContentDTO();\n+    }\n+\n+    @Override\n+    protected void verifyOutput(ProductContent source, ProductContentDTO dto, boolean childrenGenerated) {\n+        if (source != null) {\n+            // This DTO does not have any nested objects, so we don't need to worry about the\n+            // childrenGenerated flag\n+\n+            assertEquals(source.isEnabled(), dto.getEnabled());\n+\n+            if (childrenGenerated) {\n+                Content content = source.getContent();\n+                ContentDTO contentDto = dto.getContent();\n+                assertEquals(content.getUuid(), contentDto.getUuid());\n+                assertEquals(content.getId(), contentDto.getId());\n+                assertEquals(content.getType(), contentDto.getType());\n+                assertEquals(content.getLabel(), contentDto.getLabel());\n+                assertEquals(content.getName(), contentDto.getName());\n+                assertEquals(content.getVendor(), contentDto.getVendor());\n+                assertEquals(content.getContentUrl(), contentDto.getContentUrl());\n+                assertEquals(content.getRequiredTags(), contentDto.getRequiredTags());\n+                assertEquals(content.getReleaseVersion(), contentDto.getReleaseVer());\n+                assertEquals(content.getGpgUrl(), contentDto.getGpgUrl());\n+                assertEquals(content.getMetadataExpiration(), contentDto.getMetadataExpire());\n+                assertEquals(content.getModifiedProductIds(), contentDto.getModifiedProductIds());\n+                assertEquals(content.getArches(), contentDto.getArches());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMTMxOQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411911319", "createdAt": "2020-04-21T06:40:05Z", "author": {"login": "Januson"}, "path": "server/src/test/java/org/candlepin/dto/api/v1/ProductContentTranslatorTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.AbstractTranslatorTest;\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.model.Content;\n+import org.candlepin.model.ProductContent;\n+\n+import java.util.Arrays;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+\n+/**\n+ * Test suite for the ContentTranslator class\n+ */\n+public class ProductContentTranslatorTest extends\n+    AbstractTranslatorTest<ProductContent, ProductContentDTO, ProductContentTranslator> {\n+\n+    protected ProductContentTranslator translator = new ProductContentTranslator();\n+\n+    @Override\n+    protected void initModelTranslator(ModelTranslator modelTranslator) {\n+        modelTranslator.registerTranslator(new ContentTranslator(), Content.class, ContentDTO.class);\n+        modelTranslator.registerTranslator(this.translator, ProductContent.class, ProductContentDTO.class);\n+    }\n+\n+    @Override\n+    protected ProductContentTranslator initObjectTranslator() {\n+        return this.translator;\n+    }\n+\n+    @Override\n+    protected ProductContent initSourceObject() {\n+        Content content = new Content();\n+\n+        content.setUuid(\"test_value\");\n+        content.setId(\"test_value\");\n+        content.setType(\"test_value\");\n+        content.setLabel(\"test_value\");\n+        content.setName(\"test_value\");\n+        content.setVendor(\"test_value\");\n+        content.setContentUrl(\"test_value\");\n+        content.setRequiredTags(\"test_value\");\n+        content.setReleaseVersion(\"test_value\");\n+        content.setGpgUrl(\"test_value\");\n+        content.setMetadataExpiration(1234L);\n+        content.setModifiedProductIds(Arrays.asList(\"1\", \"2\", \"3\"));\n+        content.setArches(\"test_value\");\n+        content.setLocked(Boolean.TRUE);\n+\n+        ProductContent source = new ProductContent();\n+        source.setContent(content);\n+        source.setEnabled(true);\n+\n+        return source;\n+    }\n+\n+    @Override\n+    protected ProductContentDTO initDestinationObject() {\n+        // Nothing fancy to do here.\n+        return new ProductContentDTO();\n+    }\n+\n+    @Override\n+    protected void verifyOutput(ProductContent source, ProductContentDTO dto, boolean childrenGenerated) {\n+        if (source != null) {\n+            // This DTO does not have any nested objects, so we don't need to worry about the\n+            // childrenGenerated flag\n+\n+            assertEquals(source.isEnabled(), dto.getEnabled());\n+\n+            if (childrenGenerated) {\n+                Content content = source.getContent();\n+                ContentDTO contentDto = dto.getContent();\n+                assertEquals(content.getUuid(), contentDto.getUuid());\n+                assertEquals(content.getId(), contentDto.getId());\n+                assertEquals(content.getType(), contentDto.getType());\n+                assertEquals(content.getLabel(), contentDto.getLabel());\n+                assertEquals(content.getName(), contentDto.getName());\n+                assertEquals(content.getVendor(), contentDto.getVendor());\n+                assertEquals(content.getContentUrl(), contentDto.getContentUrl());\n+                assertEquals(content.getRequiredTags(), contentDto.getRequiredTags());\n+                assertEquals(content.getReleaseVersion(), contentDto.getReleaseVer());\n+                assertEquals(content.getGpgUrl(), contentDto.getGpgUrl());\n+                assertEquals(content.getMetadataExpiration(), contentDto.getMetadataExpire());\n+                assertEquals(content.getModifiedProductIds(), contentDto.getModifiedProductIds());\n+                assertEquals(content.getArches(), contentDto.getArches());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5OTg4NA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTE2NjMxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/candlepin/dto/api/v1/SubscriptionTranslatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMToyODo1OFrOGIP6Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0MDowMlrOGI1EeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMwMjQzNA==", "bodyText": "There is no use for creating new util methods to create ProductData instances. You can create a ProductDataTranslatorTest instance and call initSourceObject() instead", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411302434", "createdAt": "2020-04-20T11:28:58Z", "author": {"login": "nikosmoum"}, "path": "server/src/test/java/org/candlepin/dto/api/v1/SubscriptionTranslatorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.AbstractTranslatorTest;\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.shim.ProductDataTranslator;\n+import org.candlepin.model.Cdn;\n+import org.candlepin.model.Certificate;\n+import org.candlepin.model.Owner;\n+import org.candlepin.model.SubscriptionsCertificate;\n+import org.candlepin.model.dto.ProductData;\n+import org.candlepin.model.dto.Subscription;\n+import org.candlepin.util.Util;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Date;\n+\n+import static org.apache.commons.collections.CollectionUtils.isEmpty;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test suite for the ProductTranslator class\n+ */\n+public class SubscriptionTranslatorTest extends\n+    AbstractTranslatorTest<Subscription, SubscriptionDTO, SubscriptionTranslator> {\n+\n+    private SubscriptionTranslator translator = new SubscriptionTranslator();\n+\n+    @Override\n+    protected void initModelTranslator(ModelTranslator modelTranslator) {\n+        modelTranslator.registerTranslator(new CdnTranslator(), Cdn.class, CdnDTO.class);\n+        modelTranslator.registerTranslator(\n+            new CertificateTranslator(), Certificate.class, CertificateDTO.class);\n+        modelTranslator.registerTranslator(new NestedOwnerTranslator(), Owner.class, NestedOwnerDTO.class);\n+        modelTranslator.registerTranslator(\n+            new ProductDataTranslator(), ProductData.class, ProductDTO.class);\n+        modelTranslator.registerTranslator(this.translator, Subscription.class, SubscriptionDTO.class);\n+    }\n+\n+    @Override\n+    protected SubscriptionTranslator initObjectTranslator() {\n+        return this.translator;\n+    }\n+\n+    @Override\n+    protected Subscription initSourceObject() {\n+        Subscription source = new Subscription();\n+\n+        source.setId(\"test_id\");\n+        source.setOwner(this.createOwner());\n+        source.setProduct(this.createProduct());\n+        source.setDerivedProduct(this.createProduct());\n+        source.setProvidedProducts(this.createProducts());\n+        source.setDerivedProvidedProducts(this.createProducts());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMTI4OQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411911289", "createdAt": "2020-04-21T06:40:02Z", "author": {"login": "Januson"}, "path": "server/src/test/java/org/candlepin/dto/api/v1/SubscriptionTranslatorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.AbstractTranslatorTest;\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.shim.ProductDataTranslator;\n+import org.candlepin.model.Cdn;\n+import org.candlepin.model.Certificate;\n+import org.candlepin.model.Owner;\n+import org.candlepin.model.SubscriptionsCertificate;\n+import org.candlepin.model.dto.ProductData;\n+import org.candlepin.model.dto.Subscription;\n+import org.candlepin.util.Util;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Date;\n+\n+import static org.apache.commons.collections.CollectionUtils.isEmpty;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test suite for the ProductTranslator class\n+ */\n+public class SubscriptionTranslatorTest extends\n+    AbstractTranslatorTest<Subscription, SubscriptionDTO, SubscriptionTranslator> {\n+\n+    private SubscriptionTranslator translator = new SubscriptionTranslator();\n+\n+    @Override\n+    protected void initModelTranslator(ModelTranslator modelTranslator) {\n+        modelTranslator.registerTranslator(new CdnTranslator(), Cdn.class, CdnDTO.class);\n+        modelTranslator.registerTranslator(\n+            new CertificateTranslator(), Certificate.class, CertificateDTO.class);\n+        modelTranslator.registerTranslator(new NestedOwnerTranslator(), Owner.class, NestedOwnerDTO.class);\n+        modelTranslator.registerTranslator(\n+            new ProductDataTranslator(), ProductData.class, ProductDTO.class);\n+        modelTranslator.registerTranslator(this.translator, Subscription.class, SubscriptionDTO.class);\n+    }\n+\n+    @Override\n+    protected SubscriptionTranslator initObjectTranslator() {\n+        return this.translator;\n+    }\n+\n+    @Override\n+    protected Subscription initSourceObject() {\n+        Subscription source = new Subscription();\n+\n+        source.setId(\"test_id\");\n+        source.setOwner(this.createOwner());\n+        source.setProduct(this.createProduct());\n+        source.setDerivedProduct(this.createProduct());\n+        source.setProvidedProducts(this.createProducts());\n+        source.setDerivedProvidedProducts(this.createProducts());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMwMjQzNA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTE3MzI3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/candlepin/dto/api/v1/SubscriptionTranslatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMTozMDo1M1rOGIP-JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjozOTo1OVrOGI1EYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMwMzQ2MA==", "bodyText": "These 2 can be replaced by using CertificateTranslatorTest.initSourceObject() and CdnTranslatorTest.initSourceObject()", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411303460", "createdAt": "2020-04-20T11:30:53Z", "author": {"login": "nikosmoum"}, "path": "server/src/test/java/org/candlepin/dto/api/v1/SubscriptionTranslatorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.AbstractTranslatorTest;\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.shim.ProductDataTranslator;\n+import org.candlepin.model.Cdn;\n+import org.candlepin.model.Certificate;\n+import org.candlepin.model.Owner;\n+import org.candlepin.model.SubscriptionsCertificate;\n+import org.candlepin.model.dto.ProductData;\n+import org.candlepin.model.dto.Subscription;\n+import org.candlepin.util.Util;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Date;\n+\n+import static org.apache.commons.collections.CollectionUtils.isEmpty;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test suite for the ProductTranslator class\n+ */\n+public class SubscriptionTranslatorTest extends\n+    AbstractTranslatorTest<Subscription, SubscriptionDTO, SubscriptionTranslator> {\n+\n+    private SubscriptionTranslator translator = new SubscriptionTranslator();\n+\n+    @Override\n+    protected void initModelTranslator(ModelTranslator modelTranslator) {\n+        modelTranslator.registerTranslator(new CdnTranslator(), Cdn.class, CdnDTO.class);\n+        modelTranslator.registerTranslator(\n+            new CertificateTranslator(), Certificate.class, CertificateDTO.class);\n+        modelTranslator.registerTranslator(new NestedOwnerTranslator(), Owner.class, NestedOwnerDTO.class);\n+        modelTranslator.registerTranslator(\n+            new ProductDataTranslator(), ProductData.class, ProductDTO.class);\n+        modelTranslator.registerTranslator(this.translator, Subscription.class, SubscriptionDTO.class);\n+    }\n+\n+    @Override\n+    protected SubscriptionTranslator initObjectTranslator() {\n+        return this.translator;\n+    }\n+\n+    @Override\n+    protected Subscription initSourceObject() {\n+        Subscription source = new Subscription();\n+\n+        source.setId(\"test_id\");\n+        source.setOwner(this.createOwner());\n+        source.setProduct(this.createProduct());\n+        source.setDerivedProduct(this.createProduct());\n+        source.setProvidedProducts(this.createProducts());\n+        source.setDerivedProvidedProducts(this.createProducts());\n+        source.setQuantity(15L);\n+        source.setStartDate(new Date());\n+        source.setEndDate(new Date());\n+        source.setContractNumber(\"test_contact\");\n+        source.setAccountNumber(\"test_acc_num\");\n+        source.setModified(new Date());\n+        source.setOrderNumber(\"test_order_num\");\n+        source.setUpstreamPoolId(\"test_pool_id\");\n+        source.setUpstreamEntitlementId(\"test_ent_id\");\n+        source.setUpstreamConsumerId(\"test_cons_id\");\n+        source.setCertificate(this.createCert());\n+        source.setCdn(this.createCdn());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMTI2Nw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411911267", "createdAt": "2020-04-21T06:39:59Z", "author": {"login": "Januson"}, "path": "server/src/test/java/org/candlepin/dto/api/v1/SubscriptionTranslatorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.AbstractTranslatorTest;\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.shim.ProductDataTranslator;\n+import org.candlepin.model.Cdn;\n+import org.candlepin.model.Certificate;\n+import org.candlepin.model.Owner;\n+import org.candlepin.model.SubscriptionsCertificate;\n+import org.candlepin.model.dto.ProductData;\n+import org.candlepin.model.dto.Subscription;\n+import org.candlepin.util.Util;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Date;\n+\n+import static org.apache.commons.collections.CollectionUtils.isEmpty;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test suite for the ProductTranslator class\n+ */\n+public class SubscriptionTranslatorTest extends\n+    AbstractTranslatorTest<Subscription, SubscriptionDTO, SubscriptionTranslator> {\n+\n+    private SubscriptionTranslator translator = new SubscriptionTranslator();\n+\n+    @Override\n+    protected void initModelTranslator(ModelTranslator modelTranslator) {\n+        modelTranslator.registerTranslator(new CdnTranslator(), Cdn.class, CdnDTO.class);\n+        modelTranslator.registerTranslator(\n+            new CertificateTranslator(), Certificate.class, CertificateDTO.class);\n+        modelTranslator.registerTranslator(new NestedOwnerTranslator(), Owner.class, NestedOwnerDTO.class);\n+        modelTranslator.registerTranslator(\n+            new ProductDataTranslator(), ProductData.class, ProductDTO.class);\n+        modelTranslator.registerTranslator(this.translator, Subscription.class, SubscriptionDTO.class);\n+    }\n+\n+    @Override\n+    protected SubscriptionTranslator initObjectTranslator() {\n+        return this.translator;\n+    }\n+\n+    @Override\n+    protected Subscription initSourceObject() {\n+        Subscription source = new Subscription();\n+\n+        source.setId(\"test_id\");\n+        source.setOwner(this.createOwner());\n+        source.setProduct(this.createProduct());\n+        source.setDerivedProduct(this.createProduct());\n+        source.setProvidedProducts(this.createProducts());\n+        source.setDerivedProvidedProducts(this.createProducts());\n+        source.setQuantity(15L);\n+        source.setStartDate(new Date());\n+        source.setEndDate(new Date());\n+        source.setContractNumber(\"test_contact\");\n+        source.setAccountNumber(\"test_acc_num\");\n+        source.setModified(new Date());\n+        source.setOrderNumber(\"test_order_num\");\n+        source.setUpstreamPoolId(\"test_pool_id\");\n+        source.setUpstreamEntitlementId(\"test_ent_id\");\n+        source.setUpstreamConsumerId(\"test_cons_id\");\n+        source.setCertificate(this.createCert());\n+        source.setCdn(this.createCdn());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMwMzQ2MA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTE4NDEyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/candlepin/dto/api/v1/SubscriptionTranslatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMTozMzozNFrOGIQESg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjozOTo1NVrOGI1ETA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMwNTAzNA==", "bodyText": "NestedOwnerTranslatorTest.initSourceObject()", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411305034", "createdAt": "2020-04-20T11:33:34Z", "author": {"login": "nikosmoum"}, "path": "server/src/test/java/org/candlepin/dto/api/v1/SubscriptionTranslatorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.AbstractTranslatorTest;\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.shim.ProductDataTranslator;\n+import org.candlepin.model.Cdn;\n+import org.candlepin.model.Certificate;\n+import org.candlepin.model.Owner;\n+import org.candlepin.model.SubscriptionsCertificate;\n+import org.candlepin.model.dto.ProductData;\n+import org.candlepin.model.dto.Subscription;\n+import org.candlepin.util.Util;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Date;\n+\n+import static org.apache.commons.collections.CollectionUtils.isEmpty;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test suite for the ProductTranslator class\n+ */\n+public class SubscriptionTranslatorTest extends\n+    AbstractTranslatorTest<Subscription, SubscriptionDTO, SubscriptionTranslator> {\n+\n+    private SubscriptionTranslator translator = new SubscriptionTranslator();\n+\n+    @Override\n+    protected void initModelTranslator(ModelTranslator modelTranslator) {\n+        modelTranslator.registerTranslator(new CdnTranslator(), Cdn.class, CdnDTO.class);\n+        modelTranslator.registerTranslator(\n+            new CertificateTranslator(), Certificate.class, CertificateDTO.class);\n+        modelTranslator.registerTranslator(new NestedOwnerTranslator(), Owner.class, NestedOwnerDTO.class);\n+        modelTranslator.registerTranslator(\n+            new ProductDataTranslator(), ProductData.class, ProductDTO.class);\n+        modelTranslator.registerTranslator(this.translator, Subscription.class, SubscriptionDTO.class);\n+    }\n+\n+    @Override\n+    protected SubscriptionTranslator initObjectTranslator() {\n+        return this.translator;\n+    }\n+\n+    @Override\n+    protected Subscription initSourceObject() {\n+        Subscription source = new Subscription();\n+\n+        source.setId(\"test_id\");\n+        source.setOwner(this.createOwner());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMTI0NA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411911244", "createdAt": "2020-04-21T06:39:55Z", "author": {"login": "Januson"}, "path": "server/src/test/java/org/candlepin/dto/api/v1/SubscriptionTranslatorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.AbstractTranslatorTest;\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.shim.ProductDataTranslator;\n+import org.candlepin.model.Cdn;\n+import org.candlepin.model.Certificate;\n+import org.candlepin.model.Owner;\n+import org.candlepin.model.SubscriptionsCertificate;\n+import org.candlepin.model.dto.ProductData;\n+import org.candlepin.model.dto.Subscription;\n+import org.candlepin.util.Util;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Date;\n+\n+import static org.apache.commons.collections.CollectionUtils.isEmpty;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test suite for the ProductTranslator class\n+ */\n+public class SubscriptionTranslatorTest extends\n+    AbstractTranslatorTest<Subscription, SubscriptionDTO, SubscriptionTranslator> {\n+\n+    private SubscriptionTranslator translator = new SubscriptionTranslator();\n+\n+    @Override\n+    protected void initModelTranslator(ModelTranslator modelTranslator) {\n+        modelTranslator.registerTranslator(new CdnTranslator(), Cdn.class, CdnDTO.class);\n+        modelTranslator.registerTranslator(\n+            new CertificateTranslator(), Certificate.class, CertificateDTO.class);\n+        modelTranslator.registerTranslator(new NestedOwnerTranslator(), Owner.class, NestedOwnerDTO.class);\n+        modelTranslator.registerTranslator(\n+            new ProductDataTranslator(), ProductData.class, ProductDTO.class);\n+        modelTranslator.registerTranslator(this.translator, Subscription.class, SubscriptionDTO.class);\n+    }\n+\n+    @Override\n+    protected SubscriptionTranslator initObjectTranslator() {\n+        return this.translator;\n+    }\n+\n+    @Override\n+    protected Subscription initSourceObject() {\n+        Subscription source = new Subscription();\n+\n+        source.setId(\"test_id\");\n+        source.setOwner(this.createOwner());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMwNTAzNA=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTE4ODc3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/candlepin/dto/api/v1/SubscriptionTranslatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMTozNDo0NVrOGIQG2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjozOTo1MVrOGI1EKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMwNTY5MQ==", "bodyText": "The various verifyOutput methods from the *TranslatorTest.java instances can be used here instead", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411305691", "createdAt": "2020-04-20T11:34:45Z", "author": {"login": "nikosmoum"}, "path": "server/src/test/java/org/candlepin/dto/api/v1/SubscriptionTranslatorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.AbstractTranslatorTest;\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.shim.ProductDataTranslator;\n+import org.candlepin.model.Cdn;\n+import org.candlepin.model.Certificate;\n+import org.candlepin.model.Owner;\n+import org.candlepin.model.SubscriptionsCertificate;\n+import org.candlepin.model.dto.ProductData;\n+import org.candlepin.model.dto.Subscription;\n+import org.candlepin.util.Util;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Date;\n+\n+import static org.apache.commons.collections.CollectionUtils.isEmpty;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test suite for the ProductTranslator class\n+ */\n+public class SubscriptionTranslatorTest extends\n+    AbstractTranslatorTest<Subscription, SubscriptionDTO, SubscriptionTranslator> {\n+\n+    private SubscriptionTranslator translator = new SubscriptionTranslator();\n+\n+    @Override\n+    protected void initModelTranslator(ModelTranslator modelTranslator) {\n+        modelTranslator.registerTranslator(new CdnTranslator(), Cdn.class, CdnDTO.class);\n+        modelTranslator.registerTranslator(\n+            new CertificateTranslator(), Certificate.class, CertificateDTO.class);\n+        modelTranslator.registerTranslator(new NestedOwnerTranslator(), Owner.class, NestedOwnerDTO.class);\n+        modelTranslator.registerTranslator(\n+            new ProductDataTranslator(), ProductData.class, ProductDTO.class);\n+        modelTranslator.registerTranslator(this.translator, Subscription.class, SubscriptionDTO.class);\n+    }\n+\n+    @Override\n+    protected SubscriptionTranslator initObjectTranslator() {\n+        return this.translator;\n+    }\n+\n+    @Override\n+    protected Subscription initSourceObject() {\n+        Subscription source = new Subscription();\n+\n+        source.setId(\"test_id\");\n+        source.setOwner(this.createOwner());\n+        source.setProduct(this.createProduct());\n+        source.setDerivedProduct(this.createProduct());\n+        source.setProvidedProducts(this.createProducts());\n+        source.setDerivedProvidedProducts(this.createProducts());\n+        source.setQuantity(15L);\n+        source.setStartDate(new Date());\n+        source.setEndDate(new Date());\n+        source.setContractNumber(\"test_contact\");\n+        source.setAccountNumber(\"test_acc_num\");\n+        source.setModified(new Date());\n+        source.setOrderNumber(\"test_order_num\");\n+        source.setUpstreamPoolId(\"test_pool_id\");\n+        source.setUpstreamEntitlementId(\"test_ent_id\");\n+        source.setUpstreamConsumerId(\"test_cons_id\");\n+        source.setCertificate(this.createCert());\n+        source.setCdn(this.createCdn());\n+\n+        return source;\n+    }\n+\n+    private Collection<ProductData> createProducts() {\n+        return Arrays.asList(\n+            new ProductData(),\n+            new ProductData()\n+        );\n+    }\n+\n+    private ProductData createProduct() {\n+        return new ProductData();\n+    }\n+\n+    @Override\n+    protected SubscriptionDTO initDestinationObject() {\n+        // Nothing fancy to do here.\n+        return new SubscriptionDTO();\n+    }\n+\n+    @Override\n+    protected void verifyOutput(\n+        Subscription source, SubscriptionDTO dto, boolean childrenGenerated) {\n+        if (source != null) {\n+            assertEquals(source.getId(), dto.getId());\n+            assertEquals(source.getQuantity(), dto.getQuantity());\n+            assertEquals(Util.toDateTime(source.getStartDate()), dto.getStartDate());\n+            assertEquals(Util.toDateTime(source.getEndDate()), dto.getEndDate());\n+            assertEquals(source.getContractNumber(), dto.getContractNumber());\n+            assertEquals(source.getAccountNumber(), dto.getAccountNumber());\n+            assertEquals(Util.toDateTime(source.getModified()), dto.getModified());\n+            assertEquals(source.getOrderNumber(), dto.getOrderNumber());\n+            assertEquals(source.getUpstreamPoolId(), dto.getUpstreamPoolId());\n+            assertEquals(source.getUpstreamEntitlementId(), dto.getUpstreamEntitlementId());\n+            assertEquals(source.getUpstreamConsumerId(), dto.getUpstreamConsumerId());\n+\n+            if (childrenGenerated) {\n+                assertNotNull(source.getOwner());\n+                assertNotNull(source.getProduct());\n+                assertNotNull(source.getDerivedProduct());\n+                assertNotNull(source.getCertificate());\n+                assertNotNull(source.getCdn());\n+\n+                for (ProductData product : source.getProvidedProducts()) {\n+                    assertNotNull(product);\n+                }\n+\n+                for (ProductData product : source.getDerivedProvidedProducts()) {\n+                    assertNotNull(product);\n+                }\n+            }\n+            else {\n+\n+                assertTrue(isEmpty(dto.getProvidedProducts()));\n+                assertTrue(isEmpty(dto.getDerivedProvidedProducts()));\n+                assertNull(dto.getOwner());\n+                assertNull(dto.getProduct());\n+                assertNull(dto.getDerivedProduct());\n+                assertNull(dto.getCert());\n+                assertNull(dto.getCdn());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMTIxMA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r411911210", "createdAt": "2020-04-21T06:39:51Z", "author": {"login": "Januson"}, "path": "server/src/test/java/org/candlepin/dto/api/v1/SubscriptionTranslatorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.AbstractTranslatorTest;\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.shim.ProductDataTranslator;\n+import org.candlepin.model.Cdn;\n+import org.candlepin.model.Certificate;\n+import org.candlepin.model.Owner;\n+import org.candlepin.model.SubscriptionsCertificate;\n+import org.candlepin.model.dto.ProductData;\n+import org.candlepin.model.dto.Subscription;\n+import org.candlepin.util.Util;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Date;\n+\n+import static org.apache.commons.collections.CollectionUtils.isEmpty;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test suite for the ProductTranslator class\n+ */\n+public class SubscriptionTranslatorTest extends\n+    AbstractTranslatorTest<Subscription, SubscriptionDTO, SubscriptionTranslator> {\n+\n+    private SubscriptionTranslator translator = new SubscriptionTranslator();\n+\n+    @Override\n+    protected void initModelTranslator(ModelTranslator modelTranslator) {\n+        modelTranslator.registerTranslator(new CdnTranslator(), Cdn.class, CdnDTO.class);\n+        modelTranslator.registerTranslator(\n+            new CertificateTranslator(), Certificate.class, CertificateDTO.class);\n+        modelTranslator.registerTranslator(new NestedOwnerTranslator(), Owner.class, NestedOwnerDTO.class);\n+        modelTranslator.registerTranslator(\n+            new ProductDataTranslator(), ProductData.class, ProductDTO.class);\n+        modelTranslator.registerTranslator(this.translator, Subscription.class, SubscriptionDTO.class);\n+    }\n+\n+    @Override\n+    protected SubscriptionTranslator initObjectTranslator() {\n+        return this.translator;\n+    }\n+\n+    @Override\n+    protected Subscription initSourceObject() {\n+        Subscription source = new Subscription();\n+\n+        source.setId(\"test_id\");\n+        source.setOwner(this.createOwner());\n+        source.setProduct(this.createProduct());\n+        source.setDerivedProduct(this.createProduct());\n+        source.setProvidedProducts(this.createProducts());\n+        source.setDerivedProvidedProducts(this.createProducts());\n+        source.setQuantity(15L);\n+        source.setStartDate(new Date());\n+        source.setEndDate(new Date());\n+        source.setContractNumber(\"test_contact\");\n+        source.setAccountNumber(\"test_acc_num\");\n+        source.setModified(new Date());\n+        source.setOrderNumber(\"test_order_num\");\n+        source.setUpstreamPoolId(\"test_pool_id\");\n+        source.setUpstreamEntitlementId(\"test_ent_id\");\n+        source.setUpstreamConsumerId(\"test_cons_id\");\n+        source.setCertificate(this.createCert());\n+        source.setCdn(this.createCdn());\n+\n+        return source;\n+    }\n+\n+    private Collection<ProductData> createProducts() {\n+        return Arrays.asList(\n+            new ProductData(),\n+            new ProductData()\n+        );\n+    }\n+\n+    private ProductData createProduct() {\n+        return new ProductData();\n+    }\n+\n+    @Override\n+    protected SubscriptionDTO initDestinationObject() {\n+        // Nothing fancy to do here.\n+        return new SubscriptionDTO();\n+    }\n+\n+    @Override\n+    protected void verifyOutput(\n+        Subscription source, SubscriptionDTO dto, boolean childrenGenerated) {\n+        if (source != null) {\n+            assertEquals(source.getId(), dto.getId());\n+            assertEquals(source.getQuantity(), dto.getQuantity());\n+            assertEquals(Util.toDateTime(source.getStartDate()), dto.getStartDate());\n+            assertEquals(Util.toDateTime(source.getEndDate()), dto.getEndDate());\n+            assertEquals(source.getContractNumber(), dto.getContractNumber());\n+            assertEquals(source.getAccountNumber(), dto.getAccountNumber());\n+            assertEquals(Util.toDateTime(source.getModified()), dto.getModified());\n+            assertEquals(source.getOrderNumber(), dto.getOrderNumber());\n+            assertEquals(source.getUpstreamPoolId(), dto.getUpstreamPoolId());\n+            assertEquals(source.getUpstreamEntitlementId(), dto.getUpstreamEntitlementId());\n+            assertEquals(source.getUpstreamConsumerId(), dto.getUpstreamConsumerId());\n+\n+            if (childrenGenerated) {\n+                assertNotNull(source.getOwner());\n+                assertNotNull(source.getProduct());\n+                assertNotNull(source.getDerivedProduct());\n+                assertNotNull(source.getCertificate());\n+                assertNotNull(source.getCdn());\n+\n+                for (ProductData product : source.getProvidedProducts()) {\n+                    assertNotNull(product);\n+                }\n+\n+                for (ProductData product : source.getDerivedProvidedProducts()) {\n+                    assertNotNull(product);\n+                }\n+            }\n+            else {\n+\n+                assertTrue(isEmpty(dto.getProvidedProducts()));\n+                assertTrue(isEmpty(dto.getDerivedProvidedProducts()));\n+                assertNull(dto.getOwner());\n+                assertNull(dto.getProduct());\n+                assertNull(dto.getDerivedProduct());\n+                assertNull(dto.getCert());\n+                assertNull(dto.getCdn());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMwNTY5MQ=="}, "originalCommit": {"oid": "7e860ebb94fc59cd0847cf5664960f9e0d2dbb9f"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDExMTY5OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTo0Mzo0M1rOGI8s0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTo0Mzo0M1rOGI8s0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAzNjMwNA==", "bodyText": "Wrong description, should be something like \"The email to send a notification to for the activation\"", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r412036304", "createdAt": "2020-04-21T09:43:43Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,90 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumer_uuid\n+          in: query\n+          description: The ID of the subscription to activate\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The ID of the subscription to activate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d08a20464103ebf852810193aace696f36ce9138"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDExNDY3OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTo0NDoyNVrOGI8uyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTo0NDoyNVrOGI8uyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAzNjgxMQ==", "bodyText": "Wrong description, should be something like \"The locale of the email to send a notification to for the activation\"", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r412036811", "createdAt": "2020-04-21T09:44:25Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,90 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumer_uuid\n+          in: query\n+          description: The ID of the subscription to activate\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The ID of the subscription to activate\n+          required: true\n+          schema:\n+            type: string\n+        - name: email_locale\n+          in: query\n+          description: The ID of the subscription to activate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d08a20464103ebf852810193aace696f36ce9138"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDEyMTA3OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTo0NTo1OVrOGI8y0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTo0NTo1OVrOGI8y0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAzNzg0Mg==", "bodyText": "Wrong description, should be something like \"The uuid of the consumer of the subscription\"", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r412037842", "createdAt": "2020-04-21T09:45:59Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,90 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumer_uuid\n+          in: query\n+          description: The ID of the subscription to activate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d08a20464103ebf852810193aace696f36ce9138"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDE2MzgzOnYy", "diffSide": "RIGHT", "path": "server/spec/subscription_resource_spec.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTo1NToxOFrOGI9MPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTo1NToxOFrOGI9MPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA0NDM0OQ==", "bodyText": "This should be if not is_hosted? because we only want it to run in hosted mode, not standalone mode", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r412044349", "createdAt": "2020-04-21T09:55:18Z", "author": {"login": "nikosmoum"}, "path": "server/spec/subscription_resource_spec.rb", "diffHunk": "@@ -29,23 +29,14 @@\n       @cp.list_subscriptions(@owner['key']).size.should == 0\n   end\n \n-  it 'should not allow clients to fetch subscriptions using id' do\n-      pool = create_pool_and_subscription(@owner['key'], @one_more_product.id, 2)\n-      begin\n-          @cp.get_subscription(pool['subscriptionId'])\n-          fail(\"Should not allow to fetch subscription\")\n-      rescue URI::InvalidURIError => e\n-          e.to_s.eql? \"bad URI(is not URI?): pools/{pool_id}\"\n-      end\n-  end\n+  it 'should activate subscription' do\n+      skip(\"candlepin running in standalone mode\") if is_hosted?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d08a20464103ebf852810193aace696f36ce9138"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDE5MDM0OnYy", "diffSide": "RIGHT", "path": "server/spec/subscription_resource_spec.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDowMToyMlrOGI9cog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDowMToyMlrOGI9cog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA0ODU0Ng==", "bodyText": "This is being thrown in standalone mode (satellite), which we should not care about much. What we care about is testing that in hosted mode, it does work (does not throw an exception), and should simply be @cp.activate_subscription(consumer.uuid, \"mail\", \"locale\") without checking anything, and the test would fail only if an exception is thrown (e.g. in case someone in the future changes the parameter names in the endpoint, and the proper one ends up getting a null value)", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r412048546", "createdAt": "2020-04-21T10:01:22Z", "author": {"login": "nikosmoum"}, "path": "server/spec/subscription_resource_spec.rb", "diffHunk": "@@ -29,23 +29,14 @@\n       @cp.list_subscriptions(@owner['key']).size.should == 0\n   end\n \n-  it 'should not allow clients to fetch subscriptions using id' do\n-      pool = create_pool_and_subscription(@owner['key'], @one_more_product.id, 2)\n-      begin\n-          @cp.get_subscription(pool['subscriptionId'])\n-          fail(\"Should not allow to fetch subscription\")\n-      rescue URI::InvalidURIError => e\n-          e.to_s.eql? \"bad URI(is not URI?): pools/{pool_id}\"\n-      end\n-  end\n+  it 'should activate subscription' do\n+      skip(\"candlepin running in standalone mode\") if is_hosted?\n+      pool = create_pool_and_subscription(@owner['key'], @monitoring_product.id, 5)\n+      @cp.list_subscriptions(@owner['key']).size.should == 1\n+      consumer = @cp.register(\"goofy\", :hypervisor, nil, {}, nil, @owner['key'], [], [])\n \n-  it 'should not allow clients to fetch subscription cert using subscription id' do\n-      pool = create_pool_and_subscription(@owner['key'], @one_more_product.id, 2)\n-      begin\n-          @cp.get_subscription_cert(pool['subscriptionId'])\n-          fail(\"Should not allow to fetch subscription\")\n-      rescue URI::InvalidURIError => e\n-          e.to_s.eql? \"bad URI(is not URI?): pools/{pool_id}/cert\"\n-      end\n+      lambda do\n+        @cp.activate_subscription(consumer.uuid, \"mail\", \"locale\")\n+      end.should raise_exception(RestClient::ServiceUnavailable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d08a20464103ebf852810193aace696f36ce9138"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDI5OTM1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductContentTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDoyNzozMFrOGI-d4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDoyNzozMFrOGI-d4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA2NTI1MQ==", "bodyText": "Should be ProductContentDTO instead of ContentDTO", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r412065251", "createdAt": "2020-04-21T10:27:30Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductContentTranslator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.ObjectTranslator;\n+import org.candlepin.model.ProductContent;\n+\n+\n+/**\n+ * The ProductContentTranslator provides translation from {@link ProductContent}\n+ * model objects to {@link ContentDTO}s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d08a20464103ebf852810193aace696f36ce9138"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDUyMDUxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resteasy/JsonProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMToyMTo1OFrOGJAfgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMToyMTo1OFrOGJAfgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA5ODQzMw==", "bodyText": "It looks like adding a second mixin for the same target class doesn't work (it overrides the first one). So the filtering that is provided by the DynamicPropertyFilterMixIn addition doesn't work right not (I've created the following spec test to test dynamic filtering: http://pastebin.test.redhat.com/857369).\nTo fix it, I tried making ProductAttributesMixIn implement DynamicPropertyFilterMixIn, but that didn't work. Then I found this, which says that it should work using inheritance, so I turned DynamicPropertyFilterMixIn from an interface to an abstract class, and had ProductAttributesMixIn extend it, and it did work, so we should do that", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r412098433", "createdAt": "2020-04-21T11:21:58Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resteasy/JsonProvider.java", "diffHunk": "@@ -174,13 +182,17 @@ private void addMixInAnnotationsForDTOs(ObjectMapper mapper) {\n         mapper.addMixIn(GuestIdDTOArrayElement.class, DynamicPropertyFilterMixIn.class);\n         mapper.addMixIn(NestedOwnerDTO.class, DynamicPropertyFilterMixIn.class);\n         mapper.addMixIn(PermissionBlueprintDTO.class, DynamicPropertyFilterMixIn.class);\n+        mapper.addMixIn(ProductContentDTO.class, DynamicPropertyFilterMixIn.class);\n+        mapper.addMixIn(ProductDTO.class, DynamicPropertyFilterMixIn.class);\n         mapper.addMixIn(RoleDTO.class, DynamicPropertyFilterMixIn.class);\n         mapper.addMixIn(StatusDTO.class, DynamicPropertyFilterMixIn.class);\n         mapper.addMixIn(TimestampedEntity.class, DynamicPropertyFilterMixIn.class);\n         mapper.addMixIn(UserDTO.class, DynamicPropertyFilterMixIn.class);\n         mapper.addMixIn(OwnerDTO.class, DynamicPropertyFilterMixIn.class);\n+        mapper.addMixIn(SubscriptionDTO.class, DynamicPropertyFilterMixIn.class);\n         mapper.addMixIn(UpstreamConsumerDTO.class, DynamicPropertyFilterMixIn.class);\n         //TODO: Add more mix-ins here as more DTOs are ported to openapi spec\n+\n+        mapper.addMixIn(ProductDTO.class, ProductAttributesMixIn.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d08a20464103ebf852810193aace696f36ce9138"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTgzNDczOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1Mzo1M1rOGKnxEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDoxNTo1M1rOGKqYHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5MDQ4MQ==", "bodyText": "Can we please add example property here. Something like in #2684\nit will allow YAML file to be consistent.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r413790481", "createdAt": "2020-04-23T12:53:53Z", "author": {"login": "wolfdale"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,90 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumer_uuid\n+          in: query\n+          description: The UUID of the consumer of the subscription\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The email to send a notification to for the activation\n+          required: true\n+          schema:\n+            type: string\n+        - name: email_locale\n+          in: query\n+          description: The locale of the email to send a notification to for the activation\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        202:\n+          description: A Subscription is being activated\n+        400:\n+          description: Invalid request such as missing email/locale or when the consumer with the given uuid was not found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672cdf2242f43eb40f71974854b27b2bbaba018b"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzMzI0NA==", "bodyText": "Done", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r413833244", "createdAt": "2020-04-23T14:15:53Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,90 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumer_uuid\n+          in: query\n+          description: The UUID of the consumer of the subscription\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The email to send a notification to for the activation\n+          required: true\n+          schema:\n+            type: string\n+        - name: email_locale\n+          in: query\n+          description: The locale of the email to send a notification to for the activation\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        202:\n+          description: A Subscription is being activated\n+        400:\n+          description: Invalid request such as missing email/locale or when the consumer with the given uuid was not found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5MDQ4MQ=="}, "originalCommit": {"oid": "672cdf2242f43eb40f71974854b27b2bbaba018b"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTgzNTQzOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1NDowMVrOGKnxcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDoxNTo0OFrOGKqXuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5MDU3Nw==", "bodyText": "Can we please add example property here.  Something like in #2684\nit will allow YAML file to be consistent.", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r413790577", "createdAt": "2020-04-23T12:54:01Z", "author": {"login": "wolfdale"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,90 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumer_uuid\n+          in: query\n+          description: The UUID of the consumer of the subscription\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The email to send a notification to for the activation\n+          required: true\n+          schema:\n+            type: string\n+        - name: email_locale\n+          in: query\n+          description: The locale of the email to send a notification to for the activation\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        202:\n+          description: A Subscription is being activated\n+        400:\n+          description: Invalid request such as missing email/locale or when the consumer with the given uuid was not found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /subscriptions/{id}:\n+    delete:\n+      description: Removes a Subscription\n+      tags:\n+        - Subscription\n+      operationId: deleteSubscription\n+      security: []\n+      parameters:\n+        - name: id\n+          in: path\n+          description: The ID of the subscription to remove\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: Subscription was successfully deleted\n+        404:\n+          description: Subscription could not be found using the provided ID\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672cdf2242f43eb40f71974854b27b2bbaba018b"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzMzE0NA==", "bodyText": "Done", "url": "https://github.com/candlepin/candlepin/pull/2674#discussion_r413833144", "createdAt": "2020-04-23T14:15:48Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -918,6 +930,90 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /subscriptions:\n+    get:\n+      description: Retrieves a list of Subscriptions\n+      tags:\n+        - Subscription\n+      operationId: getSubscriptions\n+      security: []\n+      responses:\n+        200:\n+          description: A list of subscriptions\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Activates a Subscription\n+      tags:\n+        - Subscription\n+      operationId: activateSubscription\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+      parameters:\n+        - name: consumer_uuid\n+          in: query\n+          description: The UUID of the consumer of the subscription\n+          required: true\n+          schema:\n+            type: string\n+        - name: email\n+          in: query\n+          description: The email to send a notification to for the activation\n+          required: true\n+          schema:\n+            type: string\n+        - name: email_locale\n+          in: query\n+          description: The locale of the email to send a notification to for the activation\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        202:\n+          description: A Subscription is being activated\n+        400:\n+          description: Invalid request such as missing email/locale or when the consumer with the given uuid was not found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /subscriptions/{id}:\n+    delete:\n+      description: Removes a Subscription\n+      tags:\n+        - Subscription\n+      operationId: deleteSubscription\n+      security: []\n+      parameters:\n+        - name: id\n+          in: path\n+          description: The ID of the subscription to remove\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: Subscription was successfully deleted\n+        404:\n+          description: Subscription could not be found using the provided ID\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5MDU3Nw=="}, "originalCommit": {"oid": "672cdf2242f43eb40f71974854b27b2bbaba018b"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4139, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}