{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMzMxMTg0", "number": 2867, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzozOTowNFrOFG00pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxNjowMzoxM1rOFQdsRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzAxMjIyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzozOTowNFrOIIBB9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzowNDozNVrOIKqr3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI3NjQwNw==", "bodyText": "This method is almost identical to the one above it, and could/should call into it with a null consumer argument instead. The base findStackByIds can then gate the first line (.add(Restrictions.eq(\"consumer\", consumer))) on the presence of consumer.", "url": "https://github.com/candlepin/candlepin/pull/2867#discussion_r545276407", "createdAt": "2020-12-17T17:39:04Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "diffHunk": "@@ -997,10 +976,27 @@ public Entitlement replicate(Entitlement ent) {\n             .createAlias(\"ent_pool.sourceStack\", \"ss\", org.hibernate.sql.JoinType.LEFT_OUTER_JOIN)\n             .add(Restrictions.isNull(\"ss.id\"));\n \n-        return this.cpQueryFactory.<Entitlement>buildQuery(this.currentSession(), criteria);\n+        return criteria.list();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n+    public List<Entitlement> findByStackIds(Collection<String> stackIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "376d6f0b24d5a391eeca6e9dd5cfb5651c6a9dd6"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA1NjAyOQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2867#discussion_r548056029", "createdAt": "2020-12-23T17:04:35Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "diffHunk": "@@ -997,10 +976,27 @@ public Entitlement replicate(Entitlement ent) {\n             .createAlias(\"ent_pool.sourceStack\", \"ss\", org.hibernate.sql.JoinType.LEFT_OUTER_JOIN)\n             .add(Restrictions.isNull(\"ss.id\"));\n \n-        return this.cpQueryFactory.<Entitlement>buildQuery(this.currentSession(), criteria);\n+        return criteria.list();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n+    public List<Entitlement> findByStackIds(Collection<String> stackIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI3NjQwNw=="}, "originalCommit": {"oid": "376d6f0b24d5a391eeca6e9dd5cfb5651c6a9dd6"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzA0NDE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/OwnerProductCurator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzo0NjoyMVrOIIBVDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOToyMTozOFrOIIa4oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4MTI5NA==", "bodyText": "There are a ton of changes here which don't add much to performance or readability, don't address the core problem, but will make rebasing/merging the looming provided products change a nightmare. This particular method wasn't touched in that, but its sister method in OwnerContentCurator has, using partitionMap. That would be preferable here.\nSee: https://github.com/candlepin/candlepin/blob/feature/move_provided_product/server/src/main/java/org/candlepin/model/OwnerContentCurator.java#L532", "url": "https://github.com/candlepin/candlepin/pull/2867#discussion_r545281294", "createdAt": "2020-12-17T17:46:21Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/OwnerProductCurator.java", "diffHunk": "@@ -568,41 +569,51 @@ public void updateOwnerProductReferences(Owner owner, Map<String, String> produc\n \n         Session session = this.currentSession();\n \n-        Map<String, Object> criteria = new HashMap<>();\n+        Map<String, Object> ownerProductCriteria = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "376d6f0b24d5a391eeca6e9dd5cfb5651c6a9dd6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcwMDAwMQ==", "bodyText": "This change was not related to performance. This is the place where manifest import fails with too many params. I did some renaming to better see what is happening with all those reassignments. I can revert those to to prevent conflicts but partitioning needs to stay otherwise import will fail.", "url": "https://github.com/candlepin/candlepin/pull/2867#discussion_r545700001", "createdAt": "2020-12-18T09:21:38Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/model/OwnerProductCurator.java", "diffHunk": "@@ -568,41 +569,51 @@ public void updateOwnerProductReferences(Owner owner, Map<String, String> produc\n \n         Session session = this.currentSession();\n \n-        Map<String, Object> criteria = new HashMap<>();\n+        Map<String, Object> ownerProductCriteria = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4MTI5NA=="}, "originalCommit": {"oid": "376d6f0b24d5a391eeca6e9dd5cfb5651c6a9dd6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzA1NzM3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/PoolCurator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzo0OToxOVrOIIBdNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzowODo1OVrOIPrxbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4MzM4Mg==", "bodyText": "Same deal as the other version here: the methods are basically identical sans consumer bits.\nAlso, CPRestrictions should no longer be used -- it doesn't safely work around parameter limits.", "url": "https://github.com/candlepin/candlepin/pull/2867#discussion_r545283382", "createdAt": "2020-12-17T17:49:19Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/PoolCurator.java", "diffHunk": "@@ -1145,6 +1147,21 @@ public void batchDelete(Collection<Pool> pools, Collection<String> alreadyDelete\n         return (List<Pool>) getPools.list();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    public List<Pool> getSubPoolForStackIds(Collection<String> stackIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "376d6f0b24d5a391eeca6e9dd5cfb5651c6a9dd6"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMxNjcxNg==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2867#discussion_r553316716", "createdAt": "2021-01-07T13:08:59Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/model/PoolCurator.java", "diffHunk": "@@ -1145,6 +1147,21 @@ public void batchDelete(Collection<Pool> pools, Collection<String> alreadyDelete\n         return (List<Pool>) getPools.list();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    public List<Pool> getSubPoolForStackIds(Collection<String> stackIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4MzM4Mg=="}, "originalCommit": {"oid": "376d6f0b24d5a391eeca6e9dd5cfb5651c6a9dd6"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzA3MzAxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/candlepin/controller/PoolManagerFunctionalTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzo1Mjo1NlrOIIBmvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzowNTo1M1rOIKqtvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4NTgyMA==", "bodyText": "Where'd our scope modifiers go in this class?", "url": "https://github.com/candlepin/candlepin/pull/2867#discussion_r545285820", "createdAt": "2020-12-17T17:52:56Z", "author": {"login": "Ceiu"}, "path": "server/src/test/java/org/candlepin/controller/PoolManagerFunctionalTest.java", "diffHunk": "@@ -71,25 +73,25 @@\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n import javax.persistence.EntityNotFoundException;\n \n \n+class PoolManagerFunctionalTest extends DatabaseTestFixture {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "376d6f0b24d5a391eeca6e9dd5cfb5651c6a9dd6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA1NjUwOA==", "bodyText": "I tried to apply suggestion from JUnit5 to use default visibility and forgot to revert the commit. Modifiers are back now.", "url": "https://github.com/candlepin/candlepin/pull/2867#discussion_r548056508", "createdAt": "2020-12-23T17:05:53Z", "author": {"login": "Januson"}, "path": "server/src/test/java/org/candlepin/controller/PoolManagerFunctionalTest.java", "diffHunk": "@@ -71,25 +73,25 @@\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n import javax.persistence.EntityNotFoundException;\n \n \n+class PoolManagerFunctionalTest extends DatabaseTestFixture {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4NTgyMA=="}, "originalCommit": {"oid": "376d6f0b24d5a391eeca6e9dd5cfb5651c6a9dd6"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjcwNzc1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzozOTozM1rOIPss_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzo1MDo1OVrOIPtFgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzMTk2Ng==", "bodyText": "I'm confused. Your comment says \"Replace batch delete of entitlements with batch delete by ids\", but this is unchanged (it's still deleting by entity)?", "url": "https://github.com/candlepin/candlepin/pull/2867#discussion_r553331966", "createdAt": "2021-01-07T13:39:33Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java", "diffHunk": "@@ -1937,49 +1938,57 @@ public void revokeEntitlements(List<Entitlement> entsToRevoke, Set<String> alrea\n \n         log.info(\"Starting batch delete of pools\");\n         poolCurator.batchDelete(poolsToDelete, alreadyDeletedPools);\n-        for (Pool pool : poolsToDelete) {\n-            this.sink.queueEvent(this.eventFactory.poolDeleted(pool));\n-        }\n+        firePoolDeletedEvents(poolsToDelete);\n         log.info(\"Starting batch delete of entitlements\");\n         entitlementCurator.batchDelete(entsToRevoke);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ad15406a7a1e47058ef094b5bf04bb7e8a3c104"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzODI0Mg==", "bodyText": "That is the issue I mentioned during scrum. With delete by ids I am hitting issues with detached entities. Not sure why that happens so I removed it from PR until it is fixed.", "url": "https://github.com/candlepin/candlepin/pull/2867#discussion_r553338242", "createdAt": "2021-01-07T13:50:59Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java", "diffHunk": "@@ -1937,49 +1938,57 @@ public void revokeEntitlements(List<Entitlement> entsToRevoke, Set<String> alrea\n \n         log.info(\"Starting batch delete of pools\");\n         poolCurator.batchDelete(poolsToDelete, alreadyDeletedPools);\n-        for (Pool pool : poolsToDelete) {\n-            this.sink.queueEvent(this.eventFactory.poolDeleted(pool));\n-        }\n+        firePoolDeletedEvents(poolsToDelete);\n         log.info(\"Starting batch delete of entitlements\");\n         entitlementCurator.batchDelete(entsToRevoke);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzMTk2Ng=="}, "originalCommit": {"oid": "5ad15406a7a1e47058ef094b5bf04bb7e8a3c104"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTc1NTkxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTozNjoxNlrOIRkQTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTozNjoxNlrOIRkQTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5MDcwMQ==", "bodyText": "If you're going to spend the effort to abstract this out, it should go on Pool itself as a helper method there. Putting this here in CPM to be used exactly once probably isn't that helpful.", "url": "https://github.com/candlepin/candlepin/pull/2867#discussion_r555290701", "createdAt": "2021-01-11T19:36:16Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java", "diffHunk": "@@ -2024,63 +2029,51 @@ private void sendDeletedEvents(List<Entitlement> entsToRevoke) {\n      * @return List pool ID list\n      */\n     private List<String> getPoolIds(Collection<Pool> pools) {\n-        List<String> ids = new ArrayList<>();\n-\n-        for (Pool e : pools) {\n-            ids.add(e.getId());\n-        }\n-\n-        return ids;\n+        return pools.stream()\n+            .map(Pool::getId)\n+            .collect(Collectors.toList());\n     }\n \n     /**\n      * Filter the given entitlements so that this method returns only\n      * the entitlements that are part of some stack. Then update them\n      * accordingly\n      *\n-     * @param consumerSortedEntitlements Entitlements to be filtered\n+     * @param entsToRevoke\n      * @param alreadyDeletedPools pools to skip deletion as they have already been deleted\n      * @return Entitlements that are stacked\n      */\n-    private void filterAndUpdateStackingEntitlements(\n-        Map<Consumer, List<Entitlement>> consumerSortedEntitlements, Set<String> alreadyDeletedPools) {\n-        Map<Consumer, List<Entitlement>> stackingEntitlements = new HashMap<>();\n-\n-        for (Consumer consumer : consumerSortedEntitlements.keySet()) {\n-            List<Entitlement> ents = consumerSortedEntitlements.get(consumer);\n-            if (CollectionUtils.isNotEmpty(ents)) {\n-                for (Entitlement ent : ents) {\n-                    Pool pool = ent.getPool();\n-\n-                    if (!\"true\".equals(pool.getAttributeValue(Pool.Attributes.DERIVED_POOL)) &&\n-                        pool.getProduct().hasAttribute(Product.Attributes.STACKING_ID)) {\n-                        List<Entitlement> entList = stackingEntitlements.get(consumer);\n-                        if (entList == null) {\n-                            entList = new ArrayList<>();\n-                            stackingEntitlements.put(consumer, entList);\n-                        }\n-                        entList.add(ent);\n-                    }\n-                }\n-            }\n-        }\n+    private void updateStackingEntitlements(List<Entitlement> entsToRevoke, Set<String> alreadyDeletedPools) {\n+        Map<Consumer, List<Entitlement>> stackingEntsByConsumer = stackingEntitlementsOf(entsToRevoke);\n+        log.debug(\"Found stacking entitlements for {} consumers\", stackingEntsByConsumer.size());\n+        Set<String> allStackingIds = stackIdsOf(stackingEntsByConsumer.values());\n+        List<Pool> pools = poolCurator.getSubPoolForStackIds(null, allStackingIds);\n+        poolRules.bulkUpdatePoolsFromStack(stackingEntsByConsumer.keySet(), pools, alreadyDeletedPools, true);\n+    }\n \n-        for (Entry<Consumer, List<Entitlement>> entry : stackingEntitlements.entrySet()) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Found {} stacking entitlements to delete for consumer: {}\",\n-                    entry.getValue().size(), entry.getKey());\n-            }\n+    private Map<Consumer, List<Entitlement>> stackingEntitlementsOf(List<Entitlement> entitlements) {\n+        return entitlements.stream()\n+            .filter(entitlement -> !isDerived(entitlement.getPool()))\n+            .filter(entitlement -> entitlement.getPool().isStacked())\n+            .collect(Collectors.groupingBy(Entitlement::getConsumer));\n+    }\n \n-            Set<String> stackIds = new HashSet<>();\n-            for (Entitlement ent : entry.getValue()) {\n-                stackIds.add(ent.getPool().getStackId());\n-            }\n+    private boolean isDerived(Pool pool) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f304b3e020e95e1c65566eff2f9ffd1d9d85e7"}, "originalPosition": 393}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjEzMTU2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/OwnerProductCurator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMToyNDowOVrOIRnyrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMToyNDowOVrOIRnyrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM0ODY1Mg==", "bodyText": "This will make debugging a pain. We should keep separate counts and then output the totals when we're done partitioning.", "url": "https://github.com/candlepin/candlepin/pull/2867#discussion_r555348652", "createdAt": "2021-01-11T21:24:09Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/OwnerProductCurator.java", "diffHunk": "@@ -595,15 +594,19 @@ public void updateOwnerProductReferences(Owner owner, Map<String, String> produc\n             .list();\n \n         if (ids != null && !ids.isEmpty()) {\n-            criteria.clear();\n-            criteria.put(\"product_uuid\", productUuidMap.keySet());\n-            criteria.put(\"pool_id\", ids);\n-\n-            count = this.bulkSQLUpdate(\"cp2_pool_provided_products\", \"product_uuid\", uuidMap, criteria);\n-            log.debug(\"{} provided products updated\", count);\n-\n-            count = this.bulkSQLUpdate(\"cp2_pool_derprov_products\", \"product_uuid\", uuidMap, criteria);\n-            log.debug(\"{} derived provided products updated\", count);\n+            for (List<String> poolIdBlock : this.partition(ids, getBatchBlockSize())) {\n+                Map<String, Object> updateCriteria = new HashMap<>();\n+                updateCriteria.put(\"product_uuid\", productUuidMap.keySet());\n+                updateCriteria.put(\"pool_id\", poolIdBlock);\n+\n+                count = this.bulkSQLUpdate(\"cp2_pool_provided_products\", \"product_uuid\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f304b3e020e95e1c65566eff2f9ffd1d9d85e7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyODA4MDA2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/OwnerProductCurator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxNjowMzoxM1rOIWVZFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODozNDozM1rOIWyaGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI5MDA2OA==", "bodyText": "Sorry, I guess I wasn't clear on this last time. I meant moving the output statements to outside the loop rather than a bunch of individual updates that will elongate output and require manual math during debugging.", "url": "https://github.com/candlepin/candlepin/pull/2867#discussion_r560290068", "createdAt": "2021-01-19T16:03:13Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/OwnerProductCurator.java", "diffHunk": "@@ -595,15 +594,19 @@ public void updateOwnerProductReferences(Owner owner, Map<String, String> produc\n             .list();\n \n         if (ids != null && !ids.isEmpty()) {\n-            criteria.clear();\n-            criteria.put(\"product_uuid\", productUuidMap.keySet());\n-            criteria.put(\"pool_id\", ids);\n-\n-            count = this.bulkSQLUpdate(\"cp2_pool_provided_products\", \"product_uuid\", uuidMap, criteria);\n-            log.debug(\"{} provided products updated\", count);\n-\n-            count = this.bulkSQLUpdate(\"cp2_pool_derprov_products\", \"product_uuid\", uuidMap, criteria);\n-            log.debug(\"{} derived provided products updated\", count);\n+            for (List<String> poolIdBlock : this.partition(ids, getBatchBlockSize())) {\n+                Map<String, Object> updateCriteria = new HashMap<>();\n+                updateCriteria.put(\"product_uuid\", productUuidMap.keySet());\n+                updateCriteria.put(\"pool_id\", poolIdBlock);\n+\n+                int providedProductsUpdated = this.bulkSQLUpdate(\"cp2_pool_provided_products\",\n+                    \"product_uuid\", uuidMap, updateCriteria);\n+                log.debug(\"{} provided products updated\", providedProductsUpdated);\n+\n+                int derivedProductsUpdated = this.bulkSQLUpdate(\"cp2_pool_derprov_products\", \"product_uuid\",\n+                    uuidMap, updateCriteria);\n+                log.debug(\"{} derived provided products updated\", derivedProductsUpdated);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3691e5a50ca1b00d409d1d1dae45d66e0a52659e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc2NTQ2NA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2867#discussion_r560765464", "createdAt": "2021-01-20T08:34:33Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/model/OwnerProductCurator.java", "diffHunk": "@@ -595,15 +594,19 @@ public void updateOwnerProductReferences(Owner owner, Map<String, String> produc\n             .list();\n \n         if (ids != null && !ids.isEmpty()) {\n-            criteria.clear();\n-            criteria.put(\"product_uuid\", productUuidMap.keySet());\n-            criteria.put(\"pool_id\", ids);\n-\n-            count = this.bulkSQLUpdate(\"cp2_pool_provided_products\", \"product_uuid\", uuidMap, criteria);\n-            log.debug(\"{} provided products updated\", count);\n-\n-            count = this.bulkSQLUpdate(\"cp2_pool_derprov_products\", \"product_uuid\", uuidMap, criteria);\n-            log.debug(\"{} derived provided products updated\", count);\n+            for (List<String> poolIdBlock : this.partition(ids, getBatchBlockSize())) {\n+                Map<String, Object> updateCriteria = new HashMap<>();\n+                updateCriteria.put(\"product_uuid\", productUuidMap.keySet());\n+                updateCriteria.put(\"pool_id\", poolIdBlock);\n+\n+                int providedProductsUpdated = this.bulkSQLUpdate(\"cp2_pool_provided_products\",\n+                    \"product_uuid\", uuidMap, updateCriteria);\n+                log.debug(\"{} provided products updated\", providedProductsUpdated);\n+\n+                int derivedProductsUpdated = this.bulkSQLUpdate(\"cp2_pool_derprov_products\", \"product_uuid\",\n+                    uuidMap, updateCriteria);\n+                log.debug(\"{} derived provided products updated\", derivedProductsUpdated);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI5MDA2OA=="}, "originalCommit": {"oid": "3691e5a50ca1b00d409d1d1dae45d66e0a52659e"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4031, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}