{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5OTMxMzE4", "number": 2692, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1Mjo0MFrOD3g-MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDozMjoyNFrOD7LrLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTM4NDgwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1Mjo0MFrOGNzkoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDoxNToxN1rOGN4XkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyOTYzMw==", "bodyText": "Why is principalProvider injected separatelly. Is there some kind of lazy loading?", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r417129633", "createdAt": "2020-04-29T07:52:40Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -102,11 +83,14 @@\n     private ConsumerType hypervisorType;\n     private JobManager jobManager;\n \n+    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830ea90806f023c9131c1f588ed9a55a0b23aeed"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwODIwOA==", "bodyText": "Removed @Inject annotation.\nInitially, I tried with the injected value. But Junit tests were getting failed. Later added this as a constructor parameter. It remained because rspecs also failed. And now it's working after removing.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r417208208", "createdAt": "2020-04-29T10:15:17Z", "author": {"login": "sonalidhome"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -102,11 +83,14 @@\n     private ConsumerType hypervisorType;\n     private JobManager jobManager;\n \n+    @Inject", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyOTYzMw=="}, "originalCommit": {"oid": "830ea90806f023c9131c1f588ed9a55a0b23aeed"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQ4NTg4OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyMzoxMFrOGN0jdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowMjoxOVrOGN39MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NTcxOQ==", "bodyText": "Minor formatting issue - remove extra line.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r417145719", "createdAt": "2020-04-29T08:23:10Z", "author": {"login": "wolfdale"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1124,6 +1145,173 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /hypervisors:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Updates the list of Hypervisor Guests Allows agents such as virt-who to update its host list and associate the guests for each host. This is typically used when a host is unable to register to candlepin via subscription manager.  In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. @deprecated Use the asynchronous method.\n+      operationId: hypervisorUpdate\n+      security: []\n+      requestBody:\n+        description: Host and Guest mapping details\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: object\n+              additionalProperties:\n+                type: array\n+                items:\n+                  type: string\n+      parameters:\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: create_missing\n+          in: query\n+          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/HypervisorUpdateResultDTO'\n+        400:\n+          description: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830ea90806f023c9131c1f588ed9a55a0b23aeed"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMTQ1Nw==", "bodyText": "Removed.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r417201457", "createdAt": "2020-04-29T10:02:19Z", "author": {"login": "sonalidhome"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1124,6 +1145,173 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /hypervisors:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Updates the list of Hypervisor Guests Allows agents such as virt-who to update its host list and associate the guests for each host. This is typically used when a host is unable to register to candlepin via subscription manager.  In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. @deprecated Use the asynchronous method.\n+      operationId: hypervisorUpdate\n+      security: []\n+      requestBody:\n+        description: Host and Guest mapping details\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: object\n+              additionalProperties:\n+                type: array\n+                items:\n+                  type: string\n+      parameters:\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: create_missing\n+          in: query\n+          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/HypervisorUpdateResultDTO'\n+        400:\n+          description: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NTcxOQ=="}, "originalCommit": {"oid": "830ea90806f023c9131c1f588ed9a55a0b23aeed"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQ4NzMzOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyMzozM1rOGN0kWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowMjowMlrOGN38lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NTk0Ng==", "bodyText": "Minor formatting issue - remove extra line.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r417145946", "createdAt": "2020-04-29T08:23:33Z", "author": {"login": "wolfdale"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1124,6 +1145,173 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /hypervisors:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Updates the list of Hypervisor Guests Allows agents such as virt-who to update its host list and associate the guests for each host. This is typically used when a host is unable to register to candlepin via subscription manager.  In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. @deprecated Use the asynchronous method.\n+      operationId: hypervisorUpdate\n+      security: []\n+      requestBody:\n+        description: Host and Guest mapping details\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: object\n+              additionalProperties:\n+                type: array\n+                items:\n+                  type: string\n+      parameters:\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: create_missing\n+          in: query\n+          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/HypervisorUpdateResultDTO'\n+        400:\n+          description: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+\n+        404:\n+          description: Owner with provided key was not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with provided key was not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830ea90806f023c9131c1f588ed9a55a0b23aeed"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMTMwMA==", "bodyText": "Removed", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r417201300", "createdAt": "2020-04-29T10:02:02Z", "author": {"login": "sonalidhome"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1124,6 +1145,173 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /hypervisors:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Updates the list of Hypervisor Guests Allows agents such as virt-who to update its host list and associate the guests for each host. This is typically used when a host is unable to register to candlepin via subscription manager.  In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. @deprecated Use the asynchronous method.\n+      operationId: hypervisorUpdate\n+      security: []\n+      requestBody:\n+        description: Host and Guest mapping details\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: object\n+              additionalProperties:\n+                type: array\n+                items:\n+                  type: string\n+      parameters:\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: create_missing\n+          in: query\n+          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/HypervisorUpdateResultDTO'\n+        400:\n+          description: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+\n+        404:\n+          description: Owner with provided key was not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with provided key was not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NTk0Ng=="}, "originalCommit": {"oid": "830ea90806f023c9131c1f588ed9a55a0b23aeed"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQ4ODA3OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyMzo0OVrOGN0k1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowMjozMVrOGN39ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NjA2OA==", "bodyText": "Minor formatting issue - remove extra line.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r417146068", "createdAt": "2020-04-29T08:23:49Z", "author": {"login": "wolfdale"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1124,6 +1145,173 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /hypervisors:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Updates the list of Hypervisor Guests Allows agents such as virt-who to update its host list and associate the guests for each host. This is typically used when a host is unable to register to candlepin via subscription manager.  In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. @deprecated Use the asynchronous method.\n+      operationId: hypervisorUpdate\n+      security: []\n+      requestBody:\n+        description: Host and Guest mapping details\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: object\n+              additionalProperties:\n+                type: array\n+                items:\n+                  type: string\n+      parameters:\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: create_missing\n+          in: query\n+          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/HypervisorUpdateResultDTO'\n+        400:\n+          description: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+\n+        404:\n+          description: Owner with provided key was not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with provided key was not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /hypervisors/{owner}:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Creates or Updates the list of Hypervisor hosts Allows agents such as virt-who to update hosts' information . This is typically used when a host is unable to register to candlepin via subscription manager. In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. Default is true. If false is specified, hypervisorIds that are not found will result in a failed state of the job.\n+      operationId: hypervisorUpdateAsync\n+      security: []\n+      requestBody:\n+        description: Hypervisor Json\n+        content:\n+          text/plain:\n+            schema:\n+              type: string\n+      parameters:\n+        - name: owner\n+          in: path\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: create_missing\n+          in: query\n+          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n+          schema:\n+            type: boolean\n+            default: true\n+        - name: reporter_id\n+          in: query\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        400:\n+          description: Host to guest mapping was not provided for hypervisor update.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Host to guest mapping was not provided for hypervisor update.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830ea90806f023c9131c1f588ed9a55a0b23aeed"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMTU0Ng==", "bodyText": "Removed.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r417201546", "createdAt": "2020-04-29T10:02:31Z", "author": {"login": "sonalidhome"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1124,6 +1145,173 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /hypervisors:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Updates the list of Hypervisor Guests Allows agents such as virt-who to update its host list and associate the guests for each host. This is typically used when a host is unable to register to candlepin via subscription manager.  In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. @deprecated Use the asynchronous method.\n+      operationId: hypervisorUpdate\n+      security: []\n+      requestBody:\n+        description: Host and Guest mapping details\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: object\n+              additionalProperties:\n+                type: array\n+                items:\n+                  type: string\n+      parameters:\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: create_missing\n+          in: query\n+          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/HypervisorUpdateResultDTO'\n+        400:\n+          description: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+\n+        404:\n+          description: Owner with provided key was not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with provided key was not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /hypervisors/{owner}:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Creates or Updates the list of Hypervisor hosts Allows agents such as virt-who to update hosts' information . This is typically used when a host is unable to register to candlepin via subscription manager. In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. Default is true. If false is specified, hypervisorIds that are not found will result in a failed state of the job.\n+      operationId: hypervisorUpdateAsync\n+      security: []\n+      requestBody:\n+        description: Hypervisor Json\n+        content:\n+          text/plain:\n+            schema:\n+              type: string\n+      parameters:\n+        - name: owner\n+          in: path\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: create_missing\n+          in: query\n+          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n+          schema:\n+            type: boolean\n+            default: true\n+        - name: reporter_id\n+          in: query\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        400:\n+          description: Host to guest mapping was not provided for hypervisor update.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Host to guest mapping was not provided for hypervisor update.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NjA2OA=="}, "originalCommit": {"oid": "830ea90806f023c9131c1f588ed9a55a0b23aeed"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQ4OTc3OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyNDoxNlrOGN0l1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowMjoxMVrOGN387Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NjMyNg==", "bodyText": "Minor formatting issue - remove extra line.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r417146326", "createdAt": "2020-04-29T08:24:16Z", "author": {"login": "wolfdale"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1124,6 +1145,173 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /hypervisors:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Updates the list of Hypervisor Guests Allows agents such as virt-who to update its host list and associate the guests for each host. This is typically used when a host is unable to register to candlepin via subscription manager.  In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. @deprecated Use the asynchronous method.\n+      operationId: hypervisorUpdate\n+      security: []\n+      requestBody:\n+        description: Host and Guest mapping details\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: object\n+              additionalProperties:\n+                type: array\n+                items:\n+                  type: string\n+      parameters:\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: create_missing\n+          in: query\n+          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/HypervisorUpdateResultDTO'\n+        400:\n+          description: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+\n+        404:\n+          description: Owner with provided key was not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with provided key was not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /hypervisors/{owner}:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Creates or Updates the list of Hypervisor hosts Allows agents such as virt-who to update hosts' information . This is typically used when a host is unable to register to candlepin via subscription manager. In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. Default is true. If false is specified, hypervisorIds that are not found will result in a failed state of the job.\n+      operationId: hypervisorUpdateAsync\n+      security: []\n+      requestBody:\n+        description: Hypervisor Json\n+        content:\n+          text/plain:\n+            schema:\n+              type: string\n+      parameters:\n+        - name: owner\n+          in: path\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: create_missing\n+          in: query\n+          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n+          schema:\n+            type: boolean\n+            default: true\n+        - name: reporter_id\n+          in: query\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        400:\n+          description: Host to guest mapping was not provided for hypervisor update.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Host to guest mapping was not provided for hypervisor update.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+\n+        404:\n+          description: Owner with provided key was not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with provided key was not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /hypervisors/{owner}/heartbeat:\n+    put:\n+      tags:\n+        - hypervisors\n+      description: Updates last check in date of all consumers of the given reporterId.\n+      operationId: hypervisorHeartbeatUpdate\n+      security: []\n+      parameters:\n+        - name: owner\n+          in: path\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: reporter_id\n+          in: query\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        400:\n+          description: Provided reporter_id is absent or empty.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Provided reporter_id is absent or empty.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830ea90806f023c9131c1f588ed9a55a0b23aeed"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMTM4OQ==", "bodyText": "Removed.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r417201389", "createdAt": "2020-04-29T10:02:11Z", "author": {"login": "sonalidhome"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1124,6 +1145,173 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /hypervisors:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Updates the list of Hypervisor Guests Allows agents such as virt-who to update its host list and associate the guests for each host. This is typically used when a host is unable to register to candlepin via subscription manager.  In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. @deprecated Use the asynchronous method.\n+      operationId: hypervisorUpdate\n+      security: []\n+      requestBody:\n+        description: Host and Guest mapping details\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: object\n+              additionalProperties:\n+                type: array\n+                items:\n+                  type: string\n+      parameters:\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: create_missing\n+          in: query\n+          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/HypervisorUpdateResultDTO'\n+        400:\n+          description: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+\n+        404:\n+          description: Owner with provided key was not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with provided key was not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /hypervisors/{owner}:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Creates or Updates the list of Hypervisor hosts Allows agents such as virt-who to update hosts' information . This is typically used when a host is unable to register to candlepin via subscription manager. In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. Default is true. If false is specified, hypervisorIds that are not found will result in a failed state of the job.\n+      operationId: hypervisorUpdateAsync\n+      security: []\n+      requestBody:\n+        description: Hypervisor Json\n+        content:\n+          text/plain:\n+            schema:\n+              type: string\n+      parameters:\n+        - name: owner\n+          in: path\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: create_missing\n+          in: query\n+          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n+          schema:\n+            type: boolean\n+            default: true\n+        - name: reporter_id\n+          in: query\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        400:\n+          description: Host to guest mapping was not provided for hypervisor update.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Host to guest mapping was not provided for hypervisor update.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+\n+        404:\n+          description: Owner with provided key was not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with provided key was not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /hypervisors/{owner}/heartbeat:\n+    put:\n+      tags:\n+        - hypervisors\n+      description: Updates last check in date of all consumers of the given reporterId.\n+      operationId: hypervisorHeartbeatUpdate\n+      security: []\n+      parameters:\n+        - name: owner\n+          in: path\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: reporter_id\n+          in: query\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        400:\n+          description: Provided reporter_id is absent or empty.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Provided reporter_id is absent or empty.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NjMyNg=="}, "originalCommit": {"oid": "830ea90806f023c9131c1f588ed9a55a0b23aeed"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzQ2MjU1OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo0NTowMlrOGR45Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo0NTowMlrOGR45Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxMTE0Nw==", "bodyText": "I was going to say we don't need the required section here because we only use this DTO for output, not input (so we don't need validation), but after looking into it more, it looks like your fix for controlling which collections get set to null or default instance is controlled by this, so we need it here to avoid having to use the custom serializer \ud83d\udc4d", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r421411147", "createdAt": "2020-05-07T10:45:02Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1715,6 +1899,43 @@ components:\n             guestId:\n               type: string\n \n+    HypervisorConsumerDTO:\n+      properties:\n+        uuid:\n+          type: string\n+        name:\n+          type: string\n+        owner:\n+          $ref: \"#/components/schemas/NestedOwnerDTO\"\n+\n+    HypervisorUpdateResultDTO:\n+      required:\n+        - failedUpdate\n+        - updated\n+        - created\n+        - unchanged", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzUxNDA2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTowMTozOVrOGR5Z1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzoxMTo0MVrOGSlBMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxOTQ3Nw==", "bodyText": "There is no need to null check the provider here. If it ever was null, we'd want to find out as soon as possible (meaning when we do Principal principal = this.principalProvider.get() here), because that would be a developer error (it wasn't injected). By creating a null principal here we're delegating the NPE to happen later on where it might be harder to figure out what's wrong", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r421419477", "createdAt": "2020-05-07T11:01:39Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -118,37 +100,27 @@ public HypervisorResource(ConsumerResource consumerResource, ConsumerCurator con\n         this.jobManager = jobManager;\n \n         this.hypervisorType = consumerTypeCurator.getByLabel(ConsumerTypeEnum.HYPERVISOR.getLabel(), true);\n+        this.principalProvider = principalProvider;\n     }\n \n     /**\n      * @deprecated Use the asynchronous method\n      * @return HypervisorCheckInResult\n      */\n-    @ApiOperation(notes = \"Updates the list of Hypervisor Guests Allows agents such as \" +\n-        \"virt-who to update its host list and associate the guests for each host. This is \" +\n-        \"typically used when a host is unable to register to candlepin via subscription\" +\n-        \" manager.  In situations where consumers already exist it is probably best not \" +\n-        \"to allow creation of new hypervisor consumers.  Most consumers do not have a\" +\n-        \" hypervisorId attribute, so that should be added manually when necessary by the \" +\n-        \"management environment. @deprecated Use the asynchronous method\",\n-        value = \"hypervisorUpdate\")\n-    @ApiResponses({ @ApiResponse(code = 202, message = \"\") })\n-    @POST\n-    @Consumes(MediaType.APPLICATION_JSON)\n-    @Produces(MediaType.APPLICATION_JSON)\n+    @Override\n     @Deprecated\n     @Transactional\n     @UpdateConsumerCheckIn\n-    @SuppressWarnings(\"checkstyle:indentation\")\n+    @SuppressWarnings({\"checkstyle:indentation\", \"checkstyle:methodlength\"})\n     public HypervisorUpdateResultDTO hypervisorUpdate(\n-        Map<String, List<String>> hostGuestMap, @Context Principal principal,\n-        @QueryParam(\"owner\") @Verify(value = Owner.class,\n-            require = Access.READ_ONLY,\n-            subResource = SubResource.HYPERVISOR) String ownerKey,\n-        @ApiParam(\"specify whether or not to create missing hypervisors.\" +\n-            \"Default is true.  If false is specified, hypervisorIds that are not found\" +\n-            \"will result in failed entries in the resulting HypervisorCheckInResult\")\n-        @QueryParam(\"create_missing\") @DefaultValue(\"true\") boolean createMissing) {\n+        @Verify(value = Owner.class, require = Access.READ_ONLY,\n+        subResource = SubResource.HYPERVISOR) String ownerKey,\n+        Map<String, List<String>> hostGuestMap,\n+        Boolean createMissing) {\n+\n+        Principal principal = (this.principalProvider == null ?\n+            null : this.principalProvider.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzNDA2NQ==", "bodyText": "Understood, removed now.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422134065", "createdAt": "2020-05-08T13:11:41Z", "author": {"login": "sonalidhome"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -118,37 +100,27 @@ public HypervisorResource(ConsumerResource consumerResource, ConsumerCurator con\n         this.jobManager = jobManager;\n \n         this.hypervisorType = consumerTypeCurator.getByLabel(ConsumerTypeEnum.HYPERVISOR.getLabel(), true);\n+        this.principalProvider = principalProvider;\n     }\n \n     /**\n      * @deprecated Use the asynchronous method\n      * @return HypervisorCheckInResult\n      */\n-    @ApiOperation(notes = \"Updates the list of Hypervisor Guests Allows agents such as \" +\n-        \"virt-who to update its host list and associate the guests for each host. This is \" +\n-        \"typically used when a host is unable to register to candlepin via subscription\" +\n-        \" manager.  In situations where consumers already exist it is probably best not \" +\n-        \"to allow creation of new hypervisor consumers.  Most consumers do not have a\" +\n-        \" hypervisorId attribute, so that should be added manually when necessary by the \" +\n-        \"management environment. @deprecated Use the asynchronous method\",\n-        value = \"hypervisorUpdate\")\n-    @ApiResponses({ @ApiResponse(code = 202, message = \"\") })\n-    @POST\n-    @Consumes(MediaType.APPLICATION_JSON)\n-    @Produces(MediaType.APPLICATION_JSON)\n+    @Override\n     @Deprecated\n     @Transactional\n     @UpdateConsumerCheckIn\n-    @SuppressWarnings(\"checkstyle:indentation\")\n+    @SuppressWarnings({\"checkstyle:indentation\", \"checkstyle:methodlength\"})\n     public HypervisorUpdateResultDTO hypervisorUpdate(\n-        Map<String, List<String>> hostGuestMap, @Context Principal principal,\n-        @QueryParam(\"owner\") @Verify(value = Owner.class,\n-            require = Access.READ_ONLY,\n-            subResource = SubResource.HYPERVISOR) String ownerKey,\n-        @ApiParam(\"specify whether or not to create missing hypervisors.\" +\n-            \"Default is true.  If false is specified, hypervisorIds that are not found\" +\n-            \"will result in failed entries in the resulting HypervisorCheckInResult\")\n-        @QueryParam(\"create_missing\") @DefaultValue(\"true\") boolean createMissing) {\n+        @Verify(value = Owner.class, require = Access.READ_ONLY,\n+        subResource = SubResource.HYPERVISOR) String ownerKey,\n+        Map<String, List<String>> hostGuestMap,\n+        Boolean createMissing) {\n+\n+        Principal principal = (this.principalProvider == null ?\n+            null : this.principalProvider.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxOTQ3Nw=="}, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzUyMjIzOnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTowNDoxOVrOGR5e5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzoxMDoxMlrOGSk-TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyMDc3NA==", "bodyText": "Both this and the HypervisorUpdateResultDTO need to have the DynamicPropertyFilterMixIn.class added in JsonProvider.addMixInAnnotationsForDTOs, like all other DTOs", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r421420774", "createdAt": "2020-05-07T11:04:19Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1715,6 +1899,43 @@ components:\n             guestId:\n               type: string\n \n+    HypervisorConsumerDTO:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMzMyNQ==", "bodyText": "Added.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422133325", "createdAt": "2020-05-08T13:10:12Z", "author": {"login": "sonalidhome"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1715,6 +1899,43 @@ components:\n             guestId:\n               type: string\n \n+    HypervisorConsumerDTO:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyMDc3NA=="}, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzU3MDU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMToxODo1MVrOGR58ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzoxMDoyNlrOGSk-rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyODMzMA==", "bodyText": "There should be a space between HypervisorsApi and { for better readability", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r421428330", "createdAt": "2020-05-07T11:18:51Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -70,25 +65,11 @@\n import java.util.Set;\n \n import javax.inject.Provider;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.PUT;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.Context;\n-import javax.ws.rs.core.MediaType;\n-\n-\n \n /**\n  * HypervisorResource\n  */\n-@Path(\"/hypervisors\")\n-@Api(value = \"hypervisors\", authorizations = { @Authorization(\"basic\") })\n-public class HypervisorResource {\n+public class HypervisorResource implements HypervisorsApi{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMzQyMw==", "bodyText": "Corrected.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422133423", "createdAt": "2020-05-08T13:10:26Z", "author": {"login": "sonalidhome"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -70,25 +65,11 @@\n import java.util.Set;\n \n import javax.inject.Provider;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.PUT;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.Context;\n-import javax.ws.rs.core.MediaType;\n-\n-\n \n /**\n  * HypervisorResource\n  */\n-@Path(\"/hypervisors\")\n-@Api(value = \"hypervisors\", authorizations = { @Authorization(\"basic\") })\n-public class HypervisorResource {\n+public class HypervisorResource implements HypervisorsApi{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyODMzMA=="}, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzc0MzY2OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMjoxMjowNlrOGR7mHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzoxMDozNVrOGSk_CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ1NTM4OA==", "bodyText": "should be like the other POST request description you wrote: \"Host and Guest mapping details\" which is more descriptive", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r421455388", "createdAt": "2020-05-07T12:12:06Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1124,6 +1145,169 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /hypervisors:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Updates the list of Hypervisor Guests Allows agents such as virt-who to update its host list and associate the guests for each host. This is typically used when a host is unable to register to candlepin via subscription manager.  In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. @deprecated Use the asynchronous method.\n+      operationId: hypervisorUpdate\n+      security: []\n+      requestBody:\n+        description: Host and Guest mapping details\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: object\n+              additionalProperties:\n+                type: array\n+                items:\n+                  type: string\n+      parameters:\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: create_missing\n+          in: query\n+          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/HypervisorUpdateResultDTO'\n+        400:\n+          description: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with provided key was not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with provided key was not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /hypervisors/{owner}:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Creates or Updates the list of Hypervisor hosts Allows agents such as virt-who to update hosts' information . This is typically used when a host is unable to register to candlepin via subscription manager. In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. Default is true. If false is specified, hypervisorIds that are not found will result in a failed state of the job.\n+      operationId: hypervisorUpdateAsync\n+      security: []\n+      requestBody:\n+        description: Hypervisor Json", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMzUxMw==", "bodyText": "Updated.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422133513", "createdAt": "2020-05-08T13:10:35Z", "author": {"login": "sonalidhome"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -1124,6 +1145,169 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /hypervisors:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Updates the list of Hypervisor Guests Allows agents such as virt-who to update its host list and associate the guests for each host. This is typically used when a host is unable to register to candlepin via subscription manager.  In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. @deprecated Use the asynchronous method.\n+      operationId: hypervisorUpdate\n+      security: []\n+      requestBody:\n+        description: Host and Guest mapping details\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: object\n+              additionalProperties:\n+                type: array\n+                items:\n+                  type: string\n+      parameters:\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: create_missing\n+          in: query\n+          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/HypervisorUpdateResultDTO'\n+        400:\n+          description: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with provided key was not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with provided key was not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /hypervisors/{owner}:\n+    post:\n+      tags:\n+        - Hypervisors\n+      description: Creates or Updates the list of Hypervisor hosts Allows agents such as virt-who to update hosts' information . This is typically used when a host is unable to register to candlepin via subscription manager. In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. Default is true. If false is specified, hypervisorIds that are not found will result in a failed state of the job.\n+      operationId: hypervisorUpdateAsync\n+      security: []\n+      requestBody:\n+        description: Hypervisor Json", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ1NTM4OA=="}, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzkwMzg0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMjo1NDo1OVrOGR9JWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzoxMTowM1rOGSk_6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MDc5Mg==", "bodyText": "It looks like when we use addHypervisorConsumerDTO, we always have to translate a consumer into a HypervisorConsumerDTO, so maybe it would be better to do the translation within that method to avoid code duplication and get more readability.\nSame applies for the method in the HypervisorUpdateAction class", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r421480792", "createdAt": "2020-05-07T12:54:59Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -248,88 +221,72 @@ public HypervisorUpdateResultDTO hypervisorUpdate(\n                 consumer.setLastCheckin(now);\n                 // Populate the result with the processed consumer.\n                 if (hostConsumerCreated) {\n-                    result.addCreated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setCreated(addHypervisorConsumerDTO(result.getCreated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMzczNw==", "bodyText": "Agreed. Updated the method in both the classes.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422133737", "createdAt": "2020-05-08T13:11:03Z", "author": {"login": "sonalidhome"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -248,88 +221,72 @@ public HypervisorUpdateResultDTO hypervisorUpdate(\n                 consumer.setLastCheckin(now);\n                 // Populate the result with the processed consumer.\n                 if (hostConsumerCreated) {\n-                    result.addCreated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setCreated(addHypervisorConsumerDTO(result.getCreated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MDc5Mg=="}, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzkxODIzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMjo1ODozNVrOGR9Slw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzoxMToxNlrOGSlAdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MzE1OQ==", "bodyText": "Same here, no need for null check", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r421483159", "createdAt": "2020-05-07T12:58:35Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -248,88 +221,72 @@ public HypervisorUpdateResultDTO hypervisorUpdate(\n                 consumer.setLastCheckin(now);\n                 // Populate the result with the processed consumer.\n                 if (hostConsumerCreated) {\n-                    result.addCreated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setCreated(addHypervisorConsumerDTO(result.getCreated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else if (guestIdsUpdated || updatedType) {\n-                    result.addUpdated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUpdated(addHypervisorConsumerDTO(result.getUpdated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else {\n-                    result.addUnchanged(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUnchanged(addHypervisorConsumerDTO(result.getUnchanged(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n             }\n             catch (Exception e) {\n                 log.error(\"Hypervisor checkin failed\", e);\n-                result.addFailed(hypervisorId, e.getMessage());\n+                result.setFailedUpdate(addFailed(result.getFailedUpdate(),\n+                    hypervisorId + \": \" + e.getMessage()));\n             }\n         }\n         log.info(\"Summary of hypervisor checkin by principal \\\"{}\\\": {}\", principal, result);\n         return result;\n     }\n \n-    @ApiOperation(notes = \"Creates or Updates the list of Hypervisor hosts Allows agents such\" +\n-        \" as virt-who to update hosts' information . This is typically used when a host is\" +\n-        \" unable to register to candlepin via subscription manager. In situations where \" +\n-        \"consumers already exist it is probably best not to allow creation of new hypervisor\" +\n-        \" consumers.  Most consumers do not have a hypervisorId attribute, so that should be\" +\n-        \" added manually when necessary by the management environment. Default is true.  \" +\n-        \"If false is specified, hypervisorIds that are not found will result in a failed \" +\n-        \"state of the job.\", value = \"hypervisorUpdateAsync\")\n-    @ApiResponses({ @ApiResponse(code = 202, message = \"\") })\n-    @POST\n-    @Consumes(MediaType.TEXT_PLAIN)\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"/{owner}\")\n+    @Override\n     @UpdateConsumerCheckIn\n     @SuppressWarnings(\"checkstyle:indentation\")\n     public AsyncJobStatusDTO hypervisorUpdateAsync(\n-        String hypervisorJson, @Context Principal principal,\n-        @PathParam(\"owner\") @Verify(value = Owner.class,\n-            require = Access.READ_ONLY,\n-            subResource = SubResource.HYPERVISOR) String ownerKey,\n-        @ApiParam(\"specify whether or not to create missing hypervisors.\" +\n-            \"Default is true.  If false is specified, hypervisorIds that are not found\" +\n-            \"will result in failed entries in the resulting HypervisorCheckInResult\")\n-\n-        @QueryParam(\"create_missing\") @DefaultValue(\"true\") boolean createMissing,\n-        @QueryParam(\"reporter_id\") String reporterId) throws JobException {\n+        @Verify(value = Owner.class, require = Access.READ_ONLY,\n+        subResource = SubResource.HYPERVISOR) String ownerKey,\n+        Boolean createMissing, String reporterId, String hypervisorJson) {\n \n         if (hypervisorJson == null || hypervisorJson.isEmpty()) {\n             log.debug(\"Host/Guest mapping provided during hypervisor update was null.\");\n             throw new BadRequestException(\n                 i18n.tr(\"Host to guest mapping was not provided for hypervisor update.\"));\n         }\n \n+        Principal principal = (this.principalProvider == null ? null : this.principalProvider.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMzg3Ng==", "bodyText": "Removed.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422133876", "createdAt": "2020-05-08T13:11:16Z", "author": {"login": "sonalidhome"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -248,88 +221,72 @@ public HypervisorUpdateResultDTO hypervisorUpdate(\n                 consumer.setLastCheckin(now);\n                 // Populate the result with the processed consumer.\n                 if (hostConsumerCreated) {\n-                    result.addCreated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setCreated(addHypervisorConsumerDTO(result.getCreated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else if (guestIdsUpdated || updatedType) {\n-                    result.addUpdated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUpdated(addHypervisorConsumerDTO(result.getUpdated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else {\n-                    result.addUnchanged(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUnchanged(addHypervisorConsumerDTO(result.getUnchanged(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n             }\n             catch (Exception e) {\n                 log.error(\"Hypervisor checkin failed\", e);\n-                result.addFailed(hypervisorId, e.getMessage());\n+                result.setFailedUpdate(addFailed(result.getFailedUpdate(),\n+                    hypervisorId + \": \" + e.getMessage()));\n             }\n         }\n         log.info(\"Summary of hypervisor checkin by principal \\\"{}\\\": {}\", principal, result);\n         return result;\n     }\n \n-    @ApiOperation(notes = \"Creates or Updates the list of Hypervisor hosts Allows agents such\" +\n-        \" as virt-who to update hosts' information . This is typically used when a host is\" +\n-        \" unable to register to candlepin via subscription manager. In situations where \" +\n-        \"consumers already exist it is probably best not to allow creation of new hypervisor\" +\n-        \" consumers.  Most consumers do not have a hypervisorId attribute, so that should be\" +\n-        \" added manually when necessary by the management environment. Default is true.  \" +\n-        \"If false is specified, hypervisorIds that are not found will result in a failed \" +\n-        \"state of the job.\", value = \"hypervisorUpdateAsync\")\n-    @ApiResponses({ @ApiResponse(code = 202, message = \"\") })\n-    @POST\n-    @Consumes(MediaType.TEXT_PLAIN)\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"/{owner}\")\n+    @Override\n     @UpdateConsumerCheckIn\n     @SuppressWarnings(\"checkstyle:indentation\")\n     public AsyncJobStatusDTO hypervisorUpdateAsync(\n-        String hypervisorJson, @Context Principal principal,\n-        @PathParam(\"owner\") @Verify(value = Owner.class,\n-            require = Access.READ_ONLY,\n-            subResource = SubResource.HYPERVISOR) String ownerKey,\n-        @ApiParam(\"specify whether or not to create missing hypervisors.\" +\n-            \"Default is true.  If false is specified, hypervisorIds that are not found\" +\n-            \"will result in failed entries in the resulting HypervisorCheckInResult\")\n-\n-        @QueryParam(\"create_missing\") @DefaultValue(\"true\") boolean createMissing,\n-        @QueryParam(\"reporter_id\") String reporterId) throws JobException {\n+        @Verify(value = Owner.class, require = Access.READ_ONLY,\n+        subResource = SubResource.HYPERVISOR) String ownerKey,\n+        Boolean createMissing, String reporterId, String hypervisorJson) {\n \n         if (hypervisorJson == null || hypervisorJson.isEmpty()) {\n             log.debug(\"Host/Guest mapping provided during hypervisor update was null.\");\n             throw new BadRequestException(\n                 i18n.tr(\"Host to guest mapping was not provided for hypervisor update.\"));\n         }\n \n+        Principal principal = (this.principalProvider == null ? null : this.principalProvider.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MzE1OQ=="}, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDA2Nzg2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzozMzo1MlrOGR-vzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzowMjo1MlrOGTbPSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUwNzAyMQ==", "bodyText": "What prompted this change? We didn't catch the exception beforehand\n(same question applies about the exception catching in the heartbeat endpoint)", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r421507021", "createdAt": "2020-05-07T13:33:52Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -248,88 +221,72 @@ public HypervisorUpdateResultDTO hypervisorUpdate(\n                 consumer.setLastCheckin(now);\n                 // Populate the result with the processed consumer.\n                 if (hostConsumerCreated) {\n-                    result.addCreated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setCreated(addHypervisorConsumerDTO(result.getCreated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else if (guestIdsUpdated || updatedType) {\n-                    result.addUpdated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUpdated(addHypervisorConsumerDTO(result.getUpdated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else {\n-                    result.addUnchanged(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUnchanged(addHypervisorConsumerDTO(result.getUnchanged(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n             }\n             catch (Exception e) {\n                 log.error(\"Hypervisor checkin failed\", e);\n-                result.addFailed(hypervisorId, e.getMessage());\n+                result.setFailedUpdate(addFailed(result.getFailedUpdate(),\n+                    hypervisorId + \": \" + e.getMessage()));\n             }\n         }\n         log.info(\"Summary of hypervisor checkin by principal \\\"{}\\\": {}\", principal, result);\n         return result;\n     }\n \n-    @ApiOperation(notes = \"Creates or Updates the list of Hypervisor hosts Allows agents such\" +\n-        \" as virt-who to update hosts' information . This is typically used when a host is\" +\n-        \" unable to register to candlepin via subscription manager. In situations where \" +\n-        \"consumers already exist it is probably best not to allow creation of new hypervisor\" +\n-        \" consumers.  Most consumers do not have a hypervisorId attribute, so that should be\" +\n-        \" added manually when necessary by the management environment. Default is true.  \" +\n-        \"If false is specified, hypervisorIds that are not found will result in a failed \" +\n-        \"state of the job.\", value = \"hypervisorUpdateAsync\")\n-    @ApiResponses({ @ApiResponse(code = 202, message = \"\") })\n-    @POST\n-    @Consumes(MediaType.TEXT_PLAIN)\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"/{owner}\")\n+    @Override\n     @UpdateConsumerCheckIn\n     @SuppressWarnings(\"checkstyle:indentation\")\n     public AsyncJobStatusDTO hypervisorUpdateAsync(\n-        String hypervisorJson, @Context Principal principal,\n-        @PathParam(\"owner\") @Verify(value = Owner.class,\n-            require = Access.READ_ONLY,\n-            subResource = SubResource.HYPERVISOR) String ownerKey,\n-        @ApiParam(\"specify whether or not to create missing hypervisors.\" +\n-            \"Default is true.  If false is specified, hypervisorIds that are not found\" +\n-            \"will result in failed entries in the resulting HypervisorCheckInResult\")\n-\n-        @QueryParam(\"create_missing\") @DefaultValue(\"true\") boolean createMissing,\n-        @QueryParam(\"reporter_id\") String reporterId) throws JobException {\n+        @Verify(value = Owner.class, require = Access.READ_ONLY,\n+        subResource = SubResource.HYPERVISOR) String ownerKey,\n+        Boolean createMissing, String reporterId, String hypervisorJson) {\n \n         if (hypervisorJson == null || hypervisorJson.isEmpty()) {\n             log.debug(\"Host/Guest mapping provided during hypervisor update was null.\");\n             throw new BadRequestException(\n                 i18n.tr(\"Host to guest mapping was not provided for hypervisor update.\"));\n         }\n \n+        Principal principal = (this.principalProvider == null ? null : this.principalProvider.get());\n+\n         log.info(\"Hypervisor update by principal: {}\", principal);\n         Owner owner = this.getOwner(ownerKey);\n \n         JobConfig config = HypervisorUpdateJob.createJobConfig()\n             .setOwner(owner)\n             .setData(hypervisorJson)\n-            .setCreateMissing(createMissing)\n+            .setCreateMissing(createMissing.booleanValue())\n             .setPrincipal(principal)\n             .setReporter(reporterId);\n \n-        AsyncJobStatus status = jobManager.queueJob(config);\n-        return translator.translate(status, AsyncJobStatusDTO.class);\n+        try {\n+            AsyncJobStatus status = jobManager.queueJob(config);\n+            return translator.translate(status, AsyncJobStatusDTO.class);\n+        }\n+        catch (JobException e) {\n+            String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n+                config.getJobKey());\n+\n+            throw new IseException(errmsg, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0MDIwMg==", "bodyText": "Previously the method was throwing an unhandled JobException. But in auto-generated HypervisorsApi the method does not throws JobException. Hence the inherited class method is not allowing to throw an exception. Hence needed to handle and re-throw an exception.\nI didn't find any valid property that could be added in the YAML specification file which adds  throws Exception to an auto-generated method. The issue link says its an enhancement: OpenAPITools/openapi-generator#4815.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422140202", "createdAt": "2020-05-08T13:24:02Z", "author": {"login": "sonalidhome"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -248,88 +221,72 @@ public HypervisorUpdateResultDTO hypervisorUpdate(\n                 consumer.setLastCheckin(now);\n                 // Populate the result with the processed consumer.\n                 if (hostConsumerCreated) {\n-                    result.addCreated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setCreated(addHypervisorConsumerDTO(result.getCreated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else if (guestIdsUpdated || updatedType) {\n-                    result.addUpdated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUpdated(addHypervisorConsumerDTO(result.getUpdated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else {\n-                    result.addUnchanged(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUnchanged(addHypervisorConsumerDTO(result.getUnchanged(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n             }\n             catch (Exception e) {\n                 log.error(\"Hypervisor checkin failed\", e);\n-                result.addFailed(hypervisorId, e.getMessage());\n+                result.setFailedUpdate(addFailed(result.getFailedUpdate(),\n+                    hypervisorId + \": \" + e.getMessage()));\n             }\n         }\n         log.info(\"Summary of hypervisor checkin by principal \\\"{}\\\": {}\", principal, result);\n         return result;\n     }\n \n-    @ApiOperation(notes = \"Creates or Updates the list of Hypervisor hosts Allows agents such\" +\n-        \" as virt-who to update hosts' information . This is typically used when a host is\" +\n-        \" unable to register to candlepin via subscription manager. In situations where \" +\n-        \"consumers already exist it is probably best not to allow creation of new hypervisor\" +\n-        \" consumers.  Most consumers do not have a hypervisorId attribute, so that should be\" +\n-        \" added manually when necessary by the management environment. Default is true.  \" +\n-        \"If false is specified, hypervisorIds that are not found will result in a failed \" +\n-        \"state of the job.\", value = \"hypervisorUpdateAsync\")\n-    @ApiResponses({ @ApiResponse(code = 202, message = \"\") })\n-    @POST\n-    @Consumes(MediaType.TEXT_PLAIN)\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"/{owner}\")\n+    @Override\n     @UpdateConsumerCheckIn\n     @SuppressWarnings(\"checkstyle:indentation\")\n     public AsyncJobStatusDTO hypervisorUpdateAsync(\n-        String hypervisorJson, @Context Principal principal,\n-        @PathParam(\"owner\") @Verify(value = Owner.class,\n-            require = Access.READ_ONLY,\n-            subResource = SubResource.HYPERVISOR) String ownerKey,\n-        @ApiParam(\"specify whether or not to create missing hypervisors.\" +\n-            \"Default is true.  If false is specified, hypervisorIds that are not found\" +\n-            \"will result in failed entries in the resulting HypervisorCheckInResult\")\n-\n-        @QueryParam(\"create_missing\") @DefaultValue(\"true\") boolean createMissing,\n-        @QueryParam(\"reporter_id\") String reporterId) throws JobException {\n+        @Verify(value = Owner.class, require = Access.READ_ONLY,\n+        subResource = SubResource.HYPERVISOR) String ownerKey,\n+        Boolean createMissing, String reporterId, String hypervisorJson) {\n \n         if (hypervisorJson == null || hypervisorJson.isEmpty()) {\n             log.debug(\"Host/Guest mapping provided during hypervisor update was null.\");\n             throw new BadRequestException(\n                 i18n.tr(\"Host to guest mapping was not provided for hypervisor update.\"));\n         }\n \n+        Principal principal = (this.principalProvider == null ? null : this.principalProvider.get());\n+\n         log.info(\"Hypervisor update by principal: {}\", principal);\n         Owner owner = this.getOwner(ownerKey);\n \n         JobConfig config = HypervisorUpdateJob.createJobConfig()\n             .setOwner(owner)\n             .setData(hypervisorJson)\n-            .setCreateMissing(createMissing)\n+            .setCreateMissing(createMissing.booleanValue())\n             .setPrincipal(principal)\n             .setReporter(reporterId);\n \n-        AsyncJobStatus status = jobManager.queueJob(config);\n-        return translator.translate(status, AsyncJobStatusDTO.class);\n+        try {\n+            AsyncJobStatus status = jobManager.queueJob(config);\n+            return translator.translate(status, AsyncJobStatusDTO.class);\n+        }\n+        catch (JobException e) {\n+            String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n+                config.getJobKey());\n+\n+            throw new IseException(errmsg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUwNzAyMQ=="}, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk0Mzg4MQ==", "bodyText": "Alright. But we should log this as an error so that the full stacktrace will be available in the log. With the current way of just throwing an IseException, the error message is returned to the client, but there is nothing in the log, so we wouldn't know where to start if we were to investigate an error. Adding log.error(errmsg, e) right before we throw the IseException should give us the full stacktrace in the candlepin.log", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422943881", "createdAt": "2020-05-11T10:31:14Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -248,88 +221,72 @@ public HypervisorUpdateResultDTO hypervisorUpdate(\n                 consumer.setLastCheckin(now);\n                 // Populate the result with the processed consumer.\n                 if (hostConsumerCreated) {\n-                    result.addCreated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setCreated(addHypervisorConsumerDTO(result.getCreated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else if (guestIdsUpdated || updatedType) {\n-                    result.addUpdated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUpdated(addHypervisorConsumerDTO(result.getUpdated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else {\n-                    result.addUnchanged(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUnchanged(addHypervisorConsumerDTO(result.getUnchanged(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n             }\n             catch (Exception e) {\n                 log.error(\"Hypervisor checkin failed\", e);\n-                result.addFailed(hypervisorId, e.getMessage());\n+                result.setFailedUpdate(addFailed(result.getFailedUpdate(),\n+                    hypervisorId + \": \" + e.getMessage()));\n             }\n         }\n         log.info(\"Summary of hypervisor checkin by principal \\\"{}\\\": {}\", principal, result);\n         return result;\n     }\n \n-    @ApiOperation(notes = \"Creates or Updates the list of Hypervisor hosts Allows agents such\" +\n-        \" as virt-who to update hosts' information . This is typically used when a host is\" +\n-        \" unable to register to candlepin via subscription manager. In situations where \" +\n-        \"consumers already exist it is probably best not to allow creation of new hypervisor\" +\n-        \" consumers.  Most consumers do not have a hypervisorId attribute, so that should be\" +\n-        \" added manually when necessary by the management environment. Default is true.  \" +\n-        \"If false is specified, hypervisorIds that are not found will result in a failed \" +\n-        \"state of the job.\", value = \"hypervisorUpdateAsync\")\n-    @ApiResponses({ @ApiResponse(code = 202, message = \"\") })\n-    @POST\n-    @Consumes(MediaType.TEXT_PLAIN)\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"/{owner}\")\n+    @Override\n     @UpdateConsumerCheckIn\n     @SuppressWarnings(\"checkstyle:indentation\")\n     public AsyncJobStatusDTO hypervisorUpdateAsync(\n-        String hypervisorJson, @Context Principal principal,\n-        @PathParam(\"owner\") @Verify(value = Owner.class,\n-            require = Access.READ_ONLY,\n-            subResource = SubResource.HYPERVISOR) String ownerKey,\n-        @ApiParam(\"specify whether or not to create missing hypervisors.\" +\n-            \"Default is true.  If false is specified, hypervisorIds that are not found\" +\n-            \"will result in failed entries in the resulting HypervisorCheckInResult\")\n-\n-        @QueryParam(\"create_missing\") @DefaultValue(\"true\") boolean createMissing,\n-        @QueryParam(\"reporter_id\") String reporterId) throws JobException {\n+        @Verify(value = Owner.class, require = Access.READ_ONLY,\n+        subResource = SubResource.HYPERVISOR) String ownerKey,\n+        Boolean createMissing, String reporterId, String hypervisorJson) {\n \n         if (hypervisorJson == null || hypervisorJson.isEmpty()) {\n             log.debug(\"Host/Guest mapping provided during hypervisor update was null.\");\n             throw new BadRequestException(\n                 i18n.tr(\"Host to guest mapping was not provided for hypervisor update.\"));\n         }\n \n+        Principal principal = (this.principalProvider == null ? null : this.principalProvider.get());\n+\n         log.info(\"Hypervisor update by principal: {}\", principal);\n         Owner owner = this.getOwner(ownerKey);\n \n         JobConfig config = HypervisorUpdateJob.createJobConfig()\n             .setOwner(owner)\n             .setData(hypervisorJson)\n-            .setCreateMissing(createMissing)\n+            .setCreateMissing(createMissing.booleanValue())\n             .setPrincipal(principal)\n             .setReporter(reporterId);\n \n-        AsyncJobStatus status = jobManager.queueJob(config);\n-        return translator.translate(status, AsyncJobStatusDTO.class);\n+        try {\n+            AsyncJobStatus status = jobManager.queueJob(config);\n+            return translator.translate(status, AsyncJobStatusDTO.class);\n+        }\n+        catch (JobException e) {\n+            String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n+                config.getJobKey());\n+\n+            throw new IseException(errmsg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUwNzAyMQ=="}, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyMjQwOQ==", "bodyText": "Yes. Added error log.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r423022409", "createdAt": "2020-05-11T13:02:52Z", "author": {"login": "sonalidhome"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -248,88 +221,72 @@ public HypervisorUpdateResultDTO hypervisorUpdate(\n                 consumer.setLastCheckin(now);\n                 // Populate the result with the processed consumer.\n                 if (hostConsumerCreated) {\n-                    result.addCreated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setCreated(addHypervisorConsumerDTO(result.getCreated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else if (guestIdsUpdated || updatedType) {\n-                    result.addUpdated(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUpdated(addHypervisorConsumerDTO(result.getUpdated(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n                 else {\n-                    result.addUnchanged(this.translator.translate(consumer, HypervisorConsumerDTO.class));\n+                    result.setUnchanged(addHypervisorConsumerDTO(result.getUnchanged(),\n+                        this.translator.translate(consumer, HypervisorConsumerDTO.class)));\n                 }\n             }\n             catch (Exception e) {\n                 log.error(\"Hypervisor checkin failed\", e);\n-                result.addFailed(hypervisorId, e.getMessage());\n+                result.setFailedUpdate(addFailed(result.getFailedUpdate(),\n+                    hypervisorId + \": \" + e.getMessage()));\n             }\n         }\n         log.info(\"Summary of hypervisor checkin by principal \\\"{}\\\": {}\", principal, result);\n         return result;\n     }\n \n-    @ApiOperation(notes = \"Creates or Updates the list of Hypervisor hosts Allows agents such\" +\n-        \" as virt-who to update hosts' information . This is typically used when a host is\" +\n-        \" unable to register to candlepin via subscription manager. In situations where \" +\n-        \"consumers already exist it is probably best not to allow creation of new hypervisor\" +\n-        \" consumers.  Most consumers do not have a hypervisorId attribute, so that should be\" +\n-        \" added manually when necessary by the management environment. Default is true.  \" +\n-        \"If false is specified, hypervisorIds that are not found will result in a failed \" +\n-        \"state of the job.\", value = \"hypervisorUpdateAsync\")\n-    @ApiResponses({ @ApiResponse(code = 202, message = \"\") })\n-    @POST\n-    @Consumes(MediaType.TEXT_PLAIN)\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"/{owner}\")\n+    @Override\n     @UpdateConsumerCheckIn\n     @SuppressWarnings(\"checkstyle:indentation\")\n     public AsyncJobStatusDTO hypervisorUpdateAsync(\n-        String hypervisorJson, @Context Principal principal,\n-        @PathParam(\"owner\") @Verify(value = Owner.class,\n-            require = Access.READ_ONLY,\n-            subResource = SubResource.HYPERVISOR) String ownerKey,\n-        @ApiParam(\"specify whether or not to create missing hypervisors.\" +\n-            \"Default is true.  If false is specified, hypervisorIds that are not found\" +\n-            \"will result in failed entries in the resulting HypervisorCheckInResult\")\n-\n-        @QueryParam(\"create_missing\") @DefaultValue(\"true\") boolean createMissing,\n-        @QueryParam(\"reporter_id\") String reporterId) throws JobException {\n+        @Verify(value = Owner.class, require = Access.READ_ONLY,\n+        subResource = SubResource.HYPERVISOR) String ownerKey,\n+        Boolean createMissing, String reporterId, String hypervisorJson) {\n \n         if (hypervisorJson == null || hypervisorJson.isEmpty()) {\n             log.debug(\"Host/Guest mapping provided during hypervisor update was null.\");\n             throw new BadRequestException(\n                 i18n.tr(\"Host to guest mapping was not provided for hypervisor update.\"));\n         }\n \n+        Principal principal = (this.principalProvider == null ? null : this.principalProvider.get());\n+\n         log.info(\"Hypervisor update by principal: {}\", principal);\n         Owner owner = this.getOwner(ownerKey);\n \n         JobConfig config = HypervisorUpdateJob.createJobConfig()\n             .setOwner(owner)\n             .setData(hypervisorJson)\n-            .setCreateMissing(createMissing)\n+            .setCreateMissing(createMissing.booleanValue())\n             .setPrincipal(principal)\n             .setReporter(reporterId);\n \n-        AsyncJobStatus status = jobManager.queueJob(config);\n-        return translator.translate(status, AsyncJobStatusDTO.class);\n+        try {\n+            AsyncJobStatus status = jobManager.queueJob(config);\n+            return translator.translate(status, AsyncJobStatusDTO.class);\n+        }\n+        catch (JobException e) {\n+            String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n+                config.getJobKey());\n+\n+            throw new IseException(errmsg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUwNzAyMQ=="}, "originalCommit": {"oid": "14a02ad47a8abc7e2687965716848052f574f42f"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzgzODUyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDozMjoyNFrOGTWerg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzowMjoyNVrOGTbOOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk0NDQzMA==", "bodyText": "Same here: add  log.error(errmsg, e) before throwing\nalso, it seems you need to rebase the PR due to the RoleResource one being merged earlier", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r422944430", "createdAt": "2020-05-11T10:32:24Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -341,8 +294,17 @@ public AsyncJobStatusDTO hypervisorHeartbeatUpdate(\n             .setOwner(owner)\n             .setReporterId(reporterId);\n \n-        AsyncJobStatus job = this.jobManager.queueJob(config);\n-        return this.translator.translate(job, AsyncJobStatusDTO.class);\n+        try {\n+            AsyncJobStatus job = this.jobManager.queueJob(config);\n+            return this.translator.translate(job, AsyncJobStatusDTO.class);\n+\n+        }\n+        catch (JobException e) {\n+            String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n+                config.getJobKey());\n+\n+            throw new IseException(errmsg, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "339df96afbbeea3ef997af4fc90fc882fdcea749"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyMjEzNg==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2692#discussion_r423022136", "createdAt": "2020-05-11T13:02:25Z", "author": {"login": "sonalidhome"}, "path": "server/src/main/java/org/candlepin/resource/HypervisorResource.java", "diffHunk": "@@ -341,8 +294,17 @@ public AsyncJobStatusDTO hypervisorHeartbeatUpdate(\n             .setOwner(owner)\n             .setReporterId(reporterId);\n \n-        AsyncJobStatus job = this.jobManager.queueJob(config);\n-        return this.translator.translate(job, AsyncJobStatusDTO.class);\n+        try {\n+            AsyncJobStatus job = this.jobManager.queueJob(config);\n+            return this.translator.translate(job, AsyncJobStatusDTO.class);\n+\n+        }\n+        catch (JobException e) {\n+            String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n+                config.getJobKey());\n+\n+            throw new IseException(errmsg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk0NDQzMA=="}, "originalCommit": {"oid": "339df96afbbeea3ef997af4fc90fc882fdcea749"}, "originalPosition": 264}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4167, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}