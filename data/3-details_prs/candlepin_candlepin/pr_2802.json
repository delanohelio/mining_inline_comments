{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzOTE3ODc2", "number": 2802, "title": "ENT-1848: Port OwnerResource to spec-first", "bodyText": "Added endpoints definitions\nAdded specifications for following DTOs\n\nAbstractCertificateDTO\nConsumptionTypeCountsDTO\nImportRecordDTO\nImportUpstreamConsumerDTO\nOwnerInfoDTO\nSystemPurposeAttributesDTO\nUeberCertificateDTO\nUpstreamConsumerArrayElement\n\n\nCreated/updated translators for DTOs", "createdAt": "2020-09-10T14:19:39Z", "url": "https://github.com/candlepin/candlepin/pull/2802", "merged": true, "mergeCommit": {"oid": "7c800ce0fef2f8982e8e24a5652f39dd5298d7d7"}, "closed": true, "closedAt": "2020-10-07T12:02:51Z", "author": {"login": "sonalidhome"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdIuaDPgFqTQ4NzQ2ODg4MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQGIfuABqjM4NDg2MTM0Mjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDY4ODgx", "url": "https://github.com/candlepin/candlepin/pull/2802#pullrequestreview-487468881", "createdAt": "2020-09-14T07:07:33Z", "commit": {"oid": "124481e63a503a414f4f563dbc2821e11a8a4498"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzowNzozM1rOHRGe_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzo1MDowMFrOHRH3Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY5NDA3Nw==", "bodyText": "Can we use exepect { } here to test exceptions. Something like -\nexpect {\n      consumer.list_owner_consumers(owner['key'])\n}.to raise_error(RestClient::Forbidden)", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r487694077", "createdAt": "2020-09-14T07:07:33Z", "author": {"login": "wolfdale"}, "path": "server/spec/owner_resource_spec.rb", "diffHunk": "@@ -30,6 +30,18 @@\n     user1.list_owner_consumers(owner1['key']).length.should == 1\n   end\n \n+  it 'consumer cannot list other consumers for an owner' do\n+    owner = create_owner random_string('test_owner')\n+    username = random_string(\"test-user\")\n+    consumer_name = random_string(\"test-consumer\")\n+    user = user_client(owner, username)\n+    consumer = consumer_client(user, consumer_name)\n+\n+    lambda do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "124481e63a503a414f4f563dbc2821e11a8a4498"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY5NDExNg==", "bodyText": "Moved some of the access related tests from Junit to Rspec.\nJunits did not invoke the VerifyAuthorizationFilter\nwhen the endpoint is ported into OpenAPI.\n\nHaving some doubts about these changes of converting Junits to functional Spec tests. Since we are making changes with Principle which is necessary to port resource class to OpenAPI, not sure if we are tampering with older functionality unknowingly.\nAny thoughts ? @Ceiu @nikosmoum @Januson", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r487694116", "createdAt": "2020-09-14T07:07:38Z", "author": {"login": "wolfdale"}, "path": "server/spec/owner_resource_spec.rb", "diffHunk": "@@ -690,6 +702,59 @@\n     # and only include one instance of each unique value.\n     res[\"systemPurposeAttributes\"][\"roles\"].length.should == 1\n   end\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "124481e63a503a414f4f563dbc2821e11a8a4498"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcwODY2Nw==", "bodyText": "You might consider changing the description to Conflict occurred while deleting an owner", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r487708667", "createdAt": "2020-09-14T07:36:26Z", "author": {"login": "wolfdale"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2192,6 +2192,309 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /owners:\n+    get:\n+      description: Retrieves a list of owners\n+      tags:\n+        - Owner\n+      operationId: listOwners\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: key\n+          in: query\n+          description: The owner keys\n+          required: false\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: A list of owners\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/OwnerDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an owner\n+      tags:\n+        - Owner\n+      operationId: createOwner\n+      security: []\n+      requestBody:\n+        description: Owner to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/OwnerDTO'\n+      responses:\n+        200:\n+          description: Owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Invalid inputs, Owner cannot be created.\n+            Reasons could be, invalid key\n+            or the default service level is specified\n+            or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Invalid inputs, Owner cannot be created.\n+                  Reasons could be, invalid key\n+                  or the default service level is specified\n+                  or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}:\n+    get:\n+      description: Retrieves a single owner\n+      tags:\n+        - Owner\n+      operationId: getOwner\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Owner successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: |\n+        Updates an owner.\n+        Note: To un-set the defaultServiceLevel for an owner, submit an empty string.\n+      tags:\n+        - Owner\n+      operationId: updateOwner\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Owner to be updated\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/OwnerDTO'\n+      responses:\n+        200:\n+          description: Owner successfully updated\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Invalid inputs, Owner cannot be updated.\n+            Reasons could be, invalid key\n+            or the default service level is specified\n+            or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Invalid inputs, Owner cannot be updated.\n+                  Reasons could be, invalid key\n+                  or the default service level is specified\n+                  or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes an owner\n+      tags:\n+        - Owner\n+      operationId: deleteOwner\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: revoke\n+          in: query\n+          description: Boolean value to revoke an owner\n+          schema:\n+            type: boolean\n+            default: true\n+        - name: force\n+          in: query\n+          description: Boolean value to forcefully delete an owner. This is not in use.\n+          schema:\n+            type: boolean\n+            default: false\n+      security: []\n+      responses:\n+        200:\n+          description: Owner successfully deleted\n+        409:\n+          description: Occured conflict while owner deletion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "124481e63a503a414f4f563dbc2821e11a8a4498"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcwOTY2OQ==", "bodyText": "Parameters descriptions are incorrect at multiple places in this endpoint.", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r487709669", "createdAt": "2020-09-14T07:38:22Z", "author": {"login": "wolfdale"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2432,55 +2735,1142 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products:\n+  /owners/{owner_key}/consumers:\n     get:\n-      description: Retrieves a list of products by owner\n+      description: Retrieves a list of Consumers for the Owner\n       tags:\n-        - Owner Product\n-      operationId: getProductsByOwner\n-      security: []\n+        - Owner\n+        - Consumer\n+      operationId: listConsumers\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       parameters:\n         - name: owner_key\n           in: path\n-          description: Owner key\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: product\n+        - name: username\n           in: query\n-          description: List of product ID's\n-          required: true\n+          description: The username of the consumer\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The consumer type\n           schema:\n             type: array\n+            uniqueItems: true\n             items:\n               type: string\n-      responses:\n-        200:\n-          description: Retrieves a list of products by owner\n-          content:\n-            application/json:\n-              schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ProductDTO'\n-        404:\n-          description: Owner key could not be found\n-          content:\n-            application/json:\n-              schema:\n-                $ref: '#/components/schemas/ExceptionMessage'\n-              example:\n-                displayMessage: Owner key could not be found\n-                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        default:\n-          $ref: '#/components/responses/default'\n-\n-    post:\n-      description: Creates a product for an owner\n-      tags:\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: sku\n+          in: query\n+          description: The list of skus\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers/count:\n+    get:\n+      description: Retrieves a count of consumers for the owner\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: countConsumers\n+      parameters:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "124481e63a503a414f4f563dbc2821e11a8a4498"}, "originalPosition": 457}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxMTkwNg==", "bodyText": "Please add parameter description here.", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r487711906", "createdAt": "2020-09-14T07:41:03Z", "author": {"login": "wolfdale"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2432,55 +2735,1142 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products:\n+  /owners/{owner_key}/consumers:\n     get:\n-      description: Retrieves a list of products by owner\n+      description: Retrieves a list of Consumers for the Owner\n       tags:\n-        - Owner Product\n-      operationId: getProductsByOwner\n-      security: []\n+        - Owner\n+        - Consumer\n+      operationId: listConsumers\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       parameters:\n         - name: owner_key\n           in: path\n-          description: Owner key\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: product\n+        - name: username\n           in: query\n-          description: List of product ID's\n-          required: true\n+          description: The username of the consumer\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The consumer type\n           schema:\n             type: array\n+            uniqueItems: true\n             items:\n               type: string\n-      responses:\n-        200:\n-          description: Retrieves a list of products by owner\n-          content:\n-            application/json:\n-              schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ProductDTO'\n-        404:\n-          description: Owner key could not be found\n-          content:\n-            application/json:\n-              schema:\n-                $ref: '#/components/schemas/ExceptionMessage'\n-              example:\n-                displayMessage: Owner key could not be found\n-                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        default:\n-          $ref: '#/components/responses/default'\n-\n-    post:\n-      description: Creates a product for an owner\n-      tags:\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: sku\n+          in: query\n+          description: The list of skus\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers/count:\n+    get:\n+      description: Retrieves a count of consumers for the owner\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: countConsumers\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: sku\n+          in: query\n+          description: sku\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: subscription_id\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: contract\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumer counts successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: integer\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers_system_purpose:\n+    get:\n+      description: Retrieves an aggregate of the system purpose settings of the owner's consumers\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: getConsumersSyspurpose\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description:  The system purpose settings sucessfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SystemPurposeAttributesDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner key could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/entitlements:\n+    get:\n+      description: |\n+        Retrieves the list of entitlements for an owner.\n+        This endpoint supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: ownerEntitlements\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: matches\n+          in: query\n+          description: Matches", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "124481e63a503a414f4f563dbc2821e11a8a4498"}, "originalPosition": 589}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxNDM2Mw==", "bodyText": "Please change the response code to 204 instead of 200.", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r487714363", "createdAt": "2020-09-14T07:45:42Z", "author": {"login": "wolfdale"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2432,55 +2735,1142 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products:\n+  /owners/{owner_key}/consumers:\n     get:\n-      description: Retrieves a list of products by owner\n+      description: Retrieves a list of Consumers for the Owner\n       tags:\n-        - Owner Product\n-      operationId: getProductsByOwner\n-      security: []\n+        - Owner\n+        - Consumer\n+      operationId: listConsumers\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       parameters:\n         - name: owner_key\n           in: path\n-          description: Owner key\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: product\n+        - name: username\n           in: query\n-          description: List of product ID's\n-          required: true\n+          description: The username of the consumer\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The consumer type\n           schema:\n             type: array\n+            uniqueItems: true\n             items:\n               type: string\n-      responses:\n-        200:\n-          description: Retrieves a list of products by owner\n-          content:\n-            application/json:\n-              schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ProductDTO'\n-        404:\n-          description: Owner key could not be found\n-          content:\n-            application/json:\n-              schema:\n-                $ref: '#/components/schemas/ExceptionMessage'\n-              example:\n-                displayMessage: Owner key could not be found\n-                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        default:\n-          $ref: '#/components/responses/default'\n-\n-    post:\n-      description: Creates a product for an owner\n-      tags:\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: sku\n+          in: query\n+          description: The list of skus\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers/count:\n+    get:\n+      description: Retrieves a count of consumers for the owner\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: countConsumers\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: sku\n+          in: query\n+          description: sku\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: subscription_id\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: contract\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumer counts successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: integer\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers_system_purpose:\n+    get:\n+      description: Retrieves an aggregate of the system purpose settings of the owner's consumers\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: getConsumersSyspurpose\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description:  The system purpose settings sucessfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SystemPurposeAttributesDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner key could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/entitlements:\n+    get:\n+      description: |\n+        Retrieves the list of entitlements for an owner.\n+        This endpoint supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: ownerEntitlements\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: matches\n+          in: query\n+          description: Matches\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: The pair of attribute values\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      security: []\n+      responses:\n+        200:\n+          description: Entitlement details successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Starts an asynchronous healing for the given Owner.\n+        At the end of the process the idea is that all of the consumers\n+        in the owned by the owner will be up to date.\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: healEntire\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Successfully operation\n+          content:\n+            application/json:\n+              schema:\n+               $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/environments:\n+    get:\n+      description: Retrieves a list of environment for an owner\n+      tags:\n+        - Owner Environment\n+      operationId: listEnvironments\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: name\n+          in: query\n+          description: The name of the environment\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Activation keys successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an environment for the owner\n+      tags:\n+        - Owner Environment\n+      operationId: createEnv\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Environment to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/EnvironmentDTO'\n+      responses:\n+        200:\n+          description: Environment for the owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/hypervisors:\n+    get:\n+      description: Retrieves a list of hypervisors for an owner\n+      tags:\n+        - Owner\n+        - Hypervisors\n+      operationId: getHypervisors\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The list of hypervisor Ids\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: A list of hypervisors successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports:\n+    get:\n+      description: Retrieves a list of import records for an owner\n+      tags:\n+        - Owner Import\n+      operationId: getImports\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Import records successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Imports a manifest zip file for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+      operationId: importManifest\n+      security: []\n+      requestBody:\n+        description: A manifest file to be imported\n+        required: true\n+        content:\n+          multipart/form-data:\n+            schema:\n+              properties:\n+                input:\n+                  type: string\n+                  format: binary\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: force\n+          in: query\n+          description: This is used to override the conflicts\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Manifest successfully imported\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: |\n+            Bad request error. Reasons could be,\n+            Owner key is null\n+            or empty or Unknown conflict to force\n+            or format error of the data in a manifest\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Bad request error. Reasons could be,\n+                  Owner key is null\n+                  or empty or Unknown conflict to force\n+                  or format error of the data in a manifest\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        500:\n+          description: |\n+            Internal server error. Reasons could be,\n+            Reading error during importing\n+            or problem with archive\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Internal server error. Reasons could be,\n+                  Reading error during importing\n+                  or problem with archive\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: |\n+        Removes Imports for an Owner. Cleans out all imported subscriptions\n+        and triggers a background refresh pools. Link to an upstream distributor is\n+        removed for the owner, so they can import from another distributor. Other\n+        owners can also now import the manifests originally used in this owner. This\n+        call does not differentiate between any specific import, it just destroys all\n+        subscriptions with an upstream pool ID, essentially anything from an import.\n+        Custom subscriptions will be left alone. Imports do carry rules and product\n+        information which is global to the candlepin server. This import data is *not*\n+        undone, we assume that updates to this data can be safely kept.\n+      tags:\n+        - Owner Import\n+      operationId: undoImports\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: [ ]\n+      responses:\n+        200:\n+          description: Imports for an Owner successfully removed\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports/async:\n+    post:\n+      description: |\n+        Initiates an asynchronous manifest import for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+        - Async\n+      operationId: importManifestAsync\n+      security: []\n+      requestBody:\n+        description: A manifest file to be imported\n+        required: true\n+        content:\n+          multipart/form-data:\n+            schema:\n+              properties:\n+                input:\n+                  type: string\n+                  format: binary\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: force\n+          in: query\n+          description: This is used to override the conflicts\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Manifest successfully imported\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        500:\n+          description: |\n+            Internal server error. Reasons could be,\n+            An unexpected exception occurred while scheduling job\n+            or error reading export archive\n+            or error storing uploaded archive for asynchronous processing\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Internal server error. Reasons could be,\n+                  An unexpected exception occurred while scheduling job\n+                  or error reading export archive\n+                  or error storing uploaded archive for asynchronous processing\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/info:\n+    get:\n+      description: Retrieves the Owner Info for an Owner\n+      tags:\n+        - Owner\n+      operationId: getOwnerInfo\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Owner info successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerInfoDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/log:\n+    put:\n+      description: Sets the log level for an owner\n+      tags:\n+        - Owner log\n+      operationId: setLogLevel\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: level\n+          in: query\n+          description: The log level\n+          required: true\n+          schema:\n+            type: string\n+            default: DEBUG\n+            enum:\n+              - ALL\n+              - TRACE\n+              - DEBUG\n+              - INFO\n+              - WARN\n+              - ERROR\n+              - OFF\n+      responses:\n+        200:\n+          description: Log level successfully set\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Provided level is not a valid log level\n+            or owner key is not provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Provided level is not a valid log level\n+                  or owner key is not provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Remove the log level of an owner\n+      tags:\n+        - Owner log\n+      operationId: deleteLogLevel\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The owner key\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "124481e63a503a414f4f563dbc2821e11a8a4498"}, "originalPosition": 1142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxNjcwMw==", "bodyText": "Please remove ? special character from description here & add meaningful description.", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r487716703", "createdAt": "2020-09-14T07:50:00Z", "author": {"login": "wolfdale"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2691,347 +4315,435 @@ paths:\n           required: true\n           schema:\n             type: string\n-        - name: lazy_regen\n-          in: query\n-          description: Lazy regeneration\n-          required: true\n-          schema:\n-            type: boolean\n-            default: true\n+      requestBody:\n+        description: Content map\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: object\n+              additionalProperties:\n+                type: boolean\n       responses:\n         200:\n-          description: A successful operation\n+          description: Content added to a product\n           content:\n             application/json:\n               schema:\n-                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+                $ref: '#/components/schemas/ProductDTO'\n         400:\n-          description: Unable to fulfill refresh pools request\n+          description: Invalid inputs, unable to add content\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Unable to fulfill refresh pools request\n+                displayMessage: Invalid inputs, unable to add content\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: Product is locked. Unable to add content\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Product is locked. Unable to add content\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Owner key or product ID could not be found\n+          description: Owner key could not be found\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Owner key or product ID could not be found\n+                displayMessage: Owner key could not be found\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products/{product_id}/certificate:\n-    get:\n-      description: Retrieves a product certificate for an owner\n+    delete:\n+      description: Removes content from a product in batch\n       tags:\n         - Owner Product\n-      operationId: getProductCertificateByOwner\n+      operationId: removeBatchContent\n       security: []\n       parameters:\n-        - name: owner_key\n-          in: path\n+        - in: path\n+          name: owner_key\n           description: Owner key\n           required: true\n           schema:\n             type: string\n-        - name: product_id\n-          in: path\n+        - in: path\n+          name: product_id\n           description: Product ID\n           required: true\n           schema:\n             type: string\n+      requestBody:\n+        description: Content IDs\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                type: string\n       responses:\n         200:\n-          description: Retrieves a product certificate for an owner\n+          description: Content removed from a product\n           content:\n             application/json:\n               schema:\n-                $ref: '#/components/schemas/ProductCertificateDTO'\n+                $ref: '#/components/schemas/ProductDTO'\n         400:\n-          description: Only numeric product IDs are allowed\n+          description: Invalid inputs, unable to remove content\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Only numeric product IDs are allowed\n+                displayMessage: Invalid inputs, unable to remove content\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: Product is locked. Unable to remove content\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Product is locked. Unable to remove content\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Owner key or product ID could not be found\n+          description: Owner key could not be found\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Owner key or product ID could not be found\n+                displayMessage: Owner key could not be found\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products/{product_id}/content/{content_id}:\n-    post:\n-      description: Adds content to a product\n+  /owners/{owner_key}/servicelevels:\n+    get:\n+      description: Retrieves a list of support levels for an owner\n       tags:\n-        - Owner Product\n-      operationId: addContent\n+        - Owner\n+      operationId: ownerServiceLevels\n       security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n       parameters:\n         - name: owner_key\n           in: path\n-          description: Owner key\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: product_id\n-          in: path\n-          description: Product ID\n-          required: true\n+        - name: exempt\n+          in: query\n+          description: exempt\n           schema:\n             type: string\n-        - name: content_id\n+            default: false\n+      responses:\n+        200:\n+          description:  A list of support levels for an owner\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  type: string\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner key could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/subscriptions:\n+    get:\n+      description: Retrieves a list of subscriptions for an owner\n+      tags:\n+        - Owner Subscription\n+      operationId: getOwnerSubscriptions\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n           in: path\n-          description: Content ID\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: enabled\n-          in: path\n-          description: Content enabled flag\n-          required: true\n-          schema:\n-            type: boolean\n       responses:\n         200:\n-          description: Content added to a product\n+          description:  A list of subscriptions for an owner\n           content:\n             application/json:\n               schema:\n-                $ref: '#/components/schemas/ProductDTO'\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/SubscriptionDTO'\n         400:\n-          description: Invalid inputs, unable to add content\n+          description: Owner key is null or empty\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Invalid inputs, unable to add content\n+                displayMessage: Owner key is null or empty\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        403:\n-          description: Product is locked. Unable to add content\n+        404:\n+          description: Owner key could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: |\n+        Tickle an owner to have all of their entitlement pools synced with their\n+        subscriptions. This method (and the one below may not be entirely RESTful,\n+        as the updated data is not supplied as an argument.\n+        This API call is only relevant in a top level hosted deployment where\n+        subscriptions and products are sourced from adapters. Calling this in\n+        an on-site deployment is just a no-op.\n+      tags:\n+        - Owner Subscription\n+      operationId: refreshPools\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: auto_create_owner\n+          in: query\n+          description: Auto create owner?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "124481e63a503a414f4f563dbc2821e11a8a4498"}, "originalPosition": 2157}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "124481e63a503a414f4f563dbc2821e11a8a4498", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/124481e63a503a414f4f563dbc2821e11a8a4498", "committedDate": "2020-09-10T14:15:13Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Moved some of the access related tests from Junit to Rspec.\n   Junits did not invoke the VerifyAuthorizationFilter\n   when endpoint is ported into OpenAPI."}, "afterCommit": {"oid": "2291bcef60feb15433dc118fe8e428f99b507bac", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/2291bcef60feb15433dc118fe8e428f99b507bac", "committedDate": "2020-09-14T09:49:08Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Moved some of the access related tests from Junit to Rspec.\n   Junits did not invoke the VerifyAuthorizationFilter\n   when endpoint is ported into OpenAPI."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2291bcef60feb15433dc118fe8e428f99b507bac", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/2291bcef60feb15433dc118fe8e428f99b507bac", "committedDate": "2020-09-14T09:49:08Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Moved some of the access related tests from Junit to Rspec.\n   Junits did not invoke the VerifyAuthorizationFilter\n   when endpoint is ported into OpenAPI."}, "afterCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/f41bd9062eac655526cd4d7a45db7f7c7fd4188e", "committedDate": "2020-09-24T08:05:48Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTk2OTY1", "url": "https://github.com/candlepin/candlepin/pull/2802#pullrequestreview-495596965", "createdAt": "2020-09-24T13:53:23Z", "commit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzo1MzoyM1rOHXcAGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzo1MzoyM1rOHXcAGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzODA3NQ==", "bodyText": "Let's use this as an opportunity to rename OwnerInfo to not that. OwnerStatistics would be a better fit here", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494338075", "createdAt": "2020-09-24T13:53:23Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/OwnerInfoDTOTranslator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.ObjectTranslator;\n+import org.candlepin.model.OwnerInfo;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * The OwnerInfoDTOTranslator provides translation from\n+ * OwnerInfo model objects to OwnerInfoDTO\n+ */\n+public class OwnerInfoDTOTranslator implements ObjectTranslator<OwnerInfo, OwnerInfoDTO> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTk4NjU1", "url": "https://github.com/candlepin/candlepin/pull/2802#pullrequestreview-495598655", "createdAt": "2020-09-24T13:55:03Z", "commit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzo1NTowM1rOHXcFFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDowNzo1OFrOHXcuLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzOTM0OA==", "bodyText": "Also, so it's clear: OwnerInfo as it exists today, is not a model object. It's a DTO that happens to live in the model package. I'm not sure if there is a need to have a separate DTO layer for what is already a DTO; so we may be able to eliminate the translator entirely. Perhaps this could be something discussed with the whole team.", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494339348", "createdAt": "2020-09-24T13:55:03Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/OwnerInfoDTOTranslator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.ObjectTranslator;\n+import org.candlepin.model.OwnerInfo;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * The OwnerInfoDTOTranslator provides translation from\n+ * OwnerInfo model objects to OwnerInfoDTO\n+ */\n+public class OwnerInfoDTOTranslator implements ObjectTranslator<OwnerInfo, OwnerInfoDTO> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzODA3NQ=="}, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0MDI5Mw==", "bodyText": "You'll probably need to add updated/created here as well, if we're going to be not using the certificate translator hierarchy.", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494340293", "createdAt": "2020-09-24T13:56:10Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/UeberCertificateTranslator.java", "diffHunk": "@@ -58,14 +59,26 @@ public UeberCertificateDTO populate(UeberCertificate source, UeberCertificateDTO\n     public UeberCertificateDTO populate(ModelTranslator translator, UeberCertificate source,\n         UeberCertificateDTO dest) {\n \n-        dest = super.populate(translator, source, dest);\n+        if (source == null) {\n+            throw new IllegalArgumentException(\"source is null\");\n+        }\n+\n+        if (dest == null) {\n+            throw new IllegalArgumentException(\"dest is null\");\n+        }\n+\n+        dest.id(source.getId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0MzUxMQ==", "bodyText": "We might not need this anymore with the removal of so many of the inline annotations.", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494343511", "createdAt": "2020-09-24T13:59:40Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/OwnerResource.java", "diffHunk": "@@ -1498,86 +1248,48 @@ public void deleteLogLevel(@PathParam(\"owner_key\") String ownerKey) {\n         return translator.translateQuery(query, ConsumerDTOArrayElement.class);\n     }\n \n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"{owner_key}/consumers/count\")\n     @SuppressWarnings(\"checkstyle:indentation\")\n-    @ApiOperation(notes = \"Retrieve a count of Consumers for the Owner\", value = \"consumers count\")\n-    @ApiResponses({\n-        @ApiResponse(code = 404, message = \"Owner not found\"),\n-        @ApiResponse(code = 400, message = \"Invalid request\")\n-    })\n-    public int countConsumers(\n-        @PathParam(\"owner_key\")\n+    @Override\n+    public Integer countConsumers(\n         @Verify(value = Owner.class, subResource = SubResource.CONSUMERS) String ownerKey,\n-        @QueryParam(\"type\") Set<String> typeLabels,\n-        @QueryParam(\"sku\") List<String> skus,\n-        @QueryParam(\"subscription_id\") List<String> subscriptionIds,\n-        @QueryParam(\"contract\") List<String> contracts) {\n+        Set<String> typeLabels,\n+        List<String> skus,\n+        List<String> subscriptionIds,\n+        List<String> contracts) {\n \n         this.findOwnerByKey(ownerKey);\n         consumerTypeValidator.findAndValidateTypeLabels(typeLabels);\n \n         return consumerCurator.countConsumers(ownerKey, typeLabels, skus, subscriptionIds, contracts);\n     }\n \n-    /**\n-     * Retrieves a list of Pools for an Owner\n-     *\n-     * @param ownerKey id of the owner whose entitlement pools are sought.\n-     * @param matches Find pools matching the given pattern in a variety of fields.\n-     * * and ? wildcards are supported.\n-     * @return a list of Pool objects\n-     * @httpcode 400\n-     * @httpcode 404\n-     * @httpcode 200\n-     */\n+    @Override\n     @Transactional\n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"{owner_key}/pools\")\n     @SuppressWarnings(\"checkstyle:indentation\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 650}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0NTg1OQ==", "bodyText": "I'd have to go back and look, but did we add a DTO for Subscription? Subscription is already a DTO.\nAdditionally, rather than converting twice, since we only use fabricateSubscriptionFromPool in the resources to convert a pool to a subscription, we could/should just write a translator that explicitly handles the translation from Pool to Subscription[DTO] and use that instead.", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494345859", "createdAt": "2020-09-24T14:02:35Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/OwnerResource.java", "diffHunk": "@@ -1655,125 +1367,28 @@ public int countConsumers(\n         return poolDTOs;\n     }\n \n-    /**\n-     * Retrieves a list of Subscriptions for an Owner\n-     *\n-     * @return a list of Subscription objects\n-     * @httpcode 404\n-     * @httpcode 200\n-     */\n-    @GET\n-    @Consumes(MediaType.APPLICATION_JSON)\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"{owner_key}/subscriptions\")\n-    @ApiOperation(notes = \"Retrieves a list of Subscriptions for an Owner\", value = \"List Subscriptions\")\n-    @ApiResponses({ @ApiResponse(code = 404, message = \"Owner not found\") })\n-    public List<Subscription> getSubscriptions(@PathParam(\"owner_key\") String ownerKey) {\n+    @Override\n+    public List<SubscriptionDTO> getOwnerSubscriptions(String ownerKey) {\n         Owner owner = this.findOwnerByKey(ownerKey);\n \n-        List<Subscription> subscriptions = new LinkedList<>();\n+        List<SubscriptionDTO> subscriptions = new LinkedList<>();\n \n         for (Pool pool : this.poolManager.listPoolsByOwner(owner).list()) {\n-            SourceSubscription srcsub = pool.getSourceSubscription();\n \n+            SourceSubscription srcsub = pool.getSourceSubscription();\n             if (srcsub != null && \"master\".equalsIgnoreCase(srcsub.getSubscriptionSubKey())) {\n-                subscriptions.add(this.poolManager.fabricateSubscriptionFromPool(pool));\n+                subscriptions.add(this.translator.translate(\n+                    this.poolManager.fabricateSubscriptionFromPool(pool),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 781}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0ODgwMg==", "bodyText": "Our mappers already handle converting exceptions to the generic \"internal server error\" if they're not caught. If we don't have explicit error handling to perform, or some other behavior to improve the output for clients. Additionally, the declaration and translation of the job can only happen if the queuing of the job succeeds, so there is no reason to declare the job or perform translation outside the try/catch block.\nIs there some behavior change with OpenAPI that I'm not aware of? What's the intent here?", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494348802", "createdAt": "2020-09-24T14:06:23Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/OwnerResource.java", "diffHunk": "@@ -1794,30 +1409,23 @@ public AsyncJobStatusDTO refreshPools(\n             .setOwner(owner)\n             .setLazyRegeneration(lazyRegen);\n \n-        AsyncJobStatus job = this.jobManager.queueJob(config);\n+        AsyncJobStatus job;\n+\n+        try {\n+            job = this.jobManager.queueJob(config);\n+        }\n+        catch (JobException e) {\n+            String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n+                config.getJobKey());\n+            log.error(errmsg, e);\n+            throw new IseException(errmsg, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 898}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0OTYyMQ==", "bodyText": "Same questions here", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494349621", "createdAt": "2020-09-24T14:07:36Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/OwnerResource.java", "diffHunk": "@@ -2002,42 +1559,28 @@ public AsyncJobStatusDTO undoImports(\n         JobConfig config = UndoImportsJob.createJobConfig()\n             .setOwner(owner);\n \n-        AsyncJobStatus job = this.jobManager.queueJob(config);\n+        AsyncJobStatus job;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 1009}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0OTg3MA==", "bodyText": "Same questions here", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494349870", "createdAt": "2020-09-24T14:07:58Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/OwnerResource.java", "diffHunk": "@@ -2121,7 +1637,17 @@ public AsyncJobStatusDTO importManifestAsync(\n             JobConfig config =  manifestManager.importManifestAsync(owner, fileData.getData(),\n                 fileData.getUploadedFilename(), overrides);\n \n-            AsyncJobStatus job = this.jobManager.queueJob(config);\n+            AsyncJobStatus job;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 1111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NzgxNTM2", "url": "https://github.com/candlepin/candlepin/pull/2802#pullrequestreview-494781536", "createdAt": "2020-09-23T15:24:37Z", "commit": {"oid": "2291bcef60feb15433dc118fe8e428f99b507bac"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNToyNDozN1rOHW0D1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowMjo1NlrOHXfVAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4MzY3MA==", "bodyText": "created/updated fields also need to be translated here", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r493683670", "createdAt": "2020-09-23T15:24:37Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/UeberCertificateTranslator.java", "diffHunk": "@@ -58,14 +59,26 @@ public UeberCertificateDTO populate(UeberCertificate source, UeberCertificateDTO\n     public UeberCertificateDTO populate(ModelTranslator translator, UeberCertificate source,\n         UeberCertificateDTO dest) {\n \n-        dest = super.populate(translator, source, dest);\n+        if (source == null) {\n+            throw new IllegalArgumentException(\"source is null\");\n+        }\n+\n+        if (dest == null) {\n+            throw new IllegalArgumentException(\"dest is null\");\n+        }\n+\n+        dest.id(source.getId())\n+            .key(source.getKey())\n+            .cert(source.getCert());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2291bcef60feb15433dc118fe8e428f99b507bac"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NjUzNg==", "bodyText": "It's just one key, so we can remove the s in the end", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494266536", "createdAt": "2020-09-24T12:16:51Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2524,6 +2524,309 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /owners:\n+    get:\n+      description: Retrieves a list of owners\n+      tags:\n+        - Owner\n+      operationId: listOwners\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: key\n+          in: query\n+          description: The owner keys", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NzI2Ng==", "bodyText": "Let's improve this one by adding ..that match the key provided, or all owners if no key was provided", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494267266", "createdAt": "2020-09-24T12:17:58Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2524,6 +2524,309 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /owners:\n+    get:\n+      description: Retrieves a list of owners", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5MzU2OA==", "bodyText": "We should also add a 404 response here, in case the owner is not found based on the given key", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494293568", "createdAt": "2020-09-24T12:55:28Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2524,6 +2524,309 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /owners:\n+    get:\n+      description: Retrieves a list of owners\n+      tags:\n+        - Owner\n+      operationId: listOwners\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: key\n+          in: query\n+          description: The owner keys\n+          required: false\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: A list of owners\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/OwnerDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an owner\n+      tags:\n+        - Owner\n+      operationId: createOwner\n+      security: []\n+      requestBody:\n+        description: Owner to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/OwnerDTO'\n+      responses:\n+        200:\n+          description: Owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Invalid inputs, Owner cannot be created.\n+            Reasons could be, invalid key\n+            or the default service level is specified\n+            or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Invalid inputs, Owner cannot be created.\n+                  Reasons could be, invalid key\n+                  or the default service level is specified\n+                  or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}:\n+    get:\n+      description: Retrieves a single owner\n+      tags:\n+        - Owner\n+      operationId: getOwner\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Owner successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: |\n+        Updates an owner.\n+        Note: To un-set the defaultServiceLevel for an owner, submit an empty string.\n+      tags:\n+        - Owner\n+      operationId: updateOwner\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Owner to be updated\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/OwnerDTO'\n+      responses:\n+        200:\n+          description: Owner successfully updated\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5NDg2NQ==", "bodyText": "This line should be removed. The default service level can be specified when updating an owner (it can't only during owner creation)", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494294865", "createdAt": "2020-09-24T12:57:20Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2524,6 +2524,309 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /owners:\n+    get:\n+      description: Retrieves a list of owners\n+      tags:\n+        - Owner\n+      operationId: listOwners\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: key\n+          in: query\n+          description: The owner keys\n+          required: false\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: A list of owners\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/OwnerDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an owner\n+      tags:\n+        - Owner\n+      operationId: createOwner\n+      security: []\n+      requestBody:\n+        description: Owner to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/OwnerDTO'\n+      responses:\n+        200:\n+          description: Owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Invalid inputs, Owner cannot be created.\n+            Reasons could be, invalid key\n+            or the default service level is specified\n+            or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Invalid inputs, Owner cannot be created.\n+                  Reasons could be, invalid key\n+                  or the default service level is specified\n+                  or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}:\n+    get:\n+      description: Retrieves a single owner\n+      tags:\n+        - Owner\n+      operationId: getOwner\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Owner successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: |\n+        Updates an owner.\n+        Note: To un-set the defaultServiceLevel for an owner, submit an empty string.\n+      tags:\n+        - Owner\n+      operationId: updateOwner\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Owner to be updated\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/OwnerDTO'\n+      responses:\n+        200:\n+          description: Owner successfully updated\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Invalid inputs, Owner cannot be updated.\n+            Reasons could be, invalid key\n+            or the default service level is specified\n+            or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Invalid inputs, Owner cannot be updated.\n+                  Reasons could be, invalid key\n+                  or the default service level is specified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5NDk5NA==", "bodyText": "Same here, remove the line", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494294994", "createdAt": "2020-09-24T12:57:33Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2524,6 +2524,309 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /owners:\n+    get:\n+      description: Retrieves a list of owners\n+      tags:\n+        - Owner\n+      operationId: listOwners\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: key\n+          in: query\n+          description: The owner keys\n+          required: false\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: A list of owners\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/OwnerDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an owner\n+      tags:\n+        - Owner\n+      operationId: createOwner\n+      security: []\n+      requestBody:\n+        description: Owner to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/OwnerDTO'\n+      responses:\n+        200:\n+          description: Owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Invalid inputs, Owner cannot be created.\n+            Reasons could be, invalid key\n+            or the default service level is specified\n+            or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Invalid inputs, Owner cannot be created.\n+                  Reasons could be, invalid key\n+                  or the default service level is specified\n+                  or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}:\n+    get:\n+      description: Retrieves a single owner\n+      tags:\n+        - Owner\n+      operationId: getOwner\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Owner successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: |\n+        Updates an owner.\n+        Note: To un-set the defaultServiceLevel for an owner, submit an empty string.\n+      tags:\n+        - Owner\n+      operationId: updateOwner\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Owner to be updated\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/OwnerDTO'\n+      responses:\n+        200:\n+          description: Owner successfully updated\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Invalid inputs, Owner cannot be updated.\n+            Reasons could be, invalid key\n+            or the default service level is specified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5Nzg4Ng==", "bodyText": "let's add a 404 response here in case no owner was found for the provided key", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494297886", "createdAt": "2020-09-24T13:02:01Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2524,6 +2524,309 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /owners:\n+    get:\n+      description: Retrieves a list of owners\n+      tags:\n+        - Owner\n+      operationId: listOwners\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: key\n+          in: query\n+          description: The owner keys\n+          required: false\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: A list of owners\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/OwnerDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an owner\n+      tags:\n+        - Owner\n+      operationId: createOwner\n+      security: []\n+      requestBody:\n+        description: Owner to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/OwnerDTO'\n+      responses:\n+        200:\n+          description: Owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Invalid inputs, Owner cannot be created.\n+            Reasons could be, invalid key\n+            or the default service level is specified\n+            or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Invalid inputs, Owner cannot be created.\n+                  Reasons could be, invalid key\n+                  or the default service level is specified\n+                  or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}:\n+    get:\n+      description: Retrieves a single owner\n+      tags:\n+        - Owner\n+      operationId: getOwner\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Owner successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: |\n+        Updates an owner.\n+        Note: To un-set the defaultServiceLevel for an owner, submit an empty string.\n+      tags:\n+        - Owner\n+      operationId: updateOwner\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Owner to be updated\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/OwnerDTO'\n+      responses:\n+        200:\n+          description: Owner successfully updated\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Invalid inputs, Owner cannot be updated.\n+            Reasons could be, invalid key\n+            or the default service level is specified\n+            or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Invalid inputs, Owner cannot be updated.\n+                  Reasons could be, invalid key\n+                  or the default service level is specified\n+                  or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes an owner\n+      tags:\n+        - Owner\n+      operationId: deleteOwner\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: revoke\n+          in: query\n+          description: Boolean value to revoke an owner\n+          schema:\n+            type: boolean\n+            default: true\n+        - name: force\n+          in: query\n+          description: Boolean value to forcefully delete an owner. This is not in use.\n+          schema:\n+            type: boolean\n+            default: false\n+      security: []\n+      responses:\n+        200:\n+          description: Owner successfully deleted\n+        409:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyNTgyNg==", "bodyText": "This is an async operation, so we're returning a job status. Let's describe this as The Owner is being healed", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494325826", "createdAt": "2020-09-24T13:41:02Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2764,55 +3067,1142 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products:\n+  /owners/{owner_key}/consumers:\n     get:\n-      description: Retrieves a list of products by owner\n+      description: Retrieves a list of Consumers for the Owner\n       tags:\n-        - Owner Product\n-      operationId: getProductsByOwner\n-      security: []\n+        - Owner\n+        - Consumer\n+      operationId: listConsumers\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       parameters:\n         - name: owner_key\n           in: path\n-          description: Owner key\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: product\n+        - name: username\n           in: query\n-          description: List of product ID's\n-          required: true\n+          description: The username of the consumer\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The consumer type\n           schema:\n             type: array\n+            uniqueItems: true\n             items:\n               type: string\n-      responses:\n-        200:\n-          description: Retrieves a list of products by owner\n-          content:\n-            application/json:\n-              schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ProductDTO'\n-        404:\n-          description: Owner key could not be found\n-          content:\n-            application/json:\n-              schema:\n-                $ref: '#/components/schemas/ExceptionMessage'\n-              example:\n-                displayMessage: Owner key could not be found\n-                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        default:\n-          $ref: '#/components/responses/default'\n-\n-    post:\n-      description: Creates a product for an owner\n-      tags:\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: sku\n+          in: query\n+          description: The list of skus\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers/count:\n+    get:\n+      description: Retrieves a count of consumers for the owner\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: countConsumers\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The type of the consumer\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: sku\n+          in: query\n+          description: The list product ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumer counts successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: integer\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers_system_purpose:\n+    get:\n+      description: Retrieves an aggregate of the system purpose settings of the owner's consumers\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: getConsumersSyspurpose\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description:  The system purpose settings sucessfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SystemPurposeAttributesDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner key could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/entitlements:\n+    get:\n+      description: |\n+        Retrieves the list of entitlements for an owner.\n+        This endpoint supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: ownerEntitlements\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: matches\n+          in: query\n+          description: A text to search for in various fields on the entitlements\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: The pair of attribute values\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      security: []\n+      responses:\n+        200:\n+          description: Entitlement details successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Starts an asynchronous healing for the given Owner.\n+        At the end of the process the idea is that all of the consumers\n+        in the owned by the owner will be up to date.\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: healEntire\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Successfully operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 640}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyODk2NQ==", "bodyText": "This endpoint returns Environments, not Activation keys", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494328965", "createdAt": "2020-09-24T13:44:27Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2764,55 +3067,1142 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products:\n+  /owners/{owner_key}/consumers:\n     get:\n-      description: Retrieves a list of products by owner\n+      description: Retrieves a list of Consumers for the Owner\n       tags:\n-        - Owner Product\n-      operationId: getProductsByOwner\n-      security: []\n+        - Owner\n+        - Consumer\n+      operationId: listConsumers\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       parameters:\n         - name: owner_key\n           in: path\n-          description: Owner key\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: product\n+        - name: username\n           in: query\n-          description: List of product ID's\n-          required: true\n+          description: The username of the consumer\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The consumer type\n           schema:\n             type: array\n+            uniqueItems: true\n             items:\n               type: string\n-      responses:\n-        200:\n-          description: Retrieves a list of products by owner\n-          content:\n-            application/json:\n-              schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ProductDTO'\n-        404:\n-          description: Owner key could not be found\n-          content:\n-            application/json:\n-              schema:\n-                $ref: '#/components/schemas/ExceptionMessage'\n-              example:\n-                displayMessage: Owner key could not be found\n-                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        default:\n-          $ref: '#/components/responses/default'\n-\n-    post:\n-      description: Creates a product for an owner\n-      tags:\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: sku\n+          in: query\n+          description: The list of skus\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers/count:\n+    get:\n+      description: Retrieves a count of consumers for the owner\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: countConsumers\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The type of the consumer\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: sku\n+          in: query\n+          description: The list product ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumer counts successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: integer\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers_system_purpose:\n+    get:\n+      description: Retrieves an aggregate of the system purpose settings of the owner's consumers\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: getConsumersSyspurpose\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description:  The system purpose settings sucessfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SystemPurposeAttributesDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner key could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/entitlements:\n+    get:\n+      description: |\n+        Retrieves the list of entitlements for an owner.\n+        This endpoint supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: ownerEntitlements\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: matches\n+          in: query\n+          description: A text to search for in various fields on the entitlements\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: The pair of attribute values\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      security: []\n+      responses:\n+        200:\n+          description: Entitlement details successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Starts an asynchronous healing for the given Owner.\n+        At the end of the process the idea is that all of the consumers\n+        in the owned by the owner will be up to date.\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: healEntire\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Successfully operation\n+          content:\n+            application/json:\n+              schema:\n+               $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/environments:\n+    get:\n+      description: Retrieves a list of environment for an owner\n+      tags:\n+        - Owner Environment\n+      operationId: listEnvironments\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: name\n+          in: query\n+          description: The name of the environment\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Activation keys successfully retrieved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 681}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzMjUxOQ==", "bodyText": "this param isn't required. if absent it will just return all hypervisors for that owner", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494332519", "createdAt": "2020-09-24T13:47:16Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2764,55 +3067,1142 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products:\n+  /owners/{owner_key}/consumers:\n     get:\n-      description: Retrieves a list of products by owner\n+      description: Retrieves a list of Consumers for the Owner\n       tags:\n-        - Owner Product\n-      operationId: getProductsByOwner\n-      security: []\n+        - Owner\n+        - Consumer\n+      operationId: listConsumers\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       parameters:\n         - name: owner_key\n           in: path\n-          description: Owner key\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: product\n+        - name: username\n           in: query\n-          description: List of product ID's\n-          required: true\n+          description: The username of the consumer\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The consumer type\n           schema:\n             type: array\n+            uniqueItems: true\n             items:\n               type: string\n-      responses:\n-        200:\n-          description: Retrieves a list of products by owner\n-          content:\n-            application/json:\n-              schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ProductDTO'\n-        404:\n-          description: Owner key could not be found\n-          content:\n-            application/json:\n-              schema:\n-                $ref: '#/components/schemas/ExceptionMessage'\n-              example:\n-                displayMessage: Owner key could not be found\n-                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        default:\n-          $ref: '#/components/responses/default'\n-\n-    post:\n-      description: Creates a product for an owner\n-      tags:\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: sku\n+          in: query\n+          description: The list of skus\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers/count:\n+    get:\n+      description: Retrieves a count of consumers for the owner\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: countConsumers\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The type of the consumer\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: sku\n+          in: query\n+          description: The list product ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumer counts successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: integer\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers_system_purpose:\n+    get:\n+      description: Retrieves an aggregate of the system purpose settings of the owner's consumers\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: getConsumersSyspurpose\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description:  The system purpose settings sucessfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SystemPurposeAttributesDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner key could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/entitlements:\n+    get:\n+      description: |\n+        Retrieves the list of entitlements for an owner.\n+        This endpoint supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: ownerEntitlements\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: matches\n+          in: query\n+          description: A text to search for in various fields on the entitlements\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: The pair of attribute values\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      security: []\n+      responses:\n+        200:\n+          description: Entitlement details successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Starts an asynchronous healing for the given Owner.\n+        At the end of the process the idea is that all of the consumers\n+        in the owned by the owner will be up to date.\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: healEntire\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Successfully operation\n+          content:\n+            application/json:\n+              schema:\n+               $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/environments:\n+    get:\n+      description: Retrieves a list of environment for an owner\n+      tags:\n+        - Owner Environment\n+      operationId: listEnvironments\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: name\n+          in: query\n+          description: The name of the environment\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Activation keys successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an environment for the owner\n+      tags:\n+        - Owner Environment\n+      operationId: createEnv\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Environment to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/EnvironmentDTO'\n+      responses:\n+        200:\n+          description: Environment for the owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/hypervisors:\n+    get:\n+      description: Retrieves a list of hypervisors for an owner\n+      tags:\n+        - Owner\n+        - Hypervisors\n+      operationId: getHypervisors\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The list of hypervisor Ids\n+          required: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 760}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0ODg3Nw==", "bodyText": "Let's add a deprecated: true here, since this endpoint is marked as deprecated, and add the following note to the description: \"Note: This endpoint is deprecated. Please use /owners/{owner_key}/imports/async\"", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494348877", "createdAt": "2020-09-24T14:06:32Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2764,55 +3067,1142 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products:\n+  /owners/{owner_key}/consumers:\n     get:\n-      description: Retrieves a list of products by owner\n+      description: Retrieves a list of Consumers for the Owner\n       tags:\n-        - Owner Product\n-      operationId: getProductsByOwner\n-      security: []\n+        - Owner\n+        - Consumer\n+      operationId: listConsumers\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       parameters:\n         - name: owner_key\n           in: path\n-          description: Owner key\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: product\n+        - name: username\n           in: query\n-          description: List of product ID's\n-          required: true\n+          description: The username of the consumer\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The consumer type\n           schema:\n             type: array\n+            uniqueItems: true\n             items:\n               type: string\n-      responses:\n-        200:\n-          description: Retrieves a list of products by owner\n-          content:\n-            application/json:\n-              schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ProductDTO'\n-        404:\n-          description: Owner key could not be found\n-          content:\n-            application/json:\n-              schema:\n-                $ref: '#/components/schemas/ExceptionMessage'\n-              example:\n-                displayMessage: Owner key could not be found\n-                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        default:\n-          $ref: '#/components/responses/default'\n-\n-    post:\n-      description: Creates a product for an owner\n-      tags:\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: sku\n+          in: query\n+          description: The list of skus\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers/count:\n+    get:\n+      description: Retrieves a count of consumers for the owner\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: countConsumers\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The type of the consumer\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: sku\n+          in: query\n+          description: The list product ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumer counts successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: integer\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers_system_purpose:\n+    get:\n+      description: Retrieves an aggregate of the system purpose settings of the owner's consumers\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: getConsumersSyspurpose\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description:  The system purpose settings sucessfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SystemPurposeAttributesDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner key could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/entitlements:\n+    get:\n+      description: |\n+        Retrieves the list of entitlements for an owner.\n+        This endpoint supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: ownerEntitlements\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: matches\n+          in: query\n+          description: A text to search for in various fields on the entitlements\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: The pair of attribute values\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      security: []\n+      responses:\n+        200:\n+          description: Entitlement details successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Starts an asynchronous healing for the given Owner.\n+        At the end of the process the idea is that all of the consumers\n+        in the owned by the owner will be up to date.\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: healEntire\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Successfully operation\n+          content:\n+            application/json:\n+              schema:\n+               $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/environments:\n+    get:\n+      description: Retrieves a list of environment for an owner\n+      tags:\n+        - Owner Environment\n+      operationId: listEnvironments\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: name\n+          in: query\n+          description: The name of the environment\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Activation keys successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an environment for the owner\n+      tags:\n+        - Owner Environment\n+      operationId: createEnv\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Environment to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/EnvironmentDTO'\n+      responses:\n+        200:\n+          description: Environment for the owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/hypervisors:\n+    get:\n+      description: Retrieves a list of hypervisors for an owner\n+      tags:\n+        - Owner\n+        - Hypervisors\n+      operationId: getHypervisors\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The list of hypervisor Ids\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: A list of hypervisors successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports:\n+    get:\n+      description: Retrieves a list of import records for an owner\n+      tags:\n+        - Owner Import\n+      operationId: getImports\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Import records successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Imports a manifest zip file for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+      operationId: importManifest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 836}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1NzQyNg==", "bodyText": "This param isn't required (since it has a default value)", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494357426", "createdAt": "2020-09-24T14:18:06Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2764,55 +3067,1142 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products:\n+  /owners/{owner_key}/consumers:\n     get:\n-      description: Retrieves a list of products by owner\n+      description: Retrieves a list of Consumers for the Owner\n       tags:\n-        - Owner Product\n-      operationId: getProductsByOwner\n-      security: []\n+        - Owner\n+        - Consumer\n+      operationId: listConsumers\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       parameters:\n         - name: owner_key\n           in: path\n-          description: Owner key\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: product\n+        - name: username\n           in: query\n-          description: List of product ID's\n-          required: true\n+          description: The username of the consumer\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The consumer type\n           schema:\n             type: array\n+            uniqueItems: true\n             items:\n               type: string\n-      responses:\n-        200:\n-          description: Retrieves a list of products by owner\n-          content:\n-            application/json:\n-              schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ProductDTO'\n-        404:\n-          description: Owner key could not be found\n-          content:\n-            application/json:\n-              schema:\n-                $ref: '#/components/schemas/ExceptionMessage'\n-              example:\n-                displayMessage: Owner key could not be found\n-                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        default:\n-          $ref: '#/components/responses/default'\n-\n-    post:\n-      description: Creates a product for an owner\n-      tags:\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: sku\n+          in: query\n+          description: The list of skus\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers/count:\n+    get:\n+      description: Retrieves a count of consumers for the owner\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: countConsumers\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The type of the consumer\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: sku\n+          in: query\n+          description: The list product ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumer counts successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: integer\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers_system_purpose:\n+    get:\n+      description: Retrieves an aggregate of the system purpose settings of the owner's consumers\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: getConsumersSyspurpose\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description:  The system purpose settings sucessfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SystemPurposeAttributesDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner key could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/entitlements:\n+    get:\n+      description: |\n+        Retrieves the list of entitlements for an owner.\n+        This endpoint supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: ownerEntitlements\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: matches\n+          in: query\n+          description: A text to search for in various fields on the entitlements\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: The pair of attribute values\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      security: []\n+      responses:\n+        200:\n+          description: Entitlement details successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Starts an asynchronous healing for the given Owner.\n+        At the end of the process the idea is that all of the consumers\n+        in the owned by the owner will be up to date.\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: healEntire\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Successfully operation\n+          content:\n+            application/json:\n+              schema:\n+               $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/environments:\n+    get:\n+      description: Retrieves a list of environment for an owner\n+      tags:\n+        - Owner Environment\n+      operationId: listEnvironments\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: name\n+          in: query\n+          description: The name of the environment\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Activation keys successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an environment for the owner\n+      tags:\n+        - Owner Environment\n+      operationId: createEnv\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Environment to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/EnvironmentDTO'\n+      responses:\n+        200:\n+          description: Environment for the owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/hypervisors:\n+    get:\n+      description: Retrieves a list of hypervisors for an owner\n+      tags:\n+        - Owner\n+        - Hypervisors\n+      operationId: getHypervisors\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The list of hypervisor Ids\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: A list of hypervisors successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports:\n+    get:\n+      description: Retrieves a list of import records for an owner\n+      tags:\n+        - Owner Import\n+      operationId: getImports\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Import records successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Imports a manifest zip file for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+      operationId: importManifest\n+      security: []\n+      requestBody:\n+        description: A manifest file to be imported\n+        required: true\n+        content:\n+          multipart/form-data:\n+            schema:\n+              properties:\n+                input:\n+                  type: string\n+                  format: binary\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: force\n+          in: query\n+          description: This is used to override the conflicts\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Manifest successfully imported\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: |\n+            Bad request error. Reasons could be,\n+            Owner key is null\n+            or empty or Unknown conflict to force\n+            or format error of the data in a manifest\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Bad request error. Reasons could be,\n+                  Owner key is null\n+                  or empty or Unknown conflict to force\n+                  or format error of the data in a manifest\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        500:\n+          description: |\n+            Internal server error. Reasons could be,\n+            Reading error during importing\n+            or problem with archive\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Internal server error. Reasons could be,\n+                  Reading error during importing\n+                  or problem with archive\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: |\n+        Removes Imports for an Owner. Cleans out all imported subscriptions\n+        and triggers a background refresh pools. Link to an upstream distributor is\n+        removed for the owner, so they can import from another distributor. Other\n+        owners can also now import the manifests originally used in this owner. This\n+        call does not differentiate between any specific import, it just destroys all\n+        subscriptions with an upstream pool ID, essentially anything from an import.\n+        Custom subscriptions will be left alone. Imports do carry rules and product\n+        information which is global to the candlepin server. This import data is *not*\n+        undone, we assume that updates to this data can be safely kept.\n+      tags:\n+        - Owner Import\n+      operationId: undoImports\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: [ ]\n+      responses:\n+        200:\n+          description: Imports for an Owner successfully removed\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports/async:\n+    post:\n+      description: |\n+        Initiates an asynchronous manifest import for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+        - Async\n+      operationId: importManifestAsync\n+      security: []\n+      requestBody:\n+        description: A manifest file to be imported\n+        required: true\n+        content:\n+          multipart/form-data:\n+            schema:\n+              properties:\n+                input:\n+                  type: string\n+                  format: binary\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: force\n+          in: query\n+          description: This is used to override the conflicts\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Manifest successfully imported\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        500:\n+          description: |\n+            Internal server error. Reasons could be,\n+            An unexpected exception occurred while scheduling job\n+            or error reading export archive\n+            or error storing uploaded archive for asynchronous processing\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Internal server error. Reasons could be,\n+                  An unexpected exception occurred while scheduling job\n+                  or error reading export archive\n+                  or error storing uploaded archive for asynchronous processing\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/info:\n+    get:\n+      description: Retrieves the Owner Info for an Owner\n+      tags:\n+        - Owner\n+      operationId: getOwnerInfo\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Owner info successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerInfoDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/log:\n+    put:\n+      description: Sets the log level for an owner\n+      tags:\n+        - Owner log\n+      operationId: setLogLevel\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: level\n+          in: query\n+          description: The log level\n+          required: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 1084}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1OTU1OA==", "bodyText": "This should be Owner log level successfully removed", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494359558", "createdAt": "2020-09-24T14:20:43Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2764,55 +3067,1142 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products:\n+  /owners/{owner_key}/consumers:\n     get:\n-      description: Retrieves a list of products by owner\n+      description: Retrieves a list of Consumers for the Owner\n       tags:\n-        - Owner Product\n-      operationId: getProductsByOwner\n-      security: []\n+        - Owner\n+        - Consumer\n+      operationId: listConsumers\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       parameters:\n         - name: owner_key\n           in: path\n-          description: Owner key\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: product\n+        - name: username\n           in: query\n-          description: List of product ID's\n-          required: true\n+          description: The username of the consumer\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The consumer type\n           schema:\n             type: array\n+            uniqueItems: true\n             items:\n               type: string\n-      responses:\n-        200:\n-          description: Retrieves a list of products by owner\n-          content:\n-            application/json:\n-              schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ProductDTO'\n-        404:\n-          description: Owner key could not be found\n-          content:\n-            application/json:\n-              schema:\n-                $ref: '#/components/schemas/ExceptionMessage'\n-              example:\n-                displayMessage: Owner key could not be found\n-                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        default:\n-          $ref: '#/components/responses/default'\n-\n-    post:\n-      description: Creates a product for an owner\n-      tags:\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: sku\n+          in: query\n+          description: The list of skus\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers/count:\n+    get:\n+      description: Retrieves a count of consumers for the owner\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: countConsumers\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The type of the consumer\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: sku\n+          in: query\n+          description: The list product ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumer counts successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: integer\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers_system_purpose:\n+    get:\n+      description: Retrieves an aggregate of the system purpose settings of the owner's consumers\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: getConsumersSyspurpose\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description:  The system purpose settings sucessfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SystemPurposeAttributesDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner key could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/entitlements:\n+    get:\n+      description: |\n+        Retrieves the list of entitlements for an owner.\n+        This endpoint supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: ownerEntitlements\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: matches\n+          in: query\n+          description: A text to search for in various fields on the entitlements\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: The pair of attribute values\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      security: []\n+      responses:\n+        200:\n+          description: Entitlement details successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Starts an asynchronous healing for the given Owner.\n+        At the end of the process the idea is that all of the consumers\n+        in the owned by the owner will be up to date.\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: healEntire\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Successfully operation\n+          content:\n+            application/json:\n+              schema:\n+               $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/environments:\n+    get:\n+      description: Retrieves a list of environment for an owner\n+      tags:\n+        - Owner Environment\n+      operationId: listEnvironments\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: name\n+          in: query\n+          description: The name of the environment\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Activation keys successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an environment for the owner\n+      tags:\n+        - Owner Environment\n+      operationId: createEnv\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Environment to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/EnvironmentDTO'\n+      responses:\n+        200:\n+          description: Environment for the owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/hypervisors:\n+    get:\n+      description: Retrieves a list of hypervisors for an owner\n+      tags:\n+        - Owner\n+        - Hypervisors\n+      operationId: getHypervisors\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The list of hypervisor Ids\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: A list of hypervisors successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports:\n+    get:\n+      description: Retrieves a list of import records for an owner\n+      tags:\n+        - Owner Import\n+      operationId: getImports\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Import records successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Imports a manifest zip file for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+      operationId: importManifest\n+      security: []\n+      requestBody:\n+        description: A manifest file to be imported\n+        required: true\n+        content:\n+          multipart/form-data:\n+            schema:\n+              properties:\n+                input:\n+                  type: string\n+                  format: binary\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: force\n+          in: query\n+          description: This is used to override the conflicts\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Manifest successfully imported\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: |\n+            Bad request error. Reasons could be,\n+            Owner key is null\n+            or empty or Unknown conflict to force\n+            or format error of the data in a manifest\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Bad request error. Reasons could be,\n+                  Owner key is null\n+                  or empty or Unknown conflict to force\n+                  or format error of the data in a manifest\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        500:\n+          description: |\n+            Internal server error. Reasons could be,\n+            Reading error during importing\n+            or problem with archive\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Internal server error. Reasons could be,\n+                  Reading error during importing\n+                  or problem with archive\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: |\n+        Removes Imports for an Owner. Cleans out all imported subscriptions\n+        and triggers a background refresh pools. Link to an upstream distributor is\n+        removed for the owner, so they can import from another distributor. Other\n+        owners can also now import the manifests originally used in this owner. This\n+        call does not differentiate between any specific import, it just destroys all\n+        subscriptions with an upstream pool ID, essentially anything from an import.\n+        Custom subscriptions will be left alone. Imports do carry rules and product\n+        information which is global to the candlepin server. This import data is *not*\n+        undone, we assume that updates to this data can be safely kept.\n+      tags:\n+        - Owner Import\n+      operationId: undoImports\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: [ ]\n+      responses:\n+        200:\n+          description: Imports for an Owner successfully removed\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports/async:\n+    post:\n+      description: |\n+        Initiates an asynchronous manifest import for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+        - Async\n+      operationId: importManifestAsync\n+      security: []\n+      requestBody:\n+        description: A manifest file to be imported\n+        required: true\n+        content:\n+          multipart/form-data:\n+            schema:\n+              properties:\n+                input:\n+                  type: string\n+                  format: binary\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: force\n+          in: query\n+          description: This is used to override the conflicts\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Manifest successfully imported\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        500:\n+          description: |\n+            Internal server error. Reasons could be,\n+            An unexpected exception occurred while scheduling job\n+            or error reading export archive\n+            or error storing uploaded archive for asynchronous processing\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Internal server error. Reasons could be,\n+                  An unexpected exception occurred while scheduling job\n+                  or error reading export archive\n+                  or error storing uploaded archive for asynchronous processing\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/info:\n+    get:\n+      description: Retrieves the Owner Info for an Owner\n+      tags:\n+        - Owner\n+      operationId: getOwnerInfo\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Owner info successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerInfoDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/log:\n+    put:\n+      description: Sets the log level for an owner\n+      tags:\n+        - Owner log\n+      operationId: setLogLevel\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: level\n+          in: query\n+          description: The log level\n+          required: true\n+          schema:\n+            type: string\n+            default: DEBUG\n+            enum:\n+              - ALL\n+              - TRACE\n+              - DEBUG\n+              - INFO\n+              - WARN\n+              - ERROR\n+              - OFF\n+      responses:\n+        200:\n+          description: Log level successfully set\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Provided level is not a valid log level\n+            or owner key is not provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Provided level is not a valid log level\n+                  or owner key is not provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Remove the log level of an owner\n+      tags:\n+        - Owner log\n+      operationId: deleteLogLevel\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The owner key\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        204:\n+          description: Owner successfully deleted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 1143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MjE1NA==", "bodyText": "this should be 204", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494362154", "createdAt": "2020-09-24T14:24:10Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2524,6 +2524,309 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n+  /owners:\n+    get:\n+      description: Retrieves a list of owners\n+      tags:\n+        - Owner\n+      operationId: listOwners\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: key\n+          in: query\n+          description: The owner keys\n+          required: false\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: A list of owners\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/OwnerDTO'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an owner\n+      tags:\n+        - Owner\n+      operationId: createOwner\n+      security: []\n+      requestBody:\n+        description: Owner to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/OwnerDTO'\n+      responses:\n+        200:\n+          description: Owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Invalid inputs, Owner cannot be created.\n+            Reasons could be, invalid key\n+            or the default service level is specified\n+            or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Invalid inputs, Owner cannot be created.\n+                  Reasons could be, invalid key\n+                  or the default service level is specified\n+                  or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}:\n+    get:\n+      description: Retrieves a single owner\n+      tags:\n+        - Owner\n+      operationId: getOwner\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Owner successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: |\n+        Updates an owner.\n+        Note: To un-set the defaultServiceLevel for an owner, submit an empty string.\n+      tags:\n+        - Owner\n+      operationId: updateOwner\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Owner to be updated\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/OwnerDTO'\n+      responses:\n+        200:\n+          description: Owner successfully updated\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Invalid inputs, Owner cannot be updated.\n+            Reasons could be, invalid key\n+            or the default service level is specified\n+            or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Invalid inputs, Owner cannot be updated.\n+                  Reasons could be, invalid key\n+                  or the default service level is specified\n+                  or the owner content access mode and content access mode list cannot be set directly in standalone mode\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes an owner\n+      tags:\n+        - Owner\n+      operationId: deleteOwner\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The owner key\n+          required: true\n+          schema:\n+            type: string\n+        - name: revoke\n+          in: query\n+          description: Boolean value to revoke an owner\n+          schema:\n+            type: boolean\n+            default: true\n+        - name: force\n+          in: query\n+          description: Boolean value to forcefully delete an owner. This is not in use.\n+          schema:\n+            type: boolean\n+            default: false\n+      security: []\n+      responses:\n+        200:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3ODYyNA==", "bodyText": "This is returning Pools, not consumers", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494378624", "createdAt": "2020-09-24T14:45:07Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2764,55 +3067,1142 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products:\n+  /owners/{owner_key}/consumers:\n     get:\n-      description: Retrieves a list of products by owner\n+      description: Retrieves a list of Consumers for the Owner\n       tags:\n-        - Owner Product\n-      operationId: getProductsByOwner\n-      security: []\n+        - Owner\n+        - Consumer\n+      operationId: listConsumers\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       parameters:\n         - name: owner_key\n           in: path\n-          description: Owner key\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: product\n+        - name: username\n           in: query\n-          description: List of product ID's\n-          required: true\n+          description: The username of the consumer\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The consumer type\n           schema:\n             type: array\n+            uniqueItems: true\n             items:\n               type: string\n-      responses:\n-        200:\n-          description: Retrieves a list of products by owner\n-          content:\n-            application/json:\n-              schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ProductDTO'\n-        404:\n-          description: Owner key could not be found\n-          content:\n-            application/json:\n-              schema:\n-                $ref: '#/components/schemas/ExceptionMessage'\n-              example:\n-                displayMessage: Owner key could not be found\n-                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        default:\n-          $ref: '#/components/responses/default'\n-\n-    post:\n-      description: Creates a product for an owner\n-      tags:\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: sku\n+          in: query\n+          description: The list of skus\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers/count:\n+    get:\n+      description: Retrieves a count of consumers for the owner\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: countConsumers\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The type of the consumer\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: sku\n+          in: query\n+          description: The list product ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumer counts successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: integer\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers_system_purpose:\n+    get:\n+      description: Retrieves an aggregate of the system purpose settings of the owner's consumers\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: getConsumersSyspurpose\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description:  The system purpose settings sucessfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SystemPurposeAttributesDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner key could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/entitlements:\n+    get:\n+      description: |\n+        Retrieves the list of entitlements for an owner.\n+        This endpoint supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: ownerEntitlements\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: matches\n+          in: query\n+          description: A text to search for in various fields on the entitlements\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: The pair of attribute values\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      security: []\n+      responses:\n+        200:\n+          description: Entitlement details successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Starts an asynchronous healing for the given Owner.\n+        At the end of the process the idea is that all of the consumers\n+        in the owned by the owner will be up to date.\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: healEntire\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Successfully operation\n+          content:\n+            application/json:\n+              schema:\n+               $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/environments:\n+    get:\n+      description: Retrieves a list of environment for an owner\n+      tags:\n+        - Owner Environment\n+      operationId: listEnvironments\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: name\n+          in: query\n+          description: The name of the environment\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Activation keys successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an environment for the owner\n+      tags:\n+        - Owner Environment\n+      operationId: createEnv\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Environment to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/EnvironmentDTO'\n+      responses:\n+        200:\n+          description: Environment for the owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/hypervisors:\n+    get:\n+      description: Retrieves a list of hypervisors for an owner\n+      tags:\n+        - Owner\n+        - Hypervisors\n+      operationId: getHypervisors\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The list of hypervisor Ids\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: A list of hypervisors successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports:\n+    get:\n+      description: Retrieves a list of import records for an owner\n+      tags:\n+        - Owner Import\n+      operationId: getImports\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Import records successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Imports a manifest zip file for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+      operationId: importManifest\n+      security: []\n+      requestBody:\n+        description: A manifest file to be imported\n+        required: true\n+        content:\n+          multipart/form-data:\n+            schema:\n+              properties:\n+                input:\n+                  type: string\n+                  format: binary\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: force\n+          in: query\n+          description: This is used to override the conflicts\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Manifest successfully imported\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: |\n+            Bad request error. Reasons could be,\n+            Owner key is null\n+            or empty or Unknown conflict to force\n+            or format error of the data in a manifest\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Bad request error. Reasons could be,\n+                  Owner key is null\n+                  or empty or Unknown conflict to force\n+                  or format error of the data in a manifest\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        500:\n+          description: |\n+            Internal server error. Reasons could be,\n+            Reading error during importing\n+            or problem with archive\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Internal server error. Reasons could be,\n+                  Reading error during importing\n+                  or problem with archive\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: |\n+        Removes Imports for an Owner. Cleans out all imported subscriptions\n+        and triggers a background refresh pools. Link to an upstream distributor is\n+        removed for the owner, so they can import from another distributor. Other\n+        owners can also now import the manifests originally used in this owner. This\n+        call does not differentiate between any specific import, it just destroys all\n+        subscriptions with an upstream pool ID, essentially anything from an import.\n+        Custom subscriptions will be left alone. Imports do carry rules and product\n+        information which is global to the candlepin server. This import data is *not*\n+        undone, we assume that updates to this data can be safely kept.\n+      tags:\n+        - Owner Import\n+      operationId: undoImports\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: [ ]\n+      responses:\n+        200:\n+          description: Imports for an Owner successfully removed\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports/async:\n+    post:\n+      description: |\n+        Initiates an asynchronous manifest import for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+        - Async\n+      operationId: importManifestAsync\n+      security: []\n+      requestBody:\n+        description: A manifest file to be imported\n+        required: true\n+        content:\n+          multipart/form-data:\n+            schema:\n+              properties:\n+                input:\n+                  type: string\n+                  format: binary\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: force\n+          in: query\n+          description: This is used to override the conflicts\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Manifest successfully imported\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        500:\n+          description: |\n+            Internal server error. Reasons could be,\n+            An unexpected exception occurred while scheduling job\n+            or error reading export archive\n+            or error storing uploaded archive for asynchronous processing\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Internal server error. Reasons could be,\n+                  An unexpected exception occurred while scheduling job\n+                  or error reading export archive\n+                  or error storing uploaded archive for asynchronous processing\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/info:\n+    get:\n+      description: Retrieves the Owner Info for an Owner\n+      tags:\n+        - Owner\n+      operationId: getOwnerInfo\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Owner info successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerInfoDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/log:\n+    put:\n+      description: Sets the log level for an owner\n+      tags:\n+        - Owner log\n+      operationId: setLogLevel\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: level\n+          in: query\n+          description: The log level\n+          required: true\n+          schema:\n+            type: string\n+            default: DEBUG\n+            enum:\n+              - ALL\n+              - TRACE\n+              - DEBUG\n+              - INFO\n+              - WARN\n+              - ERROR\n+              - OFF\n+      responses:\n+        200:\n+          description: Log level successfully set\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Provided level is not a valid log level\n+            or owner key is not provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Provided level is not a valid log level\n+                  or owner key is not provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Remove the log level of an owner\n+      tags:\n+        - Owner log\n+      operationId: deleteLogLevel\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The owner key\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        204:\n+          description: Owner successfully deleted\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/pools:\n+    get:\n+      description: |\n+        Retrieves a list of Pools for an Owner. This endpoint\n+        supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner Pool\n+      operationId: listPools\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: consumer\n+          in: query\n+          description: The consumer UUID\n+          schema:\n+            type: string\n+        - name: activation_key\n+          in: query\n+          description: The activation key name\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: subscription\n+          in: query\n+          description: The subscription id\n+          schema:\n+            type: string\n+        - name: listall\n+          in: query\n+          description: Include pools that are not suited to the unit's facts\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: activeon\n+          in: query\n+          description: Active on date\n+          schema:\n+            type: string\n+            format: date-time\n+        - name: matches\n+          in: query\n+          description: |\n+            Find pools matching the given pattern in a variety of fields\n+            * and ? wildcards are supported; may be specified multiple times\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: attribute\n+          in: query\n+          description: The attributes to return based on the specified types\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: add_future\n+          in: query\n+          description: |\n+            When set to true, it will add future dated pools to the result,\n+            based on the activeon date\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: only_future\n+          in: query\n+          description: |\n+            When set to true, it will return only future dated pools to the result,\n+            based on the activeon date\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: after\n+          in: query\n+          description: |\n+            Will only return pools with a start date after the supplied date.\n+            Overrides the activeOn date\n+          schema:\n+            type: string\n+            format: date-time\n+        - name: poolid\n+          in: query\n+          description: |\n+            One or more pool IDs to use to filter the output; only pools with IDs matching\n+            those provided will be returned; may be specified multiple times\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 1259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4MDQyNw==", "bodyText": "All of these (except the An owner could not be found using the provided key) should be moved to the 400 response. Instead this should list an additional error about the consumer not found using the provided uuid", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494380427", "createdAt": "2020-09-24T14:47:24Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2764,55 +3067,1142 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products:\n+  /owners/{owner_key}/consumers:\n     get:\n-      description: Retrieves a list of products by owner\n+      description: Retrieves a list of Consumers for the Owner\n       tags:\n-        - Owner Product\n-      operationId: getProductsByOwner\n-      security: []\n+        - Owner\n+        - Consumer\n+      operationId: listConsumers\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       parameters:\n         - name: owner_key\n           in: path\n-          description: Owner key\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: product\n+        - name: username\n           in: query\n-          description: List of product ID's\n-          required: true\n+          description: The username of the consumer\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The consumer type\n           schema:\n             type: array\n+            uniqueItems: true\n             items:\n               type: string\n-      responses:\n-        200:\n-          description: Retrieves a list of products by owner\n-          content:\n-            application/json:\n-              schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ProductDTO'\n-        404:\n-          description: Owner key could not be found\n-          content:\n-            application/json:\n-              schema:\n-                $ref: '#/components/schemas/ExceptionMessage'\n-              example:\n-                displayMessage: Owner key could not be found\n-                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        default:\n-          $ref: '#/components/responses/default'\n-\n-    post:\n-      description: Creates a product for an owner\n-      tags:\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: sku\n+          in: query\n+          description: The list of skus\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers/count:\n+    get:\n+      description: Retrieves a count of consumers for the owner\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: countConsumers\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The type of the consumer\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: sku\n+          in: query\n+          description: The list product ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumer counts successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: integer\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers_system_purpose:\n+    get:\n+      description: Retrieves an aggregate of the system purpose settings of the owner's consumers\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: getConsumersSyspurpose\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description:  The system purpose settings sucessfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SystemPurposeAttributesDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner key could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/entitlements:\n+    get:\n+      description: |\n+        Retrieves the list of entitlements for an owner.\n+        This endpoint supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: ownerEntitlements\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: matches\n+          in: query\n+          description: A text to search for in various fields on the entitlements\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: The pair of attribute values\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      security: []\n+      responses:\n+        200:\n+          description: Entitlement details successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Starts an asynchronous healing for the given Owner.\n+        At the end of the process the idea is that all of the consumers\n+        in the owned by the owner will be up to date.\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: healEntire\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Successfully operation\n+          content:\n+            application/json:\n+              schema:\n+               $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/environments:\n+    get:\n+      description: Retrieves a list of environment for an owner\n+      tags:\n+        - Owner Environment\n+      operationId: listEnvironments\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: name\n+          in: query\n+          description: The name of the environment\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Activation keys successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an environment for the owner\n+      tags:\n+        - Owner Environment\n+      operationId: createEnv\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Environment to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/EnvironmentDTO'\n+      responses:\n+        200:\n+          description: Environment for the owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/hypervisors:\n+    get:\n+      description: Retrieves a list of hypervisors for an owner\n+      tags:\n+        - Owner\n+        - Hypervisors\n+      operationId: getHypervisors\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The list of hypervisor Ids\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: A list of hypervisors successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports:\n+    get:\n+      description: Retrieves a list of import records for an owner\n+      tags:\n+        - Owner Import\n+      operationId: getImports\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Import records successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Imports a manifest zip file for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+      operationId: importManifest\n+      security: []\n+      requestBody:\n+        description: A manifest file to be imported\n+        required: true\n+        content:\n+          multipart/form-data:\n+            schema:\n+              properties:\n+                input:\n+                  type: string\n+                  format: binary\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: force\n+          in: query\n+          description: This is used to override the conflicts\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Manifest successfully imported\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: |\n+            Bad request error. Reasons could be,\n+            Owner key is null\n+            or empty or Unknown conflict to force\n+            or format error of the data in a manifest\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Bad request error. Reasons could be,\n+                  Owner key is null\n+                  or empty or Unknown conflict to force\n+                  or format error of the data in a manifest\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        500:\n+          description: |\n+            Internal server error. Reasons could be,\n+            Reading error during importing\n+            or problem with archive\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Internal server error. Reasons could be,\n+                  Reading error during importing\n+                  or problem with archive\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: |\n+        Removes Imports for an Owner. Cleans out all imported subscriptions\n+        and triggers a background refresh pools. Link to an upstream distributor is\n+        removed for the owner, so they can import from another distributor. Other\n+        owners can also now import the manifests originally used in this owner. This\n+        call does not differentiate between any specific import, it just destroys all\n+        subscriptions with an upstream pool ID, essentially anything from an import.\n+        Custom subscriptions will be left alone. Imports do carry rules and product\n+        information which is global to the candlepin server. This import data is *not*\n+        undone, we assume that updates to this data can be safely kept.\n+      tags:\n+        - Owner Import\n+      operationId: undoImports\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: [ ]\n+      responses:\n+        200:\n+          description: Imports for an Owner successfully removed\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports/async:\n+    post:\n+      description: |\n+        Initiates an asynchronous manifest import for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+        - Async\n+      operationId: importManifestAsync\n+      security: []\n+      requestBody:\n+        description: A manifest file to be imported\n+        required: true\n+        content:\n+          multipart/form-data:\n+            schema:\n+              properties:\n+                input:\n+                  type: string\n+                  format: binary\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: force\n+          in: query\n+          description: This is used to override the conflicts\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Manifest successfully imported\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        500:\n+          description: |\n+            Internal server error. Reasons could be,\n+            An unexpected exception occurred while scheduling job\n+            or error reading export archive\n+            or error storing uploaded archive for asynchronous processing\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Internal server error. Reasons could be,\n+                  An unexpected exception occurred while scheduling job\n+                  or error reading export archive\n+                  or error storing uploaded archive for asynchronous processing\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/info:\n+    get:\n+      description: Retrieves the Owner Info for an Owner\n+      tags:\n+        - Owner\n+      operationId: getOwnerInfo\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Owner info successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerInfoDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/log:\n+    put:\n+      description: Sets the log level for an owner\n+      tags:\n+        - Owner log\n+      operationId: setLogLevel\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: level\n+          in: query\n+          description: The log level\n+          required: true\n+          schema:\n+            type: string\n+            default: DEBUG\n+            enum:\n+              - ALL\n+              - TRACE\n+              - DEBUG\n+              - INFO\n+              - WARN\n+              - ERROR\n+              - OFF\n+      responses:\n+        200:\n+          description: Log level successfully set\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Provided level is not a valid log level\n+            or owner key is not provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Provided level is not a valid log level\n+                  or owner key is not provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Remove the log level of an owner\n+      tags:\n+        - Owner log\n+      operationId: deleteLogLevel\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The owner key\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        204:\n+          description: Owner successfully deleted\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/pools:\n+    get:\n+      description: |\n+        Retrieves a list of Pools for an Owner. This endpoint\n+        supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner Pool\n+      operationId: listPools\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: consumer\n+          in: query\n+          description: The consumer UUID\n+          schema:\n+            type: string\n+        - name: activation_key\n+          in: query\n+          description: The activation key name\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: subscription\n+          in: query\n+          description: The subscription id\n+          schema:\n+            type: string\n+        - name: listall\n+          in: query\n+          description: Include pools that are not suited to the unit's facts\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: activeon\n+          in: query\n+          description: Active on date\n+          schema:\n+            type: string\n+            format: date-time\n+        - name: matches\n+          in: query\n+          description: |\n+            Find pools matching the given pattern in a variety of fields\n+            * and ? wildcards are supported; may be specified multiple times\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: attribute\n+          in: query\n+          description: The attributes to return based on the specified types\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: add_future\n+          in: query\n+          description: |\n+            When set to true, it will add future dated pools to the result,\n+            based on the activeon date\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: only_future\n+          in: query\n+          description: |\n+            When set to true, it will return only future dated pools to the result,\n+            based on the activeon date\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: after\n+          in: query\n+          description: |\n+            Will only return pools with a start date after the supplied date.\n+            Overrides the activeOn date\n+          schema:\n+            type: string\n+            format: date-time\n+        - name: poolid\n+          in: query\n+          description: |\n+            One or more pool IDs to use to filter the output; only pools with IDs matching\n+            those provided will be returned; may be specified multiple times\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/PoolDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: User cannot access the consumer\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: User cannot access the consumer\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: |\n+            Invalid inputs, pools cannot be listed.\n+            Reasons could be,\n+            An owner could not be found using the provided key\n+            or the consumer specified does not belong to owner on path\n+            or activationKey could not be found with provided key\n+            or the flags add_future and only_future cannot be used at the same time\n+            or the flags add_future and only_future cannot be used with the parameter after", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 1292}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4MTg1MQ==", "bodyText": "this is not the actual description of the response where listing all possible messages is needed, but an example, so we should only be showing one of all those errors. Also, as with the description on this response, most of these do not belong on the 404, but on the 400", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494381851", "createdAt": "2020-09-24T14:49:11Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2764,55 +3067,1142 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products:\n+  /owners/{owner_key}/consumers:\n     get:\n-      description: Retrieves a list of products by owner\n+      description: Retrieves a list of Consumers for the Owner\n       tags:\n-        - Owner Product\n-      operationId: getProductsByOwner\n-      security: []\n+        - Owner\n+        - Consumer\n+      operationId: listConsumers\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       parameters:\n         - name: owner_key\n           in: path\n-          description: Owner key\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: product\n+        - name: username\n           in: query\n-          description: List of product ID's\n-          required: true\n+          description: The username of the consumer\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The consumer type\n           schema:\n             type: array\n+            uniqueItems: true\n             items:\n               type: string\n-      responses:\n-        200:\n-          description: Retrieves a list of products by owner\n-          content:\n-            application/json:\n-              schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ProductDTO'\n-        404:\n-          description: Owner key could not be found\n-          content:\n-            application/json:\n-              schema:\n-                $ref: '#/components/schemas/ExceptionMessage'\n-              example:\n-                displayMessage: Owner key could not be found\n-                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        default:\n-          $ref: '#/components/responses/default'\n-\n-    post:\n-      description: Creates a product for an owner\n-      tags:\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: sku\n+          in: query\n+          description: The list of skus\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers/count:\n+    get:\n+      description: Retrieves a count of consumers for the owner\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: countConsumers\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The type of the consumer\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: sku\n+          in: query\n+          description: The list product ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumer counts successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: integer\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers_system_purpose:\n+    get:\n+      description: Retrieves an aggregate of the system purpose settings of the owner's consumers\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: getConsumersSyspurpose\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description:  The system purpose settings sucessfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SystemPurposeAttributesDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner key could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/entitlements:\n+    get:\n+      description: |\n+        Retrieves the list of entitlements for an owner.\n+        This endpoint supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: ownerEntitlements\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: matches\n+          in: query\n+          description: A text to search for in various fields on the entitlements\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: The pair of attribute values\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      security: []\n+      responses:\n+        200:\n+          description: Entitlement details successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Starts an asynchronous healing for the given Owner.\n+        At the end of the process the idea is that all of the consumers\n+        in the owned by the owner will be up to date.\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: healEntire\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Successfully operation\n+          content:\n+            application/json:\n+              schema:\n+               $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/environments:\n+    get:\n+      description: Retrieves a list of environment for an owner\n+      tags:\n+        - Owner Environment\n+      operationId: listEnvironments\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: name\n+          in: query\n+          description: The name of the environment\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Activation keys successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an environment for the owner\n+      tags:\n+        - Owner Environment\n+      operationId: createEnv\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Environment to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/EnvironmentDTO'\n+      responses:\n+        200:\n+          description: Environment for the owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/hypervisors:\n+    get:\n+      description: Retrieves a list of hypervisors for an owner\n+      tags:\n+        - Owner\n+        - Hypervisors\n+      operationId: getHypervisors\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The list of hypervisor Ids\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: A list of hypervisors successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports:\n+    get:\n+      description: Retrieves a list of import records for an owner\n+      tags:\n+        - Owner Import\n+      operationId: getImports\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Import records successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Imports a manifest zip file for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+      operationId: importManifest\n+      security: []\n+      requestBody:\n+        description: A manifest file to be imported\n+        required: true\n+        content:\n+          multipart/form-data:\n+            schema:\n+              properties:\n+                input:\n+                  type: string\n+                  format: binary\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: force\n+          in: query\n+          description: This is used to override the conflicts\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Manifest successfully imported\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: |\n+            Bad request error. Reasons could be,\n+            Owner key is null\n+            or empty or Unknown conflict to force\n+            or format error of the data in a manifest\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Bad request error. Reasons could be,\n+                  Owner key is null\n+                  or empty or Unknown conflict to force\n+                  or format error of the data in a manifest\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        500:\n+          description: |\n+            Internal server error. Reasons could be,\n+            Reading error during importing\n+            or problem with archive\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Internal server error. Reasons could be,\n+                  Reading error during importing\n+                  or problem with archive\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: |\n+        Removes Imports for an Owner. Cleans out all imported subscriptions\n+        and triggers a background refresh pools. Link to an upstream distributor is\n+        removed for the owner, so they can import from another distributor. Other\n+        owners can also now import the manifests originally used in this owner. This\n+        call does not differentiate between any specific import, it just destroys all\n+        subscriptions with an upstream pool ID, essentially anything from an import.\n+        Custom subscriptions will be left alone. Imports do carry rules and product\n+        information which is global to the candlepin server. This import data is *not*\n+        undone, we assume that updates to this data can be safely kept.\n+      tags:\n+        - Owner Import\n+      operationId: undoImports\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: [ ]\n+      responses:\n+        200:\n+          description: Imports for an Owner successfully removed\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports/async:\n+    post:\n+      description: |\n+        Initiates an asynchronous manifest import for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+        - Async\n+      operationId: importManifestAsync\n+      security: []\n+      requestBody:\n+        description: A manifest file to be imported\n+        required: true\n+        content:\n+          multipart/form-data:\n+            schema:\n+              properties:\n+                input:\n+                  type: string\n+                  format: binary\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: force\n+          in: query\n+          description: This is used to override the conflicts\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Manifest successfully imported\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        500:\n+          description: |\n+            Internal server error. Reasons could be,\n+            An unexpected exception occurred while scheduling job\n+            or error reading export archive\n+            or error storing uploaded archive for asynchronous processing\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Internal server error. Reasons could be,\n+                  An unexpected exception occurred while scheduling job\n+                  or error reading export archive\n+                  or error storing uploaded archive for asynchronous processing\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/info:\n+    get:\n+      description: Retrieves the Owner Info for an Owner\n+      tags:\n+        - Owner\n+      operationId: getOwnerInfo\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Owner info successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerInfoDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/log:\n+    put:\n+      description: Sets the log level for an owner\n+      tags:\n+        - Owner log\n+      operationId: setLogLevel\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: level\n+          in: query\n+          description: The log level\n+          required: true\n+          schema:\n+            type: string\n+            default: DEBUG\n+            enum:\n+              - ALL\n+              - TRACE\n+              - DEBUG\n+              - INFO\n+              - WARN\n+              - ERROR\n+              - OFF\n+      responses:\n+        200:\n+          description: Log level successfully set\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Provided level is not a valid log level\n+            or owner key is not provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Provided level is not a valid log level\n+                  or owner key is not provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Remove the log level of an owner\n+      tags:\n+        - Owner log\n+      operationId: deleteLogLevel\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The owner key\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        204:\n+          description: Owner successfully deleted\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/pools:\n+    get:\n+      description: |\n+        Retrieves a list of Pools for an Owner. This endpoint\n+        supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner Pool\n+      operationId: listPools\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: consumer\n+          in: query\n+          description: The consumer UUID\n+          schema:\n+            type: string\n+        - name: activation_key\n+          in: query\n+          description: The activation key name\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: subscription\n+          in: query\n+          description: The subscription id\n+          schema:\n+            type: string\n+        - name: listall\n+          in: query\n+          description: Include pools that are not suited to the unit's facts\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: activeon\n+          in: query\n+          description: Active on date\n+          schema:\n+            type: string\n+            format: date-time\n+        - name: matches\n+          in: query\n+          description: |\n+            Find pools matching the given pattern in a variety of fields\n+            * and ? wildcards are supported; may be specified multiple times\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: attribute\n+          in: query\n+          description: The attributes to return based on the specified types\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: add_future\n+          in: query\n+          description: |\n+            When set to true, it will add future dated pools to the result,\n+            based on the activeon date\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: only_future\n+          in: query\n+          description: |\n+            When set to true, it will return only future dated pools to the result,\n+            based on the activeon date\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: after\n+          in: query\n+          description: |\n+            Will only return pools with a start date after the supplied date.\n+            Overrides the activeOn date\n+          schema:\n+            type: string\n+            format: date-time\n+        - name: poolid\n+          in: query\n+          description: |\n+            One or more pool IDs to use to filter the output; only pools with IDs matching\n+            those provided will be returned; may be specified multiple times\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/PoolDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: User cannot access the consumer\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: User cannot access the consumer\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: |\n+            Invalid inputs, pools cannot be listed.\n+            Reasons could be,\n+            An owner could not be found using the provided key\n+            or the consumer specified does not belong to owner on path\n+            or activationKey could not be found with provided key\n+            or the flags add_future and only_future cannot be used at the same time\n+            or the flags add_future and only_future cannot be used with the parameter after\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Invalid inputs, pools cannot be listed.\n+                  Reasons could be,\n+                  An owner could not be found using the provided key\n+                  or the consumer specified does not belong to owner on path\n+                  or activationKey could not be found with provided key\n+                  or the flags add_future and only_future cannot be used at the same time\n+                  or the flags add_future and only_future cannot be used with the parameter after", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 1305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5MjU3OQ==", "bodyText": "updated instead of created", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494392579", "createdAt": "2020-09-24T15:02:56Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -2764,55 +3067,1142 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /owners/{owner_key}/products:\n+  /owners/{owner_key}/consumers:\n     get:\n-      description: Retrieves a list of products by owner\n+      description: Retrieves a list of Consumers for the Owner\n       tags:\n-        - Owner Product\n-      operationId: getProductsByOwner\n-      security: []\n+        - Owner\n+        - Consumer\n+      operationId: listConsumers\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       parameters:\n         - name: owner_key\n           in: path\n-          description: Owner key\n+          description: The key of the owner\n           required: true\n           schema:\n             type: string\n-        - name: product\n+        - name: username\n           in: query\n-          description: List of product ID's\n-          required: true\n+          description: The username of the consumer\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The consumer type\n           schema:\n             type: array\n+            uniqueItems: true\n             items:\n               type: string\n-      responses:\n-        200:\n-          description: Retrieves a list of products by owner\n-          content:\n-            application/json:\n-              schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ProductDTO'\n-        404:\n-          description: Owner key could not be found\n-          content:\n-            application/json:\n-              schema:\n-                $ref: '#/components/schemas/ExceptionMessage'\n-              example:\n-                displayMessage: Owner key could not be found\n-                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        default:\n-          $ref: '#/components/responses/default'\n-\n-    post:\n-      description: Creates a product for an owner\n-      tags:\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: sku\n+          in: query\n+          description: The list of skus\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers/count:\n+    get:\n+      description: Retrieves a count of consumers for the owner\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: countConsumers\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: The type of the consumer\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: sku\n+          in: query\n+          description: The list product ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: subscription_id\n+          in: query\n+          description: The list of subscription ids\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: contract\n+          in: query\n+          description: The list of contract numbers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumer counts successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: integer\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/consumers_system_purpose:\n+    get:\n+      description: Retrieves an aggregate of the system purpose settings of the owner's consumers\n+      tags:\n+        - Owner\n+        - Consumer\n+      operationId: getConsumersSyspurpose\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description:  The system purpose settings sucessfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SystemPurposeAttributesDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner key could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/entitlements:\n+    get:\n+      description: |\n+        Retrieves the list of entitlements for an owner.\n+        This endpoint supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: ownerEntitlements\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: matches\n+          in: query\n+          description: A text to search for in various fields on the entitlements\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: The pair of attribute values\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      security: []\n+      responses:\n+        200:\n+          description: Entitlement details successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Starts an asynchronous healing for the given Owner.\n+        At the end of the process the idea is that all of the consumers\n+        in the owned by the owner will be up to date.\n+      tags:\n+        - Owner\n+        - Entitlements\n+      operationId: healEntire\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Successfully operation\n+          content:\n+            application/json:\n+              schema:\n+               $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/environments:\n+    get:\n+      description: Retrieves a list of environment for an owner\n+      tags:\n+        - Owner Environment\n+      operationId: listEnvironments\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: name\n+          in: query\n+          description: The name of the environment\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Activation keys successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates an environment for the owner\n+      tags:\n+        - Owner Environment\n+      operationId: createEnv\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: Environment to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/EnvironmentDTO'\n+      responses:\n+        200:\n+          description: Environment for the owner successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/EnvironmentDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/hypervisors:\n+    get:\n+      description: Retrieves a list of hypervisors for an owner\n+      tags:\n+        - Owner\n+        - Hypervisors\n+      operationId: getHypervisors\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: The list of hypervisor Ids\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: A list of hypervisors successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports:\n+    get:\n+      description: Retrieves a list of import records for an owner\n+      tags:\n+        - Owner Import\n+      operationId: getImports\n+      security: []\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Import records successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Imports a manifest zip file for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+      operationId: importManifest\n+      security: []\n+      requestBody:\n+        description: A manifest file to be imported\n+        required: true\n+        content:\n+          multipart/form-data:\n+            schema:\n+              properties:\n+                input:\n+                  type: string\n+                  format: binary\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: force\n+          in: query\n+          description: This is used to override the conflicts\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Manifest successfully imported\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ImportRecordDTO'\n+        400:\n+          description: |\n+            Bad request error. Reasons could be,\n+            Owner key is null\n+            or empty or Unknown conflict to force\n+            or format error of the data in a manifest\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Bad request error. Reasons could be,\n+                  Owner key is null\n+                  or empty or Unknown conflict to force\n+                  or format error of the data in a manifest\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        500:\n+          description: |\n+            Internal server error. Reasons could be,\n+            Reading error during importing\n+            or problem with archive\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Internal server error. Reasons could be,\n+                  Reading error during importing\n+                  or problem with archive\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: |\n+        Removes Imports for an Owner. Cleans out all imported subscriptions\n+        and triggers a background refresh pools. Link to an upstream distributor is\n+        removed for the owner, so they can import from another distributor. Other\n+        owners can also now import the manifests originally used in this owner. This\n+        call does not differentiate between any specific import, it just destroys all\n+        subscriptions with an upstream pool ID, essentially anything from an import.\n+        Custom subscriptions will be left alone. Imports do carry rules and product\n+        information which is global to the candlepin server. This import data is *not*\n+        undone, we assume that updates to this data can be safely kept.\n+      tags:\n+        - Owner Import\n+      operationId: undoImports\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: [ ]\n+      responses:\n+        200:\n+          description: Imports for an Owner successfully removed\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/imports/async:\n+    post:\n+      description: |\n+        Initiates an asynchronous manifest import for the given organization.\n+        This will bring in any products, content, and subscriptions that were\n+        assigned to the distributor who generated the manifest.\n+      tags:\n+        - Owner Import\n+        - Async\n+      operationId: importManifestAsync\n+      security: []\n+      requestBody:\n+        description: A manifest file to be imported\n+        required: true\n+        content:\n+          multipart/form-data:\n+            schema:\n+              properties:\n+                input:\n+                  type: string\n+                  format: binary\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: force\n+          in: query\n+          description: This is used to override the conflicts\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Manifest successfully imported\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An import owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An import owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        500:\n+          description: |\n+            Internal server error. Reasons could be,\n+            An unexpected exception occurred while scheduling job\n+            or error reading export archive\n+            or error storing uploaded archive for asynchronous processing\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Internal server error. Reasons could be,\n+                  An unexpected exception occurred while scheduling job\n+                  or error reading export archive\n+                  or error storing uploaded archive for asynchronous processing\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/info:\n+    get:\n+      description: Retrieves the Owner Info for an Owner\n+      tags:\n+        - Owner\n+      operationId: getOwnerInfo\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Owner info successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerInfoDTO'\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/log:\n+    put:\n+      description: Sets the log level for an owner\n+      tags:\n+        - Owner log\n+      operationId: setLogLevel\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: level\n+          in: query\n+          description: The log level\n+          required: true\n+          schema:\n+            type: string\n+            default: DEBUG\n+            enum:\n+              - ALL\n+              - TRACE\n+              - DEBUG\n+              - INFO\n+              - WARN\n+              - ERROR\n+              - OFF\n+      responses:\n+        200:\n+          description: Log level successfully set\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: |\n+            Provided level is not a valid log level\n+            or owner key is not provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Provided level is not a valid log level\n+                  or owner key is not provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Remove the log level of an owner\n+      tags:\n+        - Owner log\n+      operationId: deleteLogLevel\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The owner key\n+          required: true\n+          schema:\n+            type: string\n+      security: []\n+      responses:\n+        204:\n+          description: Owner successfully deleted\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /owners/{owner_key}/pools:\n+    get:\n+      description: |\n+        Retrieves a list of Pools for an Owner. This endpoint\n+        supports paging with query parameters. For more details please visit\n+        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n+      tags:\n+        - Owner Pool\n+      operationId: listPools\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+        - name: consumer\n+          in: query\n+          description: The consumer UUID\n+          schema:\n+            type: string\n+        - name: activation_key\n+          in: query\n+          description: The activation key name\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: The product id\n+          schema:\n+            type: string\n+        - name: subscription\n+          in: query\n+          description: The subscription id\n+          schema:\n+            type: string\n+        - name: listall\n+          in: query\n+          description: Include pools that are not suited to the unit's facts\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: activeon\n+          in: query\n+          description: Active on date\n+          schema:\n+            type: string\n+            format: date-time\n+        - name: matches\n+          in: query\n+          description: |\n+            Find pools matching the given pattern in a variety of fields\n+            * and ? wildcards are supported; may be specified multiple times\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: attribute\n+          in: query\n+          description: The attributes to return based on the specified types\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+        - name: add_future\n+          in: query\n+          description: |\n+            When set to true, it will add future dated pools to the result,\n+            based on the activeon date\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: only_future\n+          in: query\n+          description: |\n+            When set to true, it will return only future dated pools to the result,\n+            based on the activeon date\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: after\n+          in: query\n+          description: |\n+            Will only return pools with a start date after the supplied date.\n+            Overrides the activeOn date\n+          schema:\n+            type: string\n+            format: date-time\n+        - name: poolid\n+          in: query\n+          description: |\n+            One or more pool IDs to use to filter the output; only pools with IDs matching\n+            those provided will be returned; may be specified multiple times\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      security: []\n+      responses:\n+        200:\n+          description: Consumers successfully retrieved\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/PoolDTO'\n+        400:\n+          description: Owner key is null or empty\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner key is null or empty\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: User cannot access the consumer\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: User cannot access the consumer\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: |\n+            Invalid inputs, pools cannot be listed.\n+            Reasons could be,\n+            An owner could not be found using the provided key\n+            or the consumer specified does not belong to owner on path\n+            or activationKey could not be found with provided key\n+            or the flags add_future and only_future cannot be used at the same time\n+            or the flags add_future and only_future cannot be used with the parameter after\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: |\n+                  Invalid inputs, pools cannot be listed.\n+                  Reasons could be,\n+                  An owner could not be found using the provided key\n+                  or the consumer specified does not belong to owner on path\n+                  or activationKey could not be found with provided key\n+                  or the flags add_future and only_future cannot be used at the same time\n+                  or the flags add_future and only_future cannot be used with the parameter after\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: |\n+        Creates a custom pool for an Owner. Floating pools are not tied to any\n+        upstream subscription, and are most commonly used for custom content delivery\n+        in Satellite. Also helps in on-site deployment testing\n+      tags:\n+        - Owner Pool\n+      operationId: createPool\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: The key of the owner\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: A pool to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/PoolDTO'\n+      responses:\n+        200:\n+          description: Pool successfully created\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/PoolDTO'\n+        400:\n+          description: |\n+            Invalid inputs, pool cannot be created.\n+            Reasons could be,\n+            Owner key is null or empty\n+            or Pool product ID not specified\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Invalid inputs, pool cannot be created.\n+                  Reasons could be,\n+                  Owner key is null or empty\n+                  or Pool product ID not specified\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: An owner could not be found using the provided key\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: An owner could not be found using the provided key\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: |\n+        Updates a pool for an Owner. assumes this is a normal pool, and\n+        errors out otherwise cause we cannot create master pools from bonus pools\n+      tags:\n+        - Owner Pool\n+      operationId: updatePool\n+      security: []\n+      parameters:\n+        - name: owner_key\n+          in: path\n+          description: Owner key\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: A pool to be created", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 1384}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/f41bd9062eac655526cd4d7a45db7f7c7fd4188e", "committedDate": "2020-09-24T08:05:48Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs"}, "afterCommit": {"oid": "9c9100393632dbac61ed2a3e09ca7a1b1266f590", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/9c9100393632dbac61ed2a3e09ca7a1b1266f590", "committedDate": "2020-09-25T08:43:49Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c9100393632dbac61ed2a3e09ca7a1b1266f590", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/9c9100393632dbac61ed2a3e09ca7a1b1266f590", "committedDate": "2020-09-25T08:43:49Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs"}, "afterCommit": {"oid": "482111a75c24579277f968f9677f7c09b2141db4", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/482111a75c24579277f968f9677f7c09b2141db4", "committedDate": "2020-09-25T09:50:39Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MzQyNDM1", "url": "https://github.com/candlepin/candlepin/pull/2802#pullrequestreview-496342435", "createdAt": "2020-09-25T11:39:04Z", "commit": {"oid": "482111a75c24579277f968f9677f7c09b2141db4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTozOTowNFrOHYAGkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTozOTowNFrOHYAGkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkyOTU1NA==", "bodyText": "For this line, you don't need to check for null. Util.toDate() will just return null of the arg is null", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494929554", "createdAt": "2020-09-25T11:39:04Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resource/OwnerResource.java", "diffHunk": "@@ -1498,86 +1248,46 @@ public void deleteLogLevel(@PathParam(\"owner_key\") String ownerKey) {\n         return translator.translateQuery(query, ConsumerDTOArrayElement.class);\n     }\n \n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"{owner_key}/consumers/count\")\n-    @SuppressWarnings(\"checkstyle:indentation\")\n-    @ApiOperation(notes = \"Retrieve a count of Consumers for the Owner\", value = \"consumers count\")\n-    @ApiResponses({\n-        @ApiResponse(code = 404, message = \"Owner not found\"),\n-        @ApiResponse(code = 400, message = \"Invalid request\")\n-    })\n-    public int countConsumers(\n-        @PathParam(\"owner_key\")\n+    @Override\n+    public Integer countConsumers(\n         @Verify(value = Owner.class, subResource = SubResource.CONSUMERS) String ownerKey,\n-        @QueryParam(\"type\") Set<String> typeLabels,\n-        @QueryParam(\"sku\") List<String> skus,\n-        @QueryParam(\"subscription_id\") List<String> subscriptionIds,\n-        @QueryParam(\"contract\") List<String> contracts) {\n+        Set<String> typeLabels,\n+        List<String> skus,\n+        List<String> subscriptionIds,\n+        List<String> contracts) {\n \n         this.findOwnerByKey(ownerKey);\n         consumerTypeValidator.findAndValidateTypeLabels(typeLabels);\n \n         return consumerCurator.countConsumers(ownerKey, typeLabels, skus, subscriptionIds, contracts);\n     }\n \n-    /**\n-     * Retrieves a list of Pools for an Owner\n-     *\n-     * @param ownerKey id of the owner whose entitlement pools are sought.\n-     * @param matches Find pools matching the given pattern in a variety of fields.\n-     * * and ? wildcards are supported.\n-     * @return a list of Pool objects\n-     * @httpcode 400\n-     * @httpcode 404\n-     * @httpcode 200\n-     */\n+    @Override\n     @Transactional\n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"{owner_key}/pools\")\n-    @SuppressWarnings(\"checkstyle:indentation\")\n-    @ApiOperation(notes = \"Retrieves a list of Pools for an Owner. This endpoint \" +\n-        \"supports paging with query parameters. For more details please visit \" +\n-        \"https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\",\n-        value = \"List Pools\")\n-    @ApiResponses({\n-        @ApiResponse(code = 404, message = \"Owner not found\"),\n-        @ApiResponse(code = 400, message = \"Invalid request\")\n-    })\n     public List<PoolDTO> listPools(\n-        @PathParam(\"owner_key\") @Verify(value = Owner.class, subResource = SubResource.POOLS) String ownerKey,\n-        @QueryParam(\"consumer\") String consumerUuid,\n-        @QueryParam(\"activation_key\") String activationKeyName,\n-        @QueryParam(\"product\") String productId,\n-        @QueryParam(\"subscription\") String subscriptionId,\n-        @ApiParam(\"Include pools that are not suited to the unit's facts.\")\n-        @QueryParam(\"listall\") @DefaultValue(\"false\") boolean listAll,\n-        @ApiParam(\"Date to use as current time for lookup criteria. Defaults\" +\n-                \" to current date if not specified.\")\n-        @QueryParam(\"activeon\") @DefaultValue(DateFormat.NOW) @DateFormat Date activeOn,\n-        @ApiParam(\"Find pools matching the given pattern in a variety of fields;\" +\n-                \" * and ? wildcards are supported; may be specified multiple times\")\n-        @QueryParam(\"matches\") List<String> matches,\n-        @ApiParam(\"The attributes to return based on the specified types.\")\n-        @QueryParam(\"attribute\") List<KeyValueParamDTO> attrFilters,\n-        @ApiParam(\"When set to true, it will add future dated pools to the result, \" +\n-                \"based on the activeon date.\")\n-        @QueryParam(\"add_future\") @DefaultValue(\"false\") boolean addFuture,\n-        @ApiParam(\"When set to true, it will return only future dated pools to the result, \" +\n-                \"based on the activeon date.\")\n-        @QueryParam(\"only_future\") @DefaultValue(\"false\") boolean onlyFuture,\n-        @ApiParam(\"Will only return pools with a start date after the supplied date. \" +\n-                \"Overrides the activeOn date.\")\n-        @QueryParam(\"after\") @DateFormat Date after,\n-        @ApiParam(\"One or more pool IDs to use to filter the output; only pools with IDs matching \" +\n-                \"those provided will be returned; may be specified multiple times\")\n-        @QueryParam(\"poolid\") List<String> poolIds,\n-        @Context Principal principal,\n-        @Context PageRequest pageRequest) {\n+        @Verify(value = Owner.class, subResource = SubResource.POOLS) String ownerKey,\n+        String consumerUuid,\n+        String activationKeyName,\n+        String productId,\n+        String subscriptionId,\n+        Boolean listAll,\n+        OffsetDateTime activeOn,\n+        List<String> matches,\n+        List<KeyValueParamDTO> attrFilters,\n+        Boolean addFuture,\n+        Boolean onlyFuture,\n+        OffsetDateTime after,\n+        List<String> poolIds) {\n+\n+        Principal principal = this.principalProvider.get();\n+        PageRequest pageRequest = ResteasyContext.getContextData(PageRequest.class);\n \n         Owner owner = findOwnerByKey(ownerKey);\n \n+        // set default to current date\n+        Date activeOnDate = activeOn != null ? Util.toDate(activeOn) : new Date();\n+        Date afterDate = after != null ? Util.toDate(after) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "482111a75c24579277f968f9677f7c09b2141db4"}, "originalPosition": 710}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MzQ3MjU4", "url": "https://github.com/candlepin/candlepin/pull/2802#pullrequestreview-496347258", "createdAt": "2020-09-25T11:47:06Z", "commit": {"oid": "482111a75c24579277f968f9677f7c09b2141db4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo0NzowNlrOHYAVTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo0NzowNlrOHYAVTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMzMyNg==", "bodyText": "We should be doing what other endpoints do here, and use proper logging (log.error()) and then throwing an IseException", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494933326", "createdAt": "2020-09-25T11:47:06Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resource/OwnerResource.java", "diffHunk": "@@ -1213,58 +1091,29 @@ public void deleteOwner(@PathParam(\"owner_key\") String ownerKey,\n         return entitlementDTOs;\n     }\n \n-    /**\n-     * Heals an Owner\n-     *\n-     * Starts an asynchronous healing for the given Owner. At the end of the\n-     * process the idea is that all of the consumers in the owned by the Owner\n-     * will be up to date.\n-     *\n-     * @param ownerKey id of the owner to be healed.\n-     * @return a JobDetail object\n-     * @httpcode 404\n-     * @httpcode 202\n-     */\n-    @POST\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.WILDCARD)\n-    @Path(\"{owner_key}/entitlements\")\n-    @ApiOperation(notes = \"Starts an asynchronous healing for the given Owner.\" +\n-        \" At the end of the process the idea is that all of the consumers \" +\n-        \"in the owned by the Owner will be up to date.\", value = \"Heal owner\")\n-    @ApiResponses({ @ApiResponse(code = 404, message = \"Owner not found\") })\n+    @Override\n     public AsyncJobStatusDTO healEntire(\n-        @ApiParam(\"ownerKey id of the owner to be healed.\") @PathParam(\"owner_key\") @Verify(Owner.class)\n-        String ownerKey)\n-        throws JobException {\n+        @Verify(Owner.class) String ownerKey) {\n \n         Owner owner = findOwnerByKey(ownerKey);\n         JobConfig config = HealEntireOrgJob.createJobConfig().setOwner(owner).setEntitleDate(new Date());\n \n-        AsyncJobStatus job = this.jobManager.queueJob(config);\n+        AsyncJobStatus job = null;\n+        try {\n+            job = this.jobManager.queueJob(config);\n+        }\n+        catch (JobException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "482111a75c24579277f968f9677f7c09b2141db4"}, "originalPosition": 372}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MzU4ODEz", "url": "https://github.com/candlepin/candlepin/pull/2802#pullrequestreview-496358813", "createdAt": "2020-09-25T12:06:20Z", "commit": {"oid": "482111a75c24579277f968f9677f7c09b2141db4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjowNjoyMFrOHYA38w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjowNjoyMFrOHYA38w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0MjE5NQ==", "bodyText": "If we end up removing the OwnerInfoTranslator class, then this won't matter, but if we don't, we should either uncomment/update this block or remove it", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r494942195", "createdAt": "2020-09-25T12:06:20Z", "author": {"login": "nikosmoum"}, "path": "server/src/test/java/org/candlepin/dto/api/v1/OwnerInfoDTOTranslatorTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.dto.api.v1;\n+\n+import static org.junit.Assert.*;\n+\n+import org.candlepin.dto.AbstractTranslatorTest;\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.model.ConsumerType;\n+import org.candlepin.model.OwnerInfo;\n+\n+public class OwnerInfoDTOTranslatorTest extends\n+    AbstractTranslatorTest<OwnerInfo, OwnerInfoDTO, OwnerInfoDTOTranslator> {\n+\n+    OwnerInfoDTOTranslator translator = new OwnerInfoDTOTranslator();\n+\n+    @Override\n+    protected void initModelTranslator(ModelTranslator modelTranslator) {\n+        modelTranslator.registerTranslator(this.translator,\n+            OwnerInfo.class, OwnerInfoDTO.class);\n+    }\n+\n+    @Override\n+    protected OwnerInfoDTOTranslator initObjectTranslator() {\n+        return this.translator;\n+    }\n+\n+    @Override\n+    protected OwnerInfo initSourceObject() {\n+        OwnerInfo ownerInfo = new OwnerInfo();\n+        ownerInfo.addTypeTotal(new ConsumerType(\"test\"), 1, 2);\n+        ownerInfo.setGuestCount(2);\n+        ownerInfo.setPhysicalCount(2);\n+        ownerInfo.addToConsumerTypeCountByPool(new ConsumerType(\"test-1\"), 5);\n+        ownerInfo.addToEnabledConsumerTypeCountByPool(new ConsumerType(\"test-2\"), 1);\n+        ownerInfo.setConsumerCountByComplianceStatus(\"test-status\", 4);\n+        ownerInfo.addToEntitlementsConsumedByFamily(\"test-family\", 1, 3);\n+        return ownerInfo;\n+    }\n+\n+    @Override\n+    protected OwnerInfoDTO initDestinationObject() {\n+        return new OwnerInfoDTO();\n+    }\n+\n+    @Override\n+    protected void verifyOutput(OwnerInfo source, OwnerInfoDTO dest, boolean childrenGenerated) {\n+        if (source != null) {\n+            assertEquals(source.getConsumerCounts(), dest.getConsumerCounts());\n+            assertEquals(source.getConsumerGuestCounts(), dest.getConsumerGuestCounts());\n+            assertEquals(source.getEntitlementsConsumedByType(), dest.getEntitlementsConsumedByType());\n+            assertEquals(source.getConsumerTypeCountByPool(), dest.getConsumerTypeCountByPool());\n+            assertEquals(source.getEnabledConsumerTypeCountByPool(),\n+                dest.getEnabledConsumerTypeCountByPool());\n+            assertEquals(source.getConsumerCountsByComplianceStatus(),\n+                dest.getConsumerCountsByComplianceStatus());\n+            assertEquals(source.getEntitlementsConsumedByFamily().size(),\n+                dest.getEntitlementsConsumedByFamily().size());\n+\n+            //TODO: Add family check here\n+            /*boolean isConsumed;\n+            if(!source.getEntitlementsConsumedByFamily().isEmpty()) {\n+                isConsumed = source.getEntitlementsConsumedByFamily().entrySet().stream()\n+                    .allMatch(e -> e.equals(dest.getEntitlementsConsumedByFamily().get(e.getKey())));\n+                assertTrue(isConsumed);\n+            }*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "482111a75c24579277f968f9677f7c09b2141db4"}, "originalPosition": 79}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "482111a75c24579277f968f9677f7c09b2141db4", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/482111a75c24579277f968f9677f7c09b2141db4", "committedDate": "2020-09-25T09:50:39Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs"}, "afterCommit": {"oid": "b300038ad20522b825951d0fe7c9af9e7b691279", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/b300038ad20522b825951d0fe7c9af9e7b691279", "committedDate": "2020-09-29T06:52:26Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b300038ad20522b825951d0fe7c9af9e7b691279", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/b300038ad20522b825951d0fe7c9af9e7b691279", "committedDate": "2020-09-29T06:52:26Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}, "afterCommit": {"oid": "12bc08f25c024968a349d475b218cd9410fe278c", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/12bc08f25c024968a349d475b218cd9410fe278c", "committedDate": "2020-09-29T07:02:08Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12bc08f25c024968a349d475b218cd9410fe278c", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/12bc08f25c024968a349d475b218cd9410fe278c", "committedDate": "2020-09-29T07:02:08Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}, "afterCommit": {"oid": "87268966528d5376b4e5bd2909f6eb333c1c2b1f", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/87268966528d5376b4e5bd2909f6eb333c1c2b1f", "committedDate": "2020-09-29T07:26:52Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MzE4MjM0", "url": "https://github.com/candlepin/candlepin/pull/2802#pullrequestreview-498318234", "createdAt": "2020-09-29T10:14:52Z", "commit": {"oid": "87268966528d5376b4e5bd2909f6eb333c1c2b1f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxNDo1M1rOHZmNmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyNzozM1rOHZmphA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwMjUyMw==", "bodyText": "This should be iterating over getConsumerTypeCountByPool", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496602523", "createdAt": "2020-09-29T10:14:53Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/model/OwnerInfoBuilder.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (c) 2009 - 2012 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.model;\n+\n+import org.candlepin.dto.api.v1.ConsumptionTypeCountsDTO;\n+import org.candlepin.dto.api.v1.OwnerInfo;\n+\n+import java.util.List;\n+\n+/**\n+ * OwnerInfoBuilder is used to accumulate data to build OwnerInfo with dynamic values.\n+ */\n+\n+public class OwnerInfoBuilder {\n+\n+    private OwnerInfo ownerInfo;\n+\n+    public static final String PHYSICAL = \"physical\";\n+    public static final String GUEST = \"guest\";\n+\n+    public OwnerInfoBuilder() {\n+        ownerInfo = new OwnerInfo();\n+    }\n+\n+    public OwnerInfo build() {\n+        return this.ownerInfo;\n+    }\n+\n+    public void addTypeTotal(ConsumerType type, int consumers, int entitlements) {\n+        ownerInfo.putConsumerCounts(type.getLabel(), consumers);\n+        ownerInfo.putEntitlementsConsumedByType(type.getLabel(), entitlements);\n+    }\n+\n+    public void addToConsumerTypeCountByPool(ConsumerType type, int toAdd) {\n+        Integer count = ownerInfo.getConsumerTypeCountByPool().get(type.getLabel());\n+        if (count == null) {\n+            count = 0;\n+        }\n+        ownerInfo.putConsumerTypeCountByPool(type.getLabel(), count + toAdd);\n+    }\n+\n+    public void addToEnabledConsumerTypeCountByPool(ConsumerType type, int toAdd) {\n+        Integer count = ownerInfo.getEnabledConsumerTypeCountByPool().get(type.getLabel());\n+        if (count == null) {\n+            count = 0;\n+        }\n+        ownerInfo.putEnabledConsumerTypeCountByPool(type.getLabel(), count + toAdd);\n+    }\n+\n+    public void setConsumerTypesByPool(List<ConsumerType> consumerTypes) {\n+        for (ConsumerType c : consumerTypes) {\n+            ownerInfo.putConsumerTypeCountByPool(c.getLabel(), 0);\n+        }\n+    }\n+\n+    public void addToEntitlementsConsumedByFamily(String family, int physical,\n+        int virtual) {\n+        ConsumptionTypeCountsDTO typeCounts;\n+        if (!ownerInfo.getEntitlementsConsumedByFamily().containsKey(family)) {\n+            typeCounts = new ConsumptionTypeCountsDTO().physical(0).guest(0);\n+            ownerInfo.putEntitlementsConsumedByFamily(family, typeCounts);\n+        }\n+        else {\n+            typeCounts = ownerInfo.getEntitlementsConsumedByFamily().get(family);\n+        }\n+\n+        typeCounts.setPhysical(typeCounts.getPhysical() + physical);\n+        typeCounts.setGuest(typeCounts.getGuest() + virtual);\n+    }\n+\n+    public void addDefaultEntitlementsConsumedByFamily(int physical, int virtual) {\n+        for (String key : ownerInfo.getEntitlementsConsumedByFamily().keySet()) {\n+            ConsumptionTypeCountsDTO count = ownerInfo.getEntitlementsConsumedByFamily().get(key);\n+            physical -= count.getPhysical();\n+            virtual -= count.getGuest();\n+        }\n+\n+        // just ignore the default family if we have nothing to put in it.\n+        if (physical > 0 || virtual > 0) {\n+            addToEntitlementsConsumedByFamily(\"none\", physical, virtual);\n+        }\n+    }\n+\n+    public void addDefaultEnabledConsumerTypeCount(int activePools) {\n+        for (String key : ownerInfo.getEntitlementsConsumedByType().keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87268966528d5376b4e5bd2909f6eb333c1c2b1f"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwODA0NQ==", "bodyText": "The original OwnerInfo constructor was doing some data initialization:\n        consumerGuestCounts.put(GUEST, 0);\n        consumerGuestCounts.put(PHYSICAL, 0);\n\nWe should also add that here, and add a unit test for it if one does not already exist", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496608045", "createdAt": "2020-09-29T10:24:43Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/model/OwnerInfoBuilder.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (c) 2009 - 2012 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.model;\n+\n+import org.candlepin.dto.api.v1.ConsumptionTypeCountsDTO;\n+import org.candlepin.dto.api.v1.OwnerInfo;\n+\n+import java.util.List;\n+\n+/**\n+ * OwnerInfoBuilder is used to accumulate data to build OwnerInfo with dynamic values.\n+ */\n+\n+public class OwnerInfoBuilder {\n+\n+    private OwnerInfo ownerInfo;\n+\n+    public static final String PHYSICAL = \"physical\";\n+    public static final String GUEST = \"guest\";\n+\n+    public OwnerInfoBuilder() {\n+        ownerInfo = new OwnerInfo();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87268966528d5376b4e5bd2909f6eb333c1c2b1f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwOTY2OA==", "bodyText": "ack from me", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496609668", "createdAt": "2020-09-29T10:27:33Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/OwnerInfoDTOTranslator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.dto.ModelTranslator;\n+import org.candlepin.dto.ObjectTranslator;\n+import org.candlepin.model.OwnerInfo;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * The OwnerInfoDTOTranslator provides translation from\n+ * OwnerInfo model objects to OwnerInfoDTO\n+ */\n+public class OwnerInfoDTOTranslator implements ObjectTranslator<OwnerInfo, OwnerInfoDTO> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzODA3NQ=="}, "originalCommit": {"oid": "f41bd9062eac655526cd4d7a45db7f7c7fd4188e"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87268966528d5376b4e5bd2909f6eb333c1c2b1f", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/87268966528d5376b4e5bd2909f6eb333c1c2b1f", "committedDate": "2020-09-29T07:26:52Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}, "afterCommit": {"oid": "de72e6192899fc03b145bd49bb13aec8291ba159", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/de72e6192899fc03b145bd49bb13aec8291ba159", "committedDate": "2020-09-29T11:43:01Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4Mzg0NzQy", "url": "https://github.com/candlepin/candlepin/pull/2802#pullrequestreview-498384742", "createdAt": "2020-09-29T11:49:46Z", "commit": {"oid": "de72e6192899fc03b145bd49bb13aec8291ba159"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTo0OTo0NlrOHZpUpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTo0OTo0NlrOHZpUpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1MzQ3OA==", "bodyText": "Unfortunately, it is not as simple as changing the source on the translator from Subscription to Pool.\nWhen the fabricate method creates a new Subscription object, it uses this constructor: public Subscription populate(Pool source, ProductCurator productCurator) which itself does A LOT of work that involves logic, and the ProductCurator. For example, we can't just assign the quantity, but calculate it first with Subscription.setQuantityFromPool.\nWe should move all that logic from the Subscription.populate(source, productCurator) method here because it is basically a translator method hidden within the Subscription class, and entirely remove the following methods, because they are will no longer be needed:\nSubscription.Subscription(Pool source, ProductCurator productCurator)\nSubscription.populate(Pool source, ProductCurator productCurator)\nSubscription.setQuantityFromPool(Pool pool)\nCandlepinPoolManager.fabricateSubscriptionFromPool(Pool pool)\nPoolManager.fabricateSubscriptionFromPool(Pool pool)", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r496653478", "createdAt": "2020-09-29T11:49:46Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/PoolToSubscriptionTranslator.java", "diffHunk": "@@ -74,13 +74,13 @@ public SubscriptionDTO populate(\n             throw new IllegalArgumentException(\"dest is null\");\n         }\n \n-        dest.id(source.getId())\n+        dest.id(source.getSubscriptionId())\n             .quantity(source.getQuantity())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de72e6192899fc03b145bd49bb13aec8291ba159"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de72e6192899fc03b145bd49bb13aec8291ba159", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/de72e6192899fc03b145bd49bb13aec8291ba159", "committedDate": "2020-09-29T11:43:01Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}, "afterCommit": {"oid": "4e455c45e2b74a182c5fa1f13024c70f2d2219e0", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/4e455c45e2b74a182c5fa1f13024c70f2d2219e0", "committedDate": "2020-10-05T08:03:15Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxOTY5NTEx", "url": "https://github.com/candlepin/candlepin/pull/2802#pullrequestreview-501969511", "createdAt": "2020-10-05T11:41:05Z", "commit": {"oid": "4e455c45e2b74a182c5fa1f13024c70f2d2219e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTo0MTowNlrOHcZNKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTo0MTowNlrOHcZNKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzNTE0NA==", "bodyText": "One last thing to mention:\nI think we should preserve these 3 unit tests (this one, along with testFabricateSubWithZeroInstanceMultiplier and testFabricateSubWithMultiplierAndInstanceMultiplier) because they test the quantity translation logic. We can port them directly into PoolToSubscriptionTranslatorTest.java and change the fabricateSubscriptionFromPool call to translator.translate(pool, SubscriptionDTO)", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r499535144", "createdAt": "2020-10-05T11:41:06Z", "author": {"login": "nikosmoum"}, "path": "server/src/test/java/org/candlepin/controller/PoolManagerTest.java", "diffHunk": "@@ -1703,117 +1703,6 @@ public void createPoolsForPoolBonusExist() {\n         assertThrows(IllegalStateException.class, () -> pRules.createAndEnrichPools(p, existingPools));\n     }\n \n-    @Test\n-    public void testFabricateSubscriptionFromPool() {\n-        Product product = TestUtil.createProduct(\"product\", \"Product\");\n-        Product provided1 = TestUtil.createProduct(\"provided-1\", \"Provided 1\");\n-        Product provided2 = TestUtil.createProduct(\"provided-2\", \"Provided 2\");\n-        product.setLocked(true);\n-        provided1.setLocked(true);\n-        provided2.setLocked(true);\n-\n-        ProductData productDTO = product.toDTO();\n-        ProductData provided1DTO = provided1.toDTO();\n-        ProductData provided2DTO = provided2.toDTO();\n-\n-        Pool pool = mock(Pool.class);\n-\n-        HashSet<Product> provided = new HashSet<>();\n-        HashSet<ProductData> providedDTOs = new HashSet<>();\n-        provided.add(provided1);\n-        provided.add(provided2);\n-        providedDTOs.add(provided1DTO);\n-        providedDTOs.add(provided2DTO);\n-\n-        Long quantity = new Long(42);\n-\n-        Date startDate = new Date(System.currentTimeMillis() - 86400000);\n-        Date endDate = new Date(System.currentTimeMillis() + 86400000);\n-        Date updated = new Date();\n-\n-        String subscriptionId = \"test-subscription-1\";\n-\n-        when(pool.getOwner()).thenReturn(owner);\n-        when(pool.getProduct()).thenReturn(product);\n-        when(mockProductCurator.getPoolProvidedProductsCached(any(Pool.class))).thenReturn(provided);\n-        when(pool.getQuantity()).thenReturn(quantity);\n-        when(pool.getStartDate()).thenReturn(startDate);\n-        when(pool.getEndDate()).thenReturn(endDate);\n-        when(pool.getUpdated()).thenReturn(updated);\n-        when(pool.getSubscriptionId()).thenReturn(subscriptionId);\n-        // TODO: Add other attributes to check here.\n-\n-        Subscription fabricated = manager.fabricateSubscriptionFromPool(pool);\n-        pool.populateAllTransientProvidedProducts(mockProductCurator);\n-        assertEquals(owner, fabricated.getOwner());\n-        assertEquals(productDTO, fabricated.getProduct());\n-        assertEquals(providedDTOs, fabricated.getProvidedProducts());\n-        assertEquals(quantity, fabricated.getQuantity());\n-        assertEquals(startDate, fabricated.getStartDate());\n-        assertEquals(endDate, fabricated.getEndDate());\n-        assertEquals(updated, fabricated.getModified());\n-        assertEquals(subscriptionId, fabricated.getId());\n-    }\n-\n-\n-    /**\n-     * See BZ1292283\n-     */\n-    @Test\n-    public void testFabricateSubWithMultiplier() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e455c45e2b74a182c5fa1f13024c70f2d2219e0"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e455c45e2b74a182c5fa1f13024c70f2d2219e0", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/4e455c45e2b74a182c5fa1f13024c70f2d2219e0", "committedDate": "2020-10-05T08:03:15Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}, "afterCommit": {"oid": "c79c43f6e2a2db667d8ac9db4dead8e5fecf3593", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/c79c43f6e2a2db667d8ac9db4dead8e5fecf3593", "committedDate": "2020-10-05T14:16:24Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTA4ODY5", "url": "https://github.com/candlepin/candlepin/pull/2802#pullrequestreview-502108869", "createdAt": "2020-10-05T14:23:17Z", "commit": {"oid": "c79c43f6e2a2db667d8ac9db4dead8e5fecf3593"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMzQyOTc4", "url": "https://github.com/candlepin/candlepin/pull/2802#pullrequestreview-502342978", "createdAt": "2020-10-05T19:09:53Z", "commit": {"oid": "c79c43f6e2a2db667d8ac9db4dead8e5fecf3593"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTowOTo1M1rOHcqKHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTowOTo1M1rOHcqKHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxMjg5NQ==", "bodyText": "Minor grammatical mistake here. Needs either a noun or to drop the \"an\":\n\"Represents owner information\", or \"Represents an owner-information container\"", "url": "https://github.com/candlepin/candlepin/pull/2802#discussion_r499812895", "createdAt": "2020-10-05T19:09:53Z", "author": {"login": "Ceiu"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -5564,6 +7371,47 @@ components:\n             upstreamConsumer:\n               $ref: '#/components/schemas/UpstreamConsumerDTO'\n \n+    OwnerInfo:\n+      description: Represents an owner information", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c79c43f6e2a2db667d8ac9db4dead8e5fecf3593"}, "originalPosition": 2671}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMzQ5NzQ1", "url": "https://github.com/candlepin/candlepin/pull/2802#pullrequestreview-502349745", "createdAt": "2020-10-05T19:20:13Z", "commit": {"oid": "c79c43f6e2a2db667d8ac9db4dead8e5fecf3593"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c79c43f6e2a2db667d8ac9db4dead8e5fecf3593", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/c79c43f6e2a2db667d8ac9db4dead8e5fecf3593", "committedDate": "2020-10-05T14:16:24Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}, "afterCommit": {"oid": "e7c71eba6de0a48569ef7fb6e7bc25f3264a7b6c", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/e7c71eba6de0a48569ef7fb6e7bc25f3264a7b6c", "committedDate": "2020-10-06T05:15:11Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "975f3bfaf5e90b28b5d0e71abb77f4edcc8a7032", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/975f3bfaf5e90b28b5d0e71abb77f4edcc8a7032", "committedDate": "2020-10-07T05:28:07Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7c71eba6de0a48569ef7fb6e7bc25f3264a7b6c", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/e7c71eba6de0a48569ef7fb6e7bc25f3264a7b6c", "committedDate": "2020-10-06T05:15:11Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}, "afterCommit": {"oid": "975f3bfaf5e90b28b5d0e71abb77f4edcc8a7032", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/975f3bfaf5e90b28b5d0e71abb77f4edcc8a7032", "committedDate": "2020-10-07T05:28:07Z", "message": "ENT-1848: Port OwnerResource to spec-first\n - Added endpoints definitions\n - Added specifications for following DTOs\n   1. AbstractCertificateDTO\n   2. ConsumptionTypeCountsDTO\n   3. ImportRecordDTO\n   4. ImportUpstreamConsumerDTO\n   5. OwnerInfoDTO\n   6. SystemPurposeAttributesDTO\n   7. UeberCertificateDTO\n   8. UpstreamConsumerArrayElement\n - Created/updated translators for DTOs\n - Subscription Translator and OwnerInfoBuilder changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2312, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}