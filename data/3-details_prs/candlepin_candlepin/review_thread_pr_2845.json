{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MjcxMTY3", "number": 2845, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNjoxMzoxN1rOE7ZMYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzoxNDowMVrOE7iQ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzE0MjEwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/org/candlepin/common/exceptions/NotImplementedException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNjoxMzoxN1rOH3BEjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDoyNzoyNlrOH3R7dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ1MTI3OQ==", "bodyText": "Copyright header year.", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527451279", "createdAt": "2020-11-20T06:13:17Z", "author": {"login": "wolfdale"}, "path": "common/src/main/java/org/candlepin/common/exceptions/NotImplementedException.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (c) 2009 - 2012 Red Hat, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyNzQ3Nw==", "bodyText": "Fixed", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527727477", "createdAt": "2020-11-20T14:27:26Z", "author": {"login": "Ceiu"}, "path": "common/src/main/java/org/candlepin/common/exceptions/NotImplementedException.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (c) 2009 - 2012 Red Hat, Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ1MTI3OQ=="}, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzE0MzQwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/auth/CloudRegistrationAuth.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNjoxMzozNVrOH3BFgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDoyNzozMFrOH3R7pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ1MTUyMA==", "bodyText": "Incorrect copyright year.", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527451520", "createdAt": "2020-11-20T06:13:35Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/auth/CloudRegistrationAuth.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/**\n+ * Copyright (c) 2009 - 2012 Red Hat, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyNzUyNQ==", "bodyText": "Fixed", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527727525", "createdAt": "2020-11-20T14:27:30Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/auth/CloudRegistrationAuth.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/**\n+ * Copyright (c) 2009 - 2012 Red Hat, Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ1MTUyMA=="}, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzE0NDYwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/api/v1/CloudRegistrationDTO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNjoxMzo0OFrOH3BGWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDoyNzozNFrOH3R73w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ1MTczOQ==", "bodyText": "Incorrect copyright year.", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527451739", "createdAt": "2020-11-20T06:13:48Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/CloudRegistrationDTO.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyNzU4Mw==", "bodyText": "Fixed", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527727583", "createdAt": "2020-11-20T14:27:34Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/CloudRegistrationDTO.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/**\n+ * Copyright (c) 2009 - 2017 Red Hat, Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ1MTczOQ=="}, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzE0NjQyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/service/model/CloudRegistrationInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNjoxNDowN1rOH3BHgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDoyNzo1MVrOH3R8ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ1MjAzMg==", "bodyText": "Typo. It should be identity", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527452032", "createdAt": "2020-11-20T06:14:07Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/service/model/CloudRegistrationInfo.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.service.model;\n+\n+\n+\n+/**\n+ * The CloudRegistrationInfo represents a minimal set of cloud registration information to be used\n+ * for authenticating a given cloud provider and user account for automatic registration in\n+ * Candlepin.\n+ *\n+ * Data which is not set or does not change should be represented by null values. To explicitly\n+ * clear a value, an empty string or non-null \"empty\" value should be used instead.\n+ */\n+public interface CloudRegistrationInfo {\n+\n+    /**\n+     * Fetches the cloud provider type.\n+     *\n+     * @return\n+     *  the cloud provider type, or null if the provider type has not been set\n+     */\n+    String getType();\n+\n+    /**\n+     * Fetches the metadata for the cloud provider, such as the user's account identifiers.\n+     *\n+     * @return\n+     *  the cloud provider metadata, or null of the metadata has not been set\n+     */\n+    String getMetadata();\n+\n+    /**\n+     * Fetches the signature to use for verifying the identy of the cloud provider.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyNzgwMg==", "bodyText": "Fixed", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527727802", "createdAt": "2020-11-20T14:27:51Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/service/model/CloudRegistrationInfo.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.service.model;\n+\n+\n+\n+/**\n+ * The CloudRegistrationInfo represents a minimal set of cloud registration information to be used\n+ * for authenticating a given cloud provider and user account for automatic registration in\n+ * Candlepin.\n+ *\n+ * Data which is not set or does not change should be represented by null values. To explicitly\n+ * clear a value, an empty string or non-null \"empty\" value should be used instead.\n+ */\n+public interface CloudRegistrationInfo {\n+\n+    /**\n+     * Fetches the cloud provider type.\n+     *\n+     * @return\n+     *  the cloud provider type, or null if the provider type has not been set\n+     */\n+    String getType();\n+\n+    /**\n+     * Fetches the metadata for the cloud provider, such as the user's account identifiers.\n+     *\n+     * @return\n+     *  the cloud provider metadata, or null of the metadata has not been set\n+     */\n+    String getMetadata();\n+\n+    /**\n+     * Fetches the signature to use for verifying the identy of the cloud provider.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ1MjAzMg=="}, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODU5NTI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/service/CloudRegistrationAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzowMzo1MFrOH3O2Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjowNzoxM1rOH3V_WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3Njk3OA==", "bodyText": "wrong comment", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527676978", "createdAt": "2020-11-20T13:03:50Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/service/CloudRegistrationAdapter.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.service;\n+\n+import org.candlepin.service.exception.CloudRegistrationAuthorizationException;\n+import org.candlepin.service.exception.MalformedCloudRegistrationException;\n+import org.candlepin.service.model.CloudRegistrationInfo;\n+\n+\n+\n+/**\n+ * Interface to the Certificate Service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5NDAwOA==", "bodyText": "Fixed", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527794008", "createdAt": "2020-11-20T16:07:13Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/service/CloudRegistrationAdapter.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.service;\n+\n+import org.candlepin.service.exception.CloudRegistrationAuthorizationException;\n+import org.candlepin.service.exception.MalformedCloudRegistrationException;\n+import org.candlepin.service.model.CloudRegistrationInfo;\n+\n+\n+\n+/**\n+ * Interface to the Certificate Service.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3Njk3OA=="}, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODYwMjI3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resource/CloudRegistrationResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzowNTo1MVrOH3O6Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjowODoxMlrOH3WBoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3ODAyMg==", "bodyText": "redundant word", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527678022", "createdAt": "2020-11-20T13:05:51Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resource/CloudRegistrationResource.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.resource;\n+\n+import org.candlepin.auth.CloudRegistrationAuth;\n+import org.candlepin.auth.Principal;\n+import org.candlepin.common.auth.SecurityHole;\n+import org.candlepin.common.exceptions.BadRequestException;\n+import org.candlepin.common.exceptions.NotAuthorizedException;\n+import org.candlepin.common.exceptions.NotImplementedException;\n+import org.candlepin.dto.api.v1.CloudRegistrationDTO;\n+import org.candlepin.service.exception.CloudRegistrationAuthorizationException;\n+import org.candlepin.service.exception.MalformedCloudRegistrationException;\n+\n+\n+import com.google.inject.Inject;\n+\n+import org.xnap.commons.i18n.I18n;\n+\n+import java.util.Objects;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+\n+\n+\n+/**\n+ * Endpoints for cloud-features features and authentication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5NDU5Mw==", "bodyText": "Fixed", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527794593", "createdAt": "2020-11-20T16:08:12Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/CloudRegistrationResource.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.resource;\n+\n+import org.candlepin.auth.CloudRegistrationAuth;\n+import org.candlepin.auth.Principal;\n+import org.candlepin.common.auth.SecurityHole;\n+import org.candlepin.common.exceptions.BadRequestException;\n+import org.candlepin.common.exceptions.NotAuthorizedException;\n+import org.candlepin.common.exceptions.NotImplementedException;\n+import org.candlepin.dto.api.v1.CloudRegistrationDTO;\n+import org.candlepin.service.exception.CloudRegistrationAuthorizationException;\n+import org.candlepin.service.exception.MalformedCloudRegistrationException;\n+\n+\n+import com.google.inject.Inject;\n+\n+import org.xnap.commons.i18n.I18n;\n+\n+import java.util.Objects;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+\n+\n+\n+/**\n+ * Endpoints for cloud-features features and authentication", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3ODAyMg=="}, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODYxMzAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/auth/CloudRegistrationAuth.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzowOToyNFrOH3PA3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjowOTo1OFrOH3WGDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3OTcxMQ==", "bodyText": "This is always going to be null, since we're reaching this code from an endpoint with @SecurityHole as mentioned in my other comment", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527679711", "createdAt": "2020-11-20T13:09:24Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/auth/CloudRegistrationAuth.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/**\n+ * Copyright (c) 2009 - 2012 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.auth;\n+\n+import org.candlepin.auth.permissions.OwnerPermission;\n+import org.candlepin.auth.permissions.Permission;\n+import org.candlepin.common.config.Configuration;\n+import org.candlepin.common.config.ConversionException;\n+import org.candlepin.common.resteasy.auth.AuthUtil;\n+import org.candlepin.config.ConfigProperties;\n+import org.candlepin.model.Owner;\n+import org.candlepin.model.OwnerCurator;\n+import org.candlepin.pki.CertificateReader;\n+import org.candlepin.service.CloudRegistrationAdapter;\n+import org.candlepin.service.exception.CloudRegistrationAuthorizationException;\n+import org.candlepin.service.exception.MalformedCloudRegistrationException;\n+import org.candlepin.service.model.CloudRegistrationInfo;\n+import org.candlepin.util.Util;\n+\n+import org.jboss.resteasy.spi.HttpRequest;\n+import org.keycloak.TokenVerifier;\n+import org.keycloak.common.VerificationException;\n+import org.keycloak.common.util.KeyUtils;\n+import org.keycloak.crypto.Algorithm;\n+import org.keycloak.crypto.AsymmetricSignatureSignerContext;\n+import org.keycloak.crypto.KeyType;\n+import org.keycloak.crypto.KeyUse;\n+import org.keycloak.crypto.KeyWrapper;\n+import org.keycloak.jose.jws.JWSBuilder;\n+import org.keycloak.representations.JsonWebToken;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.xnap.commons.i18n.I18n;\n+\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.ws.rs.core.Context;\n+\n+\n+\n+/**\n+ * AuthenticationProvider that accepts an {@link AccessToken} generated from an earlier call to the\n+ * CloudRegistration authorize endpoint\n+ */\n+public class CloudRegistrationAuth implements AuthProvider {\n+    private static Logger log = LoggerFactory.getLogger(CloudRegistrationAuth.class);\n+\n+    private static final String TOKEN_ALGORITHM = Algorithm.RS512;\n+    private static final String TOKEN_SUBJECT_DEFAULT = \"cloud_auth\";\n+    private static final String AUTH_TYPE = \"Bearer\";\n+    private static final String TOKEN_TYPE = \"CP-Cloud-Registration\";\n+\n+    @Context private ServletRequest servletRequest;\n+    @Context private ServletResponse servletResponse;\n+\n+    private final Configuration config;\n+    private final Provider<I18n> i18nProvider;\n+    private final CertificateReader certificateReader;\n+    private final CloudRegistrationAdapter cloudRegistrationAdapter;\n+    private final OwnerCurator ownerCurator;\n+\n+    private final boolean enabled;\n+    private final String jwtIssuer;\n+    private final int jwtTokenTTL; // seconds\n+\n+    private final X509Certificate certificate;\n+    private final PublicKey publicKey;\n+    private final PrivateKey privateKey;\n+\n+\n+    @Inject\n+    public CloudRegistrationAuth(Configuration config, Provider<I18n> i18nProvider,\n+        CertificateReader certificateReader, CloudRegistrationAdapter cloudRegistrationAdapter,\n+        OwnerCurator ownerCurator) {\n+\n+        this.config = Objects.requireNonNull(config);\n+        this.i18nProvider = Objects.requireNonNull(i18nProvider);\n+        this.certificateReader = Objects.requireNonNull(certificateReader);\n+        this.cloudRegistrationAdapter = Objects.requireNonNull(cloudRegistrationAdapter);\n+        this.ownerCurator = Objects.requireNonNull(ownerCurator);\n+\n+        // Pre-parse config values we'll be using a bunch\n+        try {\n+            this.enabled = this.config.getBoolean(ConfigProperties.CLOUD_AUTHENTICATION);\n+\n+            this.jwtIssuer = this.config.getProperty(ConfigProperties.JWT_ISSUER);\n+            this.jwtTokenTTL = this.config.getInt(ConfigProperties.JWT_TOKEN_TTL);\n+        }\n+        catch (ConversionException e) {\n+            // Try to pretty up the exception for easy debugging\n+            throw new RuntimeException(\"Invalid value(s) found while parsing JWT configuration\", e);\n+        }\n+\n+        // Fetch our keys\n+        try {\n+            this.certificate = this.certificateReader.getCACert();\n+            this.publicKey = this.certificate.getPublicKey();\n+            this.privateKey = this.certificateReader.getCaKey();\n+        }\n+        catch (Exception e) {\n+            throw new RuntimeException(\"Unable to load public and private keys\", e);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Principal getPrincipal(HttpRequest httpRequest) {\n+        if (!this.enabled) {\n+            // If cloud auth isn't enabled, don't even attempt to validate anything\n+            return null;\n+        }\n+\n+        String auth = AuthUtil.getHeader(httpRequest, \"Authorization\");\n+        if (auth.isEmpty()) {\n+            // Auth header is empty; no type or token provided\n+            return null;\n+        }\n+\n+        String[] authChunks = auth.split(\" \");\n+        if (!AUTH_TYPE.equalsIgnoreCase(authChunks[0]) || authChunks.length != 2) {\n+            // Not a type we handle; ignore it and hope another auth filter picks it up\n+            return null;\n+        }\n+\n+        try {\n+            TokenVerifier<JsonWebToken> verifier = TokenVerifier.create(authChunks[1], JsonWebToken.class)\n+                .publicKey(publicKey)\n+                .verify();\n+\n+            JsonWebToken token = verifier.getToken();\n+            String[] audiences = token.getAudience();\n+\n+            // Verify that the token is active and hasn't expired\n+            if (!token.isActive()) {\n+                throw new VerificationException(\"Token is not active or has expired\");\n+            }\n+\n+            // Verify the token has the JWT type we're expecting\n+            if (TOKEN_TYPE.equalsIgnoreCase(token.getType())) {\n+                // Pull the subject (username) and owner key(s) out of the token\n+                String subject = token.getSubject();\n+                String ownerKey = audiences != null && audiences.length > 0 ? audiences[0] : null;\n+\n+                if (subject == null || subject.isEmpty()) {\n+                    throw new VerificationException(\"Token contains an invalid subject: \" + subject);\n+                }\n+\n+                if (ownerKey == null || ownerKey.isEmpty()) {\n+                    throw new VerificationException(\"Token contains an invalid audience: \" + ownerKey);\n+                }\n+\n+                return this.createCloudUserPrincipal(subject, ownerKey);\n+            }\n+        }\n+        catch (VerificationException e) {\n+            log.debug(\"Cloud registration token validation failed:\", e);\n+\n+            // Impl note:\n+            // Since we're using a common/standard auth type (bearer), we can't immediately fail\n+            // out here, as it's possible the token will be verified by another provider\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Creates a dummy user principal with the minimum amount of information and access to complete\n+     * a user registration. The username of the principal will be the subject provided.\n+     *\n+     * @param subject\n+     *  the subject for which to create the principal; will be used as the username\n+     *\n+     * @param ownerKey\n+     *  the key of an organization in which the principal will have authorization to register\n+     *  clients\n+     *\n+     * @return\n+     *  a minimal UserPrincipal representing the cloud registration token\n+     */\n+    private UserPrincipal createCloudUserPrincipal(String subject, String ownerKey) {\n+        Owner owner = this.ownerCurator.getByKey(ownerKey);\n+        if (owner == null) {\n+            // If the owner does not exist, we might be creating it on client registration, so\n+            // make a fake owner to pass into our permission object\n+            owner = new Owner(ownerKey, ownerKey);\n+        }\n+\n+        List<Permission> permissions = Arrays.asList(\n+            new OwnerPermission(owner, Access.CREATE)\n+            // Add any additional permissions here as needed\n+        );\n+\n+        return new UserPrincipal(subject, permissions, false);\n+    }\n+\n+    /**\n+     * Validates the provided cloud registration information, and generates a registration token if\n+     * valid\n+     *\n+     * @param principal\n+     *  the principal for which to generate the token\n+     *\n+     * @param cloudRegistrationInfo\n+     *  The registration information to validate\n+     *\n+     * @throws UnsupportedOperationException\n+     *  if the current Candlepin configuration does not support cloud registration\n+     *\n+     * @throws CloudRegistrationAuthorizationException\n+     *  if cloud registration is not permitted for the cloud provider or account holder specified by\n+     *  the cloud registration details\n+     *\n+     * @throws MalformedCloudRegistrationException\n+     *  if the cloud registration details are null, incomplete, or malformed\n+     *\n+     * @return\n+     *  a registration token to be used for completing registration for the client identified by the\n+     *  specified cloud registration details\n+     */\n+    public String generateRegistrationToken(Principal principal, CloudRegistrationInfo cloudRegistrationInfo)\n+        throws CloudRegistrationAuthorizationException, MalformedCloudRegistrationException {\n+\n+        if (principal == null) {\n+            throw new IllegalArgumentException(\"principal is null\");\n+        }\n+\n+        if (cloudRegistrationInfo == null) {\n+            throw new IllegalArgumentException(\"cloudRegistrationInfo is null\");\n+        }\n+\n+        String ownerKey = this.cloudRegistrationAdapter.resolveCloudRegistrationData(cloudRegistrationInfo);\n+        if (ownerKey == null) {\n+            String errmsg = this.i18nProvider.get()\n+                .tr(\"cloud provider or account details could not be resolved to an organization\");\n+\n+            throw new CloudRegistrationAuthorizationException(errmsg);\n+        }\n+\n+        return this.buildRegistrationToken(principal, ownerKey);\n+    }\n+\n+    /**\n+     * Creates a new cloud registration token for the specific owner key. The owner/organization\n+     * will be set as the subject of the token, and need not explicitly exist locally in Candlepin.\n+     *\n+     * @param principal\n+     *  the principal for which the token will be generated\n+     *\n+     * @param ownerKey\n+     *  The key of the owner/organization for which the token will be generated\n+     *\n+     * @return\n+     *  an encrypted JWT token string\n+     */\n+    private String buildRegistrationToken(Principal principal, String ownerKey) {\n+        String keyId = KeyUtils.createKeyId(this.publicKey);\n+\n+        // Try to use the username present in the principal; otherwise use the default\n+        String username = principal.getUsername();\n+        if (username == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5NTcyNw==", "bodyText": "Not always; it depends on the headers provided in the request. More on this below.", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527795727", "createdAt": "2020-11-20T16:09:58Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/auth/CloudRegistrationAuth.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/**\n+ * Copyright (c) 2009 - 2012 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.auth;\n+\n+import org.candlepin.auth.permissions.OwnerPermission;\n+import org.candlepin.auth.permissions.Permission;\n+import org.candlepin.common.config.Configuration;\n+import org.candlepin.common.config.ConversionException;\n+import org.candlepin.common.resteasy.auth.AuthUtil;\n+import org.candlepin.config.ConfigProperties;\n+import org.candlepin.model.Owner;\n+import org.candlepin.model.OwnerCurator;\n+import org.candlepin.pki.CertificateReader;\n+import org.candlepin.service.CloudRegistrationAdapter;\n+import org.candlepin.service.exception.CloudRegistrationAuthorizationException;\n+import org.candlepin.service.exception.MalformedCloudRegistrationException;\n+import org.candlepin.service.model.CloudRegistrationInfo;\n+import org.candlepin.util.Util;\n+\n+import org.jboss.resteasy.spi.HttpRequest;\n+import org.keycloak.TokenVerifier;\n+import org.keycloak.common.VerificationException;\n+import org.keycloak.common.util.KeyUtils;\n+import org.keycloak.crypto.Algorithm;\n+import org.keycloak.crypto.AsymmetricSignatureSignerContext;\n+import org.keycloak.crypto.KeyType;\n+import org.keycloak.crypto.KeyUse;\n+import org.keycloak.crypto.KeyWrapper;\n+import org.keycloak.jose.jws.JWSBuilder;\n+import org.keycloak.representations.JsonWebToken;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.xnap.commons.i18n.I18n;\n+\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.ws.rs.core.Context;\n+\n+\n+\n+/**\n+ * AuthenticationProvider that accepts an {@link AccessToken} generated from an earlier call to the\n+ * CloudRegistration authorize endpoint\n+ */\n+public class CloudRegistrationAuth implements AuthProvider {\n+    private static Logger log = LoggerFactory.getLogger(CloudRegistrationAuth.class);\n+\n+    private static final String TOKEN_ALGORITHM = Algorithm.RS512;\n+    private static final String TOKEN_SUBJECT_DEFAULT = \"cloud_auth\";\n+    private static final String AUTH_TYPE = \"Bearer\";\n+    private static final String TOKEN_TYPE = \"CP-Cloud-Registration\";\n+\n+    @Context private ServletRequest servletRequest;\n+    @Context private ServletResponse servletResponse;\n+\n+    private final Configuration config;\n+    private final Provider<I18n> i18nProvider;\n+    private final CertificateReader certificateReader;\n+    private final CloudRegistrationAdapter cloudRegistrationAdapter;\n+    private final OwnerCurator ownerCurator;\n+\n+    private final boolean enabled;\n+    private final String jwtIssuer;\n+    private final int jwtTokenTTL; // seconds\n+\n+    private final X509Certificate certificate;\n+    private final PublicKey publicKey;\n+    private final PrivateKey privateKey;\n+\n+\n+    @Inject\n+    public CloudRegistrationAuth(Configuration config, Provider<I18n> i18nProvider,\n+        CertificateReader certificateReader, CloudRegistrationAdapter cloudRegistrationAdapter,\n+        OwnerCurator ownerCurator) {\n+\n+        this.config = Objects.requireNonNull(config);\n+        this.i18nProvider = Objects.requireNonNull(i18nProvider);\n+        this.certificateReader = Objects.requireNonNull(certificateReader);\n+        this.cloudRegistrationAdapter = Objects.requireNonNull(cloudRegistrationAdapter);\n+        this.ownerCurator = Objects.requireNonNull(ownerCurator);\n+\n+        // Pre-parse config values we'll be using a bunch\n+        try {\n+            this.enabled = this.config.getBoolean(ConfigProperties.CLOUD_AUTHENTICATION);\n+\n+            this.jwtIssuer = this.config.getProperty(ConfigProperties.JWT_ISSUER);\n+            this.jwtTokenTTL = this.config.getInt(ConfigProperties.JWT_TOKEN_TTL);\n+        }\n+        catch (ConversionException e) {\n+            // Try to pretty up the exception for easy debugging\n+            throw new RuntimeException(\"Invalid value(s) found while parsing JWT configuration\", e);\n+        }\n+\n+        // Fetch our keys\n+        try {\n+            this.certificate = this.certificateReader.getCACert();\n+            this.publicKey = this.certificate.getPublicKey();\n+            this.privateKey = this.certificateReader.getCaKey();\n+        }\n+        catch (Exception e) {\n+            throw new RuntimeException(\"Unable to load public and private keys\", e);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Principal getPrincipal(HttpRequest httpRequest) {\n+        if (!this.enabled) {\n+            // If cloud auth isn't enabled, don't even attempt to validate anything\n+            return null;\n+        }\n+\n+        String auth = AuthUtil.getHeader(httpRequest, \"Authorization\");\n+        if (auth.isEmpty()) {\n+            // Auth header is empty; no type or token provided\n+            return null;\n+        }\n+\n+        String[] authChunks = auth.split(\" \");\n+        if (!AUTH_TYPE.equalsIgnoreCase(authChunks[0]) || authChunks.length != 2) {\n+            // Not a type we handle; ignore it and hope another auth filter picks it up\n+            return null;\n+        }\n+\n+        try {\n+            TokenVerifier<JsonWebToken> verifier = TokenVerifier.create(authChunks[1], JsonWebToken.class)\n+                .publicKey(publicKey)\n+                .verify();\n+\n+            JsonWebToken token = verifier.getToken();\n+            String[] audiences = token.getAudience();\n+\n+            // Verify that the token is active and hasn't expired\n+            if (!token.isActive()) {\n+                throw new VerificationException(\"Token is not active or has expired\");\n+            }\n+\n+            // Verify the token has the JWT type we're expecting\n+            if (TOKEN_TYPE.equalsIgnoreCase(token.getType())) {\n+                // Pull the subject (username) and owner key(s) out of the token\n+                String subject = token.getSubject();\n+                String ownerKey = audiences != null && audiences.length > 0 ? audiences[0] : null;\n+\n+                if (subject == null || subject.isEmpty()) {\n+                    throw new VerificationException(\"Token contains an invalid subject: \" + subject);\n+                }\n+\n+                if (ownerKey == null || ownerKey.isEmpty()) {\n+                    throw new VerificationException(\"Token contains an invalid audience: \" + ownerKey);\n+                }\n+\n+                return this.createCloudUserPrincipal(subject, ownerKey);\n+            }\n+        }\n+        catch (VerificationException e) {\n+            log.debug(\"Cloud registration token validation failed:\", e);\n+\n+            // Impl note:\n+            // Since we're using a common/standard auth type (bearer), we can't immediately fail\n+            // out here, as it's possible the token will be verified by another provider\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Creates a dummy user principal with the minimum amount of information and access to complete\n+     * a user registration. The username of the principal will be the subject provided.\n+     *\n+     * @param subject\n+     *  the subject for which to create the principal; will be used as the username\n+     *\n+     * @param ownerKey\n+     *  the key of an organization in which the principal will have authorization to register\n+     *  clients\n+     *\n+     * @return\n+     *  a minimal UserPrincipal representing the cloud registration token\n+     */\n+    private UserPrincipal createCloudUserPrincipal(String subject, String ownerKey) {\n+        Owner owner = this.ownerCurator.getByKey(ownerKey);\n+        if (owner == null) {\n+            // If the owner does not exist, we might be creating it on client registration, so\n+            // make a fake owner to pass into our permission object\n+            owner = new Owner(ownerKey, ownerKey);\n+        }\n+\n+        List<Permission> permissions = Arrays.asList(\n+            new OwnerPermission(owner, Access.CREATE)\n+            // Add any additional permissions here as needed\n+        );\n+\n+        return new UserPrincipal(subject, permissions, false);\n+    }\n+\n+    /**\n+     * Validates the provided cloud registration information, and generates a registration token if\n+     * valid\n+     *\n+     * @param principal\n+     *  the principal for which to generate the token\n+     *\n+     * @param cloudRegistrationInfo\n+     *  The registration information to validate\n+     *\n+     * @throws UnsupportedOperationException\n+     *  if the current Candlepin configuration does not support cloud registration\n+     *\n+     * @throws CloudRegistrationAuthorizationException\n+     *  if cloud registration is not permitted for the cloud provider or account holder specified by\n+     *  the cloud registration details\n+     *\n+     * @throws MalformedCloudRegistrationException\n+     *  if the cloud registration details are null, incomplete, or malformed\n+     *\n+     * @return\n+     *  a registration token to be used for completing registration for the client identified by the\n+     *  specified cloud registration details\n+     */\n+    public String generateRegistrationToken(Principal principal, CloudRegistrationInfo cloudRegistrationInfo)\n+        throws CloudRegistrationAuthorizationException, MalformedCloudRegistrationException {\n+\n+        if (principal == null) {\n+            throw new IllegalArgumentException(\"principal is null\");\n+        }\n+\n+        if (cloudRegistrationInfo == null) {\n+            throw new IllegalArgumentException(\"cloudRegistrationInfo is null\");\n+        }\n+\n+        String ownerKey = this.cloudRegistrationAdapter.resolveCloudRegistrationData(cloudRegistrationInfo);\n+        if (ownerKey == null) {\n+            String errmsg = this.i18nProvider.get()\n+                .tr(\"cloud provider or account details could not be resolved to an organization\");\n+\n+            throw new CloudRegistrationAuthorizationException(errmsg);\n+        }\n+\n+        return this.buildRegistrationToken(principal, ownerKey);\n+    }\n+\n+    /**\n+     * Creates a new cloud registration token for the specific owner key. The owner/organization\n+     * will be set as the subject of the token, and need not explicitly exist locally in Candlepin.\n+     *\n+     * @param principal\n+     *  the principal for which the token will be generated\n+     *\n+     * @param ownerKey\n+     *  The key of the owner/organization for which the token will be generated\n+     *\n+     * @return\n+     *  an encrypted JWT token string\n+     */\n+    private String buildRegistrationToken(Principal principal, String ownerKey) {\n+        String keyId = KeyUtils.createKeyId(this.publicKey);\n+\n+        // Try to use the username present in the principal; otherwise use the default\n+        String username = principal.getUsername();\n+        if (username == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3OTcxMQ=="}, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODYyODA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resource/CloudRegistrationResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzoxNDowMVrOH3PJ7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTo1MjoxNFrOH6YNug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4MjAzMQ==", "bodyText": "I think it is reasonable to assume that no client is going to hit this endpoint by providing a username/password, or any other kind of existing authentication (keycloak, jtw, oauth, etc.), because if they are here, they're looking to get authenticated in the first place. Which would mean this principal is always going to be a NoAuthPrincipal (because we have @SecurityHole set) which has no authentication at all. Looking further at what the code is doing with it, it only uses the getUsername() method, which will always return null in the case of a NoAuthPrincipal, so I don't think we really need this variable at all.", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527682031", "createdAt": "2020-11-20T13:14:01Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resource/CloudRegistrationResource.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.resource;\n+\n+import org.candlepin.auth.CloudRegistrationAuth;\n+import org.candlepin.auth.Principal;\n+import org.candlepin.common.auth.SecurityHole;\n+import org.candlepin.common.exceptions.BadRequestException;\n+import org.candlepin.common.exceptions.NotAuthorizedException;\n+import org.candlepin.common.exceptions.NotImplementedException;\n+import org.candlepin.dto.api.v1.CloudRegistrationDTO;\n+import org.candlepin.service.exception.CloudRegistrationAuthorizationException;\n+import org.candlepin.service.exception.MalformedCloudRegistrationException;\n+\n+\n+import com.google.inject.Inject;\n+\n+import org.xnap.commons.i18n.I18n;\n+\n+import java.util.Objects;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+\n+\n+\n+/**\n+ * Endpoints for cloud-features features and authentication\n+ */\n+@Path(\"/cloud\")\n+public class CloudRegistrationResource {\n+    private final CloudRegistrationAuth cloudRegistrationAuth;\n+\n+    private final I18n i18n;\n+\n+    @Inject\n+    public CloudRegistrationResource(I18n i18n, CloudRegistrationAuth cloudRegistrationAuth) {\n+        this.i18n = Objects.requireNonNull(i18n);\n+        this.cloudRegistrationAuth = Objects.requireNonNull(cloudRegistrationAuth);\n+    }\n+\n+    @POST\n+    @Path(\"authorize\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @SecurityHole(noAuth = true)\n+    public String authorize(CloudRegistrationDTO cloudRegDTO,\n+        @Context Principal principal) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxMDgzNw==", "bodyText": "The intent here is to allow a principal, if present, to be (partially) carried forward. In general, at least today, I agree that this will virtually always going to resolve to the default.\nThis is one of those things where I feel we should be doing something to track who is doing what. Especially since in the current design, the token usage is not limited to one use, since this is all stateless. We could use the correlation ID and make sure that matches during the auth step.\nGiven that we require a rather destructive permission, we should probably do something.", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r527810837", "createdAt": "2020-11-20T16:32:50Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/CloudRegistrationResource.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.resource;\n+\n+import org.candlepin.auth.CloudRegistrationAuth;\n+import org.candlepin.auth.Principal;\n+import org.candlepin.common.auth.SecurityHole;\n+import org.candlepin.common.exceptions.BadRequestException;\n+import org.candlepin.common.exceptions.NotAuthorizedException;\n+import org.candlepin.common.exceptions.NotImplementedException;\n+import org.candlepin.dto.api.v1.CloudRegistrationDTO;\n+import org.candlepin.service.exception.CloudRegistrationAuthorizationException;\n+import org.candlepin.service.exception.MalformedCloudRegistrationException;\n+\n+\n+import com.google.inject.Inject;\n+\n+import org.xnap.commons.i18n.I18n;\n+\n+import java.util.Objects;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+\n+\n+\n+/**\n+ * Endpoints for cloud-features features and authentication\n+ */\n+@Path(\"/cloud\")\n+public class CloudRegistrationResource {\n+    private final CloudRegistrationAuth cloudRegistrationAuth;\n+\n+    private final I18n i18n;\n+\n+    @Inject\n+    public CloudRegistrationResource(I18n i18n, CloudRegistrationAuth cloudRegistrationAuth) {\n+        this.i18n = Objects.requireNonNull(i18n);\n+        this.cloudRegistrationAuth = Objects.requireNonNull(cloudRegistrationAuth);\n+    }\n+\n+    @POST\n+    @Path(\"authorize\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @SecurityHole(noAuth = true)\n+    public String authorize(CloudRegistrationDTO cloudRegDTO,\n+        @Context Principal principal) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4MjAzMQ=="}, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3NjE4Ng==", "bodyText": "I suppose we can keep the principal here for now, although it's not directly linked to using the correlation ID (I would imagine that would be set on the token itself, not having anything to do with the principal)", "url": "https://github.com/candlepin/candlepin/pull/2845#discussion_r530976186", "createdAt": "2020-11-26T11:52:14Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resource/CloudRegistrationResource.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.resource;\n+\n+import org.candlepin.auth.CloudRegistrationAuth;\n+import org.candlepin.auth.Principal;\n+import org.candlepin.common.auth.SecurityHole;\n+import org.candlepin.common.exceptions.BadRequestException;\n+import org.candlepin.common.exceptions.NotAuthorizedException;\n+import org.candlepin.common.exceptions.NotImplementedException;\n+import org.candlepin.dto.api.v1.CloudRegistrationDTO;\n+import org.candlepin.service.exception.CloudRegistrationAuthorizationException;\n+import org.candlepin.service.exception.MalformedCloudRegistrationException;\n+\n+\n+import com.google.inject.Inject;\n+\n+import org.xnap.commons.i18n.I18n;\n+\n+import java.util.Objects;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+\n+\n+\n+/**\n+ * Endpoints for cloud-features features and authentication\n+ */\n+@Path(\"/cloud\")\n+public class CloudRegistrationResource {\n+    private final CloudRegistrationAuth cloudRegistrationAuth;\n+\n+    private final I18n i18n;\n+\n+    @Inject\n+    public CloudRegistrationResource(I18n i18n, CloudRegistrationAuth cloudRegistrationAuth) {\n+        this.i18n = Objects.requireNonNull(i18n);\n+        this.cloudRegistrationAuth = Objects.requireNonNull(cloudRegistrationAuth);\n+    }\n+\n+    @POST\n+    @Path(\"authorize\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @SecurityHole(noAuth = true)\n+    public String authorize(CloudRegistrationDTO cloudRegDTO,\n+        @Context Principal principal) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4MjAzMQ=="}, "originalCommit": {"oid": "85a55dabf96f5fbe1eec0f150592f4fce4bd07e2"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4018, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}