{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTM0NTkz", "number": 2698, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODoxNjoxMlrOD79W1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo0ODoyOVrOD8cWCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTk3ODQ1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODoxNjoxMlrOGUmfUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1NDozM1rOGUyxug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1NTMxNQ==", "bodyText": "Should we be deprecating this class (and ProductManager) as a whole? It is just the import* methods used by refresh that are deprecated really, but these classes provide CRUD methods for custom Content & Products (unrelated to Refresh), so I'd not say they should be deprecated", "url": "https://github.com/candlepin/candlepin/pull/2698#discussion_r424255315", "createdAt": "2020-05-13T08:16:12Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -60,7 +55,13 @@\n  * <p></p>\n  * The methods provided by this class are the prefered methods to use for CRUD operations on\n  * content, to ensure content versioning and linking is handled properly.\n+ *\n+ * @deprecated\n+ *  This class's primary purpose has been replaced by the RefreshWorker and its various components.\n+ *  New code should avoid using this class and its methods if at all possible, instead opting to\n+ *  use the RefreshWorker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca971519bfc4af0e4e6c9a272e1e8698b09d3e3b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQzMjU0NA==", "bodyText": "There are a few more improvements overall to do (such as adding deletion functionality), but aside from that, the CRUD operations on products and content is basically \"change an entity and then update everything above it\", most of which is just duplicating what the RefreshWorker does.\nAt the end of the card I created for this, I noted that if we opt to keep them around, they should be nothing more than wrappers around the RefreshWorker setup and execution.", "url": "https://github.com/candlepin/candlepin/pull/2698#discussion_r424432544", "createdAt": "2020-05-13T13:22:27Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -60,7 +55,13 @@\n  * <p></p>\n  * The methods provided by this class are the prefered methods to use for CRUD operations on\n  * content, to ensure content versioning and linking is handled properly.\n+ *\n+ * @deprecated\n+ *  This class's primary purpose has been replaced by the RefreshWorker and its various components.\n+ *  New code should avoid using this class and its methods if at all possible, instead opting to\n+ *  use the RefreshWorker.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1NTMxNQ=="}, "originalCommit": {"oid": "ca971519bfc4af0e4e6c9a272e1e8698b09d3e3b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1NjYzNA==", "bodyText": "I've removed the deprecation annotation from ContentManager and moved ProductManager's onto importProducts, but this is something that needs to be cleaned up eventually. It's almost entirely dead code at this point.", "url": "https://github.com/candlepin/candlepin/pull/2698#discussion_r424456634", "createdAt": "2020-05-13T13:54:33Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ContentManager.java", "diffHunk": "@@ -60,7 +55,13 @@\n  * <p></p>\n  * The methods provided by this class are the prefered methods to use for CRUD operations on\n  * content, to ensure content versioning and linking is handled properly.\n+ *\n+ * @deprecated\n+ *  This class's primary purpose has been replaced by the RefreshWorker and its various components.\n+ *  New code should avoid using this class and its methods if at all possible, instead opting to\n+ *  use the RefreshWorker.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1NTMxNQ=="}, "originalCommit": {"oid": "ca971519bfc4af0e4e6c9a272e1e8698b09d3e3b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjYxMzQxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMToxNzowMFrOGUs0wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMToxNzowMFrOGUs0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1OTEwNg==", "bodyText": "Same question as ContentManager", "url": "https://github.com/candlepin/candlepin/pull/2698#discussion_r424359106", "createdAt": "2020-05-13T11:17:00Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -62,7 +62,13 @@\n  * <p></p>\n  * The methods provided by this class are the prefered methods to use for CRUD operations on\n  * products, to ensure product versioning and linking is handled properly.\n+ *\n+ * @deprecated\n+ *  This class's primary purpose has been replaced by the RefreshWorker and its various components.\n+ *  New code should avoid using this class and its methods if at all possible, instead opting to\n+ *  use the RefreshWorker.\n  */\n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca971519bfc4af0e4e6c9a272e1e8698b09d3e3b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjYyMjA4OnYy", "diffSide": "LEFT", "path": "server/src/test/java/org/candlepin/controller/PoolManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMToxOTo1OFrOGUs6OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1MTo1OVrOGUyqEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2MDUwNQ==", "bodyText": "This file also has commented out calls of these methods throughout many tests like the following, which should be removed:\n// this.mockProductImport(owner, product);\n// this.mockContentImport(owner, new Content[] {});", "url": "https://github.com/candlepin/candlepin/pull/2698#discussion_r424360505", "createdAt": "2020-05-13T11:19:58Z", "author": {"login": "nikosmoum"}, "path": "server/src/test/java/org/candlepin/controller/PoolManagerTest.java", "diffHunk": "@@ -579,76 +579,6 @@ public RefreshResult answer(InvocationOnMock iom) throws Throwable {\n         .when(this.refreshWorker).execute(eq(owner));\n     }\n \n-    // private void mockProductImport(Owner owner, final Map<String, Product> products) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca971519bfc4af0e4e6c9a272e1e8698b09d3e3b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1NDY3NQ==", "bodyText": "Fixed", "url": "https://github.com/candlepin/candlepin/pull/2698#discussion_r424454675", "createdAt": "2020-05-13T13:51:59Z", "author": {"login": "Ceiu"}, "path": "server/src/test/java/org/candlepin/controller/PoolManagerTest.java", "diffHunk": "@@ -579,76 +579,6 @@ public RefreshResult answer(InvocationOnMock iom) throws Throwable {\n         .when(this.refreshWorker).execute(eq(owner));\n     }\n \n-    // private void mockProductImport(Owner owner, final Map<String, Product> products) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2MDUwNQ=="}, "originalCommit": {"oid": "ca971519bfc4af0e4e6c9a272e1e8698b09d3e3b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzAyMDE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/Entitler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTozNzoyMFrOGVYN7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjo1ODoyMlrOGVa95g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MDA2Mw==", "bodyText": "This is not directly related to your changes, but rather the previous changes in this method.\nIf the initial call of productAdapter.getProductsByIds(owner.getKey(), Arrays.asList(sku)) returns the marketing product we want, I assume that when Teamnado are going to implement our current ProductInfo interface which has the new getProvidedProducts() method on it, then that means we already have the whole product hierarchy fetched (well, for now a single mkt product on level 0 and some eng products on level 1). Why do we need to call the adapter a second time for all the children of sku?", "url": "https://github.com/candlepin/candlepin/pull/2698#discussion_r425070063", "createdAt": "2020-05-14T11:37:20Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/controller/Entitler.java", "diffHunk": "@@ -376,47 +382,67 @@ private DeveloperProducts getDeveloperPoolProducts(Owner owner, String sku) {\n      *         from the adapter.\n      */\n     private DeveloperProducts getDevProductMap(Owner owner, String sku) {\n-\n         Collection<? extends ProductInfo> productsByIds = this.productAdapter\n             .getProductsByIds(owner.getKey(), Arrays.asList(sku));\n \n-        Collection<String> devProductIds = new ArrayList<>();\n-        if (productsByIds.iterator().hasNext()) {\n+        Map<String, Product> devProductMap = new HashMap<>();\n+\n+        if (productsByIds != null && !productsByIds.isEmpty()) {\n+            // We're apparently only interested in the first product returned for the given sku\n             ProductInfo devProduct = productsByIds.iterator().next();\n-            devProductIds.add(devProduct.getId());\n \n-            Collection<? extends ProductInfo> provided = devProduct.getProvidedProducts();\n+            // Collect the dev product IDs from the potential tree of products we received\n+            List<String> devProductIds = new ArrayList<>();\n+            this.collectDevProductIds(devProductIds, devProduct);\n \n-            if (provided != null) {\n-                provided.forEach(product -> {\n-                    if (product != null) {\n-                        devProductIds.add(product.getId());\n-                    }\n-                });\n-            }\n-        }\n+            // Do a refresh so we're all up to date here\n+            log.debug(\"Importing products for dev pool resolution...\");\n \n-        log.debug(\"Importing products for dev pool resolution...\");\n-        ImportedEntityCompiler compiler = new ImportedEntityCompiler();\n+            RefreshWorker refresher = this.refreshWorkerProvider.get();\n+            refresher.addProducts(this.productAdapter.getProductsByIds(owner.getKey(), devProductIds));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f4e1a06bbcc398ffb8f372ca382f02066e0ffe"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTExNTExMA==", "bodyText": "That's a very valid point.\nToday this path is still necessary to get the overall code working, since our default product service adapter hasn't been ported to the new model yet. But it would be a lot nicer to not need to do a fetch->collect->fetch step.", "url": "https://github.com/candlepin/candlepin/pull/2698#discussion_r425115110", "createdAt": "2020-05-14T12:58:22Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/Entitler.java", "diffHunk": "@@ -376,47 +382,67 @@ private DeveloperProducts getDeveloperPoolProducts(Owner owner, String sku) {\n      *         from the adapter.\n      */\n     private DeveloperProducts getDevProductMap(Owner owner, String sku) {\n-\n         Collection<? extends ProductInfo> productsByIds = this.productAdapter\n             .getProductsByIds(owner.getKey(), Arrays.asList(sku));\n \n-        Collection<String> devProductIds = new ArrayList<>();\n-        if (productsByIds.iterator().hasNext()) {\n+        Map<String, Product> devProductMap = new HashMap<>();\n+\n+        if (productsByIds != null && !productsByIds.isEmpty()) {\n+            // We're apparently only interested in the first product returned for the given sku\n             ProductInfo devProduct = productsByIds.iterator().next();\n-            devProductIds.add(devProduct.getId());\n \n-            Collection<? extends ProductInfo> provided = devProduct.getProvidedProducts();\n+            // Collect the dev product IDs from the potential tree of products we received\n+            List<String> devProductIds = new ArrayList<>();\n+            this.collectDevProductIds(devProductIds, devProduct);\n \n-            if (provided != null) {\n-                provided.forEach(product -> {\n-                    if (product != null) {\n-                        devProductIds.add(product.getId());\n-                    }\n-                });\n-            }\n-        }\n+            // Do a refresh so we're all up to date here\n+            log.debug(\"Importing products for dev pool resolution...\");\n \n-        log.debug(\"Importing products for dev pool resolution...\");\n-        ImportedEntityCompiler compiler = new ImportedEntityCompiler();\n+            RefreshWorker refresher = this.refreshWorkerProvider.get();\n+            refresher.addProducts(this.productAdapter.getProductsByIds(owner.getKey(), devProductIds));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MDA2Mw=="}, "originalCommit": {"oid": "84f4e1a06bbcc398ffb8f372ca382f02066e0ffe"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzA1NTQ1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/Entitler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo0ODoyOVrOGVYkLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzo1ODo1NFrOGVdn-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3NTc1OQ==", "bodyText": "You mentioned yesterday that because of how the RefreshWorker works, we're adding all the org's products to the devProductMap. Can we not do some filtering here, and only add the refreshed products that are part of sku (and its hierarchy below it)?", "url": "https://github.com/candlepin/candlepin/pull/2698#discussion_r425075759", "createdAt": "2020-05-14T11:48:29Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/controller/Entitler.java", "diffHunk": "@@ -376,47 +382,67 @@ private DeveloperProducts getDeveloperPoolProducts(Owner owner, String sku) {\n      *         from the adapter.\n      */\n     private DeveloperProducts getDevProductMap(Owner owner, String sku) {\n-\n         Collection<? extends ProductInfo> productsByIds = this.productAdapter\n             .getProductsByIds(owner.getKey(), Arrays.asList(sku));\n \n-        Collection<String> devProductIds = new ArrayList<>();\n-        if (productsByIds.iterator().hasNext()) {\n+        Map<String, Product> devProductMap = new HashMap<>();\n+\n+        if (productsByIds != null && !productsByIds.isEmpty()) {\n+            // We're apparently only interested in the first product returned for the given sku\n             ProductInfo devProduct = productsByIds.iterator().next();\n-            devProductIds.add(devProduct.getId());\n \n-            Collection<? extends ProductInfo> provided = devProduct.getProvidedProducts();\n+            // Collect the dev product IDs from the potential tree of products we received\n+            List<String> devProductIds = new ArrayList<>();\n+            this.collectDevProductIds(devProductIds, devProduct);\n \n-            if (provided != null) {\n-                provided.forEach(product -> {\n-                    if (product != null) {\n-                        devProductIds.add(product.getId());\n-                    }\n-                });\n-            }\n-        }\n+            // Do a refresh so we're all up to date here\n+            log.debug(\"Importing products for dev pool resolution...\");\n \n-        log.debug(\"Importing products for dev pool resolution...\");\n-        ImportedEntityCompiler compiler = new ImportedEntityCompiler();\n+            RefreshWorker refresher = this.refreshWorkerProvider.get();\n+            refresher.addProducts(this.productAdapter.getProductsByIds(owner.getKey(), devProductIds));\n+            RefreshResult refreshResult = refresher.execute(owner);\n \n-        compiler.addProducts(this.productAdapter.getProductsByIds(owner.getKey(), devProductIds));\n+            // Step through the items we refreshed and add the resulting products to our map\n+            for (String pid : refresher.getProducts().keySet()) {\n+                Product product = refreshResult.getProduct(pid);\n+                if (product != null) {\n+                    devProductMap.put(product.getId(), product);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f4e1a06bbcc398ffb8f372ca382f02066e0ffe"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTExODkzNw==", "bodyText": "I don't fully understand the question.\nThis block is what is doing that filtering. Previously we were relying on the poorly named .getImportedProducts to grab everything, but with the new system, we need to be a little more selective to get the correct result.\nPart of the issue here is how DeveloperProduct works, and still expects to be working with a flat map. I feel there are going to be many places like this where we have to make a decision to either update a larger area of code to be more n-tier aware, or have patches like this which allow those places to continue working as they do.", "url": "https://github.com/candlepin/candlepin/pull/2698#discussion_r425118937", "createdAt": "2020-05-14T13:04:14Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/Entitler.java", "diffHunk": "@@ -376,47 +382,67 @@ private DeveloperProducts getDeveloperPoolProducts(Owner owner, String sku) {\n      *         from the adapter.\n      */\n     private DeveloperProducts getDevProductMap(Owner owner, String sku) {\n-\n         Collection<? extends ProductInfo> productsByIds = this.productAdapter\n             .getProductsByIds(owner.getKey(), Arrays.asList(sku));\n \n-        Collection<String> devProductIds = new ArrayList<>();\n-        if (productsByIds.iterator().hasNext()) {\n+        Map<String, Product> devProductMap = new HashMap<>();\n+\n+        if (productsByIds != null && !productsByIds.isEmpty()) {\n+            // We're apparently only interested in the first product returned for the given sku\n             ProductInfo devProduct = productsByIds.iterator().next();\n-            devProductIds.add(devProduct.getId());\n \n-            Collection<? extends ProductInfo> provided = devProduct.getProvidedProducts();\n+            // Collect the dev product IDs from the potential tree of products we received\n+            List<String> devProductIds = new ArrayList<>();\n+            this.collectDevProductIds(devProductIds, devProduct);\n \n-            if (provided != null) {\n-                provided.forEach(product -> {\n-                    if (product != null) {\n-                        devProductIds.add(product.getId());\n-                    }\n-                });\n-            }\n-        }\n+            // Do a refresh so we're all up to date here\n+            log.debug(\"Importing products for dev pool resolution...\");\n \n-        log.debug(\"Importing products for dev pool resolution...\");\n-        ImportedEntityCompiler compiler = new ImportedEntityCompiler();\n+            RefreshWorker refresher = this.refreshWorkerProvider.get();\n+            refresher.addProducts(this.productAdapter.getProductsByIds(owner.getKey(), devProductIds));\n+            RefreshResult refreshResult = refresher.execute(owner);\n \n-        compiler.addProducts(this.productAdapter.getProductsByIds(owner.getKey(), devProductIds));\n+            // Step through the items we refreshed and add the resulting products to our map\n+            for (String pid : refresher.getProducts().keySet()) {\n+                Product product = refreshResult.getProduct(pid);\n+                if (product != null) {\n+                    devProductMap.put(product.getId(), product);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3NTc1OQ=="}, "originalCommit": {"oid": "84f4e1a06bbcc398ffb8f372ca382f02066e0ffe"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1ODY0OA==", "bodyText": "Nevermind, I misread the code!", "url": "https://github.com/candlepin/candlepin/pull/2698#discussion_r425158648", "createdAt": "2020-05-14T13:58:54Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/controller/Entitler.java", "diffHunk": "@@ -376,47 +382,67 @@ private DeveloperProducts getDeveloperPoolProducts(Owner owner, String sku) {\n      *         from the adapter.\n      */\n     private DeveloperProducts getDevProductMap(Owner owner, String sku) {\n-\n         Collection<? extends ProductInfo> productsByIds = this.productAdapter\n             .getProductsByIds(owner.getKey(), Arrays.asList(sku));\n \n-        Collection<String> devProductIds = new ArrayList<>();\n-        if (productsByIds.iterator().hasNext()) {\n+        Map<String, Product> devProductMap = new HashMap<>();\n+\n+        if (productsByIds != null && !productsByIds.isEmpty()) {\n+            // We're apparently only interested in the first product returned for the given sku\n             ProductInfo devProduct = productsByIds.iterator().next();\n-            devProductIds.add(devProduct.getId());\n \n-            Collection<? extends ProductInfo> provided = devProduct.getProvidedProducts();\n+            // Collect the dev product IDs from the potential tree of products we received\n+            List<String> devProductIds = new ArrayList<>();\n+            this.collectDevProductIds(devProductIds, devProduct);\n \n-            if (provided != null) {\n-                provided.forEach(product -> {\n-                    if (product != null) {\n-                        devProductIds.add(product.getId());\n-                    }\n-                });\n-            }\n-        }\n+            // Do a refresh so we're all up to date here\n+            log.debug(\"Importing products for dev pool resolution...\");\n \n-        log.debug(\"Importing products for dev pool resolution...\");\n-        ImportedEntityCompiler compiler = new ImportedEntityCompiler();\n+            RefreshWorker refresher = this.refreshWorkerProvider.get();\n+            refresher.addProducts(this.productAdapter.getProductsByIds(owner.getKey(), devProductIds));\n+            RefreshResult refreshResult = refresher.execute(owner);\n \n-        compiler.addProducts(this.productAdapter.getProductsByIds(owner.getKey(), devProductIds));\n+            // Step through the items we refreshed and add the resulting products to our map\n+            for (String pid : refresher.getProducts().keySet()) {\n+                Product product = refreshResult.getProduct(pid);\n+                if (product != null) {\n+                    devProductMap.put(product.getId(), product);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3NTc1OQ=="}, "originalCommit": {"oid": "84f4e1a06bbcc398ffb8f372ca382f02066e0ffe"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4178, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}