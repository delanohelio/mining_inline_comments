{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NDE5MzE1", "number": 2614, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwMzo0NDo0OVrODgQxlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoxOTowNFrODgfxUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTU1ODYwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/async/JobManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwMzo0NDo0OVrOFqXz1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNDoxMDoyMlrOFq0oAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk3NDYxNQ==", "bodyText": "@nikosmoum\nIf the same JobManager instance shared with multiple Artemis threads and\u00a0the intention is to run queueJob and executeJob methods in parallel then synchronized (this) will not help here as both blocks are synchronized over this.\nI would recommend using 2 different locks in these methods. You can try using 2 different ReentrantLock here. \u00a0\nAlso, I did not get how the synchronized block will help to run jobs in parallel.\u00a0", "url": "https://github.com/candlepin/candlepin/pull/2614#discussion_r379974615", "createdAt": "2020-02-17T03:44:49Z", "author": {"login": "abhiskum"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -982,19 +982,20 @@ public AsyncJobStatus findJob(String jobId) {\n      *  an AsyncJobStatus instance representing the queued job's status, or the status of the\n      *  existing job if it already exists\n      */\n-    public synchronized AsyncJobStatus queueJob(JobConfig config) throws JobException {\n-\n-        ManagerState state = this.getManagerState();\n-        if (state != ManagerState.RUNNING) {\n-            // Check if we're paused. If so, and if the \"queue while paused\" config is not set,\n-            // throw our usual ISE\n-            if (state != ManagerState.SUSPENDED ||\n-                !this.configuration.getBoolean(ConfigProperties.ASYNC_JOBS_QUEUE_WHILE_SUSPENDED)) {\n-\n-                String msg = String.format(\"Jobs cannot be queued while the manager is in the %s state\",\n-                    state);\n-\n-                throw new IllegalStateException(msg);\n+    public AsyncJobStatus queueJob(JobConfig config) throws JobException {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2da0d7f8d299fdaa36ee1e5545aff13dc2818eae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAzNjYwMA==", "bodyText": "@Ceiu The synchronized (this) block does not span the whole queueJob and executeJob methods. That would be pointless because it would be the same as leaving the synchronized keyword on the method signature itself. It only synchronizes the little bit of code that checks the manager state. when they get to the result = job.execute(status); bit, there is no synchronization. But now I realize that the getManagerState() itself is synchronized, so there is no point in even doing that.\n@abhiskum I am aware that they will be synchronized over the same object, and it does make sense in this case. Instead of synchronizing the whole method, only this small bit that checks the manager state is now synchronized (and we want it to be synchronized over the same object, because we're checking the state of the JobManager, which is a Singleton), not the whole of execute and queue methods. But as I said before, I realize this is pointless because that method we're calling is already synchronized, so I'll remove this.", "url": "https://github.com/candlepin/candlepin/pull/2614#discussion_r380036600", "createdAt": "2020-02-17T08:22:32Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -982,19 +982,20 @@ public AsyncJobStatus findJob(String jobId) {\n      *  an AsyncJobStatus instance representing the queued job's status, or the status of the\n      *  existing job if it already exists\n      */\n-    public synchronized AsyncJobStatus queueJob(JobConfig config) throws JobException {\n-\n-        ManagerState state = this.getManagerState();\n-        if (state != ManagerState.RUNNING) {\n-            // Check if we're paused. If so, and if the \"queue while paused\" config is not set,\n-            // throw our usual ISE\n-            if (state != ManagerState.SUSPENDED ||\n-                !this.configuration.getBoolean(ConfigProperties.ASYNC_JOBS_QUEUE_WHILE_SUSPENDED)) {\n-\n-                String msg = String.format(\"Jobs cannot be queued while the manager is in the %s state\",\n-                    state);\n-\n-                throw new IllegalStateException(msg);\n+    public AsyncJobStatus queueJob(JobConfig config) throws JobException {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk3NDYxNQ=="}, "originalCommit": {"oid": "2da0d7f8d299fdaa36ee1e5545aff13dc2818eae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ0NjcyMA==", "bodyText": "Thank you, @nikosmoum for details.", "url": "https://github.com/candlepin/candlepin/pull/2614#discussion_r380446720", "createdAt": "2020-02-18T04:10:22Z", "author": {"login": "abhiskum"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -982,19 +982,20 @@ public AsyncJobStatus findJob(String jobId) {\n      *  an AsyncJobStatus instance representing the queued job's status, or the status of the\n      *  existing job if it already exists\n      */\n-    public synchronized AsyncJobStatus queueJob(JobConfig config) throws JobException {\n-\n-        ManagerState state = this.getManagerState();\n-        if (state != ManagerState.RUNNING) {\n-            // Check if we're paused. If so, and if the \"queue while paused\" config is not set,\n-            // throw our usual ISE\n-            if (state != ManagerState.SUSPENDED ||\n-                !this.configuration.getBoolean(ConfigProperties.ASYNC_JOBS_QUEUE_WHILE_SUSPENDED)) {\n-\n-                String msg = String.format(\"Jobs cannot be queued while the manager is in the %s state\",\n-                    state);\n-\n-                throw new IllegalStateException(msg);\n+    public AsyncJobStatus queueJob(JobConfig config) throws JobException {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk3NDYxNQ=="}, "originalCommit": {"oid": "2da0d7f8d299fdaa36ee1e5545aff13dc2818eae"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDAxNTUzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/async/JobMessageDispatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoxOTowNFrOFqu7Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMTozNDozNVrOFq_CQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1MzMxNA==", "bodyText": "Since this is a restriction of Artemis, and not something we care about at this level, we should try adding the synchronized flag onto the Artemis implementations of the messaging system. In this case, ArtemisProducer.send, ArtemisSession.commit and .rollback (probably .close, too)", "url": "https://github.com/candlepin/candlepin/pull/2614#discussion_r380353314", "createdAt": "2020-02-17T20:19:04Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/async/JobMessageDispatcher.java", "diffHunk": "@@ -138,7 +138,7 @@ private synchronized CPMProducer getProducer() throws CPMException {\n      * @throws JobMessageDispatchException\n      *  if the message cannot be posted for any reason\n      */\n-    public void postJobMessage(JobMessage jobMessage) throws JobMessageDispatchException {\n+    public synchronized void postJobMessage(JobMessage jobMessage) throws JobMessageDispatchException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc4e1ee3086274c2e5270a065bbb1735b81e3f81"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYxNzI4MA==", "bodyText": "Done", "url": "https://github.com/candlepin/candlepin/pull/2614#discussion_r380617280", "createdAt": "2020-02-18T11:34:35Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/async/JobMessageDispatcher.java", "diffHunk": "@@ -138,7 +138,7 @@ private synchronized CPMProducer getProducer() throws CPMException {\n      * @throws JobMessageDispatchException\n      *  if the message cannot be posted for any reason\n      */\n-    public void postJobMessage(JobMessage jobMessage) throws JobMessageDispatchException {\n+    public synchronized void postJobMessage(JobMessage jobMessage) throws JobMessageDispatchException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1MzMxNA=="}, "originalCommit": {"oid": "cc4e1ee3086274c2e5270a065bbb1735b81e3f81"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4307, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}