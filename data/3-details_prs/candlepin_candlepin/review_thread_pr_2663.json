{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyODcyODIw", "number": 2663, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzo0MjoyN1rODqy-5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo0MDowMFrODsHqkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjAyMDg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resteasy/MethodLocator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzo0MjoyN1rOF6wwsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjoxODoyM1rOF7J3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MDYyNg==", "bodyText": "It's not strictly critical to change for this PR, but in the future I would like to see these type of methods return a self-ref so we can do some chaining in the cases where our flow is to just instantiate and then initialize.", "url": "https://github.com/candlepin/candlepin/pull/2663#discussion_r397160626", "createdAt": "2020-03-24T13:42:27Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resteasy/MethodLocator.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.resteasy;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Binding;\n+import com.google.inject.Injector;\n+\n+import org.jboss.resteasy.spi.metadata.ResourceBuilder;\n+import org.jboss.resteasy.spi.metadata.ResourceClass;\n+import org.jboss.resteasy.spi.metadata.ResourceLocator;\n+import org.jboss.resteasy.spi.metadata.ResourceMethod;\n+import org.jboss.resteasy.util.GetRestful;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+/**\n+ * Holds a mapping of interface methods to concrete methods.\n+ * This map is populated during servlet initialization and then locked.\n+ */\n+public class MethodLocator {\n+    private static final Logger log = LoggerFactory.getLogger(MethodLocator.class);\n+\n+    private Map<Method, Method> internalMap;\n+    private boolean hasBeenInitialized = false;\n+\n+    private Injector injector;\n+\n+    @Inject\n+    public MethodLocator(Injector injector) {\n+        // Maintain the insertion order for nice output in debug statement\n+        internalMap = new LinkedHashMap<>();\n+        this.injector = injector;\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    public synchronized void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d86ba3da42e443b1f2b7fab5cf6881c13abecc71"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MTg5Mw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2663#discussion_r397571893", "createdAt": "2020-03-25T02:18:23Z", "author": {"login": "abhiskum"}, "path": "server/src/main/java/org/candlepin/resteasy/MethodLocator.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.resteasy;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Binding;\n+import com.google.inject.Injector;\n+\n+import org.jboss.resteasy.spi.metadata.ResourceBuilder;\n+import org.jboss.resteasy.spi.metadata.ResourceClass;\n+import org.jboss.resteasy.spi.metadata.ResourceLocator;\n+import org.jboss.resteasy.spi.metadata.ResourceMethod;\n+import org.jboss.resteasy.util.GetRestful;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+/**\n+ * Holds a mapping of interface methods to concrete methods.\n+ * This map is populated during servlet initialization and then locked.\n+ */\n+public class MethodLocator {\n+    private static final Logger log = LoggerFactory.getLogger(MethodLocator.class);\n+\n+    private Map<Method, Method> internalMap;\n+    private boolean hasBeenInitialized = false;\n+\n+    private Injector injector;\n+\n+    @Inject\n+    public MethodLocator(Injector injector) {\n+        // Maintain the insertion order for nice output in debug statement\n+        internalMap = new LinkedHashMap<>();\n+        this.injector = injector;\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    public synchronized void init() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MDYyNg=="}, "originalCommit": {"oid": "d86ba3da42e443b1f2b7fab5cf6881c13abecc71"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjAzNjczOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/candlepin/test/DatabaseTestFixture.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzo0NjowMlrOF6w7Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzowOTo1NVrOF8lYKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MzI4Nw==", "bodyText": "This ResourceLocatorMap instantiation is incorrect with the method locator being instantiated as it is below.", "url": "https://github.com/candlepin/candlepin/pull/2663#discussion_r397163287", "createdAt": "2020-03-24T13:46:02Z", "author": {"login": "Ceiu"}, "path": "server/src/test/java/org/candlepin/test/DatabaseTestFixture.java", "diffHunk": "@@ -211,8 +213,9 @@ public void init(boolean beginTransaction) throws Exception {\n         locatorMap = this.injector.getInstance(ResourceLocatorMap.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d86ba3da42e443b1f2b7fab5cf6881c13abecc71"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MTc3Mw==", "bodyText": "Fixed.", "url": "https://github.com/candlepin/candlepin/pull/2663#discussion_r397571773", "createdAt": "2020-03-25T02:18:00Z", "author": {"login": "abhiskum"}, "path": "server/src/test/java/org/candlepin/test/DatabaseTestFixture.java", "diffHunk": "@@ -211,8 +213,9 @@ public void init(boolean beginTransaction) throws Exception {\n         locatorMap = this.injector.getInstance(ResourceLocatorMap.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MzI4Nw=="}, "originalCommit": {"oid": "d86ba3da42e443b1f2b7fab5cf6881c13abecc71"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MTk4MA==", "bodyText": "Fixed.", "url": "https://github.com/candlepin/candlepin/pull/2663#discussion_r397571980", "createdAt": "2020-03-25T02:18:40Z", "author": {"login": "abhiskum"}, "path": "server/src/test/java/org/candlepin/test/DatabaseTestFixture.java", "diffHunk": "@@ -211,8 +213,9 @@ public void init(boolean beginTransaction) throws Exception {\n         locatorMap = this.injector.getInstance(ResourceLocatorMap.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MzI4Nw=="}, "originalCommit": {"oid": "d86ba3da42e443b1f2b7fab5cf6881c13abecc71"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1MDQwNg==", "bodyText": "This is still not going to work as expected. Because we're asking the injector for the ResourceLocator instance, it won't use the MethodLocator instantiated right above it; it'll get a difference instance that's managed by the injector. In this case, we want to create all three locator instances manually or inject all three instances, so that they're all built the same way and share the same instances.", "url": "https://github.com/candlepin/candlepin/pull/2663#discussion_r398550406", "createdAt": "2020-03-26T12:57:24Z", "author": {"login": "Ceiu"}, "path": "server/src/test/java/org/candlepin/test/DatabaseTestFixture.java", "diffHunk": "@@ -211,8 +213,9 @@ public void init(boolean beginTransaction) throws Exception {\n         locatorMap = this.injector.getInstance(ResourceLocatorMap.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MzI4Nw=="}, "originalCommit": {"oid": "d86ba3da42e443b1f2b7fab5cf6881c13abecc71"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3MTI3Mw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2663#discussion_r399071273", "createdAt": "2020-03-27T07:09:55Z", "author": {"login": "abhiskum"}, "path": "server/src/test/java/org/candlepin/test/DatabaseTestFixture.java", "diffHunk": "@@ -211,8 +213,9 @@ public void init(boolean beginTransaction) throws Exception {\n         locatorMap = this.injector.getInstance(ResourceLocatorMap.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MzI4Nw=="}, "originalCommit": {"oid": "d86ba3da42e443b1f2b7fab5cf6881c13abecc71"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDQ5OTg5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resteasy/ResourceLocatorMap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozNzo0OFrOF8C0kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzoxMTozNFrOF8laIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwNTEwNw==", "bodyText": "Why does this method need a new argument but it's not being used in the method?", "url": "https://github.com/candlepin/candlepin/pull/2663#discussion_r398505107", "createdAt": "2020-03-26T11:37:48Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resteasy/ResourceLocatorMap.java", "diffHunk": "@@ -284,7 +290,7 @@ protected void logLocators() {\n         }\n     }\n \n-    protected void registerLocators(ResourceClass resourceClass) {\n+    protected void registerLocators(ResourceClass resourceClass, Class<?> concreteClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3c0d0184f60555754a06e71fffd94581f606e5d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3MTc3OQ==", "bodyText": "@nikosmoum Initially I added method mapping in this class and then moved to separate class however forgot to remove this change.", "url": "https://github.com/candlepin/candlepin/pull/2663#discussion_r399071779", "createdAt": "2020-03-27T07:11:34Z", "author": {"login": "abhiskum"}, "path": "server/src/main/java/org/candlepin/resteasy/ResourceLocatorMap.java", "diffHunk": "@@ -284,7 +290,7 @@ protected void logLocators() {\n         }\n     }\n \n-    protected void registerLocators(ResourceClass resourceClass) {\n+    protected void registerLocators(ResourceClass resourceClass, Class<?> concreteClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwNTEwNw=="}, "originalCommit": {"oid": "a3c0d0184f60555754a06e71fffd94581f606e5d"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTg5NTIyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/candlepin/test/DatabaseTestFixture.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo0MDowMFrOF82xFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0MToyNFrOF9BMYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NjE4Mw==", "bodyText": "The changes below are good, but mean that these should not be injected (since we create them ourselves during init).", "url": "https://github.com/candlepin/candlepin/pull/2663#discussion_r399356183", "createdAt": "2020-03-27T15:40:00Z", "author": {"login": "Ceiu"}, "path": "server/src/test/java/org/candlepin/test/DatabaseTestFixture.java", "diffHunk": "@@ -157,6 +158,7 @@\n     @Inject protected PermissionFactory permissionFactory;\n \n     @Inject protected ResourceLocatorMap locatorMap;\n+    @Inject protected MethodLocator methodLocator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39a298e0f7bf45a094c45072cfb7ce0686e8f99b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyNzAxMA==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2663#discussion_r399527010", "createdAt": "2020-03-27T20:41:24Z", "author": {"login": "abhiskum"}, "path": "server/src/test/java/org/candlepin/test/DatabaseTestFixture.java", "diffHunk": "@@ -157,6 +158,7 @@\n     @Inject protected PermissionFactory permissionFactory;\n \n     @Inject protected ResourceLocatorMap locatorMap;\n+    @Inject protected MethodLocator methodLocator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NjE4Mw=="}, "originalCommit": {"oid": "39a298e0f7bf45a094c45072cfb7ce0686e8f99b"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4120, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}