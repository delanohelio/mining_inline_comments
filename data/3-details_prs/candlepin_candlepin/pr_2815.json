{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MTI1MDc5", "number": 2815, "title": "[F] Moving derived product from pool to product (ENT-2628)", "bodyText": "The derived product (and derived provided products) have been removed\nfrom pool and moved to product\nDerived provided products are now no longer an explicit field on any\nmodel object, instead, the provided products on the derived product\nare to be used for derived provided products\nRemoved all JSON/XML serialization annotations from Pool\nRemoved the Pool product caching functionality and serialization module\nProductManager and ContentManager have been completely rewritten and\nno longer explicitly require the deprecated product and content DTOs\nas input to their methods, instead using the service API interface\nProductManager and ContentManager no longer have bulk operations,\nas the functionality was only ever used by refresh, and has been\nmoved to the refresher\nUpdated EventFactory to use DTOs for system purpose compliance\nstatus\nSeveral model objects have been updated to have fluent-style\nmutators for method chaining, and have had large constructors\nremoved\nRemoved some unused methods which would have broken with the changes\nlisted above\nUpdated some file operations to use the try-with-resources structure", "createdAt": "2020-10-02T20:39:45Z", "url": "https://github.com/candlepin/candlepin/pull/2815", "merged": true, "mergeCommit": {"oid": "7ec53d7f458f3620a3ac66649ba428d1365b8dec"}, "closed": true, "closedAt": "2020-12-02T09:53:43Z", "author": {"login": "Ceiu"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQ8nSBABqjM4NjE3Nzc0MzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdh67lrgBqjQwNTc1MjEzNzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5cf1aed18c4e778b115397b97806daea45b349a7", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/5cf1aed18c4e778b115397b97806daea45b349a7", "committedDate": "2020-09-29T15:21:34Z", "message": "SQUASH ME: WIP: Moving derived product from pool to product"}, "afterCommit": {"oid": "d261c6ad37027fd8047c9dcb7c226ac6fb3819bf", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/d261c6ad37027fd8047c9dcb7c226ac6fb3819bf", "committedDate": "2020-10-09T20:56:58Z", "message": "SQUASH ME: WIP: Moving derived product from pool to product"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d261c6ad37027fd8047c9dcb7c226ac6fb3819bf", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/d261c6ad37027fd8047c9dcb7c226ac6fb3819bf", "committedDate": "2020-10-09T20:56:58Z", "message": "SQUASH ME: WIP: Moving derived product from pool to product"}, "afterCommit": {"oid": "8532d87803702edbc3760b318eb99930c6fe3ec7", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/8532d87803702edbc3760b318eb99930c6fe3ec7", "committedDate": "2020-10-26T21:05:07Z", "message": "SQUASH ME: WIP: Moving derived product from pool to product"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8532d87803702edbc3760b318eb99930c6fe3ec7", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/8532d87803702edbc3760b318eb99930c6fe3ec7", "committedDate": "2020-10-26T21:05:07Z", "message": "SQUASH ME: WIP: Moving derived product from pool to product"}, "afterCommit": {"oid": "0301553f97b2da7f3deaeccebbe31eb777fb63d9", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/0301553f97b2da7f3deaeccebbe31eb777fb63d9", "committedDate": "2020-10-27T13:42:42Z", "message": "SQUASH ME: WIP: Moving derived product from pool to product"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "898f98e993efb6320e5450dc455c29f2ad581fa5", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/898f98e993efb6320e5450dc455c29f2ad581fa5", "committedDate": "2020-10-27T14:32:04Z", "message": "Moved derived product from pool to product\n\n- The derived product (and derived provided products) have been removed\n  from pool and moved to product\n- Derived provided products are now no longer an explicit field on any\n  model object, instead, the provided products on the derived product\n  are to be used for derived provided products\n- Removed all JSON/XML serialization annotations from Pool\n- Removed the Pool product caching functionality and serialization module\n- ProductManager and ContentManager have been completely rewritten and\n  no longer explicitly require the deprecated product and content DTOs\n  as input to their methods, instead using the service API interface\n- ProductManager and ContentManager no longer have bulk operations,\n  as the functionality was only ever used by refresh, and has been\n  moved to the refresher\n- Updated EventFactory to use DTOs for system purpose compliance\n  status\n- Several model objects have been updated to have fluent-style\n  mutators for method chaining, and have had large constructors\n  removed\n- Removed some unused methods which would have broken with the changes\n  listed above\n- Updated some file operations to use the try-with-resources structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83f0d0dfc16f88532c158e2dc7eae39cb2e17855", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/83f0d0dfc16f88532c158e2dc7eae39cb2e17855", "committedDate": "2020-10-27T14:46:04Z", "message": "Updated unit tests to support moving derived products from pool to product"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0301553f97b2da7f3deaeccebbe31eb777fb63d9", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/0301553f97b2da7f3deaeccebbe31eb777fb63d9", "committedDate": "2020-10-27T13:42:42Z", "message": "SQUASH ME: WIP: Moving derived product from pool to product"}, "afterCommit": {"oid": "16411c2bb725aff507025ab91906d743ff263907", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/16411c2bb725aff507025ab91906d743ff263907", "committedDate": "2020-10-27T14:48:49Z", "message": "Updated spec tests to support moving derived products from pool to product"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5ODMyNDA4", "url": "https://github.com/candlepin/candlepin/pull/2815#pullrequestreview-519832408", "createdAt": "2020-10-29T16:07:42Z", "commit": {"oid": "16411c2bb725aff507025ab91906d743ff263907"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjowNzo0MlrOHqjVjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjoyNzo1NFrOHqkQsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM4MTE5OQ==", "bodyText": "Looks like this class is no longer used. We should probably delete it.", "url": "https://github.com/candlepin/candlepin/pull/2815#discussion_r514381199", "createdAt": "2020-10-29T16:07:42Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/model/ProductEntitlements.java", "diffHunk": "@@ -33,18 +33,25 @@\n \n     public ProductEntitlements(Collection<Entitlement> entitlements, ProductCurator productCurator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16411c2bb725aff507025ab91906d743ff263907"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5MTQzNg==", "bodyText": "You can use Objects::nonNull", "url": "https://github.com/candlepin/candlepin/pull/2815#discussion_r514391436", "createdAt": "2020-10-29T16:21:11Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -952,85 +608,86 @@ public static boolean isChangedBy(Product entity, ProductDTO dto) {\n         // case-insensitive key/value comparison and similiarities (i.e. management_enabled: 1 is\n         // functionally identical to Management_Enabled: true, but it will be detected as a change\n         // in attributes.\n-        Map<String, String> attributes = dto.getAttributes();\n+        Map<String, String> attributes = update.getAttributes();\n         if (attributes != null && !attributes.equals(entity.getAttributes())) {\n             return true;\n         }\n \n-        Collection<ProductContentDTO> productContent = dto.getProductContent();\n-        if (productContent != null) {\n-            Comparator comparator = (lhs, rhs) -> {\n-                ProductContent existing = (ProductContent) lhs;\n-                ProductContentDTO update = (ProductContentDTO) rhs;\n-\n-                if (existing != null && update != null) {\n-                    Content content = existing.getContent();\n-                    ContentDTO cdto = update.getContent();\n-\n-                    if (content != null && cdto != null) {\n-                        if (cdto.getUuid() != null ?\n-                            cdto.getUuid().equals(content.getUuid()) :\n-                            (cdto.getId() != null && cdto.getId().equals(content.getId()))) {\n-                            // At this point, we've either matched the UUIDs (which means we're\n-                            // referencing identical products) or the UUID isn't present on the DTO, but\n-                            // the IDs match (which means we're pointing toward the same product).\n-\n-                            return (update.isEnabled() != null &&\n-                                !update.isEnabled().equals(existing.isEnabled())) ||\n-                                ContentManager.isChangedBy(content, cdto) ? 1 : 0;\n-                        }\n-                    }\n-                }\n+        Collection<String> dependentProductIds = update.getDependentProductIds();\n+        if (dependentProductIds != null &&\n+            !Util.collectionsAreEqual(entity.getDependentProductIds(), dependentProductIds)) {\n+            return true;\n+        }\n \n-                return 1;\n-            };\n+        // Complex stuff\n+        // product content\n+        if (update.getProductContent() != null) {\n+            Map<String, Boolean> entityContentMap = entity.getProductContent().stream()\n+                .filter(pc -> pc != null && pc.getContent() != null)\n+                .collect(Collectors.toMap(pc -> pc.getContent().getId(), pc -> pc.isEnabled()));\n \n-            if (!Util.collectionsAreEqual((Collection) entity.getProductContent(),\n-                (Collection) productContent, comparator)) {\n+            Map<String, Boolean> updateContentMap = update.getProductContent().stream()\n+                .filter(pc -> pc != null && pc.getContent() != null)\n+                .collect(Collectors.toMap(pc -> pc.getContent().getId(), pc -> pc.isEnabled()));\n \n+            if (!entityContentMap.equals(updateContentMap)) {\n                 return true;\n             }\n         }\n \n-        Collection<BrandingDTO> brandingDTOs = dto.getBranding();\n-        if (brandingDTOs != null) {\n-            Comparator<BrandingInfo> comparator = BrandingInfo.getBrandingInfoComparator();\n-            if (!Util.collectionsAreEqual((Collection) entity.getBranding(), (Collection) brandingDTOs,\n-                comparator)) {\n+        // derived product\n+        ProductInfo derivedProduct = update.getDerivedProduct();\n+        Product existingDerived = entity.getDerivedProduct();\n+\n+        if (derivedProduct != null) {\n+            if (existingDerived == null || !existingDerived.getId().equals(derivedProduct.getId())) {\n                 return true;\n             }\n         }\n+        else if (existingDerived != null) {\n+            return true;\n+        }\n \n-        Collection<ProductDTO> providedProducts = dto.getProvidedProducts();\n-\n-        if (providedProducts != null) {\n-            // Quick Id Check\n-            if (!Util.collectionsAreEqual(entity.getProvidedProducts().stream()\n+        // provided products\n+        Collection<? extends ProductInfo> updateProvidedProducts = update.getProvidedProducts();\n+        if (updateProvidedProducts != null) {\n+            Set<String> entityProvidedPids = entity.getProvidedProducts().stream()\n+                .filter(pp -> pp != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16411c2bb725aff507025ab91906d743ff263907"}, "originalPosition": 1341}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5NjMzNw==", "bodyText": "+1 ... We should do something similar for the IllegalStateException that's scattered around here.", "url": "https://github.com/candlepin/candlepin/pull/2815#discussion_r514396337", "createdAt": "2020-10-29T16:27:54Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -84,121 +74,255 @@ public ProductManager(EntitlementCertificateGenerator entitlementCertGenerator,\n     }\n \n     /**\n-     * Creates a new Product for the given owner, potentially using a different version than the\n-     * entity provided if a matching entity has already been registered for another owner.\n+     * Resolves all of the products referenced by the given product info, returning a map that\n+     * contains all resolved product entities mapped by product ID. If a product reference cannot\n+     * be resolved, this method throws an exception.\n      *\n-     * @param dto\n-     *  A product DTO instance representing the product to create\n+     * @param pinfo\n+     *  the product info for which to resolve product references\n      *\n-     * @param owner\n-     *  The owner for which to create the product\n+     * @throws IllegalArgumentException\n+     *  if the product provided references a product which cannot be resolved\n+     *\n+     * @return\n+     *  a map containing all of the resolved products referenced, mapped by product ID\n+     */\n+    private Map<String, Product> resolveProductRefs(Owner owner, ProductInfo pinfo) {\n+        Set<String> pids = new HashSet<>();\n+        Map<String, Product> output;\n+\n+        ProductInfo derived = pinfo.getDerivedProduct();\n+        if (derived != null) {\n+            if (derived.getId() == null || derived.getId().isEmpty()) {\n+                // TODO: Make this a custom exception. MalformedChildReferenceException, perhaps?\n+                throw new IllegalArgumentException(\"product reference lacks a valid ID\");\n+            }\n+\n+            pids.add(derived.getId());\n+        }\n+\n+        Collection<? extends ProductInfo> provided = pinfo.getProvidedProducts();\n+        if (provided != null) {\n+            for (ProductInfo pp : provided) {\n+                if (pp == null) {\n+                    // TODO: Make this a custom exception. MalformedChildReferenceException, perhaps?\n+                    throw new IllegalArgumentException(\"product contains null provided product reference\");\n+                }\n+\n+                if (pp.getId() == null || pp.getId().isEmpty()) {\n+                    // TODO: Make this a custom exception. MalformedChildReferenceException, perhaps?\n+                    throw new IllegalArgumentException(\"product references a product that lacks a valid ID\");\n+                }\n+\n+                pids.add(pp.getId());\n+            }\n+        }\n+\n+        if (!pids.isEmpty()) {\n+            output = this.ownerProductCurator.getProductsByIds(owner, pids).list().stream()\n+                .collect(Collectors.toMap(Product::getId, Function.identity()));\n+\n+            pids.removeAll(output.keySet());\n+            if (!pids.isEmpty()) {\n+                // TODO: Make this a custom exception. MalformedChildReferenceException, perhaps?\n+                throw new IllegalArgumentException(\n+                    \"product references one or more non-existent products: \" + pids);\n+            }\n+        }\n+        else {\n+            output = new HashMap<>();\n+        }\n+\n+        return output;\n+    }\n+\n+    /**\n+     * Resolves all of the products referenced by the given product info, returning a map that\n+     * contains all resolved product entities mapped by product ID. If a product reference cannot\n+     * be resolved, this method throws an exception.\n+     *\n+     * @param pinfo\n+     *  the product info for which to resolve product references\n      *\n      * @throws IllegalArgumentException\n-     *  if dto is null or incomplete, or owner is null\n+     *  if the product provided references a product which cannot be resolved\n      *\n      * @return\n-     *  a new Product instance representing the specified product for the given owner\n+     *  a map containing all of the resolved products referenced, mapped by product ID\n      */\n-    public Product createProduct(ProductDTO dto, Owner owner) {\n-        if (dto == null) {\n-            throw new IllegalArgumentException(\"dto is null\");\n+    private Map<String, Content> resolveContentRefs(Owner owner, ProductInfo pinfo) {\n+        Set<String> cids = new HashSet<>();\n+        Map<String, Content> output;\n+\n+        Collection<? extends ProductContentInfo> productContent = pinfo.getProductContent();\n+        if (productContent != null) {\n+            for (ProductContentInfo pcinfo : productContent) {\n+                ContentInfo cinfo = pcinfo != null ? pcinfo.getContent() : null;\n+\n+                if (cinfo == null) {\n+                    // TODO: Make this a custom exception. MalformedChildReferenceException, perhaps?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16411c2bb725aff507025ab91906d743ff263907"}, "originalPosition": 169}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16411c2bb725aff507025ab91906d743ff263907", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/16411c2bb725aff507025ab91906d743ff263907", "committedDate": "2020-10-27T14:48:49Z", "message": "Updated spec tests to support moving derived products from pool to product"}, "afterCommit": {"oid": "8a8a4b7b36c1bf2d829c7ad6787a5cf777abfc34", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/8a8a4b7b36c1bf2d829c7ad6787a5cf777abfc34", "committedDate": "2020-11-06T22:08:07Z", "message": "Updated spec tests to support moving derived products from pool to product"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NDQxNDgz", "url": "https://github.com/candlepin/candlepin/pull/2815#pullrequestreview-539441483", "createdAt": "2020-11-26T16:17:13Z", "commit": {"oid": "8a8a4b7b36c1bf2d829c7ad6787a5cf777abfc34"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjoxNzoxM1rOH6himg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoyMDo0MVrOH8CwwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyODk4Ng==", "bodyText": "I don't think that's needed, since they are recursively added by addProducts", "url": "https://github.com/candlepin/candlepin/pull/2815#discussion_r531128986", "createdAt": "2020-11-26T16:17:13Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/controller/refresher/RefreshWorker.java", "diffHunk": "@@ -162,7 +162,10 @@ public RefreshWorker addSubscriptions(Collection<? extends SubscriptionInfo> sub\n                 this.poolMapper.addImportedEntity(subscription);\n \n                 // Add any products attached to this subscription...\n-                this.addProducts(subscription.getProduct(), subscription.getDerivedProduct());\n+                this.addProducts(subscription.getProduct());\n+\n+                // Should we still add derivedProduct and the provided/derived provided collections here\n+                // for backward compatibility?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8a4b7b36c1bf2d829c7ad6787a5cf777abfc34"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwNjEzOQ==", "bodyText": "the derived product was appended twice here", "url": "https://github.com/candlepin/candlepin/pull/2815#discussion_r531606139", "createdAt": "2020-11-27T13:36:08Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ProductDTO.java", "diffHunk": "@@ -1064,10 +1096,12 @@ public int hashCode() {\n             .append(this.getMultiplier())\n             .append(this.getHref())\n             .append(this.getAttributes())\n+            .append(this.getDerivedProduct())\n+            .append(this.getProvidedProducts())\n+            .append(this.getDerivedProduct())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8a4b7b36c1bf2d829c7ad6787a5cf777abfc34"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY1OTk5Nw==", "bodyText": "Not something to change, but just an observation: We'll now be exporting more product data than before. We currently export a flat structure: 1 json file for each product, no matter which type it is, e.g. provided, derived, derived provided, while with this, each product json file will also include all of the product hierarchy below it.\nA good question is, how/when (if ever) can we finally update the manifest API, by removing these redundant json files, and only exporting every top-level (root) product?", "url": "https://github.com/candlepin/candlepin/pull/2815#discussion_r531659997", "createdAt": "2020-11-27T15:24:14Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/manifest/v1/ProductTranslator.java", "diffHunk": "@@ -69,17 +71,37 @@ public ProductDTO populate(ModelTranslator modelTranslator, Product source, Prod\n         destination.setAttributes(source.getAttributes());\n         destination.setDependentProductIds(source.getDependentProductIds());\n \n-        if (modelTranslator != null) {\n+        // Translate children products (recursive op)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8a4b7b36c1bf2d829c7ad6787a5cf777abfc34"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4ODY4NA==", "bodyText": "This method, and the clone method itself is not cloning the Red Hat product ID, but the method javadoc implies it does. Was this missed?", "url": "https://github.com/candlepin/candlepin/pull/2815#discussion_r531688684", "createdAt": "2020-11-27T16:28:59Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resource/OwnerProductResource.java", "diffHunk": "@@ -297,11 +294,28 @@ else if (!StringUtils.equals(update.getId(), productId)) {\n             throw new ForbiddenException(i18n.tr(\"product \\\"{0}\\\" is locked\", existing.getId()));\n         }\n \n-        Product updated = this.productManager.updateProduct(update, owner, true);\n+        Product updated = this.productManager.updateProduct(owner, update, true);\n \n         return this.translator.translate(updated, ProductDTO.class);\n     }\n \n+    /**\n+     * Creates an new, unmanaged product instance using the Red Hat product ID and content of the\n+     * given product entity.\n+     *\n+     * @param entity\n+     *  the product instance from which to copy the Red Hat product ID and content\n+     *\n+     * @return\n+     *  an unmanaged product instance\n+     */\n+    private Product buildProductForBatchContentChange(Product entity) {\n+        // Impl note: we need to fully clone the object to ensure we don't make any changes to any\n+        // other fields; or we need to create a new product implementation that returns the correct\n+        // no-change value for every other field.\n+        return (Product) entity.clone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8a4b7b36c1bf2d829c7ad6787a5cf777abfc34"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5Njc2Nw==", "bodyText": "Method signature & javadoc comment don't match", "url": "https://github.com/candlepin/candlepin/pull/2815#discussion_r532596767", "createdAt": "2020-11-30T13:29:55Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -84,121 +75,252 @@ public ProductManager(EntitlementCertificateGenerator entitlementCertGenerator,\n     }\n \n     /**\n-     * Creates a new Product for the given owner, potentially using a different version than the\n-     * entity provided if a matching entity has already been registered for another owner.\n+     * Resolves all of the products referenced by the given product info, returning a map that\n+     * contains all resolved product entities mapped by product ID. If a product reference cannot\n+     * be resolved, this method throws an exception.\n      *\n-     * @param dto\n-     *  A product DTO instance representing the product to create\n+     * @param pinfo\n+     *  the product info for which to resolve product references\n      *\n-     * @param owner\n-     *  The owner for which to create the product\n+     * @throws IllegalArgumentException\n+     *  if the product provided references a product which cannot be resolved\n+     *\n+     * @return\n+     *  a map containing all of the resolved products referenced, mapped by product ID\n+     */\n+    private Map<String, Product> resolveProductRefs(Owner owner, ProductInfo pinfo) {\n+        Set<String> pids = new HashSet<>();\n+        Map<String, Product> output;\n+\n+        ProductInfo derived = pinfo.getDerivedProduct();\n+        if (derived != null) {\n+            if (derived.getId() == null || derived.getId().isEmpty()) {\n+                throw new MalformedEntityReferenceException(\"product reference lacks a valid ID\");\n+            }\n+\n+            pids.add(derived.getId());\n+        }\n+\n+        Collection<? extends ProductInfo> provided = pinfo.getProvidedProducts();\n+        if (provided != null) {\n+            for (ProductInfo pp : provided) {\n+                if (pp == null) {\n+                    throw new MalformedEntityReferenceException(\n+                        \"product contains null provided product reference\");\n+                }\n+\n+                if (pp.getId() == null || pp.getId().isEmpty()) {\n+                    throw new MalformedEntityReferenceException(\n+                        \"product references a product that lacks a valid ID\");\n+                }\n+\n+                pids.add(pp.getId());\n+            }\n+        }\n+\n+        if (!pids.isEmpty()) {\n+            output = this.ownerProductCurator.getProductsByIds(owner, pids).list().stream()\n+                .collect(Collectors.toMap(Product::getId, Function.identity()));\n+\n+            pids.removeAll(output.keySet());\n+            if (!pids.isEmpty()) {\n+                throw new MalformedEntityReferenceException(\n+                    \"product references one or more non-existent products: \" + pids);\n+            }\n+        }\n+        else {\n+            output = new HashMap<>();\n+        }\n+\n+        return output;\n+    }\n+\n+    /**\n+     * Resolves all of the products referenced by the given product info, returning a map that\n+     * contains all resolved product entities mapped by product ID. If a product reference cannot\n+     * be resolved, this method throws an exception.\n+     *\n+     * @param pinfo\n+     *  the product info for which to resolve product references\n      *\n      * @throws IllegalArgumentException\n-     *  if dto is null or incomplete, or owner is null\n+     *  if the product provided references a product which cannot be resolved\n      *\n      * @return\n-     *  a new Product instance representing the specified product for the given owner\n+     *  a map containing all of the resolved products referenced, mapped by product ID\n      */\n-    public Product createProduct(ProductDTO dto, Owner owner) {\n-        if (dto == null) {\n-            throw new IllegalArgumentException(\"dto is null\");\n+    private Map<String, Content> resolveContentRefs(Owner owner, ProductInfo pinfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8a4b7b36c1bf2d829c7ad6787a5cf777abfc34"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyMTg1Ng==", "bodyText": "Shouldn't this be pool.getProduct().getDerivedProduct()? (or are we leaving this change for the other jira task which is about removing the derived product field from Pool all together?)", "url": "https://github.com/candlepin/candlepin/pull/2815#discussion_r532721856", "createdAt": "2020-11-30T16:20:41Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolHelper.java", "diffHunk": "@@ -83,11 +83,13 @@ public static PoolOperationCallback createHostRestrictedPools(PoolManager poolMa\n         List<Pool> poolsToUpdateFromStack = new ArrayList<>();\n         for (Pool pool : pools) {\n             Product product = pool.getProduct();\n-            Pool consumerSpecificPool = null;\n+            Product derivedProduct = pool.getDerivedProduct();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8a4b7b36c1bf2d829c7ad6787a5cf777abfc34"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5abfa63e17a4457a87b1e52b0f70497f198546ee", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/5abfa63e17a4457a87b1e52b0f70497f198546ee", "committedDate": "2020-12-01T14:35:22Z", "message": "Updated spec tests to support moving derived products from pool to product"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a8a4b7b36c1bf2d829c7ad6787a5cf777abfc34", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/8a8a4b7b36c1bf2d829c7ad6787a5cf777abfc34", "committedDate": "2020-11-06T22:08:07Z", "message": "Updated spec tests to support moving derived products from pool to product"}, "afterCommit": {"oid": "5abfa63e17a4457a87b1e52b0f70497f198546ee", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/5abfa63e17a4457a87b1e52b0f70497f198546ee", "committedDate": "2020-12-01T14:35:22Z", "message": "Updated spec tests to support moving derived products from pool to product"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2324, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}