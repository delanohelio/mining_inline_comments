{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MTU4NjI2", "number": 2829, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDoyMDowOVrOE4VmHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDoyMDowOVrOE4VmHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTA5NTM0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/OwnerContentAccess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDoyMDowOVrOHyMqvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDoyMDowOVrOHyMqvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM5ODM5OQ==", "bodyText": "For these, we should follow the format we use in the other objects: ClassName [prop=value, prop2=value2, ...]", "url": "https://github.com/candlepin/candlepin/pull/2829#discussion_r522398399", "createdAt": "2020-11-12T20:20:09Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/OwnerContentAccess.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.controller;\n+\n+import java.util.Objects;\n+\n+public class OwnerContentAccess {\n+\n+    private final String contentAccessMode;\n+    private final String contentAccessModeList;\n+\n+    public OwnerContentAccess(String contentAccessMode, String contentAccessModeList) {\n+        this.contentAccessMode = contentAccessMode;\n+        this.contentAccessModeList = contentAccessModeList;\n+    }\n+\n+    public String getContentAccessMode() {\n+        return contentAccessMode;\n+    }\n+\n+    public String getContentAccessModeList() {\n+        return contentAccessModeList;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        OwnerContentAccess that = (OwnerContentAccess) o;\n+        return Objects.equals(contentAccessMode, that.contentAccessMode) &&\n+            Objects.equals(contentAccessModeList, that.contentAccessModeList);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(contentAccessMode, contentAccessModeList);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"OwnerContentAccess{\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26c601f5187086bdf89c0ec59cf00349c70c941c"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4102, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}