{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5OTk5NDMw", "number": 2736, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzozNTo0OVrOEJIp2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzozNTo0OVrOEJIp2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDE0NDI0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/audit/EventSinkImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzozNTo0OVrOGphJdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxMjozMVrOGqJcBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4Nzg5Mw==", "bodyText": "This works, but is still breaking the encapsulation open to accomplish the goal. The purpose of the EventMessageSender is to be our abstraction layer for managing the session, so we should avoid spinning up a new one to do the work it should be doing. From the other change in this code, it appears you've already spotted the downside in doing it this way: you need to do the close check in every operation; making the session management exist in three places, rather than one.\nHowever, this does highlight another minor problem with the existing code: EventMessageSender isn't static. The wrapper does not care about the state of its outer class, nor should it ever use it. We don't need the baggage an inner class inherits in such a case, and we should be declaring it statically.", "url": "https://github.com/candlepin/candlepin/pull/2736#discussion_r446187893", "createdAt": "2020-06-26T13:35:49Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/audit/EventSinkImpl.java", "diffHunk": "@@ -127,8 +127,8 @@ public void queueEvent(Event event) {\n \n         try {\n             // Lazily initialize the message sender when the first\n-            // message gets queued.\n-            if (messageSender == null) {\n+            // message gets queued or initialize session if it's closed.\n+            if (messageSender == null || messageSender.session.isClosed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1fc008101e8095d7bdef8595028db1ebba4df06"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0ODAwNw==", "bodyText": "Right, made some adjustments to it.\nChecks on sendMessages & cancelMessages methods are to prevent doing anything if we don't have session opened. This line inside JobManager which make sure that events are always sent out or rolled backed (in case of exception). Now with transnational wrapper specifically in HypervisorUpdateJob the AMQ session get closed in last transaction, which leads to problem when control goes back to JobManager.", "url": "https://github.com/candlepin/candlepin/pull/2736#discussion_r446848007", "createdAt": "2020-06-29T08:12:31Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/audit/EventSinkImpl.java", "diffHunk": "@@ -127,8 +127,8 @@ public void queueEvent(Event event) {\n \n         try {\n             // Lazily initialize the message sender when the first\n-            // message gets queued.\n-            if (messageSender == null) {\n+            // message gets queued or initialize session if it's closed.\n+            if (messageSender == null || messageSender.session.isClosed()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4Nzg5Mw=="}, "originalCommit": {"oid": "c1fc008101e8095d7bdef8595028db1ebba4df06"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4035, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}