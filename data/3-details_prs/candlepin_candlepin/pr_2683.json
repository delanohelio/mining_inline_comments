{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1OTczMzM1", "number": 2683, "title": "[F]ENT-2291: Create adapter methods for DTOs implementing *Info Interfaces", "bodyText": "Added a class InfoAdapter to provide the implementation of info interfaces.\nRemoved the below translators and their test suites:\n\nUserDTOTranslator\nRoleDTOTranslator\nPermissionBluePrintDTOTranslator", "createdAt": "2020-04-20T10:27:34Z", "url": "https://github.com/candlepin/candlepin/pull/2683", "merged": true, "mergeCommit": {"oid": "31a9095b5562d639763f2cfcb5b323b62ed10501"}, "closed": true, "closedAt": "2020-04-21T06:51:30Z", "author": {"login": "sonalidhome"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZdys-gFqTM5NjM4MDI1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZgTyjABqjMyNTIxMzM2ODY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MzgwMjUz", "url": "https://github.com/candlepin/candlepin/pull/2683#pullrequestreview-396380253", "createdAt": "2020-04-20T11:48:52Z", "commit": {"oid": "6a8b42ee7cde336a05008ee8ff12c445d74fab02"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMTo0ODo1MlrOGIQmNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMTo1NTowNFrOGIQzwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMzcxNw==", "bodyText": "I would not put this in this package, since it isn't part of our API. It's a utility class for internal transformations of data. I'd say org.candlepin.resource.util is more appropriate", "url": "https://github.com/candlepin/candlepin/pull/2683#discussion_r411313717", "createdAt": "2020-04-20T11:48:52Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/InfoAdapter.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.dto.api.v1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8b42ee7cde336a05008ee8ff12c445d74fab02"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxNzA3OQ==", "bodyText": "why null?", "url": "https://github.com/candlepin/candlepin/pull/2683#discussion_r411317079", "createdAt": "2020-04-20T11:54:52Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/InfoAdapter.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.service.model.OwnerInfo;\n+import org.candlepin.service.model.PermissionBlueprintInfo;\n+import org.candlepin.service.model.RoleInfo;\n+import org.candlepin.service.model.UserInfo;\n+import org.candlepin.util.Util;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Represents the adapters class to convert the DTOs object into\n+ * info interface implemented objects. Initially, DTO classes were\n+ * implementing Info interfaces. This class helps to get an equivalent\n+ * implemented interface object.\n+ */\n+public class InfoAdapter {\n+\n+    private InfoAdapter() {\n+        //nothing to do here\n+    }\n+\n+    /**\n+     * This method adapts the RoleDTO into RoleInfo object.\n+     *\n+     * @param source RoleDTO object\n+     *\n+     * @return RoleInfo object\n+     */\n+    public static RoleInfo roleInfoAdapter(RoleDTO source) {\n+        return new RoleInfo() {\n+\n+            @Override\n+            public Date getCreated() {\n+                return source.getCreated() != null ?\n+                    new Date(source.getCreated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            @Override\n+            public Date getUpdated() {\n+                return source.getUpdated() != null ?\n+                    new Date(source.getUpdated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return source.getName();\n+            }\n+\n+            @Override\n+            public Collection<? extends UserInfo> getUsers() {\n+                Set<UserDTO> userDTOSet = source.getUsers();\n+                Set<UserInfo> userInfoSet = null;\n+\n+                if (userDTOSet != null) {\n+                    userInfoSet = new HashSet<>();\n+                    for (UserDTO dto : userDTOSet) {\n+                        userInfoSet.add(userInfoAdapter(dto));\n+                    }\n+                }\n+\n+                return userInfoSet;\n+            }\n+\n+            @Override\n+            public Collection<? extends PermissionBlueprintInfo> getPermissions() {\n+                List<PermissionBlueprintDTO> blueprintDTOList = source.getPermissions();\n+                List<PermissionBlueprintInfo> blueprintInfoList = null;\n+\n+                if (blueprintDTOList != null) {\n+                    blueprintInfoList = new ArrayList<>();\n+                    for (PermissionBlueprintDTO dto : blueprintDTOList) {\n+                        blueprintInfoList.add(permissionBlueprintInfoAdapter(dto));\n+                    }\n+                }\n+                return blueprintInfoList;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the PermissionBlueprintDTO\n+     * into PermissionBlueprintInfo object.\n+     *\n+     * @param source PermissionBlueprintDTO object\n+     *\n+     * @return PermissionBlueprintInfo object\n+     */\n+    public static PermissionBlueprintInfo permissionBlueprintInfoAdapter(PermissionBlueprintDTO source) {\n+\n+        return new PermissionBlueprintInfo() {\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public OwnerInfo getOwner() {\n+                return ownerInfoAdapter(source.getOwner());\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getTypeName() {\n+                return source.getType();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getAccessLevel() {\n+                return source.getAccess();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the UserDTO\n+     * into UserInfo object.\n+     *\n+     * @param source UserDTO object\n+     *\n+     * @return UserInfo object\n+     */\n+    public static UserInfo userInfoAdapter(UserDTO source) {\n+        return new UserInfo() {\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Date getCreated() {\n+                return source.getCreated() != null ?\n+                    new Date(source.getCreated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Date getUpdated() {\n+                return source.getUpdated() != null ?\n+                    new Date(source.getUpdated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getUsername() {\n+                return source.getUsername();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getHashedPassword() {\n+                return source.getPassword() == null ? source.getPassword() :\n+                    Util.hash(source.getPassword());\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Boolean isSuperAdmin() {\n+                return source.getSuperAdmin();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Collection<? extends RoleInfo> getRoles() {\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8b42ee7cde336a05008ee8ff12c445d74fab02"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxNzEzMw==", "bodyText": "why null?", "url": "https://github.com/candlepin/candlepin/pull/2683#discussion_r411317133", "createdAt": "2020-04-20T11:54:59Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/InfoAdapter.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.service.model.OwnerInfo;\n+import org.candlepin.service.model.PermissionBlueprintInfo;\n+import org.candlepin.service.model.RoleInfo;\n+import org.candlepin.service.model.UserInfo;\n+import org.candlepin.util.Util;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Represents the adapters class to convert the DTOs object into\n+ * info interface implemented objects. Initially, DTO classes were\n+ * implementing Info interfaces. This class helps to get an equivalent\n+ * implemented interface object.\n+ */\n+public class InfoAdapter {\n+\n+    private InfoAdapter() {\n+        //nothing to do here\n+    }\n+\n+    /**\n+     * This method adapts the RoleDTO into RoleInfo object.\n+     *\n+     * @param source RoleDTO object\n+     *\n+     * @return RoleInfo object\n+     */\n+    public static RoleInfo roleInfoAdapter(RoleDTO source) {\n+        return new RoleInfo() {\n+\n+            @Override\n+            public Date getCreated() {\n+                return source.getCreated() != null ?\n+                    new Date(source.getCreated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            @Override\n+            public Date getUpdated() {\n+                return source.getUpdated() != null ?\n+                    new Date(source.getUpdated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return source.getName();\n+            }\n+\n+            @Override\n+            public Collection<? extends UserInfo> getUsers() {\n+                Set<UserDTO> userDTOSet = source.getUsers();\n+                Set<UserInfo> userInfoSet = null;\n+\n+                if (userDTOSet != null) {\n+                    userInfoSet = new HashSet<>();\n+                    for (UserDTO dto : userDTOSet) {\n+                        userInfoSet.add(userInfoAdapter(dto));\n+                    }\n+                }\n+\n+                return userInfoSet;\n+            }\n+\n+            @Override\n+            public Collection<? extends PermissionBlueprintInfo> getPermissions() {\n+                List<PermissionBlueprintDTO> blueprintDTOList = source.getPermissions();\n+                List<PermissionBlueprintInfo> blueprintInfoList = null;\n+\n+                if (blueprintDTOList != null) {\n+                    blueprintInfoList = new ArrayList<>();\n+                    for (PermissionBlueprintDTO dto : blueprintDTOList) {\n+                        blueprintInfoList.add(permissionBlueprintInfoAdapter(dto));\n+                    }\n+                }\n+                return blueprintInfoList;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the PermissionBlueprintDTO\n+     * into PermissionBlueprintInfo object.\n+     *\n+     * @param source PermissionBlueprintDTO object\n+     *\n+     * @return PermissionBlueprintInfo object\n+     */\n+    public static PermissionBlueprintInfo permissionBlueprintInfoAdapter(PermissionBlueprintDTO source) {\n+\n+        return new PermissionBlueprintInfo() {\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public OwnerInfo getOwner() {\n+                return ownerInfoAdapter(source.getOwner());\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getTypeName() {\n+                return source.getType();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getAccessLevel() {\n+                return source.getAccess();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the UserDTO\n+     * into UserInfo object.\n+     *\n+     * @param source UserDTO object\n+     *\n+     * @return UserInfo object\n+     */\n+    public static UserInfo userInfoAdapter(UserDTO source) {\n+        return new UserInfo() {\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Date getCreated() {\n+                return source.getCreated() != null ?\n+                    new Date(source.getCreated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Date getUpdated() {\n+                return source.getUpdated() != null ?\n+                    new Date(source.getUpdated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getUsername() {\n+                return source.getUsername();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getHashedPassword() {\n+                return source.getPassword() == null ? source.getPassword() :\n+                    Util.hash(source.getPassword());\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Boolean isSuperAdmin() {\n+                return source.getSuperAdmin();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Collection<? extends RoleInfo> getRoles() {\n+                return null;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the NestedOwnerDTO\n+     * into OwnerInfo object.\n+     *\n+     * @param source NestedOwnerDTO object\n+     *\n+     * @return OwnerInfo object\n+     */\n+    public static OwnerInfo ownerInfoAdapter(NestedOwnerDTO source) {\n+        return new OwnerInfo() {\n+            @Override\n+            public String getKey() {\n+                return source.getKey();\n+            }\n+\n+            @Override\n+            public Date getCreated() {\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8b42ee7cde336a05008ee8ff12c445d74fab02"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxNzE4NA==", "bodyText": "why null?", "url": "https://github.com/candlepin/candlepin/pull/2683#discussion_r411317184", "createdAt": "2020-04-20T11:55:04Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/InfoAdapter.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.service.model.OwnerInfo;\n+import org.candlepin.service.model.PermissionBlueprintInfo;\n+import org.candlepin.service.model.RoleInfo;\n+import org.candlepin.service.model.UserInfo;\n+import org.candlepin.util.Util;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Represents the adapters class to convert the DTOs object into\n+ * info interface implemented objects. Initially, DTO classes were\n+ * implementing Info interfaces. This class helps to get an equivalent\n+ * implemented interface object.\n+ */\n+public class InfoAdapter {\n+\n+    private InfoAdapter() {\n+        //nothing to do here\n+    }\n+\n+    /**\n+     * This method adapts the RoleDTO into RoleInfo object.\n+     *\n+     * @param source RoleDTO object\n+     *\n+     * @return RoleInfo object\n+     */\n+    public static RoleInfo roleInfoAdapter(RoleDTO source) {\n+        return new RoleInfo() {\n+\n+            @Override\n+            public Date getCreated() {\n+                return source.getCreated() != null ?\n+                    new Date(source.getCreated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            @Override\n+            public Date getUpdated() {\n+                return source.getUpdated() != null ?\n+                    new Date(source.getUpdated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return source.getName();\n+            }\n+\n+            @Override\n+            public Collection<? extends UserInfo> getUsers() {\n+                Set<UserDTO> userDTOSet = source.getUsers();\n+                Set<UserInfo> userInfoSet = null;\n+\n+                if (userDTOSet != null) {\n+                    userInfoSet = new HashSet<>();\n+                    for (UserDTO dto : userDTOSet) {\n+                        userInfoSet.add(userInfoAdapter(dto));\n+                    }\n+                }\n+\n+                return userInfoSet;\n+            }\n+\n+            @Override\n+            public Collection<? extends PermissionBlueprintInfo> getPermissions() {\n+                List<PermissionBlueprintDTO> blueprintDTOList = source.getPermissions();\n+                List<PermissionBlueprintInfo> blueprintInfoList = null;\n+\n+                if (blueprintDTOList != null) {\n+                    blueprintInfoList = new ArrayList<>();\n+                    for (PermissionBlueprintDTO dto : blueprintDTOList) {\n+                        blueprintInfoList.add(permissionBlueprintInfoAdapter(dto));\n+                    }\n+                }\n+                return blueprintInfoList;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the PermissionBlueprintDTO\n+     * into PermissionBlueprintInfo object.\n+     *\n+     * @param source PermissionBlueprintDTO object\n+     *\n+     * @return PermissionBlueprintInfo object\n+     */\n+    public static PermissionBlueprintInfo permissionBlueprintInfoAdapter(PermissionBlueprintDTO source) {\n+\n+        return new PermissionBlueprintInfo() {\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public OwnerInfo getOwner() {\n+                return ownerInfoAdapter(source.getOwner());\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getTypeName() {\n+                return source.getType();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getAccessLevel() {\n+                return source.getAccess();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the UserDTO\n+     * into UserInfo object.\n+     *\n+     * @param source UserDTO object\n+     *\n+     * @return UserInfo object\n+     */\n+    public static UserInfo userInfoAdapter(UserDTO source) {\n+        return new UserInfo() {\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Date getCreated() {\n+                return source.getCreated() != null ?\n+                    new Date(source.getCreated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Date getUpdated() {\n+                return source.getUpdated() != null ?\n+                    new Date(source.getUpdated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getUsername() {\n+                return source.getUsername();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getHashedPassword() {\n+                return source.getPassword() == null ? source.getPassword() :\n+                    Util.hash(source.getPassword());\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Boolean isSuperAdmin() {\n+                return source.getSuperAdmin();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Collection<? extends RoleInfo> getRoles() {\n+                return null;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the NestedOwnerDTO\n+     * into OwnerInfo object.\n+     *\n+     * @param source NestedOwnerDTO object\n+     *\n+     * @return OwnerInfo object\n+     */\n+    public static OwnerInfo ownerInfoAdapter(NestedOwnerDTO source) {\n+        return new OwnerInfo() {\n+            @Override\n+            public String getKey() {\n+                return source.getKey();\n+            }\n+\n+            @Override\n+            public Date getCreated() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Date getUpdated() {\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8b42ee7cde336a05008ee8ff12c445d74fab02"}, "originalPosition": 225}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e056478ef09c6ff382b9dee9bfe3e86e36744c52", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/e056478ef09c6ff382b9dee9bfe3e86e36744c52", "committedDate": "2020-04-20T14:13:36Z", "message": "ENT-2291: Create adapter methods for DTOs implementing\n*Info Interfaces\n - Added a class InfoAdapter to provide implementation\n   of info interfaces.\n - Removed the translators and its test suites.\n   1. UserDTOTranslator\n   2. RoleDTOTranslator\n   3. PermissionBluePrintDTOTranslator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a8b42ee7cde336a05008ee8ff12c445d74fab02", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/6a8b42ee7cde336a05008ee8ff12c445d74fab02", "committedDate": "2020-04-20T10:20:54Z", "message": "ENT-2291: Create adapter methods for DTOs implementing\n*Info Interfaces\n - Added a class InfoAdapter to provide implementation\n   of info interfaces.\n - Removed the translators and its test suites.\n   1. UserDTOTranslator\n   2. RoleDTOTranslator\n   3. PermissionBluePrintDTOTranslator"}, "afterCommit": {"oid": "e056478ef09c6ff382b9dee9bfe3e86e36744c52", "author": {"user": {"login": "sonalidhome", "name": "Sonali Dhome"}}, "url": "https://github.com/candlepin/candlepin/commit/e056478ef09c6ff382b9dee9bfe3e86e36744c52", "committedDate": "2020-04-20T14:13:36Z", "message": "ENT-2291: Create adapter methods for DTOs implementing\n*Info Interfaces\n - Added a class InfoAdapter to provide implementation\n   of info interfaces.\n - Removed the translators and its test suites.\n   1. UserDTOTranslator\n   2. RoleDTOTranslator\n   3. PermissionBluePrintDTOTranslator"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2377, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}