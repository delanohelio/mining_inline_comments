{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1Njk3NTgw", "number": 2576, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzoxMjo0NFrODZu2uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1NTowNlrODleoXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzA4NjY3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/candlepin/policy/PoolRulesStackDerivedTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzoxMjo0NFrOFgSU7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzoxMjo0NFrOFgSU7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5OTAyMQ==", "bodyText": "The functionality is not supported now. Currently this test is ignored and finally will remove this if we have consensus on it.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r369399021", "createdAt": "2020-01-22T07:12:44Z", "author": {"login": "wolfdale"}, "path": "server/src/test/java/org/candlepin/policy/PoolRulesStackDerivedTest.java", "diffHunk": "@@ -323,6 +324,7 @@ public void mergedProductAttributes() {\n     }\n \n     @Test\n+    @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODE3MzU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/manifest/v1/ProductDTO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTo0MjoxOVrOFhC6CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1NDozOVrOFkrtAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5NDk1Mw==", "bodyText": "You can do this logic without collecting them into another collection by using .forEach if you want to continue using a stream, or by simply using a normal for loop in place of all of this.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r370194953", "createdAt": "2020-01-23T15:42:19Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/manifest/v1/ProductDTO.java", "diffHunk": "@@ -922,6 +1028,13 @@ public ProductDTO clone() {\n         copy.setDependentProductIds(this.getDependentProductIds());\n         copy.setBranding(this.getBranding());\n \n+        if (this.getProvidedProducts() != null) {\n+            copy.providedProducts = new HashSet<>();\n+            copy.providedProducts.addAll(this.getProvidedProducts().stream()\n+                .map(prodDTO -> prodDTO.clone())\n+                .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwOTA5MQ==", "bodyText": "Yes, agreed. Fixed it.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374009091", "createdAt": "2020-02-03T09:54:39Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/dto/manifest/v1/ProductDTO.java", "diffHunk": "@@ -922,6 +1028,13 @@ public ProductDTO clone() {\n         copy.setDependentProductIds(this.getDependentProductIds());\n         copy.setBranding(this.getBranding());\n \n+        if (this.getProvidedProducts() != null) {\n+            copy.providedProducts = new HashSet<>();\n+            copy.providedProducts.addAll(this.getProvidedProducts().stream()\n+                .map(prodDTO -> prodDTO.clone())\n+                .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5NDk1Mw=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODE3NjQxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/manifest/v1/ProductDTO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTo0MzowNVrOFhC76Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1NDo1MFrOFkrtXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5NTQzMw==", "bodyText": "Same thing here: this logic can be done without the creation, buildup and teardown of another collection.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r370195433", "createdAt": "2020-01-23T15:43:05Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/manifest/v1/ProductDTO.java", "diffHunk": "@@ -949,6 +1062,12 @@ public ProductDTO populate(ProductDTO source) {\n         this.setDependentProductIds(source.getDependentProductIds());\n         this.setBranding(source.getBranding());\n \n+        if (source.getProvidedProducts() != null) {\n+            this.setProvidedProducts(source.getProvidedProducts().stream()\n+                .map(prod -> new ProductDTO(prod))\n+                .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwOTE4MQ==", "bodyText": "fixed.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374009181", "createdAt": "2020-02-03T09:54:50Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/dto/manifest/v1/ProductDTO.java", "diffHunk": "@@ -949,6 +1062,12 @@ public ProductDTO populate(ProductDTO source) {\n         this.setDependentProductIds(source.getDependentProductIds());\n         this.setBranding(source.getBranding());\n \n+        if (source.getProvidedProducts() != null) {\n+            this.setProvidedProducts(source.getProvidedProducts().stream()\n+                .map(prod -> new ProductDTO(prod))\n+                .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5NTQzMw=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODE5NTU4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTo0ODoyMFrOFhDIxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNjoyNjoxN1rOFknWwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5ODcyNg==", "bodyText": "I don't believe we need to manually calculate everything here. We should be able to just throw the collection at the HashCodeBuilder like we do with content.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r370198726", "createdAt": "2020-01-23T15:48:20Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -982,14 +1044,28 @@ public boolean equals(Object obj) {\n             .append(this.content, that.content)\n             .append(this.dependentProductIds, that.dependentProductIds)\n             .append(this.branding, that.branding)\n+            .append(this.providedProducts, that.providedProducts)\n             .append(this.href, that.href)\n             .append(this.locked, that.locked);\n \n-        return super.equals(obj) && builder.isEquals();\n+        boolean equals = super.equals(obj) && builder.isEquals();\n+        equals = equals && Util.collectionsAreEqual(this.providedProducts, that.providedProducts);\n+\n+        return equals;\n+\n     }\n \n     @Override\n     public int hashCode() {\n+        int ppHashCode = 0;\n+        Collection<ProductData> providedProducts = this.getProvidedProducts();\n+\n+        if (providedProducts != null) {\n+            for (ProductData pProduct : providedProducts) {\n+                ppHashCode = 31 * ppHashCode + (pProduct != null ? pProduct.hashCode() : 0);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzNzg1Ng==", "bodyText": "Re-based the branch and its now removed.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r373937856", "createdAt": "2020-02-03T06:26:17Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -982,14 +1044,28 @@ public boolean equals(Object obj) {\n             .append(this.content, that.content)\n             .append(this.dependentProductIds, that.dependentProductIds)\n             .append(this.branding, that.branding)\n+            .append(this.providedProducts, that.providedProducts)\n             .append(this.href, that.href)\n             .append(this.locked, that.locked);\n \n-        return super.equals(obj) && builder.isEquals();\n+        boolean equals = super.equals(obj) && builder.isEquals();\n+        equals = equals && Util.collectionsAreEqual(this.providedProducts, that.providedProducts);\n+\n+        return equals;\n+\n     }\n \n     @Override\n     public int hashCode() {\n+        int ppHashCode = 0;\n+        Collection<ProductData> providedProducts = this.getProvidedProducts();\n+\n+        if (providedProducts != null) {\n+            for (ProductData pProduct : providedProducts) {\n+                ppHashCode = 31 * ppHashCode + (pProduct != null ? pProduct.hashCode() : 0);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5ODcyNg=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODE5ODA5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTo0OTowMVrOFhDKXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1NDo1N1rOFkrtlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5OTEzMg==", "bodyText": "Just like the manifest product DTO: we don't want to incur the cost of building another collection if we don't have to.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r370199132", "createdAt": "2020-01-23T15:49:01Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -1034,6 +1111,13 @@ public Object clone() {\n                 this.branding.stream().map(Branding::clone).collect(Collectors.toSet()));\n         }\n \n+        if (this.providedProducts != null) {\n+            copy.providedProducts = new HashSet<>();\n+            copy.providedProducts.addAll(this.providedProducts.stream()\n+                .map(prodData -> (ProductData) prodData.clone())\n+                .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwOTIzOQ==", "bodyText": "fixed it.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374009239", "createdAt": "2020-02-03T09:54:57Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -1034,6 +1111,13 @@ public Object clone() {\n                 this.branding.stream().map(Branding::clone).collect(Collectors.toSet()));\n         }\n \n+        if (this.providedProducts != null) {\n+            copy.providedProducts = new HashSet<>();\n+            copy.providedProducts.addAll(this.providedProducts.stream()\n+                .map(prodData -> (ProductData) prodData.clone())\n+                .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5OTEzMg=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODE5OTAyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTo0OToxN1rOFhDLAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1NTowNFrOFkrt0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5OTI5Nw==", "bodyText": "Since we're offloading to the setProvidedProducts method, this is probably entirely extraneous.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r370199297", "createdAt": "2020-01-23T15:49:17Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -1068,6 +1152,12 @@ public ProductData populate(ProductData source) {\n         this.setDependentProductIds(source.getDependentProductIds());\n         this.setBranding(source.getBranding());\n \n+        if (source.getProvidedProducts() != null) {\n+            this.setProvidedProducts(source.getProvidedProducts().stream()\n+                .map(prod -> new ProductData(prod))\n+                .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwOTI5Ng==", "bodyText": "fixed it.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374009296", "createdAt": "2020-02-03T09:55:04Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -1068,6 +1152,12 @@ public ProductData populate(ProductData source) {\n         this.setDependentProductIds(source.getDependentProductIds());\n         this.setBranding(source.getBranding());\n \n+        if (source.getProvidedProducts() != null) {\n+            this.setProvidedProducts(source.getProvidedProducts().stream()\n+                .map(prod -> new ProductData(prod))\n+                .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5OTI5Nw=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODIyNzAyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTo1NzowNFrOFhDdXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoyMTowNFrOFxvE_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwMzk5Ng==", "bodyText": "If we're going to boil this down to one check, we should use the UUID, since we can lean on the fact our products are singletons and will only see new UUIDs if the product itself has already been found to change elsewhere. We should also document why that single check is okay.\nIt would also be good to identify what the exact intent is. I feel we're starting to lose sight of what these methods were originally intended to do, and a lot of them can be refactored down to one or two lines of code. For instance, this particular method looks like it could be:\nboolean changed = incomingProduct.getUuid() == null ||\n  !incomingProduct.getUuid().equals(existingProduct.getUuid());\n\nif (changed) {\n  existingPool.setProduct(incomingProduct);\n}\n\nreturn changed;\n\nI'm not sure what value the changedProducts bits has these days. The entire flow looks like it could use a review.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r370203996", "createdAt": "2020-01-23T15:57:04Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,\n+        Product> changedProducts) {\n \n         Product existingProduct = existingPool.getProduct();\n-        Set<Product> currentProvided = productCurator.getPoolProvidedProductsCached(existingPool);\n         String pid = existingProduct.getId();\n \n         // TODO: ideally we would differentiate between these different product changes\n         // a little, but in the end it probably doesn't matter:\n-        boolean productsChanged =\n-            (pid != null && !pid.equals(incomingProduct.getId())) ||\n-            !currentProvided.equals(incomingProvided);\n+        boolean productsChanged = pid != null && !pid.equals(incomingProduct.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMTM2OA==", "bodyText": "The changedProducts Map is still using productIds for comparison, not sure if we can remove it.\nIf so we can remove it, this whole bit can be refactored along with checkForChangedDerivedProducts method.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374011368", "createdAt": "2020-02-03T09:59:11Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,\n+        Product> changedProducts) {\n \n         Product existingProduct = existingPool.getProduct();\n-        Set<Product> currentProvided = productCurator.getPoolProvidedProductsCached(existingPool);\n         String pid = existingProduct.getId();\n \n         // TODO: ideally we would differentiate between these different product changes\n         // a little, but in the end it probably doesn't matter:\n-        boolean productsChanged =\n-            (pid != null && !pid.equals(incomingProduct.getId())) ||\n-            !currentProvided.equals(incomingProvided);\n+        boolean productsChanged = pid != null && !pid.equals(incomingProduct.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwMzk5Ng=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4ODIyNg==", "bodyText": "We probably don't need both anymore (if a derived product changed, the product itself changed and should show up in changedProducts); hence why I said the whole flow could use a review. The original intent is slowly getting lost, and it would do us some good to re-evaluate and refactor this whole area.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374188226", "createdAt": "2020-02-03T16:02:21Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,\n+        Product> changedProducts) {\n \n         Product existingProduct = existingPool.getProduct();\n-        Set<Product> currentProvided = productCurator.getPoolProvidedProductsCached(existingPool);\n         String pid = existingProduct.getId();\n \n         // TODO: ideally we would differentiate between these different product changes\n         // a little, but in the end it probably doesn't matter:\n-        boolean productsChanged =\n-            (pid != null && !pid.equals(incomingProduct.getId())) ||\n-            !currentProvided.equals(incomingProvided);\n+        boolean productsChanged = pid != null && !pid.equals(incomingProduct.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwMzk5Ng=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2MDI2Ng==", "bodyText": "Earlier we discussed that product (both mkt and eng product) member properties are equally essential to detect if a product has changed or not. The changedProducts map contains the net sum of any of the properties of a product that have changed or not. This map is populated inside ProductManager while products are getting imported.\nNow in this current method we cant just only rely on the productID or Uuid to mark the product has changed from state present in pool (product in existing pool), therefore changeProduct map becomes equally important for this.\nAny thoughts on this?", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r384960266", "createdAt": "2020-02-27T07:52:04Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,\n+        Product> changedProducts) {\n \n         Product existingProduct = existingPool.getProduct();\n-        Set<Product> currentProvided = productCurator.getPoolProvidedProductsCached(existingPool);\n         String pid = existingProduct.getId();\n \n         // TODO: ideally we would differentiate between these different product changes\n         // a little, but in the end it probably doesn't matter:\n-        boolean productsChanged =\n-            (pid != null && !pid.equals(incomingProduct.getId())) ||\n-            !currentProvided.equals(incomingProvided);\n+        boolean productsChanged = pid != null && !pid.equals(incomingProduct.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwMzk5Ng=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MjYxMg==", "bodyText": "The map just feels like an old way of doing the same kind of logic. We know that since products are singletons, the UUIDs are unique to a given product state; especially since we've decided that changes to children is going to affect the parents' version. So long as the UUID is set on both entities, this could act as a sufficient \"did the product change\" check and we can ignore the changedProducts map entirely for this particular check.\nI would like to see a comment to that effect if that's what we end up doing.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385772612", "createdAt": "2020-02-28T15:51:16Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,\n+        Product> changedProducts) {\n \n         Product existingProduct = existingPool.getProduct();\n-        Set<Product> currentProvided = productCurator.getPoolProvidedProductsCached(existingPool);\n         String pid = existingProduct.getId();\n \n         // TODO: ideally we would differentiate between these different product changes\n         // a little, but in the end it probably doesn't matter:\n-        boolean productsChanged =\n-            (pid != null && !pid.equals(incomingProduct.getId())) ||\n-            !currentProvided.equals(incomingProvided);\n+        boolean productsChanged = pid != null && !pid.equals(incomingProduct.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwMzk5Ng=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4NTY2Nw==", "bodyText": "One oddity I just realized with this process, is we're probably breaking it when we do the reference updating via SQL at the end of importProduct, even today in current master.\nHrmm...", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385785667", "createdAt": "2020-02-28T16:14:34Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,\n+        Product> changedProducts) {\n \n         Product existingProduct = existingPool.getProduct();\n-        Set<Product> currentProvided = productCurator.getPoolProvidedProductsCached(existingPool);\n         String pid = existingProduct.getId();\n \n         // TODO: ideally we would differentiate between these different product changes\n         // a little, but in the end it probably doesn't matter:\n-        boolean productsChanged =\n-            (pid != null && !pid.equals(incomingProduct.getId())) ||\n-            !currentProvided.equals(incomingProvided);\n+        boolean productsChanged = pid != null && !pid.equals(incomingProduct.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwMzk5Ng=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MjI4Mw==", "bodyText": "That was a good idea to use Products entity version to detect if the incoming product (present in Pool) has changed from existing products (present in existing pools) in this particular code block.\nBased on preliminary observation there is one issue, when we trace the refresh flow, we first import products, if there is any changes we update (or create a new one) the product and finally persist it in DB.\nIn next couple of step we get all the subscription pools -\nCandlepinPoolManger.java Method - refreshPoolsForMasterPool\nsubscriptionPools = this.poolCurator.getPoolsBySubscriptionId(pool.getSubscriptionId()).list();\n\nWhen we make this DB call, we get all the updated products which was already persisted in DB during Product import call (with updated entity version of course) inside the subscription pools (aka existing pools).\nThis is why I was wondering why the entity version of incoming product and product inside existing pools are same, because they are same product. This could be one of the reason why we need a changedProduct map.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387082283", "createdAt": "2020-03-03T15:06:42Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,\n+        Product> changedProducts) {\n \n         Product existingProduct = existingPool.getProduct();\n-        Set<Product> currentProvided = productCurator.getPoolProvidedProductsCached(existingPool);\n         String pid = existingProduct.getId();\n \n         // TODO: ideally we would differentiate between these different product changes\n         // a little, but in the end it probably doesn't matter:\n-        boolean productsChanged =\n-            (pid != null && !pid.equals(incomingProduct.getId())) ||\n-            !currentProvided.equals(incomingProvided);\n+        boolean productsChanged = pid != null && !pid.equals(incomingProduct.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwMzk5Ng=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2NTY0Mg==", "bodyText": "@Ceiu  Any thoughts on above comment ?", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387565642", "createdAt": "2020-03-04T10:09:28Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,\n+        Product> changedProducts) {\n \n         Product existingProduct = existingPool.getProduct();\n-        Set<Product> currentProvided = productCurator.getPoolProvidedProductsCached(existingPool);\n         String pid = existingProduct.getId();\n \n         // TODO: ideally we would differentiate between these different product changes\n         // a little, but in the end it probably doesn't matter:\n-        boolean productsChanged =\n-            (pid != null && !pid.equals(incomingProduct.getId())) ||\n-            !currentProvided.equals(incomingProvided);\n+        boolean productsChanged = pid != null && !pid.equals(incomingProduct.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwMzk5Ng=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5NTg2OA==", "bodyText": "I wouldn't be surprised if that's exactly what's happening. It probably comes down to whether or not a given pool is already in the session cache before the import call is made.\nWe can leave it as-is for now, and revisit it once we have time to revisit the pool side of refresh.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387695868", "createdAt": "2020-03-04T14:21:04Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,\n+        Product> changedProducts) {\n \n         Product existingProduct = existingPool.getProduct();\n-        Set<Product> currentProvided = productCurator.getPoolProvidedProductsCached(existingPool);\n         String pid = existingProduct.getId();\n \n         // TODO: ideally we would differentiate between these different product changes\n         // a little, but in the end it probably doesn't matter:\n-        boolean productsChanged =\n-            (pid != null && !pid.equals(incomingProduct.getId())) ||\n-            !currentProvided.equals(incomingProvided);\n+        boolean productsChanged = pid != null && !pid.equals(incomingProduct.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwMzk5Ng=="}, "originalCommit": {"oid": "986d90147082db8db40aac67989f9a55fdd041d1"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzM4MDUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMjo1MjoyMFrOFkwUQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTowNzowOFrOFmybeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4NDY3Mg==", "bodyText": "There is no need to create this method. The existing resolveProduct/resolveProducts methods can be used instead. spec tests should explicitly make sure that provided products are created first, and then any marketing products that are referencing them.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374084672", "createdAt": "2020-02-03T12:52:20Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -820,6 +842,35 @@ protected ProductData resolveProduct(ProductInfo pinfo) {\n         return null;\n     }\n \n+    protected Collection<ProductData> resolveProvidedProducts(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNjQ0MA==", "bodyText": "Yes agreed. I have removed this method.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r376216440", "createdAt": "2020-02-07T05:07:08Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -820,6 +842,35 @@ protected ProductData resolveProduct(ProductInfo pinfo) {\n         return null;\n     }\n \n+    protected Collection<ProductData> resolveProvidedProducts(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4NDY3Mg=="}, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzM5ODA3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMjo1ODo0M1rOFkwe3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzoyNzowNVrOFn_N2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4NzM4OA==", "bodyText": "There is no need for all this, since this.setProvidedProducts is already doing all these exact checks.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374087388", "createdAt": "2020-02-03T12:58:43Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -1139,9 +1140,19 @@ public ProductData populate(ProductData source) {\n         this.setBranding(source.getBranding());\n \n         if (source.getProvidedProducts() != null) {\n-            this.setProvidedProducts(source.getProvidedProducts().stream()\n-                .map(prod -> new ProductData(prod))\n-                .collect(Collectors.toSet()));\n+            if (this.providedProducts == null) {\n+                this.providedProducts = new HashSet<>();\n+            }\n+            else {\n+                this.providedProducts.clear();\n+            }\n+\n+            for (ProductData pData : source.getProvidedProducts()) {\n+                this.providedProducts.add(new ProductData(pData));\n+            }\n+        }\n+        else {\n+            this.setProvidedProducts(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3NDUyMQ==", "bodyText": "This is done to avoid creating a intermediate collection while collecting all providedProducts within a Java stream as suggested by @Ceiu\nThe method this.setProvidedProducts doesn't allow deep copy which is needed here in populate method.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r377474521", "createdAt": "2020-02-11T07:27:05Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -1139,9 +1140,19 @@ public ProductData populate(ProductData source) {\n         this.setBranding(source.getBranding());\n \n         if (source.getProvidedProducts() != null) {\n-            this.setProvidedProducts(source.getProvidedProducts().stream()\n-                .map(prod -> new ProductData(prod))\n-                .collect(Collectors.toSet()));\n+            if (this.providedProducts == null) {\n+                this.providedProducts = new HashSet<>();\n+            }\n+            else {\n+                this.providedProducts.clear();\n+            }\n+\n+            for (ProductData pData : source.getProvidedProducts()) {\n+                this.providedProducts.add(new ProductData(pData));\n+            }\n+        }\n+        else {\n+            this.setProvidedProducts(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4NzM4OA=="}, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzQwMzAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzowMDozM1rOFkwh2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzoyNzowM1rOFn_NyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4ODE1NQ==", "bodyText": "Same here: duplicating what this.setProvidedProducts is already doing", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374088155", "createdAt": "2020-02-03T13:00:33Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -1195,9 +1206,19 @@ public ProductData populate(Product source) {\n         this.setBranding(source.getBranding());\n \n         if (source.getProvidedProducts() != null) {\n-            this.setProvidedProducts(source.getProvidedProducts().stream()\n-                .map(prod -> new ProductData(prod))\n-                .collect(Collectors.toSet()));\n+            if (this.providedProducts == null) {\n+                this.providedProducts = new HashSet<>();\n+            }\n+            else {\n+                this.providedProducts.clear();\n+            }\n+\n+            for (Product pData : source.getProvidedProducts()) {\n+                this.providedProducts.add(new ProductData(pData));\n+            }\n+        }\n+        else {\n+            this.setProvidedProducts(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3NDUwNQ==", "bodyText": "This is done to avoid creating a intermediate collection while collecting all providedProducts within a Java stream as suggested by @Ceiu\nThe method this.setProvidedProducts doesn't allow deep copy which is needed here in populate method.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r377474505", "createdAt": "2020-02-11T07:27:03Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/model/dto/ProductData.java", "diffHunk": "@@ -1195,9 +1206,19 @@ public ProductData populate(Product source) {\n         this.setBranding(source.getBranding());\n \n         if (source.getProvidedProducts() != null) {\n-            this.setProvidedProducts(source.getProvidedProducts().stream()\n-                .map(prod -> new ProductData(prod))\n-                .collect(Collectors.toSet()));\n+            if (this.providedProducts == null) {\n+                this.providedProducts = new HashSet<>();\n+            }\n+            else {\n+                this.providedProducts.clear();\n+            }\n+\n+            for (Product pData : source.getProvidedProducts()) {\n+                this.providedProducts.add(new ProductData(pData));\n+            }\n+        }\n+        else {\n+            this.setProvidedProducts(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4ODE1NQ=="}, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzQwODE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzowMjoyN1rOFkwk1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTowNzoxMlrOFmybhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4ODkxNw==", "bodyText": "This can be removed completely", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374088917", "createdAt": "2020-02-03T13:02:27Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolHelper.java", "diffHunk": "@@ -264,25 +191,23 @@ public static Pool clonePool(Pool sourcePool, Product product, String quantity,\n \n     private static Pool createPool(Product product, Owner owner, String quantity, Date startDate,\n         Date endDate, String contractNumber, String accountNumber, String orderNumber,\n-        Set<Product> providedProducts, Entitlement sourceEntitlement, Consumer sourceConsumer,\n+        Entitlement sourceEntitlement, Consumer sourceConsumer,\n         Pool sourcePool) {\n \n         Long q = Pool.parseQuantity(quantity);\n \n-        Pool pool = new Pool(\n-            owner,\n-            product,\n-            new HashSet<>(),\n-            q,\n-            startDate,\n-            endDate,\n-            contractNumber,\n-            accountNumber,\n-            orderNumber\n-        );\n+        Pool pool = new Pool();\n+        pool.setOwner(owner);\n+        pool.setProduct(product);\n+        pool.setQuantity(q);\n+        pool.setStartDate(startDate);\n+        pool.setEndDate(endDate);\n+        pool.setContractNumber(contractNumber);\n+        pool.setAccountNumber(accountNumber);\n+        pool.setOrderNumber(orderNumber);\n \n         // Must be sure to copy the provided products, not try to re-use them directly:\n-        pool.setProvidedProducts(providedProducts);\n+        // pool.getProduct().setProvidedProducts(product.getProvidedProducts());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNjQ1NQ==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r376216455", "createdAt": "2020-02-07T05:07:12Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolHelper.java", "diffHunk": "@@ -264,25 +191,23 @@ public static Pool clonePool(Pool sourcePool, Product product, String quantity,\n \n     private static Pool createPool(Product product, Owner owner, String quantity, Date startDate,\n         Date endDate, String contractNumber, String accountNumber, String orderNumber,\n-        Set<Product> providedProducts, Entitlement sourceEntitlement, Consumer sourceConsumer,\n+        Entitlement sourceEntitlement, Consumer sourceConsumer,\n         Pool sourcePool) {\n \n         Long q = Pool.parseQuantity(quantity);\n \n-        Pool pool = new Pool(\n-            owner,\n-            product,\n-            new HashSet<>(),\n-            q,\n-            startDate,\n-            endDate,\n-            contractNumber,\n-            accountNumber,\n-            orderNumber\n-        );\n+        Pool pool = new Pool();\n+        pool.setOwner(owner);\n+        pool.setProduct(product);\n+        pool.setQuantity(q);\n+        pool.setStartDate(startDate);\n+        pool.setEndDate(endDate);\n+        pool.setContractNumber(contractNumber);\n+        pool.setAccountNumber(accountNumber);\n+        pool.setOrderNumber(orderNumber);\n \n         // Must be sure to copy the provided products, not try to re-use them directly:\n-        pool.setProvidedProducts(providedProducts);\n+        // pool.getProduct().setProvidedProducts(product.getProvidedProducts());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4ODkxNw=="}, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzQ3NDUxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzoyNToxNlrOFkxMGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTowNzoxNFrOFmybkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5ODk3MQ==", "bodyText": "It's better to move the whole element (Map<String, Product> changedProducts) to the next line, instead of breaking it in the middle here", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374098971", "createdAt": "2020-02-03T13:25:16Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNjQ2Ng==", "bodyText": "Fixed.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r376216466", "createdAt": "2020-02-07T05:07:14Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -521,60 +517,25 @@ private boolean checkForOrderDataChanges(Pool pool, Pool existingPool) {\n         return orderDataChanged;\n     }\n \n-    private Set<Product> getExpectedProvidedProducts(Pool pool, boolean useDerived) {\n-        Set<Product> incomingProvided = new HashSet<>();\n-        /**\n-         * It is necessary to use getters for provided products here, because the pool\n-         * is fabricated from subscrfiption (using CandlepinPoolManager.convertToMasterPool\n-         * It is not an actual pool that would be stored in the DB.\n-         */\n-        Set<Product> source = useDerived ? pool.getDerivedProvidedProducts() : pool.getProvidedProducts();\n-\n-        if (source != null && !source.isEmpty()) {\n-            incomingProvided.addAll(source);\n-        }\n-\n-        return incomingProvided;\n-    }\n-\n-    private boolean changedProductsInSet(Set<Product> products, Map<String, Product> changedProducts) {\n-\n-        if (products != null && changedProducts != null) {\n-            for (Product product : products) {\n-                if (product != null && changedProducts.get(product.getId()) != null) {\n-                    return true;\n-                }\n-            }\n-\n-        }\n-        return false;\n-    }\n-\n-    private boolean checkForChangedProducts(Product incomingProduct, Set<Product> incomingProvided,\n-        Pool existingPool, Map<String, Product> changedProducts) {\n+    private boolean checkForChangedProducts(Product incomingProduct, Pool existingPool, Map<String,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5ODk3MQ=="}, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzkwOTMzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyNzozM1rOFk1VRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODozMzowMlrOFolhBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2Njg1Mg==", "bodyText": "These two methods are identical outside of the product reference. Whether or not we even need to bulk fetch early now since we're fetching it through the model rather than the hitting the DB every time is up for debate, and would come down to whether or not the product lookup on pools is lazy and if it needs to be populated at call time.\nAnyway, if we still end up wanting to keep this bulk behavior, there's no need to break it up into two virtually-identical methods when we don't use them independently. This should be merged into one method that either populates two maps, or returns an array of maps or something. There's no reason to iterate through the pools twice for the same work.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374166852", "createdAt": "2020-02-03T15:27:33Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java", "diffHunk": "@@ -1432,6 +1375,44 @@ public Pool get(String poolId) {\n         return enforced;\n     }\n \n+    private Map<String, Set<String>> getAllProvidedProductsFromPool(Collection<Pool> pools) {\n+        Map<String, Set<String>> providedProductMap = new HashMap<>();\n+\n+        if (pools != null && !pools.isEmpty()) {\n+            for (Pool pool : pools) {\n+                if (pool != null && pool.getId() != null && pool.getProduct() != null &&\n+                    pool.getProduct().getProvidedProducts() != null) {\n+\n+                    Set<String> listOfIds = pool.getProduct().getProvidedProducts().stream()\n+                        .map(Product::getId).collect(Collectors.toSet());\n+\n+                    providedProductMap.put(pool.getId(), listOfIds);\n+                }\n+            }\n+        }\n+\n+        return providedProductMap;\n+    }\n+\n+    private Map<String, Set<String>> getAllDerivedProvidedProductsFromPool(Collection<Pool> pools) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMjAyMg==", "bodyText": "This method is merged into one.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r378102022", "createdAt": "2020-02-12T08:33:02Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/controller/CandlepinPoolManager.java", "diffHunk": "@@ -1432,6 +1375,44 @@ public Pool get(String poolId) {\n         return enforced;\n     }\n \n+    private Map<String, Set<String>> getAllProvidedProductsFromPool(Collection<Pool> pools) {\n+        Map<String, Set<String>> providedProductMap = new HashMap<>();\n+\n+        if (pools != null && !pools.isEmpty()) {\n+            for (Pool pool : pools) {\n+                if (pool != null && pool.getId() != null && pool.getProduct() != null &&\n+                    pool.getProduct().getProvidedProducts() != null) {\n+\n+                    Set<String> listOfIds = pool.getProduct().getProvidedProducts().stream()\n+                        .map(Product::getId).collect(Collectors.toSet());\n+\n+                    providedProductMap.put(pool.getId(), listOfIds);\n+                }\n+            }\n+        }\n+\n+        return providedProductMap;\n+    }\n+\n+    private Map<String, Set<String>> getAllDerivedProvidedProductsFromPool(Collection<Pool> pools) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2Njg1Mg=="}, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzk0NDg2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTozNjo0MVrOFk1rIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzo1MzoyNVrOFvII5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3MjQ0OA==", "bodyText": "This block has shown up in another PR, which is a sign that we have dependent work, and is something we should strive to avoid in most cases.\nAdditionally, database operations are slow, and lookups should be avoided in loops if at all possible. Change this to a bulk lookup.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374172448", "createdAt": "2020-02-03T15:36:41Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -629,18 +704,57 @@ private Product applyProductChanges(Product entity, ProductDTO update, Owner own\n     private Product applyProvidedProductChanges(Product entity, ProductDTO update, Owner owner) {\n \n         if (update.getProvidedProducts() != null && !update.getProvidedProducts().isEmpty()) {\n-            entity.getProvidedProducts().clear();\n+            Set<Product> product = new HashSet<>();\n \n             for (ProductDTO providedProductDTO : update.getProvidedProducts()) {\n                 if (providedProductDTO != null && providedProductDTO.getId() != null) {\n                     Product newProd = this.ownerProductCurator.getProductById(owner,\n                         providedProductDTO.getId());\n \n                     if (newProd != null) {\n-                        entity.addProvidedProduct(newProd);\n+                        product.add(newProd);\n                     }\n                 }\n             }\n+\n+            entity.setProvidedProducts(product);\n+        }\n+\n+        return entity;\n+    }\n+\n+    /**\n+     * Applies the changes related to provided products from the given productInfo to the specified entity.\n+     *\n+     * @param entity\n+     *  The entity to modify.\n+     *\n+     * @param update\n+     *  The productInfo interface.\n+     *\n+     * @param owner\n+     *  An owner to use for resolving entity references.\n+     *\n+     * @return\n+     *  The updated product entity.\n+     */\n+    private Product applyProvidedProductChanges(Product entity, ProductInfo update, Owner owner) {\n+\n+        if (update.getProvidedProducts() != null && !update.getProvidedProducts().isEmpty()) {\n+            Set<Product> product = new HashSet<>();\n+\n+            for (ProductInfo pInfo : update.getProvidedProducts()) {\n+                if (pInfo != null && pInfo.getId() != null) {\n+                    Product newProd = this.ownerProductCurator.getProductById(owner,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2MDc0MA==", "bodyText": "Keeping this block of code as a part of workaround, since Product import will\nbe completely refactored once the design is finalized, this will eventually get removed.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r384960740", "createdAt": "2020-02-27T07:53:25Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -629,18 +704,57 @@ private Product applyProductChanges(Product entity, ProductDTO update, Owner own\n     private Product applyProvidedProductChanges(Product entity, ProductDTO update, Owner owner) {\n \n         if (update.getProvidedProducts() != null && !update.getProvidedProducts().isEmpty()) {\n-            entity.getProvidedProducts().clear();\n+            Set<Product> product = new HashSet<>();\n \n             for (ProductDTO providedProductDTO : update.getProvidedProducts()) {\n                 if (providedProductDTO != null && providedProductDTO.getId() != null) {\n                     Product newProd = this.ownerProductCurator.getProductById(owner,\n                         providedProductDTO.getId());\n \n                     if (newProd != null) {\n-                        entity.addProvidedProduct(newProd);\n+                        product.add(newProd);\n                     }\n                 }\n             }\n+\n+            entity.setProvidedProducts(product);\n+        }\n+\n+        return entity;\n+    }\n+\n+    /**\n+     * Applies the changes related to provided products from the given productInfo to the specified entity.\n+     *\n+     * @param entity\n+     *  The entity to modify.\n+     *\n+     * @param update\n+     *  The productInfo interface.\n+     *\n+     * @param owner\n+     *  An owner to use for resolving entity references.\n+     *\n+     * @return\n+     *  The updated product entity.\n+     */\n+    private Product applyProvidedProductChanges(Product entity, ProductInfo update, Owner owner) {\n+\n+        if (update.getProvidedProducts() != null && !update.getProvidedProducts().isEmpty()) {\n+            Set<Product> product = new HashSet<>();\n+\n+            for (ProductInfo pInfo : update.getProvidedProducts()) {\n+                if (pInfo != null && pInfo.getId() != null) {\n+                    Product newProd = this.ownerProductCurator.getProductById(owner,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3MjQ0OA=="}, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzk1MzQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTozOToxMFrOFk1wqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODozMzoxOFrOFolhYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3Mzg2NA==", "bodyText": "Use a set here; we're not interested in maintaining duplicate references.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374173864", "createdAt": "2020-02-03T15:39:10Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -978,6 +1092,17 @@ public int compare(Object lhs, Object rhs) {\n             }\n         }\n \n+        if (update.getProvidedProducts() != null) {\n+            if (!Util.collectionsAreEqual(entity.getProvidedProducts().stream()\n+                .map(Product::getId)\n+                .collect(Collectors.toList()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMjExMg==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r378102112", "createdAt": "2020-02-12T08:33:18Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/controller/ProductManager.java", "diffHunk": "@@ -978,6 +1092,17 @@ public int compare(Object lhs, Object rhs) {\n             }\n         }\n \n+        if (update.getProvidedProducts() != null) {\n+            if (!Util.collectionsAreEqual(entity.getProvidedProducts().stream()\n+                .map(Product::getId)\n+                .collect(Collectors.toList()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3Mzg2NA=="}, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzk4MjA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo0Njo0M1rOFk2Cug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTo1MzoxOFrOFvLs4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3ODQ5MA==", "bodyText": "This is a bit of an odd case, and I'm not 100% sure how to handle it.\nI feel like if we're setting the product at all, we should set it wholesale, which includes its provided products in a more concrete way (that is, not using partial information).\nThe thing that gives me pause here is I don't recall if we have a legitimate use-case where we change the provided products on a pool independently from the product itself. Perhaps that's a question to pose to a wider audience and then, depending on that discussion, making changes accordingly.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374178490", "createdAt": "2020-02-03T15:46:43Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -169,24 +177,34 @@ public SubscriptionInfo updateSubscription(String subscriptionId, SubscriptionIn\n \n         // Do product resolution here\n         ProductData product = this.resolveProduct(sinfo.getProduct());\n-        Collection<ProductData> providedProducts = this.resolveProducts(sinfo.getProvidedProducts());\n+\n+        if (sinfo.getProduct() != null) {\n+            Collection<ProductData> providedProducts =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAxOTEwNg==", "bodyText": "This was explicitly done to make sure that subscription (which contains providedProducts & derivedProvidedProducts) is correctly updated when there is change in provided product (ie provided products being added or removed).\nIn subscription create & update call we deal with subscription object, now the product model is changed we need to adapt the change here to make sure that subscription's providedProducts and derivedProvidedProducts properties are set accordingly.\nThis part will probably require a review and discussion.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385019106", "createdAt": "2020-02-27T09:53:18Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -169,24 +177,34 @@ public SubscriptionInfo updateSubscription(String subscriptionId, SubscriptionIn\n \n         // Do product resolution here\n         ProductData product = this.resolveProduct(sinfo.getProduct());\n-        Collection<ProductData> providedProducts = this.resolveProducts(sinfo.getProvidedProducts());\n+\n+        if (sinfo.getProduct() != null) {\n+            Collection<ProductData> providedProducts =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3ODQ5MA=="}, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDAxNjU3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1NTozMFrOFk2YJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzoyOToxOVrOFn_QsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4Mzk3NQ==", "bodyText": "This method should not exist. Products should only be referenced if they already exist in the system, which prevents one product from providing a product that doesn't exist. Every usage of this method should be replaced with the existing resolveProducts method instead.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r374183975", "createdAt": "2020-02-03T15:55:30Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -820,6 +842,35 @@ protected ProductData resolveProduct(ProductInfo pinfo) {\n         return null;\n     }\n \n+    protected Collection<ProductData> resolveProvidedProducts(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3NTI0OQ==", "bodyText": "This method is now removed.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r377475249", "createdAt": "2020-02-11T07:29:19Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -820,6 +842,35 @@ protected ProductData resolveProduct(ProductInfo pinfo) {\n         return null;\n     }\n \n+    protected Collection<ProductData> resolveProvidedProducts(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4Mzk3NQ=="}, "originalCommit": {"oid": "1ef257e9fa01fed4210870c0247de75734125bd1"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTEzMzk0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxMDo0OFrOFv4NEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowMTo0N1rOFw6OPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0ODI0Mw==", "bodyText": "This is very bad. Never modify an encapsulated collection directly unless absolutely necessary.\nFor reference, Java doesn't have a scope keyword for indicating \"subclasses only\"; and protected is the next closest thing to it. Whenever you encounter something declared as protected, try to analyze whether or not it's intended to be used outside of its class hierarchy or not.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385748243", "createdAt": "2020-02-28T15:10:48Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionResource.java", "diffHunk": "@@ -128,6 +130,32 @@ protected void createSubscriptionObjects(Subscription subscription) {\n                 this.adapter.createProduct(product);\n             }\n         }\n+\n+        if (subscription.getProduct() != null && subscription.getProvidedProducts() != null) {\n+            ProductData mktProduct = (ProductData) this.adapter.getProduct(subscription.getProduct().getId());\n+            Set<ProductData> provided = new HashSet<>();\n+\n+            for (ProductInfo providedProduct : subscription.getProvidedProducts()) {\n+                provided.add((ProductData) this.adapter.getProduct(providedProduct.getId()));\n+            }\n+\n+            mktProduct.setProvidedProducts(provided);\n+            this.adapter.productMap.put(mktProduct.getId(), mktProduct);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTg4NA==", "bodyText": "Since I updated Subscription to not have a mutator for provided products, and return the product's provided products from its accessor. This block is no longer needed and is completely removed.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r386829884", "createdAt": "2020-03-03T07:01:47Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionResource.java", "diffHunk": "@@ -128,6 +130,32 @@ protected void createSubscriptionObjects(Subscription subscription) {\n                 this.adapter.createProduct(product);\n             }\n         }\n+\n+        if (subscription.getProduct() != null && subscription.getProvidedProducts() != null) {\n+            ProductData mktProduct = (ProductData) this.adapter.getProduct(subscription.getProduct().getId());\n+            Set<ProductData> provided = new HashSet<>();\n+\n+            for (ProductInfo providedProduct : subscription.getProvidedProducts()) {\n+                provided.add((ProductData) this.adapter.getProduct(providedProduct.getId()));\n+            }\n+\n+            mktProduct.setProvidedProducts(provided);\n+            this.adapter.productMap.put(mktProduct.getId(), mktProduct);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0ODI0Mw=="}, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE0MzI0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxMzoyMVrOFv4S0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowMTo1MlrOFw6OXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTcxNQ==", "bodyText": "ProductData is a ProductInfo. Also, since we're just using this to feed back into the adapter's map, the casting seems unnecessary.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385749715", "createdAt": "2020-02-28T15:13:21Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionResource.java", "diffHunk": "@@ -128,6 +130,32 @@ protected void createSubscriptionObjects(Subscription subscription) {\n                 this.adapter.createProduct(product);\n             }\n         }\n+\n+        if (subscription.getProduct() != null && subscription.getProvidedProducts() != null) {\n+            ProductData mktProduct = (ProductData) this.adapter.getProduct(subscription.getProduct().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTkxNg==", "bodyText": "This block is removed due to updates in Subscription accessor/mutator.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r386829916", "createdAt": "2020-03-03T07:01:52Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionResource.java", "diffHunk": "@@ -128,6 +130,32 @@ protected void createSubscriptionObjects(Subscription subscription) {\n                 this.adapter.createProduct(product);\n             }\n         }\n+\n+        if (subscription.getProduct() != null && subscription.getProvidedProducts() != null) {\n+            ProductData mktProduct = (ProductData) this.adapter.getProduct(subscription.getProduct().getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTcxNQ=="}, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE0NTY1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxNDowMlrOFv4USA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowMTo1N1rOFw6OdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MDA4OA==", "bodyText": "Same deal here. We're using a lot of implementation-specific details about how the adapter works to make changes to its internals outside of its scope, which is very bad, and technically broken.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385750088", "createdAt": "2020-02-28T15:14:02Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionResource.java", "diffHunk": "@@ -128,6 +130,32 @@ protected void createSubscriptionObjects(Subscription subscription) {\n                 this.adapter.createProduct(product);\n             }\n         }\n+\n+        if (subscription.getProduct() != null && subscription.getProvidedProducts() != null) {\n+            ProductData mktProduct = (ProductData) this.adapter.getProduct(subscription.getProduct().getId());\n+            Set<ProductData> provided = new HashSet<>();\n+\n+            for (ProductInfo providedProduct : subscription.getProvidedProducts()) {\n+                provided.add((ProductData) this.adapter.getProduct(providedProduct.getId()));\n+            }\n+\n+            mktProduct.setProvidedProducts(provided);\n+            this.adapter.productMap.put(mktProduct.getId(), mktProduct);\n+        }\n+\n+        if (subscription.getDerivedProduct() != null && subscription.getDerivedProvidedProducts() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTk0MA==", "bodyText": "This block is removed due to updates in Subscription accessor/mutator.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r386829940", "createdAt": "2020-03-03T07:01:57Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionResource.java", "diffHunk": "@@ -128,6 +130,32 @@ protected void createSubscriptionObjects(Subscription subscription) {\n                 this.adapter.createProduct(product);\n             }\n         }\n+\n+        if (subscription.getProduct() != null && subscription.getProvidedProducts() != null) {\n+            ProductData mktProduct = (ProductData) this.adapter.getProduct(subscription.getProduct().getId());\n+            Set<ProductData> provided = new HashSet<>();\n+\n+            for (ProductInfo providedProduct : subscription.getProvidedProducts()) {\n+                provided.add((ProductData) this.adapter.getProduct(providedProduct.getId()));\n+            }\n+\n+            mktProduct.setProvidedProducts(provided);\n+            this.adapter.productMap.put(mktProduct.getId(), mktProduct);\n+        }\n+\n+        if (subscription.getDerivedProduct() != null && subscription.getDerivedProvidedProducts() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MDA4OA=="}, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE4MDQyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyMzoxM1rOFv4pNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowNDowMVrOFw6Qow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NTQ0Nw==", "bodyText": "Same here; subscription should be updated to do redirection rather than forcing everything that uses it to manage it.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385755447", "createdAt": "2020-02-28T15:23:13Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -124,9 +124,17 @@ public SubscriptionInfo createSubscription(SubscriptionInfo sinfo) {\n         sdata.setOwner(this.resolveOwner(sinfo.getOwner()));\n \n         sdata.setProduct(this.resolveProduct(sinfo.getProduct()));\n-        sdata.setProvidedProducts(this.resolveProducts(sinfo.getProvidedProducts()));\n+\n+        if (sdata.getProduct() != null) {\n+            sdata.setProvidedProducts(sdata.getProduct().getProvidedProducts());\n+        }\n+\n         sdata.setDerivedProduct(this.resolveProduct(sinfo.getDerivedProduct()));\n-        sdata.setDerivedProvidedProducts(this.resolveProducts(sinfo.getDerivedProvidedProducts()));\n+\n+        if (sdata.getDerivedProduct() != null) {\n+            sdata.setDerivedProvidedProducts(\n+                sdata.getDerivedProduct().getProvidedProducts());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMDQ5OQ==", "bodyText": "Updated Subscription to not have a mutator for provided products, and return the product's provided products from its accessor to resolve this.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r386830499", "createdAt": "2020-03-03T07:04:01Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -124,9 +124,17 @@ public SubscriptionInfo createSubscription(SubscriptionInfo sinfo) {\n         sdata.setOwner(this.resolveOwner(sinfo.getOwner()));\n \n         sdata.setProduct(this.resolveProduct(sinfo.getProduct()));\n-        sdata.setProvidedProducts(this.resolveProducts(sinfo.getProvidedProducts()));\n+\n+        if (sdata.getProduct() != null) {\n+            sdata.setProvidedProducts(sdata.getProduct().getProvidedProducts());\n+        }\n+\n         sdata.setDerivedProduct(this.resolveProduct(sinfo.getDerivedProduct()));\n-        sdata.setDerivedProvidedProducts(this.resolveProducts(sinfo.getDerivedProvidedProducts()));\n+\n+        if (sdata.getDerivedProduct() != null) {\n+            sdata.setDerivedProvidedProducts(\n+                sdata.getDerivedProduct().getProvidedProducts());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NTQ0Nw=="}, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE5MjUyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyNjoyN1rOFv4wuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowMzoyM1rOFw6P8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NzM3MQ==", "bodyText": "This is probably entirely unnecessary. Rather than doing an assignment in every case, Subscription should be updated to not have a mutator for provided products, and return the product's provided products from its accessor.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385757371", "createdAt": "2020-02-28T15:26:27Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -124,9 +124,17 @@ public SubscriptionInfo createSubscription(SubscriptionInfo sinfo) {\n         sdata.setOwner(this.resolveOwner(sinfo.getOwner()));\n \n         sdata.setProduct(this.resolveProduct(sinfo.getProduct()));\n-        sdata.setProvidedProducts(this.resolveProducts(sinfo.getProvidedProducts()));\n+\n+        if (sdata.getProduct() != null) {\n+            sdata.setProvidedProducts(sdata.getProduct().getProvidedProducts());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMDMyMQ==", "bodyText": "Updated Subscription to not have a mutator for provided products, and return the product's provided products from its accessor.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r386830321", "createdAt": "2020-03-03T07:03:23Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -124,9 +124,17 @@ public SubscriptionInfo createSubscription(SubscriptionInfo sinfo) {\n         sdata.setOwner(this.resolveOwner(sinfo.getOwner()));\n \n         sdata.setProduct(this.resolveProduct(sinfo.getProduct()));\n-        sdata.setProvidedProducts(this.resolveProducts(sinfo.getProvidedProducts()));\n+\n+        if (sdata.getProduct() != null) {\n+            sdata.setProvidedProducts(sdata.getProduct().getProvidedProducts());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NzM3MQ=="}, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE5OTA4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyNzo1NVrOFv40fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyNzo1NVrOFv40fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1ODMzMw==", "bodyText": "As above, let's just let the subscription handle all the redirection for us.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385758333", "createdAt": "2020-02-28T15:27:55Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -169,24 +177,34 @@ public SubscriptionInfo updateSubscription(String subscriptionId, SubscriptionIn\n \n         // Do product resolution here\n         ProductData product = this.resolveProduct(sinfo.getProduct());\n-        Collection<ProductData> providedProducts = this.resolveProducts(sinfo.getProvidedProducts());\n-\n-        ProductData dProduct = this.resolveProduct(sinfo.getDerivedProduct());\n-        Collection<ProductData> dpProvidedProducts = this.resolveProducts(sinfo.getDerivedProvidedProducts());\n \n         // If they all resolved, set the products\n         if (product != null) {\n             sdata.setProduct(product);\n-        }\n+            Collection<ProductData> providedProducts =\n+                this.resolveProducts(product.getProvidedProducts());\n \n-        if (providedProducts != null) {\n-            sdata.setProvidedProducts(providedProducts);\n+            if (providedProducts != null) {\n+                sdata.setProvidedProducts(providedProducts);\n+            }\n+        }\n+        else {\n+            sdata.setProvidedProducts(null);\n         }\n \n+        ProductData dProduct = this.resolveProduct(sinfo.getDerivedProduct());\n         sdata.setDerivedProduct(dProduct);\n \n-        if (dpProvidedProducts != null) {\n-            sdata.setDerivedProvidedProducts(dpProvidedProducts);\n+        if (dProduct != null) {\n+            Collection<ProductData> dpProvidedProducts =\n+                this.resolveProducts(dProduct.getProvidedProducts());\n+\n+            if (dpProvidedProducts != null) {\n+                sdata.setDerivedProvidedProducts(dpProvidedProducts);\n+            }\n+        }\n+        else {\n+            sdata.setDerivedProvidedProducts(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTIwMjkxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyODo1NVrOFv42sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyODo1NVrOFv42sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1ODg5Nw==", "bodyText": "Both of these should be unnecessary with an update to subscription.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385758897", "createdAt": "2020-02-28T15:28:55Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/hostedtest/HostedTestSubscriptionServiceAdapter.java", "diffHunk": "@@ -601,24 +623,24 @@ protected void updateSubscriptionProductMappings(Subscription sdata) {\n \n         if (sdata.getProduct() != null && sdata.getProduct().getId() != null) {\n             pids.add(sdata.getProduct().getId());\n-        }\n \n-        if (sdata.getProvidedProducts() != null) {\n-            for (ProductData pdata : sdata.getProvidedProducts()) {\n-                if (pdata != null && pdata.getId() != null) {\n-                    pids.add(pdata.getId());\n+            if (sdata.getProduct().getProvidedProducts() != null) {\n+                for (ProductData pdata : sdata.getProduct().getProvidedProducts()) {\n+                    if (pdata != null && pdata.getId() != null) {\n+                        pids.add(pdata.getId());\n+                    }\n                 }\n             }\n         }\n \n         if (sdata.getDerivedProduct() != null && sdata.getDerivedProduct().getId() != null) {\n             pids.add(sdata.getDerivedProduct().getId());\n-        }\n \n-        if (sdata.getDerivedProvidedProducts() != null) {\n-            for (ProductData pdata : sdata.getDerivedProvidedProducts()) {\n-                if (pdata != null && pdata.getId() != null) {\n-                    pids.add(pdata.getId());\n+            if (sdata.getDerivedProduct().getProvidedProducts() != null) {\n+                for (ProductData pdata : sdata.getDerivedProduct().getProvidedProducts()) {\n+                    if (pdata != null && pdata.getId() != null) {\n+                        pids.add(pdata.getId());\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTIwODAwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTozMDowNlrOFv45tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzoyMjozNlrOFw6m8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1OTY2OA==", "bodyText": "Leave the comment lines in here, the SQL itself does not make clear what each join is doing or why it's necessary.\nAlso, couldn't hurt to add a note about this not supporting N-tier.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385759668", "createdAt": "2020-02-28T15:30:06Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "diffHunk": "@@ -962,18 +962,19 @@ public Entitlement findUpstreamEntitlementForStack(Consumer consumer, String sta\n         String queryStr = \"SELECT DISTINCT e2.id \" +\n             // Required entitlement\n             \"FROM cp_entitlement e1 \" +\n-            // Required entitlement => required pool\n-            \"JOIN cp2_pool_provided_products ppp1 ON ppp1.pool_id = e1.pool_id \" +\n-            // Required pool => required product\n-            \"JOIN cp2_products p ON p.uuid = ppp1.product_uuid \" +\n+            \"JOIN cp_pool pl1 on pl1.id = e1.pool_id \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzNjIxMQ==", "bodyText": "Fixed Comments & added note for not supporting N-tier", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r386836211", "createdAt": "2020-03-03T07:22:36Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "diffHunk": "@@ -962,18 +962,19 @@ public Entitlement findUpstreamEntitlementForStack(Consumer consumer, String sta\n         String queryStr = \"SELECT DISTINCT e2.id \" +\n             // Required entitlement\n             \"FROM cp_entitlement e1 \" +\n-            // Required entitlement => required pool\n-            \"JOIN cp2_pool_provided_products ppp1 ON ppp1.pool_id = e1.pool_id \" +\n-            // Required pool => required product\n-            \"JOIN cp2_products p ON p.uuid = ppp1.product_uuid \" +\n+            \"JOIN cp_pool pl1 on pl1.id = e1.pool_id \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1OTY2OA=="}, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTIzNjcyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTozNjo1NlrOFv5KlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDoxMTo0NFrOFxnNbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2Mzk4OA==", "bodyText": "Pool is our top-level object in this case. Start from pool and drill down. Also, like before, keep the comments for massive join blobs like these.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385763988", "createdAt": "2020-02-28T15:36:56Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "diffHunk": "@@ -1095,19 +1099,22 @@ public Entitlement findUpstreamEntitlementForStack(Consumer consumer, String sta\n             if (ctype.isManifest()) {\n                 querySql = \"SELECT DISTINCT e.id \" +\n                     // Required pool\n-                    \"FROM cp2_pool_derprov_products ppp1 \" +\n-                    // Required pool => required product\n-                    \"JOIN cp2_products p ON p.uuid = ppp1.product_uuid \" +\n+                    \"FROM cp2_product_provided_products ppp1 \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzODYwMQ==", "bodyText": "Fixed Comments & added note for not supporting N-tier.\nThis is the case of checking for dependent entitlements matching the derived provided products, earlier we use to refer cp2_pool_derprov_products which direclty get us pool id. But now with new table cp2_provided_product we need one more JOIN to get pool id.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r386838601", "createdAt": "2020-03-03T07:29:24Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "diffHunk": "@@ -1095,19 +1099,22 @@ public Entitlement findUpstreamEntitlementForStack(Consumer consumer, String sta\n             if (ctype.isManifest()) {\n                 querySql = \"SELECT DISTINCT e.id \" +\n                     // Required pool\n-                    \"FROM cp2_pool_derprov_products ppp1 \" +\n-                    // Required pool => required product\n-                    \"JOIN cp2_products p ON p.uuid = ppp1.product_uuid \" +\n+                    \"FROM cp2_product_provided_products ppp1 \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2Mzk4OA=="}, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2NTU2OQ==", "bodyText": "Right, I understand that we need an additional join, but the logical starting place is the same: pool. I'd need to look at an explain plan to see if it makes a performance difference, but as far as following along with what's happening for maintenance purposes, it's best to keep these things ordered in the manner they are walked so long as it's not a negative performance impact to do so.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387065569", "createdAt": "2020-03-03T14:43:38Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "diffHunk": "@@ -1095,19 +1099,22 @@ public Entitlement findUpstreamEntitlementForStack(Consumer consumer, String sta\n             if (ctype.isManifest()) {\n                 querySql = \"SELECT DISTINCT e.id \" +\n                     // Required pool\n-                    \"FROM cp2_pool_derprov_products ppp1 \" +\n-                    // Required pool => required product\n-                    \"JOIN cp2_products p ON p.uuid = ppp1.product_uuid \" +\n+                    \"FROM cp2_product_provided_products ppp1 \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2Mzk4OA=="}, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2Njk1OQ==", "bodyText": "Understood what you meant here.\nFixed it. Pool is our top-level object in these queries.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387566959", "createdAt": "2020-03-04T10:11:44Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/model/EntitlementCurator.java", "diffHunk": "@@ -1095,19 +1099,22 @@ public Entitlement findUpstreamEntitlementForStack(Consumer consumer, String sta\n             if (ctype.isManifest()) {\n                 querySql = \"SELECT DISTINCT e.id \" +\n                     // Required pool\n-                    \"FROM cp2_pool_derprov_products ppp1 \" +\n-                    // Required pool => required product\n-                    \"JOIN cp2_products p ON p.uuid = ppp1.product_uuid \" +\n+                    \"FROM cp2_product_provided_products ppp1 \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2Mzk4OA=="}, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTI0MTk1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/OwnerCurator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTozODoxMVrOFv5Nkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowNTowN1rOFw6Ryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NDc1NQ==", "bodyText": "\"products\" should be singular here.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385764755", "createdAt": "2020-02-28T15:38:11Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/OwnerCurator.java", "diffHunk": "@@ -164,7 +164,8 @@ public Owner getByUpstreamUuid(String upstreamUuid) {\n     public CandlepinQuery<Owner> getOwnersByActiveProduct(Collection<String> productIds) {\n         // NOTE: only used by superadmin API calls, no permissions filtering needed here.\n         DetachedCriteria poolIdQuery = DetachedCriteria.forClass(Pool.class, \"pool\")\n-            .createAlias(\"pool.providedProducts\", \"providedProducts\")\n+            .createAlias(\"pool.product\", \"products\")\n+            .createAlias(\"products.providedProducts\", \"providedProducts\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMDc5NQ==", "bodyText": "Done", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r386830795", "createdAt": "2020-03-03T07:05:07Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/model/OwnerCurator.java", "diffHunk": "@@ -164,7 +164,8 @@ public Owner getByUpstreamUuid(String upstreamUuid) {\n     public CandlepinQuery<Owner> getOwnersByActiveProduct(Collection<String> productIds) {\n         // NOTE: only used by superadmin API calls, no permissions filtering needed here.\n         DetachedCriteria poolIdQuery = DetachedCriteria.forClass(Pool.class, \"pool\")\n-            .createAlias(\"pool.providedProducts\", \"providedProducts\")\n+            .createAlias(\"pool.product\", \"products\")\n+            .createAlias(\"products.providedProducts\", \"providedProducts\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NDc1NQ=="}, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTI2MTc4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/ProductCurator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo0MzoxMlrOFv5Zyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowNToxN1rOFw6R_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2Nzg4Mw==", "bodyText": "We lost a level of indentation here.\nAlso, in the future, when we come across criteria queries like this that need lots of adjusting, it'll be preferable to just rewrite them in HQL, JPQL, or JPA criteria.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r385767883", "createdAt": "2020-02-28T15:43:12Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/ProductCurator.java", "diffHunk": "@@ -398,17 +407,20 @@ public void delete(Product entity) {\n      *  true if the product is linked to one or more subscriptions; false otherwise.\n      */\n     public boolean productHasSubscriptions(Owner owner, Product product) {\n-        return ((Long) currentSession().createCriteria(Pool.class)\n-            .createAlias(\"providedProducts\", \"providedProd\", JoinType.LEFT_OUTER_JOIN)\n-            .createAlias(\"derivedProvidedProducts\", \"derivedProvidedProd\", JoinType.LEFT_OUTER_JOIN)\n-            .add(Restrictions.eq(\"owner\", owner))\n-            .add(Restrictions.or(\n-                Restrictions.eq(\"product.uuid\", product.getUuid()),\n-                Restrictions.eq(\"derivedProduct.uuid\", product.getUuid()),\n-                Restrictions.eq(\"providedProd.uuid\", product.getUuid()),\n-                Restrictions.eq(\"derivedProvidedProd.uuid\", product.getUuid())))\n-            .setProjection(Projections.count(\"id\"))\n-            .uniqueResult()) > 0;\n+        return ((Long) currentSession().createCriteria(Pool.class, \"Pool\")\n+        .createAlias(\"Pool.product\", \"Product\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMDg0NQ==", "bodyText": "Sure, Indentation corrected.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r386830845", "createdAt": "2020-03-03T07:05:17Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/model/ProductCurator.java", "diffHunk": "@@ -398,17 +407,20 @@ public void delete(Product entity) {\n      *  true if the product is linked to one or more subscriptions; false otherwise.\n      */\n     public boolean productHasSubscriptions(Owner owner, Product product) {\n-        return ((Long) currentSession().createCriteria(Pool.class)\n-            .createAlias(\"providedProducts\", \"providedProd\", JoinType.LEFT_OUTER_JOIN)\n-            .createAlias(\"derivedProvidedProducts\", \"derivedProvidedProd\", JoinType.LEFT_OUTER_JOIN)\n-            .add(Restrictions.eq(\"owner\", owner))\n-            .add(Restrictions.or(\n-                Restrictions.eq(\"product.uuid\", product.getUuid()),\n-                Restrictions.eq(\"derivedProduct.uuid\", product.getUuid()),\n-                Restrictions.eq(\"providedProd.uuid\", product.getUuid()),\n-                Restrictions.eq(\"derivedProvidedProd.uuid\", product.getUuid())))\n-            .setProjection(Projections.count(\"id\"))\n-            .uniqueResult()) > 0;\n+        return ((Long) currentSession().createCriteria(Pool.class, \"Pool\")\n+        .createAlias(\"Pool.product\", \"Product\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2Nzg4Mw=="}, "originalCommit": {"oid": "60847589110205e76715604b3e354e5b404b1129"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Nzg4Mjg5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/ProductCurator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo0NTo0NFrOFxItJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOToyNzowOFrOFxlqcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2NzE3NQ==", "bodyText": "This can fit on the previous line without a mid-statement break.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387067175", "createdAt": "2020-03-03T14:45:44Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/ProductCurator.java", "diffHunk": "@@ -398,9 +407,13 @@ public void delete(Product entity) {\n      *  true if the product is linked to one or more subscriptions; false otherwise.\n      */\n     public boolean productHasSubscriptions(Owner owner, Product product) {\n-        return ((Long) currentSession().createCriteria(Pool.class)\n-            .createAlias(\"providedProducts\", \"providedProd\", JoinType.LEFT_OUTER_JOIN)\n-            .createAlias(\"derivedProvidedProducts\", \"derivedProvidedProd\", JoinType.LEFT_OUTER_JOIN)\n+        return ((Long) currentSession().createCriteria(Pool.class, \"Pool\")\n+            .createAlias(\"Pool.product\", \"Product\")\n+            .createAlias(\"Pool.derivedProduct\", \"DProduct\")\n+            .createAlias(\"Product.providedProducts\",\n+            \"providedProd\", JoinType.LEFT_OUTER_JOIN)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0423d84c9738ac63c0af14968dc29069c6657b9a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU0MTYxNg==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387541616", "createdAt": "2020-03-04T09:27:08Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/model/ProductCurator.java", "diffHunk": "@@ -398,9 +407,13 @@ public void delete(Product entity) {\n      *  true if the product is linked to one or more subscriptions; false otherwise.\n      */\n     public boolean productHasSubscriptions(Owner owner, Product product) {\n-        return ((Long) currentSession().createCriteria(Pool.class)\n-            .createAlias(\"providedProducts\", \"providedProd\", JoinType.LEFT_OUTER_JOIN)\n-            .createAlias(\"derivedProvidedProducts\", \"derivedProvidedProd\", JoinType.LEFT_OUTER_JOIN)\n+        return ((Long) currentSession().createCriteria(Pool.class, \"Pool\")\n+            .createAlias(\"Pool.product\", \"Product\")\n+            .createAlias(\"Pool.derivedProduct\", \"DProduct\")\n+            .createAlias(\"Product.providedProducts\",\n+            \"providedProd\", JoinType.LEFT_OUTER_JOIN)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2NzE3NQ=="}, "originalCommit": {"oid": "0423d84c9738ac63c0af14968dc29069c6657b9a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Nzg4Mzk4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/ProductCurator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo0NTo1MVrOFxItrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOToyNzowNlrOFxlqXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2NzMxMQ==", "bodyText": "Same here", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387067311", "createdAt": "2020-03-03T14:45:51Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/ProductCurator.java", "diffHunk": "@@ -398,9 +407,13 @@ public void delete(Product entity) {\n      *  true if the product is linked to one or more subscriptions; false otherwise.\n      */\n     public boolean productHasSubscriptions(Owner owner, Product product) {\n-        return ((Long) currentSession().createCriteria(Pool.class)\n-            .createAlias(\"providedProducts\", \"providedProd\", JoinType.LEFT_OUTER_JOIN)\n-            .createAlias(\"derivedProvidedProducts\", \"derivedProvidedProd\", JoinType.LEFT_OUTER_JOIN)\n+        return ((Long) currentSession().createCriteria(Pool.class, \"Pool\")\n+            .createAlias(\"Pool.product\", \"Product\")\n+            .createAlias(\"Pool.derivedProduct\", \"DProduct\")\n+            .createAlias(\"Product.providedProducts\",\n+            \"providedProd\", JoinType.LEFT_OUTER_JOIN)\n+            .createAlias(\"DProduct.providedProducts\",\n+            \"derivedProvidedProd\", JoinType.LEFT_OUTER_JOIN)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0423d84c9738ac63c0af14968dc29069c6657b9a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU0MTU5Nw==", "bodyText": "Done.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387541597", "createdAt": "2020-03-04T09:27:06Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/model/ProductCurator.java", "diffHunk": "@@ -398,9 +407,13 @@ public void delete(Product entity) {\n      *  true if the product is linked to one or more subscriptions; false otherwise.\n      */\n     public boolean productHasSubscriptions(Owner owner, Product product) {\n-        return ((Long) currentSession().createCriteria(Pool.class)\n-            .createAlias(\"providedProducts\", \"providedProd\", JoinType.LEFT_OUTER_JOIN)\n-            .createAlias(\"derivedProvidedProducts\", \"derivedProvidedProd\", JoinType.LEFT_OUTER_JOIN)\n+        return ((Long) currentSession().createCriteria(Pool.class, \"Pool\")\n+            .createAlias(\"Pool.product\", \"Product\")\n+            .createAlias(\"Pool.derivedProduct\", \"DProduct\")\n+            .createAlias(\"Product.providedProducts\",\n+            \"providedProd\", JoinType.LEFT_OUTER_JOIN)\n+            .createAlias(\"DProduct.providedProducts\",\n+            \"derivedProvidedProd\", JoinType.LEFT_OUTER_JOIN)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2NzMxMQ=="}, "originalCommit": {"oid": "0423d84c9738ac63c0af14968dc29069c6657b9a"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzkwOTEzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo1MDozOFrOFxI8HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzowODowMVrOFx17xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3MTAwNQ==", "bodyText": "This inner block down here belongs up with the first block which starts setting productsChanged. The lower if block makes changes based on that state and should no longer be flipping the value anymore.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387071005", "createdAt": "2020-03-03T14:50:38Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -617,13 +561,12 @@ private boolean checkForChangedDerivedProducts(Pool pool, Pool existingPool,\n             if (pool.getDerivedProduct() != null) {\n                 existingPool.setDerivedProduct(pool.getDerivedProduct());\n             }\n-            else {\n-                // subscription no longer has a derived product\n+        }\n+        else {\n+            // check if subscription no longer has a derived product\n+            if (pool.getDerivedProduct() == null && existingPool.getDerivedProduct() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0423d84c9738ac63c0af14968dc29069c6657b9a"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2NTI5OA==", "bodyText": "Earlier most of logic is dependent on provided Products which were directly present\non pool & subscription which is now removed.\nIn this particular code block, there is one scenario in which derived product is removed from incoming subscription, resulting derived product being set as null on pool, which require a explicit check on pool if its derived product is null and existing pool derived product is not null.\nThis code block was written inside IF code block and only execute where there is any change in derived product (totally new derived product or it's same derived product with its member properties changed reflected via changedProducts map ) which is now False as the whole derived product is removed.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387565298", "createdAt": "2020-03-04T10:08:52Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -617,13 +561,12 @@ private boolean checkForChangedDerivedProducts(Pool pool, Pool existingPool,\n             if (pool.getDerivedProduct() != null) {\n                 existingPool.setDerivedProduct(pool.getDerivedProduct());\n             }\n-            else {\n-                // subscription no longer has a derived product\n+        }\n+        else {\n+            // check if subscription no longer has a derived product\n+            if (pool.getDerivedProduct() == null && existingPool.getDerivedProduct() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3MTAwNQ=="}, "originalCommit": {"oid": "0423d84c9738ac63c0af14968dc29069c6657b9a"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwMjExNg==", "bodyText": "Right, but we already have a logical block for determining the state, and we're already doing half the check done here in that block. We don't want to separate those blocks if we can avoid it:\nif (pool.getDerivedProduct() != null) {\n  // existing code as above\n}\nelse if (existingPool.getDerivedProduct() != null) {\n  productsChanged = true;\n}\n\nThe previous code did work based on the null value (implicitly via encapsulation violations), so it had to do them there. Since we don't need to worry about that, we can safely just pass through whatever value is returned by getDerivedProduct, so long as our productsChanged variable is in the right state by the time we get there; we don't even need the additional null check, nor the warning comment block, anymore", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387702116", "createdAt": "2020-03-04T14:30:23Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -617,13 +561,12 @@ private boolean checkForChangedDerivedProducts(Pool pool, Pool existingPool,\n             if (pool.getDerivedProduct() != null) {\n                 existingPool.setDerivedProduct(pool.getDerivedProduct());\n             }\n-            else {\n-                // subscription no longer has a derived product\n+        }\n+        else {\n+            // check if subscription no longer has a derived product\n+            if (pool.getDerivedProduct() == null && existingPool.getDerivedProduct() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3MTAwNQ=="}, "originalCommit": {"oid": "0423d84c9738ac63c0af14968dc29069c6657b9a"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNDAzNg==", "bodyText": "There's also an argument to be made that we're not handling all of the possible transitions here. As it is now, we handle derived -> derived, and derived -> null, but we still NPE on null -> derived. This is a good opportunity to fix that as well.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387704036", "createdAt": "2020-03-04T14:33:16Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -617,13 +561,12 @@ private boolean checkForChangedDerivedProducts(Pool pool, Pool existingPool,\n             if (pool.getDerivedProduct() != null) {\n                 existingPool.setDerivedProduct(pool.getDerivedProduct());\n             }\n-            else {\n-                // subscription no longer has a derived product\n+        }\n+        else {\n+            // check if subscription no longer has a derived product\n+            if (pool.getDerivedProduct() == null && existingPool.getDerivedProduct() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3MTAwNQ=="}, "originalCommit": {"oid": "0423d84c9738ac63c0af14968dc29069c6657b9a"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwODE5Ng==", "bodyText": "Refactored it. Yes there is a potential NPE around existingPool.getDerivedProduct() in equals statement.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r387808196", "createdAt": "2020-03-04T17:08:01Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -617,13 +561,12 @@ private boolean checkForChangedDerivedProducts(Pool pool, Pool existingPool,\n             if (pool.getDerivedProduct() != null) {\n                 existingPool.setDerivedProduct(pool.getDerivedProduct());\n             }\n-            else {\n-                // subscription no longer has a derived product\n+        }\n+        else {\n+            // check if subscription no longer has a derived product\n+            if (pool.getDerivedProduct() == null && existingPool.getDerivedProduct() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3MTAwNQ=="}, "originalCommit": {"oid": "0423d84c9738ac63c0af14968dc29069c6657b9a"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjI1NzU5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1NTowN1rOFyZOQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODoxMToyMFrOFyeYoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NjM2OQ==", "bodyText": "This works, but still kinda violates the separation from the original implementation. Also, why did the access change?\nIn the interest of time, this is kind of what I was suggesting:\nprivate boolean checkForChangedDerivedProducts(Pool pool, Pool existingPool, Map<String, Product> changedProducts) {\n\n  boolean dpChanged = false;\n  Product existingDerived = existingPool.getDerivedProduct();\n  Product incomingDerived = pool.getDerivedProduct();\n\n  if (incomingDerived != null) {\n    dpChanged = (existingDerived == null) ||\n      (existingDerived.getId() != null && !existingDerived.getId().equals(incomingDerived.getId())) ||\n      (changedProducts != null && changedProducts.containsKey(existingDerived.getId()));\n  }\n  else {\n    dpChanged = existingDerived != null;\n  }\n\n  if (dpChanged) {\n    existingPool.setDerivedProduct(incomingDerived);\n  }\n\n  return dpChanged;\n}\n\nThis still keeps the evaluation in one block, and the action to take on that evaluation result in another.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r388386369", "createdAt": "2020-03-05T15:55:07Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -541,33 +541,24 @@ private boolean checkForChangedProducts(Product incomingProduct, Pool existingPo\n         return productsChanged;\n     }\n \n-    private boolean checkForChangedDerivedProducts(Pool pool, Pool existingPool,\n+    public boolean checkForChangedDerivedProducts(Pool pool, Pool existingPool,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c3d8343fa1ef7a94d6e05bd376ec3206e2ffb12"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3MDk0NA==", "bodyText": "ahh while doing unit testing for certain scenarios I changed the method access. Corrected it with above code. Will squash commits after PR goes all green.", "url": "https://github.com/candlepin/candlepin/pull/2576#discussion_r388470944", "createdAt": "2020-03-05T18:11:20Z", "author": {"login": "wolfdale"}, "path": "server/src/main/java/org/candlepin/policy/js/pool/PoolRules.java", "diffHunk": "@@ -541,33 +541,24 @@ private boolean checkForChangedProducts(Product incomingProduct, Pool existingPo\n         return productsChanged;\n     }\n \n-    private boolean checkForChangedDerivedProducts(Pool pool, Pool existingPool,\n+    public boolean checkForChangedDerivedProducts(Pool pool, Pool existingPool,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NjM2OQ=="}, "originalCommit": {"oid": "8c3d8343fa1ef7a94d6e05bd376ec3206e2ffb12"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4257, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}