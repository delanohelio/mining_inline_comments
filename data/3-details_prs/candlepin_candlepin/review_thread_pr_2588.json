{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4Mzk0NDQ5", "number": 2588, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwODowNzozNlrODbe7gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDozNzo1M1rODbl_WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTQ0ODk2OnYy", "diffSide": "RIGHT", "path": "server/spec/sku_level_enable_override_spec.rb", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwODowNzozNlrOFi_jsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMDoyNDoyOVrOFj-NSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzNzIzMw==", "bodyText": "There should probably be a newline at the end of the file here", "url": "https://github.com/candlepin/candlepin/pull/2588#discussion_r372237233", "createdAt": "2020-01-29T08:07:36Z", "author": {"login": "nikosmoum"}, "path": "server/spec/sku_level_enable_override_spec.rb", "diffHunk": "@@ -165,4 +175,4 @@\n     extensions_hash = Hash[x509.extensions.collect { |ext| [ext.oid, ext.value] }]\n     extensions_hash[\"1.3.6.1.4.1.2312.9.2.#{@content3['id']}.1.8\"].should == '..1'\n   end\n-end\n+end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d14d199daba2ede8bb1483b140d8df865093c3c"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2MzY4OA==", "bodyText": "Fixed.", "url": "https://github.com/candlepin/candlepin/pull/2588#discussion_r373263688", "createdAt": "2020-01-31T00:24:29Z", "author": {"login": "abhiskum"}, "path": "server/spec/sku_level_enable_override_spec.rb", "diffHunk": "@@ -165,4 +175,4 @@\n     extensions_hash = Hash[x509.extensions.collect { |ext| [ext.oid, ext.value] }]\n     extensions_hash[\"1.3.6.1.4.1.2312.9.2.#{@content3['id']}.1.8\"].should == '..1'\n   end\n-end\n+end", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzNzIzMw=="}, "originalCommit": {"oid": "4d14d199daba2ede8bb1483b140d8df865093c3c"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjYwNTY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/service/impl/DefaultEntitlementCertServiceAdapter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDozNzo1M1rOFjKpAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMDoyNzozM1rOFj-QBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxODgxOA==", "bodyText": "I'm trying to find out if this change is enough or not. From what I can find out, the code in the productCurator.getPoolProvidedProductsCached() method was added in a0986b4 as an attempt for better performance by caching provided products in JCache, and to use these methods on the curator instead of the pool.getProvidedProducts/derivedProvidedProducts getters. This was later changed by @barnabycourt to use Hibernate L2 cache in 404af50.\nMy assumption is that the original mechanism with the productCurator methods is no longer needed, because Product is already immutable and cachable in hibernate L2, and the only thing we'd need to do is mark the providedProducts collection on Product with @Cachable and @Cache(usage = CacheConcurrencyStrategy.READ_ONLY), just like the other collections, and caching will work implicitly (without using the productCurator workarounds).\n@Ceiu @barnabycourt Are my assumptions correct, or am I missing something?", "url": "https://github.com/candlepin/candlepin/pull/2588#discussion_r372418818", "createdAt": "2020-01-29T14:37:53Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/service/impl/DefaultEntitlementCertServiceAdapter.java", "diffHunk": "@@ -461,7 +461,7 @@ public String cleanUpPrefix(String contentPrefix) throws IOException {\n                 ent.getQuantity(),\n                 ent.getId());\n \n-            Set<Product> products = new HashSet<>(productCurator.getPoolProvidedProductsCached(pool));\n+            Set<Product> products = new HashSet<>(pool.getProduct().getProvidedProducts());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80fb6c10d64bc362bed457f42bf137de8b91d099"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyNjczNw==", "bodyText": "That is my assumption as well", "url": "https://github.com/candlepin/candlepin/pull/2588#discussion_r372426737", "createdAt": "2020-01-29T14:50:31Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/service/impl/DefaultEntitlementCertServiceAdapter.java", "diffHunk": "@@ -461,7 +461,7 @@ public String cleanUpPrefix(String contentPrefix) throws IOException {\n                 ent.getQuantity(),\n                 ent.getId());\n \n-            Set<Product> products = new HashSet<>(productCurator.getPoolProvidedProductsCached(pool));\n+            Set<Product> products = new HashSet<>(pool.getProduct().getProvidedProducts());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxODgxOA=="}, "originalCommit": {"oid": "80fb6c10d64bc362bed457f42bf137de8b91d099"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2NDM4OA==", "bodyText": "@nikosmoum Added caching annotation on providedProducts and also, remove reference of productCurator.getPoolProvidedProductsCached() from other places. Only 3 more places where this method still being used and these will be updated in refresh PR.", "url": "https://github.com/candlepin/candlepin/pull/2588#discussion_r373264388", "createdAt": "2020-01-31T00:27:33Z", "author": {"login": "abhiskum"}, "path": "server/src/main/java/org/candlepin/service/impl/DefaultEntitlementCertServiceAdapter.java", "diffHunk": "@@ -461,7 +461,7 @@ public String cleanUpPrefix(String contentPrefix) throws IOException {\n                 ent.getQuantity(),\n                 ent.getId());\n \n-            Set<Product> products = new HashSet<>(productCurator.getPoolProvidedProductsCached(pool));\n+            Set<Product> products = new HashSet<>(pool.getProduct().getProvidedProducts());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxODgxOA=="}, "originalCommit": {"oid": "80fb6c10d64bc362bed457f42bf137de8b91d099"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4269, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}