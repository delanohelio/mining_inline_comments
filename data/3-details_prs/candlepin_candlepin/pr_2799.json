{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODY3NTkz", "number": 2799, "title": "ENT-2806: Only add content from active pools on the SCA certificate", "bodyText": "Changes\n\nUpdated ContentAccessManager to only add content from active pools on the SCA certificate.\nAdded Spec and unit test cases", "createdAt": "2020-09-08T08:14:55Z", "url": "https://github.com/candlepin/candlepin/pull/2799", "merged": true, "mergeCommit": {"oid": "bcd9970c15f4d29153e927b2b8d69e9a2a0a166e"}, "closed": true, "closedAt": "2020-11-04T13:53:32Z", "author": {"login": "wolfdale"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHxL3kgBqjM3NTUwMTY0MzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZOITegFqTUyMzM3OTExMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6da7f42cde11634b2bd2b13d4e25728f945dd5a", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/b6da7f42cde11634b2bd2b13d4e25728f945dd5a", "committedDate": "2020-09-08T08:11:42Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "9960c2ac86f4afc640c5eb5d8a8412a94a1a9f6e", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/9960c2ac86f4afc640c5eb5d8a8412a94a1a9f6e", "committedDate": "2020-09-11T08:32:34Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzMwMzI1", "url": "https://github.com/candlepin/candlepin/pull/2799#pullrequestreview-489330325", "createdAt": "2020-09-16T07:04:00Z", "commit": {"oid": "9960c2ac86f4afc640c5eb5d8a8412a94a1a9f6e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzowNDowMFrOHSi8ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzowNTozMlrOHSi_jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwOTAxOA==", "bodyText": "This logic is repeated across multiple methods. We should refactor this into reusable pieces.", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r489209018", "createdAt": "2020-09-16T07:04:00Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/model/PoolCurator.java", "diffHunk": "@@ -2006,4 +2006,217 @@ public void clearPoolSourceEntitlementRefs(Iterable<String> poolIds) {\n \n         return output;\n     }\n+\n+    /**\n+     * Fetches a mapping of pool IDs to sets of product UUIDs representing the provided products of\n+     * the given pool. The returned map will only contain mappings for pools specified in the given\n+     * collection of pool IDs.\n+     *\n+     * @param poolIds\n+     *  A collection of pool IDs for which to fetch provided product UUIDS\n+     *\n+     * @return\n+     *  A mapping of pool IDs to provided product UUIDs\n+     */\n+    public Map<String, Set<String>> getProvidedProductUuidsByPoolIds(Collection<String> poolIds) {\n+        Map<String, Set<String>> providedProductMap = new HashMap<>();\n+\n+        if (poolIds != null && !poolIds.isEmpty()) {\n+            StringBuilder builder =\n+                new StringBuilder(\"SELECT p.id, pp.uuid FROM Pool p JOIN p.providedProducts pp WHERE\");\n+            javax.persistence.Query query = null;\n+\n+            int blockSize = getInBlockSize();\n+            int blockCount = (int) Math.ceil(poolIds.size() / (float) blockSize);\n+\n+            if (blockCount > 1) {\n+                Iterable<List<String>> blocks = Iterables.partition(poolIds, blockSize);\n+\n+                for (int i = 0; i < blockCount; ++i) {\n+                    if (i != 0) {\n+                        builder.append(\" OR\");\n+                    }\n+\n+                    builder.append(\" p.id IN (:block\").append(i).append(')');\n+                }\n+\n+                query = this.getEntityManager().createQuery(builder.toString());\n+                int i = -1;\n+\n+                for (List<String> block : blocks) {\n+                    query.setParameter(\"block\" + ++i, block);\n+                }\n+            }\n+            else {\n+                builder.append(\" p.id IN (:pids)\");\n+                query = this.getEntityManager().createQuery(builder.toString())\n+                    .setParameter(\"pids\", poolIds);\n+            }\n+\n+            for (Object[] cols : (List<Object[]>) query.getResultList()) {\n+                Set<String> providedProducts = providedProductMap.get((String) cols[0]);\n+\n+                if (providedProducts == null) {\n+                    providedProducts = new HashSet<>();\n+                    providedProductMap.put((String) cols[0], providedProducts);\n+                }\n+\n+                providedProducts.add((String) cols[1]);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9960c2ac86f4afc640c5eb5d8a8412a94a1a9f6e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwOTc0Mg==", "bodyText": "This could be Map.computeIfAbsent.", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r489209742", "createdAt": "2020-09-16T07:05:32Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/model/PoolCurator.java", "diffHunk": "@@ -2006,4 +2006,217 @@ public void clearPoolSourceEntitlementRefs(Iterable<String> poolIds) {\n \n         return output;\n     }\n+\n+    /**\n+     * Fetches a mapping of pool IDs to sets of product UUIDs representing the provided products of\n+     * the given pool. The returned map will only contain mappings for pools specified in the given\n+     * collection of pool IDs.\n+     *\n+     * @param poolIds\n+     *  A collection of pool IDs for which to fetch provided product UUIDS\n+     *\n+     * @return\n+     *  A mapping of pool IDs to provided product UUIDs\n+     */\n+    public Map<String, Set<String>> getProvidedProductUuidsByPoolIds(Collection<String> poolIds) {\n+        Map<String, Set<String>> providedProductMap = new HashMap<>();\n+\n+        if (poolIds != null && !poolIds.isEmpty()) {\n+            StringBuilder builder =\n+                new StringBuilder(\"SELECT p.id, pp.uuid FROM Pool p JOIN p.providedProducts pp WHERE\");\n+            javax.persistence.Query query = null;\n+\n+            int blockSize = getInBlockSize();\n+            int blockCount = (int) Math.ceil(poolIds.size() / (float) blockSize);\n+\n+            if (blockCount > 1) {\n+                Iterable<List<String>> blocks = Iterables.partition(poolIds, blockSize);\n+\n+                for (int i = 0; i < blockCount; ++i) {\n+                    if (i != 0) {\n+                        builder.append(\" OR\");\n+                    }\n+\n+                    builder.append(\" p.id IN (:block\").append(i).append(')');\n+                }\n+\n+                query = this.getEntityManager().createQuery(builder.toString());\n+                int i = -1;\n+\n+                for (List<String> block : blocks) {\n+                    query.setParameter(\"block\" + ++i, block);\n+                }\n+            }\n+            else {\n+                builder.append(\" p.id IN (:pids)\");\n+                query = this.getEntityManager().createQuery(builder.toString())\n+                    .setParameter(\"pids\", poolIds);\n+            }\n+\n+            for (Object[] cols : (List<Object[]>) query.getResultList()) {\n+                Set<String> providedProducts = providedProductMap.get((String) cols[0]);\n+\n+                if (providedProducts == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9960c2ac86f4afc640c5eb5d8a8412a94a1a9f6e"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9960c2ac86f4afc640c5eb5d8a8412a94a1a9f6e", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/9960c2ac86f4afc640c5eb5d8a8412a94a1a9f6e", "committedDate": "2020-09-11T08:32:34Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "2ad2d679526ff4f19b014b407338456dda763da3", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/2ad2d679526ff4f19b014b407338456dda763da3", "committedDate": "2020-09-16T11:37:25Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ad2d679526ff4f19b014b407338456dda763da3", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/2ad2d679526ff4f19b014b407338456dda763da3", "committedDate": "2020-09-16T11:37:25Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/5c6cee6723e8913a082089e5dc9cb7276cdb90de", "committedDate": "2020-09-16T11:44:24Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NzY1MDAy", "url": "https://github.com/candlepin/candlepin/pull/2799#pullrequestreview-489765002", "createdAt": "2020-09-16T15:48:30Z", "commit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTUzMTc2", "url": "https://github.com/candlepin/candlepin/pull/2799#pullrequestreview-495553176", "createdAt": "2020-09-24T13:11:11Z", "commit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoxMToxMVrOHXZ6fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzozODowMlrOHXbHVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMzg3MQ==", "bodyText": "Missing whitespace after the =", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r494303871", "createdAt": "2020-09-24T13:11:11Z", "author": {"login": "Ceiu"}, "path": "server/spec/content_access_spec.rb", "diffHunk": "@@ -682,4 +687,95 @@ def read_json_file(filename)\n     end\n   end\n \n+  it 'should only add content from active pools on the SCA certificate' do\n+    product_1 = create_product('test-product-p1', 'some product-p1')\n+    product_2 = create_product('test-product-p2', 'some product-p2')\n+\n+    content_c1 = @cp.create_content(\n+        @owner['key'], \"cname-c1\", 'test-content-c1', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], product_1['id'], content_c1['id'], true)\n+\n+    content_c2 = @cp.create_content(\n+        @owner['key'], \"cname-c2\", 'test-content-c2', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], product_2['id'], content_c2['id'], true)\n+\n+    create_pool_and_subscription(@owner['key'], product_2['id'], 10)\n+\n+    @consumer = consumer_client(@user, @consumername, type=:system, username=nil,\n+      facts= {'system.certificate_version' => '3.3'})\n+    certs = @consumer.list_certificates\n+\n+    expect(certs.length).to eq(1)\n+\n+    cert = certs[0]['cert']\n+    json_body = extract_payload(cert)\n+    expect(json_body['products'][0]['content'].length).to eq(2)\n+\n+    # Make sure that content c1 is not present in cert,\n+    # since product_1 does not have active pool\n+    json_body['products'][0]['content'].each do |content|\n+      expect(content.id).to_not eq(content_c1.id)\n+    end\n+  end\n+\n+  it 'should include content from all products associated with active pool to SCA cert' do\n+    mkt_product1 = create_product(random_string('productp1'), random_string('product'),\n+      {:owner => @owner['key']})\n+    eng_product = create_product(random_string('productp2'), random_string('product'),\n+      {:owner => @owner['key']})\n+    derived_product =create_product(random_string('productp4'), random_string('product'),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwNjMxOA==", "bodyText": "We should try to be consistent with the way we do line continuation and indentation. This statement here trails off early and is partially indented on the third line of the statement, whereas the statement on line 759 below is heavily indented immediately, and the statements above on line 739, 744, and 749 are all indented with 4 spaces on each line.\nThis kind of inconsistency destroys auto-alignment detection in IDEs, and makes it harder to read at a glance. Let's pick one level of indentation (either 4 or 2 spaces), and then follow a single pattern for indentation and line continuation.", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r494306318", "createdAt": "2020-09-24T13:14:34Z", "author": {"login": "Ceiu"}, "path": "server/spec/content_access_spec.rb", "diffHunk": "@@ -682,4 +687,95 @@ def read_json_file(filename)\n     end\n   end\n \n+  it 'should only add content from active pools on the SCA certificate' do\n+    product_1 = create_product('test-product-p1', 'some product-p1')\n+    product_2 = create_product('test-product-p2', 'some product-p2')\n+\n+    content_c1 = @cp.create_content(\n+        @owner['key'], \"cname-c1\", 'test-content-c1', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], product_1['id'], content_c1['id'], true)\n+\n+    content_c2 = @cp.create_content(\n+        @owner['key'], \"cname-c2\", 'test-content-c2', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], product_2['id'], content_c2['id'], true)\n+\n+    create_pool_and_subscription(@owner['key'], product_2['id'], 10)\n+\n+    @consumer = consumer_client(@user, @consumername, type=:system, username=nil,\n+      facts= {'system.certificate_version' => '3.3'})\n+    certs = @consumer.list_certificates\n+\n+    expect(certs.length).to eq(1)\n+\n+    cert = certs[0]['cert']\n+    json_body = extract_payload(cert)\n+    expect(json_body['products'][0]['content'].length).to eq(2)\n+\n+    # Make sure that content c1 is not present in cert,\n+    # since product_1 does not have active pool\n+    json_body['products'][0]['content'].each do |content|\n+      expect(content.id).to_not eq(content_c1.id)\n+    end\n+  end\n+\n+  it 'should include content from all products associated with active pool to SCA cert' do\n+    mkt_product1 = create_product(random_string('productp1'), random_string('product'),\n+      {:owner => @owner['key']})\n+    eng_product = create_product(random_string('productp2'), random_string('product'),\n+      {:owner => @owner['key']})\n+    derived_product =create_product(random_string('productp4'), random_string('product'),\n+      {:owner => @owner['key']})\n+    dev_eng_product = create_product(random_string('productp3'), random_string('product'),\n+      {:owner => @owner['key']})\n+\n+    # Content enabled = true\n+    content_c1 = @cp.create_content(\n+        @owner['key'], \"content_c1\", 'test-content-c1', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], eng_product['id'], content_c1['id'], true)\n+\n+    content_c2 = @cp.create_content(\n+        @owner['key'], \"content_c2\", 'test-content-c2', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], mkt_product1['id'], content_c2['id'], true)\n+\n+    content_c3 = @cp.create_content(\n+        @owner['key'], \"content_c3\", 'test-content-c3', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], derived_product['id'], content_c3['id'], true)\n+\n+    content_c4 = @cp.create_content(\n+        @owner['key'], \"content_c4\", 'test-content-c4', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], dev_eng_product['id'], content_c4['id'], true)\n+\n+\n+    create_pool_and_subscription(@owner['key'], mkt_product1.id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwODgwMw==", "bodyText": "Nack on this.\nThis completely changes the typing on our output, which is very bad. Consistency is more important than code reuse.", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r494308803", "createdAt": "2020-09-24T13:17:56Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/PoolCurator.java", "diffHunk": "@@ -1684,26 +1685,40 @@ public Boolean providesDerived(Pool pool, String derivedProvidedProductId) {\n             }\n         }\n \n-        return this.getProvidedProductIdsByPoolIds(poolIds);\n+        return this.getProvidedProductByPoolIds(poolIds, true);\n     }\n \n     /**\n-     * Fetches a mapping of pool IDs to sets of product IDs representing the provided products of\n+     * Fetches a mapping of pool IDs to sets of product IDs or UUIDs representing the provided products of\n      * the given pool. The returned map will only contain mappings for pools specified in the given\n      * collection of pool IDs.\n      *\n      * @param poolIds\n-     *  A collection of pool IDs for which to fetch provided product IDs\n+     *  A collection of pool IDs for which to fetch provided product IDs or UUIDs\n+     *\n+     * @param fetchMode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxMjY4NQ==", "bodyText": "Incorrect use of computeIfAbsent. The method will generate a new value if not present and return whatever ends up in the field in either case. This saves us an interaction with the map by making the fetch, generation, and storage operations all atomic and packaged in a single call. You can then use method chaining and the knowledge that you'll never get a null value out of the map to eliminate the need for explicit declaration. It should look like this:\nprovidedProductMap.computeIfAbsent((String) cols[0], key -> new HashSet<>())\n    .add((String) cols[1]);", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r494312685", "createdAt": "2020-09-24T13:23:32Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/PoolCurator.java", "diffHunk": "@@ -1735,14 +1750,10 @@ public Boolean providesDerived(Pool pool, String derivedProvidedProductId) {\n             }\n \n             for (Object[] cols : (List<Object[]>) query.getResultList()) {\n-                Set<String> providedProducts = providedProductMap.get((String) cols[0]);\n-\n-                if (providedProducts == null) {\n-                    providedProducts = new HashSet<>();\n-                    providedProductMap.put((String) cols[0], providedProducts);\n-                }\n-\n-                providedProducts.add((String) cols[1]);\n+                providedProductMap.computeIfAbsent((String) cols[0],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxMzIxOA==", "bodyText": "Again, nack on these changes -- we don't want to completely swing a method's operation and output on a single boolean input. Rewrite the method and make changes as necessary.", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r494313218", "createdAt": "2020-09-24T13:24:17Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/PoolCurator.java", "diffHunk": "@@ -1772,26 +1783,39 @@ public Boolean providesDerived(Pool pool, String derivedProvidedProductId) {\n             }\n         }\n \n-        return this.getDerivedProvidedProductIdsByPoolIds(poolIds);\n+        return this.getDerivedProvidedProductByPoolIds(poolIds, true);\n     }\n \n     /**\n-     * Fetches a mapping of pool IDs to sets of product IDs representing the provided products of\n+     * Fetches a mapping of pool IDs to sets of product IDs or UUIDs representing the provided products of\n      * the given pool. The returned map will only contain mappings for pools specified in the given\n      * collection of pool IDs.\n      *\n      * @param poolIds\n-     *  A collection of pool IDs for which to fetch provided product IDs\n+     *  A collection of pool IDs for which to fetch provided product IDs or UUIDs\n+     *\n+     * @param fetchMode\n+     *  Boolean field.\n+     *  True  -> Returns mapping of Pool IDs & provided product IDs\n+     *  False -> Returns mapping of Pool IDs & provided product UUIDs\n      *\n      * @return\n-     *  A mapping of pool IDs to provided product IDs\n+     *  A mapping of pool IDs to provided product IDs or UUIDs\n      */\n-    public Map<String, Set<String>> getDerivedProvidedProductIdsByPoolIds(Collection<String> poolIds) {\n+    public Map<String, Set<String>> getDerivedProvidedProductByPoolIds(Collection<String> poolIds,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxMzkzOQ==", "bodyText": "This should be named \"getActivePoolIdsByOwnerId\", as it is fetching multiple pool IDs, not a single pool.", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r494313939", "createdAt": "2020-09-24T13:25:14Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/PoolCurator.java", "diffHunk": "@@ -2006,4 +2026,93 @@ public void clearPoolSourceEntitlementRefs(Iterable<String> poolIds) {\n \n         return output;\n     }\n+\n+    /**\n+     * Fetches a collection of active pool IDs mapped to a given owner. If no such pool\n+     * are present, an empty collection will be returned.\n+     *\n+     * @param ownerId\n+     *  The ID of the owner for which to fetch active Pool IDs\n+     *\n+     * @return\n+     *  A collection of active Pool IDs belonging to the given owner.\n+     */\n+    public Collection<String> getActivePoolByOwnerId(String ownerId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxNDI2OQ==", "bodyText": "This should be \"ids\" rather than \"uuids\"", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r494314269", "createdAt": "2020-09-24T13:25:38Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/PoolCurator.java", "diffHunk": "@@ -2006,4 +2026,93 @@ public void clearPoolSourceEntitlementRefs(Iterable<String> poolIds) {\n \n         return output;\n     }\n+\n+    /**\n+     * Fetches a collection of active pool IDs mapped to a given owner. If no such pool\n+     * are present, an empty collection will be returned.\n+     *\n+     * @param ownerId\n+     *  The ID of the owner for which to fetch active Pool IDs\n+     *\n+     * @return\n+     *  A collection of active Pool IDs belonging to the given owner.\n+     */\n+    public Collection<String> getActivePoolByOwnerId(String ownerId) {\n+        Date currentDate = new Date();\n+        String jpql = \"SELECT p.id FROM Pool p WHERE p.owner.id = \" +\n+            \" :owner_id AND p.endDate >= :endDate AND p.startDate <= :startDate\";\n+\n+        List<String> uuids = this.getEntityManager()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxNTMwNA==", "bodyText": "Try not to put line breaks for continuations in the middle of a statement or clause. There's enough space for the :owner_id part of the first WHERE clause, or the WHERE portion should move down to the line with it.", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r494315304", "createdAt": "2020-09-24T13:26:57Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/PoolCurator.java", "diffHunk": "@@ -2006,4 +2026,93 @@ public void clearPoolSourceEntitlementRefs(Iterable<String> poolIds) {\n \n         return output;\n     }\n+\n+    /**\n+     * Fetches a collection of active pool IDs mapped to a given owner. If no such pool\n+     * are present, an empty collection will be returned.\n+     *\n+     * @param ownerId\n+     *  The ID of the owner for which to fetch active Pool IDs\n+     *\n+     * @return\n+     *  A collection of active Pool IDs belonging to the given owner.\n+     */\n+    public Collection<String> getActivePoolByOwnerId(String ownerId) {\n+        Date currentDate = new Date();\n+        String jpql = \"SELECT p.id FROM Pool p WHERE p.owner.id = \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxOTMxNA==", "bodyText": "Let's try to find a better way to write this. This method looks heavily derived from the bulkSQL[update|delete] methods from AbstractHibernateCurator which should be flagged as deprecated if they're not already. Building raw SQL can be dangerous, and runs into potential problems with parameter limits (as this implementation does here).", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r494319314", "createdAt": "2020-09-24T13:32:16Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/PoolCurator.java", "diffHunk": "@@ -2006,4 +2026,93 @@ public void clearPoolSourceEntitlementRefs(Iterable<String> poolIds) {\n \n         return output;\n     }\n+\n+    /**\n+     * Fetches a collection of active pool IDs mapped to a given owner. If no such pool\n+     * are present, an empty collection will be returned.\n+     *\n+     * @param ownerId\n+     *  The ID of the owner for which to fetch active Pool IDs\n+     *\n+     * @return\n+     *  A collection of active Pool IDs belonging to the given owner.\n+     */\n+    public Collection<String> getActivePoolByOwnerId(String ownerId) {\n+        Date currentDate = new Date();\n+        String jpql = \"SELECT p.id FROM Pool p WHERE p.owner.id = \" +\n+            \" :owner_id AND p.endDate >= :endDate AND p.startDate <= :startDate\";\n+\n+        List<String> uuids = this.getEntityManager()\n+            .createQuery(jpql, String.class)\n+            .setParameter(\"owner_id\", ownerId)\n+            .setParameter(\"endDate\", currentDate)\n+            .setParameter(\"startDate\", currentDate)\n+            .getResultList();\n+\n+        return uuids != null ? uuids : Collections.<String>emptyList();\n+    }\n+\n+    /**\n+     * Fetches a mapping of pool IDs to sets of product UUID & derived product UUID of\n+     * the given pool. The returned map will only contain mappings for pools specified in the given\n+     * collection of pool IDs.\n+     *\n+     * @param poolIds\n+     *  A collection of pool IDs for which to fetch product & derived product UUIDs.\n+     *\n+     * @return\n+     *  A mapping of pool IDs to product & derived product UUIDs\n+     */\n+    public Map<String, Set<String>> getProductAndDerivedProductUuidsByPoolIds(Collection<String> poolIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyMDMwNQ==", "bodyText": "This is a functional duplication of listAllByUuid", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r494320305", "createdAt": "2020-09-24T13:33:40Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/ProductCurator.java", "diffHunk": "@@ -505,4 +505,25 @@ public boolean productHasSubscriptions(Owner owner, Product product) {\n \n         return this.cpQueryFactory.<Product>buildQuery();\n     }\n+\n+    /**\n+     * Fetches products by product UUIDs.\n+     *\n+     * @param productUuids\n+     *  The Collection of product UUIDs\n+     *\n+     * @return\n+     *  Query collection of Products\n+     */\n+    public CandlepinQuery<Product> getProductsByProductUuids(Collection<String> productUuids) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyMjI2Mw==", "bodyText": "CandlepinQuery is deprecated, we shouldn't introduce new code that uses it.", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r494322263", "createdAt": "2020-09-24T13:36:13Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ContentAccessManager.java", "diffHunk": "@@ -509,7 +518,35 @@ private String createDN(Consumer consumer, Owner owner) {\n     private byte[] createContentAccessDataPayload(Owner owner, Environment environment) throws IOException {\n         // fake a product dto as a container for the org content\n         Set<Product> containerSet = new HashSet<>();\n-        CandlepinQuery<Product> ownerProduct = ownerProductCurator.getProductsByOwner(owner);\n+        Set<String> productUuids = new HashSet<>();\n+\n+        Collection<String> activePoolIds = poolCurator.getActivePoolByOwnerId(owner.getId());\n+        Map<String, Set<String>> products =\n+            poolCurator.getProductAndDerivedProductUuidsByPoolIds(activePoolIds);\n+\n+        Map<String, Set<String>> providedProducts =\n+            poolCurator.getProvidedProductByPoolIds(activePoolIds, false);\n+\n+        Map<String, Set<String>> derivedProvidedProducts =\n+            poolCurator.getDerivedProvidedProductByPoolIds(activePoolIds, false);\n+\n+        for (String poolId : activePoolIds) {\n+            if (providedProducts.get(poolId) != null) {\n+                productUuids.addAll(providedProducts.get(poolId));\n+            }\n+\n+            if (derivedProvidedProducts.get(poolId) != null) {\n+                productUuids.addAll(derivedProvidedProducts.get(poolId));\n+            }\n+\n+            if (products.get(poolId) != null) {\n+                productUuids.addAll(products.get(poolId));\n+            }\n+        }\n+\n+        CandlepinQuery<Product> productsToConsider =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyMzU0Mg==", "bodyText": "This is an expensive way to fetch the product information for active pools. If the goal here is to fetch products for active pools, we should do exactly that: fetch active pools and then pull the products from them in code (functionally identical to what we're doing here), or write a new curator method that fetches only products from active entitlements of a given organization.", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r494323542", "createdAt": "2020-09-24T13:38:02Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ContentAccessManager.java", "diffHunk": "@@ -509,7 +518,35 @@ private String createDN(Consumer consumer, Owner owner) {\n     private byte[] createContentAccessDataPayload(Owner owner, Environment environment) throws IOException {\n         // fake a product dto as a container for the org content\n         Set<Product> containerSet = new HashSet<>();\n-        CandlepinQuery<Product> ownerProduct = ownerProductCurator.getProductsByOwner(owner);\n+        Set<String> productUuids = new HashSet<>();\n+\n+        Collection<String> activePoolIds = poolCurator.getActivePoolByOwnerId(owner.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de"}, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c6cee6723e8913a082089e5dc9cb7276cdb90de", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/5c6cee6723e8913a082089e5dc9cb7276cdb90de", "committedDate": "2020-09-16T11:44:24Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "a9c8ae6db5c8b0d1fa63fe5bdd047bb4fc00b15b", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/a9c8ae6db5c8b0d1fa63fe5bdd047bb4fc00b15b", "committedDate": "2020-10-01T04:07:41Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9c8ae6db5c8b0d1fa63fe5bdd047bb4fc00b15b", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/a9c8ae6db5c8b0d1fa63fe5bdd047bb4fc00b15b", "committedDate": "2020-10-01T04:07:41Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "30360c541a1ee227cb77b529d71f1bb26c5f2aa1", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/30360c541a1ee227cb77b529d71f1bb26c5f2aa1", "committedDate": "2020-10-01T04:15:27Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30360c541a1ee227cb77b529d71f1bb26c5f2aa1", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/30360c541a1ee227cb77b529d71f1bb26c5f2aa1", "committedDate": "2020-10-01T04:15:27Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "aaa786f5451251159a706baf05e5501d11ab5314", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/aaa786f5451251159a706baf05e5501d11ab5314", "committedDate": "2020-10-01T04:20:12Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aaa786f5451251159a706baf05e5501d11ab5314", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/aaa786f5451251159a706baf05e5501d11ab5314", "committedDate": "2020-10-01T04:20:12Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "7c5f7762cd132b1e59bd51a75169b7e9afe544b8", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/7c5f7762cd132b1e59bd51a75169b7e9afe544b8", "committedDate": "2020-10-01T04:29:17Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NzQ2OTMx", "url": "https://github.com/candlepin/candlepin/pull/2799#pullrequestreview-505746931", "createdAt": "2020-10-09T14:50:54Z", "commit": {"oid": "7c5f7762cd132b1e59bd51a75169b7e9afe544b8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDo1MDo1NFrOHfNMVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNToyMDoxNlrOHfOZ-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ4NDA1NA==", "bodyText": "setMaxResults called twice with different values here (blockCount looks to be extraneous)", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r502484054", "createdAt": "2020-10-09T14:50:54Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/PoolCurator.java", "diffHunk": "@@ -2006,4 +2008,115 @@ public void clearPoolSourceEntitlementRefs(Iterable<String> poolIds) {\n \n         return output;\n     }\n+\n+    /**\n+     * Fetches the product content of all products (including provided & derived provided\n+     * products) associated with active pool.\n+     *\n+     * @param ownerId\n+     *  Owner Id\n+     *\n+     * @return\n+     *  A Set of product content associated with active pool.\n+     */\n+    public Set<ProductContent> getProductContentOfActivePoolsByOwnerId(String ownerId) {\n+        Set<ProductContent> productsContent = new HashSet<>();\n+        Date currentDate = new Date();\n+\n+        long activePoolCount = this.getActivePoolCountByOwnerId(ownerId);\n+        int blockSize = getBatchBlockSize();\n+        int blockCount = (int) Math.ceil(activePoolCount / (float) blockSize);\n+\n+        CriteriaBuilder criteriaBuilder = this.getEntityManager().getCriteriaBuilder();\n+        CriteriaQuery<Pool> query = criteriaBuilder.createQuery(Pool.class);\n+        Root<Pool> pool = query.from(Pool.class);\n+        query.select(pool);\n+        List<Predicate> predicates = new ArrayList<>();\n+        predicates.add(criteriaBuilder.equal(pool.get(\"owner\").get(\"id\"), ownerId));\n+        predicates.add(criteriaBuilder.greaterThanOrEqualTo(pool.get(\"endDate\"), currentDate));\n+        predicates.add(criteriaBuilder.lessThanOrEqualTo(pool.get(\"startDate\"), currentDate));\n+        Predicate[] predicateArray = new Predicate[predicates.size()];\n+        query.where(predicates.toArray(predicateArray));\n+        List<javax.persistence.criteria.Order> orderList = new ArrayList();\n+        orderList.add(criteriaBuilder.desc(pool.get(\"startDate\")));\n+        query.orderBy(orderList);\n+        int offset = 0;\n+\n+        if (blockCount > 1) {\n+            while (blockCount > 0) {\n+                List<Pool> pools = this.getEntityManager()\n+                    .createQuery(query)\n+                    .setMaxResults(blockCount)\n+                    .setFirstResult(offset)\n+                    .setMaxResults(blockSize)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f7762cd132b1e59bd51a75169b7e9afe544b8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwMzkyOQ==", "bodyText": "The blocking here probably isn't critical in our general case, but it also doesn't hurt anything.\nHowever, the code goes out of its way to have special handling for the 1 block case, when that's unnecessary -- even with only a single block, setting the max results and first result in the query won't change the performance of the query enough to justify having separate branches for each case.\nAdditionally, the block count bit is largely unnecessary. Once you have the element count, block size, and keep track of the offset, the counting of blocks becomes extraneous -- just check that your offset is lower than your element count. Even without the element count, you can achieve the same level of performance by just querying until you get a batch that has zero elements.\nThat said, fetching the element count is basically the same query here except without returning the pool information -- the DB work is effectively the same. Moreover, the collection processing below runs into not one, but two n+1 problems of doing a ton of extra queries to fetch the product and content collections. I would bet this is overall slower than just fetching all of the \"active\" pool IDs, then using those to get the related product UUIDs, and then using that to get the content objects. You'd get the whole thing done in three queries, rather than the 2n^p+b+1 queries we have here.", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r502503929", "createdAt": "2020-10-09T15:20:16Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/PoolCurator.java", "diffHunk": "@@ -2006,4 +2008,115 @@ public void clearPoolSourceEntitlementRefs(Iterable<String> poolIds) {\n \n         return output;\n     }\n+\n+    /**\n+     * Fetches the product content of all products (including provided & derived provided\n+     * products) associated with active pool.\n+     *\n+     * @param ownerId\n+     *  Owner Id\n+     *\n+     * @return\n+     *  A Set of product content associated with active pool.\n+     */\n+    public Set<ProductContent> getProductContentOfActivePoolsByOwnerId(String ownerId) {\n+        Set<ProductContent> productsContent = new HashSet<>();\n+        Date currentDate = new Date();\n+\n+        long activePoolCount = this.getActivePoolCountByOwnerId(ownerId);\n+        int blockSize = getBatchBlockSize();\n+        int blockCount = (int) Math.ceil(activePoolCount / (float) blockSize);\n+\n+        CriteriaBuilder criteriaBuilder = this.getEntityManager().getCriteriaBuilder();\n+        CriteriaQuery<Pool> query = criteriaBuilder.createQuery(Pool.class);\n+        Root<Pool> pool = query.from(Pool.class);\n+        query.select(pool);\n+        List<Predicate> predicates = new ArrayList<>();\n+        predicates.add(criteriaBuilder.equal(pool.get(\"owner\").get(\"id\"), ownerId));\n+        predicates.add(criteriaBuilder.greaterThanOrEqualTo(pool.get(\"endDate\"), currentDate));\n+        predicates.add(criteriaBuilder.lessThanOrEqualTo(pool.get(\"startDate\"), currentDate));\n+        Predicate[] predicateArray = new Predicate[predicates.size()];\n+        query.where(predicates.toArray(predicateArray));\n+        List<javax.persistence.criteria.Order> orderList = new ArrayList();\n+        orderList.add(criteriaBuilder.desc(pool.get(\"startDate\")));\n+        query.orderBy(orderList);\n+        int offset = 0;\n+\n+        if (blockCount > 1) {\n+            while (blockCount > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f7762cd132b1e59bd51a75169b7e9afe544b8"}, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c5f7762cd132b1e59bd51a75169b7e9afe544b8", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/7c5f7762cd132b1e59bd51a75169b7e9afe544b8", "committedDate": "2020-10-01T04:29:17Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "17c419cdaf4f8f456aaaf16732eecde57a792f2a", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/17c419cdaf4f8f456aaaf16732eecde57a792f2a", "committedDate": "2020-10-28T11:28:38Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17c419cdaf4f8f456aaaf16732eecde57a792f2a", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/17c419cdaf4f8f456aaaf16732eecde57a792f2a", "committedDate": "2020-10-28T11:28:38Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "eced13855f2bc10749ee6a07daf50cdc546a229f", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/eced13855f2bc10749ee6a07daf50cdc546a229f", "committedDate": "2020-10-29T07:32:36Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eced13855f2bc10749ee6a07daf50cdc546a229f", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/eced13855f2bc10749ee6a07daf50cdc546a229f", "committedDate": "2020-10-29T07:32:36Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "d91cbb7efbc18b2001112d2fdb6688f174c833e2", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/d91cbb7efbc18b2001112d2fdb6688f174c833e2", "committedDate": "2020-10-29T08:20:23Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d91cbb7efbc18b2001112d2fdb6688f174c833e2", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/d91cbb7efbc18b2001112d2fdb6688f174c833e2", "committedDate": "2020-10-29T08:20:23Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "d743b82aadc7cff2a4c27694d2023e144cb28f45", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/d743b82aadc7cff2a4c27694d2023e144cb28f45", "committedDate": "2020-10-30T08:46:44Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d743b82aadc7cff2a4c27694d2023e144cb28f45", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/d743b82aadc7cff2a4c27694d2023e144cb28f45", "committedDate": "2020-10-30T08:46:44Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "757f391be364206a7650b3b12d6748fd9daa8456", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/757f391be364206a7650b3b12d6748fd9daa8456", "committedDate": "2020-10-30T08:53:20Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwOTI0ODY1", "url": "https://github.com/candlepin/candlepin/pull/2799#pullrequestreview-520924865", "createdAt": "2020-10-30T18:15:53Z", "commit": {"oid": "757f391be364206a7650b3b12d6748fd9daa8456"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoxNTo1M1rOHrbCiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOToyNDo1MFrOHrdBwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5MzgzMw==", "bodyText": "Just noticed these: don't use the create_pool_and_subscription function -- it's deprecated and does bad things. Use create_pool or create_upstream_subscription (and refresh) directly instead, depending on context.", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r515293833", "createdAt": "2020-10-30T18:15:53Z", "author": {"login": "Ceiu"}, "path": "server/spec/content_access_spec.rb", "diffHunk": "@@ -36,6 +36,7 @@\n \n     @product = create_product('test-product', 'some product')\n     @cp.add_content_to_product(@owner['key'], @product['id'], @content_id)\n+    create_pool_and_subscription(@owner['key'], @product['id'], 10)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "757f391be364206a7650b3b12d6748fd9daa8456"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMwNzg2Mg==", "bodyText": "I realize looking at this now there's a bug with how this query is partitioned. We need to use the minimum value between the in block limit or one fourth of the query parameter limit, since we'll be passing the block in four times. As it is now, if we happen to have a block of pools right at the in-block limit, we'll run clear over the overall parameter limit and crash out all the same.", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r515307862", "createdAt": "2020-10-30T18:44:21Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/OwnerContentCurator.java", "diffHunk": "@@ -548,4 +554,60 @@ public void removeOwnerContentReferences(Owner owner, Collection<String> content\n         }\n     }\n \n+    /**\n+     * Fetches all the product content for active pools by owner Id.\n+     *\n+     * @param ownerId\n+     *  Id of an owner\n+     *\n+     * @return\n+     *  Set of product content.\n+     */\n+    public Set<ProductContent> getProductContentsOfActivePoolByOwner(String ownerId) {\n+        EntityManager entityManager = this.getEntityManager();\n+        Date now = new Date();\n+\n+        // Get all the active pools\n+\n+        String jpql = \"SELECT p.id FROM Pool p \" +\n+            \"WHERE p.owner.id = :owner_id AND p.startDate <= :start_date AND p.endDate >= :end_date\";\n+\n+        List<String> poolIds = entityManager.createQuery(jpql, String.class)\n+            .setParameter(\"owner_id\", ownerId)\n+            .setParameter(\"start_date\", now)\n+            .setParameter(\"end_date\", now)\n+            .getResultList();\n+\n+        // Use the pool IDs to select all related product UUIDs\n+        // Note: we have to start partitioning now to safely handle any number of active pools\n+\n+        String sql = \"SELECT pool.product_uuid FROM cp_pool pool WHERE pool.id IN (:pool_ids) \" +\n+            \"UNION \" +\n+            \"SELECT pool.derived_product_uuid FROM cp_pool pool WHERE pool.id IN (:pool_ids) \" +\n+            \"UNION \" +\n+            \"SELECT pp.product_uuid FROM cp2_pool_provided_products pp WHERE pp.pool_id IN (:pool_ids) \" +\n+            \"UNION \" +\n+            \"SELECT dpp.product_uuid FROM cp2_pool_derprov_products dpp WHERE dpp.pool_id IN (:pool_ids) \";\n+\n+        Query prodQuery = entityManager.createNativeQuery(sql);\n+        Set<String> prodIds = new HashSet<>();\n+\n+        for (List<String> block : this.partition(poolIds)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "757f391be364206a7650b3b12d6748fd9daa8456"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyNDczMA==", "bodyText": "Ah ha. I remember this discussion now.\nSo we need to include all \"active\" content for a given org, but we need to flag it as enabled properly, resolving any conflicts to enabled.\nThat complicates things a bit, but is something we can still solve efficiently.\nSince ProductContent is a join object, we don't want to fetch it directly if we can help it -- especially since the object we actually care about is the Content instance, which we have to fetch even if we try to use the ProductContent mutators of Product directly. Using ProductContent like this results in another N+1 issue, where examining the content field results in another query. Running the spec test for this method, for instance, results in the following queries:\nselect pool0_.id as col_0_0_ from cp_pool pool0_ where pool0_.owner_id=? and pool0_.startDate<=? and pool0_.endDate>=?\n\nSELECT pool.product_uuid FROM cp_pool pool WHERE pool.id IN (?, ?) UNION SELECT pool.derived_product_uuid FROM cp_pool pool WHERE pool.id IN (?, ?) UNION SELECT pp.product_uuid FROM cp2_pool_provided_products pp WHERE pp.pool_id IN (?, ?) UNION SELECT dpp.product_uuid FROM cp2_pool_derprov_products dpp WHERE dpp.pool_id IN (?, ?) \n\nselect productcon0_.id as id1_12_, productcon0_.created as created2_12_, productcon0_.updated as updated3_12_, productcon0_.content_uuid as content_5_12_, productcon0_.enabled as enabled4_12_, productcon0_.product_uuid as product_6_12_ from cp2_product_content productcon0_ where productcon0_.product_uuid in (? , ? , ?)\n\nselect content0_.uuid as uuid1_1_0_, content0_.created as created2_1_0_, content0_.updated as updated3_1_0_, content0_.arches as arches4_1_0_, content0_.contentUrl as contentU5_1_0_, content0_.entity_version as entity_v6_1_0_, content0_.gpgUrl as gpgUrl7_1_0_, content0_.content_id as content_8_1_0_, content0_.label as label9_1_0_, content0_.locked as locked10_1_0_, content0_.metadataExpire as metadat11_1_0_, content0_.name as name12_1_0_, content0_.releaseVer as release13_1_0_, content0_.requiredTags as require14_1_0_, content0_.type as type15_1_0_, content0_.vendor as vendor16_1_0_ from cp2_content content0_ where content0_.uuid=?\n\nselect content0_.uuid as uuid1_1_0_, content0_.created as created2_1_0_, content0_.updated as updated3_1_0_, content0_.arches as arches4_1_0_, content0_.contentUrl as contentU5_1_0_, content0_.entity_version as entity_v6_1_0_, content0_.gpgUrl as gpgUrl7_1_0_, content0_.content_id as content_8_1_0_, content0_.label as label9_1_0_, content0_.locked as locked10_1_0_, content0_.metadataExpire as metadat11_1_0_, content0_.name as name12_1_0_, content0_.releaseVer as release13_1_0_, content0_.requiredTags as require14_1_0_, content0_.type as type15_1_0_, content0_.vendor as vendor16_1_0_ from cp2_content content0_ where content0_.uuid=?\n\nNote the two content queries at the end -- that's invoked once for each ProductContent fetched by the getProductContentsOfActivePoolsByOwner* method when getContent is invoked. Side note: that method name is a bit wordy -- getActiveProductContentByOwner would suffice, and even that's a tad long due to specifying the return type in the method name.\nSo, that means we need to solve this in the curator method.\nMy first thought was to use a DISTINCT with ORDER BY on the enabled field in ascending order, and then collect the content objects in order. This would put all the enabled content at the end, and would overwrite any disabled entries with an enabled one:\njpql = \"SELECT DISTINCT pc.content, pc.enabled FROM ProductContent pc WHERE pc.product.uuid IN (:product_uuids) ORDER BY pc.enabled ASC\";\n\nThis would work perfectly if it wasn't for one small hiccup: since we're partitioning, we have to assume we'll be running this query at least twice; and if we're running it twice, our order is no longer guaranteed between queries, and we run the risk of clobbering our \"enabled\" entries from the end of previous query with \"disabled\" entries in the next. We can work around this with some logic similar to what is outlined in the method this comment hangs on, but at that point, the ordering does literally nothing for us -- so we can omit it entirely.\n    // OwnerContentCurator.java\n    public Map<Content, Boolean> getActiveContentByOwner(String ownerId) {\n        EntityManager entityManager = this.getEntityManager();\n        Date now = new Date();\n\n        // Get all the active pools\n\n        String jpql = \"SELECT p.id FROM Pool p \" +\n            \"WHERE p.owner.id = :owner_id AND p.startDate <= :start_date AND p.endDate >= :end_date\";\n\n        List<String> poolIds = entityManager.createQuery(jpql, String.class)\n            .setParameter(\"owner_id\", ownerId)\n            .setParameter(\"start_date\", now)\n            .setParameter(\"end_date\", now)\n            .getResultList();\n\n        // Use the pool IDs to select all related product UUIDs\n        // Note: we have to start partitioning now to safely handle any number of active pools\n\n        String sql = \"SELECT pool.product_uuid FROM cp_pool pool WHERE pool.id IN (:pool_ids) \" +\n            \"UNION \" +\n            \"SELECT pool.derived_product_uuid FROM cp_pool pool WHERE pool.id IN (:pool_ids) \" +\n            \"UNION \" +\n            \"SELECT pp.product_uuid FROM cp2_pool_provided_products pp WHERE pp.pool_id IN (:pool_ids) \" +\n            \"UNION \" +\n            \"SELECT dpp.product_uuid FROM cp2_pool_derprov_products dpp WHERE dpp.pool_id IN (:pool_ids) \";\n\n        Query prodQuery = entityManager.createNativeQuery(sql);\n        Set<String> prodIds = new HashSet<>();\n\n        int blockSize = Math.min(this.getInBlockSize(), this.getQueryParameterLimit() / 4);\n\n        for (List<String> block : Iterables.partition(poolIds, blockSize)) {\n            prodIds.addAll(prodQuery.setParameter(\"pool_ids\", block).getResultList());\n        }\n\n        // Use the product UUIDs to select all related enabled content\n        jpql = \"SELECT DISTINCT pc.content, pc.enabled FROM ProductContent pc \" +\n            \"WHERE pc.product.uuid IN (:product_uuids)\";\n\n        Query contentQuery = entityManager.createQuery(jpql);\n\n        HashMap<Content, Boolean> activeContent = new HashMap<>();\n\n        for (List<String> block : this.partition(prodIds)) {\n            contentQuery.setParameter(\"product_uuids\", block)\n                .getResultList()\n                .forEach(col -> {\n                    Content content = (Content) ((Object[]) col)[0];\n                    Boolean enabled = (Boolean) ((Object[]) col)[1];\n\n                    activeContent.merge(content, enabled, (v1, v2) ->\n                        v1 != null && v1.booleanValue() ? v1 : v2);\n                });\n        }\n\n        return activeContent;\n    }\n\n    ...\n\n    // ContentAccessManager.java\n    this.ownerContentCurator.getActiveContentByOwner(owner.getId())\n        .forEach((content, enabled) -> container.addContent(content, enabled));\n\n\nThis avoids the N+1 problem entirely, as we can verify by checking the output during the same spec test:\nselect pool0_.id as col_0_0_ from cp_pool pool0_ where pool0_.owner_id=? and pool0_.startDate<=? and pool0_.endDate>=?\n\nSELECT pool.product_uuid FROM cp_pool pool WHERE pool.id IN (?, ?) UNION SELECT pool.derived_product_uuid FROM cp_pool pool WHERE pool.id IN (?, ?) UNION SELECT pp.product_uuid FROM cp2_pool_provided_products pp WHERE pp.pool_id IN (?, ?) UNION SELECT dpp.product_uuid FROM cp2_pool_derprov_products dpp WHERE dpp.pool_id IN (?, ?) \n\nselect distinct productcon0_.content_uuid as col_0_0_, productcon0_.enabled as col_1_0_, content1_.uuid as uuid1_1_, content1_.created as created2_1_, content1_.updated as updated3_1_, content1_.arches as arches4_1_, content1_.contentUrl as contentU5_1_, content1_.entity_version as entity_v6_1_, content1_.gpgUrl as gpgUrl7_1_, content1_.content_id as content_8_1_, content1_.label as label9_1_, content1_.locked as locked10_1_, content1_.metadataExpire as metadat11_1_, content1_.name as name12_1_, content1_.releaseVer as release13_1_, content1_.requiredTags as require14_1_, content1_.type as type15_1_, content1_.vendor as vendor16_1_ from cp2_product_content productcon0_ inner join cp2_content content1_ on productcon0_.content_uuid=content1_.uuid where productcon0_.product_uuid in (? , ? , ?)\n\nNote that this also keeps the logic for this problem in one place.", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r515324730", "createdAt": "2020-10-30T19:21:07Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/ContentAccessManager.java", "diffHunk": "@@ -559,6 +543,32 @@ else if (pc.isEnabled() && !contentEnabledMap.get(pc.getContent().getUuid())) {\n             emptyConsumer, emptyPool, null);\n     }\n \n+    /**\n+     * To process product content and added it to container product.\n+     *\n+     * @param container\n+     *  Product container\n+     *\n+     * @param ownerId\n+     *  Id of an owner\n+     *\n+     */\n+    private void processOwnerContent(Product container, String ownerId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "757f391be364206a7650b3b12d6748fd9daa8456"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyNjA0Ng==", "bodyText": "Another one here", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r515326046", "createdAt": "2020-10-30T19:24:02Z", "author": {"login": "Ceiu"}, "path": "server/spec/content_access_spec.rb", "diffHunk": "@@ -578,7 +580,10 @@ def read_json_file(filename)\n         @owner['key'], \"cname-c2\", 'test-content-c2', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n         {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n     @cp.add_content_to_product(@owner['key'], product['id'], content_c2['id'], false)\n-    @consumer = consumer_client(@user, @consumername, type=:system, username=nil, facts= {'system.certificate_version' => '3.3'})\n+\n+    create_pool_and_subscription(@owner['key'], product['id'], 10)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "757f391be364206a7650b3b12d6748fd9daa8456"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyNjEyNw==", "bodyText": "Two more uses of this function", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r515326127", "createdAt": "2020-10-30T19:24:13Z", "author": {"login": "Ceiu"}, "path": "server/spec/content_access_spec.rb", "diffHunk": "@@ -664,7 +666,10 @@ def read_json_file(filename)\n     @cp.add_content_to_product(@owner['key'], product_1['id'], content_c3['id'], false)\n     @cp.add_content_to_product(@owner['key'], product_2['id'], content_c3['id'], false)\n \n-    @consumer = consumer_client(@user, @consumername, type=:system, username=nil, facts= {'system.certificate_version' => '3.3'})\n+    create_pool_and_subscription(@owner['key'], product_1['id'], 10)\n+    create_pool_and_subscription(@owner['key'], product_2['id'], 10)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "757f391be364206a7650b3b12d6748fd9daa8456"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyNjM2MQ==", "bodyText": "Here", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r515326361", "createdAt": "2020-10-30T19:24:44Z", "author": {"login": "Ceiu"}, "path": "server/spec/content_access_spec.rb", "diffHunk": "@@ -722,4 +727,96 @@ def read_json_file(filename)\n \n     cert_export.cleanup\n   end\n+\n+  it 'should only add content from active pools on the SCA certificate' do\n+    product_1 = create_product('test-product-p1', 'some product-p1')\n+    product_2 = create_product('test-product-p2', 'some product-p2')\n+\n+    content_c1 = @cp.create_content(\n+        @owner['key'], \"cname-c1\", 'test-content-c1', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], product_1['id'], content_c1['id'], true)\n+\n+    content_c2 = @cp.create_content(\n+        @owner['key'], \"cname-c2\", 'test-content-c2', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], product_2['id'], content_c2['id'], true)\n+\n+    create_pool_and_subscription(@owner['key'], product_2['id'], 10)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "757f391be364206a7650b3b12d6748fd9daa8456"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyNjQwMg==", "bodyText": "and here", "url": "https://github.com/candlepin/candlepin/pull/2799#discussion_r515326402", "createdAt": "2020-10-30T19:24:50Z", "author": {"login": "Ceiu"}, "path": "server/spec/content_access_spec.rb", "diffHunk": "@@ -722,4 +727,96 @@ def read_json_file(filename)\n \n     cert_export.cleanup\n   end\n+\n+  it 'should only add content from active pools on the SCA certificate' do\n+    product_1 = create_product('test-product-p1', 'some product-p1')\n+    product_2 = create_product('test-product-p2', 'some product-p2')\n+\n+    content_c1 = @cp.create_content(\n+        @owner['key'], \"cname-c1\", 'test-content-c1', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], product_1['id'], content_c1['id'], true)\n+\n+    content_c2 = @cp.create_content(\n+        @owner['key'], \"cname-c2\", 'test-content-c2', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], product_2['id'], content_c2['id'], true)\n+\n+    create_pool_and_subscription(@owner['key'], product_2['id'], 10)\n+\n+    @consumer = consumer_client(@user, @consumername, type=:system, username=nil,\n+        facts= {'system.certificate_version' => '3.3'})\n+    certs = @consumer.list_certificates\n+\n+    expect(certs.length).to eq(1)\n+\n+    cert = certs[0]['cert']\n+    json_body = extract_payload(cert)\n+    expect(json_body['products'][0]['content'].length).to eq(2)\n+\n+    # Make sure that content c1 is not present in cert,\n+    # since product_1 does not have active pool\n+    json_body['products'][0]['content'].each do |content|\n+        expect(content.id).to_not eq(content_c1.id)\n+    end\n+  end\n+\n+  it 'should include content from all products associated with active pool to SCA cert' do\n+    mkt_product1 = create_product(random_string('productp1'), random_string('product'),\n+        {:owner => @owner['key']})\n+    eng_product = create_product(random_string('productp2'), random_string('product'),\n+        {:owner => @owner['key']})\n+    derived_product = create_product(random_string('productp4'), random_string('product'),\n+        {:owner => @owner['key']})\n+    dev_eng_product = create_product(random_string('productp3'), random_string('product'),\n+        {:owner => @owner['key']})\n+\n+    # Content enabled = true\n+    content_c1 = @cp.create_content(\n+        @owner['key'], \"content_c1\", 'test-content-c1', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], eng_product['id'], content_c1['id'], true)\n+\n+    content_c2 = @cp.create_content(\n+        @owner['key'], \"content_c2\", 'test-content-c2', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], mkt_product1['id'], content_c2['id'], true)\n+\n+    content_c3 = @cp.create_content(\n+        @owner['key'], \"content_c3\", 'test-content-c3', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], derived_product['id'], content_c3['id'], true)\n+\n+    content_c4 = @cp.create_content(\n+        @owner['key'], \"content_c4\", 'test-content-c4', random_string(\"clabel\"), \"ctype\", \"cvendor\",\n+        {:content_url=> '/this/is/the/path',  :modified_products => [@modified_product[\"id\"]]}, true)\n+    @cp.add_content_to_product(@owner['key'], dev_eng_product['id'], content_c4['id'], true)\n+\n+    create_pool_and_subscription(@owner['key'], mkt_product1.id, 10, [eng_product.id],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "757f391be364206a7650b3b12d6748fd9daa8456"}, "originalPosition": 162}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "757f391be364206a7650b3b12d6748fd9daa8456", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/757f391be364206a7650b3b12d6748fd9daa8456", "committedDate": "2020-10-30T08:53:20Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "43e9e0a2f4d8f01630fbf6b28567a6738bc311a8", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/43e9e0a2f4d8f01630fbf6b28567a6738bc311a8", "committedDate": "2020-11-02T09:19:18Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43e9e0a2f4d8f01630fbf6b28567a6738bc311a8", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/43e9e0a2f4d8f01630fbf6b28567a6738bc311a8", "committedDate": "2020-11-02T09:19:18Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "0ddf504bee894971cacdf1eedfdbdbc4cdd97951", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/0ddf504bee894971cacdf1eedfdbdbc4cdd97951", "committedDate": "2020-11-02T10:37:31Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2951ebb1b4f3d9bac4cd13575004e42c625a35a", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/d2951ebb1b4f3d9bac4cd13575004e42c625a35a", "committedDate": "2020-11-02T11:24:45Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ddf504bee894971cacdf1eedfdbdbc4cdd97951", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/0ddf504bee894971cacdf1eedfdbdbc4cdd97951", "committedDate": "2020-11-02T10:37:31Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}, "afterCommit": {"oid": "d2951ebb1b4f3d9bac4cd13575004e42c625a35a", "author": {"user": {"login": "wolfdale", "name": "Prakhar Gupta"}}, "url": "https://github.com/candlepin/candlepin/commit/d2951ebb1b4f3d9bac4cd13575004e42c625a35a", "committedDate": "2020-11-02T11:24:45Z", "message": "ENT-2806: Only add content from active pools on the SCA certificate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzc5MTEz", "url": "https://github.com/candlepin/candlepin/pull/2799#pullrequestreview-523379113", "createdAt": "2020-11-04T13:53:05Z", "commit": {"oid": "d2951ebb1b4f3d9bac4cd13575004e42c625a35a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2307, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}