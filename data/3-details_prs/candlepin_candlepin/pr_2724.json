{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDM1NTUz", "number": 2724, "title": "[M] 1843186: Refactor job constraints to reduce memory footprint (ENT-2469)", "bodyText": "Refactored the job constraints system such that each constraint\nperforms its own lookup of potentially conflicting jobs, rather\nthan fetching all non-terminal jobs\nJobManager now throws exceptions instead of unmanaged AsyncJobStatus\ninstances when a job cannot be queued due to an internal failure\nThe way job data has been stored has changed substantially;\narguments, metadata, and the job result are no longer stored in\na single serialized blob. Job arguments are now stored in a separate\ntable, metadata has been dropped and the job result is its own\ncolumn on the base table.\nAdded a new column and field to AsyncJobStatus for storing the\ncorrelation ID of the task that triggered the job\nThe JobExecutionContext is now responsible for setting the result\nof a job, rather than returning an object from the job's execute\nmethod\nJobExecutionContext is no longer an interface that is applied\nto the backing model objects\nJobs no longer return values to set a result, instead setting the\nresult by calling JobExecutionContext.setJobResult\nRemoved the now-redundant ImportConflictJobException\nOutput for the result field of the AsyncJobStatusDTO is now flagged\nas a raw JSON field\nMessaging exceptions will now set the job state to ABORTED instead\nof FAILED\nAdded a transition from FAILED_WITH_RETRY to ABORTED to allow\nproper handling of the case where a failed job is intended to be\nre-queued but the message cannot be sent for any reason", "createdAt": "2020-06-09T20:06:27Z", "url": "https://github.com/candlepin/candlepin/pull/2724", "merged": true, "mergeCommit": {"oid": "4969c19027935a46e90bdd7aa57f91b3fb79e25b"}, "closed": true, "closedAt": "2020-06-18T06:46:12Z", "author": {"login": "Ceiu"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpqzjbAFqTQyNzUwMjczMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsQeQqgBqjM0NTU0MjQ1NTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NTAyNzMy", "url": "https://github.com/candlepin/candlepin/pull/2724#pullrequestreview-427502732", "createdAt": "2020-06-09T20:09:18Z", "commit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDowOToxOFrOGhaYcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDowOToxOFrOGhaYcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4ODQzNQ==", "bodyText": "Need to revert the visibility change or the transactional tag is useless here.", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r437688435", "createdAt": "2020-06-09T20:09:18Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1489,8 +1474,30 @@ else if (jobState != JobState.QUEUED) {\n      * @return\n      *  the updated AsyncJobStatus entity\n      */\n+    private AsyncJobStatus updateJobStatus(AsyncJobStatus status, JobState state, String result)\n+        throws JobStateManagementException {\n+\n+        status.setJobResult(result);\n+        return this.updateJobStatus(status, state);\n+    }\n+\n+    /**\n+     * Updates the state of the provided job status\n+     *\n+     * @param status\n+     *  The AsyncJobStatus to update\n+     *\n+     * @param state\n+     *  The state to set\n+     *\n+     * @throws JobStateManagementException\n+     *  if the job state is unable to be updated due to a database failure\n+     *\n+     * @return\n+     *  the updated AsyncJobStatus entity\n+     */\n     @Transactional\n-    protected AsyncJobStatus updateJobStatus(AsyncJobStatus status, JobState state, Object result)\n+    private AsyncJobStatus updateJobStatus(AsyncJobStatus status, JobState state)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 189}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NTA0MDI2", "url": "https://github.com/candlepin/candlepin/pull/2724#pullrequestreview-427504026", "createdAt": "2020-06-09T20:11:11Z", "commit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDoxMToxMlrOGhacYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDoxMToxMlrOGhacYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4OTQ0MQ==", "bodyText": "Could restore the failure state message here, perhaps.", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r437689441", "createdAt": "2020-06-09T20:11:12Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/ProductResource.java", "diffHunk": "@@ -312,11 +312,9 @@ public void deleteProduct(\n                 statuses.add(this.jobManager.queueJob(config));\n             }\n             catch (Exception e) {\n-                AsyncJobStatus failedStatus = new AsyncJobStatus();\n-                failedStatus.setName(RefreshPoolsJob.JOB_NAME);\n-                failedStatus.setState(AsyncJobStatus.JobState.FAILED);\n-                failedStatus.setJobResult(e.toString());\n-                statuses.add(failedStatus);\n+                statuses.add(new AsyncJobStatus()\n+                    .setName(RefreshPoolsJob.JOB_NAME)\n+                    .setState(AsyncJobStatus.JobState.FAILED));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NTA2MDgy", "url": "https://github.com/candlepin/candlepin/pull/2724#pullrequestreview-427506082", "createdAt": "2020-06-09T20:14:10Z", "commit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDoxNDoxMFrOGhaiWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDoxNDoxMFrOGhaiWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5MDk3MQ==", "bodyText": "This is no longer necessary", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r437690971", "createdAt": "2020-06-09T20:14:10Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -961,7 +959,7 @@ public AsyncJobStatus findJob(String jobId) {\n      * @return\n      *  a list of jobs matching the provided query arguments/filters\n      */\n-    public List<AsyncJobStatus> findJobs(AsyncJobStatusCurator.AsyncJobStatusQueryBuilder queryBuilder) {\n+    public List<? extends AsyncJobStatus> findJobs(AsyncJobStatusQueryBuilder queryBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzkyODgz", "url": "https://github.com/candlepin/candlepin/pull/2724#pullrequestreview-428792883", "createdAt": "2020-06-11T10:40:45Z", "commit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDo0MDo0NVrOGiX5Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1OTo1NFrOGib93w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjI3OA==", "bodyText": "Since you're changing these 2 places to stop trying to persist the failed queuing of a job, there is one more place that does that which should probably change: the catch block in postJobStatusMessage().\nThis is called in 2 places:\n\nWhen queuing a job as normally\nWhen the execution of a job failed with retry=true and we're trying to re-queue it.\n\nIt should probably stop trying to persist the FAILED state, and just re-throw (it already rethrows) the exception.", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438696278", "createdAt": "2020-06-11T10:40:45Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1096,8 +1084,7 @@ public AsyncJobStatus queueJob(JobConfig config) throws JobException {\n             // If this occurs do to some other unexpected failure, we'll have some state cleanup\n             // to deal with, probably.\n \n-            this.setJobState(status, JobState.FAILED);\n-            status.setJobResult(e.toString());\n+            throw new JobException(e, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NDU1Mw==", "bodyText": "Looks like this was copied from a top-level class to an internal class here. We should probably delete ImportConflictJobException.java then (no need to keep both)", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438744553", "createdAt": "2020-06-11T12:25:51Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/async/tasks/ImportJob.java", "diffHunk": "@@ -159,6 +163,40 @@ public void validate() throws JobConfigValidationException {\n         }\n     }\n \n+    /**\n+     * The equivalent of {@link ImportConflictException}, but for asynchronous imports.\n+     * It is used by transforming an {@link org.candlepin.common.exceptions.CandlepinException} to a\n+     * {@link JobExecutionException}, fit for propagating to the job management system, without keeping the\n+     * redundant fields the former has (such as requestUuid & REST return code), while retaining the useful\n+     * information (list of conflicts, display message) accessible through its toString method.\n+     */\n+    private static class ImportConflictJobException extends JobExecutionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NzEyNQ==", "bodyText": "Are we not able to lazy-load this field after all? (or is that not desirable any more because the constraint memory issue is handled anyway?)", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438747125", "createdAt": "2020-06-11T12:31:02Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/model/AsyncJobStatus.java", "diffHunk": "@@ -215,25 +207,29 @@ public JobDataJsonConverter() {\n     @Column(name = \"end_time\")\n     private Date endTime;\n \n-    @Column(name = \"job_data\")\n-    @Convert(converter = JobDataJsonConverter.class)\n-    private SerializedJobData jobData;\n+    @ElementCollection(fetch = FetchType.LAZY)\n+    @CollectionTable(name = \"cp_async_job_arguments\", joinColumns = @JoinColumn(name = \"job_id\"))\n+    @MapKeyColumn(name = \"name\", nullable = false)\n+    @Column(name = \"value\")\n+    private Map<String, String> arguments;\n+\n+    @Column(name = \"job_result\")\n+    private String result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1ODQxMw==", "bodyText": "Since this method isn't used anywhere else, should we just delete it? I can't imagine where else we'd need it", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438758413", "createdAt": "2020-06-11T12:51:51Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1012,25 +1010,19 @@ public AsyncJobStatus queueJob(JobConfig config) throws JobException {\n         try {\n             // Check if the queueing is blocked by constraints\n             Collection<JobConstraint> constraints = config.getConstraints();\n-            Set<AsyncJobStatus> blockingJobs = new HashSet<>();\n+            Set<String> blockingJobIds = new HashSet<>();\n \n             if (constraints != null && !constraints.isEmpty()) {\n-                Collection<AsyncJobStatus> existingJobs = Collections.unmodifiableList(\n-                    this.jobCurator.getNonTerminalJobs());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1OTUwMg==", "bodyText": "param added in the doc, but the signature remained the same", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438759502", "createdAt": "2020-06-11T12:53:50Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/model/AsyncJobStatusCurator.java", "diffHunk": "@@ -219,6 +222,9 @@ public AsyncJobStatusCurator() {\n      * Fetches a collection of jobs in the given states. If no jobs can be found in the states\n      * specified, this method returns an empty collection.\n      *\n+     * @param extended\n+     *  whether or not to fetch extended job status information", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2Mjk3NQ==", "bodyText": "I think you mentioned that you've already added this, but if you didn't yet, you need to add <include file=\"db/changelog/datatypes.xml\"/> to this file for the variable to resolve", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438762975", "createdAt": "2020-06-11T12:59:54Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/resources/db/changelog/20200604045445-async-job-data-restructure.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<databaseChangeLog\n+        xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+        xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n+        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd\">\n+\n+    <changeSet id=\"20200604045445-1\" author=\"crog\">\n+        <dropColumn tableName=\"cp_async_jobs\" columnName=\"job_data\"/>\n+\n+        <!--\n+            The max length on the ref ID comes from the CSID_MAX_LENGTH value in LoggingFilter.java\n+            If that value ever increases, this column should be updated as well\n+        -->\n+\n+        <addColumn tableName=\"cp_async_jobs\">\n+            <column name=\"job_result\" type=\"${text.type}\"/>\n+            <column name=\"correlation_id\" type=\"VARCHAR(40)\" beforeColumn=\"previous_state\"/>\n+        </addColumn>\n+    </changeSet>\n+\n+    <changeSet id=\"20200604045445-2\" author=\"crog\">\n+        <createTable tableName=\"cp_async_job_arguments\">\n+            <column name=\"job_id\" type=\"varchar(36)\"/>\n+            <column name=\"name\" type=\"varchar(255)\"/>\n+            <column name=\"value\" type=\"${text.type}\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0398b550ba5dfacfda241afc31b5a8e1a805d616", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/0398b550ba5dfacfda241afc31b5a8e1a805d616", "committedDate": "2020-06-11T19:38:59Z", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field\n- Messaging exceptions will now set the job state to ABORTED instead\n  of FAILED\n- Added a transition from FAILED_WITH_RETRY to ABORTED to allow\n  proper handling of the case where a failed job is intended to be\n  re-queued but the message cannot be sent for any reason"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af8fa66aac621943ae71856ce5c0a67a04f021aa", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/af8fa66aac621943ae71856ce5c0a67a04f021aa", "committedDate": "2020-06-11T01:08:43Z", "message": "Additional test cleanup"}, "afterCommit": {"oid": "f2d79e03f34b6c48f9ed846b5979b4b239eabe9b", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/f2d79e03f34b6c48f9ed846b5979b4b239eabe9b", "committedDate": "2020-06-11T03:49:44Z", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2d79e03f34b6c48f9ed846b5979b4b239eabe9b", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/f2d79e03f34b6c48f9ed846b5979b4b239eabe9b", "committedDate": "2020-06-11T03:49:44Z", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field"}, "afterCommit": {"oid": "ff00b7a575f9a2157d846d2d205034dc5641fe2c", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/ff00b7a575f9a2157d846d2d205034dc5641fe2c", "committedDate": "2020-06-11T07:40:22Z", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzA4OTIy", "url": "https://github.com/candlepin/candlepin/pull/2724#pullrequestreview-432308922", "createdAt": "2020-06-17T11:30:08Z", "commit": {"oid": "ff00b7a575f9a2157d846d2d205034dc5641fe2c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTozMDowOVrOGlBkTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjozNTozMFrOGlDpiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NjE3Mg==", "bodyText": "Looks like the name change caused a spec test failure, and the test needs updating", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441476172", "createdAt": "2020-06-17T11:30:09Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/async/tasks/HypervisorHeartbeatUpdateJob.java", "diffHunk": "@@ -42,7 +42,7 @@\n     private static final Logger log = LoggerFactory.getLogger(HypervisorHeartbeatUpdateJob.class);\n \n     public static final String JOB_KEY = \"HypervisorHeartbeatUpdateJob\";\n-    public static final String JOB_NAME = \"hypervisor_heartbeat_update\";\n+    public static final String JOB_NAME = \"Hypervisor Heartbeat Update\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff00b7a575f9a2157d846d2d205034dc5641fe2c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMDI4MQ==", "bodyText": "Now that we use an objectmapper excplicitly here, to serialize result objects, we should remove the old infrastructure we used to do that with the @Convert annotation: JobDataJsonConverter / AbstractJsonConverter.java", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441510281", "createdAt": "2020-06-17T12:35:30Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/model/AsyncJobStatus.java", "diffHunk": "@@ -28,32 +31,34 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n-import javax.persistence.Convert;\n import javax.persistence.Converter;\n+import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n+import javax.persistence.MapKeyColumn;\n import javax.persistence.Table;\n import javax.persistence.Version;\n import javax.validation.constraints.NotNull;\n-import javax.xml.bind.annotation.XmlAccessType;\n-import javax.xml.bind.annotation.XmlAccessorType;\n-import javax.xml.bind.annotation.XmlRootElement;\n \n \n \n /**\n- * Represents the current status for a long-running job.\n+ * Represents the job status for an async job. This class does not include extended information,\n+ * such as the job result. The AsyncJobStatusEx class can be used in cases where the extended\n+ * information is needed.\n  */\n-@XmlRootElement\n-@XmlAccessorType(XmlAccessType.PROPERTY)\n @Entity\n @Table(name = AsyncJobStatus.DB_TABLE)\n-public class AsyncJobStatus extends AbstractHibernateObject implements JobExecutionContext {\n+public class AsyncJobStatus extends AbstractHibernateObject {\n+\n+    /** Basic ObjectMapper to use for serializing job results as we receive them */\n+    private static final ObjectMapper MAPPER = ObjectMapperFactory.getObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff00b7a575f9a2157d846d2d205034dc5641fe2c"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff00b7a575f9a2157d846d2d205034dc5641fe2c", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/ff00b7a575f9a2157d846d2d205034dc5641fe2c", "committedDate": "2020-06-11T07:40:22Z", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field"}, "afterCommit": {"oid": "1f5bfc1b80904f691670dabe1398ca9023cf6f7c", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/1f5bfc1b80904f691670dabe1398ca9023cf6f7c", "committedDate": "2020-06-11T11:21:29Z", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field\n- Messaging exceptions will now set the job state to ABORTED instead\n  of FAILED\n- Added a transition from FAILED_WITH_RETRY to ABORTED to allow\n  proper handling of the case where a failed job is intended to be\n  re-queued but the message cannot be sent for any reason"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f5bfc1b80904f691670dabe1398ca9023cf6f7c", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/1f5bfc1b80904f691670dabe1398ca9023cf6f7c", "committedDate": "2020-06-11T11:21:29Z", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field\n- Messaging exceptions will now set the job state to ABORTED instead\n  of FAILED\n- Added a transition from FAILED_WITH_RETRY to ABORTED to allow\n  proper handling of the case where a failed job is intended to be\n  re-queued but the message cannot be sent for any reason"}, "afterCommit": {"oid": "780216261aaecd0a85d3117279e511d26e117981", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/780216261aaecd0a85d3117279e511d26e117981", "committedDate": "2020-06-11T12:08:39Z", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field\n- Messaging exceptions will now set the job state to ABORTED instead\n  of FAILED\n- Added a transition from FAILED_WITH_RETRY to ABORTED to allow\n  proper handling of the case where a failed job is intended to be\n  re-queued but the message cannot be sent for any reason"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNDIzNDEy", "url": "https://github.com/candlepin/candlepin/pull/2724#pullrequestreview-432423412", "createdAt": "2020-06-17T13:51:58Z", "commit": {"oid": "780216261aaecd0a85d3117279e511d26e117981"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "780216261aaecd0a85d3117279e511d26e117981", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/780216261aaecd0a85d3117279e511d26e117981", "committedDate": "2020-06-11T12:08:39Z", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field\n- Messaging exceptions will now set the job state to ABORTED instead\n  of FAILED\n- Added a transition from FAILED_WITH_RETRY to ABORTED to allow\n  proper handling of the case where a failed job is intended to be\n  re-queued but the message cannot be sent for any reason"}, "afterCommit": {"oid": "0398b550ba5dfacfda241afc31b5a8e1a805d616", "author": {"user": {"login": "Ceiu", "name": "Chris \"Ceiu\" Rog"}}, "url": "https://github.com/candlepin/candlepin/commit/0398b550ba5dfacfda241afc31b5a8e1a805d616", "committedDate": "2020-06-11T19:38:59Z", "message": "1843186: Refactor job constraints to reduce memory footprint\n\n- Refactored the job constraints system such that each constraint\n  performs its own lookup of potentially conflicting jobs, rather\n  than fetching all non-terminal jobs\n- JobManager now throws exceptions instead of unmanaged AsyncJobStatus\n  instances when a job cannot be queued due to an internal failure\n- The way job data has been stored has changed substantially;\n  arguments, metadata, and the job result are no longer stored in\n  a single serialized blob. Job arguments are now stored in a separate\n  table, metadata has been dropped and the job result is its own\n  column on the base table.\n- Added a new column and field to AsyncJobStatus for storing the\n  correlation ID of the task that triggered the job\n- The JobExecutionContext is now responsible for setting the result\n  of a job, rather than returning an object from the job's execute\n  method\n- JobExecutionContext is no longer an interface that is applied\n  to the backing model objects\n- Jobs no longer return values to set a result, instead setting the\n  result by calling JobExecutionContext.setJobResult\n- Removed the now-redundant ImportConflictJobException\n- Output for the result field of the AsyncJobStatusDTO is now flagged\n  as a raw JSON field\n- Messaging exceptions will now set the job state to ABORTED instead\n  of FAILED\n- Added a transition from FAILED_WITH_RETRY to ABORTED to allow\n  proper handling of the case where a failed job is intended to be\n  re-queued but the message cannot be sent for any reason"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2422, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}