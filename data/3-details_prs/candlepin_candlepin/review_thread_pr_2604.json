{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMDc4ODE4", "number": 2604, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTo0MDo1NlrODfmBxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTo0MDo1NlrODfmBxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDU1NDk1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/controller/Entitler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTo0MDo1NlrOFpYvOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNzo1NzoxM1rOFpuIng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0MTI0MA==", "bodyText": "This block is a bit dangerous, since we have no innate control over whether or not devProduct actually returns a non-null value or not. Plus, we can do some optimization here to avoid instantiating a new collection, since we already have one to populate:\n            Collection<? extends ProductInfo> provided = devProduct.getProvidedProducts();\n\n            if (provided != null) {\n                provided.forEach(product -> {\n                    if (product != null) {\n                        devProductIds.add(product.getId());\n                    }\n                });\n            }", "url": "https://github.com/candlepin/candlepin/pull/2604#discussion_r378941240", "createdAt": "2020-02-13T15:40:56Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/controller/Entitler.java", "diffHunk": "@@ -362,26 +362,38 @@ protected Pool assembleDevPool(Consumer consumer, Owner owner, String sku) {\n         return pool;\n     }\n \n-    private DeveloperProducts getDeveloperPoolProducts(Consumer consumer, Owner owner, String sku) {\n-        DeveloperProducts devProducts = getDevProductMap(consumer, owner, sku);\n-        verifyDevProducts(consumer, sku, devProducts);\n+    private DeveloperProducts getDeveloperPoolProducts(Owner owner, String sku) {\n+        DeveloperProducts devProducts = getDevProductMap(owner, sku);\n+        verifyDevProducts(sku, devProducts);\n         return devProducts;\n     }\n \n     /**\n-     * Looks up all Products matching the specified SKU and the consumer's\n-     * installed products.\n+     * Looks up all Products and their provided products\n+     * matching the specified SKU.\n      *\n-     * @param consumer the consumer to pull the installed product id list from.\n      * @param sku the product id of the SKU.\n      * @return a {@link DeveloperProducts} object that contains the Product objects\n      *         from the adapter.\n      */\n-    private DeveloperProducts getDevProductMap(Consumer consumer, Owner owner, String sku) {\n-        List<String> devProductIds = new ArrayList<>();\n-        devProductIds.add(sku);\n-        for (ConsumerInstalledProduct ip : consumer.getInstalledProducts()) {\n-            devProductIds.add(ip.getProductId());\n+    private DeveloperProducts getDevProductMap(Owner owner, String sku) {\n+\n+        Collection<? extends ProductInfo> productsByIds = this.productAdapter\n+            .getProductsByIds(owner.getKey(), Arrays.asList(sku));\n+\n+        Collection<String> devProductIds = new ArrayList<>();\n+        if (productsByIds.iterator().hasNext()) {\n+            ProductInfo devProduct = productsByIds.iterator().next();\n+            devProductIds.add(devProduct.getId());\n+\n+            if (!devProduct.getProvidedProducts().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746250b8acbb7a6182990c81c4a27727e0e01b27"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5MTgwNg==", "bodyText": "Agreed, null objects needed to be filtered out. Updated as suggested.", "url": "https://github.com/candlepin/candlepin/pull/2604#discussion_r379291806", "createdAt": "2020-02-14T07:57:13Z", "author": {"login": "sonalidhome"}, "path": "server/src/main/java/org/candlepin/controller/Entitler.java", "diffHunk": "@@ -362,26 +362,38 @@ protected Pool assembleDevPool(Consumer consumer, Owner owner, String sku) {\n         return pool;\n     }\n \n-    private DeveloperProducts getDeveloperPoolProducts(Consumer consumer, Owner owner, String sku) {\n-        DeveloperProducts devProducts = getDevProductMap(consumer, owner, sku);\n-        verifyDevProducts(consumer, sku, devProducts);\n+    private DeveloperProducts getDeveloperPoolProducts(Owner owner, String sku) {\n+        DeveloperProducts devProducts = getDevProductMap(owner, sku);\n+        verifyDevProducts(sku, devProducts);\n         return devProducts;\n     }\n \n     /**\n-     * Looks up all Products matching the specified SKU and the consumer's\n-     * installed products.\n+     * Looks up all Products and their provided products\n+     * matching the specified SKU.\n      *\n-     * @param consumer the consumer to pull the installed product id list from.\n      * @param sku the product id of the SKU.\n      * @return a {@link DeveloperProducts} object that contains the Product objects\n      *         from the adapter.\n      */\n-    private DeveloperProducts getDevProductMap(Consumer consumer, Owner owner, String sku) {\n-        List<String> devProductIds = new ArrayList<>();\n-        devProductIds.add(sku);\n-        for (ConsumerInstalledProduct ip : consumer.getInstalledProducts()) {\n-            devProductIds.add(ip.getProductId());\n+    private DeveloperProducts getDevProductMap(Owner owner, String sku) {\n+\n+        Collection<? extends ProductInfo> productsByIds = this.productAdapter\n+            .getProductsByIds(owner.getKey(), Arrays.asList(sku));\n+\n+        Collection<String> devProductIds = new ArrayList<>();\n+        if (productsByIds.iterator().hasNext()) {\n+            ProductInfo devProduct = productsByIds.iterator().next();\n+            devProductIds.add(devProduct.getId());\n+\n+            if (!devProduct.getProvidedProducts().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0MTI0MA=="}, "originalCommit": {"oid": "746250b8acbb7a6182990c81c4a27727e0e01b27"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4294, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}