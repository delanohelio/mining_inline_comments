{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzODYzOTY5", "number": 2573, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTo1OTowMVrODaORmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzoyMjoyNFrODbN6zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODIzNDUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/api/v1/ImportUpstreamConsumerDTO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTo1OTowMVrOFhDiGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMTo1OTo1M1rOFhrlqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwNTIxMA==", "bodyText": "So, we don't get a clone method??? This looks tedious.", "url": "https://github.com/candlepin/candlepin/pull/2573#discussion_r370205210", "createdAt": "2020-01-23T15:59:01Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ImportUpstreamConsumerDTO.java", "diffHunk": "@@ -205,7 +205,17 @@ public ImportUpstreamConsumerDTO clone() {\n         ImportUpstreamConsumerDTO copy = super.clone();\n \n         ConsumerTypeDTO type = this.getConsumerType();\n-        copy.setConsumerType(type != null ? (ConsumerTypeDTO) type.clone() : null);\n+        if (type != null) {\n+            copy.setConsumerType(new ConsumerTypeDTO()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7ea308b5e63ba88d876afaaf9465a0abfd64f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MTQ4MQ==", "bodyText": "Yes", "url": "https://github.com/candlepin/candlepin/pull/2573#discussion_r370861481", "createdAt": "2020-01-24T21:59:53Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ImportUpstreamConsumerDTO.java", "diffHunk": "@@ -205,7 +205,17 @@ public ImportUpstreamConsumerDTO clone() {\n         ImportUpstreamConsumerDTO copy = super.clone();\n \n         ConsumerTypeDTO type = this.getConsumerType();\n-        copy.setConsumerType(type != null ? (ConsumerTypeDTO) type.clone() : null);\n+        if (type != null) {\n+            copy.setConsumerType(new ConsumerTypeDTO()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwNTIxMA=="}, "originalCommit": {"oid": "7c7ea308b5e63ba88d876afaaf9465a0abfd64f2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODYzODQ4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/dto/api/v1/ConsumerDTO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzoxNTo1MVrOFikg9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzozMzozMlrOFilE7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5NDE2Ng==", "bodyText": "What happens when ConsumerDTO.java gets deleted and gets defined in the yaml file? Is there a way to specify custom field se/deserializers for openapi-defined entities?", "url": "https://github.com/candlepin/candlepin/pull/2573#discussion_r371794166", "createdAt": "2020-01-28T13:15:51Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ConsumerDTO.java", "diffHunk": "@@ -788,6 +789,7 @@ public ConsumerTypeDTO getType() {\n      *\n      * @return a reference to this DTO object.\n      */\n+    @JsonDeserialize(using = ConsumerTypeDeserializer.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "740a4021fc51ac5b5cdb5b3eec7e9eca4b6f4cb7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgwMzM3Mw==", "bodyText": "That's indeed a problem that needs to be solved; however is not one that is unique to this addition. We have other such annotations and custom format handlers we'll need to figure out how to add into the (de)serializers.\nTo some extend this is kind of kicking the can down the road for someone else to sort out, but since we have other areas that use it and need sorting, we can revisit it then.", "url": "https://github.com/candlepin/candlepin/pull/2573#discussion_r371803373", "createdAt": "2020-01-28T13:33:32Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ConsumerDTO.java", "diffHunk": "@@ -788,6 +789,7 @@ public ConsumerTypeDTO getType() {\n      *\n      * @return a reference to this DTO object.\n      */\n+    @JsonDeserialize(using = ConsumerTypeDeserializer.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5NDE2Ng=="}, "originalCommit": {"oid": "740a4021fc51ac5b5cdb5b3eec7e9eca4b6f4cb7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODY0NTY3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/jackson/ConsumerTypeDeserializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzoxNzo1NFrOFiklFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzozMzo0MFrOFilFMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5NTIyMg==", "bodyText": "The comment should get updated to reflect the new class", "url": "https://github.com/candlepin/candlepin/pull/2573#discussion_r371795222", "createdAt": "2020-01-28T13:17:54Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/jackson/ConsumerTypeDeserializer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.jackson;\n+\n+import org.candlepin.common.exceptions.CandlepinJsonProcessingException;\n+import org.candlepin.dto.api.v1.ConsumerTypeDTO;\n+import org.candlepin.model.ConsumerType.ConsumerTypeEnum;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+\n+\n+/**\n+ * The CandlepinAttributeDeserializer handles the deserialization of attributes, processing both", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "740a4021fc51ac5b5cdb5b3eec7e9eca4b6f4cb7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgwMzQ0MQ==", "bodyText": "Fixed", "url": "https://github.com/candlepin/candlepin/pull/2573#discussion_r371803441", "createdAt": "2020-01-28T13:33:40Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/jackson/ConsumerTypeDeserializer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.jackson;\n+\n+import org.candlepin.common.exceptions.CandlepinJsonProcessingException;\n+import org.candlepin.dto.api.v1.ConsumerTypeDTO;\n+import org.candlepin.model.ConsumerType.ConsumerTypeEnum;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+\n+\n+/**\n+ * The CandlepinAttributeDeserializer handles the deserialization of attributes, processing both", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5NTIyMg=="}, "originalCommit": {"oid": "740a4021fc51ac5b5cdb5b3eec7e9eca4b6f4cb7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODY2MTkxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/jackson/ConsumerTypeDeserializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzoyMjoyNVrOFikujw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzozNDowMFrOFilFzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5NzY0Nw==", "bodyText": "These should be removed probably", "url": "https://github.com/candlepin/candlepin/pull/2573#discussion_r371797647", "createdAt": "2020-01-28T13:22:25Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/jackson/ConsumerTypeDeserializer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.jackson;\n+\n+import org.candlepin.common.exceptions.CandlepinJsonProcessingException;\n+import org.candlepin.dto.api.v1.ConsumerTypeDTO;\n+import org.candlepin.model.ConsumerType.ConsumerTypeEnum;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+\n+\n+/**\n+ * The CandlepinAttributeDeserializer handles the deserialization of attributes, processing both\n+ * the current attribute mapping style and obsoleted formats.\n+ */\n+public class ConsumerTypeDeserializer extends StdDeserializer<ConsumerTypeDTO> {\n+    private static Logger log = LoggerFactory.getLogger(ConsumerTypeDeserializer.class);\n+\n+    public ConsumerTypeDeserializer() {\n+        this(null);\n+    }\n+\n+    public ConsumerTypeDeserializer(Class<?> valueClass) {\n+        super(valueClass);\n+    }\n+\n+    @Override\n+    public ConsumerTypeDTO deserialize(JsonParser parser, DeserializationContext context)\n+        throws IOException, JsonProcessingException {\n+\n+        // TreeNode node = parser.readValueAsTree();\n+\n+        // log.debug(\"DESERIALIZING CONSUMER TYPE. TREENODE: {}\", node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "740a4021fc51ac5b5cdb5b3eec7e9eca4b6f4cb7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgwMzU5OQ==", "bodyText": "Thought I removed these already. Must have ctrl+z'd one too many times.", "url": "https://github.com/candlepin/candlepin/pull/2573#discussion_r371803599", "createdAt": "2020-01-28T13:34:00Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/jackson/ConsumerTypeDeserializer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.jackson;\n+\n+import org.candlepin.common.exceptions.CandlepinJsonProcessingException;\n+import org.candlepin.dto.api.v1.ConsumerTypeDTO;\n+import org.candlepin.model.ConsumerType.ConsumerTypeEnum;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+\n+\n+/**\n+ * The CandlepinAttributeDeserializer handles the deserialization of attributes, processing both\n+ * the current attribute mapping style and obsoleted formats.\n+ */\n+public class ConsumerTypeDeserializer extends StdDeserializer<ConsumerTypeDTO> {\n+    private static Logger log = LoggerFactory.getLogger(ConsumerTypeDeserializer.class);\n+\n+    public ConsumerTypeDeserializer() {\n+        this(null);\n+    }\n+\n+    public ConsumerTypeDeserializer(Class<?> valueClass) {\n+        super(valueClass);\n+    }\n+\n+    @Override\n+    public ConsumerTypeDTO deserialize(JsonParser parser, DeserializationContext context)\n+        throws IOException, JsonProcessingException {\n+\n+        // TreeNode node = parser.readValueAsTree();\n+\n+        // log.debug(\"DESERIALIZING CONSUMER TYPE. TREENODE: {}\", node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5NzY0Nw=="}, "originalCommit": {"oid": "740a4021fc51ac5b5cdb5b3eec7e9eca4b6f4cb7"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4250, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}