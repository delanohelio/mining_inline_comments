{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMzg3OTQw", "number": 2630, "title": "[F] ENT-1846: Port ActivationKeyDTO to openapi spec", "bodyText": "Replace use of current ReleaseVersionWrapSerializer and\nReleaseVersionWrapDeserializer on ActivationKeyDTO\nwith a new ReleaseVerDTO and ReleaseVersionWrapDeserializer.\nReplace use of current ProductWrapSerializer and\nProductWrapDeserializer on ActivationKeyDTO with a new\nActivationKeyProductDTO.\nReplace use of current OwnerDTO which was serialized with the\nassistance of Hateoas annotations when being nested, with a\ncut-down version called NestedOwnerDTO, to be used by all\nDTOs that have reference a nested OwnerDTO, eliminating the\nneed of hateoas filters.\nAdd non-null and non-empty field restrictions\n(required, minLength) to ActivationKeyDTO and\nexisting ContentOverrideDTO and StatusDTO specs\nfor validation.\nIntroduce DTOValidator utility class to be used on Resource\nendpoints for performing validation that previously happened\non DTO setters/constructors.", "createdAt": "2020-03-02T13:35:46Z", "url": "https://github.com/candlepin/candlepin/pull/2630", "merged": true, "mergeCommit": {"oid": "0fc591915c35173da9d81679415b7131dc954cbd"}, "closed": true, "closedAt": "2020-03-05T07:16:58Z", "author": {"login": "nikosmoum"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJuzXGABqjMwODgyMjkzODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKmNnDgFqTM2OTMzODY2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cdf6fcebc6ee3a0d8cc8e2707b03effe5bfcb3a8", "author": {"user": {"login": "nikosmoum", "name": "Nikos Moumoulidis"}}, "url": "https://github.com/candlepin/candlepin/commit/cdf6fcebc6ee3a0d8cc8e2707b03effe5bfcb3a8", "committedDate": "2020-03-02T13:33:26Z", "message": "ENT-1846: Port ActivationKeyDTO to openapi spec\n\n- Replace use of current ReleaseVersionWrapSerializer and\n  ReleaseVersionWrapDeserializer on ActivationKeyDTO\n  with a new ReleaseVerDTO and ReleaseVersionWrapDeserializer.\n- Replace use of current ProductWrapSerializer and\n  ProductWrapDeserializer on ActivationKeyDTO with a new\n  ActivationKeyProductDTO.\n- Replace use of current OwnerDTO which was serialized with the\n  assistance of Hateoas annotations when being nested, with a\n  cut-down version called NestedOwnerDTO, to be used by all\n  DTOs that have reference a nested OwnerDTO, eliminating the\n  need of hateoas filters.\n- Add non-null and non-empty field restrictions\n  (required, minLength) to ActivationKeyDTO and\n  existing ContentOverrideDTO and StatusDTO specs\n  for validation.\n- Introduce DTOValidator utility class to be used on Resource\n  endpoints for performing validation that previously happened\n  on DTO setters/constructors."}, "afterCommit": {"oid": "331755dee24dad8a0224f8b669971f43b25615ee", "author": {"user": {"login": "nikosmoum", "name": "Nikos Moumoulidis"}}, "url": "https://github.com/candlepin/candlepin/commit/331755dee24dad8a0224f8b669971f43b25615ee", "committedDate": "2020-03-02T14:42:50Z", "message": "ENT-1846: Port ActivationKeyDTO to openapi spec\n\n- Replace use of current ReleaseVersionWrapSerializer and\n  ReleaseVersionWrapDeserializer on ActivationKeyDTO\n  with a new ReleaseVerDTO and ReleaseVersionWrapDeserializer.\n- Replace use of current ProductWrapSerializer and\n  ProductWrapDeserializer on ActivationKeyDTO with a new\n  ActivationKeyProductDTO.\n- Replace use of current OwnerDTO which was serialized with the\n  assistance of Hateoas annotations when being nested, with a\n  cut-down version called NestedOwnerDTO, to be used by all\n  DTOs that have reference a nested OwnerDTO, eliminating the\n  need of hateoas filters.\n- Add non-null and non-empty field restrictions\n  (required, minLength) to ActivationKeyDTO and\n  existing ContentOverrideDTO and StatusDTO specs\n  for validation.\n- Introduce DTOValidator utility class to be used on Resource\n  endpoints for performing validation that previously happened\n  on DTO setters/constructors."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "331755dee24dad8a0224f8b669971f43b25615ee", "author": {"user": {"login": "nikosmoum", "name": "Nikos Moumoulidis"}}, "url": "https://github.com/candlepin/candlepin/commit/331755dee24dad8a0224f8b669971f43b25615ee", "committedDate": "2020-03-02T14:42:50Z", "message": "ENT-1846: Port ActivationKeyDTO to openapi spec\n\n- Replace use of current ReleaseVersionWrapSerializer and\n  ReleaseVersionWrapDeserializer on ActivationKeyDTO\n  with a new ReleaseVerDTO and ReleaseVersionWrapDeserializer.\n- Replace use of current ProductWrapSerializer and\n  ProductWrapDeserializer on ActivationKeyDTO with a new\n  ActivationKeyProductDTO.\n- Replace use of current OwnerDTO which was serialized with the\n  assistance of Hateoas annotations when being nested, with a\n  cut-down version called NestedOwnerDTO, to be used by all\n  DTOs that have reference a nested OwnerDTO, eliminating the\n  need of hateoas filters.\n- Add non-null and non-empty field restrictions\n  (required, minLength) to ActivationKeyDTO and\n  existing ContentOverrideDTO and StatusDTO specs\n  for validation.\n- Introduce DTOValidator utility class to be used on Resource\n  endpoints for performing validation that previously happened\n  on DTO setters/constructors."}, "afterCommit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d", "author": {"user": {"login": "nikosmoum", "name": "Nikos Moumoulidis"}}, "url": "https://github.com/candlepin/candlepin/commit/7f125ada3c3cbeeb205cc81e634be4d5bdaf234d", "committedDate": "2020-03-03T09:02:42Z", "message": "ENT-1846: Port ActivationKeyDTO to openapi spec\n\n- Replace use of current ReleaseVersionWrapSerializer and\n  ReleaseVersionWrapDeserializer on ActivationKeyDTO\n  with a new ReleaseVerDTO and ReleaseVersionWrapDeserializer.\n- Replace use of current ProductWrapSerializer and\n  ProductWrapDeserializer on ActivationKeyDTO with a new\n  ActivationKeyProductDTO.\n- Replace use of current OwnerDTO which was serialized with the\n  assistance of Hateoas annotations when being nested, with a\n  cut-down version called NestedOwnerDTO, to be used by all\n  DTOs that have reference a nested OwnerDTO, eliminating the\n  need of hateoas filters.\n- Add non-null and non-empty field restrictions\n  (required, minLength) to ActivationKeyDTO and\n  existing ContentOverrideDTO and StatusDTO specs\n  for validation.\n- Introduce DTOValidator utility class to be used on Resource\n  endpoints for performing validation that previously happened\n  on DTO setters/constructors."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTU3Njgy", "url": "https://github.com/candlepin/candlepin/pull/2630#pullrequestreview-367957682", "createdAt": "2020-03-03T13:01:45Z", "commit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzowMTo0NVrOFxE0ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzowMTo0NVrOFxE0ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwMzQ5Mw==", "bodyText": "Just an idea. We could add pattern: \"^[a-zA-Z0-9_-]+$\" so that we don't have to validate the name manually.", "url": "https://github.com/candlepin/candlepin/pull/2630#discussion_r387003493", "createdAt": "2020-03-03T13:01:45Z", "author": {"login": "Januson"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -284,6 +284,86 @@ components:\n         href:\n           type: string\n \n+    ActivationKeyDTO:\n+      description: A token that allows registration without username/password and sets subscription and content related properties at registration.\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+            name:\n+              type: string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTkzODY2", "url": "https://github.com/candlepin/candlepin/pull/2630#pullrequestreview-367993866", "createdAt": "2020-03-03T13:52:41Z", "commit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo1Mjo0MVrOFxGjJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo1Mjo0MVrOFxGjJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzMTg0NQ==", "bodyText": "I assume this is the replacement for owner + hateoas filtering?", "url": "https://github.com/candlepin/candlepin/pull/2630#discussion_r387031845", "createdAt": "2020-03-03T13:52:41Z", "author": {"login": "Ceiu"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -284,6 +284,86 @@ components:\n         href:\n           type: string\n \n+    ActivationKeyDTO:\n+      description: A token that allows registration without username/password and sets subscription and content related properties at registration.\n+      allOf:\n+        - $ref: '#/components/schemas/TimestampedEntity'\n+        - type: object\n+          properties:\n+            id:\n+              type: string\n+            name:\n+              type: string\n+            description:\n+              type: string\n+            owner:\n+              $ref: '#/components/schemas/NestedOwnerDTO'\n+            releaseVer:\n+              $ref: '#/components/schemas/ReleaseVerDTO'\n+            serviceLevel:\n+              type: string\n+            usage:\n+              type: string\n+            role:\n+              type: string\n+            addOns:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+            autoAttach:\n+              type: boolean\n+            pools:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: '#/components/schemas/ActivationKeyPoolDTO'\n+            products:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: '#/components/schemas/ActivationKeyProductDTO'\n+            contentOverrides:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+\n+    ActivationKeyProductDTO:\n+      required:\n+        - productId\n+      properties:\n+        productId:\n+          type: string\n+          minLength: 1\n+\n+    ActivationKeyPoolDTO:\n+      required:\n+        - poolId\n+      properties:\n+        poolId:\n+          type: string\n+          minLength: 1\n+        quantity:\n+          type: integer\n+          format: int64\n+\n+    ReleaseVerDTO:\n+      properties:\n+        releaseVer:\n+          type: string\n+\n+    NestedOwnerDTO:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTk2MTAy", "url": "https://github.com/candlepin/candlepin/pull/2630#pullrequestreview-367996102", "createdAt": "2020-03-03T13:55:33Z", "commit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo1NTozM1rOFxGp5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDoxNjozMVrOFxHeDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzMzU3Mw==", "bodyText": "We should be passing these through and letting the model translator deal with this if we're going to have a translator for it.", "url": "https://github.com/candlepin/candlepin/pull/2630#discussion_r387033573", "createdAt": "2020-03-03T13:55:33Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ActivationKeyTranslator.java", "diffHunk": "@@ -101,27 +124,37 @@ public ActivationKeyDTO populate(ModelTranslator modelTranslator,\n         }\n         dest.setAddOns(addOns);\n \n-        // Process nested DTO objects if we have a model translator to use to the translation...\n-        if (modelTranslator != null) {\n-            dest.setOwner(modelTranslator.translate(source.getOwner(), OwnerDTO.class));\n+        Owner owner = source.getOwner();\n+        if (source.getOwner() != null) {\n+            NestedOwnerDTO ownerDTO = new NestedOwnerDTO()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzNDc3OQ==", "bodyText": "This can fit on the previous line", "url": "https://github.com/candlepin/candlepin/pull/2630#discussion_r387034779", "createdAt": "2020-03-03T13:57:26Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/dto/api/v1/ActivationKeyTranslator.java", "diffHunk": "@@ -83,16 +98,24 @@ public ActivationKeyDTO populate(ModelTranslator modelTranslator,\n                     productIds.add(prod.getId());\n                 }\n             }\n-\n-            dest.setProductIds(productIds);\n+            Set<ActivationKeyProductDTO> productIdObjects = productIds.stream().map(productId ->  {\n+                ActivationKeyProductDTO newProduct =\n+                    new ActivationKeyProductDTO();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0MDE2Mg==", "bodyText": "Indentation", "url": "https://github.com/candlepin/candlepin/pull/2630#discussion_r387040162", "createdAt": "2020-03-03T14:06:07Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/jackson/ReleaseVersionWrapDeserializer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.jackson;\n+\n+import org.candlepin.common.exceptions.CandlepinJsonProcessingException;\n+import org.candlepin.dto.api.v1.ReleaseVerDTO;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.TreeNode;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+\n+/**\n+ * Handles the deserialization of the \"releaseVer\" field by wrapping it in a {@link ReleaseVerDTO} object,\n+ * by handling both of the following formats: <pre> {@code \"releaseVer\":\"value\" } </pre> and\n+ * <pre> {@code \"releaseVer\":{\"releaseVer \":\"value\"} } </pre>.\n+ */\n+public class ReleaseVersionWrapDeserializer extends JsonDeserializer<ReleaseVerDTO> {\n+\n+    private static Logger log = LoggerFactory.getLogger(ReleaseVersionWrapDeserializer.class);\n+\n+    private static String fieldName = \"releaseVer\";\n+\n+    @Override\n+    public ReleaseVerDTO deserialize(JsonParser parser, DeserializationContext context)\n+        throws IOException {\n+\n+        TreeNode node = parser.readValueAsTree();\n+\n+        if (node.isValueNode()) {\n+            log.debug(\"Processing {} as a value node.\", fieldName);\n+\n+            return parseValueNode(node);\n+        }\n+        else if (node.isObject()) {\n+            log.debug(\"Processing {} as a containing object node.\", fieldName);\n+\n+            TreeNode valueNode = node.path(fieldName);\n+            if (valueNode.isMissingNode()) {\n+                throw new CandlepinJsonProcessingException(\n+                        \"The field \" + fieldName + \" is missing from: \" + node.asToken(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NjAyNw==", "bodyText": "I'm mostly alright with the microoptimization here around the avoidance of the implicit array creation, however, I feel these should be structured with code minimization in mind -- especially since we're offloading the work to a worker method to begin with.\nAnyway, since we have a private method which validates a collection, and the single-param version does nothing more than unpack the collection from its supplier, it feels like the cleanest way to do all of this is to declare the single-param version as the base, and then have the various variadic overloads call it with each supplier. For example:\n    public void validateCollectionElementsNotNull(Supplier<? extends Collection<?>> getter) {\n        Collection<?> collection = getter.get();\n        if (collection == null || collection.stream().anyMatch(Objects::isNull)) {\n            throw new IllegalArgumentException(\"collection contains null elements\");\n        }\n    }\n\n    public void validateCollectionElementsNotNull(Supplier<? extends Collection<?>> getter1,\n        Supplier<? extends Collection<?>> getter2) {\n\n        this.validateCollectionElementsNonNull(getter1);\n        this.validateCollectionElementsNonNull(getter2);\n    }\n\n    // and so on", "url": "https://github.com/candlepin/candlepin/pull/2630#discussion_r387046027", "createdAt": "2020-03-03T14:15:13Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/validation/DTOValidator.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.resource.validation;\n+\n+import com.google.inject.Inject;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import javax.validation.Validator;\n+import javax.validation.ValidatorFactory;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Size;\n+\n+\n+/**\n+ * Provides utility methods that perform various types of validations on DTO objects.\n+ * Recommended usage: Use as early as possible in PUT/POST Resource endpoint methods to validate incoming\n+ * DTO objects.\n+ */\n+public class DTOValidator {\n+\n+    private Validator validator;\n+\n+    @Inject\n+    public DTOValidator(ValidatorFactory validatorFactory) {\n+        this.validator = validatorFactory.getValidator();\n+    }\n+\n+    /**\n+     * Performs validation of the DTO's fields (and their fields, thus validating the whole DTO tree) based\n+     * on the {@link javax.validation.constraints} annotations set on the them (such as {@link NotNull} and\n+     *  {@link Size}).\n+     *\n+     * @param dto the DTO object to validate\n+     * @throws ConstraintViolationException when a constraint validation has failed\n+     */\n+    public void validateConstraints(Object dto) {\n+        Set<ConstraintViolation<Object>> violations = validator.validate(dto);\n+        if (!violations.isEmpty()) {\n+            throw new ConstraintViolationException(violations);\n+        }\n+        this.validator.validate(dto);\n+    }\n+\n+    /**\n+     * Accepts a variable amount of method references to getters that return Collections of elements, and\n+     * validates that none of the elements contained in them are null. When at least one element of any of\n+     * the Collections is null, an exception is thrown.\n+     *\n+     * If the collection returned by the getter itself is null, no exception is thrown (null collection\n+     * is considered valid).\n+     *\n+     * Usage example:\n+     * <pre>\n+     * {@code\n+     * validator.validateCollectionElementsNotNull(dto::getProductIds, dto::getEntitlements);\n+     * }\n+     * </pre>\n+     *\n+     * @param getters a variable amount of method references to getters that return Collections of items\n+     * @throws IllegalArgumentException when any of the collections returned from the specified getters\n+     * contains at least one null element\n+     */\n+    @SafeVarargs\n+    public final void validateCollectionElementsNotNull(Supplier<? extends Collection<?>> getter1,\n+        Supplier<? extends Collection<?>> getter2, Supplier<? extends Collection<?>> getter3,\n+        Supplier<? extends Collection<?>>... getters) {\n+\n+        validateCollectionElementsNotNull(getter1, getter2, getter3);\n+\n+        for (Supplier<? extends Collection<?>> getter : getters) {\n+            Collection<?> collection = getter.get();\n+            if (isCollectionInvalid(collection)) {\n+                throw new IllegalArgumentException(\"collection contains null elements\");\n+            }\n+        }\n+    }\n+\n+    /*\n+     * ======================================================================================================\n+     * The following methods are overloaded versions of validateCollectionElementsNotNull for one, two and\n+     * three getters respectively, as a performance optimization to avoid the implicit creation of an array\n+     * object that happens during the vararg method call. There are currently no DTOs that contain more than\n+     * three collections that require null element validation, so this optimisation would cover 100% of cases\n+     * for now, while allowing us to validate more than 3 collections at a time in the future.\n+     * ======================================================================================================\n+     */\n+\n+    /**\n+     * Works the same as {@link #validateCollectionElementsNotNull(Supplier, Supplier, Supplier, Supplier...)}\n+     */\n+    public void validateCollectionElementsNotNull(Supplier<? extends Collection<?>> getter) {\n+        Collection<?> collection = getter.get();\n+        if (isCollectionInvalid(collection)) {\n+            throw new IllegalArgumentException(\"collection contains null elements\");\n+        }\n+    }\n+\n+    /**\n+     * Works the same as {@link #validateCollectionElementsNotNull(Supplier, Supplier, Supplier, Supplier...)}\n+     */\n+    public void validateCollectionElementsNotNull(Supplier<? extends Collection<?>> getter1,\n+        Supplier<? extends Collection<?>> getter2) {\n+        Collection<?> collection1 = getter1.get();\n+        Collection<?> collection2 = getter2.get();\n+        if (isCollectionInvalid(collection1) ||\n+            isCollectionInvalid(collection2)) {\n+            throw new IllegalArgumentException(\"collection contains null elements\");\n+        }\n+    }\n+\n+    /**\n+     * Works the same as {@link #validateCollectionElementsNotNull(Supplier, Supplier, Supplier, Supplier...)}\n+     */\n+    public void validateCollectionElementsNotNull(Supplier<? extends Collection<?>> getter1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NjkyNQ==", "bodyText": "Same deal here: use this version as the base, and have the extended versions just call into it with each arg.", "url": "https://github.com/candlepin/candlepin/pull/2630#discussion_r387046925", "createdAt": "2020-03-03T14:16:31Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/validation/DTOValidator.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.resource.validation;\n+\n+import com.google.inject.Inject;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import javax.validation.Validator;\n+import javax.validation.ValidatorFactory;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Size;\n+\n+\n+/**\n+ * Provides utility methods that perform various types of validations on DTO objects.\n+ * Recommended usage: Use as early as possible in PUT/POST Resource endpoint methods to validate incoming\n+ * DTO objects.\n+ */\n+public class DTOValidator {\n+\n+    private Validator validator;\n+\n+    @Inject\n+    public DTOValidator(ValidatorFactory validatorFactory) {\n+        this.validator = validatorFactory.getValidator();\n+    }\n+\n+    /**\n+     * Performs validation of the DTO's fields (and their fields, thus validating the whole DTO tree) based\n+     * on the {@link javax.validation.constraints} annotations set on the them (such as {@link NotNull} and\n+     *  {@link Size}).\n+     *\n+     * @param dto the DTO object to validate\n+     * @throws ConstraintViolationException when a constraint validation has failed\n+     */\n+    public void validateConstraints(Object dto) {\n+        Set<ConstraintViolation<Object>> violations = validator.validate(dto);\n+        if (!violations.isEmpty()) {\n+            throw new ConstraintViolationException(violations);\n+        }\n+        this.validator.validate(dto);\n+    }\n+\n+    /**\n+     * Accepts a variable amount of method references to getters that return Collections of elements, and\n+     * validates that none of the elements contained in them are null. When at least one element of any of\n+     * the Collections is null, an exception is thrown.\n+     *\n+     * If the collection returned by the getter itself is null, no exception is thrown (null collection\n+     * is considered valid).\n+     *\n+     * Usage example:\n+     * <pre>\n+     * {@code\n+     * validator.validateCollectionElementsNotNull(dto::getProductIds, dto::getEntitlements);\n+     * }\n+     * </pre>\n+     *\n+     * @param getters a variable amount of method references to getters that return Collections of items\n+     * @throws IllegalArgumentException when any of the collections returned from the specified getters\n+     * contains at least one null element\n+     */\n+    @SafeVarargs\n+    public final void validateCollectionElementsNotNull(Supplier<? extends Collection<?>> getter1,\n+        Supplier<? extends Collection<?>> getter2, Supplier<? extends Collection<?>> getter3,\n+        Supplier<? extends Collection<?>>... getters) {\n+\n+        validateCollectionElementsNotNull(getter1, getter2, getter3);\n+\n+        for (Supplier<? extends Collection<?>> getter : getters) {\n+            Collection<?> collection = getter.get();\n+            if (isCollectionInvalid(collection)) {\n+                throw new IllegalArgumentException(\"collection contains null elements\");\n+            }\n+        }\n+    }\n+\n+    /*\n+     * ======================================================================================================\n+     * The following methods are overloaded versions of validateCollectionElementsNotNull for one, two and\n+     * three getters respectively, as a performance optimization to avoid the implicit creation of an array\n+     * object that happens during the vararg method call. There are currently no DTOs that contain more than\n+     * three collections that require null element validation, so this optimisation would cover 100% of cases\n+     * for now, while allowing us to validate more than 3 collections at a time in the future.\n+     * ======================================================================================================\n+     */\n+\n+    /**\n+     * Works the same as {@link #validateCollectionElementsNotNull(Supplier, Supplier, Supplier, Supplier...)}\n+     */\n+    public void validateCollectionElementsNotNull(Supplier<? extends Collection<?>> getter) {\n+        Collection<?> collection = getter.get();\n+        if (isCollectionInvalid(collection)) {\n+            throw new IllegalArgumentException(\"collection contains null elements\");\n+        }\n+    }\n+\n+    /**\n+     * Works the same as {@link #validateCollectionElementsNotNull(Supplier, Supplier, Supplier, Supplier...)}\n+     */\n+    public void validateCollectionElementsNotNull(Supplier<? extends Collection<?>> getter1,\n+        Supplier<? extends Collection<?>> getter2) {\n+        Collection<?> collection1 = getter1.get();\n+        Collection<?> collection2 = getter2.get();\n+        if (isCollectionInvalid(collection1) ||\n+            isCollectionInvalid(collection2)) {\n+            throw new IllegalArgumentException(\"collection contains null elements\");\n+        }\n+    }\n+\n+    /**\n+     * Works the same as {@link #validateCollectionElementsNotNull(Supplier, Supplier, Supplier, Supplier...)}\n+     */\n+    public void validateCollectionElementsNotNull(Supplier<? extends Collection<?>> getter1,\n+        Supplier<? extends Collection<?>> getter2, Supplier<? extends Collection<?>> getter3) {\n+        Collection<?> collection1 = getter1.get();\n+        Collection<?> collection2 = getter2.get();\n+        Collection<?> collection3 = getter3.get();\n+        if (isCollectionInvalid(collection1) ||\n+            isCollectionInvalid(collection2) ||\n+            isCollectionInvalid(collection3)) {\n+            throw new IllegalArgumentException(\"collection contains null elements\");\n+        }\n+    }\n+\n+    private boolean isCollectionInvalid(Collection<?> collection) {\n+        return collection != null && collection.stream().anyMatch(Objects::isNull);\n+    }\n+\n+\n+\n+    /**\n+     * Accepts a variable amount of method references to getters that return Maps of elements, and\n+     * validates that none of the elements (keys and values) contained in them are null. When at least one\n+     * key or value of any of the Maps is null, an exception is thrown.\n+     *\n+     * If the map returned by the getter itself is null, no exception is thrown (null map is considered\n+     * valid).\n+     *\n+     * Usage example:\n+     * <pre>\n+     * {@code\n+     * validator.validateMapElementsNotNull(dto::getAttributes, dto::getProductAttributes);\n+     * }\n+     * </pre>\n+     *\n+     * @param getters a variable amount of method references to getters that return Maps of items\n+     * @throws IllegalArgumentException when any of the maps returned from the specified getters contains at\n+     * least one null key or value\n+     */\n+    @SafeVarargs\n+    public final void validateMapElementsNotNull(Supplier<? extends Map<?, ?>> getter1,\n+        Supplier<? extends Map<?, ?>> getter2, Supplier<? extends Map<?, ?>> getter3,\n+        Supplier<? extends Map<?, ?>>... getters) {\n+\n+        validateMapElementsNotNull(getter1, getter2, getter3);\n+\n+        for (Supplier<? extends Map<?, ?>> getter : getters) {\n+            Map<?, ?> map = getter.get();\n+            if (isMapInvalid(map)) {\n+                throw new IllegalArgumentException(\"map contains null elements\");\n+            }\n+        }\n+    }\n+\n+    /*\n+     * ======================================================================================================\n+     * The following methods are overloaded versions of validateMapElementsNotNull for one, two and\n+     * three getters respectively, as a performance optimization to avoid the implicit creation of an array\n+     * object that happens during the vararg method call. There are currently no DTOs that contain more than\n+     * three maps that require null element validation, so this optimisation would cover 100% of cases\n+     * for now, while allowing us to validate more than 3 maps at a time in the future.\n+     * ======================================================================================================\n+     */\n+\n+    /**\n+     * Works the same as {@link #validateMapElementsNotNull(Supplier, Supplier, Supplier, Supplier...)}\n+     */\n+    public void validateMapElementsNotNull(Supplier<? extends Map<?, ?>> getter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d"}, "originalPosition": 198}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDM2Mzg5", "url": "https://github.com/candlepin/candlepin/pull/2630#pullrequestreview-368036389", "createdAt": "2020-03-03T14:43:40Z", "commit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo0Mzo0MFrOFxIm-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDo1MToyOFrOFxI-Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2NTU5NQ==", "bodyText": "Map has methods map.containsKey(null) and map.containsValue(null). We could use those.", "url": "https://github.com/candlepin/candlepin/pull/2630#discussion_r387065595", "createdAt": "2020-03-03T14:43:40Z", "author": {"login": "Januson"}, "path": "server/src/main/java/org/candlepin/resource/validation/DTOValidator.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.resource.validation;\n+\n+import com.google.inject.Inject;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import javax.validation.Validator;\n+import javax.validation.ValidatorFactory;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Size;\n+\n+\n+/**\n+ * Provides utility methods that perform various types of validations on DTO objects.\n+ * Recommended usage: Use as early as possible in PUT/POST Resource endpoint methods to validate incoming\n+ * DTO objects.\n+ */\n+public class DTOValidator {\n+\n+    private Validator validator;\n+\n+    @Inject\n+    public DTOValidator(ValidatorFactory validatorFactory) {\n+        this.validator = validatorFactory.getValidator();\n+    }\n+\n+    /**\n+     * Performs validation of the DTO's fields (and their fields, thus validating the whole DTO tree) based\n+     * on the {@link javax.validation.constraints} annotations set on the them (such as {@link NotNull} and\n+     *  {@link Size}).\n+     *\n+     * @param dto the DTO object to validate\n+     * @throws ConstraintViolationException when a constraint validation has failed\n+     */\n+    public void validateConstraints(Object dto) {\n+        Set<ConstraintViolation<Object>> violations = validator.validate(dto);\n+        if (!violations.isEmpty()) {\n+            throw new ConstraintViolationException(violations);\n+        }\n+        this.validator.validate(dto);\n+    }\n+\n+    /**\n+     * Accepts a variable amount of method references to getters that return Collections of elements, and\n+     * validates that none of the elements contained in them are null. When at least one element of any of\n+     * the Collections is null, an exception is thrown.\n+     *\n+     * If the collection returned by the getter itself is null, no exception is thrown (null collection\n+     * is considered valid).\n+     *\n+     * Usage example:\n+     * <pre>\n+     * {@code\n+     * validator.validateCollectionElementsNotNull(dto::getProductIds, dto::getEntitlements);\n+     * }\n+     * </pre>\n+     *\n+     * @param getters a variable amount of method references to getters that return Collections of items\n+     * @throws IllegalArgumentException when any of the collections returned from the specified getters\n+     * contains at least one null element\n+     */\n+    @SafeVarargs\n+    public final void validateCollectionElementsNotNull(Supplier<? extends Collection<?>> getter1,\n+        Supplier<? extends Collection<?>> getter2, Supplier<? extends Collection<?>> getter3,\n+        Supplier<? extends Collection<?>>... getters) {\n+\n+        validateCollectionElementsNotNull(getter1, getter2, getter3);\n+\n+        for (Supplier<? extends Collection<?>> getter : getters) {\n+            Collection<?> collection = getter.get();\n+            if (isCollectionInvalid(collection)) {\n+                throw new IllegalArgumentException(\"collection contains null elements\");\n+            }\n+        }\n+    }\n+\n+    /*\n+     * ======================================================================================================\n+     * The following methods are overloaded versions of validateCollectionElementsNotNull for one, two and\n+     * three getters respectively, as a performance optimization to avoid the implicit creation of an array\n+     * object that happens during the vararg method call. There are currently no DTOs that contain more than\n+     * three collections that require null element validation, so this optimisation would cover 100% of cases\n+     * for now, while allowing us to validate more than 3 collections at a time in the future.\n+     * ======================================================================================================\n+     */\n+\n+    /**\n+     * Works the same as {@link #validateCollectionElementsNotNull(Supplier, Supplier, Supplier, Supplier...)}\n+     */\n+    public void validateCollectionElementsNotNull(Supplier<? extends Collection<?>> getter) {\n+        Collection<?> collection = getter.get();\n+        if (isCollectionInvalid(collection)) {\n+            throw new IllegalArgumentException(\"collection contains null elements\");\n+        }\n+    }\n+\n+    /**\n+     * Works the same as {@link #validateCollectionElementsNotNull(Supplier, Supplier, Supplier, Supplier...)}\n+     */\n+    public void validateCollectionElementsNotNull(Supplier<? extends Collection<?>> getter1,\n+        Supplier<? extends Collection<?>> getter2) {\n+        Collection<?> collection1 = getter1.get();\n+        Collection<?> collection2 = getter2.get();\n+        if (isCollectionInvalid(collection1) ||\n+            isCollectionInvalid(collection2)) {\n+            throw new IllegalArgumentException(\"collection contains null elements\");\n+        }\n+    }\n+\n+    /**\n+     * Works the same as {@link #validateCollectionElementsNotNull(Supplier, Supplier, Supplier, Supplier...)}\n+     */\n+    public void validateCollectionElementsNotNull(Supplier<? extends Collection<?>> getter1,\n+        Supplier<? extends Collection<?>> getter2, Supplier<? extends Collection<?>> getter3) {\n+        Collection<?> collection1 = getter1.get();\n+        Collection<?> collection2 = getter2.get();\n+        Collection<?> collection3 = getter3.get();\n+        if (isCollectionInvalid(collection1) ||\n+            isCollectionInvalid(collection2) ||\n+            isCollectionInvalid(collection3)) {\n+            throw new IllegalArgumentException(\"collection contains null elements\");\n+        }\n+    }\n+\n+    private boolean isCollectionInvalid(Collection<?> collection) {\n+        return collection != null && collection.stream().anyMatch(Objects::isNull);\n+    }\n+\n+\n+\n+    /**\n+     * Accepts a variable amount of method references to getters that return Maps of elements, and\n+     * validates that none of the elements (keys and values) contained in them are null. When at least one\n+     * key or value of any of the Maps is null, an exception is thrown.\n+     *\n+     * If the map returned by the getter itself is null, no exception is thrown (null map is considered\n+     * valid).\n+     *\n+     * Usage example:\n+     * <pre>\n+     * {@code\n+     * validator.validateMapElementsNotNull(dto::getAttributes, dto::getProductAttributes);\n+     * }\n+     * </pre>\n+     *\n+     * @param getters a variable amount of method references to getters that return Maps of items\n+     * @throws IllegalArgumentException when any of the maps returned from the specified getters contains at\n+     * least one null key or value\n+     */\n+    @SafeVarargs\n+    public final void validateMapElementsNotNull(Supplier<? extends Map<?, ?>> getter1,\n+        Supplier<? extends Map<?, ?>> getter2, Supplier<? extends Map<?, ?>> getter3,\n+        Supplier<? extends Map<?, ?>>... getters) {\n+\n+        validateMapElementsNotNull(getter1, getter2, getter3);\n+\n+        for (Supplier<? extends Map<?, ?>> getter : getters) {\n+            Map<?, ?> map = getter.get();\n+            if (isMapInvalid(map)) {\n+                throw new IllegalArgumentException(\"map contains null elements\");\n+            }\n+        }\n+    }\n+\n+    /*\n+     * ======================================================================================================\n+     * The following methods are overloaded versions of validateMapElementsNotNull for one, two and\n+     * three getters respectively, as a performance optimization to avoid the implicit creation of an array\n+     * object that happens during the vararg method call. There are currently no DTOs that contain more than\n+     * three maps that require null element validation, so this optimisation would cover 100% of cases\n+     * for now, while allowing us to validate more than 3 maps at a time in the future.\n+     * ======================================================================================================\n+     */\n+\n+    /**\n+     * Works the same as {@link #validateMapElementsNotNull(Supplier, Supplier, Supplier, Supplier...)}\n+     */\n+    public void validateMapElementsNotNull(Supplier<? extends Map<?, ?>> getter) {\n+        Map<?, ?> map = getter.get();\n+        if (isMapInvalid(map)) {\n+            throw new IllegalArgumentException(\"map contains null elements\");\n+        }\n+    }\n+\n+    /**\n+     * Works the same as {@link #validateMapElementsNotNull(Supplier, Supplier, Supplier, Supplier...)}\n+     */\n+    public void validateMapElementsNotNull(Supplier<? extends Map<?, ?>> getter1,\n+        Supplier<? extends Map<?, ?>> getter2) {\n+        Map<?, ?> map1 = getter1.get();\n+        Map<?, ?> map2 = getter2.get();\n+        if (isMapInvalid(map1) ||\n+            isMapInvalid(map2)) {\n+            throw new IllegalArgumentException(\"map contains null elements\");\n+        }\n+    }\n+\n+    /**\n+     * Works the same as {@link #validateMapElementsNotNull(Supplier, Supplier, Supplier, Supplier...)}\n+     */\n+    public void validateMapElementsNotNull(Supplier<? extends Map<?, ?>> getter1,\n+        Supplier<? extends Map<?, ?>> getter2, Supplier<? extends Map<?, ?>> getter3) {\n+        Map<?, ?> map1 = getter1.get();\n+        Map<?, ?> map2 = getter2.get();\n+        Map<?, ?> map3 = getter3.get();\n+        if (isMapInvalid(map1) ||\n+            isMapInvalid(map2) ||\n+            isMapInvalid(map3)) {\n+            throw new IllegalArgumentException(\"map contains null elements\");\n+        }\n+    }\n+\n+    private boolean isMapInvalid(Map<?, ?> map) {\n+        return map != null &&\n+            (map.values().stream().anyMatch(Objects::isNull) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3MTU2Mw==", "bodyText": "We could use Validation.buildDefaultValidatorFactory() instead of extending the whole DB fixture.", "url": "https://github.com/candlepin/candlepin/pull/2630#discussion_r387071563", "createdAt": "2020-03-03T14:51:28Z", "author": {"login": "Januson"}, "path": "server/src/test/java/org/candlepin/resource/validation/DTOValidatorTest.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package org.candlepin.resource.validation;\n+\n+import org.candlepin.test.DatabaseTestFixture;\n+\n+import com.google.inject.Inject;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import java.util.Queue;\n+import java.util.Set;\n+import java.util.Stack;\n+import java.util.WeakHashMap;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.validation.ConstraintViolationException;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Size;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\n+/**\n+ * Test suite for the DTOValidator class\n+ */\n+public class DTOValidatorTest extends DatabaseTestFixture {\n+\n+    @Inject DTOValidator validator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f125ada3c3cbeeb205cc81e634be4d5bdaf234d", "author": {"user": {"login": "nikosmoum", "name": "Nikos Moumoulidis"}}, "url": "https://github.com/candlepin/candlepin/commit/7f125ada3c3cbeeb205cc81e634be4d5bdaf234d", "committedDate": "2020-03-03T09:02:42Z", "message": "ENT-1846: Port ActivationKeyDTO to openapi spec\n\n- Replace use of current ReleaseVersionWrapSerializer and\n  ReleaseVersionWrapDeserializer on ActivationKeyDTO\n  with a new ReleaseVerDTO and ReleaseVersionWrapDeserializer.\n- Replace use of current ProductWrapSerializer and\n  ProductWrapDeserializer on ActivationKeyDTO with a new\n  ActivationKeyProductDTO.\n- Replace use of current OwnerDTO which was serialized with the\n  assistance of Hateoas annotations when being nested, with a\n  cut-down version called NestedOwnerDTO, to be used by all\n  DTOs that have reference a nested OwnerDTO, eliminating the\n  need of hateoas filters.\n- Add non-null and non-empty field restrictions\n  (required, minLength) to ActivationKeyDTO and\n  existing ContentOverrideDTO and StatusDTO specs\n  for validation.\n- Introduce DTOValidator utility class to be used on Resource\n  endpoints for performing validation that previously happened\n  on DTO setters/constructors."}, "afterCommit": {"oid": "23f347749fdfb763c1a2d7709fca03e8836cdf42", "author": {"user": {"login": "nikosmoum", "name": "Nikos Moumoulidis"}}, "url": "https://github.com/candlepin/candlepin/commit/23f347749fdfb763c1a2d7709fca03e8836cdf42", "committedDate": "2020-03-04T10:42:28Z", "message": "ENT-1846: Port ActivationKeyDTO to openapi spec\n\n- Replace use of current ReleaseVersionWrapSerializer and\n  ReleaseVersionWrapDeserializer on ActivationKeyDTO\n  with a new ReleaseVerDTO and ReleaseVersionWrapDeserializer.\n- Replace use of current ProductWrapSerializer and\n  ProductWrapDeserializer on ActivationKeyDTO with a new\n  ActivationKeyProductDTO.\n- Replace use of current OwnerDTO which was serialized with the\n  assistance of Hateoas annotations when being nested, with a\n  cut-down version called NestedOwnerDTO, to be used by all\n  DTOs that have reference a nested OwnerDTO, eliminating the\n  need of hateoas filters.\n- Add non-null and non-empty field restrictions\n  (required, minLength) to ActivationKeyDTO and\n  existing ContentOverrideDTO and StatusDTO specs\n  for validation.\n- Introduce DTOValidator utility class to be used on Resource\n  endpoints for performing validation that previously happened\n  on DTO setters/constructors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3841b7550dc5cf38dc1c846ba3dc79ecc2429f5d", "author": {"user": {"login": "nikosmoum", "name": "Nikos Moumoulidis"}}, "url": "https://github.com/candlepin/candlepin/commit/3841b7550dc5cf38dc1c846ba3dc79ecc2429f5d", "committedDate": "2020-03-04T10:44:54Z", "message": "ENT-1846: Port ActivationKeyDTO to openapi spec\n\n- Replace use of current ReleaseVersionWrapSerializer and\n  ReleaseVersionWrapDeserializer on ActivationKeyDTO\n  with a new ReleaseVerDTO and ReleaseVersionWrapDeserializer.\n- Replace use of current ProductWrapSerializer and\n  ProductWrapDeserializer on ActivationKeyDTO with a new\n  ActivationKeyProductDTO.\n- Replace use of current OwnerDTO which was serialized with the\n  assistance of Hateoas annotations when being nested, with a\n  cut-down version called NestedOwnerDTO, to be used by all\n  DTOs that have reference a nested OwnerDTO, eliminating the\n  need of hateoas filters.\n- Add non-null and non-empty field restrictions\n  (required, minLength) to ActivationKeyDTO and\n  existing ContentOverrideDTO and StatusDTO specs\n  for validation.\n- Introduce DTOValidator utility class to be used on Resource\n  endpoints for performing validation that previously happened\n  on DTO setters/constructors."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23f347749fdfb763c1a2d7709fca03e8836cdf42", "author": {"user": {"login": "nikosmoum", "name": "Nikos Moumoulidis"}}, "url": "https://github.com/candlepin/candlepin/commit/23f347749fdfb763c1a2d7709fca03e8836cdf42", "committedDate": "2020-03-04T10:42:28Z", "message": "ENT-1846: Port ActivationKeyDTO to openapi spec\n\n- Replace use of current ReleaseVersionWrapSerializer and\n  ReleaseVersionWrapDeserializer on ActivationKeyDTO\n  with a new ReleaseVerDTO and ReleaseVersionWrapDeserializer.\n- Replace use of current ProductWrapSerializer and\n  ProductWrapDeserializer on ActivationKeyDTO with a new\n  ActivationKeyProductDTO.\n- Replace use of current OwnerDTO which was serialized with the\n  assistance of Hateoas annotations when being nested, with a\n  cut-down version called NestedOwnerDTO, to be used by all\n  DTOs that have reference a nested OwnerDTO, eliminating the\n  need of hateoas filters.\n- Add non-null and non-empty field restrictions\n  (required, minLength) to ActivationKeyDTO and\n  existing ContentOverrideDTO and StatusDTO specs\n  for validation.\n- Introduce DTOValidator utility class to be used on Resource\n  endpoints for performing validation that previously happened\n  on DTO setters/constructors."}, "afterCommit": {"oid": "3841b7550dc5cf38dc1c846ba3dc79ecc2429f5d", "author": {"user": {"login": "nikosmoum", "name": "Nikos Moumoulidis"}}, "url": "https://github.com/candlepin/candlepin/commit/3841b7550dc5cf38dc1c846ba3dc79ecc2429f5d", "committedDate": "2020-03-04T10:44:54Z", "message": "ENT-1846: Port ActivationKeyDTO to openapi spec\n\n- Replace use of current ReleaseVersionWrapSerializer and\n  ReleaseVersionWrapDeserializer on ActivationKeyDTO\n  with a new ReleaseVerDTO and ReleaseVersionWrapDeserializer.\n- Replace use of current ProductWrapSerializer and\n  ProductWrapDeserializer on ActivationKeyDTO with a new\n  ActivationKeyProductDTO.\n- Replace use of current OwnerDTO which was serialized with the\n  assistance of Hateoas annotations when being nested, with a\n  cut-down version called NestedOwnerDTO, to be used by all\n  DTOs that have reference a nested OwnerDTO, eliminating the\n  need of hateoas filters.\n- Add non-null and non-empty field restrictions\n  (required, minLength) to ActivationKeyDTO and\n  existing ContentOverrideDTO and StatusDTO specs\n  for validation.\n- Introduce DTOValidator utility class to be used on Resource\n  endpoints for performing validation that previously happened\n  on DTO setters/constructors."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4ODM4Njgw", "url": "https://github.com/candlepin/candlepin/pull/2630#pullrequestreview-368838680", "createdAt": "2020-03-04T14:47:43Z", "commit": {"oid": "3841b7550dc5cf38dc1c846ba3dc79ecc2429f5d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MzM4NjYw", "url": "https://github.com/candlepin/candlepin/pull/2630#pullrequestreview-369338660", "createdAt": "2020-03-05T07:16:35Z", "commit": {"oid": "3841b7550dc5cf38dc1c846ba3dc79ecc2429f5d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2526, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}