{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDM1NTUz", "number": 2724, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDowOToxOFrOEECVMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjozNTozMFrOEGVGsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjY3OTU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/async/JobManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDowOToxOFrOGhaYcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDowOToxOFrOGhaYcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4ODQzNQ==", "bodyText": "Need to revert the visibility change or the transactional tag is useless here.", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r437688435", "createdAt": "2020-06-09T20:09:18Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1489,8 +1474,30 @@ else if (jobState != JobState.QUEUED) {\n      * @return\n      *  the updated AsyncJobStatus entity\n      */\n+    private AsyncJobStatus updateJobStatus(AsyncJobStatus status, JobState state, String result)\n+        throws JobStateManagementException {\n+\n+        status.setJobResult(result);\n+        return this.updateJobStatus(status, state);\n+    }\n+\n+    /**\n+     * Updates the state of the provided job status\n+     *\n+     * @param status\n+     *  The AsyncJobStatus to update\n+     *\n+     * @param state\n+     *  The state to set\n+     *\n+     * @throws JobStateManagementException\n+     *  if the job state is unable to be updated due to a database failure\n+     *\n+     * @return\n+     *  the updated AsyncJobStatus entity\n+     */\n     @Transactional\n-    protected AsyncJobStatus updateJobStatus(AsyncJobStatus status, JobState state, Object result)\n+    private AsyncJobStatus updateJobStatus(AsyncJobStatus status, JobState state)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjY4NTUwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resource/ProductResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDoxMToxMlrOGhacYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDoxMToxMlrOGhacYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4OTQ0MQ==", "bodyText": "Could restore the failure state message here, perhaps.", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r437689441", "createdAt": "2020-06-09T20:11:12Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resource/ProductResource.java", "diffHunk": "@@ -312,11 +312,9 @@ public void deleteProduct(\n                 statuses.add(this.jobManager.queueJob(config));\n             }\n             catch (Exception e) {\n-                AsyncJobStatus failedStatus = new AsyncJobStatus();\n-                failedStatus.setName(RefreshPoolsJob.JOB_NAME);\n-                failedStatus.setState(AsyncJobStatus.JobState.FAILED);\n-                failedStatus.setJobResult(e.toString());\n-                statuses.add(failedStatus);\n+                statuses.add(new AsyncJobStatus()\n+                    .setName(RefreshPoolsJob.JOB_NAME)\n+                    .setState(AsyncJobStatus.JobState.FAILED));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjY5NDY3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/async/JobManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDoxNDoxMFrOGhaiWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDoxNDoxMFrOGhaiWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5MDk3MQ==", "bodyText": "This is no longer necessary", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r437690971", "createdAt": "2020-06-09T20:14:10Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -961,7 +959,7 @@ public AsyncJobStatus findJob(String jobId) {\n      * @return\n      *  a list of jobs matching the provided query arguments/filters\n      */\n-    public List<AsyncJobStatus> findJobs(AsyncJobStatusCurator.AsyncJobStatusQueryBuilder queryBuilder) {\n+    public List<? extends AsyncJobStatus> findJobs(AsyncJobStatusQueryBuilder queryBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjkxOTA3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/async/JobManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDo0MDo0NVrOGiX5Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo1ODowOVrOGlEfxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjI3OA==", "bodyText": "Since you're changing these 2 places to stop trying to persist the failed queuing of a job, there is one more place that does that which should probably change: the catch block in postJobStatusMessage().\nThis is called in 2 places:\n\nWhen queuing a job as normally\nWhen the execution of a job failed with retry=true and we're trying to re-queue it.\n\nIt should probably stop trying to persist the FAILED state, and just re-throw (it already rethrows) the exception.", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438696278", "createdAt": "2020-06-11T10:40:45Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1096,8 +1084,7 @@ public AsyncJobStatus queueJob(JobConfig config) throws JobException {\n             // If this occurs do to some other unexpected failure, we'll have some state cleanup\n             // to deal with, probably.\n \n-            this.setJobState(status, JobState.FAILED);\n-            status.setJobResult(e.toString());\n+            throw new JobException(e, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDI5NA==", "bodyText": "In both of those cases, we have a job that has already been persisted, and the failure is more likely from being unable to send an artemis message. If it is a DB error, the exception on update will be rethrown (as you noted) and that will propagate through the system and fail in the expected way.", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r440940294", "createdAt": "2020-06-16T15:25:36Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1096,8 +1084,7 @@ public AsyncJobStatus queueJob(JobConfig config) throws JobException {\n             // If this occurs do to some other unexpected failure, we'll have some state cleanup\n             // to deal with, probably.\n \n-            this.setJobState(status, JobState.FAILED);\n-            status.setJobResult(e.toString());\n+            throw new JobException(e, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjI3OA=="}, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMjM5MA==", "bodyText": "That's fine, but we still have another problem because in the first case, the state that was persisted was CREATED, and we can't move it from CREATED to FAILED (invalid transition). And if we did change that to ABORTED, then the 2nd case wouldn't work because FAILED_WITH_RETRY -> ABORTED is invalid. So maybe we should add ABORTED to the valid transitions from FAILED_WITH_RETRY? (alternatively, we could simply make CREATED -> FAILED valid, but I would prefer the other solution).", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441322390", "createdAt": "2020-06-17T06:59:20Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1096,8 +1084,7 @@ public AsyncJobStatus queueJob(JobConfig config) throws JobException {\n             // If this occurs do to some other unexpected failure, we'll have some state cleanup\n             // to deal with, probably.\n \n-            this.setJobState(status, JobState.FAILED);\n-            status.setJobResult(e.toString());\n+            throw new JobException(e, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjI3OA=="}, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNDE2Nw==", "bodyText": "Ahh, gotcha. I've added the FAILED_WITH_RETRY -> ABORTED transition, and updated the exception handler in message posting to use ABORTED.", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441524167", "createdAt": "2020-06-17T12:58:09Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1096,8 +1084,7 @@ public AsyncJobStatus queueJob(JobConfig config) throws JobException {\n             // If this occurs do to some other unexpected failure, we'll have some state cleanup\n             // to deal with, probably.\n \n-            this.setJobState(status, JobState.FAILED);\n-            status.setJobResult(e.toString());\n+            throw new JobException(e, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjI3OA=="}, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzIxNTA4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/async/tasks/ImportJob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoyNTo1MVrOGia16Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzowNjoyNVrOGicMZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NDU1Mw==", "bodyText": "Looks like this was copied from a top-level class to an internal class here. We should probably delete ImportConflictJobException.java then (no need to keep both)", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438744553", "createdAt": "2020-06-11T12:25:51Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/async/tasks/ImportJob.java", "diffHunk": "@@ -159,6 +163,40 @@ public void validate() throws JobConfigValidationException {\n         }\n     }\n \n+    /**\n+     * The equivalent of {@link ImportConflictException}, but for asynchronous imports.\n+     * It is used by transforming an {@link org.candlepin.common.exceptions.CandlepinException} to a\n+     * {@link JobExecutionException}, fit for propagating to the job management system, without keeping the\n+     * redundant fields the former has (such as requestUuid & REST return code), while retaining the useful\n+     * information (list of conflicts, display message) accessible through its toString method.\n+     */\n+    private static class ImportConflictJobException extends JobExecutionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NjY5NQ==", "bodyText": "Oops. Deleted.", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438766695", "createdAt": "2020-06-11T13:06:25Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/async/tasks/ImportJob.java", "diffHunk": "@@ -159,6 +163,40 @@ public void validate() throws JobConfigValidationException {\n         }\n     }\n \n+    /**\n+     * The equivalent of {@link ImportConflictException}, but for asynchronous imports.\n+     * It is used by transforming an {@link org.candlepin.common.exceptions.CandlepinException} to a\n+     * {@link JobExecutionException}, fit for propagating to the job management system, without keeping the\n+     * redundant fields the former has (such as requestUuid & REST return code), while retaining the useful\n+     * information (list of conflicts, display message) accessible through its toString method.\n+     */\n+    private static class ImportConflictJobException extends JobExecutionException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NDU1Mw=="}, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzIzMDg2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/AsyncJobStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjozMTowMlrOGia_9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzowNjowNVrOGicLqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NzEyNQ==", "bodyText": "Are we not able to lazy-load this field after all? (or is that not desirable any more because the constraint memory issue is handled anyway?)", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438747125", "createdAt": "2020-06-11T12:31:02Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/model/AsyncJobStatus.java", "diffHunk": "@@ -215,25 +207,29 @@ public JobDataJsonConverter() {\n     @Column(name = \"end_time\")\n     private Date endTime;\n \n-    @Column(name = \"job_data\")\n-    @Convert(converter = JobDataJsonConverter.class)\n-    private SerializedJobData jobData;\n+    @ElementCollection(fetch = FetchType.LAZY)\n+    @CollectionTable(name = \"cp_async_job_arguments\", joinColumns = @JoinColumn(name = \"job_id\"))\n+    @MapKeyColumn(name = \"name\", nullable = false)\n+    @Column(name = \"value\")\n+    private Map<String, String> arguments;\n+\n+    @Column(name = \"job_result\")\n+    private String result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NjUwNQ==", "bodyText": "Haven't gone back to check. The first method ended up causing tons of problems and not working, so I just dropped it to a standard field for the interim. I think it'll be fine since we will ever have around 10 populated instances per node at any given time outside of the remaining problem area that needs to be addressed in the bulk-fetching of jobs.", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438766505", "createdAt": "2020-06-11T13:06:05Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/AsyncJobStatus.java", "diffHunk": "@@ -215,25 +207,29 @@ public JobDataJsonConverter() {\n     @Column(name = \"end_time\")\n     private Date endTime;\n \n-    @Column(name = \"job_data\")\n-    @Convert(converter = JobDataJsonConverter.class)\n-    private SerializedJobData jobData;\n+    @ElementCollection(fetch = FetchType.LAZY)\n+    @CollectionTable(name = \"cp_async_job_arguments\", joinColumns = @JoinColumn(name = \"job_id\"))\n+    @MapKeyColumn(name = \"name\", nullable = false)\n+    @Column(name = \"value\")\n+    private Map<String, String> arguments;\n+\n+    @Column(name = \"job_result\")\n+    private String result;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NzEyNQ=="}, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzMwMTI5OnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/candlepin/async/JobManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1MTo1MVrOGibsDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1MTo1MVrOGibsDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1ODQxMw==", "bodyText": "Since this method isn't used anywhere else, should we just delete it? I can't imagine where else we'd need it", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438758413", "createdAt": "2020-06-11T12:51:51Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/async/JobManager.java", "diffHunk": "@@ -1012,25 +1010,19 @@ public AsyncJobStatus queueJob(JobConfig config) throws JobException {\n         try {\n             // Check if the queueing is blocked by constraints\n             Collection<JobConstraint> constraints = config.getConstraints();\n-            Set<AsyncJobStatus> blockingJobs = new HashSet<>();\n+            Set<String> blockingJobIds = new HashSet<>();\n \n             if (constraints != null && !constraints.isEmpty()) {\n-                Collection<AsyncJobStatus> existingJobs = Collections.unmodifiableList(\n-                    this.jobCurator.getNonTerminalJobs());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzMwNzg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/AsyncJobStatusCurator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1Mzo1MFrOGibwTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzowNTowMlrOGicJKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1OTUwMg==", "bodyText": "param added in the doc, but the signature remained the same", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438759502", "createdAt": "2020-06-11T12:53:50Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/model/AsyncJobStatusCurator.java", "diffHunk": "@@ -219,6 +222,9 @@ public AsyncJobStatusCurator() {\n      * Fetches a collection of jobs in the given states. If no jobs can be found in the states\n      * specified, this method returns an empty collection.\n      *\n+     * @param extended\n+     *  whether or not to fetch extended job status information", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NTg2NQ==", "bodyText": "Removed", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438765865", "createdAt": "2020-06-11T13:05:02Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/AsyncJobStatusCurator.java", "diffHunk": "@@ -219,6 +222,9 @@ public AsyncJobStatusCurator() {\n      * Fetches a collection of jobs in the given states. If no jobs can be found in the states\n      * specified, this method returns an empty collection.\n      *\n+     * @param extended\n+     *  whether or not to fetch extended job status information", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1OTUwMg=="}, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzMyOTI3OnYy", "diffSide": "RIGHT", "path": "server/src/main/resources/db/changelog/20200604045445-async-job-data-restructure.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1OTo1NFrOGib93w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzowNDo1NFrOGicI7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2Mjk3NQ==", "bodyText": "I think you mentioned that you've already added this, but if you didn't yet, you need to add <include file=\"db/changelog/datatypes.xml\"/> to this file for the variable to resolve", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438762975", "createdAt": "2020-06-11T12:59:54Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/resources/db/changelog/20200604045445-async-job-data-restructure.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<databaseChangeLog\n+        xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+        xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n+        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd\">\n+\n+    <changeSet id=\"20200604045445-1\" author=\"crog\">\n+        <dropColumn tableName=\"cp_async_jobs\" columnName=\"job_data\"/>\n+\n+        <!--\n+            The max length on the ref ID comes from the CSID_MAX_LENGTH value in LoggingFilter.java\n+            If that value ever increases, this column should be updated as well\n+        -->\n+\n+        <addColumn tableName=\"cp_async_jobs\">\n+            <column name=\"job_result\" type=\"${text.type}\"/>\n+            <column name=\"correlation_id\" type=\"VARCHAR(40)\" beforeColumn=\"previous_state\"/>\n+        </addColumn>\n+    </changeSet>\n+\n+    <changeSet id=\"20200604045445-2\" author=\"crog\">\n+        <createTable tableName=\"cp_async_job_arguments\">\n+            <column name=\"job_id\" type=\"varchar(36)\"/>\n+            <column name=\"name\" type=\"varchar(255)\"/>\n+            <column name=\"value\" type=\"${text.type}\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NTgwNg==", "bodyText": "It's there, I must have missed the file in my last commit.", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r438765806", "createdAt": "2020-06-11T13:04:54Z", "author": {"login": "Ceiu"}, "path": "server/src/main/resources/db/changelog/20200604045445-async-job-data-restructure.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<databaseChangeLog\n+        xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+        xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n+        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd\">\n+\n+    <changeSet id=\"20200604045445-1\" author=\"crog\">\n+        <dropColumn tableName=\"cp_async_jobs\" columnName=\"job_data\"/>\n+\n+        <!--\n+            The max length on the ref ID comes from the CSID_MAX_LENGTH value in LoggingFilter.java\n+            If that value ever increases, this column should be updated as well\n+        -->\n+\n+        <addColumn tableName=\"cp_async_jobs\">\n+            <column name=\"job_result\" type=\"${text.type}\"/>\n+            <column name=\"correlation_id\" type=\"VARCHAR(40)\" beforeColumn=\"previous_state\"/>\n+        </addColumn>\n+    </changeSet>\n+\n+    <changeSet id=\"20200604045445-2\" author=\"crog\">\n+        <createTable tableName=\"cp_async_job_arguments\">\n+            <column name=\"job_id\" type=\"varchar(36)\"/>\n+            <column name=\"name\" type=\"varchar(255)\"/>\n+            <column name=\"value\" type=\"${text.type}\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2Mjk3NQ=="}, "originalCommit": {"oid": "c59eec24b9f6b71e70bfe3aff766563169c7b837"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDUxMzc2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/async/tasks/HypervisorHeartbeatUpdateJob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTozMDowOVrOGlBkTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowOTozNVrOGlE8Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NjE3Mg==", "bodyText": "Looks like the name change caused a spec test failure, and the test needs updating", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441476172", "createdAt": "2020-06-17T11:30:09Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/async/tasks/HypervisorHeartbeatUpdateJob.java", "diffHunk": "@@ -42,7 +42,7 @@\n     private static final Logger log = LoggerFactory.getLogger(HypervisorHeartbeatUpdateJob.class);\n \n     public static final String JOB_KEY = \"HypervisorHeartbeatUpdateJob\";\n-    public static final String JOB_NAME = \"hypervisor_heartbeat_update\";\n+    public static final String JOB_NAME = \"Hypervisor Heartbeat Update\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff00b7a575f9a2157d846d2d205034dc5641fe2c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMTM5OA==", "bodyText": "Fixed", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441531398", "createdAt": "2020-06-17T13:09:35Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/async/tasks/HypervisorHeartbeatUpdateJob.java", "diffHunk": "@@ -42,7 +42,7 @@\n     private static final Logger log = LoggerFactory.getLogger(HypervisorHeartbeatUpdateJob.class);\n \n     public static final String JOB_KEY = \"HypervisorHeartbeatUpdateJob\";\n-    public static final String JOB_NAME = \"hypervisor_heartbeat_update\";\n+    public static final String JOB_NAME = \"Hypervisor Heartbeat Update\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NjE3Mg=="}, "originalCommit": {"oid": "ff00b7a575f9a2157d846d2d205034dc5641fe2c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDcyNjkwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/model/AsyncJobStatus.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjozNTozMFrOGlDpiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1MDoyNVrOGlGtrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMDI4MQ==", "bodyText": "Now that we use an objectmapper excplicitly here, to serialize result objects, we should remove the old infrastructure we used to do that with the @Convert annotation: JobDataJsonConverter / AbstractJsonConverter.java", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441510281", "createdAt": "2020-06-17T12:35:30Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/model/AsyncJobStatus.java", "diffHunk": "@@ -28,32 +31,34 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n-import javax.persistence.Convert;\n import javax.persistence.Converter;\n+import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n+import javax.persistence.MapKeyColumn;\n import javax.persistence.Table;\n import javax.persistence.Version;\n import javax.validation.constraints.NotNull;\n-import javax.xml.bind.annotation.XmlAccessType;\n-import javax.xml.bind.annotation.XmlAccessorType;\n-import javax.xml.bind.annotation.XmlRootElement;\n \n \n \n /**\n- * Represents the current status for a long-running job.\n+ * Represents the job status for an async job. This class does not include extended information,\n+ * such as the job result. The AsyncJobStatusEx class can be used in cases where the extended\n+ * information is needed.\n  */\n-@XmlRootElement\n-@XmlAccessorType(XmlAccessType.PROPERTY)\n @Entity\n @Table(name = AsyncJobStatus.DB_TABLE)\n-public class AsyncJobStatus extends AbstractHibernateObject implements JobExecutionContext {\n+public class AsyncJobStatus extends AbstractHibernateObject {\n+\n+    /** Basic ObjectMapper to use for serializing job results as we receive them */\n+    private static final ObjectMapper MAPPER = ObjectMapperFactory.getObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff00b7a575f9a2157d846d2d205034dc5641fe2c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMTMyMw==", "bodyText": "AbstractJsonConverter is the JSON compliment to ResultDataUserType. We no longer have an immediate use for it now, but that's what we should use in the future.\nOne thing that comes to mind here is perhaps using a one-way version of the converter rather than explicitly converting it ourselves. Might be cleaner than what is currently in this PR.", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441531323", "createdAt": "2020-06-17T13:09:30Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/model/AsyncJobStatus.java", "diffHunk": "@@ -28,32 +31,34 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n-import javax.persistence.Convert;\n import javax.persistence.Converter;\n+import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n+import javax.persistence.MapKeyColumn;\n import javax.persistence.Table;\n import javax.persistence.Version;\n import javax.validation.constraints.NotNull;\n-import javax.xml.bind.annotation.XmlAccessType;\n-import javax.xml.bind.annotation.XmlAccessorType;\n-import javax.xml.bind.annotation.XmlRootElement;\n \n \n \n /**\n- * Represents the current status for a long-running job.\n+ * Represents the job status for an async job. This class does not include extended information,\n+ * such as the job result. The AsyncJobStatusEx class can be used in cases where the extended\n+ * information is needed.\n  */\n-@XmlRootElement\n-@XmlAccessorType(XmlAccessType.PROPERTY)\n @Entity\n @Table(name = AsyncJobStatus.DB_TABLE)\n-public class AsyncJobStatus extends AbstractHibernateObject implements JobExecutionContext {\n+public class AsyncJobStatus extends AbstractHibernateObject {\n+\n+    /** Basic ObjectMapper to use for serializing job results as we receive them */\n+    private static final ObjectMapper MAPPER = ObjectMapperFactory.getObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMDI4MQ=="}, "originalCommit": {"oid": "ff00b7a575f9a2157d846d2d205034dc5641fe2c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2MDQ5Mg==", "bodyText": "You can do it that way if you want, or leave it as a todo?", "url": "https://github.com/candlepin/candlepin/pull/2724#discussion_r441560492", "createdAt": "2020-06-17T13:50:25Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/model/AsyncJobStatus.java", "diffHunk": "@@ -28,32 +31,34 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n-import javax.persistence.Convert;\n import javax.persistence.Converter;\n+import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n+import javax.persistence.MapKeyColumn;\n import javax.persistence.Table;\n import javax.persistence.Version;\n import javax.validation.constraints.NotNull;\n-import javax.xml.bind.annotation.XmlAccessType;\n-import javax.xml.bind.annotation.XmlAccessorType;\n-import javax.xml.bind.annotation.XmlRootElement;\n \n \n \n /**\n- * Represents the current status for a long-running job.\n+ * Represents the job status for an async job. This class does not include extended information,\n+ * such as the job result. The AsyncJobStatusEx class can be used in cases where the extended\n+ * information is needed.\n  */\n-@XmlRootElement\n-@XmlAccessorType(XmlAccessType.PROPERTY)\n @Entity\n @Table(name = AsyncJobStatus.DB_TABLE)\n-public class AsyncJobStatus extends AbstractHibernateObject implements JobExecutionContext {\n+public class AsyncJobStatus extends AbstractHibernateObject {\n+\n+    /** Basic ObjectMapper to use for serializing job results as we receive them */\n+    private static final ObjectMapper MAPPER = ObjectMapperFactory.getObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMDI4MQ=="}, "originalCommit": {"oid": "ff00b7a575f9a2157d846d2d205034dc5641fe2c"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4210, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}