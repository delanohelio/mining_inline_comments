{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3ODc1MTIz", "number": 2639, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo0OTo0OVrODoVwWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1NzoxN1rODoV8bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjI2MDc0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/candlepin/resteasy/JsonProviderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo0OTo0OVrOF209_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjowMjowMlrOF26-xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNTI2Mg==", "bodyText": "For these tests where we have nested nodes, we should also verify that the children nodes have the correct amount of elements.\nApplies below as well", "url": "https://github.com/candlepin/candlepin/pull/2639#discussion_r393035262", "createdAt": "2020-03-16T13:49:49Z", "author": {"login": "Ceiu"}, "path": "server/src/test/java/org/candlepin/resteasy/JsonProviderTest.java", "diffHunk": "@@ -142,4 +148,203 @@ private boolean isEnabled(JsonProvider provider, SerializationFeature feature) {\n         return sConfig.isEnabled(feature);\n     }\n \n+    @Test\n+    public void testDynamicPropertyFilterExcludeSingleProperty() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.excludeAttribute(\"name\");\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+\n+        assertTrue(akNode.has(\"id\"), \"The 'id' field should NOT have been excluded!\");\n+        assertTrue(akNode.has(\"description\"), \"The 'description' field should NOT have been excluded!\");\n+        assertTrue(akNode.has(\"releaseVer\"), \"The 'releaseVer' field should NOT have been excluded!\");\n+        assertFalse(akNode.has(\"name\"), \"The 'name' field should have been excluded!\");\n+    }\n+\n+    @Test\n+    public void testDynamicPropertyFilterExcludeMultipleProperties() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.excludeAttribute(\"name\");\n+        filterData.excludeAttribute(\"addOns\");\n+        filterData.excludeAttribute(\"serviceLevel\");\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+\n+        assertTrue(akNode.has(\"id\"), \"The 'id' field should NOT have been excluded!\");\n+        assertTrue(akNode.has(\"description\"), \"The 'description' field should NOT have been excluded!\");\n+        assertTrue(akNode.has(\"releaseVer\"), \"The 'releaseVer' field should NOT have been excluded!\");\n+        assertFalse(akNode.has(\"name\"), \"The 'name' field should have been excluded!\");\n+        assertFalse(akNode.has(\"addOns\"), \"The 'addOns' field should have been excluded!\");\n+        assertFalse(akNode.has(\"serviceLevel\"), \"The 'serviceLevel' field should have been excluded!\");\n+    }\n+\n+    @Test\n+    public void testDynamicPropertyFilterIncludeSingleProperty() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.includeAttribute(\"name\");\n+        filterData.setWhitelistMode(true); // When only includes are set, we should be in whitelist mode\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+        assertEquals(1, akNode.size());\n+        assertTrue(akNode.has(\"name\"), \"The 'name' field should have been included!\");\n+    }\n+\n+    @Test\n+    public void testDynamicPropertyFilterIncludeMultipleProperties() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.includeAttribute(\"name\");\n+        filterData.includeAttribute(\"releaseVer\");\n+        filterData.includeAttribute(\"addOns\");\n+        filterData.setWhitelistMode(true); // When only includes are set, we should be in whitelist mode\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+        assertEquals(3, akNode.size());\n+        assertTrue(akNode.has(\"name\"), \"The 'name' field should have been included!\");\n+        assertTrue(akNode.has(\"releaseVer\"), \"The 'releaseVer' field should have been included!\");\n+        assertTrue(akNode.has(\"addOns\"), \"The 'addOns' field should have been included!\");\n+    }\n+\n+    @Test\n+    public void testDynamicPropertyFilterIncludeNestedProperty() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.includeAttribute(\"owner.id\");\n+        filterData.setWhitelistMode(true); // When only includes are set, we should be in whitelist mode\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        NestedOwnerDTO ownerDTO = new NestedOwnerDTO()\n+            .key(\"owner_key\")\n+            .id(\"owner_id\");\n+        keyDTO.setOwner(ownerDTO);\n+\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+        assertEquals(1, akNode.size());\n+        assertTrue(akNode.has(\"owner\"), \"The 'owner' field should have been included!\");\n+        assertTrue(akNode.get(\"owner\").has(\"id\"), \"The 'owner.id' field should have been included!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "534e6f9f225daa4fccbad42390b9dedde251309a"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMzc2NA==", "bodyText": "Done", "url": "https://github.com/candlepin/candlepin/pull/2639#discussion_r393133764", "createdAt": "2020-03-16T16:02:02Z", "author": {"login": "nikosmoum"}, "path": "server/src/test/java/org/candlepin/resteasy/JsonProviderTest.java", "diffHunk": "@@ -142,4 +148,203 @@ private boolean isEnabled(JsonProvider provider, SerializationFeature feature) {\n         return sConfig.isEnabled(feature);\n     }\n \n+    @Test\n+    public void testDynamicPropertyFilterExcludeSingleProperty() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.excludeAttribute(\"name\");\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+\n+        assertTrue(akNode.has(\"id\"), \"The 'id' field should NOT have been excluded!\");\n+        assertTrue(akNode.has(\"description\"), \"The 'description' field should NOT have been excluded!\");\n+        assertTrue(akNode.has(\"releaseVer\"), \"The 'releaseVer' field should NOT have been excluded!\");\n+        assertFalse(akNode.has(\"name\"), \"The 'name' field should have been excluded!\");\n+    }\n+\n+    @Test\n+    public void testDynamicPropertyFilterExcludeMultipleProperties() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.excludeAttribute(\"name\");\n+        filterData.excludeAttribute(\"addOns\");\n+        filterData.excludeAttribute(\"serviceLevel\");\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+\n+        assertTrue(akNode.has(\"id\"), \"The 'id' field should NOT have been excluded!\");\n+        assertTrue(akNode.has(\"description\"), \"The 'description' field should NOT have been excluded!\");\n+        assertTrue(akNode.has(\"releaseVer\"), \"The 'releaseVer' field should NOT have been excluded!\");\n+        assertFalse(akNode.has(\"name\"), \"The 'name' field should have been excluded!\");\n+        assertFalse(akNode.has(\"addOns\"), \"The 'addOns' field should have been excluded!\");\n+        assertFalse(akNode.has(\"serviceLevel\"), \"The 'serviceLevel' field should have been excluded!\");\n+    }\n+\n+    @Test\n+    public void testDynamicPropertyFilterIncludeSingleProperty() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.includeAttribute(\"name\");\n+        filterData.setWhitelistMode(true); // When only includes are set, we should be in whitelist mode\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+        assertEquals(1, akNode.size());\n+        assertTrue(akNode.has(\"name\"), \"The 'name' field should have been included!\");\n+    }\n+\n+    @Test\n+    public void testDynamicPropertyFilterIncludeMultipleProperties() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.includeAttribute(\"name\");\n+        filterData.includeAttribute(\"releaseVer\");\n+        filterData.includeAttribute(\"addOns\");\n+        filterData.setWhitelistMode(true); // When only includes are set, we should be in whitelist mode\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+        assertEquals(3, akNode.size());\n+        assertTrue(akNode.has(\"name\"), \"The 'name' field should have been included!\");\n+        assertTrue(akNode.has(\"releaseVer\"), \"The 'releaseVer' field should have been included!\");\n+        assertTrue(akNode.has(\"addOns\"), \"The 'addOns' field should have been included!\");\n+    }\n+\n+    @Test\n+    public void testDynamicPropertyFilterIncludeNestedProperty() {\n+        DynamicFilterData filterData = new DynamicFilterData();\n+        filterData.includeAttribute(\"owner.id\");\n+        filterData.setWhitelistMode(true); // When only includes are set, we should be in whitelist mode\n+        ResteasyProviderFactory.pushContext(DynamicFilterData.class, filterData);\n+\n+        ActivationKeyDTO keyDTO = new ActivationKeyDTO();\n+        NestedOwnerDTO ownerDTO = new NestedOwnerDTO()\n+            .key(\"owner_key\")\n+            .id(\"owner_id\");\n+        keyDTO.setOwner(ownerDTO);\n+\n+        String serializedKey = \"\";\n+        try {\n+            serializedKey = ourMapper.writeValueAsString(keyDTO);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Serializing ActivationKeyDTO failed!\");\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode akNode = null;\n+        try {\n+            akNode = mapper.readTree(serializedKey);\n+        }\n+        catch (JsonProcessingException e) {\n+            fail(\"Parsing serialized ActivationKeyDTO failed!\");\n+        }\n+        assertEquals(1, akNode.size());\n+        assertTrue(akNode.has(\"owner\"), \"The 'owner' field should have been included!\");\n+        assertTrue(akNode.get(\"owner\").has(\"id\"), \"The 'owner.id' field should have been included!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNTI2Mg=="}, "originalCommit": {"oid": "534e6f9f225daa4fccbad42390b9dedde251309a"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjI3NTE2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/candlepin/resteasy/JsonProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1MzoxNFrOF21HLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjowMjowNVrOF26-6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNzYxNA==", "bodyText": "This is probably the lowest priority thing I've ever requested, but could we call this LegacyDTOFilter rather than Old? I don't know why, but \"old\" feels very rough to me.", "url": "https://github.com/candlepin/candlepin/pull/2639#discussion_r393037614", "createdAt": "2020-03-16T13:53:14Z", "author": {"login": "Ceiu"}, "path": "server/src/main/java/org/candlepin/resteasy/JsonProvider.java", "diffHunk": "@@ -107,6 +124,11 @@ private void configureHateoasObjectMapper(ObjectMapper mapper, boolean indentJso\n         }\n \n         SimpleFilterProvider filterProvider = new SimpleFilterProvider();\n+        filterProvider = filterProvider.addFilter(\"DTOFilter\", new DynamicPropertyFilter());\n+\n+        // TODO: Once all DTOs are ported to the openapi spec, stop adding the following\n+        //  filters: OldDTOFilter, ConsumerFilter, EntitlementFilter, OwnerFilter, GuestFilter.\n+        filterProvider = filterProvider.addFilter(\"OldDTOFilter\", new DynamicPropertyFilter());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "534e6f9f225daa4fccbad42390b9dedde251309a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwNzgxNg==", "bodyText": "No problem, LegacyDTOFilter sounds good", "url": "https://github.com/candlepin/candlepin/pull/2639#discussion_r393107816", "createdAt": "2020-03-16T15:25:56Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resteasy/JsonProvider.java", "diffHunk": "@@ -107,6 +124,11 @@ private void configureHateoasObjectMapper(ObjectMapper mapper, boolean indentJso\n         }\n \n         SimpleFilterProvider filterProvider = new SimpleFilterProvider();\n+        filterProvider = filterProvider.addFilter(\"DTOFilter\", new DynamicPropertyFilter());\n+\n+        // TODO: Once all DTOs are ported to the openapi spec, stop adding the following\n+        //  filters: OldDTOFilter, ConsumerFilter, EntitlementFilter, OwnerFilter, GuestFilter.\n+        filterProvider = filterProvider.addFilter(\"OldDTOFilter\", new DynamicPropertyFilter());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNzYxNA=="}, "originalCommit": {"oid": "534e6f9f225daa4fccbad42390b9dedde251309a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMzgwMQ==", "bodyText": "Done", "url": "https://github.com/candlepin/candlepin/pull/2639#discussion_r393133801", "createdAt": "2020-03-16T16:02:05Z", "author": {"login": "nikosmoum"}, "path": "server/src/main/java/org/candlepin/resteasy/JsonProvider.java", "diffHunk": "@@ -107,6 +124,11 @@ private void configureHateoasObjectMapper(ObjectMapper mapper, boolean indentJso\n         }\n \n         SimpleFilterProvider filterProvider = new SimpleFilterProvider();\n+        filterProvider = filterProvider.addFilter(\"DTOFilter\", new DynamicPropertyFilter());\n+\n+        // TODO: Once all DTOs are ported to the openapi spec, stop adding the following\n+        //  filters: OldDTOFilter, ConsumerFilter, EntitlementFilter, OwnerFilter, GuestFilter.\n+        filterProvider = filterProvider.addFilter(\"OldDTOFilter\", new DynamicPropertyFilter());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNzYxNA=="}, "originalCommit": {"oid": "534e6f9f225daa4fccbad42390b9dedde251309a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjI5MTY0OnYy", "diffSide": "RIGHT", "path": "api/candlepin-api-spec.yaml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1NzoxN1rOF21RkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjowMjoxMVrOF26_Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0MDI3Mg==", "bodyText": "The name seems odd to me, and probably more references the original HATEOAS usage rather than what the DTO itself is. I feel that something like AttributelessGuestIdDTO would be clearer going forward; assuming we also have a GuestIdDTO that does have the attributes associated with it.", "url": "https://github.com/candlepin/candlepin/pull/2639#discussion_r393040272", "createdAt": "2020-03-16T13:57:17Z", "author": {"login": "Ceiu"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -515,6 +515,17 @@ components:\n               additionalProperties:\n                 type: string\n \n+    ArrayExcludeGuestIdDTO:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "534e6f9f225daa4fccbad42390b9dedde251309a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwNjkxNg==", "bodyText": "Yes we do have GuestIdDTO that does have the attributes, already in the spec file. The reason I just used the original hateoas usage was because we'll have a couple more DTOs that will need to have cut-down versions because they use that annotation (specifically, ConsumerDTO and UpstreamConsumerDTO, which I've updated the relevant jira cards to make sure they get created), and wanted to use a standard naming scheme for all. For example, ConsumerDTO has that annotation for the idCert and facts fields, and naming it IdCertLessAndFactLessConsumerDTO is not a good idea.\nMaybe a better format for all 3 of them would be ArrayElement*DTO or *DTOArrayElement, because those DTOs are only going to be used as references in an array?\nAlso, I added Does not include the attributes field in the description for this to make sure the difference with GuestIdDTO is clear", "url": "https://github.com/candlepin/candlepin/pull/2639#discussion_r393106916", "createdAt": "2020-03-16T15:24:41Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -515,6 +515,17 @@ components:\n               additionalProperties:\n                 type: string\n \n+    ArrayExcludeGuestIdDTO:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0MDI3Mg=="}, "originalCommit": {"oid": "534e6f9f225daa4fccbad42390b9dedde251309a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwODUxNg==", "bodyText": "The *DTOArrayElement for standardization sounds good to me.", "url": "https://github.com/candlepin/candlepin/pull/2639#discussion_r393108516", "createdAt": "2020-03-16T15:26:52Z", "author": {"login": "Ceiu"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -515,6 +515,17 @@ components:\n               additionalProperties:\n                 type: string\n \n+    ArrayExcludeGuestIdDTO:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0MDI3Mg=="}, "originalCommit": {"oid": "534e6f9f225daa4fccbad42390b9dedde251309a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMzg2Ng==", "bodyText": "Done", "url": "https://github.com/candlepin/candlepin/pull/2639#discussion_r393133866", "createdAt": "2020-03-16T16:02:11Z", "author": {"login": "nikosmoum"}, "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -515,6 +515,17 @@ components:\n               additionalProperties:\n                 type: string\n \n+    ArrayExcludeGuestIdDTO:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0MDI3Mg=="}, "originalCommit": {"oid": "534e6f9f225daa4fccbad42390b9dedde251309a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4108, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}