{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExODc2ODc2", "number": 474, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo0NDo0N1rOE0gasg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToyMzozN1rOE0hLcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDkyNTMwOnYy", "diffSide": "RIGHT", "path": "automation/src/main/java/org/greenplum/pxf/automation/testplugin/MultipleHiveFragmentsPerFileFragmenter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo0NDo0N1rOHsRTZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTozODozMVrOHsS-cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4Mjg4NQ==", "bodyText": "why do we need ThreadLocal, is it very expensive to build ? Seems like a pre-mature optimization.", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516182885", "createdAt": "2020-11-02T18:44:47Z", "author": {"login": "denalex"}, "path": "automation/src/main/java/org/greenplum/pxf/automation/testplugin/MultipleHiveFragmentsPerFileFragmenter.java", "diffHunk": "@@ -36,10 +37,11 @@\n public class MultipleHiveFragmentsPerFileFragmenter extends BaseFragmenter {\n     private static final Log LOG = LogFactory.getLog(MultipleHiveFragmentsPerFileFragmenter.class);\n \n+    private static final ThreadLocal<Kryo> kryo = ThreadLocal.withInitial(Kryo::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMDI5MQ==", "bodyText": "it's very expensive to build and not thread-safe. I have a comment somewhere else for that. It is also the way it's used in Hive.", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516210291", "createdAt": "2020-11-02T19:38:31Z", "author": {"login": "frankgh"}, "path": "automation/src/main/java/org/greenplum/pxf/automation/testplugin/MultipleHiveFragmentsPerFileFragmenter.java", "diffHunk": "@@ -36,10 +37,11 @@\n public class MultipleHiveFragmentsPerFileFragmenter extends BaseFragmenter {\n     private static final Log LOG = LogFactory.getLog(MultipleHiveFragmentsPerFileFragmenter.class);\n \n+    private static final ThreadLocal<Kryo> kryo = ThreadLocal.withInitial(Kryo::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4Mjg4NQ=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDk2MTIwOnYy", "diffSide": "RIGHT", "path": "automation/src/main/java/org/greenplum/pxf/automation/testplugin/MultipleHiveFragmentsPerFileFragmenter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo1NToxNVrOHsRpXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo1NToxNVrOHsRpXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4ODUxMQ==", "bodyText": "this function is repeated elsewhere, can it go into Utilities ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516188511", "createdAt": "2020-11-02T18:55:15Z", "author": {"login": "denalex"}, "path": "automation/src/main/java/org/greenplum/pxf/automation/testplugin/MultipleHiveFragmentsPerFileFragmenter.java", "diffHunk": "@@ -113,10 +109,16 @@ private String getFilePath(Table tbl) throws Exception {\n \n         for (InputSplit split : splits) {\n             FileSplit fsp = (FileSplit) split;\n-            String[] hosts = fsp.getLocations();\n-            String filepath = fsp.getPath().toString();\n-            return filepath;\n+            return fsp.getPath().toString();\n         }\n         throw new RuntimeException(\"Unable to get file path for table.\");\n     }\n+\n+    /* Turns a Properties class into a string */\n+    private byte[] serializeProperties(Properties properties) {\n+        Output out = new Output(4 * 1024, 10 * 1024 * 1024);\n+        kryo.get().writeObject(out, properties);\n+        out.close();\n+        return out.toBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDk2NzYxOnYy", "diffSide": "RIGHT", "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveClientWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo1NzoyMlrOHsRtpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo1NzoyMlrOHsRtpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4OTYwNg==", "bodyText": "this is the 3rd use of ThreadLocal, I believe", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516189606", "createdAt": "2020-11-02T18:57:22Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveClientWrapper.java", "diffHunk": "@@ -46,7 +52,15 @@\n     private static final Logger LOG = LoggerFactory.getLogger(HiveClientWrapper.class);\n \n     private static final String WILDCARD = \"*\";\n-    private static final int DEFAULT_DELIMITER_CODE = 44;\n+\n+    // The Kryo instance is not thread safe, and quite expensive to build,\n+    // storing it on a ThreadLocal is a recommended way to make sure that the\n+    // serializer is thread safe.\n+    private static final ThreadLocal<Kryo> kryo = ThreadLocal.withInitial(() -> {\n+        Kryo k = new Kryo();\n+        k.addDefaultSerializer(Map.class, PropertiesSerializer.class);\n+        return k;\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDk2OTA0OnYy", "diffSide": "RIGHT", "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveClientWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo1Nzo0N1rOHsRugA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo1Nzo0N1rOHsRugA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4OTgyNA==", "bodyText": "move to Utilities ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516189824", "createdAt": "2020-11-02T18:57:47Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveClientWrapper.java", "diffHunk": "@@ -318,68 +315,55 @@ private HiveConf getHiveConf(Configuration configuration) {\n     }\n \n     /* Turns a Properties class into a string */\n-    private String serializeProperties(Properties props) throws Exception {\n-        ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n-        props.store(outStream, \"\"/* comments */);\n-        return outStream.toString();\n+    private byte[] serializeProperties(Properties properties) {\n+        Output out = new Output(4 * 1024, 10 * 1024 * 1024);\n+        kryo.get().writeObject(out, properties);\n+        out.close();\n+        return out.toBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDk3NTk2OnYy", "diffSide": "RIGHT", "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveColumnarSerdeResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo1OTo1NVrOHsRy1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDo0MjowNFrOHsU6pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5MDkzMw==", "bodyText": "there was lowerCase() in the old logic. maybe it is taken care of somewhere else", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516190933", "createdAt": "2020-11-02T18:59:55Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveColumnarSerdeResolver.java", "diffHunk": "@@ -109,15 +95,8 @@ void initPartitionFields() {\n      */\n     @Override\n     void initTextPartitionFields(StringBuilder parts) {\n-        if (partitionKeys.equals(HiveDataFragmenter.HIVE_NO_PART_TBL)) {\n-            return;\n-        }\n-\n-        String[] partitionLevels = partitionKeys.split(HiveDataFragmenter.HIVE_PARTITIONS_DELIM);\n-        for (String partLevel : partitionLevels) {\n-            String[] levelKey = partLevel.split(HiveDataFragmenter.HIVE_1_PART_DELIM);\n-            partitionColumnNames.put(StringUtils.lowerCase(levelKey[0]), levelKey);\n-        }\n+        partitionColumnNames = metadata.getPartitions().stream()\n+                .collect(Collectors.toMap(HivePartition::getName, partition -> partition));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0MjA4Ng==", "bodyText": "good catch. Adding it back", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516242086", "createdAt": "2020-11-02T20:42:04Z", "author": {"login": "frankgh"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveColumnarSerdeResolver.java", "diffHunk": "@@ -109,15 +95,8 @@ void initPartitionFields() {\n      */\n     @Override\n     void initTextPartitionFields(StringBuilder parts) {\n-        if (partitionKeys.equals(HiveDataFragmenter.HIVE_NO_PART_TBL)) {\n-            return;\n-        }\n-\n-        String[] partitionLevels = partitionKeys.split(HiveDataFragmenter.HIVE_PARTITIONS_DELIM);\n-        for (String partLevel : partitionLevels) {\n-            String[] levelKey = partLevel.split(HiveDataFragmenter.HIVE_1_PART_DELIM);\n-            partitionColumnNames.put(StringUtils.lowerCase(levelKey[0]), levelKey);\n-        }\n+        partitionColumnNames = metadata.getPartitions().stream()\n+                .collect(Collectors.toMap(HivePartition::getName, partition -> partition));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5MDkzMw=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTAxMDgzOnYy", "diffSide": "RIGHT", "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToxMTowMFrOHsSImw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTo0MDoxM1rOHsTCIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NjUwNw==", "bodyText": "why shorten the variable name ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516196507", "createdAt": "2020-11-02T19:11:00Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -78,23 +77,28 @@\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n+import static org.apache.hadoop.hive.serde.serdeConstants.SERIALIZATION_LIB;\n+\n /**\n  * Class HiveResolver handles deserialization of records that were serialized\n  * using Hadoop's Hive serialization framework.\n  */\n public class HiveResolver extends HivePlugin implements Resolver {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(HiveResolver.class);\n+\n     protected static final String MAPKEY_DELIM = \":\";\n     protected static final String COLLECTION_DELIM = \",\";\n     protected static final String nullChar = \"\\\\N\";\n+\n     protected char delimiter;\n     protected String collectionDelim;\n     protected String mapkeyDelim;\n-    protected Deserializer deserializer;\n+    protected Deserializer d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMTIzNA==", "bodyText": "ahh! good catch. I changed this variable name so I can identify what breaks. I forgot to restore it after I fixed all problems", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516211234", "createdAt": "2020-11-02T19:40:13Z", "author": {"login": "frankgh"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -78,23 +77,28 @@\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n+import static org.apache.hadoop.hive.serde.serdeConstants.SERIALIZATION_LIB;\n+\n /**\n  * Class HiveResolver handles deserialization of records that were serialized\n  * using Hadoop's Hive serialization framework.\n  */\n public class HiveResolver extends HivePlugin implements Resolver {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(HiveResolver.class);\n+\n     protected static final String MAPKEY_DELIM = \":\";\n     protected static final String COLLECTION_DELIM = \",\";\n     protected static final String nullChar = \"\\\\N\";\n+\n     protected char delimiter;\n     protected String collectionDelim;\n     protected String mapkeyDelim;\n-    protected Deserializer deserializer;\n+    protected Deserializer d;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NjUwNw=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTAxNjczOnYy", "diffSide": "RIGHT", "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToxMzowMFrOHsSMRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDo0MzoxNFrOHsU80g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NzQ0NA==", "bodyText": "isn't this also a class field ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516197444", "createdAt": "2020-11-02T19:13:00Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -105,25 +109,17 @@\n      * obtaining the serde class name, the serde properties string and the\n      * partition keys.\n      *\n-     * @param requestContext request context\n+     * @param context request context\n      */\n     @Override\n-    public void initialize(RequestContext requestContext) {\n-        super.initialize(requestContext);\n-\n+    public void initialize(RequestContext context) {\n+        super.initialize(context);\n         hiveDefaultPartName = HiveConf.getVar(configuration, HiveConf.ConfVars.DEFAULTPARTITIONNAME);\n-\n-        try {\n-            parseUserData(context);\n-            initPartitionFields();\n-            initSerde(context);\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Failed to initialize HiveResolver\", e);\n-        }\n     }\n \n     @Override\n     public List<OneField> getFields(OneRow onerow) throws Exception {\n+        Deserializer deserializer = getDeserializer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMjE0NA==", "bodyText": "it's lazily instantiated, that's why I use getDeserializer. The issue lies in timing of the \"metadata\" being available in the RequestContext. The metadata is only populated after openForRead. Which is why we can't access it earlier", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516212144", "createdAt": "2020-11-02T19:42:03Z", "author": {"login": "frankgh"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -105,25 +109,17 @@\n      * obtaining the serde class name, the serde properties string and the\n      * partition keys.\n      *\n-     * @param requestContext request context\n+     * @param context request context\n      */\n     @Override\n-    public void initialize(RequestContext requestContext) {\n-        super.initialize(requestContext);\n-\n+    public void initialize(RequestContext context) {\n+        super.initialize(context);\n         hiveDefaultPartName = HiveConf.getVar(configuration, HiveConf.ConfVars.DEFAULTPARTITIONNAME);\n-\n-        try {\n-            parseUserData(context);\n-            initPartitionFields();\n-            initSerde(context);\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Failed to initialize HiveResolver\", e);\n-        }\n     }\n \n     @Override\n     public List<OneField> getFields(OneRow onerow) throws Exception {\n+        Deserializer deserializer = getDeserializer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NzQ0NA=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0MjY0Mg==", "bodyText": "I was wrong, we can access it from RequestContext. Removing the getDeserializer method", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516242642", "createdAt": "2020-11-02T20:43:14Z", "author": {"login": "frankgh"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -105,25 +109,17 @@\n      * obtaining the serde class name, the serde properties string and the\n      * partition keys.\n      *\n-     * @param requestContext request context\n+     * @param context request context\n      */\n     @Override\n-    public void initialize(RequestContext requestContext) {\n-        super.initialize(requestContext);\n-\n+    public void initialize(RequestContext context) {\n+        super.initialize(context);\n         hiveDefaultPartName = HiveConf.getVar(configuration, HiveConf.ConfVars.DEFAULTPARTITIONNAME);\n-\n-        try {\n-            parseUserData(context);\n-            initPartitionFields();\n-            initSerde(context);\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Failed to initialize HiveResolver\", e);\n-        }\n     }\n \n     @Override\n     public List<OneField> getFields(OneRow onerow) throws Exception {\n+        Deserializer deserializer = getDeserializer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5NzQ0NA=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTAyMTEwOnYy", "diffSide": "RIGHT", "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToxNDoyNFrOHsSO7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTo0Mjo0NlrOHsTHNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5ODEyNw==", "bodyText": "are we removing  HIVE_NO_PART_TBL altogether ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516198127", "createdAt": "2020-11-02T19:14:24Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -279,25 +255,18 @@ void initPartitionFields() {\n         numberOfPartitions = partitionColumnNames.size();\n     }\n \n-    private boolean columnDescriptorContainsColumn(String columnName) {\n-        return context.getTupleDescription()\n-                .stream()\n-                .anyMatch(cd -> columnName.equals(cd.columnName()));\n-    }\n-\n     /*\n      * The partition fields are initialized one time based on userData provided\n      * by the fragmenter.\n      */\n     void initTextPartitionFields(StringBuilder parts) {\n-        if (partitionKeys.equals(HiveDataFragmenter.HIVE_NO_PART_TBL)) {\n+        List<HivePartition> hivePartitionList = metadata.getPartitions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMjUzMg==", "bodyText": "yes, that was a way to serialize partition information. That serialization was removed.", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516212532", "createdAt": "2020-11-02T19:42:46Z", "author": {"login": "frankgh"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -279,25 +255,18 @@ void initPartitionFields() {\n         numberOfPartitions = partitionColumnNames.size();\n     }\n \n-    private boolean columnDescriptorContainsColumn(String columnName) {\n-        return context.getTupleDescription()\n-                .stream()\n-                .anyMatch(cd -> columnName.equals(cd.columnName()));\n-    }\n-\n     /*\n      * The partition fields are initialized one time based on userData provided\n      * by the fragmenter.\n      */\n     void initTextPartitionFields(StringBuilder parts) {\n-        if (partitionKeys.equals(HiveDataFragmenter.HIVE_NO_PART_TBL)) {\n+        List<HivePartition> hivePartitionList = metadata.getPartitions();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5ODEyNw=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTAyNjU0OnYy", "diffSide": "RIGHT", "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToxNjowN1rOHsSSIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMTozNzoyMFrOHsWisw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5ODk0NA==", "bodyText": "are we deprecating DELIMITER user option (if it was used) ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516198944", "createdAt": "2020-11-02T19:16:07Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -681,11 +650,7 @@ void parseDelimiterChar(RequestContext input) {\n \n         if (userDelim == null) {\n             /* No DELIMITER in URL, try to get it from fragment's user data*/\n-            HiveUserData hiveUserData = HiveUtilities.parseHiveUserData(input);\n-            if (hiveUserData.getDelimiter() == null) {\n-                throw new IllegalArgumentException(\"DELIMITER is a required option\");\n-            }\n-            delimiter = (char) Integer.valueOf(hiveUserData.getDelimiter()).intValue();\n+            delimiter = (char) HiveUtilities.getDelimiterCode(metastoreProperties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI2ODcyMw==", "bodyText": "we probably don't need this branch of the code. I will add a TODO, but we might not want to remove this code as part of this PR", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516268723", "createdAt": "2020-11-02T21:37:20Z", "author": {"login": "frankgh"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -681,11 +650,7 @@ void parseDelimiterChar(RequestContext input) {\n \n         if (userDelim == null) {\n             /* No DELIMITER in URL, try to get it from fragment's user data*/\n-            HiveUserData hiveUserData = HiveUtilities.parseHiveUserData(input);\n-            if (hiveUserData.getDelimiter() == null) {\n-                throw new IllegalArgumentException(\"DELIMITER is a required option\");\n-            }\n-            delimiter = (char) Integer.valueOf(hiveUserData.getDelimiter()).intValue();\n+            delimiter = (char) HiveUtilities.getDelimiterCode(metastoreProperties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE5ODk0NA=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTAzMzk5OnYy", "diffSide": "RIGHT", "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToxODo0MFrOHsSWtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDo0MzozN1rOHsU9dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMDExOA==", "bodyText": "this is a bit clunky how this works with protected fields, let's discuss", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516200118", "createdAt": "2020-11-02T19:18:40Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -717,4 +682,35 @@ void parseDelimiterChar(RequestContext input) {\n             delimiter = userDelim.charAt(0);\n         }\n     }\n+\n+    protected Properties getSerdeProperties() {\n+        return metadata.getProperties();\n+    }\n+\n+    protected Deserializer getDeserializer() {\n+        if (d == null) {\n+            // HiveUserData is passed from accessor\n+            metadata = (HiveMetadata) context.getMetadata();\n+            if (metadata == null) {\n+                throw new RuntimeException(\"No hive metadata detected in request context\");\n+            }\n+\n+            try {\n+                parseUserData(context);\n+                initPartitionFields();\n+                Class<?> c = Class.forName(serdeClassName, true, JavaUtils.getClassLoader());\n+                d = (Deserializer) c.getDeclaredConstructor().newInstance();\n+                d.initialize(getJobConf(), metastoreProperties);\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Failed to initialize HiveResolver\", e);\n+            }\n+        }\n+        return d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0MjgwNQ==", "bodyText": "removed this method", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516242805", "createdAt": "2020-11-02T20:43:37Z", "author": {"login": "frankgh"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -717,4 +682,35 @@ void parseDelimiterChar(RequestContext input) {\n             delimiter = userDelim.charAt(0);\n         }\n     }\n+\n+    protected Properties getSerdeProperties() {\n+        return metadata.getProperties();\n+    }\n+\n+    protected Deserializer getDeserializer() {\n+        if (d == null) {\n+            // HiveUserData is passed from accessor\n+            metadata = (HiveMetadata) context.getMetadata();\n+            if (metadata == null) {\n+                throw new RuntimeException(\"No hive metadata detected in request context\");\n+            }\n+\n+            try {\n+                parseUserData(context);\n+                initPartitionFields();\n+                Class<?> c = Class.forName(serdeClassName, true, JavaUtils.getClassLoader());\n+                d = (Deserializer) c.getDeclaredConstructor().newInstance();\n+                d.initialize(getJobConf(), metastoreProperties);\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Failed to initialize HiveResolver\", e);\n+            }\n+        }\n+        return d;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMDExOA=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTAzNjI0OnYy", "diffSide": "RIGHT", "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToxOToyMVrOHsSYEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMTo0Mjo1MVrOHsWsqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMDQ2NQ==", "bodyText": "do we care about case insensitivity ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516200465", "createdAt": "2020-11-02T19:19:21Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -717,4 +682,35 @@ void parseDelimiterChar(RequestContext input) {\n             delimiter = userDelim.charAt(0);\n         }\n     }\n+\n+    protected Properties getSerdeProperties() {\n+        return metadata.getProperties();\n+    }\n+\n+    protected Deserializer getDeserializer() {\n+        if (d == null) {\n+            // HiveUserData is passed from accessor\n+            metadata = (HiveMetadata) context.getMetadata();\n+            if (metadata == null) {\n+                throw new RuntimeException(\"No hive metadata detected in request context\");\n+            }\n+\n+            try {\n+                parseUserData(context);\n+                initPartitionFields();\n+                Class<?> c = Class.forName(serdeClassName, true, JavaUtils.getClassLoader());\n+                d = (Deserializer) c.getDeclaredConstructor().newInstance();\n+                d.initialize(getJobConf(), metastoreProperties);\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Failed to initialize HiveResolver\", e);\n+            }\n+        }\n+        return d;\n+    }\n+\n+    private boolean columnDescriptorContainsColumn(String columnName) {\n+        return context.getTupleDescription()\n+                .stream()\n+                .anyMatch(cd -> columnName.equals(cd.columnName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxNDU0Ng==", "bodyText": "probably not, this method was just moved to the bottom since it's a private method.", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516214546", "createdAt": "2020-11-02T19:46:26Z", "author": {"login": "frankgh"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -717,4 +682,35 @@ void parseDelimiterChar(RequestContext input) {\n             delimiter = userDelim.charAt(0);\n         }\n     }\n+\n+    protected Properties getSerdeProperties() {\n+        return metadata.getProperties();\n+    }\n+\n+    protected Deserializer getDeserializer() {\n+        if (d == null) {\n+            // HiveUserData is passed from accessor\n+            metadata = (HiveMetadata) context.getMetadata();\n+            if (metadata == null) {\n+                throw new RuntimeException(\"No hive metadata detected in request context\");\n+            }\n+\n+            try {\n+                parseUserData(context);\n+                initPartitionFields();\n+                Class<?> c = Class.forName(serdeClassName, true, JavaUtils.getClassLoader());\n+                d = (Deserializer) c.getDeclaredConstructor().newInstance();\n+                d.initialize(getJobConf(), metastoreProperties);\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Failed to initialize HiveResolver\", e);\n+            }\n+        }\n+        return d;\n+    }\n+\n+    private boolean columnDescriptorContainsColumn(String columnName) {\n+        return context.getTupleDescription()\n+                .stream()\n+                .anyMatch(cd -> columnName.equals(cd.columnName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMDQ2NQ=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MTI3NA==", "bodyText": "yes, I will take care of it. Thanks!", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516271274", "createdAt": "2020-11-02T21:42:51Z", "author": {"login": "frankgh"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveResolver.java", "diffHunk": "@@ -717,4 +682,35 @@ void parseDelimiterChar(RequestContext input) {\n             delimiter = userDelim.charAt(0);\n         }\n     }\n+\n+    protected Properties getSerdeProperties() {\n+        return metadata.getProperties();\n+    }\n+\n+    protected Deserializer getDeserializer() {\n+        if (d == null) {\n+            // HiveUserData is passed from accessor\n+            metadata = (HiveMetadata) context.getMetadata();\n+            if (metadata == null) {\n+                throw new RuntimeException(\"No hive metadata detected in request context\");\n+            }\n+\n+            try {\n+                parseUserData(context);\n+                initPartitionFields();\n+                Class<?> c = Class.forName(serdeClassName, true, JavaUtils.getClassLoader());\n+                d = (Deserializer) c.getDeclaredConstructor().newInstance();\n+                d.initialize(getJobConf(), metastoreProperties);\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Failed to initialize HiveResolver\", e);\n+            }\n+        }\n+        return d;\n+    }\n+\n+    private boolean columnDescriptorContainsColumn(String columnName) {\n+        return context.getTupleDescription()\n+                .stream()\n+                .anyMatch(cd -> columnName.equals(cd.columnName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMDQ2NQ=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTA0MTA3OnYy", "diffSide": "LEFT", "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveStringPassResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToyMDo0M1rOHsSa4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDo0NzowN1rOHsVEZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMTE4Nw==", "bodyText": "are we losing the logic to not init serde on TEXT output format ?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516201187", "createdAt": "2020-11-02T19:20:43Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveStringPassResolver.java", "diffHunk": "@@ -39,24 +38,10 @@\n     private StringBuilder parts;\n \n     @Override\n-    void parseUserData(RequestContext input) throws Exception {\n-        HiveUserData hiveUserData = HiveUtilities.parseHiveUserData(input);\n-        parseDelimiterChar(input);\n+    void parseUserData(RequestContext context) {\n+        super.parseUserData(context);\n+        parseDelimiterChar(context);\n         parts = new StringBuilder();\n-        partitionKeys = hiveUserData.getPartitionKeys();\n-        serdeClassName = hiveUserData.getSerdeClassName();\n-\n-        /* Needed only for GPDBWritable format*/\n-        if (context.getOutputFormat() == OutputFormat.GPDBWritable) {\n-            propsString = hiveUserData.getPropertiesString();\n-        }\n-    }\n-\n-    @Override\n-    void initSerde(RequestContext input) throws Exception {\n-        if (context.getOutputFormat() == OutputFormat.GPDBWritable) {\n-            super.initSerde(input);\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMzMyOQ==", "bodyText": "serde gets initialized during getDeserializer which is not called for the TEXT case", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516213329", "createdAt": "2020-11-02T19:44:24Z", "author": {"login": "frankgh"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveStringPassResolver.java", "diffHunk": "@@ -39,24 +38,10 @@\n     private StringBuilder parts;\n \n     @Override\n-    void parseUserData(RequestContext input) throws Exception {\n-        HiveUserData hiveUserData = HiveUtilities.parseHiveUserData(input);\n-        parseDelimiterChar(input);\n+    void parseUserData(RequestContext context) {\n+        super.parseUserData(context);\n+        parseDelimiterChar(context);\n         parts = new StringBuilder();\n-        partitionKeys = hiveUserData.getPartitionKeys();\n-        serdeClassName = hiveUserData.getSerdeClassName();\n-\n-        /* Needed only for GPDBWritable format*/\n-        if (context.getOutputFormat() == OutputFormat.GPDBWritable) {\n-            propsString = hiveUserData.getPropertiesString();\n-        }\n-    }\n-\n-    @Override\n-    void initSerde(RequestContext input) throws Exception {\n-        if (context.getOutputFormat() == OutputFormat.GPDBWritable) {\n-            super.initSerde(input);\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMTE4Nw=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0NDU4Mg==", "bodyText": "I am changing this code anyway because of the way we initialize, so it will look more like the version from master", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516244582", "createdAt": "2020-11-02T20:47:07Z", "author": {"login": "frankgh"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveStringPassResolver.java", "diffHunk": "@@ -39,24 +38,10 @@\n     private StringBuilder parts;\n \n     @Override\n-    void parseUserData(RequestContext input) throws Exception {\n-        HiveUserData hiveUserData = HiveUtilities.parseHiveUserData(input);\n-        parseDelimiterChar(input);\n+    void parseUserData(RequestContext context) {\n+        super.parseUserData(context);\n+        parseDelimiterChar(context);\n         parts = new StringBuilder();\n-        partitionKeys = hiveUserData.getPartitionKeys();\n-        serdeClassName = hiveUserData.getSerdeClassName();\n-\n-        /* Needed only for GPDBWritable format*/\n-        if (context.getOutputFormat() == OutputFormat.GPDBWritable) {\n-            propsString = hiveUserData.getPropertiesString();\n-        }\n-    }\n-\n-    @Override\n-    void initSerde(RequestContext input) throws Exception {\n-        if (context.getOutputFormat() == OutputFormat.GPDBWritable) {\n-            super.initSerde(input);\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMTE4Nw=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTA0NDk2OnYy", "diffSide": "RIGHT", "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveStringPassResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToyMTo1NVrOHsSdOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDo1NDo0MFrOHsVSvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMTc4NA==", "bodyText": "kinda feels this belongs in a superclass", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516201784", "createdAt": "2020-11-02T19:21:55Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveStringPassResolver.java", "diffHunk": "@@ -84,4 +70,23 @@ void initPartitionFields() {\n         }\n     }\n \n+    /**\n+     * Make sure the required fields have been initialized\n+     */\n+    private void ensureInitialized() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMzQ1Ng==", "bodyText": "it only applies to TEXT", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516213456", "createdAt": "2020-11-02T19:44:37Z", "author": {"login": "frankgh"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveStringPassResolver.java", "diffHunk": "@@ -84,4 +70,23 @@ void initPartitionFields() {\n         }\n     }\n \n+    /**\n+     * Make sure the required fields have been initialized\n+     */\n+    private void ensureInitialized() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMTc4NA=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0ODI1NA==", "bodyText": "removed", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516248254", "createdAt": "2020-11-02T20:54:40Z", "author": {"login": "frankgh"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/HiveStringPassResolver.java", "diffHunk": "@@ -84,4 +70,23 @@ void initPartitionFields() {\n         }\n     }\n \n+    /**\n+     * Make sure the required fields have been initialized\n+     */\n+    private void ensureInitialized() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMTc4NA=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTA1MDExOnYy", "diffSide": "RIGHT", "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/utilities/HiveUtilities.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToyMzozN1rOHsSgZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDo0ODozOFrOHsVHRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMjU5Nw==", "bodyText": "not sure this method belongs here, it is very context heavy", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516202597", "createdAt": "2020-11-02T19:23:37Z", "author": {"login": "denalex"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/utilities/HiveUtilities.java", "diffHunk": "@@ -204,68 +199,62 @@ public static void validateTypeCompatible(DataType gpdbDataType, Integer[] gpdbT\n     }\n \n     /**\n-     * The method parses raw user data into HiveUserData class\n+     * Creates ORC file reader.\n      *\n-     * @param context input data\n-     * @return instance of HiveUserData class\n-     * @throws IllegalArgumentException when incorrect number of tokens in Hive user data received\n+     * @param requestContext input data with given data source\n+     * @return ORC file reader\n      */\n-    public static HiveUserData parseHiveUserData(RequestContext context) throws IllegalArgumentException {\n-        String userData = new String(context.getFragmentUserData());\n-        String[] toks = userData.split(HiveUserData.HIVE_UD_DELIM, HiveUserData.getNumOfTokens());\n-\n-        if (toks.length != (HiveUserData.getNumOfTokens())) {\n-            throw new IllegalArgumentException(\"HiveInputFormatFragmenter expected \"\n-                    + HiveUserData.getNumOfTokens() + \" tokens, but got \" + toks.length);\n-        }\n-\n-        String indexesStr = toks[8];\n-        List<Integer> indexes = null;\n-\n-        if (indexesStr != null && !\"null\".equals(indexesStr)) {\n-            indexes = Stream.of(indexesStr.split(\",\"))\n-                    .map(s -> \"null\".equals(s) ? null : Integer.parseInt(s))\n-                    .collect(Collectors.toList());\n+    public static Reader getOrcReader(Configuration configuration, RequestContext requestContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0NTMxNw==", "bodyText": "you mentioned you refactored this code, so I am hoping this will be resolved in your branch?", "url": "https://github.com/greenplum-db/pxf/pull/474#discussion_r516245317", "createdAt": "2020-11-02T20:48:38Z", "author": {"login": "frankgh"}, "path": "server/pxf-hive/src/main/java/org/greenplum/pxf/plugins/hive/utilities/HiveUtilities.java", "diffHunk": "@@ -204,68 +199,62 @@ public static void validateTypeCompatible(DataType gpdbDataType, Integer[] gpdbT\n     }\n \n     /**\n-     * The method parses raw user data into HiveUserData class\n+     * Creates ORC file reader.\n      *\n-     * @param context input data\n-     * @return instance of HiveUserData class\n-     * @throws IllegalArgumentException when incorrect number of tokens in Hive user data received\n+     * @param requestContext input data with given data source\n+     * @return ORC file reader\n      */\n-    public static HiveUserData parseHiveUserData(RequestContext context) throws IllegalArgumentException {\n-        String userData = new String(context.getFragmentUserData());\n-        String[] toks = userData.split(HiveUserData.HIVE_UD_DELIM, HiveUserData.getNumOfTokens());\n-\n-        if (toks.length != (HiveUserData.getNumOfTokens())) {\n-            throw new IllegalArgumentException(\"HiveInputFormatFragmenter expected \"\n-                    + HiveUserData.getNumOfTokens() + \" tokens, but got \" + toks.length);\n-        }\n-\n-        String indexesStr = toks[8];\n-        List<Integer> indexes = null;\n-\n-        if (indexesStr != null && !\"null\".equals(indexesStr)) {\n-            indexes = Stream.of(indexesStr.split(\",\"))\n-                    .map(s -> \"null\".equals(s) ? null : Integer.parseInt(s))\n-                    .collect(Collectors.toList());\n+    public static Reader getOrcReader(Configuration configuration, RequestContext requestContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMjU5Nw=="}, "originalCommit": {"oid": "e431cec5e4393405c20fa37d1b3155a6ab8b711b"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3508, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}