{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMTk2NjQ2", "number": 288, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMToyMzozMVrODXB5WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMToyNzo1MFrODXB7kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDc0OTA0OnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMToyMzozMVrOFcIEcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzo0ODowMVrOFcUiSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzNjY1Nw==", "bodyText": "wonder how BitSet would behave, the largest int value is 701 (FLOAT8), which will make BitSet-backing array about 88 bytes long, which is not a big deal and checking is a binary operation (actually check : isText = (oid > set.size()-1 || !set.get(oid))\nAlso, there are other OIDs (like NUMERIC(1700)) that are not lister here, but probably are not text also ?", "url": "https://github.com/greenplum-db/pxf/pull/288#discussion_r365036657", "createdAt": "2020-01-10T01:23:31Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java", "diffHunk": "@@ -64,7 +64,8 @@\n     UNSUPPORTED_TYPE(-1);\n \n     private static final Map<Integer, DataType> lookup = new HashMap<>();\n-    private static final Set<Integer> notText = new HashSet<>();\n+    private static final int[] NOT_TEXT = {BIGINT.OID, BOOLEAN.OID, BYTEA.OID,\n+            FLOAT8.OID, INTEGER.OID, REAL.OID, SMALLINT.OID};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7ac326b31c2035954164d1093bbaa56eb6e5a1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIzMTYyMQ==", "bodyText": "Well, the array only uses 4 bytes/element * 7 elements = 28 bytes. I think speed-wise, the speed difference between BitSet#get vs iterating over a small array should be negligible. I'm not sure why NUMERIC is not included, will add it and see if something breaks", "url": "https://github.com/greenplum-db/pxf/pull/288#discussion_r365231621", "createdAt": "2020-01-10T13:26:07Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java", "diffHunk": "@@ -64,7 +64,8 @@\n     UNSUPPORTED_TYPE(-1);\n \n     private static final Map<Integer, DataType> lookup = new HashMap<>();\n-    private static final Set<Integer> notText = new HashSet<>();\n+    private static final int[] NOT_TEXT = {BIGINT.OID, BOOLEAN.OID, BYTEA.OID,\n+            FLOAT8.OID, INTEGER.OID, REAL.OID, SMALLINT.OID};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzNjY1Nw=="}, "originalCommit": {"oid": "9f7ac326b31c2035954164d1093bbaa56eb6e5a1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0MDkwNA==", "bodyText": "Ok, it turns out that NUMERIC is treated as TEXT because GPDBWritable serializes it as a string:\nhttps://github.com/greenplum-db/pxf/blob/master/server/pxf-service/src/main/java/org/greenplum/pxf/service/BridgeOutputBuilder.java#L409", "url": "https://github.com/greenplum-db/pxf/pull/288#discussion_r365240904", "createdAt": "2020-01-10T13:48:01Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java", "diffHunk": "@@ -64,7 +64,8 @@\n     UNSUPPORTED_TYPE(-1);\n \n     private static final Map<Integer, DataType> lookup = new HashMap<>();\n-    private static final Set<Integer> notText = new HashSet<>();\n+    private static final int[] NOT_TEXT = {BIGINT.OID, BOOLEAN.OID, BYTEA.OID,\n+            FLOAT8.OID, INTEGER.OID, REAL.OID, SMALLINT.OID};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzNjY1Nw=="}, "originalCommit": {"oid": "9f7ac326b31c2035954164d1093bbaa56eb6e5a1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDc1NDc1OnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/GreenplumCSV.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMToyNzo1MFrOFcIH7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMToyNzo1MFrOFcIH7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzNzU0OA==", "bodyText": "even better to move to constructor and to withNewLine() method so it is analyzed only once per instance.", "url": "https://github.com/greenplum-db/pxf/pull/288#discussion_r365037548", "createdAt": "2020-01-10T01:27:50Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/GreenplumCSV.java", "diffHunk": "@@ -174,28 +174,28 @@ public String toCsvField(String s,\n         if (s == null) return null;\n \n         final int length = s.length();\n-        int i, j, quotes = 0, specialChars = 0, pos = 0, total = length;\n+        int i, j, quotes = 0, specialChars = 0, pos = 0, total = length,\n+                newLineLength = newline != null ? newline.length() : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7ac326b31c2035954164d1093bbaa56eb6e5a1"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3563, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}