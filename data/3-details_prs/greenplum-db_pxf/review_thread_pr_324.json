{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NzE2OTIx", "number": 324, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0ODozOFrODto-CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoxNzo0MFrODtpncA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTgzNzUzOnYy", "diffSide": "RIGHT", "path": "automation/tincrepo/main/pxf/features/parquet/padded_char_pushdown/expected/query01.ans", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0ODozOFrOF_L2Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODozOToyNlrOF_Nrfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5ODY5NA==", "bodyText": "would be nice to have a query that also uses WHERE c1 = 'a  ' to make sure if a user specifies a padded value we can handle that as well.", "url": "https://github.com/greenplum-db/pxf/pull/324#discussion_r401798694", "createdAt": "2020-04-01T17:48:38Z", "author": {"login": "denalex"}, "path": "automation/tincrepo/main/pxf/features/parquet/padded_char_pushdown/expected/query01.ans", "diffHunk": "@@ -0,0 +1,54 @@\n+-- start_ignore\n+-- end_ignore\n+-- @description query01 for pushing down predicates of type char that were\n+-- padded during write. Hive right trims values for type char, for example\n+-- when a value 'a  ' is inserted into a Hive table stored as parquet, Hive will\n+-- only store 'a' in the parquet file.\n+-- Display on for output consistency between GPDB 5 and 6\n+\\x on\n+Expanded display is on.\n+\\pset format unaligned\n+Output format is unaligned.\n+SELECT s1, s2, n1, d1, dc1, f, bg, b, tn, sml, vc1, c1, bin FROM parquet_view WHERE c1 = 'a' OR c1 = e'b\\t' OR c1 = e'c\\n' ORDER BY s1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyODczNA==", "bodyText": "good point, but I'm pretty sure it won't be handled. Should we trim the predicate? Or should we add an OR for these predicates on the server side ( c1 = 'a ' OR c1 = 'a' )", "url": "https://github.com/greenplum-db/pxf/pull/324#discussion_r401828734", "createdAt": "2020-04-01T18:39:26Z", "author": {"login": "frankgh"}, "path": "automation/tincrepo/main/pxf/features/parquet/padded_char_pushdown/expected/query01.ans", "diffHunk": "@@ -0,0 +1,54 @@\n+-- start_ignore\n+-- end_ignore\n+-- @description query01 for pushing down predicates of type char that were\n+-- padded during write. Hive right trims values for type char, for example\n+-- when a value 'a  ' is inserted into a Hive table stored as parquet, Hive will\n+-- only store 'a' in the parquet file.\n+-- Display on for output consistency between GPDB 5 and 6\n+\\x on\n+Expanded display is on.\n+\\pset format unaligned\n+Output format is unaligned.\n+SELECT s1, s2, n1, d1, dc1, f, bg, b, tn, sml, vc1, c1, bin FROM parquet_view WHERE c1 = 'a' OR c1 = e'b\\t' OR c1 = e'c\\n' ORDER BY s1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5ODY5NA=="}, "originalCommit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTg0NjU3OnYy", "diffSide": "RIGHT", "path": "server/pxf-hdfs/src/main/java/org/greenplum/pxf/plugins/hdfs/ParquetResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MTowMVrOF_L7yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODozNTozMFrOF_NiZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMDEzOQ==", "bodyText": "Interesting to me that we need to check if field.val is a String. What's the reason?", "url": "https://github.com/greenplum-db/pxf/pull/324#discussion_r401800139", "createdAt": "2020-04-01T17:51:01Z", "author": {"login": "oliverralbertini"}, "path": "server/pxf-hdfs/src/main/java/org/greenplum/pxf/plugins/hdfs/ParquetResolver.java", "diffHunk": "@@ -90,7 +91,19 @@ public OneRow setFields(List<OneField> record) throws IOException {\n         validateSchema();\n         Group group = groupFactory.newGroup();\n         for (int i = 0; i < record.size(); i++) {\n-            fillGroup(i, record.get(i), group, schema.getType(i));\n+            OneField field = record.get(i);\n+            ColumnDescriptor columnDescriptor = context.getTupleDescription().get(i);\n+\n+            /*\n+             * We need to right trim the incoming value from Greenplum. This is\n+             * consistent with the behaviour in Hive, where char fields are right\n+             * trimmed during write. Note that String and varchar Hive types are\n+             * not right trimmed. Hive does not trim tabs or newlines\n+             */\n+            if (columnDescriptor.getDataType() == DataType.BPCHAR && field.val instanceof String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyNjQwNA==", "bodyText": "because field.val is of Object type", "url": "https://github.com/greenplum-db/pxf/pull/324#discussion_r401826404", "createdAt": "2020-04-01T18:35:30Z", "author": {"login": "frankgh"}, "path": "server/pxf-hdfs/src/main/java/org/greenplum/pxf/plugins/hdfs/ParquetResolver.java", "diffHunk": "@@ -90,7 +91,19 @@ public OneRow setFields(List<OneField> record) throws IOException {\n         validateSchema();\n         Group group = groupFactory.newGroup();\n         for (int i = 0; i < record.size(); i++) {\n-            fillGroup(i, record.get(i), group, schema.getType(i));\n+            OneField field = record.get(i);\n+            ColumnDescriptor columnDescriptor = context.getTupleDescription().get(i);\n+\n+            /*\n+             * We need to right trim the incoming value from Greenplum. This is\n+             * consistent with the behaviour in Hive, where char fields are right\n+             * trimmed during write. Note that String and varchar Hive types are\n+             * not right trimmed. Hive does not trim tabs or newlines\n+             */\n+            if (columnDescriptor.getDataType() == DataType.BPCHAR && field.val instanceof String) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMDEzOQ=="}, "originalCommit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTg2ODc4OnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/test/java/org/greenplum/pxf/api/utilities/UtilitiesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1Njo1N1rOF_MJ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1Njo1N1rOF_MJ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMzc1MA==", "bodyText": "assertEquals(\"\", Utilities.rightTrimWhiteSpace(\"\"));", "url": "https://github.com/greenplum-db/pxf/pull/324#discussion_r401803750", "createdAt": "2020-04-01T17:56:57Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/test/java/org/greenplum/pxf/api/utilities/UtilitiesTest.java", "diffHunk": "@@ -168,6 +168,20 @@ public boolean isThreadSafe() {\n         }\n     }\n \n+    @Test\n+    public void testRightTrimWhitespace() {\n+        assertNull(Utilities.rightTrimWhiteSpace(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTk0MzUyOnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/Utilities.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoxNzo0MFrOF_M5NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODozNDo1NlrOF_NhIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxNTg2MQ==", "bodyText": "I would be more in favor of this:\npublic static String rightTrimWhiteSpace(String s) {\n        if (s == null) return null;\n        return s.replaceAll(\" +$\", \"\");\n    }", "url": "https://github.com/greenplum-db/pxf/pull/324#discussion_r401815861", "createdAt": "2020-04-01T18:17:40Z", "author": {"login": "oliverralbertini"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/Utilities.java", "diffHunk": "@@ -332,4 +330,31 @@ public static boolean isSecurityEnabled(Configuration configuration) {\n         return SecurityUtil.getAuthenticationMethod(configuration) !=\n                 UserGroupInformation.AuthenticationMethod.SIMPLE;\n     }\n+\n+    /**\n+     * Right trim whitespace on a string (it does not trim tabs)\n+     * <p>\n+     *     <ul>\n+     *         <li>null returns null</li>\n+     *         <li>\"abc\" returns \"abc\"</li>\n+     *         <li>\" abc\" returns \" abc\"</li>\n+     *         <li>\"abc \" returns \"abc\"</li>\n+     *         <li>\"    \" returns \"\"</li>\n+     *         <li>\"abc \\t \" returns \"abc \\t\"</li>\n+     *         <li>\"abc \\t\\t\" returns \"abc \\t\\t\"</li>\n+     *     </ul>\n+     * </p>\n+     *\n+     * @param s the string\n+     * @return the right trimmed string\n+     */\n+    public static String rightTrimWhiteSpace(String s) {\n+        if (s == null) return null;\n+        int length = s.length();\n+        while (length > 0 && s.charAt(length - 1) == ' ') length--;\n+\n+        if (length == s.length()) return s;\n+        if (length == 0) return \"\";\n+        return s.substring(0, length);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxNjgzMA==", "bodyText": "Do we need tests in UtilitiesTest.java?", "url": "https://github.com/greenplum-db/pxf/pull/324#discussion_r401816830", "createdAt": "2020-04-01T18:19:19Z", "author": {"login": "oliverralbertini"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/Utilities.java", "diffHunk": "@@ -332,4 +330,31 @@ public static boolean isSecurityEnabled(Configuration configuration) {\n         return SecurityUtil.getAuthenticationMethod(configuration) !=\n                 UserGroupInformation.AuthenticationMethod.SIMPLE;\n     }\n+\n+    /**\n+     * Right trim whitespace on a string (it does not trim tabs)\n+     * <p>\n+     *     <ul>\n+     *         <li>null returns null</li>\n+     *         <li>\"abc\" returns \"abc\"</li>\n+     *         <li>\" abc\" returns \" abc\"</li>\n+     *         <li>\"abc \" returns \"abc\"</li>\n+     *         <li>\"    \" returns \"\"</li>\n+     *         <li>\"abc \\t \" returns \"abc \\t\"</li>\n+     *         <li>\"abc \\t\\t\" returns \"abc \\t\\t\"</li>\n+     *     </ul>\n+     * </p>\n+     *\n+     * @param s the string\n+     * @return the right trimmed string\n+     */\n+    public static String rightTrimWhiteSpace(String s) {\n+        if (s == null) return null;\n+        int length = s.length();\n+        while (length > 0 && s.charAt(length - 1) == ' ') length--;\n+\n+        if (length == s.length()) return s;\n+        if (length == 0) return \"\";\n+        return s.substring(0, length);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxNTg2MQ=="}, "originalCommit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyNjA4Mg==", "bodyText": "I'm not a huge fan of regex. We have tests in UtilitiesTest.java as part of the PR.", "url": "https://github.com/greenplum-db/pxf/pull/324#discussion_r401826082", "createdAt": "2020-04-01T18:34:56Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/Utilities.java", "diffHunk": "@@ -332,4 +330,31 @@ public static boolean isSecurityEnabled(Configuration configuration) {\n         return SecurityUtil.getAuthenticationMethod(configuration) !=\n                 UserGroupInformation.AuthenticationMethod.SIMPLE;\n     }\n+\n+    /**\n+     * Right trim whitespace on a string (it does not trim tabs)\n+     * <p>\n+     *     <ul>\n+     *         <li>null returns null</li>\n+     *         <li>\"abc\" returns \"abc\"</li>\n+     *         <li>\" abc\" returns \" abc\"</li>\n+     *         <li>\"abc \" returns \"abc\"</li>\n+     *         <li>\"    \" returns \"\"</li>\n+     *         <li>\"abc \\t \" returns \"abc \\t\"</li>\n+     *         <li>\"abc \\t\\t\" returns \"abc \\t\\t\"</li>\n+     *     </ul>\n+     * </p>\n+     *\n+     * @param s the string\n+     * @return the right trimmed string\n+     */\n+    public static String rightTrimWhiteSpace(String s) {\n+        if (s == null) return null;\n+        int length = s.length();\n+        while (length > 0 && s.charAt(length - 1) == ' ') length--;\n+\n+        if (length == s.length()) return s;\n+        if (length == 0) return \"\";\n+        return s.substring(0, length);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxNTg2MQ=="}, "originalCommit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3606, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}