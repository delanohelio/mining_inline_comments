{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNTI0NTQz", "number": 378, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzoxNzoyM1rOEHL7CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODowMTozNFrOEHMoog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTcwODI1OnYy", "diffSide": "RIGHT", "path": "Makefile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzoxNzoyM1rOGmcCMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzoxNzoyM1rOGmcCMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk1ODM4NA==", "bodyText": "call it install-server", "url": "https://github.com/greenplum-db/pxf/pull/378#discussion_r442958384", "createdAt": "2020-06-19T17:17:23Z", "author": {"login": "frankgh"}, "path": "Makefile", "diffHunk": "@@ -39,6 +39,10 @@ install:\n \tmake -C cli/go/src/pxf-cli install\n \tmake -C server install\n \n+install-dev:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eefe6b3b04345fd5351a1c1255a4d2b95e6de607"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTcyMzE2OnYy", "diffSide": "RIGHT", "path": "automation/tincrepo/main/pxf/features/cloud_access/no_server_credentials_no_config_with_hdfs/expected/query01.ans", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzoyMjowMlrOGmcLIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzoyMjowMlrOGmcLIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2MDY3Mg==", "bodyText": "we need tests for the output when we enable DEBUG1 for client_min_messages", "url": "https://github.com/greenplum-db/pxf/pull/378#discussion_r442960672", "createdAt": "2020-06-19T17:22:02Z", "author": {"login": "frankgh"}, "path": "automation/tincrepo/main/pxf/features/cloud_access/no_server_credentials_no_config_with_hdfs/expected/query01.ans", "diffHunk": "@@ -25,5 +20,8 @@\n --\n -- end_matchsubs\n SELECT *  FROM cloudaccess_no_server_credentials_no_config_with_hdfs;\n-ERROR:  remote component error (500) from 'SOME_IP:SOME_PORT':  type  Exception SOME_EXCEPTION\n+ERROR:  PXF server error : profile 's3a' is not compatible with server's 'default' configuration ('hdfs')\n+-- start_ignore\n+HINT:  Ensure that 'server-dir' includes only the configuration files for profile 's3a'. Check the PXF logs located in the 'logs-dir' directory on host 'mdw' or 'set client_min_messages=DEBUG1' for additional details.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eefe6b3b04345fd5351a1c1255a4d2b95e6de607"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTcyODIxOnYy", "diffSide": "RIGHT", "path": "automation/tincrepo/main/pxf/features/general/outOfMemory/expected/query01.ans", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzoyMzo1OVrOGmcOZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzoyMzo1OVrOGmcOZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2MTUwOA==", "bodyText": "this needs to say in the 'log-dir' ...", "url": "https://github.com/greenplum-db/pxf/pull/378#discussion_r442961508", "createdAt": "2020-06-19T17:23:59Z", "author": {"login": "frankgh"}, "path": "automation/tincrepo/main/pxf/features/general/outOfMemory/expected/query01.ans", "diffHunk": "@@ -26,7 +17,10 @@\n --\n -- end_matchsubs\n SELECT * from test_out_of_memory;\n-ERROR:  remote component error (500) from 'SOME_IP:SOME_PORT':  type  Exception java.lang.OutOfMemoryError: Java heap space\n+ERROR:  PXF server error : java.lang.OutOfMemoryError: Java heap space\n+-- start_ignore\n+HINT:  Check the PXF logs located in the '/Users/fguerrero/not-pxf/logs' directory on host 'fguerrero' or 'set client_min_messages=DEBUG1' for additional details.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eefe6b3b04345fd5351a1c1255a4d2b95e6de607"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTc1MDQxOnYy", "diffSide": "RIGHT", "path": "external-table/src/libchurl.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzozMjo1OVrOGmcc4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzozMjo1OVrOGmcc4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2NTIxOA==", "bodyText": "show the stacktrace as a different err type (maybe errdetail).", "url": "https://github.com/greenplum-db/pxf/pull/378#discussion_r442965218", "createdAt": "2020-06-19T17:32:59Z", "author": {"login": "frankgh"}, "path": "external-table/src/libchurl.c", "diffHunk": "@@ -966,29 +958,53 @@ check_response_code(churl_context *context)\n \t\t\t * response_text could be NULL in some cases. get_http_error_msg\n \t\t\t * checks for that.\n \t\t\t */\n-\t\t\thttp_error_msg = get_http_error_msg(response_code, response_text, context->curl_error_buffer);\n+\t\t\thttp_error_msg = get_http_error_msg(response_code, response_text, context->curl_error_buffer, &hint_msg, &trace_msg);\n \n-\t\t\t/*\n-\t\t\t * check for a specific confusing error, and replace with a\n-\t\t\t * clearer one\n-\t\t\t */\n-\t\t\tif (strstr(http_error_msg, \"instance does not contain any root resource classes\") != NULL)\n-\t\t\t{\n-\t\t\t\tappendStringInfo(&err, \" : PXF not correctly installed in CLASSPATH\");\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tappendStringInfo(&err, \": %s\", http_error_msg);\n-\t\t\t}\n+\t\t\tappendStringInfo(&err, \" : %s\", http_error_msg);\n \t\t}\n \n-\t\telog(ERROR, \"%s\", err.data);\n-\n+\t\tif (trace_msg != NULL || hint_msg != NULL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eefe6b3b04345fd5351a1c1255a4d2b95e6de607"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTc2MzgyOnYy", "diffSide": "LEFT", "path": "package/pxf-gp5.spec", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzozODoyMlrOGmclfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMzoyNTo1NlrOGmmj0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2NzQyMQ==", "bodyText": "double check that the preuninstall is for this RPM version and not the previous RPM version.", "url": "https://github.com/greenplum-db/pxf/pull/378#discussion_r442967421", "createdAt": "2020-06-19T17:38:22Z", "author": {"login": "frankgh"}, "path": "package/pxf-gp5.spec", "diffHunk": "@@ -39,6 +39,4 @@ fi\n \n %preun\n # cleanup files and directories created by 'pxf init' command\n-%__rm -f %{prefix}/conf/pxf-private.classpath", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eefe6b3b04345fd5351a1c1255a4d2b95e6de607"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMDgzMw==", "bodyText": "RPM %preun removes files of old package, and the %preun of the old package is run", "url": "https://github.com/greenplum-db/pxf/pull/378#discussion_r443130833", "createdAt": "2020-06-20T13:25:56Z", "author": {"login": "frankgh"}, "path": "package/pxf-gp5.spec", "diffHunk": "@@ -39,6 +39,4 @@ fi\n \n %preun\n # cleanup files and directories created by 'pxf init' command\n-%__rm -f %{prefix}/conf/pxf-private.classpath", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2NzQyMQ=="}, "originalCommit": {"oid": "eefe6b3b04345fd5351a1c1255a4d2b95e6de607"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTc2NTMwOnYy", "diffSide": "RIGHT", "path": "server/Makefile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzozOTowMVrOGmcmag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzozOTowMVrOGmcmag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2NzY1OA==", "bodyText": "install-server", "url": "https://github.com/greenplum-db/pxf/pull/378#discussion_r442967658", "createdAt": "2020-06-19T17:39:01Z", "author": {"login": "frankgh"}, "path": "server/Makefile", "diffHunk": "@@ -84,6 +84,14 @@ install: stage\n \tmkdir -p \"$(PXF_HOME)\"\n \tcp -R build/stage/pxf/* \"$(PXF_HOME)\"\n \n+.PHONY: install-dev\n+install-dev: stage-notest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eefe6b3b04345fd5351a1c1255a4d2b95e6de607"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTgwMzYxOnYy", "diffSide": "RIGHT", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzo1MzoxNVrOGmc-jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozMjoxMlrOGogLaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3MzgzOA==", "bodyText": "this will share the pool within the application. so this is not what we intended to do", "url": "https://github.com/greenplum-db/pxf/pull/378#discussion_r442973838", "createdAt": "2020-06-19T17:53:15Z", "author": {"login": "frankgh"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "diffHunk": "@@ -48,11 +45,22 @@ public void configureAsyncSupport(AsyncSupportConfigurer configurer) {\n         builder = builder.awaitTermination(shutdown.isAwaitTermination());\n         builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod());\n         builder = builder.threadNamePrefix(properties.getThreadNamePrefix());\n+        builder = builder.customizers(taskExecutorCustomizers.orderedStream()::iterator);\n+        builder = builder.taskDecorator(taskDecorator.getIfUnique());\n+        return builder;\n+    }\n \n-        ThreadPoolTaskExecutor taskExecutor = builder.build(PxfThreadPoolTaskExecutor.class);\n-\n-        taskExecutor.initialize();\n-        configurer.setTaskExecutor(taskExecutor);\n-\n+    /**\n+     * Builds the {@link ThreadPoolTaskExecutor} that has previously been\n+     * configured\n+     *\n+     * @param builder the {@link TaskExecutorBuilder} object\n+     * @return the {@link ThreadPoolTaskExecutor} that has previously been configured\n+     */\n+    @Lazy\n+    @Bean(name = {APPLICATION_TASK_EXECUTOR_BEAN_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eefe6b3b04345fd5351a1c1255a4d2b95e6de607"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMzQzMg==", "bodyText": "fixed", "url": "https://github.com/greenplum-db/pxf/pull/378#discussion_r445123432", "createdAt": "2020-06-24T19:32:12Z", "author": {"login": "frankgh"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "diffHunk": "@@ -48,11 +45,22 @@ public void configureAsyncSupport(AsyncSupportConfigurer configurer) {\n         builder = builder.awaitTermination(shutdown.isAwaitTermination());\n         builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod());\n         builder = builder.threadNamePrefix(properties.getThreadNamePrefix());\n+        builder = builder.customizers(taskExecutorCustomizers.orderedStream()::iterator);\n+        builder = builder.taskDecorator(taskDecorator.getIfUnique());\n+        return builder;\n+    }\n \n-        ThreadPoolTaskExecutor taskExecutor = builder.build(PxfThreadPoolTaskExecutor.class);\n-\n-        taskExecutor.initialize();\n-        configurer.setTaskExecutor(taskExecutor);\n-\n+    /**\n+     * Builds the {@link ThreadPoolTaskExecutor} that has previously been\n+     * configured\n+     *\n+     * @param builder the {@link TaskExecutorBuilder} object\n+     * @return the {@link ThreadPoolTaskExecutor} that has previously been configured\n+     */\n+    @Lazy\n+    @Bean(name = {APPLICATION_TASK_EXECUTOR_BEAN_NAME,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3MzgzOA=="}, "originalCommit": {"oid": "eefe6b3b04345fd5351a1c1255a4d2b95e6de607"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTgyNDk4OnYy", "diffSide": "RIGHT", "path": "server/pxf-service/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODowMTozNFrOGmdMTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMzo0MjowN1rOGmmn5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3NzM1Nw==", "bodyText": "eager initialization is desired.", "url": "https://github.com/greenplum-db/pxf/pull/378#discussion_r442977357", "createdAt": "2020-06-19T18:01:34Z", "author": {"login": "frankgh"}, "path": "server/pxf-service/src/main/resources/application.properties", "diffHunk": "@@ -1,15 +1,23 @@\n-# TODO: decide which endpoints are enabled\n+# TODO: spring_boot_todo decide which endpoints are exposed by default\n management.endpoints.web.exposure.include=*\n management.endpoints.enabled-by-default=true\n management.endpoint.shutdown.enabled=true\n \n server.port=${pxf.port:5888}\n server.tomcat.max-threads=${pxf.max.threads:200}\n \n-# Disable the whitelabel error page provided by spring boot and display the\n-# underlying tomcat error page which is more consistent with what PXF expects \n-server.error.whitelabel.enabled=false\n-spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration\n+# 1. Lazy initialization may reduce the number of beans created when the\n+#    application is starting \u2013 therefore, we can improve the startup time of\n+#    the application\n+# 2. As none of the beans are created until they are needed, we could mask\n+#    issues, getting them in run time instead of startup time\n+# 3. The issues can include out of memory errors, misconfigurations, or\n+#    class-definition-found errors\n+# 4. Also, when we're in a web context, triggering bean creation on demand will\n+#    increase the latency of HTTP requests \u2013 the bean creation will affect only\n+#    the first request, but this may have a negative impact in load-balancing\n+#    and auto-scaling.\n+spring.main.lazy-initialization=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eefe6b3b04345fd5351a1c1255a4d2b95e6de607"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMTg3Ng==", "bodyText": "added a todo to decide what to end up doing", "url": "https://github.com/greenplum-db/pxf/pull/378#discussion_r443131876", "createdAt": "2020-06-20T13:42:07Z", "author": {"login": "frankgh"}, "path": "server/pxf-service/src/main/resources/application.properties", "diffHunk": "@@ -1,15 +1,23 @@\n-# TODO: decide which endpoints are enabled\n+# TODO: spring_boot_todo decide which endpoints are exposed by default\n management.endpoints.web.exposure.include=*\n management.endpoints.enabled-by-default=true\n management.endpoint.shutdown.enabled=true\n \n server.port=${pxf.port:5888}\n server.tomcat.max-threads=${pxf.max.threads:200}\n \n-# Disable the whitelabel error page provided by spring boot and display the\n-# underlying tomcat error page which is more consistent with what PXF expects \n-server.error.whitelabel.enabled=false\n-spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration\n+# 1. Lazy initialization may reduce the number of beans created when the\n+#    application is starting \u2013 therefore, we can improve the startup time of\n+#    the application\n+# 2. As none of the beans are created until they are needed, we could mask\n+#    issues, getting them in run time instead of startup time\n+# 3. The issues can include out of memory errors, misconfigurations, or\n+#    class-definition-found errors\n+# 4. Also, when we're in a web context, triggering bean creation on demand will\n+#    increase the latency of HTTP requests \u2013 the bean creation will affect only\n+#    the first request, but this may have a negative impact in load-balancing\n+#    and auto-scaling.\n+spring.main.lazy-initialization=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3NzM1Nw=="}, "originalCommit": {"oid": "eefe6b3b04345fd5351a1c1255a4d2b95e6de607"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3674, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}