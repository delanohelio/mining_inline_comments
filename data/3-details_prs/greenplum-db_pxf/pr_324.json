{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NzE2OTIx", "number": 324, "title": "Parquet: Right trim char types during insert", "bodyText": "Currently, there is an issue when inserting parquet data with char types\nwhen they are padded. For example,\nCREATE WRITABLE EXTERNAL TABLE foo (id int, code char(5))\nLOCATION ('pxf://bucket/path?PROFILE=s3:parquet&SERVER=s3')\nFORMAT 'CUSTOM' (formatter='pxfwritable_export');\n\nINSERT INTO foo VALUE (1, '95126'), (2, '9'), (3, '9');\n\nThis will cause postgres to right pad tuples 2 and 3 with whitespace\nafter the char '9', which will be sent to PXF Server as '9    ', and\nwe'll store it as such in a parquet file. However, this is inconsistent\nwith Hive's behavior and it is also causing issues with predicate\npushdown. Queries like the following will produce no tuples:\nSELECT * FROM foo WHERE code = '9';\n\nWith this patch, we right-trim values of type char coming from Greenplum\nbefore storing them to parquet. This brings us on-par with the way Hive\nstores char types and it fixes predicate pushdown.", "createdAt": "2020-04-01T02:10:18Z", "url": "https://github.com/greenplum-db/pxf/pull/324", "merged": true, "mergeCommit": {"oid": "6435c3d72841d98dfbcafab50532befc9602bfa8"}, "closed": true, "closedAt": "2020-04-01T22:59:13Z", "author": {"login": "frankgh"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTXjGgABqjMxODc4NDQ3NDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTfrn-gBqjMxODk5NDE1MjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f12df083a69dff80fffa7774226908f47c0ab26", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/1f12df083a69dff80fffa7774226908f47c0ab26", "committedDate": "2020-04-01T02:02:13Z", "message": "Parquet: Right trim char types during insert\n\nCurrently, there is an issue when inserting parquet data with char types\nwhen they are padded. For example,\n\n    CREATE WRITABLE EXTERNAL TABLE foo (id int, code char(5))\n    LOCATION ('pxf://bucket/path?PROFILE=s3:parquet&SERVER=s3')\n    FORMAT 'CUSTOM' (formatter='pxfwritable_export');\n\n    INSERT INTO foo VALUE (1, '95126'), (2, '9'), (3, '9');\n\nThis will cause postgres to right pad tuples 2 and 3 with whitespace\nafter the char '9', which will be sent to PXF Server as '9    ', and\nwe'll store it as such in a parquet file. However, this is inconsistent\nwith Hive's behavior and it is also causing issues with predicate\npushdown. Queries like the following will produce no tuples:\n\n    SELECT * FROM foo WHERE code = '9';\n\nWith this patch, we right-trim values of type char coming from Greenplum\nbefore storing them to parquet. This brings us on-par with the way Hive\nstores char types and it fixes predicate pushdown."}, "afterCommit": {"oid": "9fe2b935ca790a8adf1a9fa65a6626ae52fee51d", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/9fe2b935ca790a8adf1a9fa65a6626ae52fee51d", "committedDate": "2020-04-01T13:16:36Z", "message": "Parquet: Right trim char types during insert\n\nCurrently, there is an issue when inserting parquet data with char types\nwhen they are padded. For example,\n\n    CREATE WRITABLE EXTERNAL TABLE foo (id int, code char(5))\n    LOCATION ('pxf://bucket/path?PROFILE=s3:parquet&SERVER=s3')\n    FORMAT 'CUSTOM' (formatter='pxfwritable_export');\n\n    INSERT INTO foo VALUE (1, '95126'), (2, '9'), (3, '9');\n\nThis will cause postgres to right pad tuples 2 and 3 with whitespace\nafter the char '9', which will be sent to PXF Server as '9    ', and\nwe'll store it as such in a parquet file. However, this is inconsistent\nwith Hive's behavior and it is also causing issues with predicate\npushdown. Queries like the following will produce no tuples:\n\n    SELECT * FROM foo WHERE code = '9';\n\nWith this patch, we right-trim values of type char coming from Greenplum\nbefore storing them to parquet. This brings us on-par with the way Hive\nstores char types and it fixes predicate pushdown."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9fe2b935ca790a8adf1a9fa65a6626ae52fee51d", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/9fe2b935ca790a8adf1a9fa65a6626ae52fee51d", "committedDate": "2020-04-01T13:16:36Z", "message": "Parquet: Right trim char types during insert\n\nCurrently, there is an issue when inserting parquet data with char types\nwhen they are padded. For example,\n\n    CREATE WRITABLE EXTERNAL TABLE foo (id int, code char(5))\n    LOCATION ('pxf://bucket/path?PROFILE=s3:parquet&SERVER=s3')\n    FORMAT 'CUSTOM' (formatter='pxfwritable_export');\n\n    INSERT INTO foo VALUE (1, '95126'), (2, '9'), (3, '9');\n\nThis will cause postgres to right pad tuples 2 and 3 with whitespace\nafter the char '9', which will be sent to PXF Server as '9    ', and\nwe'll store it as such in a parquet file. However, this is inconsistent\nwith Hive's behavior and it is also causing issues with predicate\npushdown. Queries like the following will produce no tuples:\n\n    SELECT * FROM foo WHERE code = '9';\n\nWith this patch, we right-trim values of type char coming from Greenplum\nbefore storing them to parquet. This brings us on-par with the way Hive\nstores char types and it fixes predicate pushdown."}, "afterCommit": {"oid": "860639778db699f6908721f746dc273087634b25", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/860639778db699f6908721f746dc273087634b25", "committedDate": "2020-04-01T13:25:47Z", "message": "Parquet: Right trim char types during insert\n\nCurrently, there is an issue when inserting parquet data with char types\nwhen they are padded. For example,\n\n    CREATE WRITABLE EXTERNAL TABLE foo (id int, code char(5))\n    LOCATION ('pxf://bucket/path?PROFILE=s3:parquet&SERVER=s3')\n    FORMAT 'CUSTOM' (formatter='pxfwritable_export');\n\n    INSERT INTO foo VALUE (1, '95126'), (2, '9'), (3, '9');\n\nThis will cause postgres to right pad tuples 2 and 3 with whitespace\nafter the char '9', which will be sent to PXF Server as '9    ', and\nwe'll store it as such in a parquet file. However, this is inconsistent\nwith Hive's behavior and it is also causing issues with predicate\npushdown. Queries like the following will produce no tuples:\n\n    SELECT * FROM foo WHERE code = '9';\n\nWith this patch, we right-trim values of type char coming from Greenplum\nbefore storing them to parquet. This brings us on-par with the way Hive\nstores char types and it fixes predicate pushdown."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODEzOTMz", "url": "https://github.com/greenplum-db/pxf/pull/324#pullrequestreview-385813933", "createdAt": "2020-04-01T17:48:38Z", "commit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0ODozOFrOF_L2Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1Njo1N1rOF_MJ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5ODY5NA==", "bodyText": "would be nice to have a query that also uses WHERE c1 = 'a  ' to make sure if a user specifies a padded value we can handle that as well.", "url": "https://github.com/greenplum-db/pxf/pull/324#discussion_r401798694", "createdAt": "2020-04-01T17:48:38Z", "author": {"login": "denalex"}, "path": "automation/tincrepo/main/pxf/features/parquet/padded_char_pushdown/expected/query01.ans", "diffHunk": "@@ -0,0 +1,54 @@\n+-- start_ignore\n+-- end_ignore\n+-- @description query01 for pushing down predicates of type char that were\n+-- padded during write. Hive right trims values for type char, for example\n+-- when a value 'a  ' is inserted into a Hive table stored as parquet, Hive will\n+-- only store 'a' in the parquet file.\n+-- Display on for output consistency between GPDB 5 and 6\n+\\x on\n+Expanded display is on.\n+\\pset format unaligned\n+Output format is unaligned.\n+SELECT s1, s2, n1, d1, dc1, f, bg, b, tn, sml, vc1, c1, bin FROM parquet_view WHERE c1 = 'a' OR c1 = e'b\\t' OR c1 = e'c\\n' ORDER BY s1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMzc1MA==", "bodyText": "assertEquals(\"\", Utilities.rightTrimWhiteSpace(\"\"));", "url": "https://github.com/greenplum-db/pxf/pull/324#discussion_r401803750", "createdAt": "2020-04-01T17:56:57Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/test/java/org/greenplum/pxf/api/utilities/UtilitiesTest.java", "diffHunk": "@@ -168,6 +168,20 @@ public boolean isThreadSafe() {\n         }\n     }\n \n+    @Test\n+    public void testRightTrimWhitespace() {\n+        assertNull(Utilities.rightTrimWhiteSpace(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODE1Njc2", "url": "https://github.com/greenplum-db/pxf/pull/324#pullrequestreview-385815676", "createdAt": "2020-04-01T17:51:01Z", "commit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MTowMVrOF_L7yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoxOToxOVrOF_M8_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMDEzOQ==", "bodyText": "Interesting to me that we need to check if field.val is a String. What's the reason?", "url": "https://github.com/greenplum-db/pxf/pull/324#discussion_r401800139", "createdAt": "2020-04-01T17:51:01Z", "author": {"login": "oliverralbertini"}, "path": "server/pxf-hdfs/src/main/java/org/greenplum/pxf/plugins/hdfs/ParquetResolver.java", "diffHunk": "@@ -90,7 +91,19 @@ public OneRow setFields(List<OneField> record) throws IOException {\n         validateSchema();\n         Group group = groupFactory.newGroup();\n         for (int i = 0; i < record.size(); i++) {\n-            fillGroup(i, record.get(i), group, schema.getType(i));\n+            OneField field = record.get(i);\n+            ColumnDescriptor columnDescriptor = context.getTupleDescription().get(i);\n+\n+            /*\n+             * We need to right trim the incoming value from Greenplum. This is\n+             * consistent with the behaviour in Hive, where char fields are right\n+             * trimmed during write. Note that String and varchar Hive types are\n+             * not right trimmed. Hive does not trim tabs or newlines\n+             */\n+            if (columnDescriptor.getDataType() == DataType.BPCHAR && field.val instanceof String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxNTg2MQ==", "bodyText": "I would be more in favor of this:\npublic static String rightTrimWhiteSpace(String s) {\n        if (s == null) return null;\n        return s.replaceAll(\" +$\", \"\");\n    }", "url": "https://github.com/greenplum-db/pxf/pull/324#discussion_r401815861", "createdAt": "2020-04-01T18:17:40Z", "author": {"login": "oliverralbertini"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/Utilities.java", "diffHunk": "@@ -332,4 +330,31 @@ public static boolean isSecurityEnabled(Configuration configuration) {\n         return SecurityUtil.getAuthenticationMethod(configuration) !=\n                 UserGroupInformation.AuthenticationMethod.SIMPLE;\n     }\n+\n+    /**\n+     * Right trim whitespace on a string (it does not trim tabs)\n+     * <p>\n+     *     <ul>\n+     *         <li>null returns null</li>\n+     *         <li>\"abc\" returns \"abc\"</li>\n+     *         <li>\" abc\" returns \" abc\"</li>\n+     *         <li>\"abc \" returns \"abc\"</li>\n+     *         <li>\"    \" returns \"\"</li>\n+     *         <li>\"abc \\t \" returns \"abc \\t\"</li>\n+     *         <li>\"abc \\t\\t\" returns \"abc \\t\\t\"</li>\n+     *     </ul>\n+     * </p>\n+     *\n+     * @param s the string\n+     * @return the right trimmed string\n+     */\n+    public static String rightTrimWhiteSpace(String s) {\n+        if (s == null) return null;\n+        int length = s.length();\n+        while (length > 0 && s.charAt(length - 1) == ' ') length--;\n+\n+        if (length == s.length()) return s;\n+        if (length == 0) return \"\";\n+        return s.substring(0, length);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxNjgzMA==", "bodyText": "Do we need tests in UtilitiesTest.java?", "url": "https://github.com/greenplum-db/pxf/pull/324#discussion_r401816830", "createdAt": "2020-04-01T18:19:19Z", "author": {"login": "oliverralbertini"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/Utilities.java", "diffHunk": "@@ -332,4 +330,31 @@ public static boolean isSecurityEnabled(Configuration configuration) {\n         return SecurityUtil.getAuthenticationMethod(configuration) !=\n                 UserGroupInformation.AuthenticationMethod.SIMPLE;\n     }\n+\n+    /**\n+     * Right trim whitespace on a string (it does not trim tabs)\n+     * <p>\n+     *     <ul>\n+     *         <li>null returns null</li>\n+     *         <li>\"abc\" returns \"abc\"</li>\n+     *         <li>\" abc\" returns \" abc\"</li>\n+     *         <li>\"abc \" returns \"abc\"</li>\n+     *         <li>\"    \" returns \"\"</li>\n+     *         <li>\"abc \\t \" returns \"abc \\t\"</li>\n+     *         <li>\"abc \\t\\t\" returns \"abc \\t\\t\"</li>\n+     *     </ul>\n+     * </p>\n+     *\n+     * @param s the string\n+     * @return the right trimmed string\n+     */\n+    public static String rightTrimWhiteSpace(String s) {\n+        if (s == null) return null;\n+        int length = s.length();\n+        while (length > 0 && s.charAt(length - 1) == ' ') length--;\n+\n+        if (length == s.length()) return s;\n+        if (length == 0) return \"\";\n+        return s.substring(0, length);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxNTg2MQ=="}, "originalCommit": {"oid": "860639778db699f6908721f746dc273087634b25"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c5d3817d36b3a52231489da605d8e6e957d1eb6", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/6c5d3817d36b3a52231489da605d8e6e957d1eb6", "committedDate": "2020-04-01T20:59:27Z", "message": "Parquet: Transform char predicates with trailing whitespace\n\nWhen a predicate for a char type has trailing whitespace we transform\nthe query to c1 = 'a  ' to (c1 = 'a  ' OR c1 = 'a'). This allows us to\npush the original predicate, but also it provides consistency with the\nway we are storing char types in parquet. When the operator is a not\nequals the query is transformed from c1 <> 'a  ' to (c1 <> 'a  ' AND c1\n<> 'a').\n\nRenamed the SupportedParquetPrimitiveTypePruner class to\nParquetOperatorPrunerAndTransformer to take into account the new\nfunctionality of the class."}, "afterCommit": {"oid": "2bb5ba0d978c98c9e626545391ff843e23a270c9", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/2bb5ba0d978c98c9e626545391ff843e23a270c9", "committedDate": "2020-04-01T22:06:14Z", "message": "Parquet: Transform char predicates with trailing whitespace\n\nWhen a predicate for a char type has trailing whitespace we transform\nthe query to c1 = 'a  ' to (c1 = 'a  ' OR c1 = 'a'). This allows us to\npush the original predicate, but also it provides consistency with the\nway we are storing char types in parquet. When the operator is a not\nequals the query is transformed from c1 <> 'a  ' to (c1 <> 'a  ' AND c1\n<> 'a').\n\nRenamed the SupportedParquetPrimitiveTypePruner class to\nParquetOperatorPrunerAndTransformer to take into account the new\nfunctionality of the class."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23790594295c919af4e705242a867d41649a2f5a", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/23790594295c919af4e705242a867d41649a2f5a", "committedDate": "2020-04-01T22:40:10Z", "message": "Parquet: Right trim char types during insert\n\nCurrently, there is an issue when inserting parquet data with char types\nwhen they are padded. For example,\n\n    CREATE WRITABLE EXTERNAL TABLE foo (id int, code char(5))\n    LOCATION ('pxf://bucket/path?PROFILE=s3:parquet&SERVER=s3')\n    FORMAT 'CUSTOM' (formatter='pxfwritable_export');\n\n    INSERT INTO foo VALUE (1, '95126'), (2, '9'), (3, '9');\n\nThis will cause postgres to right pad tuples 2 and 3 with whitespace\nafter the char '9', which will be sent to PXF Server as '9    ', and\nwe'll store it as such in a parquet file. However, this is inconsistent\nwith Hive's behavior and it is also causing issues with predicate\npushdown. Queries like the following will produce no tuples:\n\n    SELECT * FROM foo WHERE code = '9';\n\nWith this patch, we right-trim values of type char coming from Greenplum\nbefore storing them to parquet. This brings us on-par with the way Hive\nstores char types and it fixes predicate pushdown."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fcd266d35a2b6351e7caad36f7e8d9e3a974024", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/9fcd266d35a2b6351e7caad36f7e8d9e3a974024", "committedDate": "2020-04-01T22:44:07Z", "message": "Parquet: Transform char predicates with trailing whitespace\n\nWhen a predicate for a char type has trailing whitespace we transform\nthe query to c1 = 'a  ' to (c1 = 'a  ' OR c1 = 'a'). This allows us to\npush the original predicate, but also it provides consistency with the\nway we are storing char types in parquet. When the operator is a not\nequals the query is transformed from c1 <> 'a  ' to (c1 <> 'a  ' AND c1\n<> 'a').\n\nRenamed the SupportedParquetPrimitiveTypePruner class to\nParquetOperatorPrunerAndTransformer to take into account the new\nfunctionality of the class."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2bb5ba0d978c98c9e626545391ff843e23a270c9", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/2bb5ba0d978c98c9e626545391ff843e23a270c9", "committedDate": "2020-04-01T22:06:14Z", "message": "Parquet: Transform char predicates with trailing whitespace\n\nWhen a predicate for a char type has trailing whitespace we transform\nthe query to c1 = 'a  ' to (c1 = 'a  ' OR c1 = 'a'). This allows us to\npush the original predicate, but also it provides consistency with the\nway we are storing char types in parquet. When the operator is a not\nequals the query is transformed from c1 <> 'a  ' to (c1 <> 'a  ' AND c1\n<> 'a').\n\nRenamed the SupportedParquetPrimitiveTypePruner class to\nParquetOperatorPrunerAndTransformer to take into account the new\nfunctionality of the class."}, "afterCommit": {"oid": "9fcd266d35a2b6351e7caad36f7e8d9e3a974024", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/9fcd266d35a2b6351e7caad36f7e8d9e3a974024", "committedDate": "2020-04-01T22:44:07Z", "message": "Parquet: Transform char predicates with trailing whitespace\n\nWhen a predicate for a char type has trailing whitespace we transform\nthe query to c1 = 'a  ' to (c1 = 'a  ' OR c1 = 'a'). This allows us to\npush the original predicate, but also it provides consistency with the\nway we are storing char types in parquet. When the operator is a not\nequals the query is transformed from c1 <> 'a  ' to (c1 <> 'a  ' AND c1\n<> 'a').\n\nRenamed the SupportedParquetPrimitiveTypePruner class to\nParquetOperatorPrunerAndTransformer to take into account the new\nfunctionality of the class."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 19, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}