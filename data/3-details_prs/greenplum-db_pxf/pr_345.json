{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MzAyNjI0", "number": 345, "title": "Convert the pxf-api project to a boot project", "bodyText": "Provide a top level build.gradle with only pxf-api enabled\nProvide a build.gradle for pxf-api\nMigrate unit tests to JUnit 5\nMake all unit tests pass", "createdAt": "2020-04-22T13:47:35Z", "url": "https://github.com/greenplum-db/pxf/pull/345", "merged": true, "mergeCommit": {"oid": "68adc3ba2738a2683aac0f5cfb189e35204cf5db"}, "closed": true, "closedAt": "2020-04-23T21:33:11Z", "author": {"login": "frankgh"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaIkGVgH2gAyNDA3MzAyNjI0OjVmMzY4MGJhNDhmYWVmODFiZGUyMDlhNzhjNzA0MGY0Yjg4NjBlNTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaiU9rgFqTM5ODYyMDUyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5f3680ba48faef81bde209a78c7040f4b8860e57", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/5f3680ba48faef81bde209a78c7040f4b8860e57", "committedDate": "2020-04-22T13:46:47Z", "message": "Convert the pxf-api project to a boot project\n\n- Provide a top level build.gradle with only pxf-api enabled\n- Provide a build.gradle for pxf-api\n- Migrate unit tests to JUnit 5\n- Make all unit tests pass"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjIwNTI2", "url": "https://github.com/greenplum-db/pxf/pull/345#pullrequestreview-398620526", "createdAt": "2020-04-22T21:59:39Z", "commit": {"oid": "5f3680ba48faef81bde209a78c7040f4b8860e57"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTo1OTo0MFrOGKNn0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo0Njo1OVrOGK5PQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MjEyOA==", "bodyText": "I'd assume these whole file changes came with the upgraded Gradle version, right ?", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r413362128", "createdAt": "2020-04-22T21:59:40Z", "author": {"login": "denalex"}, "path": "server/gradlew", "diffHunk": "@@ -172,111 +154,30 @@ if $cygwin ; then\n         else\n             eval `echo args$i`=\"\\\"$arg\\\"\"\n         fi\n-        i=$((i+1))\n+        i=`expr $i + 1`\n     done\n     case $i in\n-        (0) set -- ;;\n-        (1) set -- \"$args0\" ;;\n-        (2) set -- \"$args0\" \"$args1\" ;;\n-        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n-        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n-        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n-        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n-        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n-        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n-        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n+        0) set -- ;;\n+        1) set -- \"$args0\" ;;\n+        2) set -- \"$args0\" \"$args1\" ;;\n+        3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n+        4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n+        5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n+        6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n+        7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n+        8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n+        9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n     esac\n fi\n \n-# does not match gradle's hash\n-# waiting for http://stackoverflow.com/questions/26642077/java-biginteger-in-bash-rewrite-gradlew\n-hash() {\n-  local input=\"$1\"\n-  if $darwin; then\n-    md5 -q -s \"$1\"\n-  else\n-    echo -n \"$1\" | md5sum  | cut -d\" \" -f1\n-  fi\n-}\n-\n-dist_path() {\n-  local dir=$(basename $distributionUrl | sed 's;.zip;;g')\n-  local id=$(hash \"$distributionUrl\")\n-\n-  echo \"$HOME/.gradle/${distributionPath:-wrapper/dists}/$dir/$id\"\n-}\n-\n-zip_path() {\n-  local dir=$(basename $distributionUrl | sed 's;.zip;;g')\n-  local id=$(hash \"$distributionUrl\")\n-\n-  echo \"$HOME/.gradle/${zipStorePath:-wrapper/dists}/$dir/$id\"\n-}\n-\n-download() {\n-  local base_path=$(dist_path)\n-  local file_name=$(basename $distributionUrl)\n-  local dir_name=$(echo \"$file_name\" | sed 's;-bin.zip;;g' | sed 's;-src.zip;;g' |sed 's;-all.zip;;g')\n-\n-  if [ ! -d \"$base_path\" ]; then\n-    mkdir -p \"$base_path\"\n-  else\n-    # if data already exists, it means we failed to do this before\n-    # so cleanup last run and try again\n-    rm -rf $base_path/*\n-  fi\n-\n-  # download dist. curl on mac doesn't like the cert provided...\n-  local zip_path=$(zip_path)\n-  curl --insecure -L -o \"$zip_path/$file_name\" \"$distributionUrl\"\n-\n-  pushd \"$base_path\"\n-    touch \"$file_name.lck\"\n-    unzip \"$zip_path/$file_name\" 1> /dev/null\n-    touch \"$file_name.ok\"\n-  popd\n-}\n-\n-is_cached() {\n-  local file_name=$(basename $distributionUrl)\n-\n-  [ -e \"$(dist_path)/$file_name.ok\" ]\n-}\n-\n-lib_path() {\n-  local base_path=$(dist_path)\n-  local file_name=$(basename $distributionUrl | sed 's;-bin.zip;;g' | sed 's;-src.zip;;g' |sed 's;-all.zip;;g')\n-\n-  echo \"$base_path/$file_name/lib\"\n-}\n-\n # Escape application args\n save () {\n     for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n     echo \" \"\n }\n+APP_ARGS=`save \"$@\"`\n \n-classpath() {\n-  local dir=$(lib_path)\n-  local cp=$(ls -1 $dir/*.jar | tr '\\n' ':')\n-  echo \"$dir:$cp\"\n-}\n-\n-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\n-function splitJvmOpts() {\n-    JVM_OPTS=(\"$@\")\n-}\n-\n-main() {\n-  if ! is_cached; then\n-    download\n-  fi\n-\n-  APP_ARGS=$(save \"$@\")\n-\n-  eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\n-  JVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n-  exec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -cp $(classpath) org.gradle.launcher.GradleMain \"$@\"\n-}\n+# Collect all arguments for the java command, following the shell quoting and substitution rules\n+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n \n-main \"$@\"\n+exec \"$JAVACMD\" \"$@\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3680ba48faef81bde209a78c7040f4b8860e57"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzNjMxMg==", "bodyText": "wonder what annotationProcessor does here and the difference between api and implementation dependencies.\nAlso, the JAR produced will not have any dependencies included (not a fat jar), so I assume we will handle it somewhere else.", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r414036312", "createdAt": "2020-04-23T18:42:22Z", "author": {"login": "denalex"}, "path": "server/pxf-api/build.gradle", "diffHunk": "@@ -0,0 +1,47 @@\n+apply plugin: \"java-library\"\n+\n+jar {\n+    enabled = true\n+}\n+\n+dependencies {\n+\n+    /*******************************\n+     * Annotation Processors\n+     *******************************/\n+\n+    annotationProcessor(\"org.springframework.boot:spring-boot-autoconfigure-processor\")\n+    annotationProcessor(\"org.springframework.boot:spring-boot-configuration-processor\")\n+\n+    /*******************************\n+     * API Dependencies\n+     *******************************/\n+\n+    api(\"org.apache.hadoop:hadoop-common:${hadoopVersion}\") {\n+        exclude group: 'commons-codec'\n+    }\n+    api(\"org.springframework.boot:spring-boot-starter\")\n+    api('org.springframework.boot:spring-boot-starter-web')\n+\n+    /*******************************\n+     * Implementation Dependencies\n+     *******************************/\n+\n+    implementation(\"org.springframework.boot:spring-boot-starter-log4j2\")\n+    implementation(\"commons-codec:commons-codec\")\n+    implementation(\"com.fasterxml.jackson.core:jackson-core\")\n+    implementation(\"com.fasterxml.jackson.core:jackson-databind\")\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3680ba48faef81bde209a78c7040f4b8860e57"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2MTcyNw==", "bodyText": "can maybe this and PxfUserGroupInformation be Spring services, Spring will manage their \"singleton-ness\" and have them autowired ?", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r414061727", "createdAt": "2020-04-23T19:22:43Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/security/SecureLogin.java", "diffHunk": "@@ -68,6 +68,11 @@\n \n     private static final SecureLogin instance = new SecureLogin();\n \n+    /**\n+     * Package-private for testing\n+     */\n+    static PxfUserGroupInformation pxfUserGroupInformation = PxfUserGroupInformation.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3680ba48faef81bde209a78c7040f4b8860e57"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2MzYwMg==", "bodyText": "it can now mock classes with final methods without PowerMock? cool", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r414063602", "createdAt": "2020-04-23T19:25:43Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/test/java/org/apache/hadoop/security/PxfUserGroupInformationTest.java", "diffHunk": "@@ -2,97 +2,104 @@\n \n import com.google.common.collect.Sets;\n import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.security.authentication.util.KerberosUtil;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import org.junit.runner.RunWith;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n-import org.powermock.reflect.Whitebox;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import javax.security.auth.Subject;\n import javax.security.auth.kerberos.KerberosPrincipal;\n import javax.security.auth.kerberos.KerberosTicket;\n+import javax.security.auth.kerberos.KeyTab;\n import javax.security.auth.login.LoginContext;\n import javax.security.auth.login.LoginException;\n import java.util.Date;\n-import java.util.function.Supplier;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.doNothing;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.verifyNoInteractions;\n import static org.mockito.Mockito.when;\n \n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest({PxfUserGroupInformation.class, UserGroupInformation.class, KerberosUtil.class, KerberosTicket.class})\n public class PxfUserGroupInformationTest {\n \n     private String serverName;\n     private Configuration configuration;\n     private UserGroupInformation ugi;\n     private Subject subject;\n+    private Subject subjectWithKerberosKeyTab;\n     private User user;\n     private LoginContext mockLoginContext, mockAnotherLoginContext;\n+    private PxfUserGroupInformation.LoginContextProvider mockLoginContextProvider;\n     private KerberosTicket mockTGT;\n+    private KeyTab mockKeyTab;\n     private KerberosPrincipal tgtPrincipal = new KerberosPrincipal(\"krbtgt/EXAMPLE.COM@EXAMPLE.COM\");\n     private KerberosPrincipal nonTgtPrincipal = new KerberosPrincipal(\"some/somewhere@EXAMPLE.COM\");\n     private LoginSession session;\n     private long nowMs;\n+    private PxfUserGroupInformation pxfUserGroupInformation;\n \n-    @Rule\n-    public ExpectedException expectedException = ExpectedException.none();\n-\n+    private static final String PROPERTY_KEY_JAVA_VENDOR = \"java.vendor\";\n     private static final String PROPERTY_KEY_KERBEROS_KDC = \"java.security.krb5.kdc\";\n     private static final String PROPERTY_KEY_KERBEROS_REALM = \"java.security.krb5.realm\";\n     private static String kdcDefault;\n     private static String realmDefault;\n+    private static String javaVendor;\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setProperties() {\n         // simulate presence of krb.conf file, important for prevention of test pollution when creating Users\n         kdcDefault = System.setProperty(PROPERTY_KEY_KERBEROS_KDC, \"localhost\");\n         realmDefault = System.setProperty(PROPERTY_KEY_KERBEROS_REALM, \"DEFAULT_REALM\");\n+\n+        // Not IBM. Refer to org.apache.hadoop.security.authentication.util.KerberosUtil.getKrb5LoginModuleName\n+        javaVendor = System.setProperty(PROPERTY_KEY_JAVA_VENDOR, \"foobar\");\n     }\n \n-    @AfterClass\n+    @AfterAll\n     public static void resetProperties() {\n+        resetProperty(PROPERTY_KEY_JAVA_VENDOR, javaVendor);\n         resetProperty(PROPERTY_KEY_KERBEROS_KDC, kdcDefault);\n         resetProperty(PROPERTY_KEY_KERBEROS_REALM, realmDefault);\n     }\n \n-    @Before\n+    @BeforeEach\n     public void setup() throws Exception {\n \n         // prepare objects\n         nowMs = System.currentTimeMillis();\n         configuration = new Configuration();\n         user = new User(\"user\");\n         serverName = \"server\";\n+        pxfUserGroupInformation = PxfUserGroupInformation.getInstance();\n \n         // prepare common mocks\n-        mockTGT = PowerMockito.mock(KerberosTicket.class); // has final methods, needs PowerMock to mock it\n+        mockTGT = mock(KerberosTicket.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3680ba48faef81bde209a78c7040f4b8860e57"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2NTc3NA==", "bodyText": "not sure why things changed here", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r414065774", "createdAt": "2020-04-23T19:29:16Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/test/java/org/apache/hadoop/security/PxfUserGroupInformationTest.java", "diffHunk": "@@ -144,128 +151,106 @@ public void testLoginFromKeytabMinMillisFromDefault() throws Exception {\n     @Test\n     public void testReloginFromKeytabNoopForNonKerberos() throws KerberosAuthException {\n         user.setLogin(mockLoginContext);\n-        PowerMockito.mockStatic(KerberosUtil.class);\n-        when(KerberosUtil.hasKerberosKeyTab(subject)).thenReturn(true);\n-        ugi = new UserGroupInformation(subject);\n+        ugi = new UserGroupInformation(subjectWithKerberosKeyTab);\n         // do NOT set authentication method of UGI to KERBEROS, will cause NOOP for relogin\n-        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subject, 1);\n+        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subjectWithKerberosKeyTab, 1);\n \n-        PxfUserGroupInformation.reloginFromKeytab(serverName, session);\n+        pxfUserGroupInformation.reloginFromKeytab(serverName, session);\n \n-        verifyZeroInteractions(mockLoginContext); // proves noop\n+        verifyNoInteractions(mockLoginContext); // proves noop\n     }\n \n     @Test\n     public void testReloginFromKeytabNoopForNonKeytab() throws KerberosAuthException {\n         user.setLogin(mockLoginContext);\n-        PowerMockito.mockStatic(KerberosUtil.class);\n-        when(KerberosUtil.hasKerberosKeyTab(subject)).thenReturn(false); // simulate no keytab for subject\n         ugi = new UserGroupInformation(subject);\n         ugi.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS);\n         session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subject, 1);\n \n-        PxfUserGroupInformation.reloginFromKeytab(serverName, session);\n+        pxfUserGroupInformation.reloginFromKeytab(serverName, session);\n \n-        verifyZeroInteractions(mockLoginContext); // proves noop\n+        verifyNoInteractions(mockLoginContext); // proves noop\n     }\n \n     @Test\n     public void testReloginFromKeytabNoopInsufficientTimeElapsed() throws KerberosAuthException {\n         user.setLogin(mockLoginContext);\n-        PowerMockito.mockStatic(KerberosUtil.class);\n-        when(KerberosUtil.hasKerberosKeyTab(subject)).thenReturn(true);\n-        ugi = new UserGroupInformation(subject);\n+        ugi = new UserGroupInformation(subjectWithKerberosKeyTab);\n         ugi.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS);\n         user.setLastLogin(nowMs); // simulate just logged in\n         // set 33 secs between re-login attempts\n-        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subject, 55000L);\n+        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subjectWithKerberosKeyTab, 55000L);\n \n-        PxfUserGroupInformation.reloginFromKeytab(serverName, session);\n+        pxfUserGroupInformation.reloginFromKeytab(serverName, session);\n \n-        verifyZeroInteractions(mockLoginContext); // proves noop\n+        verifyNoInteractions(mockLoginContext); // proves noop\n     }\n \n     @Test\n     public void testReloginFromKeytabNoopTGTValidForLongTime() throws KerberosAuthException {\n         user.setLogin(mockLoginContext);\n-        PowerMockito.mockStatic(KerberosUtil.class);\n-        when(KerberosUtil.hasKerberosKeyTab(subject)).thenReturn(true);\n-        when(KerberosUtil.getKrb5LoginModuleName()).thenReturn(\"com.sun.security.auth.module.Krb5LoginModule\");\n-\n         when(mockTGT.getServer()).thenReturn(tgtPrincipal);\n \n         // TGT validity started 1 hr ago, valid for another 1 hr from now, we are at 50% of renew window\n         when(mockTGT.getStartTime()).thenReturn(new Date(nowMs - 3600 * 1000L));\n         when(mockTGT.getEndTime()).thenReturn(new Date(nowMs + 3600 * 1000L));\n \n-        ugi = new UserGroupInformation(subject);\n+        ugi = new UserGroupInformation(subjectWithKerberosKeyTab);\n         ugi.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS);\n         // leave user.lastLogin at 0 to simulate old login\n-        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subject, 1);\n+        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subjectWithKerberosKeyTab, 1);\n \n-        PxfUserGroupInformation.reloginFromKeytab(serverName, session);\n+        pxfUserGroupInformation.reloginFromKeytab(serverName, session);\n \n-        verifyZeroInteractions(mockLoginContext);\n+        verifyNoInteractions(mockLoginContext);\n     }\n \n     @Test\n-    public void testReloginFromKeytabFailsNoLogin() throws KerberosAuthException {\n-        expectedException.expect(KerberosAuthException.class);\n-        expectedException.expectMessage(\"loginUserFromKeyTab must be done first\");\n-\n+    public void testReloginFromKeytabFailsNoLogin() {\n         user.setLogin(null); // simulate missing login context for the user\n-        PowerMockito.mockStatic(KerberosUtil.class);\n-        when(KerberosUtil.hasKerberosKeyTab(subject)).thenReturn(true);\n-        when(KerberosUtil.getKrb5LoginModuleName()).thenReturn(\"com.sun.security.auth.module.Krb5LoginModule\");\n-        ugi = new UserGroupInformation(subject);\n+        ugi = new UserGroupInformation(subjectWithKerberosKeyTab);\n         ugi.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS);\n         // leave user.lastLogin at 0 to simulate old login\n-        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subject, 1);\n+        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subjectWithKerberosKeyTab, 1);\n \n-        PxfUserGroupInformation.reloginFromKeytab(serverName, session);\n+        Exception e = assertThrows(KerberosAuthException.class,\n+                () -> pxfUserGroupInformation.reloginFromKeytab(serverName, session));\n+        assertEquals(\" loginUserFromKeyTab must be done first\", e.getMessage());\n     }\n \n     @Test\n-    public void testReloginFromKeytabFailsNoKeytab() throws KerberosAuthException {\n-        expectedException.expect(KerberosAuthException.class);\n-        expectedException.expectMessage(\"loginUserFromKeyTab must be done first\");\n-\n+    public void testReloginFromKeytabFailsNoKeytab() {\n         user.setLogin(mockLoginContext);\n-        PowerMockito.mockStatic(KerberosUtil.class);\n-        when(KerberosUtil.hasKerberosKeyTab(subject)).thenReturn(true);\n-        when(KerberosUtil.getKrb5LoginModuleName()).thenReturn(\"com.sun.security.auth.module.Krb5LoginModule\");\n-        ugi = new UserGroupInformation(subject);\n+        ugi = new UserGroupInformation(subjectWithKerberosKeyTab);\n         ugi.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS);\n         // leave user.lastLogin at 0 to simulate old login\n-        session = new LoginSession(\"config\", \"principal\", null, ugi, subject, 1);\n+        session = new LoginSession(\"config\", \"principal\", null, ugi, subjectWithKerberosKeyTab, 1);\n \n-        PxfUserGroupInformation.reloginFromKeytab(serverName, session);\n+        Exception e = assertThrows(KerberosAuthException.class,\n+                () -> pxfUserGroupInformation.reloginFromKeytab(serverName, session));\n+        assertEquals(\" loginUserFromKeyTab must be done first\", e.getMessage());\n     }\n \n     /* ---------- Test below follow full login path via a few alternatives ---------- */\n \n     @Test\n     public void testReloginFromKeytabNoValidTGT() throws Exception {\n \n-        assertEquals(1, subject.getPrivateCredentials().size()); // subject has 1 ticket\n+        assertEquals(2, subjectWithKerberosKeyTab.getPrivateCredentials().size()); // subject has 2 tickets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3680ba48faef81bde209a78c7040f4b8860e57"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2NjMxNw==", "bodyText": "and here ...", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r414066317", "createdAt": "2020-04-23T19:30:17Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/test/java/org/apache/hadoop/security/PxfUserGroupInformationTest.java", "diffHunk": "@@ -274,7 +259,7 @@ public void testReloginFromKeytabNoValidTGT() throws Exception {\n         /* subject's non-TGT ticket has been removed, in reality another one would be created by login process,\n          * but we are not mocking it here.\n          */\n-        assertTrue(subject.getPrivateCredentials().isEmpty());\n+        assertEquals(1, subject.getPrivateCredentials().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3680ba48faef81bde209a78c7040f4b8860e57"}, "originalPosition": 319}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3NjczNg==", "bodyText": "that's already declared below (line 45), do we need in both places ?", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r414076736", "createdAt": "2020-04-23T19:46:59Z", "author": {"login": "denalex"}, "path": "server/build.gradle", "diffHunk": "@@ -17,345 +17,97 @@\n  * under the License.\n  */\n \n+buildscript {\n+    repositories {\n+        jcenter()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3680ba48faef81bde209a78c7040f4b8860e57"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 38, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}