{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTgwNzIx", "number": 356, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODozMDoxOVrOD9gf-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzo0MDoxNVrOD-yMcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODIyMjAxOnYy", "diffSide": "RIGHT", "path": "automation/Makefile", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODozMDoxOVrOGXC4gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo1MDowMVrOGXJ9gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgxNzY2NA==", "bodyText": "I think you could also use this syntax:\nPXF_CONF_SERVERS ?= ~/pxf/servers", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r426817664", "createdAt": "2020-05-18T18:30:19Z", "author": {"login": "oliverralbertini"}, "path": "automation/Makefile", "diffHunk": "@@ -68,7 +68,9 @@ ifeq \"$(HIVE_SERVER_PORT)\" \"\"\n \tHIVE_SERVER_PORT=10000\n endif\n \n-PXF_CONF_SERVERS=~/pxf/servers\n+ifeq \"$(PXF_CONF_SERVERS)\" \"\"\n+\tPXF_CONF_SERVERS=~/pxf/servers\n+endif", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMzYzMw==", "bodyText": "cool! I'll try that", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r426933633", "createdAt": "2020-05-18T22:50:01Z", "author": {"login": "frankgh"}, "path": "automation/Makefile", "diffHunk": "@@ -68,7 +68,9 @@ ifeq \"$(HIVE_SERVER_PORT)\" \"\"\n \tHIVE_SERVER_PORT=10000\n endif\n \n-PXF_CONF_SERVERS=~/pxf/servers\n+ifeq \"$(PXF_CONF_SERVERS)\" \"\"\n+\tPXF_CONF_SERVERS=~/pxf/servers\n+endif", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgxNzY2NA=="}, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODI0NDc4OnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/test/java/org/greenplum/pxf/api/model/BasePluginTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODozNzo1NVrOGXDHCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo0OTo0OFrOGXJ9Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMTM4Nw==", "bodyText": "how are we able to get rid of mockito?", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r426821387", "createdAt": "2020-05-18T18:37:55Z", "author": {"login": "oliverralbertini"}, "path": "server/pxf-api/src/test/java/org/greenplum/pxf/api/model/BasePluginTest.java", "diffHunk": "@@ -6,8 +6,6 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMzU1MA==", "bodyText": "we no longer need the mockConfigurationFactory, because the configuration creation happens at the rest entrypoint", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r426933550", "createdAt": "2020-05-18T22:49:48Z", "author": {"login": "frankgh"}, "path": "server/pxf-api/src/test/java/org/greenplum/pxf/api/model/BasePluginTest.java", "diffHunk": "@@ -6,8 +6,6 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMTM4Nw=="}, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODI3MDc0OnYy", "diffSide": "RIGHT", "path": "server/pxf-jdbc/src/test/java/org/greenplum/pxf/plugins/jdbc/partitioning/DatePartitionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODo0NjoxNFrOGXDXjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo1MDo1MFrOGXJ-vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyNTYxMw==", "bodyText": "was there a whitespace change in this file?", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r426825613", "createdAt": "2020-05-18T18:46:14Z", "author": {"login": "oliverralbertini"}, "path": "server/pxf-jdbc/src/test/java/org/greenplum/pxf/plugins/jdbc/partitioning/DatePartitionTest.java", "diffHunk": "@@ -1,125 +1,115 @@\n-package org.greenplum.pxf.plugins.jdbc.partitioning;\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-\r\n-import org.greenplum.pxf.plugins.jdbc.utils.DbProduct;\r\n-import org.junit.Rule;\r\n-import org.junit.Test;\r\n-import org.junit.rules.ExpectedException;\r\n-\r\n-import java.time.LocalDate;\r\n-\r\n-import static org.junit.Assert.assertEquals;\r\n-\r\n-public class DatePartitionTest {\r\n-    @Rule\r\n-    public ExpectedException thrown = ExpectedException.none();\r\n-\r\n-    private DbProduct dbProduct = DbProduct.POSTGRES;\r\n-\r\n-    private final String COL_RAW = \"col\";\r\n-    private final String QUOTE = \"\\\"\";\r\n-    private final String COL = QUOTE + COL_RAW + QUOTE;\r\n-\r\n-    @Test\r\n-    public void testNormal() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\r\n-        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\r\n-\r\n-        assertEquals(\r\n-                COL + \" >= date'2000-01-01' AND \" + COL + \" < date'2000-01-02'\",\r\n-                constraint\r\n-        );\r\n-        assertEquals(COL_RAW, partition.getColumn());\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testRightBounded() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, null, LocalDate.parse(\"2000-01-01\"));\r\n-        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\r\n-\r\n-        assertEquals(\r\n-                COL + \" < date'2000-01-01'\",\r\n-                constraint\r\n-        );\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testLeftBounded() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), null);\r\n-        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\r\n-\r\n-        assertEquals(\r\n-                COL + \" >= date'2000-01-01'\",\r\n-                constraint\r\n-        );\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testSpecialDateValue() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"0001-01-01\"), LocalDate.parse(\"1970-01-02\"));\r\n-        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\r\n-\r\n-        assertEquals(\r\n-                COL + \" >= date'0001-01-01' AND \" + COL + \" < date'1970-01-02'\",\r\n-                constraint\r\n-        );\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidBothBoundariesNull() {\r\n-        thrown.expect(RuntimeException.class);\r\n-        thrown.expectMessage(\"boundaries\");\r\n-\r\n-        new DatePartition(COL_RAW, null, null);\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidColumnNull() {\r\n-        thrown.expect(RuntimeException.class);\r\n-\r\n-        new DatePartition(null, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidEqualBoundaries() {\r\n-        thrown.expect(RuntimeException.class);\r\n-\r\n-        new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-01\"));\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidNullQuoteString() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\r\n-\r\n-        thrown.expect(RuntimeException.class);\r\n-\r\n-        partition.toSqlConstraint(null, dbProduct);\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidNullDbProduct() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\r\n-\r\n-        thrown.expect(RuntimeException.class);\r\n-\r\n-        partition.toSqlConstraint(COL, null);\r\n-    }\r\n-}\r\n+package org.greenplum.pxf.plugins.jdbc.partitioning;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.greenplum.pxf.plugins.jdbc.utils.DbProduct;\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.LocalDate;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class DatePartitionTest {\n+\n+    private DbProduct dbProduct = DbProduct.POSTGRES;\n+\n+    private final String COL_RAW = \"col\";\n+    private final String QUOTE = \"\\\"\";\n+    private final String COL = QUOTE + COL_RAW + QUOTE;\n+\n+    @Test\n+    public void testNormal() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\n+        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\n+\n+        assertEquals(\n+            COL + \" >= date'2000-01-01' AND \" + COL + \" < date'2000-01-02'\",\n+            constraint\n+        );\n+        assertEquals(COL_RAW, partition.getColumn());\n+    }\n+\n+    @Test\n+    public void testRightBounded() {\n+        DatePartition partition = new DatePartition(COL_RAW, null, LocalDate.parse(\"2000-01-01\"));\n+        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\n+\n+        assertEquals(\n+            COL + \" < date'2000-01-01'\",\n+            constraint\n+        );\n+    }\n+\n+    @Test\n+    public void testLeftBounded() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), null);\n+        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\n+\n+        assertEquals(\n+            COL + \" >= date'2000-01-01'\",\n+            constraint\n+        );\n+    }\n+\n+    @Test\n+    public void testSpecialDateValue() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"0001-01-01\"), LocalDate.parse(\"1970-01-02\"));\n+        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\n+\n+        assertEquals(\n+            COL + \" >= date'0001-01-01' AND \" + COL + \" < date'1970-01-02'\",\n+            constraint\n+        );\n+    }\n+\n+    @Test\n+    public void testInvalidBothBoundariesNull() {\n+        Exception ex = assertThrows(RuntimeException.class,\n+            () -> new DatePartition(COL_RAW, null, null));\n+        assertEquals(\"Both boundaries cannot be null\", ex.getMessage());\n+    }\n+\n+    @Test\n+    public void testInvalidColumnNull() {\n+        assertThrows(RuntimeException.class,\n+            () -> new DatePartition(null, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\")));\n+    }\n+\n+    @Test\n+    public void testInvalidEqualBoundaries() {\n+        assertThrows(RuntimeException.class,\n+            () -> new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-01\")));\n+    }\n+\n+    @Test\n+    public void testInvalidNullQuoteString() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\n+        assertThrows(RuntimeException.class,\n+            () -> partition.toSqlConstraint(null, dbProduct));\n+    }\n+\n+    @Test\n+    public void testInvalidNullDbProduct() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\n+        assertThrows(RuntimeException.class,\n+            () -> partition.toSqlConstraint(COL, null));\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMzk1MA==", "bodyText": "yikes, possible", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r426933950", "createdAt": "2020-05-18T22:50:50Z", "author": {"login": "frankgh"}, "path": "server/pxf-jdbc/src/test/java/org/greenplum/pxf/plugins/jdbc/partitioning/DatePartitionTest.java", "diffHunk": "@@ -1,125 +1,115 @@\n-package org.greenplum.pxf.plugins.jdbc.partitioning;\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-\r\n-import org.greenplum.pxf.plugins.jdbc.utils.DbProduct;\r\n-import org.junit.Rule;\r\n-import org.junit.Test;\r\n-import org.junit.rules.ExpectedException;\r\n-\r\n-import java.time.LocalDate;\r\n-\r\n-import static org.junit.Assert.assertEquals;\r\n-\r\n-public class DatePartitionTest {\r\n-    @Rule\r\n-    public ExpectedException thrown = ExpectedException.none();\r\n-\r\n-    private DbProduct dbProduct = DbProduct.POSTGRES;\r\n-\r\n-    private final String COL_RAW = \"col\";\r\n-    private final String QUOTE = \"\\\"\";\r\n-    private final String COL = QUOTE + COL_RAW + QUOTE;\r\n-\r\n-    @Test\r\n-    public void testNormal() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\r\n-        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\r\n-\r\n-        assertEquals(\r\n-                COL + \" >= date'2000-01-01' AND \" + COL + \" < date'2000-01-02'\",\r\n-                constraint\r\n-        );\r\n-        assertEquals(COL_RAW, partition.getColumn());\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testRightBounded() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, null, LocalDate.parse(\"2000-01-01\"));\r\n-        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\r\n-\r\n-        assertEquals(\r\n-                COL + \" < date'2000-01-01'\",\r\n-                constraint\r\n-        );\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testLeftBounded() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), null);\r\n-        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\r\n-\r\n-        assertEquals(\r\n-                COL + \" >= date'2000-01-01'\",\r\n-                constraint\r\n-        );\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testSpecialDateValue() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"0001-01-01\"), LocalDate.parse(\"1970-01-02\"));\r\n-        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\r\n-\r\n-        assertEquals(\r\n-                COL + \" >= date'0001-01-01' AND \" + COL + \" < date'1970-01-02'\",\r\n-                constraint\r\n-        );\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidBothBoundariesNull() {\r\n-        thrown.expect(RuntimeException.class);\r\n-        thrown.expectMessage(\"boundaries\");\r\n-\r\n-        new DatePartition(COL_RAW, null, null);\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidColumnNull() {\r\n-        thrown.expect(RuntimeException.class);\r\n-\r\n-        new DatePartition(null, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidEqualBoundaries() {\r\n-        thrown.expect(RuntimeException.class);\r\n-\r\n-        new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-01\"));\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidNullQuoteString() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\r\n-\r\n-        thrown.expect(RuntimeException.class);\r\n-\r\n-        partition.toSqlConstraint(null, dbProduct);\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidNullDbProduct() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\r\n-\r\n-        thrown.expect(RuntimeException.class);\r\n-\r\n-        partition.toSqlConstraint(COL, null);\r\n-    }\r\n-}\r\n+package org.greenplum.pxf.plugins.jdbc.partitioning;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.greenplum.pxf.plugins.jdbc.utils.DbProduct;\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.LocalDate;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class DatePartitionTest {\n+\n+    private DbProduct dbProduct = DbProduct.POSTGRES;\n+\n+    private final String COL_RAW = \"col\";\n+    private final String QUOTE = \"\\\"\";\n+    private final String COL = QUOTE + COL_RAW + QUOTE;\n+\n+    @Test\n+    public void testNormal() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\n+        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\n+\n+        assertEquals(\n+            COL + \" >= date'2000-01-01' AND \" + COL + \" < date'2000-01-02'\",\n+            constraint\n+        );\n+        assertEquals(COL_RAW, partition.getColumn());\n+    }\n+\n+    @Test\n+    public void testRightBounded() {\n+        DatePartition partition = new DatePartition(COL_RAW, null, LocalDate.parse(\"2000-01-01\"));\n+        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\n+\n+        assertEquals(\n+            COL + \" < date'2000-01-01'\",\n+            constraint\n+        );\n+    }\n+\n+    @Test\n+    public void testLeftBounded() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), null);\n+        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\n+\n+        assertEquals(\n+            COL + \" >= date'2000-01-01'\",\n+            constraint\n+        );\n+    }\n+\n+    @Test\n+    public void testSpecialDateValue() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"0001-01-01\"), LocalDate.parse(\"1970-01-02\"));\n+        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\n+\n+        assertEquals(\n+            COL + \" >= date'0001-01-01' AND \" + COL + \" < date'1970-01-02'\",\n+            constraint\n+        );\n+    }\n+\n+    @Test\n+    public void testInvalidBothBoundariesNull() {\n+        Exception ex = assertThrows(RuntimeException.class,\n+            () -> new DatePartition(COL_RAW, null, null));\n+        assertEquals(\"Both boundaries cannot be null\", ex.getMessage());\n+    }\n+\n+    @Test\n+    public void testInvalidColumnNull() {\n+        assertThrows(RuntimeException.class,\n+            () -> new DatePartition(null, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\")));\n+    }\n+\n+    @Test\n+    public void testInvalidEqualBoundaries() {\n+        assertThrows(RuntimeException.class,\n+            () -> new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-01\")));\n+    }\n+\n+    @Test\n+    public void testInvalidNullQuoteString() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\n+        assertThrows(RuntimeException.class,\n+            () -> partition.toSqlConstraint(null, dbProduct));\n+    }\n+\n+    @Test\n+    public void testInvalidNullDbProduct() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\n+        assertThrows(RuntimeException.class,\n+            () -> partition.toSqlConstraint(COL, null));\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyNTYxMw=="}, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTU3NjAyOnYy", "diffSide": "RIGHT", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/BasePluginFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzoyMTo0OVrOGZF_bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzoyMTo0OVrOGZF_bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2NTc0Mw==", "bodyText": "here and elsewhere, instead of passing configuration around we can have it available from the RequestContext", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r428965743", "createdAt": "2020-05-21T23:21:49Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/BasePluginFactory.java", "diffHunk": "@@ -51,7 +55,7 @@ public T getPlugin(RequestContext requestContext) {\n         }\n \n         // initialize the instance\n-        instance.initialize(requestContext);\n+        instance.initialize(context, configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTU3OTYzOnYy", "diffSide": "RIGHT", "path": "server/pxf-jdbc/src/main/java/org/greenplum/pxf/plugins/jdbc/JdbcBasePlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzoyMzo0OFrOGZGBpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoyMDoyOVrOGZIpgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2NjMwOA==", "bodyText": "why is this commented out ?", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r428966308", "createdAt": "2020-05-21T23:23:48Z", "author": {"login": "denalex"}, "path": "server/pxf-jdbc/src/main/java/org/greenplum/pxf/plugins/jdbc/JdbcBasePlugin.java", "diffHunk": "@@ -456,14 +461,14 @@ public static void closeStatementAndConnection(Statement statement) throws SQLEx\n      * @throws Exception\r\n      */\r\n     private Connection getConnectionInternal() throws Exception {\r\n-        if (Utilities.isSecurityEnabled(configuration) && StringUtils.startsWith(jdbcUrl, HIVE_URL_PREFIX)) {\r\n-            return SecureLogin.getInstance().getLoginUser(context, configuration).\r\n-                    doAs((PrivilegedExceptionAction<Connection>) () ->\r\n-                            connectionManager.getConnection(context.getServerName(), jdbcUrl, connectionConfiguration, isConnectionPoolUsed, poolConfiguration, poolQualifier));\r\n-\r\n-        } else {\r\n+//        if (Utilities.isSecurityEnabled(configuration) && StringUtils.startsWith(jdbcUrl, HIVE_URL_PREFIX)) {\r\n+////            return SecureLogin.getInstance().getLoginUser(context, configuration).\r\n+////                    doAs((PrivilegedExceptionAction<Connection>) () ->\r\n+////                            connectionManager.getConnection(context.getServerName(), jdbcUrl, connectionConfiguration, isConnectionPoolUsed, poolConfiguration, poolQualifier));\r\n+//\r\n+//        } else {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTI4MQ==", "bodyText": "forgot to uncomment. restoring now..", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r429009281", "createdAt": "2020-05-22T02:20:29Z", "author": {"login": "frankgh"}, "path": "server/pxf-jdbc/src/main/java/org/greenplum/pxf/plugins/jdbc/JdbcBasePlugin.java", "diffHunk": "@@ -456,14 +461,14 @@ public static void closeStatementAndConnection(Statement statement) throws SQLEx\n      * @throws Exception\r\n      */\r\n     private Connection getConnectionInternal() throws Exception {\r\n-        if (Utilities.isSecurityEnabled(configuration) && StringUtils.startsWith(jdbcUrl, HIVE_URL_PREFIX)) {\r\n-            return SecureLogin.getInstance().getLoginUser(context, configuration).\r\n-                    doAs((PrivilegedExceptionAction<Connection>) () ->\r\n-                            connectionManager.getConnection(context.getServerName(), jdbcUrl, connectionConfiguration, isConnectionPoolUsed, poolConfiguration, poolQualifier));\r\n-\r\n-        } else {\r\n+//        if (Utilities.isSecurityEnabled(configuration) && StringUtils.startsWith(jdbcUrl, HIVE_URL_PREFIX)) {\r\n+////            return SecureLogin.getInstance().getLoginUser(context, configuration).\r\n+////                    doAs((PrivilegedExceptionAction<Connection>) () ->\r\n+////                            connectionManager.getConnection(context.getServerName(), jdbcUrl, connectionConfiguration, isConnectionPoolUsed, poolConfiguration, poolQualifier));\r\n+//\r\n+//        } else {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2NjMwOA=="}, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTU4Nzg4OnYy", "diffSide": "RIGHT", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzoyODo1MFrOGZGG6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoyNTo1OVrOGZIuXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2NzY1Ng==", "bodyText": "can this be autowired rather than directly obtained from the appContext ?", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r428967656", "createdAt": "2020-05-21T23:28:50Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "diffHunk": "@@ -26,7 +34,7 @@\n     @Bean\n     public FilterRegistrationBean<SecurityServletFilter> registerSecurityServletFilter() {\n         FilterRegistrationBean<SecurityServletFilter> registrationBean = new FilterRegistrationBean<>();\n-        registrationBean.setFilter(new SecurityServletFilter());\n+        registrationBean.setFilter(applicationContext.getBean(SecurityServletFilter.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxMDUyNQ==", "bodyText": "yes, not sure why I didn't do this in the first place :)", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r429010525", "createdAt": "2020-05-22T02:25:59Z", "author": {"login": "frankgh"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "diffHunk": "@@ -26,7 +34,7 @@\n     @Bean\n     public FilterRegistrationBean<SecurityServletFilter> registerSecurityServletFilter() {\n         FilterRegistrationBean<SecurityServletFilter> registrationBean = new FilterRegistrationBean<>();\n-        registrationBean.setFilter(new SecurityServletFilter());\n+        registrationBean.setFilter(applicationContext.getBean(SecurityServletFilter.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2NzY1Ng=="}, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTU4ODYzOnYy", "diffSide": "RIGHT", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/bridge/BaseBridge.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzoyOToxOFrOGZGHUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzoyOToxOFrOGZGHUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2Nzc2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Creates a new instance for a given request context. Uses provides instances of\n          \n          \n            \n                 * Creates a new instance for a given request context. Uses provided instances of", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r428967763", "createdAt": "2020-05-21T23:29:18Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/bridge/BaseBridge.java", "diffHunk": "@@ -16,30 +17,36 @@\n \n     protected final Logger LOG = LoggerFactory.getLogger(this.getClass());\n \n+    private final AccessorFactory accessorFactory;\n+    private final ResolverFactory resolverFactory;\n+\n     protected Accessor accessor;\n     protected Resolver resolver;\n \n     /**\n-     * Creates a new instance for a given request context. Uses default singleton instances of\n+     * Creates a new instance for a given request context. Uses provides instances of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTU5MTk2OnYy", "diffSide": "RIGHT", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/bridge/Bridge.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzozMToxNVrOGZGJbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoyOToxMFrOGZIw-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2ODMwMA==", "bodyText": "wonder whether making a Bridge also a Plugin is a good idea, plugins were for F/A/R classes.", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r428968300", "createdAt": "2020-05-21T23:31:15Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/bridge/Bridge.java", "diffHunk": "@@ -29,20 +30,19 @@\n  * class acts as an iterator over externally stored data, and should implement\n  * getNext (for reading) or setNext (for writing) for handling accessed data.\n  */\n-public interface Bridge {\n+public interface Bridge extends Plugin {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxMTE5NA==", "bodyText": "Bridge connects both A/R, and it already had a isThreadSafe method which is also present in the Plugin.  The bridge also consumes the RequestContext and Configuration that needs to be initialized", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r429011194", "createdAt": "2020-05-22T02:29:10Z", "author": {"login": "frankgh"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/bridge/Bridge.java", "diffHunk": "@@ -29,20 +30,19 @@\n  * class acts as an iterator over externally stored data, and should implement\n  * getNext (for reading) or setNext (for writing) for handling accessed data.\n  */\n-public interface Bridge {\n+public interface Bridge extends Plugin {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2ODMwMA=="}, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTYwNDI2OnYy", "diffSide": "RIGHT", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmenterResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzozODozNlrOGZGRAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzozODozNlrOGZGRAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3MDI0MQ==", "bodyText": "maybe parsing the request and creating configuration should go into a protected method on a BaseResource, they are repeating throughout.", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r428970241", "createdAt": "2020-05-21T23:38:36Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmenterResource.java", "diffHunk": "@@ -156,9 +154,15 @@ public FragmenterResource() {\n             @RequestHeader MultiValueMap<String, String> headers) throws Exception {\n \n         RequestContext context = parseRequest(headers);\n+        Configuration configuration = configurationFactory.\n+                initConfiguration(\n+                        context.getConfig(),\n+                        context.getServerName(),\n+                        context.getUser(),\n+                        context.getAdditionalConfigProps());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTYwNjkxOnYy", "diffSide": "RIGHT", "path": "server/pxf-service/src/main/resources/application.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzo0MDoxNVrOGZGSmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzo0MDoxNVrOGZGSmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3MDY1MQ==", "bodyText": "would be good to comment what these are for", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r428970651", "createdAt": "2020-05-21T23:40:15Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/main/resources/application.properties", "diffHunk": "@@ -7,6 +7,8 @@ server.port=${pxf.port:5888}\n server.tomcat.max-threads=${pxf.max.threads:200}\n \n # Settings migrated from web.xml\n+server.error.whitelabel.enabled=false\n+spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3654, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}