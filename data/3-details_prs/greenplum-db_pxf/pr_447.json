{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MzQ4MDIx", "number": 447, "title": "Spring Boot - changes to pxf init", "bodyText": "Deprecate the pxf [cluster] init and pxf [cluster] reset commands\n\npxf [cluster] init only registers the extension in the Greenplum directory\npxf [cluster] reset is a no-operation\npxf [cluster] init is no longer needed to start PXF\npxf [cluster] register only copies the control file and the control file points to the pxf.so and pxf--1.0.sql files inside $PXF_HOME\nThe PXF_CONF concept is replaced with PXF_RUN\nPXF_RUN defaults to PXF_HOME\n\nThe layout of the RPM installation is the following:\n[root@a297dc3d7dbb pxf-gp6]# tree -f -p\n.\n\u251c\u2500\u2500 [drwxr-xr-x]  ./application\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [-rw-r--r--]  ./application/pxf-service-6.0.0-SNAPSHOT.jar\n\u251c\u2500\u2500 [drwxr-xr-x]  ./bin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rwxr-xr-x]  ./bin/kill-pxf.sh\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rwxr-xr-x]  ./bin/pxf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [-rwxr-xr-x]  ./bin/pxf-cli\n\u251c\u2500\u2500 [-rw-r--r--]  ./commit.sha\n\u251c\u2500\u2500 [drwxr-xr-x]  ./conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./conf/pxf-application.properties\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./conf/pxf-env.sh\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./conf/pxf-log4j2.xml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [-rw-r--r--]  ./conf/pxf-profiles.xml\n\u251c\u2500\u2500 [drwxr-xr-x]  ./gpextable\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [drwxr-xr-x]  ./gpextable/lib\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [drwxr-xr-x]  ./gpextable/lib/postgresql\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 [-rwxr-xr-x]  ./gpextable/lib/postgresql/pxf.so\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [drwxr-xr-x]  ./gpextable/share\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 [drwxr-xr-x]  ./gpextable/share/postgresql\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 [drwxr-xr-x]  ./gpextable/share/postgresql/extension\n\u2502\u00a0\u00a0             \u251c\u2500\u2500 [-rw-r--r--]  ./gpextable/share/postgresql/extension/pxf--1.0.sql\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 [-rw-r--r--]  ./gpextable/share/postgresql/extension/pxf.control\n\u251c\u2500\u2500 [drwxr-xr-x]  ./keytabs\n\u251c\u2500\u2500 [drwxr-xr-x]  ./lib\n\u251c\u2500\u2500 [drwx------]  ./logs\n\u251c\u2500\u2500 [drwx------]  ./run\n\u251c\u2500\u2500 [drwxr-xr-x]  ./servers\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [drwxr-xr-x]  ./servers/default\n\u251c\u2500\u2500 [drwxr-xr-x]  ./share\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [-rw-r--r--]  ./share/pxf-hbase-6.0.0-SNAPSHOT.jar\n\u251c\u2500\u2500 [drwxr-xr-x]  ./templates\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./templates/adl-site.xml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./templates/core-site.xml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./templates/gs-site.xml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./templates/hbase-site.xml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./templates/hdfs-site.xml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./templates/hive-site.xml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./templates/jdbc-site.xml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./templates/mapred-site.xml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./templates/minio-site.xml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./templates/pxf-site.xml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./templates/s3-site.xml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  ./templates/wasbs-site.xml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [-rw-r--r--]  ./templates/yarn-site.xml\n\u2514\u2500\u2500 [-rw-r--r--]  ./version\n\n\npxf-profiles-default.xml is now classloaded from the jar, no physical file anymore\nRemove pxf-env-default.sh and merge remaining properties with the pxf script\nAdd a pxf-applicaiton.configuration file that replaces properties from pxf-env.sh", "createdAt": "2020-09-10T21:28:37Z", "url": "https://github.com/greenplum-db/pxf/pull/447", "merged": true, "mergeCommit": {"oid": "a92a02853989f6405dca601cfedd1774a1b19160"}, "closed": true, "closedAt": "2020-09-24T17:26:57Z", "author": {"login": "frankgh"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHpBFkAFqTQ4NjMzNTA1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMEmyngBqjM4MDQzMTU5NjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzM1MDU0", "url": "https://github.com/greenplum-db/pxf/pull/447#pullrequestreview-486335054", "createdAt": "2020-09-10T21:50:05Z", "commit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "state": "COMMENTED", "comments": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTo1MDowNVrOHQG-Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjo1OTozNFrOHQIiUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1MzQ0Mw==", "bodyText": "since we are preserving and deprecating the old commands, should we deprecate PXF_CONF rather than removing it ? If it is set, we can print warning, but still use the value specified as PXF_RUN ?", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486653443", "createdAt": "2020-09-10T21:50:05Z", "author": {"login": "denalex"}, "path": "cli/go/src/pxf-cli/cmd/pxf.go", "diffHunk": "@@ -16,7 +16,7 @@ type envVar string\n const (\n \tgpHome   envVar = \"GPHOME\"\n \tpxfHome  envVar = \"PXF_HOME\"\n-\tpxfConf  envVar = \"PXF_CONF\"\n+\tpxfRun  envVar = \"PXF_RUN\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1NDU4Mg==", "bodyText": "does listing a variable here make is mandatory ? PXF_RUN is not mandatory for start / stop, but can be specified if it is not equal to PXF_HOME", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486654582", "createdAt": "2020-09-10T21:52:46Z", "author": {"login": "denalex"}, "path": "cli/go/src/pxf-cli/cmd/pxf.go", "diffHunk": "@@ -130,7 +130,7 @@ var (\n \t\t\terr:     \"PXF failed to start on %d out of %d host%s\\n\",\n \t\t},\n \t\twarn:       false,\n-\t\tenvVars:    []envVar{pxfHome},\n+\t\tenvVars:    []envVar{pxfHome, pxfRun},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1NTU2MA==", "bodyText": "why do we need PXF_RUN for init ? it should only copy extension file and is not dependent on PXF_RUN value, no ?", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486655560", "createdAt": "2020-09-10T21:55:15Z", "author": {"login": "denalex"}, "path": "cli/go/src/pxf-cli/cmd/pxf_test.go", "diffHunk": "@@ -11,27 +11,27 @@ import (\n )\n \n var _ = Describe(\"CommandFunc\", func() {\n-\tContext(\"when GPHOME, JAVA_HOME, PXF_CONF and PXF_HOME are set\", func() {\n+\tContext(\"when GPHOME, JAVA_HOME, PXF_RUN and PXF_HOME are set\", func() {\n \t\tBeforeEach(func() {\n \t\t\t_ = os.Setenv(\"GPHOME\", \"/test/gphome\")\n \t\t\t_ = os.Setenv(\"PXF_HOME\", \"/test/pxfhome\")\n-\t\t\t_ = os.Setenv(\"PXF_CONF\", \"/test/somewhere/pxf_conf\")\n+\t\t\t_ = os.Setenv(\"PXF_RUN\", \"/test/somewhere/pxf_run\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1NjY5MA==", "bodyText": "doesn't stop needs to know now where PXF_RUN is to lookup / manage PID ?", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486656690", "createdAt": "2020-09-10T21:58:03Z", "author": {"login": "denalex"}, "path": "cli/go/src/pxf-cli/cmd/pxf_test.go", "diffHunk": "@@ -47,117 +47,117 @@ var _ = Describe(\"CommandFunc\", func() {\n \t\tIt(\"successfully generates start, stop, status, restart, and reset commands\", func() {\n \t\t\tcommandFunc, err := cmd.StartCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf start\"))\n+\t\t\tExpect(\"PXF_RUN=/test/somewhere/pxf_run /test/pxfhome/bin/pxf start\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.StopCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf stop\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf stop\").To(Equal(commandFunc(\"foo\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1Njg3Nw==", "bodyText": "same for the above 2 commands", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486656877", "createdAt": "2020-09-10T21:58:34Z", "author": {"login": "denalex"}, "path": "cli/go/src/pxf-cli/cmd/pxf_test.go", "diffHunk": "@@ -47,117 +47,117 @@ var _ = Describe(\"CommandFunc\", func() {\n \t\tIt(\"successfully generates start, stop, status, restart, and reset commands\", func() {\n \t\t\tcommandFunc, err := cmd.StartCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf start\"))\n+\t\t\tExpect(\"PXF_RUN=/test/somewhere/pxf_run /test/pxfhome/bin/pxf start\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.StopCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf stop\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf stop\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.StatusCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf status\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf status\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.RestartCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf restart\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf restart\").To(Equal(commandFunc(\"foo\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1NzQ5NA==", "bodyText": "no longer true, if PXF_RUN is not set it is assumed to be the same as PXF_HOME", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486657494", "createdAt": "2020-09-10T22:00:08Z", "author": {"login": "denalex"}, "path": "cli/go/src/pxf-cli/cmd/pxf_test.go", "diffHunk": "@@ -47,117 +47,117 @@ var _ = Describe(\"CommandFunc\", func() {\n \t\tIt(\"successfully generates start, stop, status, restart, and reset commands\", func() {\n \t\t\tcommandFunc, err := cmd.StartCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf start\"))\n+\t\t\tExpect(\"PXF_RUN=/test/somewhere/pxf_run /test/pxfhome/bin/pxf start\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.StopCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf stop\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf stop\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.StatusCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf status\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf status\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.RestartCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf restart\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf restart\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.ResetCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf reset --force\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf reset --force\").To(Equal(commandFunc(\"foo\")))\n \t\t})\n \t})\n \n-\tContext(\"when PXF_CONF is not set\", func() {\n+\tContext(\"when PXF_RUN is not set\", func() {\n \t\tBeforeEach(func() {\n \t\t\t_ = os.Setenv(\"GPHOME\", \"/test/gphome\")\n \t\t\t_ = os.Setenv(\"PXF_HOME\", \"/test/pxfhome\")\n-\t\t\t_ = os.Unsetenv(\"PXF_CONF\")\n+\t\t\t_ = os.Unsetenv(\"PXF_RUN\")\n \t\t\t_ = os.Unsetenv(\"JAVA_HOME\")\n \t\t})\n \n-\t\tIt(\"successfully generates start, stop, status, restart, and reset commands\", func() {\n-\t\t\tcommandFunc, err := cmd.StartCommand.GetFunctionToExecute()\n-\t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf start\"))\n-\n-\t\t\tcommandFunc, err = cmd.StopCommand.GetFunctionToExecute()\n+\t\tIt(\"successfully generates stop, status, restart, and reset commands\", func() {\n+\t\t\tcommandFunc, err := cmd.StopCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf stop\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf stop\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.StatusCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf status\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf status\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.RestartCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf restart\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf restart\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.ResetCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf reset --force\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf reset --force\").To(Equal(commandFunc(\"foo\")))\n \t\t})\n-\t\tIt(\"fails to init or sync\", func() {\n-\t\t\tcommandFunc, err := cmd.InitCommand.GetFunctionToExecute()\n+\t\tIt(\"fails to start, init or sync\", func() {\n+\t\t\tcommandFunc, err := cmd.StartCommand.GetFunctionToExecute()\n \t\t\tExpect(commandFunc).To(BeNil())\n-\t\t\tExpect(err).To(Equal(errors.New(\"PXF_CONF must be set\")))\n+\t\t\tExpect(err).To(Equal(errors.New(\"PXF_RUN must be set\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1NzYzOA==", "bodyText": "init should not care about PXF_RUN now", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486657638", "createdAt": "2020-09-10T22:00:31Z", "author": {"login": "denalex"}, "path": "cli/go/src/pxf-cli/cmd/pxf_test.go", "diffHunk": "@@ -47,117 +47,117 @@ var _ = Describe(\"CommandFunc\", func() {\n \t\tIt(\"successfully generates start, stop, status, restart, and reset commands\", func() {\n \t\t\tcommandFunc, err := cmd.StartCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf start\"))\n+\t\t\tExpect(\"PXF_RUN=/test/somewhere/pxf_run /test/pxfhome/bin/pxf start\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.StopCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf stop\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf stop\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.StatusCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf status\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf status\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.RestartCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf restart\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf restart\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.ResetCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf reset --force\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf reset --force\").To(Equal(commandFunc(\"foo\")))\n \t\t})\n \t})\n \n-\tContext(\"when PXF_CONF is not set\", func() {\n+\tContext(\"when PXF_RUN is not set\", func() {\n \t\tBeforeEach(func() {\n \t\t\t_ = os.Setenv(\"GPHOME\", \"/test/gphome\")\n \t\t\t_ = os.Setenv(\"PXF_HOME\", \"/test/pxfhome\")\n-\t\t\t_ = os.Unsetenv(\"PXF_CONF\")\n+\t\t\t_ = os.Unsetenv(\"PXF_RUN\")\n \t\t\t_ = os.Unsetenv(\"JAVA_HOME\")\n \t\t})\n \n-\t\tIt(\"successfully generates start, stop, status, restart, and reset commands\", func() {\n-\t\t\tcommandFunc, err := cmd.StartCommand.GetFunctionToExecute()\n-\t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf start\"))\n-\n-\t\t\tcommandFunc, err = cmd.StopCommand.GetFunctionToExecute()\n+\t\tIt(\"successfully generates stop, status, restart, and reset commands\", func() {\n+\t\t\tcommandFunc, err := cmd.StopCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf stop\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf stop\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.StatusCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf status\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf status\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.RestartCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf restart\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf restart\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.ResetCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf reset --force\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf reset --force\").To(Equal(commandFunc(\"foo\")))\n \t\t})\n-\t\tIt(\"fails to init or sync\", func() {\n-\t\t\tcommandFunc, err := cmd.InitCommand.GetFunctionToExecute()\n+\t\tIt(\"fails to start, init or sync\", func() {\n+\t\t\tcommandFunc, err := cmd.StartCommand.GetFunctionToExecute()\n \t\t\tExpect(commandFunc).To(BeNil())\n-\t\t\tExpect(err).To(Equal(errors.New(\"PXF_CONF must be set\")))\n+\t\t\tExpect(err).To(Equal(errors.New(\"PXF_RUN must be set\")))\n+\n+\t\t\tcommandFunc, err = cmd.InitCommand.GetFunctionToExecute()\n+\t\t\tExpect(commandFunc).To(BeNil())\n+\t\t\tExpect(err).To(Equal(errors.New(\"PXF_RUN must be set\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1NzgyNg==", "bodyText": "sync should still work and sync from PXF_HOME", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486657826", "createdAt": "2020-09-10T22:00:57Z", "author": {"login": "denalex"}, "path": "cli/go/src/pxf-cli/cmd/pxf_test.go", "diffHunk": "@@ -47,117 +47,117 @@ var _ = Describe(\"CommandFunc\", func() {\n \t\tIt(\"successfully generates start, stop, status, restart, and reset commands\", func() {\n \t\t\tcommandFunc, err := cmd.StartCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf start\"))\n+\t\t\tExpect(\"PXF_RUN=/test/somewhere/pxf_run /test/pxfhome/bin/pxf start\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.StopCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf stop\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf stop\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.StatusCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf status\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf status\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.RestartCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf restart\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf restart\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.ResetCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf reset --force\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf reset --force\").To(Equal(commandFunc(\"foo\")))\n \t\t})\n \t})\n \n-\tContext(\"when PXF_CONF is not set\", func() {\n+\tContext(\"when PXF_RUN is not set\", func() {\n \t\tBeforeEach(func() {\n \t\t\t_ = os.Setenv(\"GPHOME\", \"/test/gphome\")\n \t\t\t_ = os.Setenv(\"PXF_HOME\", \"/test/pxfhome\")\n-\t\t\t_ = os.Unsetenv(\"PXF_CONF\")\n+\t\t\t_ = os.Unsetenv(\"PXF_RUN\")\n \t\t\t_ = os.Unsetenv(\"JAVA_HOME\")\n \t\t})\n \n-\t\tIt(\"successfully generates start, stop, status, restart, and reset commands\", func() {\n-\t\t\tcommandFunc, err := cmd.StartCommand.GetFunctionToExecute()\n-\t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf start\"))\n-\n-\t\t\tcommandFunc, err = cmd.StopCommand.GetFunctionToExecute()\n+\t\tIt(\"successfully generates stop, status, restart, and reset commands\", func() {\n+\t\t\tcommandFunc, err := cmd.StopCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf stop\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf stop\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.StatusCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf status\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf status\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.RestartCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf restart\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf restart\").To(Equal(commandFunc(\"foo\")))\n \n \t\t\tcommandFunc, err = cmd.ResetCommand.GetFunctionToExecute()\n \t\t\tExpect(err).To(BeNil())\n-\t\t\tExpect(commandFunc(\"foo\")).To(Equal(\"/test/pxfhome/bin/pxf reset --force\"))\n+\t\t\tExpect(\"/test/pxfhome/bin/pxf reset --force\").To(Equal(commandFunc(\"foo\")))\n \t\t})\n-\t\tIt(\"fails to init or sync\", func() {\n-\t\t\tcommandFunc, err := cmd.InitCommand.GetFunctionToExecute()\n+\t\tIt(\"fails to start, init or sync\", func() {\n+\t\t\tcommandFunc, err := cmd.StartCommand.GetFunctionToExecute()\n \t\t\tExpect(commandFunc).To(BeNil())\n-\t\t\tExpect(err).To(Equal(errors.New(\"PXF_CONF must be set\")))\n+\t\t\tExpect(err).To(Equal(errors.New(\"PXF_RUN must be set\")))\n+\n+\t\t\tcommandFunc, err = cmd.InitCommand.GetFunctionToExecute()\n+\t\t\tExpect(commandFunc).To(BeNil())\n+\t\t\tExpect(err).To(Equal(errors.New(\"PXF_RUN must be set\")))\n \n \t\t\tcommandFunc, err = cmd.SyncCommand.GetFunctionToExecute()\n \t\t\tExpect(commandFunc).To(BeNil())\n-\t\t\tExpect(err).To(Equal(errors.New(\"PXF_CONF must be set\")))\n+\t\t\tExpect(err).To(Equal(errors.New(\"PXF_RUN must be set\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1ODgyNg==", "bodyText": "this is redundant, it should only be set if different from PXF_HOME -- comment applies to all similar files", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486658826", "createdAt": "2020-09-10T22:03:33Z", "author": {"login": "denalex"}, "path": "concourse/docker/pxf-dev-base/gpdb5/centos6/Dockerfile", "diffHunk": "@@ -54,7 +54,7 @@ RUN ssh-keygen -t rsa -N \"\" -f /root/.ssh/id_rsa \\\n     && echo >> ~gpadmin/.pxfrc 'export LD_LIBRARY_PATH=${GPHOME}/lib:${LD_LIBRARY_PATH-}' \\\n     && echo >> ~gpadmin/.pxfrc 'export GPHD_ROOT=/singlecluster' \\\n     && echo >> ~gpadmin/.pxfrc 'export PXF_HOME=/usr/local/pxf-gp5' \\\n-    && echo >> ~gpadmin/.pxfrc 'export PXF_CONF=/home/gpadmin/pxf' \\\n+    && echo >> ~gpadmin/.pxfrc 'export PXF_RUN=/usr/local/pxf-gp5' \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1OTE2Ng==", "bodyText": "not sure if this change is intended or not", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486659166", "createdAt": "2020-09-10T22:04:22Z", "author": {"login": "denalex"}, "path": "concourse/scripts/cli/common.sh", "diffHunk": "@@ -17,7 +17,8 @@ compare() {\n \tlocal usage='compare <expected_text> <text_to_compare> <msg>'\n \tlocal expected=${1:?${usage}} text=${2:?${usage}} msg=\"$(( ++test_cnt ))) ${3:?${usage}}\"\n \techo -e \"${yellow}${msg}${white}:\"\n-\tif [[ ${expected} == \"${text//\r/}\" ]]; then # clean up any cairrage returns\n+\tif [[ ${expected} == \"${text//\n+/}\" ]]; then # clean up any carriage returns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2MTE5MQ==", "bodyText": "this is not very clear and general enough now -- if PXF_RUN == PXF_HOME, then the directory will already exist without register being performed and register will be skipped", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486661191", "createdAt": "2020-09-10T22:09:35Z", "author": {"login": "denalex"}, "path": "concourse/scripts/test_pxf_multinode.bash", "diffHunk": "@@ -79,61 +79,61 @@ function setup_pxf_on_cluster() {\n \t# drop named query file for JDBC test to gpadmin's home on mdw\n \tscp \"${SSH_OPTS[@]}\" pxf_src/automation/src/test/resources/{,hive-}report.sql gpadmin@mdw:\n \n-\t# init all PXFs using cluster command, configure PXF on master, sync configs and start pxf\n+\t# configure PXF on master, sync configs and start pxf\n \tssh \"${SSH_OPTS[@]}\" gpadmin@mdw \"\n \t\tsource ${GPHOME}/greenplum_path.sh &&\n-\t\tif [[ ! -d ${PXF_CONF_DIR} ]]; then\n-\t\t\tGPHOME=${GPHOME} PXF_CONF=${PXF_CONF_DIR} ${PXF_HOME}/bin/pxf cluster init\n-\t\t\tcp ${PXF_CONF_DIR}/templates/{hdfs,mapred,yarn,core,hbase,hive}-site.xml ${PXF_CONF_DIR}/servers/default\n-\t\t\tsed -i -e 's/\\(0.0.0.0\\|localhost\\|127.0.0.1\\)/${hadoop_ip}/g' ${PXF_CONF_DIR}/servers/default/*-site.xml\n+\t\tif [[ ! -d ${PXF_RUN_DIR} ]]; then\n+\t\t\t${PXF_HOME}/bin/pxf cluster register", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2MTk2OA==", "bodyText": "do we need to chown -R gpadmin:gpadmin ${PXF_RUN_DIR} then ?", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486661968", "createdAt": "2020-09-10T22:11:44Z", "author": {"login": "denalex"}, "path": "concourse/scripts/test_pxf_multinode.bash", "diffHunk": "@@ -316,7 +316,7 @@ function run_pxf_automation() {\n \telse\n \t\tsed -i 's/sutFile=default.xml/sutFile=MultiNodesCluster.xml/g' pxf_src/automation/jsystem.properties\n \tfi\n-\tchown -R gpadmin:gpadmin ~gpadmin/{.ssh,pxf} pxf_src/automation\n+\tchown -R gpadmin:gpadmin ~gpadmin/.ssh pxf_src/automation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2Mzc1MQ==", "bodyText": "maybe it's better to create them during staging process ? Also test rpm rebuilding job to make sure the included script there does not break things now.", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486663751", "createdAt": "2020-09-10T22:16:30Z", "author": {"login": "denalex"}, "path": "package/pxf-gp5.spec", "diffHunk": "@@ -36,6 +36,8 @@ fi\n \n %files\n %{prefix}\n+%attr(700, -, -) %dir %{prefix}/logs\n+%attr(700, -, -) %dir %{prefix}/run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NDA3Ng==", "bodyText": "not required, should default to PXF_HOME", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486664076", "createdAt": "2020-09-10T22:17:01Z", "author": {"login": "denalex"}, "path": "regression/Makefile", "diffHunk": "@@ -1,8 +1,8 @@\n ifndef GPHOME\n $(error GPHOME is not defined)\n endif\n-ifndef PXF_CONF\n-$(error PXF_CONF is not defined)\n+ifndef PXF_RUN\n+$(error PXF_RUN is not defined)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NDc1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All the general environment variables that come from `greenplum_path.sh` and `gpdemo-env.sh`, along with `PXF_RUN` must be set.\n          \n          \n            \n            All the general environment variables that come from `greenplum_path.sh` and `gpdemo-env.sh`. Additionally, `PXF_RUN` must be set if different from `PXF_HOME`.", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486664757", "createdAt": "2020-09-10T22:18:12Z", "author": {"login": "denalex"}, "path": "regression/README.md", "diffHunk": "@@ -46,10 +46,10 @@ By setting environment variables you can change the location of the Greenplum ma\n \n ### General environment variables\n \n-All the general environment variables that come from `greenplum_path.sh` and `gpdemo-env.sh`, along with `PXF_CONF` must be set.\n+All the general environment variables that come from `greenplum_path.sh` and `gpdemo-env.sh`, along with `PXF_RUN` must be set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NzQ4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this(new File(String.format(\"%s%sservers\", pxfServerProperties.getRun(), File.separator)));\n          \n          \n            \n                    this(new File(String.format(\"%s%sservers\", pxfServerProperties.getRunDir(), File.separator)));\n          \n      \n    \n    \n  \n\nmaybe name that method better", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486667484", "createdAt": "2020-09-10T22:25:34Z", "author": {"login": "denalex"}, "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/model/BaseConfigurationFactory.java", "diffHunk": "@@ -27,7 +27,7 @@\n \n     @Autowired\n     public BaseConfigurationFactory(PxfServerProperties pxfServerProperties) {\n-        this(new File(String.format(\"%s%sservers\", pxfServerProperties.getConf(), File.separator)));\n+        this(new File(String.format(\"%s%sservers\", pxfServerProperties.getRun(), File.separator)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2ODYzNQ==", "bodyText": "wow ! :-)", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486668635", "createdAt": "2020-09-10T22:28:47Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/main/resources/banner.txt", "diffHunk": "@@ -0,0 +1,10 @@\n+\n+.______   ___   ___  _______ \n+|   _  \\  \\  \\ /  / |   ____|\n+|  |_)  |  \\  V  /  |  |__   \n+|   ___/    >   <   |   __|  \n+|  |       /  .  \\  |  |     \n+| _|      /__/ \\__\\ |__|     \n+                             \n+\n+:: Built with Spring Boot :: ${spring-boot.version}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTg3NQ==", "bodyText": "need to apply new logic here ?", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486669875", "createdAt": "2020-09-10T22:32:23Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -24,6 +24,50 @@\n \n WORKING_DIR=\"$(pwd)\"\n \n+PARENT_SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd )\"\n+\n+# Default PXF_HOME\n+export PXF_HOME=${PXF_HOME:=${PARENT_SCRIPT_DIR}}\n+\n+# Path to PXF_RUN directories, defaults to PXF_HOME\n+export PXF_RUN=${PXF_RUN:-$PXF_HOME}\n+\n+[[ -f ${PXF_RUN}/conf/pxf-env.sh ]] && source \"${PXF_RUN}/conf/pxf-env.sh\"\n+\n+# Path to HDFS native libraries\n+export LD_LIBRARY_PATH=/usr/lib/hadoop/lib/native:${LD_LIBRARY_PATH}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MDMzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            export PXF_RUNDIR=${PXF_HOME}/run\n          \n          \n            \n            export PXF_RUNDIR=${PXF_RUNDIR:=${PXF_RUN}/run}", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486670331", "createdAt": "2020-09-10T22:33:34Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -24,6 +24,50 @@\n \n WORKING_DIR=\"$(pwd)\"\n \n+PARENT_SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd )\"\n+\n+# Default PXF_HOME\n+export PXF_HOME=${PXF_HOME:=${PARENT_SCRIPT_DIR}}\n+\n+# Path to PXF_RUN directories, defaults to PXF_HOME\n+export PXF_RUN=${PXF_RUN:-$PXF_HOME}\n+\n+[[ -f ${PXF_RUN}/conf/pxf-env.sh ]] && source \"${PXF_RUN}/conf/pxf-env.sh\"\n+\n+# Path to HDFS native libraries\n+export LD_LIBRARY_PATH=/usr/lib/hadoop/lib/native:${LD_LIBRARY_PATH}\n+\n+# Path to JAVA\n+export JAVA_HOME=${JAVA_HOME:=/usr/java/default}\n+\n+# Path to Log directory\n+export PXF_LOGDIR=${PXF_LOGDIR:=${PXF_RUN}/logs}\n+\n+# Path to Run directory\n+export PXF_RUNDIR=${PXF_HOME}/run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MDUxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            export PXF_RUN=${PXF_RUN:-$PXF_HOME}\n          \n          \n            \n            export PXF_RUN=${PXF_RUN:=$PXF_HOME}", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486670519", "createdAt": "2020-09-10T22:34:05Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -24,6 +24,50 @@\n \n WORKING_DIR=\"$(pwd)\"\n \n+PARENT_SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd )\"\n+\n+# Default PXF_HOME\n+export PXF_HOME=${PXF_HOME:=${PARENT_SCRIPT_DIR}}\n+\n+# Path to PXF_RUN directories, defaults to PXF_HOME\n+export PXF_RUN=${PXF_RUN:-$PXF_HOME}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MDk5NQ==", "bodyText": "this ^^ not gonna work, we have to assume this file is read-only", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486670995", "createdAt": "2020-09-10T22:35:19Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -24,6 +24,50 @@\n \n WORKING_DIR=\"$(pwd)\"\n \n+PARENT_SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd )\"\n+\n+# Default PXF_HOME\n+export PXF_HOME=${PXF_HOME:=${PARENT_SCRIPT_DIR}}\n+\n+# Path to PXF_RUN directories, defaults to PXF_HOME\n+export PXF_RUN=${PXF_RUN:-$PXF_HOME}\n+\n+[[ -f ${PXF_RUN}/conf/pxf-env.sh ]] && source \"${PXF_RUN}/conf/pxf-env.sh\"\n+\n+# Path to HDFS native libraries\n+export LD_LIBRARY_PATH=/usr/lib/hadoop/lib/native:${LD_LIBRARY_PATH}\n+\n+# Path to JAVA\n+export JAVA_HOME=${JAVA_HOME:=/usr/java/default}\n+\n+# Path to Log directory\n+export PXF_LOGDIR=${PXF_LOGDIR:=${PXF_RUN}/logs}\n+\n+# Path to Run directory\n+export PXF_RUNDIR=${PXF_HOME}/run\n+\n+# Port\n+export PXF_PORT=${PXF_PORT:=5888}\n+\n+# Memory\n+export PXF_JVM_OPTS=${PXF_JVM_OPTS:='-Xmx2g -Xms1g'}\n+\n+# Set to true to enable Remote debug via port 2020\n+export PXF_DEBUG=${PXF_DEBUG:-false}\n+\n+# Kill PXF on OutOfMemoryError, set to false to disable\n+export PXF_OOM_KILL=${PXF_OOM_KILL:-true}\n+\n+# Dump heap on OutOfMemoryError, set to dump path to enable\n+# export PXF_OOM_DUMP_PATH=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MTQwNA==", "bodyText": "can we use the new syntax with + for expansion of unset variables to nothing and do 1-liner here ?", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486671404", "createdAt": "2020-09-10T22:36:27Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -24,6 +24,50 @@\n \n WORKING_DIR=\"$(pwd)\"\n \n+PARENT_SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd )\"\n+\n+# Default PXF_HOME\n+export PXF_HOME=${PXF_HOME:=${PARENT_SCRIPT_DIR}}\n+\n+# Path to PXF_RUN directories, defaults to PXF_HOME\n+export PXF_RUN=${PXF_RUN:-$PXF_HOME}\n+\n+[[ -f ${PXF_RUN}/conf/pxf-env.sh ]] && source \"${PXF_RUN}/conf/pxf-env.sh\"\n+\n+# Path to HDFS native libraries\n+export LD_LIBRARY_PATH=/usr/lib/hadoop/lib/native:${LD_LIBRARY_PATH}\n+\n+# Path to JAVA\n+export JAVA_HOME=${JAVA_HOME:=/usr/java/default}\n+\n+# Path to Log directory\n+export PXF_LOGDIR=${PXF_LOGDIR:=${PXF_RUN}/logs}\n+\n+# Path to Run directory\n+export PXF_RUNDIR=${PXF_HOME}/run\n+\n+# Port\n+export PXF_PORT=${PXF_PORT:=5888}\n+\n+# Memory\n+export PXF_JVM_OPTS=${PXF_JVM_OPTS:='-Xmx2g -Xms1g'}\n+\n+# Set to true to enable Remote debug via port 2020\n+export PXF_DEBUG=${PXF_DEBUG:-false}\n+\n+# Kill PXF on OutOfMemoryError, set to false to disable\n+export PXF_OOM_KILL=${PXF_OOM_KILL:-true}\n+\n+# Dump heap on OutOfMemoryError, set to dump path to enable\n+# export PXF_OOM_DUMP_PATH=\n+\n+# Additional locations to be class-loaded by the application\n+if [[ -n \"${PXF_LOADER_PATH}\" ]]; then\n+  export LOADER_PATH=\"${PXF_LOADER_PATH},file:${PXF_RUN}/conf,file:${PXF_RUN}/lib\"\n+else\n+  export LOADER_PATH=\"file:${PXF_RUN}/conf,file:${PXF_RUN}/lib\"\n+fi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MTc4OA==", "bodyText": "not sure if this is symlink friendly, there seems to be logic below that does symlinks", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486671788", "createdAt": "2020-09-10T22:37:35Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -24,6 +24,50 @@\n \n WORKING_DIR=\"$(pwd)\"\n \n+PARENT_SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd )\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MjUzNw==", "bodyText": "maybe it's time to rename it to just pxf.jar or pxf-app.jar form pxf-service.jar ?", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486672537", "createdAt": "2020-09-10T22:39:36Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -41,8 +85,7 @@ export PXF_HOME=$parent_script_dir\n [[ -z \"$STOP_WAIT_TIME\" ]] && STOP_WAIT_TIME=\"60\"\n identity=\"pxf-service\"\n \n-jarfile=\"${PXF_HOME}/server/pxf-service-_PXF_VERSION_.jar\"\n-default_env_script=${PXF_HOME}/conf/pxf-env-default.sh\n+jarfile=\"${PXF_HOME}/application/pxf-service-_PXF_VERSION_.jar\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MzY3OQ==", "bodyText": "are we still sourcing the file ? where ?", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486673679", "createdAt": "2020-09-10T22:42:40Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -61,68 +104,21 @@ function validate_user()\n     [[ $EUID == 0 ]] && fail 'Cannot run as root user'\n }\n \n-function confirm_with_user()\n-{\n-    echoGreen  '*****************************************************************************'\n-    echoGreen  '* The PXF_CONF variable is not defined, using default location'\n-    echoGreen  \"* Using ${PXF_CONF} for user configurations\"\n-    echoYellow '* WARNING: using this directory is not recommended for production deployments'\n-    echoGreen  '*****************************************************************************'\n-\n-    read -rp 'Do you want to proceed? [Y]: ' answer\n-    answer=${answer:-'Y'}\n-    case ${answer:0:1} in\n-        y|Y)\n-            echoGreen 'Proceeding with the initialization'\n-        ;;\n-        *)\n-            echoYellow 'Initialization aborted'\n-            exit 1\n-        ;;\n-    esac\n-}\n-\n-function update_pxf_conf()\n-{\n-    if [[ -z $PXF_CONF ]]; then\n-        # PXF_CONF was not specified during init command\n-        # need to default to user's home directory and ask for confirmation, unless silent mode is used\n-        local current_user pxf_user_home\n-        current_user=$( id -un )\n-        pxf_user_home=$HOME\n-        if [[ -z $pxf_user_home ]]; then\n-            fail \"PXF_CONF is not set and user $current_user home directory is not defined\"\n-        elif [[ ! -d ${pxf_user_home} ]]; then\n-            fail \"PXF_CONF is not set and user $current_user home directory $pxf_user_home does not exist\"\n-        else\n-            export PXF_CONF=${pxf_user_home}/pxf\n-            if [[ $silent == false ]]; then\n-                confirm_with_user\n-            fi\n-        fi\n-    fi\n-\n-    echoYellow \"Using $PXF_CONF as a location for user-configurable files\"\n-\n-    # update the value on PXF_CONF in the default env file\n-    sed \"${SED_OPTS[@]}\" \"s|{PXF_CONF:-.*}$|{PXF_CONF:-\\\"${PXF_CONF}\\\"}|g\" \"$default_env_script\"\n-}\n-\n function getEnvironment()\n {\n     local USER_SPECIFIED_JAVA_HOME=${JAVA_HOME}\n-    # load default environment\n-    if [[ ! -f $default_env_script ]]; then\n-        fail \"Failed to find $default_env_script\"\n-    fi\n-    # shellcheck source=/Users/pivotal/workspace/pxf/server/pxf-service/src/scripts/pxf-env-default.sh\n-    source \"$default_env_script\"\n     # we may have just overridden the user's intended JAVA_HOME\n-    # by sourcing PXF_CONF/conf/pxf-env.sh\n+    # by sourcing PXF_RUN/conf/pxf-env.sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3Mzk5OA==", "bodyText": "remove comment ?", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486673998", "createdAt": "2020-09-10T22:43:41Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -61,68 +104,21 @@ function validate_user()\n     [[ $EUID == 0 ]] && fail 'Cannot run as root user'\n }\n \n-function confirm_with_user()\n-{\n-    echoGreen  '*****************************************************************************'\n-    echoGreen  '* The PXF_CONF variable is not defined, using default location'\n-    echoGreen  \"* Using ${PXF_CONF} for user configurations\"\n-    echoYellow '* WARNING: using this directory is not recommended for production deployments'\n-    echoGreen  '*****************************************************************************'\n-\n-    read -rp 'Do you want to proceed? [Y]: ' answer\n-    answer=${answer:-'Y'}\n-    case ${answer:0:1} in\n-        y|Y)\n-            echoGreen 'Proceeding with the initialization'\n-        ;;\n-        *)\n-            echoYellow 'Initialization aborted'\n-            exit 1\n-        ;;\n-    esac\n-}\n-\n-function update_pxf_conf()\n-{\n-    if [[ -z $PXF_CONF ]]; then\n-        # PXF_CONF was not specified during init command\n-        # need to default to user's home directory and ask for confirmation, unless silent mode is used\n-        local current_user pxf_user_home\n-        current_user=$( id -un )\n-        pxf_user_home=$HOME\n-        if [[ -z $pxf_user_home ]]; then\n-            fail \"PXF_CONF is not set and user $current_user home directory is not defined\"\n-        elif [[ ! -d ${pxf_user_home} ]]; then\n-            fail \"PXF_CONF is not set and user $current_user home directory $pxf_user_home does not exist\"\n-        else\n-            export PXF_CONF=${pxf_user_home}/pxf\n-            if [[ $silent == false ]]; then\n-                confirm_with_user\n-            fi\n-        fi\n-    fi\n-\n-    echoYellow \"Using $PXF_CONF as a location for user-configurable files\"\n-\n-    # update the value on PXF_CONF in the default env file\n-    sed \"${SED_OPTS[@]}\" \"s|{PXF_CONF:-.*}$|{PXF_CONF:-\\\"${PXF_CONF}\\\"}|g\" \"$default_env_script\"\n-}\n-\n function getEnvironment()\n {\n     local USER_SPECIFIED_JAVA_HOME=${JAVA_HOME}\n-    # load default environment\n-    if [[ ! -f $default_env_script ]]; then\n-        fail \"Failed to find $default_env_script\"\n-    fi\n-    # shellcheck source=/Users/pivotal/workspace/pxf/server/pxf-service/src/scripts/pxf-env-default.sh\n-    source \"$default_env_script\"\n     # we may have just overridden the user's intended JAVA_HOME\n-    # by sourcing PXF_CONF/conf/pxf-env.sh\n+    # by sourcing PXF_RUN/conf/pxf-env.sh\n     [[ ${PRESERVE_JAVA_HOME} == true ]] && JAVA_HOME=${USER_SPECIFIED_JAVA_HOME}\n     pid_file=\"$PXF_RUNDIR/${identity}.pid\"\n }\n \n+function checkPermissions()\n+{\n+    touch \"$pid_file\" &> /dev/null || { echoRed \"ERROR: Operation not permitted (cannot access pid file: '$pid_file')\"; return 4; }\n+    # [ ! -d \"$PXF_LOGDIR\" ] && { echoRed \"Operation not permitted (log directory does not exist: '$PXF_LOGDIR')\"; return 4; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NDQ5Nw==", "bodyText": "maybe list deprecated commands in a separate section below", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486674497", "createdAt": "2020-09-10T22:44:55Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -277,21 +211,20 @@ doHelp() {\n     cat <<-EOF\n \n \t${bold}List of commands${normal}:\n-\t  init                initialize the local PXF server instance, install PXF extension under \\$GPHOME\n+\t  init                (deprecated) install PXF extension under \\$GPHOME\n \t  start               start the local PXF server instance\n \t  stop                stop the local PXF server instance\n \t  restart             restart the local PXF server instance (not supported for cluster)\n \t  status              show the status of the local PXF server instance\n \t  version             show the version of PXF server\n-\t  reset               undo the local PXF initialization\n+\t  reset               (deprecated) no operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NjM2MQ==", "bodyText": "do we need -R if we are copying only 1 file ?\nmaybe now have files under our gpextable without full subdirectories ?\nwe should not be doing sed on the target file under GPHOME", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486676361", "createdAt": "2020-09-10T22:50:53Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -305,73 +238,51 @@ function promptUser() {\n # doReset handles the reset command\n function doReset()\n {\n-    local force=$2\n-    echoRed \"This is a destructive action!\"\n-\n-    if [[ -f \"$pid_file\" ]]; then\n-        pid=$(cat \"$pid_file\")\n-        isRunning \"$pid\" && { echoYellow \"PXF is running [pid=$pid]\"; }\n-    fi\n-\n-    local prompt='Ensure your local PXF instance is stopped before continuing.\n-    Press [y] to continue:'\n-    if [[ $force != -f && $force != --force ]] && ! promptUser \"$prompt\"; then\n-        echoYellow 'pxf reset cancelled'\n-        return 1\n-    fi\n-\n-    if doStatus > /dev/null; then\n-        fail \"PXF is running. Stop PXF before running 'pxf [cluster] reset'\"\n-    fi\n-\n-    echoYellow \"Ignoring ${PXF_CONF}...\"\n-    echoYellow \"Cleaning ${PXF_RUNDIR}...\"\n-    rm -rf \"$PXF_RUNDIR\"\n-\n-    echoYellow \"Reverting changes to ${default_env_script}...\"\n-    sed \"${SED_OPTS[@]}\" \"s|{PXF_CONF:-\\\".*\\\"}|{PXF_CONF:-NOT_INITIALIZED}|g\" \"$default_env_script\"\n-\n-    echoGreen \"Finished resetting PXF\"\n+    echoYellow '*****************************************************************************'\n+    echoYellow '* DEPRECATION NOTICE:'\n+    echoYellow '* The \"pxf [cluster] reset\" command is deprecated and will be removed'\n+    echoYellow '* in a future release of PXF.'\n+    echoYellow '*****************************************************************************'\n }\n \n function installExternalTableExtension()\n {\n     if [[ -d ${parent_script_dir}/gpextable ]]; then\n         if [[ -z \"${GPHOME}\" ]]; then\n-            echo 'WARNING: environment variable GPHOME is not set, skipping install of Greenplum External Table PXF Extension'\n+            echoYellow 'WARNING: environment variable GPHOME is not set, skipping install of Greenplum External Table PXF Extension'\n         elif [[ ! -f ${GPHOME}/greenplum_path.sh ]]; then\n-            echo \"WARNING: environment variable GPHOME (${GPHOME}) must be set to a valid Greenplum installation, skipping install of Greenplum External Table PXF Extension'\"\n+            echoYellow \"WARNING: environment variable GPHOME (${GPHOME}) must be set to a valid Greenplum installation, skipping install of Greenplum External Table PXF Extension'\"\n         else\n-            echo \"Installing Greenplum External Table PXF Extension into ${GPHOME}\"\n-            cp -av ${parent_script_dir}/gpextable/* ${GPHOME}\n+            echoGreen \"Installing Greenplum External Table PXF Extension into '${GPHOME}'\"\n+\n+            local target_control_file=\"${GPHOME}/share/postgresql/extension/pxf.control\"\n+            cp -RLv \"${parent_script_dir}/gpextable/share/postgresql/extension/pxf.control\" \"${target_control_file}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NjgzNA==", "bodyText": "VVV we used to remember JAVA_HOME given to us upon init, what is gonna happen now ?", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486676834", "createdAt": "2020-09-10T22:52:20Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -305,73 +238,51 @@ function promptUser() {\n # doReset handles the reset command\n function doReset()\n {\n-    local force=$2\n-    echoRed \"This is a destructive action!\"\n-\n-    if [[ -f \"$pid_file\" ]]; then\n-        pid=$(cat \"$pid_file\")\n-        isRunning \"$pid\" && { echoYellow \"PXF is running [pid=$pid]\"; }\n-    fi\n-\n-    local prompt='Ensure your local PXF instance is stopped before continuing.\n-    Press [y] to continue:'\n-    if [[ $force != -f && $force != --force ]] && ! promptUser \"$prompt\"; then\n-        echoYellow 'pxf reset cancelled'\n-        return 1\n-    fi\n-\n-    if doStatus > /dev/null; then\n-        fail \"PXF is running. Stop PXF before running 'pxf [cluster] reset'\"\n-    fi\n-\n-    echoYellow \"Ignoring ${PXF_CONF}...\"\n-    echoYellow \"Cleaning ${PXF_RUNDIR}...\"\n-    rm -rf \"$PXF_RUNDIR\"\n-\n-    echoYellow \"Reverting changes to ${default_env_script}...\"\n-    sed \"${SED_OPTS[@]}\" \"s|{PXF_CONF:-\\\".*\\\"}|{PXF_CONF:-NOT_INITIALIZED}|g\" \"$default_env_script\"\n-\n-    echoGreen \"Finished resetting PXF\"\n+    echoYellow '*****************************************************************************'\n+    echoYellow '* DEPRECATION NOTICE:'\n+    echoYellow '* The \"pxf [cluster] reset\" command is deprecated and will be removed'\n+    echoYellow '* in a future release of PXF.'\n+    echoYellow '*****************************************************************************'\n }\n \n function installExternalTableExtension()\n {\n     if [[ -d ${parent_script_dir}/gpextable ]]; then\n         if [[ -z \"${GPHOME}\" ]]; then\n-            echo 'WARNING: environment variable GPHOME is not set, skipping install of Greenplum External Table PXF Extension'\n+            echoYellow 'WARNING: environment variable GPHOME is not set, skipping install of Greenplum External Table PXF Extension'\n         elif [[ ! -f ${GPHOME}/greenplum_path.sh ]]; then\n-            echo \"WARNING: environment variable GPHOME (${GPHOME}) must be set to a valid Greenplum installation, skipping install of Greenplum External Table PXF Extension'\"\n+            echoYellow \"WARNING: environment variable GPHOME (${GPHOME}) must be set to a valid Greenplum installation, skipping install of Greenplum External Table PXF Extension'\"\n         else\n-            echo \"Installing Greenplum External Table PXF Extension into ${GPHOME}\"\n-            cp -av ${parent_script_dir}/gpextable/* ${GPHOME}\n+            echoGreen \"Installing Greenplum External Table PXF Extension into '${GPHOME}'\"\n+\n+            local target_control_file=\"${GPHOME}/share/postgresql/extension/pxf.control\"\n+            cp -RLv \"${parent_script_dir}/gpextable/share/postgresql/extension/pxf.control\" \"${target_control_file}\"\n+            chmod 755 \"${target_control_file}\"\n+            # update the directory to point to the extension directory located in the $PXF_HOME path\n+            sed \"${SED_OPTS[@]}\" \"s|directory =.*|directory = '${parent_script_dir}/gpextable/share/postgresql/extension'|g\" \"${target_control_file}\"\n+            # update the module_pathname to point to the so file located in the $PXF_HOME path\n+            sed \"${SED_OPTS[@]}\" \"s|module_pathname =.*|module_pathname = '${parent_script_dir}/gpextable/lib/postgresql/pxf'|g\" \"${target_control_file}\"\n         fi\n     fi\n }\n \n # doInit handles the init command\n function doInit()\n {\n-    if ! grep 'PXF_CONF:-NOT_INITIALIZED' \"$default_env_script\" > /dev/null; then\n-        echoYellow \"PXF has already been initialized. Use 'pxf [cluster] reset' before attempting to re-initialize PXF\"\n-        return 1\n-    fi\n-\n-    update_pxf_conf\n+    echoYellow '*****************************************************************************'\n+    echoYellow '* DEPRECATION NOTICE:'\n+    echoYellow '* The \"pxf [cluster] init\" command is deprecated and will be removed'\n+    echoYellow '* in a future release of PXF.'\n+    echoYellow '*'\n+    echoYellow '* Use the \"pxf [cluster] register\" command instead.'\n+    echoYellow '*'\n+    echoYellow '*****************************************************************************'\n     # preserve JAVA_HOME in case user is trying to change it\n     PRESERVE_JAVA_HOME=true getEnvironment\n     checkJavaHome\n-    generateUserConfigs || return 1\n-    editPxfEnvSh || return 1\n-    createLogsDir || return 1\n-    createRunDir  || return 1\n     installExternalTableExtension || return 1\n }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 329}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NzMxMg==", "bodyText": "whichever file is loaded last, overrides the properties from the previous one, correct ?", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486677312", "createdAt": "2020-09-10T22:53:53Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -394,18 +304,28 @@ function do_start() {\n         isRunning \"$pid\" && { echoYellow \"PXF is already running [pid=$pid]\"; return 0; }\n     fi\n \n-    PXF_OPTS=(-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager -Dlogging.config=${PXF_CONF}/conf/pxf-log4j2.xml)\n+    PXF_OPTS=(-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager -Dlogging.config=${PXF_RUN}/conf/pxf-log4j2.xml)\n     [[ $PXF_DEBUG == true ]]      && PXF_OPTS+=(-agentlib:jdwp=transport=dt_socket,address=2020,suspend=n,server=y)\n     [[ $PXF_OOM_KILL = true ]]    && PXF_OPTS+=(-XX:OnOutOfMemoryError=\"${PXF_HOME}/bin/kill-pxf.sh %p\")\n     [[ -n \"$PXF_OOM_DUMP_PATH\" ]] && PXF_OPTS+=(-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$PXF_OOM_DUMP_PATH)\n     JAVA_OPTS=($PXF_JVM_OPTS  \"${PXF_OPTS[@]}\")\n+    RUN_ARGS=(--spring.config.location=classpath:/application.properties,file:${PXF_RUN}/conf/pxf-application.properties)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 356}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3ODY4Mw==", "bodyText": "I need to understand what happens with JAVA_HOME now, I feel this logic might be irrelevant now", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486678683", "createdAt": "2020-09-10T22:58:10Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -488,35 +406,26 @@ function doSync()\n         fail 'A destination hostname must be provided'\n     fi\n     getEnvironment\n-    checkPxfConf\n     warnUserEnvScript\n-    rsync -az${DELETE:+ --delete} -e \"ssh -o StrictHostKeyChecking=no\" \"$PXF_CONF\"/{conf,lib,servers} \"${target_host}:$PXF_CONF\"\n+    rsync -az${DELETE:+ --delete} -e \"ssh -o StrictHostKeyChecking=no\" \"$PXF_RUN\"/{conf,lib,servers} \"${target_host}:$PXF_RUN\"\n }\n \n function doCluster()\n {\n     local pxf_cluster_command=$2 is_init=false\n     [[ ${pxf_cluster_command} == init ]] && is_init=true\n     PRESERVE_JAVA_HOME=${is_init} getEnvironment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 415}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3OTEyMw==", "bodyText": "it is loaded by Spring Boot, not our control scripts, let's update the comment to be correct", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r486679123", "createdAt": "2020-09-10T22:59:34Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/templates/conf/pxf-application.properties", "diffHunk": "@@ -0,0 +1,23 @@\n+\n+##############################################################################\n+# This file contains PXF properties that can be specified by users           #\n+# to customize their deployments. This file is sourced by PXF Server control #\n+# scripts upon initialization, start and stop of the PXF Server.             #", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6889873e0c5dcd716d41a9f1f39aadc2a1443b0"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b1fff81d170df9948251f34e6613ab63fc7f12d", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/6b1fff81d170df9948251f34e6613ab63fc7f12d", "committedDate": "2020-09-16T19:40:44Z", "message": "Address PR feedback"}, "afterCommit": {"oid": "321dc7027921af510e366b5dbfd5c62abe07c5ce", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/321dc7027921af510e366b5dbfd5c62abe07c5ce", "committedDate": "2020-09-16T20:22:09Z", "message": "Address PR feedback\n\nAddress PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMTczMjQx", "url": "https://github.com/greenplum-db/pxf/pull/447#pullrequestreview-490173241", "createdAt": "2020-09-17T00:57:50Z", "commit": {"oid": "8562b74c7bd1a479f3d651c7cbd82d509507bef4"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDo1Nzo1MlrOHTJMMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMToyMjoyOVrOHTKKEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzNTU3MQ==", "bodyText": "should we have a secondary statement along the lines of deprecated, please use pxf run?", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r489835571", "createdAt": "2020-09-17T00:57:52Z", "author": {"login": "ashuka24"}, "path": "cli/go/src/pxf-cli/cmd/cluster.go", "diffHunk": "@@ -39,13 +39,13 @@ func createCobraCommand(use string, short string, cmd *command) *cobra.Command {\n \n var (\n \tclusterCmd  = createCobraCommand(\"cluster\", \"Perform <command> on each segment host in the cluster\", nil)\n-\tinitCmd     = createCobraCommand(\"init\", \"Initialize the PXF server instance and install PXF extension under $GPHOME on master, standby master, and all segment hosts\", &InitCommand)\n+\tinitCmd     = createCobraCommand(\"init\", \"(deprecated) Install PXF extension under $GPHOME on master, standby master, and all segment hosts\", &InitCommand)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8562b74c7bd1a479f3d651c7cbd82d509507bef4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzODkwNQ==", "bodyText": "since this is only deprecated and not removed, it seems like it is still an operation you can perform (and there are still locations elsewhere. (See  cli/go/src/pxf-cli/cmd/pxf.go line 184) that describe what this does. Should we leave the description of this command much like we do for init?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tresetCmd    = createCobraCommand(\"reset\", \"(deprecated) No operation\", &ResetCommand)\n          \n          \n            \n            \tresetCmd    = createCobraCommand(\"reset\", \"(deprecated) Reset PXF (undo initialization) on all segment hosts\", &ResetCommand)", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r489838905", "createdAt": "2020-09-17T01:03:15Z", "author": {"login": "ashuka24"}, "path": "cli/go/src/pxf-cli/cmd/cluster.go", "diffHunk": "@@ -39,13 +39,13 @@ func createCobraCommand(use string, short string, cmd *command) *cobra.Command {\n \n var (\n \tclusterCmd  = createCobraCommand(\"cluster\", \"Perform <command> on each segment host in the cluster\", nil)\n-\tinitCmd     = createCobraCommand(\"init\", \"Initialize the PXF server instance and install PXF extension under $GPHOME on master, standby master, and all segment hosts\", &InitCommand)\n+\tinitCmd     = createCobraCommand(\"init\", \"(deprecated) Install PXF extension under $GPHOME on master, standby master, and all segment hosts\", &InitCommand)\n \tstartCmd    = createCobraCommand(\"start\", \"Start the PXF server instances on all segment hosts\", &StartCommand)\n \tstopCmd     = createCobraCommand(\"stop\", \"Stop the PXF server instances on all segment hosts\", &StopCommand)\n \tstatusCmd   = createCobraCommand(\"status\", \"Get status of PXF servers on all segment hosts\", &StatusCommand)\n \tsyncCmd     = createCobraCommand(\"sync\", \"Sync PXF configs from master to standby master and all segment hosts. Use --delete to delete extraneous remote files\", &SyncCommand)\n-\tresetCmd    = createCobraCommand(\"reset\", \"Reset PXF (undo initialization) on all segment hosts\", &ResetCommand)\n-\tregisterCmd = createCobraCommand(\"register\", \"Install PXF extension under $GPHOME on all segment hosts\", &RegisterCommand)\n+\tresetCmd    = createCobraCommand(\"reset\", \"(deprecated) No operation\", &ResetCommand)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8562b74c7bd1a479f3d651c7cbd82d509507bef4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0NjY2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Only when a config file has been edited and is different from the file in\n          \n          \n            \n            # When a config file has been edited and is different from the file in", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r489846660", "createdAt": "2020-09-17T01:14:55Z", "author": {"login": "ashuka24"}, "path": "package/pxf-gp5.spec", "diffHunk": "@@ -34,9 +34,36 @@ fi\n %__mkdir -p %{buildroot}/%{prefix}\n %__cp -R %{_sourcedir}/* %{buildroot}/%{prefix}\n \n+%post\n+sed -i \"s|directory =.*|directory = '%{prefix}/gpextable/'|g\" %{prefix}/gpextable/pxf.control\n+sed -i \"s|module_pathname =.*|module_pathname = '%{prefix}/gpextable/pxf'|g\" %{prefix}/gpextable/pxf.control\n+\n %files\n %{prefix}\n+%attr(700, -, -) %dir %{prefix}/run\n+\n+# If a file is not marked as a config file, or if a file has not been altered\n+# since installation, then it will be silently replaced by the version from the\n+# RPM.\n+\n+# If a config file has been edited on disk, but is not actually different from\n+# the file in the RPM then the edited version will be silently left in place.\n+\n+# Only when a config file has been edited and is different from the file in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8562b74c7bd1a479f3d651c7cbd82d509507bef4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0NjY2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # the RPM the behavior is the following:\n          \n          \n            \n            # the RPM, then the behavior is the following:", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r489846664", "createdAt": "2020-09-17T01:14:56Z", "author": {"login": "ashuka24"}, "path": "package/pxf-gp5.spec", "diffHunk": "@@ -34,9 +34,36 @@ fi\n %__mkdir -p %{buildroot}/%{prefix}\n %__cp -R %{_sourcedir}/* %{buildroot}/%{prefix}\n \n+%post\n+sed -i \"s|directory =.*|directory = '%{prefix}/gpextable/'|g\" %{prefix}/gpextable/pxf.control\n+sed -i \"s|module_pathname =.*|module_pathname = '%{prefix}/gpextable/pxf'|g\" %{prefix}/gpextable/pxf.control\n+\n %files\n %{prefix}\n+%attr(700, -, -) %dir %{prefix}/run\n+\n+# If a file is not marked as a config file, or if a file has not been altered\n+# since installation, then it will be silently replaced by the version from the\n+# RPM.\n+\n+# If a config file has been edited on disk, but is not actually different from\n+# the file in the RPM then the edited version will be silently left in place.\n+\n+# Only when a config file has been edited and is different from the file in\n+# the RPM the behavior is the following:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8562b74c7bd1a479f3d651c7cbd82d509507bef4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0NzEwNA==", "bodyText": "same suggestions as the pxf5 spec", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r489847104", "createdAt": "2020-09-17T01:15:35Z", "author": {"login": "ashuka24"}, "path": "package/pxf-gp6.spec", "diffHunk": "@@ -34,9 +34,36 @@ fi\n %__mkdir -p %{buildroot}/%{prefix}\n %__cp -R %{_sourcedir}/* %{buildroot}/%{prefix}\n \n+%post\n+sed -i \"s|directory =.*|directory = '%{prefix}/gpextable/'|g\" %{prefix}/gpextable/pxf.control\n+sed -i \"s|module_pathname =.*|module_pathname = '%{prefix}/gpextable/pxf'|g\" %{prefix}/gpextable/pxf.control\n+\n %files\n %{prefix}\n+%attr(700, -, -) %dir %{prefix}/run\n+\n+# If a file is not marked as a config file, or if a file has not been altered\n+# since installation, then it will be silently replaced by the version from the\n+# RPM.\n+\n+# If a config file has been edited on disk, but is not actually different from\n+# the file in the RPM then the edited version will be silently left in place.\n+\n+# Only when a config file has been edited and is different from the file in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8562b74c7bd1a479f3d651c7cbd82d509507bef4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0NzUxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `gpdemo-env.sh`. Additionally, `PXF_RUN` must be set if different from\n          \n          \n            \n            `gpdemo-env.sh` must be set. Additionally, `PXF_RUN` must be set if different from", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r489847519", "createdAt": "2020-09-17T01:16:13Z", "author": {"login": "ashuka24"}, "path": "regression/README.md", "diffHunk": "@@ -46,10 +46,12 @@ By setting environment variables you can change the location of the Greenplum ma\n \n ### General environment variables\n \n-All the general environment variables that come from `greenplum_path.sh` and `gpdemo-env.sh`, along with `PXF_CONF` must be set.\n+All the general environment variables that come from `greenplum_path.sh` and\n+`gpdemo-env.sh`. Additionally, `PXF_RUN` must be set if different from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8562b74c7bd1a479f3d651c7cbd82d509507bef4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0NzgxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `SERVER_CONFIG`: the name of the config directory for your server, under `${PXF_RUN}/servers` (optional). If not set, will use one of `${PXF_RUN}/servers/{default,s3,gs,adl,wasbs}` as appropriate\n          \n          \n            \n            * `SERVER_CONFIG`: the name of the config directory for your server, under `${PXF_RUN}/servers` (optional). If not set, PXF will use one of `${PXF_RUN}/servers/{default,s3,gs,adl,wasbs}` as appropriate", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r489847816", "createdAt": "2020-09-17T01:16:39Z", "author": {"login": "ashuka24"}, "path": "regression/README.md", "diffHunk": "@@ -46,10 +46,12 @@ By setting environment variables you can change the location of the Greenplum ma\n \n ### General environment variables\n \n-All the general environment variables that come from `greenplum_path.sh` and `gpdemo-env.sh`, along with `PXF_CONF` must be set.\n+All the general environment variables that come from `greenplum_path.sh` and\n+`gpdemo-env.sh`. Additionally, `PXF_RUN` must be set if different from\n+`PXF_HOME`.\n \n * `PXF_TEST_DEBUG`: set to anything to prevent deletion of data, and to run `pg_regress` in debug mode (optional)\n-* `SERVER_CONFIG`: the name of the config directory for your server, under `${PXF_CONF}/servers` (optional). If not set, will use one of `${PXF_CONF}/servers/{default,s3,gs,adl,wasbs}` as appropriate\n+* `SERVER_CONFIG`: the name of the config directory for your server, under `${PXF_RUN}/servers` (optional). If not set, will use one of `${PXF_RUN}/servers/{default,s3,gs,adl,wasbs}` as appropriate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8562b74c7bd1a479f3d651c7cbd82d509507bef4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg1MDkyNQ==", "bodyText": "same comment here about reset, we still leave the old comments elsewhere in the code", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r489850925", "createdAt": "2020-09-17T01:21:41Z", "author": {"login": "ashuka24"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -278,21 +193,21 @@ doHelp() {\n     cat <<-EOF\n \n \t${bold}List of commands${normal}:\n-\t  init                initialize the local PXF server instance, install PXF extension under \\$GPHOME\n \t  start               start the local PXF server instance\n \t  stop                stop the local PXF server instance\n \t  restart             restart the local PXF server instance (not supported for cluster)\n \t  status              show the status of the local PXF server instance\n \t  version             show the version of PXF server\n-\t  reset               undo the local PXF initialization\n \t  register            install PXF extension under \\$GPHOME (useful after upgrades of Greenplum server)\n \t  cluster <command>   perform <command> on all the segment hosts in the cluster; try ${bold}pxf cluster help$normal\n \n-\t  sync <hostname>     synchronize \\$PXF_CONF/{conf,lib,servers} directories onto <hostname>. Use --delete to delete extraneous remote files\n+\t  sync <hostname>     synchronize \\$PXF_RUN/{conf,lib,servers} directories onto <hostname>. Use --delete to delete extraneous remote files\n+\n+\t  init                (deprecated) install PXF extension under \\$GPHOME\n+\t  reset               (deprecated) no operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8562b74c7bd1a479f3d651c7cbd82d509507bef4"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg1MTQxMA==", "bodyText": "is there an alternative similar to below where we tell them to use pxf register?", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r489851410", "createdAt": "2020-09-17T01:22:29Z", "author": {"login": "ashuka24"}, "path": "server/pxf-service/src/scripts/pxf", "diffHunk": "@@ -306,33 +221,11 @@ function promptUser() {\n # doReset handles the reset command\n function doReset()\n {\n-    local force=$2\n-    echoRed \"This is a destructive action!\"\n-\n-    if [[ -f \"$pid_file\" ]]; then\n-        pid=$(cat \"$pid_file\")\n-        isRunning \"$pid\" && { echoYellow \"PXF is running [pid=$pid]\"; }\n-    fi\n-\n-    local prompt='Ensure your local PXF instance is stopped before continuing.\n-    Press [y] to continue:'\n-    if [[ $force != -f && $force != --force ]] && ! promptUser \"$prompt\"; then\n-        echoYellow 'pxf reset cancelled'\n-        return 1\n-    fi\n-\n-    if doStatus > /dev/null; then\n-        fail \"PXF is running. Stop PXF before running 'pxf [cluster] reset'\"\n-    fi\n-\n-    echoYellow \"Ignoring ${PXF_CONF}...\"\n-    echoYellow \"Cleaning ${PXF_RUNDIR}...\"\n-    rm -rf \"$PXF_RUNDIR\"\n-\n-    echoYellow \"Reverting changes to ${default_env_script}...\"\n-    sed \"${SED_OPTS[@]}\" \"s|{PXF_CONF:-\\\".*\\\"}|{PXF_CONF:-NOT_INITIALIZED}|g\" \"$default_env_script\"\n-\n-    echoGreen \"Finished resetting PXF\"\n+    echoYellow '*****************************************************************************'\n+    echoYellow '* DEPRECATION NOTICE:'\n+    echoYellow '* The \"pxf [cluster] reset\" command is deprecated and will be removed'\n+    echoYellow '* in a future release of PXF.'\n+    echoYellow '*****************************************************************************'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8562b74c7bd1a479f3d651c7cbd82d509507bef4"}, "originalPosition": 271}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a21f5679104fa728da9de091b49b8903b155bd62", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/a21f5679104fa728da9de091b49b8903b155bd62", "committedDate": "2020-09-21T17:48:26Z", "message": "CI: pxf prepare if PXF_BASE is different from PXF_HOME"}, "afterCommit": {"oid": "7d9386255daf320798d638e7166ba2f33a7b23c0", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/7d9386255daf320798d638e7166ba2f33a7b23c0", "committedDate": "2020-09-21T18:00:17Z", "message": "templates are now in PXF_HOME"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b8da60c08590f3d6de56fec3b60ebb895838e6b", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/2b8da60c08590f3d6de56fec3b60ebb895838e6b", "committedDate": "2020-09-21T21:30:23Z", "message": "pxf_base getpxfbase for restart"}, "afterCommit": {"oid": "80bf97300b1dd60abef2e51ee1383b06de7765a0", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/80bf97300b1dd60abef2e51ee1383b06de7765a0", "committedDate": "2020-09-22T10:54:46Z", "message": "Templates are now in PXF_HOME\n\nFix templates path in readme"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "80bf97300b1dd60abef2e51ee1383b06de7765a0", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/80bf97300b1dd60abef2e51ee1383b06de7765a0", "committedDate": "2020-09-22T10:54:46Z", "message": "Templates are now in PXF_HOME\n\nFix templates path in readme"}, "afterCommit": {"oid": "a2463adee0bf58981f9d9aa45ce1320e557a5c88", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/a2463adee0bf58981f9d9aa45ce1320e557a5c88", "committedDate": "2020-09-22T14:00:23Z", "message": "Templates are now in PXF_HOME\n\nFix templates path in readme"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNzM3ODA3", "url": "https://github.com/greenplum-db/pxf/pull/447#pullrequestreview-493737807", "createdAt": "2020-09-22T18:29:45Z", "commit": {"oid": "a2463adee0bf58981f9d9aa45ce1320e557a5c88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODoyOTo0NlrOHWHLfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODoyOTo0NlrOHWHLfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0ODM0OA==", "bodyText": "I know I asked for this here :) but with conversations now on potentially shipping as a binary tarball as well, this will have to be at least externalized into a shippable script that tarball installation script can call to cause the similar change. {prefix} might be passed as a parameter, or the script will figure out itself where it is located. No change for now, though, just keep the thought.", "url": "https://github.com/greenplum-db/pxf/pull/447#discussion_r492948348", "createdAt": "2020-09-22T18:29:46Z", "author": {"login": "denalex"}, "path": "package/pxf-gp5.spec", "diffHunk": "@@ -34,9 +34,35 @@ fi\n %__mkdir -p %{buildroot}/%{prefix}\n %__cp -R %{_sourcedir}/* %{buildroot}/%{prefix}\n \n+%post\n+sed -i \"s|directory =.*|directory = '%{prefix}/gpextable/'|g\" %{prefix}/gpextable/pxf.control\n+sed -i \"s|module_pathname =.*|module_pathname = '%{prefix}/gpextable/pxf'|g\" %{prefix}/gpextable/pxf.control", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2463adee0bf58981f9d9aa45ce1320e557a5c88"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b395db22b909c9640328b6fbcb25a9822d6ffe6", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/1b395db22b909c9640328b6fbcb25a9822d6ffe6", "committedDate": "2020-09-23T20:47:39Z", "message": "GO CLI: Support pxf cluster migrate\n\nSimilar to pxf migrate, pxf cluster migrate helps migrating an old PXF\nversion to a new PXF version in a cluster."}, "afterCommit": {"oid": "81751fd2021fca4006943fe9375888dbfae0c936", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/81751fd2021fca4006943fe9375888dbfae0c936", "committedDate": "2020-09-23T20:54:34Z", "message": "GO CLI: Support pxf cluster migrate\n\nSimilar to pxf migrate, pxf cluster migrate helps migrating an old PXF\nversion to a new PXF version in a cluster."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c3870d1466c8c60dd0b43e15be8bfaaeba3b3e3", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/8c3870d1466c8c60dd0b43e15be8bfaaeba3b3e3", "committedDate": "2020-09-24T17:24:42Z", "message": "Deprecate PXF init and reset commands\n\nStop copying pxf-profiles-default.xml to conf\n\nThe pxf-profiles-default.xml file can be loaded from resources instead\nof a file. This reduces the duplicate existence of this file. We no\nlonger provide a physical file for pxf-profiles-default.xml\n\nRename management.health.probes.enabled to management.endpoint.health.probes.enabled\n\nThe property name changed from management.health.probes.enabled to\nmanagement.endpoint.health.probes.enabled. This commit no longer uses\nthe deprecated property name\n\nRemove redundant properties from pxf-env-default.sh\n\nPXF_CONNECTION_TIMEOUT, PXF_MAX_THREADS, PXF_FRAGMENTER_CACHE are\nproperties that have already been defined in the application.properties\nfile, and are redundant. We prefer application.properties over\nenvironment variables for these properties.\n\nAlso, we no longer need to add files from the $PXF_HOME/conf classpath,\nas the files in the conf directory are going away.\n\nAllow configuring logging.file.name property\n\nSpring Boot exposes the logging.file.name. We take advantage of this\nproperty and use it for the pxf-log4j2.xml file. We still default to\n$PXF_LOGDIR/pxf-service.log for the logging.file.name\n\nAdd PXF banner\n\nInline pxf-env-default.sh inside pxf\n\nThe pxf-env-default.sh file no longer needs to be it's own script and\ncan be merged with the main pxf script. Because `pxf-env-default.sh`\nvalues don't change, we can merge these two scripts\n\nRemove nesting in templates and copy to final target\n\nRemove the unnecessary additional nesting for the templates directory.\nWe now install the templates into its final destination under $PXF_HOME\nby default.\n\nProvide a run directory by default\n\nDon't create the run directory during pxf init, but provide the run\ndirectory by default\n\nCreate the keytab directory during stage\n\nCreate the lib directory\n\nCreate the lib directory, and rename the existing `$PXF_HOME/lib`\ndirectory to `$PXF_HOME/share`.\n\nSplit configuration files into pxf-application.configuration\n\nConfiguration files are now split into pxf-application.configuration\n\nRename PXF_CONF directory to PXF_RUN\n\nThe PXF_RUN directory now defaults to PXF_HOME. pxf init is not a\nrequirement to start PXF.\n\npxf register now only copies the control file\n\nOnly copy the control file during pxf register and update the directory\nand module_pathname to point to the extension directory inside\n$PXF_HOME.\n\nSmall change in Makefile\n\nRename PXF_CONF_DIR to PXF_RUN_DIR\n\nRename PXF_CONF_DIR to PXF_RUN_DIR and default it to PXF_HOME. Also,\nremove the initialization process in PXF and replace it with the pxf\nregister command.\n\nRename PXF_CONF -> PXF_RUN in Dockerfiles\n\nRename PXF_CONF -> PXF_RUN in docker files and default the value to the\nsame value as PXF_HOME\n\nPXF_CONF -> PXF_RUN in automation code\n\nThe automation Makefile uses PXF_CONF, use PXF_RUN now and default it to\nPXF_HOME\n\nFix automation code to create additional files\n\nRPM: create logs, run directory with the correct attributes during RPM install\n\nUpdate README and some comments referring to PXF_CONF\n\nPXF_CONF -> PXF_RUN in regression\n\nPXF_CONF -> PXF_RUN in fdw\n\nPXF_CONF -> PXF_RUN in dev\n\nCopy configuration files to PXF_RUN/conf during automation\n\nFix copying of configuration files to the $PXF_RUN/conf directory\n\nFix automation tests for clouds\n\nPXF_HOME to PXF_RUN\n\nUpdate README.md\n\nPXF_CONF -> PXF_RUN in multinode servers\n\nlib is now share\n\nmkdir instead of pre-created dirs\n\nkeytabs are in\n\nMove jar from server to application\n\nkeytabs are in\n\nfixup! Move jar from server to application\n\ndo not chown ~gpadmin/pxf dir\n\nRegister the extension on multinode setup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09c3f6ae4c97957e66986da532615ddf06c53e10", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/09c3f6ae4c97957e66986da532615ddf06c53e10", "committedDate": "2020-09-24T17:25:29Z", "message": "Rename PXF_RUN to PXF_BASE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f93027c5ee8fae7e6e7584434668c8e8860c84b0", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/f93027c5ee8fae7e6e7584434668c8e8860c84b0", "committedDate": "2020-09-24T17:25:29Z", "message": "Implement the pxf [cluster] prepare command\n\nImplement the pxf cluster command:\n - Errors if PXF_HOME == PXF_BASE\n - Errors if PXF_BASE is not empty\n - Errors if it fails to create PXF_BASE\n - Errors if it fails to create dir structure\n - Errors if it fails to copy configuration files\n - Succeeds otherwise\n\nImplement the pxf cluster command:\n - Errors if PXF_BASE is not specified or empty\n - Errors if PXF_HOME == PXF_BASE\n - Errors if the underlying script fails\n - Succeeds otherwise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "908c88a5782388e02b0c9aa3f0ffecdd8b442d5e", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/908c88a5782388e02b0c9aa3f0ffecdd8b442d5e", "committedDate": "2020-09-24T17:25:29Z", "message": "CI: pxf prepare if PXF_BASE is different from PXF_HOME\n\nCI: multinode: pxf cluster prepare if PXF_BASE is different from PXF_HOME\nCI: multinode tests with different PXF_BASE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "759e40c73b17fa73d22aa1a2cf7b9ea3faa4f16d", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/759e40c73b17fa73d22aa1a2cf7b9ea3faa4f16d", "committedDate": "2020-09-24T17:25:29Z", "message": "Templates are now in PXF_HOME\n\nFix templates path in readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a61bbd3433eafb039b1aa60ea291d864bc57c751", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/a61bbd3433eafb039b1aa60ea291d864bc57c751", "committedDate": "2020-09-24T17:25:29Z", "message": "CLI: Implement pxf migrate command\n\nImplement the pxf migrate command that allows migration of older\nversions of PXF into a new installation of PXF. For example, for PXF\nversions prior to 6.0, PXF used a configuration property called PXF_CONF\nto specify a directory where PXF configurations are stored.\n\nNow, PXF configurations live under PXF_HOME, this configuration\ndirectory can be relocated to a different location. The base location\nfor configurations in PXF has been renamed to PXF_BASE.\n\nMigration of PXF_CONF to PXF_BASE is enabled by the pxf migrate command\nwhich does the following:\n- Copies the $PXF_CONF/conf/pxf-profiles.xml file to $PXF_BASE/conf/pxf-profiles.xml\n- Copies the $PXF_CONF/{servers,lib,keytabs} directories to $PXF_BASE\n- Merges values of $PXF_CONF/conf/pxf-env.sh into two different files\n  (depending on the property), the two files are\n  ${PXF_BASE}/conf/pxf-application.properties and\n  ${PXF_BASE}/conf/pxf-env.sh\n\nThe pxf migrate utility requires that PXF_CONF is different than\nPXF_BASE. The pxf migrate utility validates that the PXF_CONF and\nPXF_BASE directories are valid directories."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e49bea354f67d756f79277c0ace046e4deec2e2", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/2e49bea354f67d756f79277c0ace046e4deec2e2", "committedDate": "2020-09-24T17:25:29Z", "message": "GO CLI: Support pxf cluster migrate\n\nSimilar to pxf migrate, pxf cluster migrate helps migrating an old PXF\nversion to a new PXF version in a cluster."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "568e177b1e864294362ea9c22004164eafc87666", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/568e177b1e864294362ea9c22004164eafc87666", "committedDate": "2020-09-24T10:07:09Z", "message": "fix check"}, "afterCommit": {"oid": "2e49bea354f67d756f79277c0ace046e4deec2e2", "author": {"user": null}, "url": "https://github.com/greenplum-db/pxf/commit/2e49bea354f67d756f79277c0ace046e4deec2e2", "committedDate": "2020-09-24T17:25:29Z", "message": "GO CLI: Support pxf cluster migrate\n\nSimilar to pxf migrate, pxf cluster migrate helps migrating an old PXF\nversion to a new PXF version in a cluster."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4877, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}