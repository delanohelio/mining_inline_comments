{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MjY1Njk2", "number": 396, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzozMjo1MFrOEIdlwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo1MzowMFrOEIeAiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzA4ODY1OnYy", "diffSide": "RIGHT", "path": "external-table/src/libchurl.c", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzozMjo1MFrOGocNYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo1ODowMVrOGodFRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1ODQwMQ==", "bodyText": "wonder why this was needed", "url": "https://github.com/greenplum-db/pxf/pull/396#discussion_r445058401", "createdAt": "2020-06-24T17:32:50Z", "author": {"login": "denalex"}, "path": "external-table/src/libchurl.c", "diffHunk": "@@ -640,12 +640,12 @@ flush_internal_buffer(churl_context *context)\n \t\tmulti_perform(context);\n \t}\n \n+\tcheck_response(context);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273edaac04ffca972dba27ae9b4e221420bcf966"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3MjcwOQ==", "bodyText": "in one case the response was closed by the server, but we already had a response in the buffer, so we could actually take some action in that case. For example, check the response code", "url": "https://github.com/greenplum-db/pxf/pull/396#discussion_r445072709", "createdAt": "2020-06-24T17:58:01Z", "author": {"login": "frankgh"}, "path": "external-table/src/libchurl.c", "diffHunk": "@@ -640,12 +640,12 @@ flush_internal_buffer(churl_context *context)\n \t\tmulti_perform(context);\n \t}\n \n+\tcheck_response(context);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1ODQwMQ=="}, "originalCommit": {"oid": "273edaac04ffca972dba27ae9b4e221420bcf966"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzEwNDUxOnYy", "diffSide": "RIGHT", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzozNzo0MFrOGocXng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzozNzo0MFrOGocXng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2MTAyMg==", "bodyText": "the comment above lines 21-24 is no longer relevant (registerSecurityServletFilter)", "url": "https://github.com/greenplum-db/pxf/pull/396#discussion_r445061022", "createdAt": "2020-06-24T17:37:40Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "diffHunk": "@@ -9,30 +10,64 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Lazy;\n+import org.springframework.core.task.AsyncTaskExecutor;\n import org.springframework.core.task.TaskDecorator;\n+import org.springframework.core.task.TaskExecutor;\n import org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor;\n import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n-\n-import static org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME;\n+import org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n \n /**\n  * Declares the registerSecurityServletFilter bean method to be processed by\n  * the Spring container\n  */\n @Configuration\n @EnableConfigurationProperties(PxfServerProperties.class)\n-public class PxfConfiguration {\n+public class PxfConfiguration implements WebMvcConfigurer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273edaac04ffca972dba27ae9b4e221420bcf966"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzEwNjY5OnYy", "diffSide": "RIGHT", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzozODoyNFrOGocZHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo1ODozOFrOGodGlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2MTQwNw==", "bodyText": "I thought we did not want lazy init unless absolutely required", "url": "https://github.com/greenplum-db/pxf/pull/396#discussion_r445061407", "createdAt": "2020-06-24T17:38:24Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "diffHunk": "@@ -9,30 +10,64 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Lazy;\n+import org.springframework.core.task.AsyncTaskExecutor;\n import org.springframework.core.task.TaskDecorator;\n+import org.springframework.core.task.TaskExecutor;\n import org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor;\n import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n-\n-import static org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME;\n+import org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n \n /**\n  * Declares the registerSecurityServletFilter bean method to be processed by\n  * the Spring container\n  */\n @Configuration\n @EnableConfigurationProperties(PxfServerProperties.class)\n-public class PxfConfiguration {\n+public class PxfConfiguration implements WebMvcConfigurer {\n+\n+    /**\n+     * Bean name of PXF's {@link TaskExecutor}.\n+     */\n+    public static final String PXF_APPLICATION_TASK_EXECUTOR_BEAN_NAME = \"pxfApplicationTaskExecutor\";\n+\n+    private final ListableBeanFactory beanFactory;\n+\n+    /**\n+     * Constructs a PXF Configuration object with the provided\n+     * {@link ListableBeanFactory}\n+     *\n+     * @param beanFactory the beanFactory\n+     */\n+    public PxfConfiguration(ListableBeanFactory beanFactory) {\n+        this.beanFactory = beanFactory;\n+    }\n \n     /**\n-     * Configures the TaskExecutorBuilder to be used for async requests (i.e. Bridge\n+     * Configures the TaskExecutor to be used for async requests (i.e. Bridge\n      * Read).\n+     */\n+    @Override\n+    public void configureAsyncSupport(AsyncSupportConfigurer configurer) {\n+        Object taskExecutor = this.beanFactory\n+                .getBean(PXF_APPLICATION_TASK_EXECUTOR_BEAN_NAME);\n+        if (taskExecutor instanceof AsyncTaskExecutor) {\n+            configurer.setTaskExecutor(((AsyncTaskExecutor) taskExecutor));\n+        }\n+    }\n+\n+    /**\n+     * Configures and builds the {@link ThreadPoolTaskExecutor}\n      *\n-     * @return the {@link TaskExecutorBuilder} object\n+     * @return the {@link ThreadPoolTaskExecutor}\n      */\n-    @Bean\n-    public TaskExecutorBuilder taskExecutorBuilder(PxfServerProperties pxfServerProperties,\n-                                                   ObjectProvider<TaskExecutorCustomizer> taskExecutorCustomizers,\n-                                                   ObjectProvider<TaskDecorator> taskDecorator) {\n+    @Lazy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273edaac04ffca972dba27ae9b4e221420bcf966"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3MzA0NA==", "bodyText": "Yeah, I'll address it", "url": "https://github.com/greenplum-db/pxf/pull/396#discussion_r445073044", "createdAt": "2020-06-24T17:58:38Z", "author": {"login": "frankgh"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "diffHunk": "@@ -9,30 +10,64 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Lazy;\n+import org.springframework.core.task.AsyncTaskExecutor;\n import org.springframework.core.task.TaskDecorator;\n+import org.springframework.core.task.TaskExecutor;\n import org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor;\n import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n-\n-import static org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME;\n+import org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n \n /**\n  * Declares the registerSecurityServletFilter bean method to be processed by\n  * the Spring container\n  */\n @Configuration\n @EnableConfigurationProperties(PxfServerProperties.class)\n-public class PxfConfiguration {\n+public class PxfConfiguration implements WebMvcConfigurer {\n+\n+    /**\n+     * Bean name of PXF's {@link TaskExecutor}.\n+     */\n+    public static final String PXF_APPLICATION_TASK_EXECUTOR_BEAN_NAME = \"pxfApplicationTaskExecutor\";\n+\n+    private final ListableBeanFactory beanFactory;\n+\n+    /**\n+     * Constructs a PXF Configuration object with the provided\n+     * {@link ListableBeanFactory}\n+     *\n+     * @param beanFactory the beanFactory\n+     */\n+    public PxfConfiguration(ListableBeanFactory beanFactory) {\n+        this.beanFactory = beanFactory;\n+    }\n \n     /**\n-     * Configures the TaskExecutorBuilder to be used for async requests (i.e. Bridge\n+     * Configures the TaskExecutor to be used for async requests (i.e. Bridge\n      * Read).\n+     */\n+    @Override\n+    public void configureAsyncSupport(AsyncSupportConfigurer configurer) {\n+        Object taskExecutor = this.beanFactory\n+                .getBean(PXF_APPLICATION_TASK_EXECUTOR_BEAN_NAME);\n+        if (taskExecutor instanceof AsyncTaskExecutor) {\n+            configurer.setTaskExecutor(((AsyncTaskExecutor) taskExecutor));\n+        }\n+    }\n+\n+    /**\n+     * Configures and builds the {@link ThreadPoolTaskExecutor}\n      *\n-     * @return the {@link TaskExecutorBuilder} object\n+     * @return the {@link ThreadPoolTaskExecutor}\n      */\n-    @Bean\n-    public TaskExecutorBuilder taskExecutorBuilder(PxfServerProperties pxfServerProperties,\n-                                                   ObjectProvider<TaskExecutorCustomizer> taskExecutorCustomizers,\n-                                                   ObjectProvider<TaskDecorator> taskDecorator) {\n+    @Lazy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2MTQwNw=="}, "originalCommit": {"oid": "273edaac04ffca972dba27ae9b4e221420bcf966"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzE1MDk5OnYy", "diffSide": "RIGHT", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo1MDo1OVrOGoc1rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo1MDo1OVrOGoc1rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2ODcxOQ==", "bodyText": "can we fine-tune a name -- it is not executing any arbitrary pxf tasks, this is for async response streaming only, in other words we should not be submitting any arbitrary async work here, right ? Maybe pxfResponseStreamTaskExecutor or smith even simpler", "url": "https://github.com/greenplum-db/pxf/pull/396#discussion_r445068719", "createdAt": "2020-06-24T17:50:59Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "diffHunk": "@@ -9,30 +10,64 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Lazy;\n+import org.springframework.core.task.AsyncTaskExecutor;\n import org.springframework.core.task.TaskDecorator;\n+import org.springframework.core.task.TaskExecutor;\n import org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor;\n import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n-\n-import static org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME;\n+import org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n \n /**\n  * Declares the registerSecurityServletFilter bean method to be processed by\n  * the Spring container\n  */\n @Configuration\n @EnableConfigurationProperties(PxfServerProperties.class)\n-public class PxfConfiguration {\n+public class PxfConfiguration implements WebMvcConfigurer {\n+\n+    /**\n+     * Bean name of PXF's {@link TaskExecutor}.\n+     */\n+    public static final String PXF_APPLICATION_TASK_EXECUTOR_BEAN_NAME = \"pxfApplicationTaskExecutor\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273edaac04ffca972dba27ae9b4e221420bcf966"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzE1NzIzOnYy", "diffSide": "RIGHT", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo1MzowMFrOGoc55g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo1MzowMFrOGoc55g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2OTc5OA==", "bodyText": "why if ? We expect our own bean here, so cast or let it fail the startup if somehow misconfigured", "url": "https://github.com/greenplum-db/pxf/pull/396#discussion_r445069798", "createdAt": "2020-06-24T17:53:00Z", "author": {"login": "denalex"}, "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "diffHunk": "@@ -9,30 +10,64 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Lazy;\n+import org.springframework.core.task.AsyncTaskExecutor;\n import org.springframework.core.task.TaskDecorator;\n+import org.springframework.core.task.TaskExecutor;\n import org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor;\n import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n-\n-import static org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME;\n+import org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n \n /**\n  * Declares the registerSecurityServletFilter bean method to be processed by\n  * the Spring container\n  */\n @Configuration\n @EnableConfigurationProperties(PxfServerProperties.class)\n-public class PxfConfiguration {\n+public class PxfConfiguration implements WebMvcConfigurer {\n+\n+    /**\n+     * Bean name of PXF's {@link TaskExecutor}.\n+     */\n+    public static final String PXF_APPLICATION_TASK_EXECUTOR_BEAN_NAME = \"pxfApplicationTaskExecutor\";\n+\n+    private final ListableBeanFactory beanFactory;\n+\n+    /**\n+     * Constructs a PXF Configuration object with the provided\n+     * {@link ListableBeanFactory}\n+     *\n+     * @param beanFactory the beanFactory\n+     */\n+    public PxfConfiguration(ListableBeanFactory beanFactory) {\n+        this.beanFactory = beanFactory;\n+    }\n \n     /**\n-     * Configures the TaskExecutorBuilder to be used for async requests (i.e. Bridge\n+     * Configures the TaskExecutor to be used for async requests (i.e. Bridge\n      * Read).\n+     */\n+    @Override\n+    public void configureAsyncSupport(AsyncSupportConfigurer configurer) {\n+        Object taskExecutor = this.beanFactory\n+                .getBean(PXF_APPLICATION_TASK_EXECUTOR_BEAN_NAME);\n+        if (taskExecutor instanceof AsyncTaskExecutor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273edaac04ffca972dba27ae9b4e221420bcf966"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3387, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}